
10-Complete Code H7 FreeRTOS - 5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015d18  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000172c  08015fe8  08015fe8  00016fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017714  08017714  00018714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801771c  0801771c  0001871c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017720  08017720  00018720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  08017724  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006ac  240001dc  08017900  000191dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000888  08017900  00019888  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000191dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026aad  00000000  00000000  0001920a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000051cf  00000000  00000000  0003fcb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fd8  00000000  00000000  00044e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000187d  00000000  00000000  00046e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000a0a0  00000000  00000000  000486dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026cf4  00000000  00000000  0005277d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016ff15  00000000  00000000  00079471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e9386  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009dac  00000000  00000000  001e93cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  001f3178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08015fd0 	.word	0x08015fd0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e0 	.word	0x240001e0
 800030c:	08015fd0 	.word	0x08015fd0

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007cc:	f3bf 8f4f 	dsb	sy
}
 80007d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <__NVIC_SystemReset+0x24>)
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80007da:	4904      	ldr	r1, [pc, #16]	@ (80007ec <__NVIC_SystemReset+0x24>)
 80007dc:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <__NVIC_SystemReset+0x28>)
 80007de:	4313      	orrs	r3, r2
 80007e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80007e2:	f3bf 8f4f 	dsb	sy
}
 80007e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <__NVIC_SystemReset+0x20>
 80007ec:	e000ed00 	.word	0xe000ed00
 80007f0:	05fa0004 	.word	0x05fa0004

080007f4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000804:	2b40      	cmp	r3, #64	@ 0x40
 8000806:	d101      	bne.n	800080c <LL_USART_IsActiveFlag_TC+0x18>
 8000808:	2301      	movs	r3, #1
 800080a:	e000      	b.n	800080e <LL_USART_IsActiveFlag_TC+0x1a>
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <strip_brackets>:

uint8_t is_cmd_mode(void) {
    return cmd_mode;
}

void strip_brackets(char *str) {
 800081a:	b590      	push	{r4, r7, lr}
 800081c:	b085      	sub	sp, #20
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
    if (str[0] == '[') {
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b5b      	cmp	r3, #91	@ 0x5b
 8000828:	d10a      	bne.n	8000840 <strip_brackets+0x26>
        memmove(str, str + 1, strlen(str));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	1c5c      	adds	r4, r3, #1
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff fdce 	bl	80003d0 <strlen>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	4621      	mov	r1, r4
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f011 fcda 	bl	80121f4 <memmove>
    }
    char *end = strchr(str, ']');
 8000840:	215d      	movs	r1, #93	@ 0x5d
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f011 fcf8 	bl	8012238 <strchr>
 8000848:	60f8      	str	r0, [r7, #12]
    if (end) *end = '\0';
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <strip_brackets+0x3c>
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
}
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	bd90      	pop	{r4, r7, pc}
	...

08000860 <process_command>:

void process_command(char *cmd) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b0c4      	sub	sp, #272	@ 0x110
 8000864:	af0a      	add	r7, sp, #40	@ 0x28
 8000866:	6078      	str	r0, [r7, #4]
    strip_brackets(cmd);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ffd6 	bl	800081a <strip_brackets>

    if (strcmp(cmd, "CMD") == 0) {
 800086e:	49bc      	ldr	r1, [pc, #752]	@ (8000b60 <process_command+0x300>)
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff fd4d 	bl	8000310 <strcmp>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d10e      	bne.n	800089a <process_command+0x3a>
        cmd_mode = 1;
 800087c:	4bb9      	ldr	r3, [pc, #740]	@ (8000b64 <process_command+0x304>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
        printf("\r\n\r\nEntered command mode\r\n\r\n");
 8000882:	48b9      	ldr	r0, [pc, #740]	@ (8000b68 <process_command+0x308>)
 8000884:	f011 fb86 	bl	8011f94 <puts>
        main_led(0, 255, 0, 255, 1);
 8000888:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800088c:	23ff      	movs	r3, #255	@ 0xff
 800088e:	2200      	movs	r2, #0
 8000890:	21ff      	movs	r1, #255	@ 0xff
 8000892:	2000      	movs	r0, #0
 8000894:	f001 ff1a 	bl	80026cc <main_led>
        return;
 8000898:	e315      	b.n	8000ec6 <process_command+0x666>
    }

    if (!cmd_mode) {
 800089a:	4bb2      	ldr	r3, [pc, #712]	@ (8000b64 <process_command+0x304>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d103      	bne.n	80008ac <process_command+0x4c>
        printf("Not in command mode\n");
 80008a4:	48b1      	ldr	r0, [pc, #708]	@ (8000b6c <process_command+0x30c>)
 80008a6:	f011 fb75 	bl	8011f94 <puts>
        return;
 80008aa:	e30c      	b.n	8000ec6 <process_command+0x666>
    }

    if (strcmp(cmd, "exit") == 0) {
 80008ac:	49b0      	ldr	r1, [pc, #704]	@ (8000b70 <process_command+0x310>)
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff fd2e 	bl	8000310 <strcmp>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d138      	bne.n	800092c <process_command+0xcc>
        cmd_mode = 0;
 80008ba:	4baa      	ldr	r3, [pc, #680]	@ (8000b64 <process_command+0x304>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
        printf("\r\nExiting command mode, rebooting...\r\n\r\n");
 80008c0:	48ac      	ldr	r0, [pc, #688]	@ (8000b74 <process_command+0x314>)
 80008c2:	f011 fb67 	bl	8011f94 <puts>
        // Wait for UART transmission to complete
        while (!LL_USART_IsActiveFlag_TC(USART6)); // Ensure transmission complete
 80008c6:	bf00      	nop
 80008c8:	48ab      	ldr	r0, [pc, #684]	@ (8000b78 <process_command+0x318>)
 80008ca:	f7ff ff93 	bl	80007f4 <LL_USART_IsActiveFlag_TC>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d0f9      	beq.n	80008c8 <process_command+0x68>
        // Busy-wait instead of HAL_Delay
        for (volatile uint32_t i = 0; i < 1000000; i++); // ~200ms at 480MHz
 80008d4:	2300      	movs	r3, #0
 80008d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80008da:	e004      	b.n	80008e6 <process_command+0x86>
 80008dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80008e0:	3301      	adds	r3, #1
 80008e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80008e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80008ea:	4aa4      	ldr	r2, [pc, #656]	@ (8000b7c <process_command+0x31c>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d9f5      	bls.n	80008dc <process_command+0x7c>
        // Check for pending faults
        if (SCB->HFSR) {
 80008f0:	4ba3      	ldr	r3, [pc, #652]	@ (8000b80 <process_command+0x320>)
 80008f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d005      	beq.n	8000904 <process_command+0xa4>
            printf("Hard Fault pending: HFSR=0x%08lX\r\n", SCB->HFSR);
 80008f8:	4ba1      	ldr	r3, [pc, #644]	@ (8000b80 <process_command+0x320>)
 80008fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008fc:	4619      	mov	r1, r3
 80008fe:	48a1      	ldr	r0, [pc, #644]	@ (8000b84 <process_command+0x324>)
 8000900:	f011 fad8 	bl	8011eb4 <iprintf>
        }
        if (SCB->CFSR) {
 8000904:	4b9e      	ldr	r3, [pc, #632]	@ (8000b80 <process_command+0x320>)
 8000906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000908:	2b00      	cmp	r3, #0
 800090a:	d005      	beq.n	8000918 <process_command+0xb8>
            printf("Configurable Fault pending: CFSR=0x%08lX\r\n", SCB->CFSR);
 800090c:	4b9c      	ldr	r3, [pc, #624]	@ (8000b80 <process_command+0x320>)
 800090e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000910:	4619      	mov	r1, r3
 8000912:	489d      	ldr	r0, [pc, #628]	@ (8000b88 <process_command+0x328>)
 8000914:	f011 face 	bl	8011eb4 <iprintf>
        }
        printf("Disabling interrupts\r\n"); // Debug
 8000918:	489c      	ldr	r0, [pc, #624]	@ (8000b8c <process_command+0x32c>)
 800091a:	f011 fb3b 	bl	8011f94 <puts>
  __ASM volatile ("cpsid i" : : : "memory");
 800091e:	b672      	cpsid	i
}
 8000920:	bf00      	nop
        __disable_irq(); // Disable all interrupts
        printf("Triggering NVIC_SystemReset\r\n"); // Debug
 8000922:	489b      	ldr	r0, [pc, #620]	@ (8000b90 <process_command+0x330>)
 8000924:	f011 fb36 	bl	8011f94 <puts>
        NVIC_SystemReset(); // Primary reset
 8000928:	f7ff ff4e 	bl	80007c8 <__NVIC_SystemReset>
        printf("NVIC_SystemReset failed, trying SCB reset\r\n"); // Debug (should not reach)
        SCB->AIRCR = (0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk;
        printf("SCB reset triggered\r\n"); // Debug (should not reach)
        while (true); // Trap if reset fails
    }
    else if (strcmp(cmd, "cal_accel_gyro") == 0) {
 800092c:	4999      	ldr	r1, [pc, #612]	@ (8000b94 <process_command+0x334>)
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff fcee 	bl	8000310 <strcmp>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	f000 82c5 	beq.w	8000ec6 <process_command+0x666>
//        start_accel_and_gyro_calibration(&filter_state);
    }
    else if (strcmp(cmd, "cal_mag") == 0) {
 800093c:	4996      	ldr	r1, [pc, #600]	@ (8000b98 <process_command+0x338>)
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff fce6 	bl	8000310 <strcmp>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	f000 82bd 	beq.w	8000ec6 <process_command+0x666>
//        start_mag_calibration(&filter_state);
    }
    else if (strcmp(cmd, "cal_all") == 0) {
 800094c:	4993      	ldr	r1, [pc, #588]	@ (8000b9c <process_command+0x33c>)
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff fcde 	bl	8000310 <strcmp>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	f000 82b5 	beq.w	8000ec6 <process_command+0x666>
//        start_full_calibration(&filter_state);
    }
    else if (strcmp(cmd, "cancel_cal") == 0) {
 800095c:	4990      	ldr	r1, [pc, #576]	@ (8000ba0 <process_command+0x340>)
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff fcd6 	bl	8000310 <strcmp>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	f000 82ad 	beq.w	8000ec6 <process_command+0x666>
//        cancel_calibration();
    }
    else if (strcmp(cmd, "status") == 0) {
 800096c:	498d      	ldr	r1, [pc, #564]	@ (8000ba4 <process_command+0x344>)
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff fcce 	bl	8000310 <strcmp>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d103      	bne.n	8000982 <process_command+0x122>
        printf("Status OK\n");
 800097a:	488b      	ldr	r0, [pc, #556]	@ (8000ba8 <process_command+0x348>)
 800097c:	f011 fb0a 	bl	8011f94 <puts>
 8000980:	e2a1      	b.n	8000ec6 <process_command+0x666>
    }
    else if (strcmp(cmd, "main_led_ON") == 0) {
 8000982:	498a      	ldr	r1, [pc, #552]	@ (8000bac <process_command+0x34c>)
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff fcc3 	bl	8000310 <strcmp>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d10e      	bne.n	80009ae <process_command+0x14e>
        printf("CMD: Executing main_led_ON command\n");
 8000990:	4887      	ldr	r0, [pc, #540]	@ (8000bb0 <process_command+0x350>)
 8000992:	f011 faff 	bl	8011f94 <puts>
        main_led(0, 255, 0, 255, 1);
 8000996:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800099a:	23ff      	movs	r3, #255	@ 0xff
 800099c:	2200      	movs	r2, #0
 800099e:	21ff      	movs	r1, #255	@ 0xff
 80009a0:	2000      	movs	r0, #0
 80009a2:	f001 fe93 	bl	80026cc <main_led>
        printf("Main LED ON\n");
 80009a6:	4883      	ldr	r0, [pc, #524]	@ (8000bb4 <process_command+0x354>)
 80009a8:	f011 faf4 	bl	8011f94 <puts>
 80009ac:	e28b      	b.n	8000ec6 <process_command+0x666>
    }
    else if (strcmp(cmd, "main_led_OFF") == 0) {
 80009ae:	4982      	ldr	r1, [pc, #520]	@ (8000bb8 <process_command+0x358>)
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff fcad 	bl	8000310 <strcmp>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d10e      	bne.n	80009da <process_command+0x17a>
        printf("CMD: Executing main_led_OFF command\n");
 80009bc:	487f      	ldr	r0, [pc, #508]	@ (8000bbc <process_command+0x35c>)
 80009be:	f011 fae9 	bl	8011f94 <puts>
        main_led(0, 0, 0, 0, 0);
 80009c2:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8000bc0 <process_command+0x360>
 80009c6:	2300      	movs	r3, #0
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2000      	movs	r0, #0
 80009ce:	f001 fe7d 	bl	80026cc <main_led>
        printf("Main LED OFF\n");
 80009d2:	487c      	ldr	r0, [pc, #496]	@ (8000bc4 <process_command+0x364>)
 80009d4:	f011 fade 	bl	8011f94 <puts>
 80009d8:	e275      	b.n	8000ec6 <process_command+0x666>
    }
    else if (strncmp(cmd, "set_main_led", 12) == 0) {
 80009da:	220c      	movs	r2, #12
 80009dc:	497a      	ldr	r1, [pc, #488]	@ (8000bc8 <process_command+0x368>)
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f011 fc37 	bl	8012252 <strncmp>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d13a      	bne.n	8000a60 <process_command+0x200>
        int index, r, g, b;
        float brightness;
        char *params_start = strchr(cmd, '(');
 80009ea:	2128      	movs	r1, #40	@ 0x28
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f011 fc23 	bl	8012238 <strchr>
 80009f2:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        if (params_start) {
 80009f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 8263 	beq.w	8000ec6 <process_command+0x666>
            if (sscanf(params_start, "(%d,%d,%d,%d,%f)", &index, &r, &g, &b, &brightness) == 5) {
 8000a00:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8000a04:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8000a08:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000a0c:	9302      	str	r3, [sp, #8]
 8000a0e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	496b      	ldr	r1, [pc, #428]	@ (8000bcc <process_command+0x36c>)
 8000a1e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8000a22:	f011 fae1 	bl	8011fe8 <siscanf>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b05      	cmp	r3, #5
 8000a2a:	d115      	bne.n	8000a58 <process_command+0x1f8>
                main_led(index, r, g, b, brightness);
 8000a2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a36:	b2d9      	uxtb	r1, r3
 8000a38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8000a48:	eeb0 0a67 	vmov.f32	s0, s15
 8000a4c:	f001 fe3e 	bl	80026cc <main_led>
                printf("Main LED Set\n");
 8000a50:	485f      	ldr	r0, [pc, #380]	@ (8000bd0 <process_command+0x370>)
 8000a52:	f011 fa9f 	bl	8011f94 <puts>
 8000a56:	e236      	b.n	8000ec6 <process_command+0x666>
            } else {
                printf("Invalid Parameters\n");
 8000a58:	485e      	ldr	r0, [pc, #376]	@ (8000bd4 <process_command+0x374>)
 8000a5a:	f011 fa9b 	bl	8011f94 <puts>
 8000a5e:	e232      	b.n	8000ec6 <process_command+0x666>
            }
        }
    }
    else if (strncmp(cmd, "SetRollPID", 10) == 0) {
 8000a60:	220a      	movs	r2, #10
 8000a62:	495d      	ldr	r1, [pc, #372]	@ (8000bd8 <process_command+0x378>)
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f011 fbf4 	bl	8012252 <strncmp>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	f040 80bf 	bne.w	8000bf0 <process_command+0x390>
        float outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd;
        char *params_start = strchr(cmd, '(');
 8000a72:	2128      	movs	r1, #40	@ 0x28
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f011 fbdf 	bl	8012238 <strchr>
 8000a7a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (params_start) {
 8000a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d068      	beq.n	8000b58 <process_command+0x2f8>
            if (sscanf(params_start, "({%f,%f,%f},{%f,%f,%f})",
 8000a86:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8000a8a:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 8000a8e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000a92:	9303      	str	r3, [sp, #12]
 8000a94:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	494c      	ldr	r1, [pc, #304]	@ (8000bdc <process_command+0x37c>)
 8000aaa:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000aae:	f011 fa9b 	bl	8011fe8 <siscanf>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b06      	cmp	r3, #6
 8000ab6:	d14b      	bne.n	8000b50 <process_command+0x2f0>
                       &outer_kp, &outer_ki, &outer_kd, &inner_kp, &inner_ki, &inner_kd) == 6) {
                DualPID_t roll_pid = {
 8000ab8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000abc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000ac0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000ac4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000ac8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000acc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000ad0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000ad4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000adc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000ae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                    .out = {outer_kp, outer_ki, outer_kd},
                    .in = {inner_kp, inner_ki, inner_kd}
                };
                if (EEPROM_SetRollPID(&roll_pid) == W25Qxx_OK) {
 8000ae8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 fc0b 	bl	8001308 <EEPROM_SetRollPID>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d127      	bne.n	8000b48 <process_command+0x2e8>
                    printf("Roll PID Set: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000af8:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8000afc:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8000b00:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8000b04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b08:	edd7 6a2d 	vldr	s13, [r7, #180]	@ 0xb4
 8000b0c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000b10:	edd7 5a2c 	vldr	s11, [r7, #176]	@ 0xb0
 8000b14:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000b18:	edd7 4a2b 	vldr	s9, [r7, #172]	@ 0xac
 8000b1c:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000b20:	edd7 3a2a 	vldr	s7, [r7, #168]	@ 0xa8
 8000b24:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000b28:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000b2c:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000b30:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000b34:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000b38:	ed8d 7b00 	vstr	d7, [sp]
 8000b3c:	ec53 2b12 	vmov	r2, r3, d2
 8000b40:	4827      	ldr	r0, [pc, #156]	@ (8000be0 <process_command+0x380>)
 8000b42:	f011 f9b7 	bl	8011eb4 <iprintf>
 8000b46:	e1be      	b.n	8000ec6 <process_command+0x666>
                           outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd);
                } else {
                    printf("Failed to set Roll PID\n");
 8000b48:	4826      	ldr	r0, [pc, #152]	@ (8000be4 <process_command+0x384>)
 8000b4a:	f011 fa23 	bl	8011f94 <puts>
 8000b4e:	e1ba      	b.n	8000ec6 <process_command+0x666>
                }
            } else {
                printf("Invalid Roll PID Parameters\n");
 8000b50:	4825      	ldr	r0, [pc, #148]	@ (8000be8 <process_command+0x388>)
 8000b52:	f011 fa1f 	bl	8011f94 <puts>
 8000b56:	e1b6      	b.n	8000ec6 <process_command+0x666>
            }
        } else {
            printf("Invalid Roll PID Command Format\n");
 8000b58:	4824      	ldr	r0, [pc, #144]	@ (8000bec <process_command+0x38c>)
 8000b5a:	f011 fa1b 	bl	8011f94 <puts>
 8000b5e:	e1b2      	b.n	8000ec6 <process_command+0x666>
 8000b60:	08015fe8 	.word	0x08015fe8
 8000b64:	240001f8 	.word	0x240001f8
 8000b68:	08015fec 	.word	0x08015fec
 8000b6c:	08016008 	.word	0x08016008
 8000b70:	0801601c 	.word	0x0801601c
 8000b74:	08016024 	.word	0x08016024
 8000b78:	40011400 	.word	0x40011400
 8000b7c:	000f423f 	.word	0x000f423f
 8000b80:	e000ed00 	.word	0xe000ed00
 8000b84:	0801604c 	.word	0x0801604c
 8000b88:	08016070 	.word	0x08016070
 8000b8c:	0801609c 	.word	0x0801609c
 8000b90:	080160b4 	.word	0x080160b4
 8000b94:	080160d4 	.word	0x080160d4
 8000b98:	080160e4 	.word	0x080160e4
 8000b9c:	080160ec 	.word	0x080160ec
 8000ba0:	080160f4 	.word	0x080160f4
 8000ba4:	08016100 	.word	0x08016100
 8000ba8:	08016108 	.word	0x08016108
 8000bac:	08016114 	.word	0x08016114
 8000bb0:	08016120 	.word	0x08016120
 8000bb4:	08016144 	.word	0x08016144
 8000bb8:	08016150 	.word	0x08016150
 8000bbc:	08016160 	.word	0x08016160
 8000bc0:	00000000 	.word	0x00000000
 8000bc4:	08016184 	.word	0x08016184
 8000bc8:	08016194 	.word	0x08016194
 8000bcc:	080161a4 	.word	0x080161a4
 8000bd0:	080161b8 	.word	0x080161b8
 8000bd4:	080161c8 	.word	0x080161c8
 8000bd8:	080161dc 	.word	0x080161dc
 8000bdc:	080161e8 	.word	0x080161e8
 8000be0:	08016200 	.word	0x08016200
 8000be4:	0801624c 	.word	0x0801624c
 8000be8:	08016264 	.word	0x08016264
 8000bec:	08016280 	.word	0x08016280
        }
    }
    else if (strncmp(cmd, "SetPitchPID", 11) == 0) {
 8000bf0:	220b      	movs	r2, #11
 8000bf2:	49b6      	ldr	r1, [pc, #728]	@ (8000ecc <process_command+0x66c>)
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f011 fb2c 	bl	8012252 <strncmp>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d16e      	bne.n	8000cde <process_command+0x47e>
        float outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd;
        char *params_start = strchr(cmd, '(');
 8000c00:	2128      	movs	r1, #40	@ 0x28
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f011 fb18 	bl	8012238 <strchr>
 8000c08:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
        if (params_start) {
 8000c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d060      	beq.n	8000cd6 <process_command+0x476>
            if (sscanf(params_start, "({%f,%f,%f},{%f,%f,%f})",
 8000c14:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8000c18:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8000c1c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000c20:	9303      	str	r3, [sp, #12]
 8000c22:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000c26:	9302      	str	r3, [sp, #8]
 8000c28:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	460b      	mov	r3, r1
 8000c36:	49a6      	ldr	r1, [pc, #664]	@ (8000ed0 <process_command+0x670>)
 8000c38:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8000c3c:	f011 f9d4 	bl	8011fe8 <siscanf>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d143      	bne.n	8000cce <process_command+0x46e>
                       &outer_kp, &outer_ki, &outer_kd, &inner_kp, &inner_ki, &inner_kd) == 6) {
                DualPID_t pitch_pid = {
 8000c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8000c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c50:	667b      	str	r3, [r7, #100]	@ 0x64
 8000c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000c56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000c58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000c5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c60:	673b      	str	r3, [r7, #112]	@ 0x70
 8000c62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000c64:	677b      	str	r3, [r7, #116]	@ 0x74
                    .out = {outer_kp, outer_ki, outer_kd},
                    .in = {inner_kp, inner_ki, inner_kd}
                };
                if (EEPROM_SetPitchPID(&pitch_pid) == W25Qxx_OK) {
 8000c66:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fb9e 	bl	80013ac <EEPROM_SetPitchPID>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d127      	bne.n	8000cc6 <process_command+0x466>
                    printf("Pitch PID Set: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000c76:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000c7a:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8000c7e:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000c82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c86:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8000c8a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c8e:	edd7 5a20 	vldr	s11, [r7, #128]	@ 0x80
 8000c92:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000c96:	edd7 4a1f 	vldr	s9, [r7, #124]	@ 0x7c
 8000c9a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000c9e:	edd7 3a1e 	vldr	s7, [r7, #120]	@ 0x78
 8000ca2:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000ca6:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000caa:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000cae:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000cb2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000cb6:	ed8d 7b00 	vstr	d7, [sp]
 8000cba:	ec53 2b12 	vmov	r2, r3, d2
 8000cbe:	4885      	ldr	r0, [pc, #532]	@ (8000ed4 <process_command+0x674>)
 8000cc0:	f011 f8f8 	bl	8011eb4 <iprintf>
 8000cc4:	e0ff      	b.n	8000ec6 <process_command+0x666>
                           outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd);
                } else {
                    printf("Failed to set Pitch PID\n");
 8000cc6:	4884      	ldr	r0, [pc, #528]	@ (8000ed8 <process_command+0x678>)
 8000cc8:	f011 f964 	bl	8011f94 <puts>
 8000ccc:	e0fb      	b.n	8000ec6 <process_command+0x666>
                }
            } else {
                printf("Invalid Pitch PID Parameters\n");
 8000cce:	4883      	ldr	r0, [pc, #524]	@ (8000edc <process_command+0x67c>)
 8000cd0:	f011 f960 	bl	8011f94 <puts>
 8000cd4:	e0f7      	b.n	8000ec6 <process_command+0x666>
            }
        } else {
            printf("Invalid Pitch PID Command Format\n");
 8000cd6:	4882      	ldr	r0, [pc, #520]	@ (8000ee0 <process_command+0x680>)
 8000cd8:	f011 f95c 	bl	8011f94 <puts>
 8000cdc:	e0f3      	b.n	8000ec6 <process_command+0x666>
        }
    }
    else if (strncmp(cmd, "SetYawRatePID", 13) == 0) {
 8000cde:	220d      	movs	r2, #13
 8000ce0:	4980      	ldr	r1, [pc, #512]	@ (8000ee4 <process_command+0x684>)
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f011 fab5 	bl	8012252 <strncmp>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d149      	bne.n	8000d82 <process_command+0x522>
        float kp, ki, kd;
        char *params_start = strchr(cmd, '(');
 8000cee:	2128      	movs	r1, #40	@ 0x28
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f011 faa1 	bl	8012238 <strchr>
 8000cf6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        if (params_start) {
 8000cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d03b      	beq.n	8000d7a <process_command+0x51a>
            if (sscanf(params_start, "({%f,%f,%f})", &kp, &ki, &kd) == 3) {
 8000d02:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000d06:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8000d0a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	460b      	mov	r3, r1
 8000d12:	4975      	ldr	r1, [pc, #468]	@ (8000ee8 <process_command+0x688>)
 8000d14:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8000d18:	f011 f966 	bl	8011fe8 <siscanf>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d127      	bne.n	8000d72 <process_command+0x512>
                PID_t yaw_rate_pid = {kp, ki, kd};
 8000d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d2c:	653b      	str	r3, [r7, #80]	@ 0x50
                if (EEPROM_SetYawRatePID(&yaw_rate_pid) == W25Qxx_OK) {
 8000d2e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fb8c 	bl	8001450 <EEPROM_SetYawRatePID>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d115      	bne.n	8000d6a <process_command+0x50a>
                    printf("Yaw Rate PID Set: Kp=%.3f, Ki=%.3f, Kd=%.3f\n", kp, ki, kd);
 8000d3e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000d42:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d46:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000d4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d4e:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8000d52:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000d56:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000d5a:	ed8d 7b00 	vstr	d7, [sp]
 8000d5e:	ec53 2b15 	vmov	r2, r3, d5
 8000d62:	4862      	ldr	r0, [pc, #392]	@ (8000eec <process_command+0x68c>)
 8000d64:	f011 f8a6 	bl	8011eb4 <iprintf>
 8000d68:	e0ad      	b.n	8000ec6 <process_command+0x666>
                } else {
                    printf("Failed to set Yaw Rate PID\n");
 8000d6a:	4861      	ldr	r0, [pc, #388]	@ (8000ef0 <process_command+0x690>)
 8000d6c:	f011 f912 	bl	8011f94 <puts>
 8000d70:	e0a9      	b.n	8000ec6 <process_command+0x666>
                }
            } else {
                printf("Invalid Yaw Rate PID Parameters\n");
 8000d72:	4860      	ldr	r0, [pc, #384]	@ (8000ef4 <process_command+0x694>)
 8000d74:	f011 f90e 	bl	8011f94 <puts>
 8000d78:	e0a5      	b.n	8000ec6 <process_command+0x666>
            }
        } else {
            printf("Invalid Yaw Rate PID Command Format\n");
 8000d7a:	485f      	ldr	r0, [pc, #380]	@ (8000ef8 <process_command+0x698>)
 8000d7c:	f011 f90a 	bl	8011f94 <puts>
 8000d80:	e0a1      	b.n	8000ec6 <process_command+0x666>
        }
    }
    else if (strcmp(cmd, "get_roll_pid") == 0) {
 8000d82:	495e      	ldr	r1, [pc, #376]	@ (8000efc <process_command+0x69c>)
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fac3 	bl	8000310 <strcmp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d133      	bne.n	8000df8 <process_command+0x598>
        DualPID_t roll_pid;
        if (EEPROM_GetRollPID(&roll_pid) == W25Qxx_OK) {
 8000d90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 fa95 	bl	80012c4 <EEPROM_GetRollPID>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d127      	bne.n	8000df0 <process_command+0x590>
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8000da0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000da4:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8000da8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000dac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8000db0:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000db4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8000db8:	edd7 5a0f 	vldr	s11, [r7, #60]	@ 0x3c
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000dbc:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8000dc0:	edd7 4a10 	vldr	s9, [r7, #64]	@ 0x40
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000dc4:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8000dc8:	edd7 3a11 	vldr	s7, [r7, #68]	@ 0x44
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000dcc:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000dd0:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000dd4:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000dd8:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000ddc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000de0:	ed8d 7b00 	vstr	d7, [sp]
 8000de4:	ec53 2b12 	vmov	r2, r3, d2
 8000de8:	4845      	ldr	r0, [pc, #276]	@ (8000f00 <process_command+0x6a0>)
 8000dea:	f011 f863 	bl	8011eb4 <iprintf>
 8000dee:	e06a      	b.n	8000ec6 <process_command+0x666>
        } else {
            printf("Failed to get Roll PID\n");
 8000df0:	4844      	ldr	r0, [pc, #272]	@ (8000f04 <process_command+0x6a4>)
 8000df2:	f011 f8cf 	bl	8011f94 <puts>
 8000df6:	e066      	b.n	8000ec6 <process_command+0x666>
        }
    }
    else if (strcmp(cmd, "get_pitch_pid") == 0) {
 8000df8:	4943      	ldr	r1, [pc, #268]	@ (8000f08 <process_command+0x6a8>)
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fa88 	bl	8000310 <strcmp>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d133      	bne.n	8000e6e <process_command+0x60e>
        DualPID_t pitch_pid;
        if (EEPROM_GetPitchPID(&pitch_pid) == W25Qxx_OK) {
 8000e06:	f107 0318 	add.w	r3, r7, #24
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 faac 	bl	8001368 <EEPROM_GetPitchPID>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d127      	bne.n	8000e66 <process_command+0x606>
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 8000e16:	edd7 7a06 	vldr	s15, [r7, #24]
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e1a:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 8000e1e:	edd7 7a07 	vldr	s15, [r7, #28]
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 8000e26:	edd7 6a08 	vldr	s13, [r7, #32]
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e2a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 8000e2e:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e32:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 8000e36:	edd7 4a0a 	vldr	s9, [r7, #40]	@ 0x28
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e3a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 8000e3e:	edd7 3a0b 	vldr	s7, [r7, #44]	@ 0x2c
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e42:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000e46:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000e4a:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000e4e:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000e52:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000e56:	ed8d 7b00 	vstr	d7, [sp]
 8000e5a:	ec53 2b12 	vmov	r2, r3, d2
 8000e5e:	482b      	ldr	r0, [pc, #172]	@ (8000f0c <process_command+0x6ac>)
 8000e60:	f011 f828 	bl	8011eb4 <iprintf>
 8000e64:	e02f      	b.n	8000ec6 <process_command+0x666>
        } else {
            printf("Failed to get Pitch PID\n");
 8000e66:	482a      	ldr	r0, [pc, #168]	@ (8000f10 <process_command+0x6b0>)
 8000e68:	f011 f894 	bl	8011f94 <puts>
 8000e6c:	e02b      	b.n	8000ec6 <process_command+0x666>
        }
    }
    else if (strcmp(cmd, "get_yaw_rate_pid") == 0) {
 8000e6e:	4929      	ldr	r1, [pc, #164]	@ (8000f14 <process_command+0x6b4>)
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff fa4d 	bl	8000310 <strcmp>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d121      	bne.n	8000ec0 <process_command+0x660>
        PID_t yaw_rate_pid;
        if (EEPROM_GetYawRatePID(&yaw_rate_pid) == W25Qxx_OK) {
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fac3 	bl	800140c <EEPROM_GetYawRatePID>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d115      	bne.n	8000eb8 <process_command+0x658>
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8000e8c:	edd7 7a03 	vldr	s15, [r7, #12]
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e90:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8000e94:	edd7 7a04 	vldr	s15, [r7, #16]
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8000e9c:	edd7 6a05 	vldr	s13, [r7, #20]
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000ea0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ea4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000ea8:	ed8d 7b00 	vstr	d7, [sp]
 8000eac:	ec53 2b15 	vmov	r2, r3, d5
 8000eb0:	4819      	ldr	r0, [pc, #100]	@ (8000f18 <process_command+0x6b8>)
 8000eb2:	f010 ffff 	bl	8011eb4 <iprintf>
 8000eb6:	e006      	b.n	8000ec6 <process_command+0x666>
        } else {
            printf("Failed to get Yaw Rate PID\n");
 8000eb8:	4818      	ldr	r0, [pc, #96]	@ (8000f1c <process_command+0x6bc>)
 8000eba:	f011 f86b 	bl	8011f94 <puts>
 8000ebe:	e002      	b.n	8000ec6 <process_command+0x666>
        }
    }
    else {
        printf("Unknown Command\n");
 8000ec0:	4817      	ldr	r0, [pc, #92]	@ (8000f20 <process_command+0x6c0>)
 8000ec2:	f011 f867 	bl	8011f94 <puts>
    }
}
 8000ec6:	37e8      	adds	r7, #232	@ 0xe8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	080162a0 	.word	0x080162a0
 8000ed0:	080161e8 	.word	0x080161e8
 8000ed4:	080162ac 	.word	0x080162ac
 8000ed8:	080162f8 	.word	0x080162f8
 8000edc:	08016310 	.word	0x08016310
 8000ee0:	08016330 	.word	0x08016330
 8000ee4:	08016354 	.word	0x08016354
 8000ee8:	08016364 	.word	0x08016364
 8000eec:	08016374 	.word	0x08016374
 8000ef0:	080163a4 	.word	0x080163a4
 8000ef4:	080163c0 	.word	0x080163c0
 8000ef8:	080163e0 	.word	0x080163e0
 8000efc:	08016404 	.word	0x08016404
 8000f00:	08016414 	.word	0x08016414
 8000f04:	0801645c 	.word	0x0801645c
 8000f08:	08016474 	.word	0x08016474
 8000f0c:	08016484 	.word	0x08016484
 8000f10:	080164cc 	.word	0x080164cc
 8000f14:	080164e4 	.word	0x080164e4
 8000f18:	080164f8 	.word	0x080164f8
 8000f1c:	08016524 	.word	0x08016524
 8000f20:	08016540 	.word	0x08016540

08000f24 <EEPROM_Init>:

/**
  * @brief Initialize the W25Qxx flash memory
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_Init(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b096      	sub	sp, #88	@ 0x58
 8000f28:	af00      	add	r7, sp, #0
    uint8_t jedec_id[3];
    OSPI_RegularCmdTypeDef cmd = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2250      	movs	r2, #80	@ 0x50
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f011 f979 	bl	8012228 <memset>

    /* Configure command to read JEDEC ID */
    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
    cmd.Instruction = W25Qxx_CMD_JEDEC_ID;
 8000f3a:	239f      	movs	r3, #159	@ 0x9f
 8000f3c:	60fb      	str	r3, [r7, #12]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	613b      	str	r3, [r7, #16]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8000f4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    cmd.NbData = 3;
 8000f54:	2303      	movs	r3, #3
 8000f56:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.DummyCycles = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f66:	4619      	mov	r1, r3
 8000f68:	4815      	ldr	r0, [pc, #84]	@ (8000fc0 <EEPROM_Init+0x9c>)
 8000f6a:	f009 f985 	bl	800a278 <HAL_OSPI_Command>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d005      	beq.n	8000f80 <EEPROM_Init+0x5c>
        printf("Failed to configure JEDEC ID command\r\n");
 8000f74:	4813      	ldr	r0, [pc, #76]	@ (8000fc4 <EEPROM_Init+0xa0>)
 8000f76:	f011 f80d 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f7e:	e01b      	b.n	8000fb8 <EEPROM_Init+0x94>
    }

    if (HAL_OSPI_Receive(&hospi1, jedec_id, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	@ (8000fc0 <EEPROM_Init+0x9c>)
 8000f8c:	f009 fa74 	bl	800a478 <HAL_OSPI_Receive>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <EEPROM_Init+0x7e>
        printf("Failed to read JEDEC ID\r\n");
 8000f96:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <EEPROM_Init+0xa4>)
 8000f98:	f010 fffc 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fa0:	e00a      	b.n	8000fb8 <EEPROM_Init+0x94>
    }

    /* Check for valid JEDEC ID (example: Winbond W25Q series) */
    if (jedec_id[0] != 0xEF) { // Manufacturer ID for Winbond
 8000fa2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000fa6:	2bef      	cmp	r3, #239	@ 0xef
 8000fa8:	d005      	beq.n	8000fb6 <EEPROM_Init+0x92>
        printf("Invalid JEDEC ID\r\n");
 8000faa:	4808      	ldr	r0, [pc, #32]	@ (8000fcc <EEPROM_Init+0xa8>)
 8000fac:	f010 fff2 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fb4:	e000      	b.n	8000fb8 <EEPROM_Init+0x94>
    }

    return W25Qxx_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3758      	adds	r7, #88	@ 0x58
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2400053c 	.word	0x2400053c
 8000fc4:	08016550 	.word	0x08016550
 8000fc8:	08016578 	.word	0x08016578
 8000fcc:	08016594 	.word	0x08016594

08000fd0 <EEPROM_ReadConfig>:
/**
  * @brief Read configuration from EEPROM
  * @param config Pointer to DroneConfig_t structure
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_ReadConfig(DroneConfig_t *config) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0a8      	sub	sp, #160	@ 0xa0
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    uint8_t buffer[sizeof(DroneConfig_t)];
    if (W25Qxx_Read(W25Qxx_CONFIG_ADDRESS, buffer, sizeof(DroneConfig_t)) != W25Qxx_OK) {
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2290      	movs	r2, #144	@ 0x90
 8000fde:	4619      	mov	r1, r3
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 fad9 	bl	8001598 <W25Qxx_Read>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <EEPROM_ReadConfig+0x28>
        printf("Failed to read data from flash\r\n");
 8000fec:	4812      	ldr	r0, [pc, #72]	@ (8001038 <EEPROM_ReadConfig+0x68>)
 8000fee:	f010 ffd1 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ff6:	e01b      	b.n	8001030 <EEPROM_ReadConfig+0x60>
    }

    memcpy(config, buffer, sizeof(DroneConfig_t));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2290      	movs	r2, #144	@ 0x90
 8001002:	4619      	mov	r1, r3
 8001004:	f011 f9af 	bl	8012366 <memcpy>
    uint32_t calculated_crc = CalculateCRC32((uint8_t*)config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8001008:	218c      	movs	r1, #140	@ 0x8c
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f83c 	bl	8001088 <CalculateCRC32>
 8001010:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (calculated_crc != config->crc) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800101a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800101e:	429a      	cmp	r2, r3
 8001020:	d005      	beq.n	800102e <EEPROM_ReadConfig+0x5e>
        printf("EEPROM config CRC mismatch\r\n");
 8001022:	4806      	ldr	r0, [pc, #24]	@ (800103c <EEPROM_ReadConfig+0x6c>)
 8001024:	f010 ffb6 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 8001028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800102c:	e000      	b.n	8001030 <EEPROM_ReadConfig+0x60>
    }

    return W25Qxx_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	37a0      	adds	r7, #160	@ 0xa0
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	080165a8 	.word	0x080165a8
 800103c:	080165c8 	.word	0x080165c8

08001040 <EEPROM_WriteConfig>:
/**
  * @brief Write configuration to EEPROM
  * @param config Pointer to DroneConfig_t structure
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_WriteConfig(DroneConfig_t *config) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b0a6      	sub	sp, #152	@ 0x98
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    uint8_t buffer[sizeof(DroneConfig_t)];
    memcpy(buffer, config, sizeof(DroneConfig_t));
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	4611      	mov	r1, r2
 8001050:	2290      	movs	r2, #144	@ 0x90
 8001052:	4618      	mov	r0, r3
 8001054:	f011 f987 	bl	8012366 <memcpy>

    if (W25Qxx_Write(W25Qxx_CONFIG_ADDRESS, buffer, sizeof(DroneConfig_t)) != W25Qxx_OK) {
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	2290      	movs	r2, #144	@ 0x90
 800105e:	4619      	mov	r1, r3
 8001060:	2000      	movs	r0, #0
 8001062:	f000 faed 	bl	8001640 <W25Qxx_Write>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <EEPROM_WriteConfig+0x38>
        printf("Failed to write data to flash\r\n");
 800106c:	4805      	ldr	r0, [pc, #20]	@ (8001084 <EEPROM_WriteConfig+0x44>)
 800106e:	f010 ff91 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001076:	e000      	b.n	800107a <EEPROM_WriteConfig+0x3a>
    }

    return W25Qxx_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3798      	adds	r7, #152	@ 0x98
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	080165e4 	.word	0x080165e4

08001088 <CalculateCRC32>:
  * @brief Calculate CRC32 for data integrity
  * @param data Pointer to data
  * @param length Length of data
  * @retval uint32_t CRC value
  */
uint32_t CalculateCRC32(const uint8_t *data, uint32_t length) {
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001096:	617b      	str	r3, [r7, #20]
    const uint32_t polynomial = 0x04C11DB7;
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <CalculateCRC32+0x70>)
 800109a:	60bb      	str	r3, [r7, #8]

    for (uint32_t i = 0; i < length; i++) {
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	e01f      	b.n	80010e2 <CalculateCRC32+0x5a>
        crc ^= (uint32_t)data[i] << 24;
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	061b      	lsls	r3, r3, #24
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	4053      	eors	r3, r2
 80010b0:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	e00e      	b.n	80010d6 <CalculateCRC32+0x4e>
            if (crc & 0x80000000) {
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da05      	bge.n	80010ca <CalculateCRC32+0x42>
                crc = (crc << 1) ^ polynomial;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	4053      	eors	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	e002      	b.n	80010d0 <CalculateCRC32+0x48>
            } else {
                crc <<= 1;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	3301      	adds	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	d9ed      	bls.n	80010b8 <CalculateCRC32+0x30>
    for (uint32_t i = 0; i < length; i++) {
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	3301      	adds	r3, #1
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d3db      	bcc.n	80010a2 <CalculateCRC32+0x1a>
            }
        }
    }
    return crc;
 80010ea:	697b      	ldr	r3, [r7, #20]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	04c11db7 	.word	0x04c11db7

080010fc <EEPROM_GetAccelCalibration>:
/**
  * @brief Get accelerometer calibration data
  * @param accel_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetAccelCalibration(float accel_cal[3]) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0aa      	sub	sp, #168	@ 0xa8
 8001100:	af04      	add	r7, sp, #16
 8001102:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff61 	bl	8000fd0 <EEPROM_ReadConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d012      	beq.n	800113a <EEPROM_GetAccelCalibration+0x3e>
        printf("Failed to read config during GetAccelCalibration\r\n");
 8001114:	481c      	ldr	r0, [pc, #112]	@ (8001188 <EEPROM_GetAccelCalibration+0x8c>)
 8001116:	f010 ff3d 	bl	8011f94 <puts>
        accel_cal[0] = accel_cal[1] = accel_cal[2] = 0.0f; // Initialize on error
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f103 0208 	add.w	r2, r3, #8
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3304      	adds	r3, #4
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 8001134:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001138:	e021      	b.n	800117e <EEPROM_GetAccelCalibration+0x82>
    }
    memcpy(accel_cal, config.accel_cal, 3 * sizeof(float));
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	220c      	movs	r2, #12
 8001140:	4619      	mov	r1, r3
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f011 f90f 	bl	8012366 <memcpy>
    printf("Retrieved accel_cal: X=%f, Y=%f, Z=%f\r\n", accel_cal[0], accel_cal[1], accel_cal[2]);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3304      	adds	r3, #4
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3308      	adds	r3, #8
 8001162:	edd3 6a00 	vldr	s13, [r3]
 8001166:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800116a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800116e:	ed8d 7b00 	vstr	d7, [sp]
 8001172:	ec53 2b15 	vmov	r2, r3, d5
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <EEPROM_GetAccelCalibration+0x90>)
 8001178:	f010 fe9c 	bl	8011eb4 <iprintf>
    return W25Qxx_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3798      	adds	r7, #152	@ 0x98
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	08016604 	.word	0x08016604
 800118c:	08016638 	.word	0x08016638

08001190 <EEPROM_GetGyroCalibration>:
/**
  * @brief Get gyroscope calibration data
  * @param gyro_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetGyroCalibration(float gyro_cal[3]) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b0aa      	sub	sp, #168	@ 0xa8
 8001194:	af04      	add	r7, sp, #16
 8001196:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff17 	bl	8000fd0 <EEPROM_ReadConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d012      	beq.n	80011ce <EEPROM_GetGyroCalibration+0x3e>
        printf("Failed to read config during GetGyroCalibration\r\n");
 80011a8:	481c      	ldr	r0, [pc, #112]	@ (800121c <EEPROM_GetGyroCalibration+0x8c>)
 80011aa:	f010 fef3 	bl	8011f94 <puts>
        gyro_cal[0] = gyro_cal[1] = gyro_cal[2] = 0.0f; // Initialize on error
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f103 0208 	add.w	r2, r3, #8
 80011b4:	f04f 0300 	mov.w	r3, #0
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3304      	adds	r3, #4
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011cc:	e022      	b.n	8001214 <EEPROM_GetGyroCalibration+0x84>
    }
    memcpy(gyro_cal, config.gyro_cal, 3 * sizeof(float));
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	330c      	adds	r3, #12
 80011d4:	220c      	movs	r2, #12
 80011d6:	4619      	mov	r1, r3
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f011 f8c4 	bl	8012366 <memcpy>
    printf("Retrieved gyro_cal: X=%f, Y=%f, Z=%f\r\n", gyro_cal[0], gyro_cal[1], gyro_cal[2]);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3304      	adds	r3, #4
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3308      	adds	r3, #8
 80011f8:	edd3 6a00 	vldr	s13, [r3]
 80011fc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001200:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001204:	ed8d 7b00 	vstr	d7, [sp]
 8001208:	ec53 2b15 	vmov	r2, r3, d5
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <EEPROM_GetGyroCalibration+0x90>)
 800120e:	f010 fe51 	bl	8011eb4 <iprintf>
    return W25Qxx_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3798      	adds	r7, #152	@ 0x98
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	08016694 	.word	0x08016694
 8001220:	080166c8 	.word	0x080166c8

08001224 <EEPROM_GetMagCalibration>:
/**
  * @brief Get magnetometer calibration data
  * @param mag_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetMagCalibration(float mag_cal[3]) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b0a6      	sub	sp, #152	@ 0x98
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fecd 	bl	8000fd0 <EEPROM_ReadConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d012      	beq.n	8001262 <EEPROM_GetMagCalibration+0x3e>
        printf("Failed to read config during GetMagCalibration\r\n");
 800123c:	480f      	ldr	r0, [pc, #60]	@ (800127c <EEPROM_GetMagCalibration+0x58>)
 800123e:	f010 fea9 	bl	8011f94 <puts>
        mag_cal[0] = mag_cal[1] = mag_cal[2] = 0.0f; // Initialize on error
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f103 0208 	add.w	r2, r3, #8
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3304      	adds	r3, #4
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001260:	e008      	b.n	8001274 <EEPROM_GetMagCalibration+0x50>
    }
    memcpy(mag_cal, config.mag_cal, 3 * sizeof(float));
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	3318      	adds	r3, #24
 8001268:	220c      	movs	r2, #12
 800126a:	4619      	mov	r1, r3
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f011 f87a 	bl	8012366 <memcpy>
    return W25Qxx_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3798      	adds	r7, #152	@ 0x98
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	08016724 	.word	0x08016724

08001280 <EEPROM_GetPID>:
/**
  * @brief Get legacy PID values
  * @param pid Array to store PID values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetPID(float pid[3]) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b0a6      	sub	sp, #152	@ 0x98
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fe9f 	bl	8000fd0 <EEPROM_ReadConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <EEPROM_GetPID+0x24>
        printf("Failed to read config during GetPID\r\n");
 8001298:	4809      	ldr	r0, [pc, #36]	@ (80012c0 <EEPROM_GetPID+0x40>)
 800129a:	f010 fe7b 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012a2:	e008      	b.n	80012b6 <EEPROM_GetPID+0x36>
    }
    memcpy(pid, config.pid, 3 * sizeof(float));
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	3324      	adds	r3, #36	@ 0x24
 80012aa:	220c      	movs	r2, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f011 f859 	bl	8012366 <memcpy>
    return W25Qxx_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3798      	adds	r7, #152	@ 0x98
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	08016784 	.word	0x08016784

080012c4 <EEPROM_GetRollPID>:
/**
  * @brief Get roll PID values
  * @param roll_pid Pointer to store roll PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetRollPID(DualPID_t *roll_pid) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0a6      	sub	sp, #152	@ 0x98
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fe7d 	bl	8000fd0 <EEPROM_ReadConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <EEPROM_GetRollPID+0x24>
        printf("Failed to read config during GetRollPID\r\n");
 80012dc:	4809      	ldr	r0, [pc, #36]	@ (8001304 <EEPROM_GetRollPID+0x40>)
 80012de:	f010 fe59 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012e6:	e008      	b.n	80012fa <EEPROM_GetRollPID+0x36>
    }
    memcpy(roll_pid, &config.roll_pid, sizeof(DualPID_t));
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	3340      	adds	r3, #64	@ 0x40
 80012ee:	2218      	movs	r2, #24
 80012f0:	4619      	mov	r1, r3
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f011 f837 	bl	8012366 <memcpy>
    return W25Qxx_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3798      	adds	r7, #152	@ 0x98
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	0801687c 	.word	0x0801687c

08001308 <EEPROM_SetRollPID>:
/**
  * @brief Set roll PID values
  * @param roll_pid Pointer to roll PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetRollPID(const DualPID_t *roll_pid) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b0a6      	sub	sp, #152	@ 0x98
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fe5b 	bl	8000fd0 <EEPROM_ReadConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <EEPROM_SetRollPID+0x24>
        printf("Failed to read config during SetRollPID\r\n");
 8001320:	4810      	ldr	r0, [pc, #64]	@ (8001364 <EEPROM_SetRollPID+0x5c>)
 8001322:	f010 fe37 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800132a:	e016      	b.n	800135a <EEPROM_SetRollPID+0x52>
    }
    memcpy(&config.roll_pid, roll_pid, sizeof(DualPID_t));
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	3340      	adds	r3, #64	@ 0x40
 8001332:	2218      	movs	r2, #24
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4618      	mov	r0, r3
 8001338:	f011 f815 	bl	8012366 <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	218c      	movs	r1, #140	@ 0x8c
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fea0 	bl	8001088 <CalculateCRC32>
 8001348:	4603      	mov	r3, r0
 800134a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fe74 	bl	8001040 <EEPROM_WriteConfig>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3798      	adds	r7, #152	@ 0x98
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	080168a8 	.word	0x080168a8

08001368 <EEPROM_GetPitchPID>:
/**
  * @brief Get pitch PID values
  * @param pitch_pid Pointer to store pitch PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetPitchPID(DualPID_t *pitch_pid) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b0a6      	sub	sp, #152	@ 0x98
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fe2b 	bl	8000fd0 <EEPROM_ReadConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <EEPROM_GetPitchPID+0x24>
        printf("Failed to read config during GetPitchPID\r\n");
 8001380:	4809      	ldr	r0, [pc, #36]	@ (80013a8 <EEPROM_GetPitchPID+0x40>)
 8001382:	f010 fe07 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800138a:	e008      	b.n	800139e <EEPROM_GetPitchPID+0x36>
    }
    memcpy(pitch_pid, &config.pitch_pid, sizeof(DualPID_t));
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	3358      	adds	r3, #88	@ 0x58
 8001392:	2218      	movs	r2, #24
 8001394:	4619      	mov	r1, r3
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f010 ffe5 	bl	8012366 <memcpy>
    return W25Qxx_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3798      	adds	r7, #152	@ 0x98
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	080168d4 	.word	0x080168d4

080013ac <EEPROM_SetPitchPID>:
/**
  * @brief Set pitch PID values
  * @param pitch_pid Pointer to pitch PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetPitchPID(const DualPID_t *pitch_pid) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0a6      	sub	sp, #152	@ 0x98
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fe09 	bl	8000fd0 <EEPROM_ReadConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <EEPROM_SetPitchPID+0x24>
        printf("Failed to read config during SetPitchPID\r\n");
 80013c4:	4810      	ldr	r0, [pc, #64]	@ (8001408 <EEPROM_SetPitchPID+0x5c>)
 80013c6:	f010 fde5 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013ce:	e016      	b.n	80013fe <EEPROM_SetPitchPID+0x52>
    }
    memcpy(&config.pitch_pid, pitch_pid, sizeof(DualPID_t));
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	3358      	adds	r3, #88	@ 0x58
 80013d6:	2218      	movs	r2, #24
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	f010 ffc3 	bl	8012366 <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	218c      	movs	r1, #140	@ 0x8c
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fe4e 	bl	8001088 <CalculateCRC32>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fe22 	bl	8001040 <EEPROM_WriteConfig>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3798      	adds	r7, #152	@ 0x98
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	08016900 	.word	0x08016900

0800140c <EEPROM_GetYawRatePID>:
/**
  * @brief Get yaw rate PID values
  * @param yaw_rate_pid Pointer to store yaw rate PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetYawRatePID(PID_t *yaw_rate_pid) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b0a6      	sub	sp, #152	@ 0x98
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fdd9 	bl	8000fd0 <EEPROM_ReadConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <EEPROM_GetYawRatePID+0x24>
        printf("Failed to read config during GetYawRatePID\r\n");
 8001424:	4809      	ldr	r0, [pc, #36]	@ (800144c <EEPROM_GetYawRatePID+0x40>)
 8001426:	f010 fdb5 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800142e:	e008      	b.n	8001442 <EEPROM_GetYawRatePID+0x36>
    }
    memcpy(yaw_rate_pid, &config.yaw_rate_pid, sizeof(PID_t));
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	3370      	adds	r3, #112	@ 0x70
 8001436:	220c      	movs	r2, #12
 8001438:	4619      	mov	r1, r3
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f010 ff93 	bl	8012366 <memcpy>
    return W25Qxx_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3798      	adds	r7, #152	@ 0x98
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	0801692c 	.word	0x0801692c

08001450 <EEPROM_SetYawRatePID>:
/**
  * @brief Set yaw rate PID values
  * @param yaw_rate_pid Pointer to yaw rate PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetYawRatePID(const PID_t *yaw_rate_pid) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b0a6      	sub	sp, #152	@ 0x98
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fdb7 	bl	8000fd0 <EEPROM_ReadConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <EEPROM_SetYawRatePID+0x24>
        printf("Failed to read config during SetYawRatePID\r\n");
 8001468:	4810      	ldr	r0, [pc, #64]	@ (80014ac <EEPROM_SetYawRatePID+0x5c>)
 800146a:	f010 fd93 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001472:	e016      	b.n	80014a2 <EEPROM_SetYawRatePID+0x52>
    }
    memcpy(&config.yaw_rate_pid, yaw_rate_pid, sizeof(PID_t));
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	3370      	adds	r3, #112	@ 0x70
 800147a:	220c      	movs	r2, #12
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4618      	mov	r0, r3
 8001480:	f010 ff71 	bl	8012366 <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	218c      	movs	r1, #140	@ 0x8c
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fdfc 	bl	8001088 <CalculateCRC32>
 8001490:	4603      	mov	r3, r0
 8001492:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fdd0 	bl	8001040 <EEPROM_WriteConfig>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3798      	adds	r7, #152	@ 0x98
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	08016958 	.word	0x08016958

080014b0 <EEPROM_GetAircraftLights>:
/**
  * @brief Get aircraft lights configuration
  * @param lights Pointer to store lights configuration
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetAircraftLights(AircraftLights_t *lights) {
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b0a7      	sub	sp, #156	@ 0x9c
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fd87 	bl	8000fd0 <EEPROM_ReadConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <EEPROM_GetAircraftLights+0x24>
        printf("Failed to read config during GetAircraftLights\r\n");
 80014c8:	480a      	ldr	r0, [pc, #40]	@ (80014f4 <EEPROM_GetAircraftLights+0x44>)
 80014ca:	f010 fd63 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014d2:	e00a      	b.n	80014ea <EEPROM_GetAircraftLights+0x3a>
    }
    memcpy(lights, &config.lights, sizeof(AircraftLights_t));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	461c      	mov	r4, r3
 80014d8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80014dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014de:	6020      	str	r0, [r4, #0]
 80014e0:	6061      	str	r1, [r4, #4]
 80014e2:	60a2      	str	r2, [r4, #8]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	7323      	strb	r3, [r4, #12]
    return W25Qxx_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	379c      	adds	r7, #156	@ 0x9c
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	08016984 	.word	0x08016984

080014f8 <W25Qxx_WaitForWriteEnd>:

/**
  * @brief Wait for write operation to complete
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_WaitForWriteEnd(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b096      	sub	sp, #88	@ 0x58
 80014fc:	af00      	add	r7, sp, #0
    OSPI_RegularCmdTypeDef cmd = {0};
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	2250      	movs	r2, #80	@ 0x50
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f010 fe8e 	bl	8012228 <memset>
    uint8_t status;

    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
    cmd.Instruction = W25Qxx_CMD_READ_STATUS1;
 8001510:	2305      	movs	r3, #5
 8001512:	613b      	str	r3, [r7, #16]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8001514:	2301      	movs	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	@ 0x34
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8001524:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001528:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.NbData = 1;
 800152a:	2301      	movs	r3, #1
 800152c:	647b      	str	r3, [r7, #68]	@ 0x44
    cmd.DummyCycles = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	653b      	str	r3, [r7, #80]	@ 0x50

    do {
        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153e:	4619      	mov	r1, r3
 8001540:	4812      	ldr	r0, [pc, #72]	@ (800158c <W25Qxx_WaitForWriteEnd+0x94>)
 8001542:	f008 fe99 	bl	800a278 <HAL_OSPI_Command>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <W25Qxx_WaitForWriteEnd+0x60>
            printf("Failed to configure read status command\r\n");
 800154c:	4810      	ldr	r0, [pc, #64]	@ (8001590 <W25Qxx_WaitForWriteEnd+0x98>)
 800154e:	f010 fd21 	bl	8011f94 <puts>
            return W25Qxx_ERROR;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001556:	e015      	b.n	8001584 <W25Qxx_WaitForWriteEnd+0x8c>
        }
        if (HAL_OSPI_Receive(&hospi1, &status, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001558:	1dfb      	adds	r3, r7, #7
 800155a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155e:	4619      	mov	r1, r3
 8001560:	480a      	ldr	r0, [pc, #40]	@ (800158c <W25Qxx_WaitForWriteEnd+0x94>)
 8001562:	f008 ff89 	bl	800a478 <HAL_OSPI_Receive>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <W25Qxx_WaitForWriteEnd+0x80>
            printf("Failed to read status\r\n");
 800156c:	4809      	ldr	r0, [pc, #36]	@ (8001594 <W25Qxx_WaitForWriteEnd+0x9c>)
 800156e:	f010 fd11 	bl	8011f94 <puts>
            return W25Qxx_ERROR;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001576:	e005      	b.n	8001584 <W25Qxx_WaitForWriteEnd+0x8c>
        }
    } while (status & 0x01); // Busy bit
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1d9      	bne.n	8001536 <W25Qxx_WaitForWriteEnd+0x3e>

    return W25Qxx_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3758      	adds	r7, #88	@ 0x58
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2400053c 	.word	0x2400053c
 8001590:	080169e4 	.word	0x080169e4
 8001594:	08016a10 	.word	0x08016a10

08001598 <W25Qxx_Read>:
  * @param address Start address
  * @param buffer Buffer to store data
  * @param length Length of data to read
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_Read(uint32_t address, uint8_t *buffer, uint32_t length) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b098      	sub	sp, #96	@ 0x60
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
    OSPI_RegularCmdTypeDef cmd = {0};
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	2250      	movs	r2, #80	@ 0x50
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f010 fe3b 	bl	8012228 <memset>

    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
    cmd.Instruction = W25Qxx_CMD_READ_DATA;
 80015b6:	2303      	movs	r3, #3
 80015b8:	61bb      	str	r3, [r7, #24]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
    cmd.Address = address;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80015c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 80015cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015d0:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 80015d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015da:	64bb      	str	r3, [r7, #72]	@ 0x48
    cmd.NbData = length;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DummyCycles = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	657b      	str	r3, [r7, #84]	@ 0x54
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f0:	4619      	mov	r1, r3
 80015f2:	4810      	ldr	r0, [pc, #64]	@ (8001634 <W25Qxx_Read+0x9c>)
 80015f4:	f008 fe40 	bl	800a278 <HAL_OSPI_Command>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <W25Qxx_Read+0x72>
        printf("Failed to configure read command\r\n");
 80015fe:	480e      	ldr	r0, [pc, #56]	@ (8001638 <W25Qxx_Read+0xa0>)
 8001600:	f010 fcc8 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001608:	e00f      	b.n	800162a <W25Qxx_Read+0x92>
    }

    if (HAL_OSPI_Receive(&hospi1, buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800160a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	4808      	ldr	r0, [pc, #32]	@ (8001634 <W25Qxx_Read+0x9c>)
 8001612:	f008 ff31 	bl	800a478 <HAL_OSPI_Receive>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <W25Qxx_Read+0x90>
        printf("Failed to read data\r\n");
 800161c:	4807      	ldr	r0, [pc, #28]	@ (800163c <W25Qxx_Read+0xa4>)
 800161e:	f010 fcb9 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001626:	e000      	b.n	800162a <W25Qxx_Read+0x92>
    }

    return W25Qxx_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3760      	adds	r7, #96	@ 0x60
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2400053c 	.word	0x2400053c
 8001638:	08016a28 	.word	0x08016a28
 800163c:	08016a4c 	.word	0x08016a4c

08001640 <W25Qxx_Write>:
  * @param address Start address
  * @param buffer Pointer to data
  * @param length Length of data to write
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_Write(uint32_t address, uint8_t *buffer, uint32_t length) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b09e      	sub	sp, #120	@ 0x78
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
    OSPI_RegularCmdTypeDef cmd = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2250      	movs	r2, #80	@ 0x50
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f010 fde7 	bl	8012228 <memset>
    uint32_t remaining = length;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	677b      	str	r3, [r7, #116]	@ 0x74
    uint32_t current_address = address;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	673b      	str	r3, [r7, #112]	@ 0x70
    uint8_t *current_buffer = buffer;
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* Erase sector if necessary */
    uint32_t sector = address / W25Qxx_SECTOR_SIZE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	0b1b      	lsrs	r3, r3, #12
 800166a:	66bb      	str	r3, [r7, #104]	@ 0x68
    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
    cmd.Instruction = W25Qxx_CMD_WRITE_ENABLE;
 8001670:	2306      	movs	r3, #6
 8001672:	61fb      	str	r3, [r7, #28]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8001674:	2301      	movs	r3, #1
 8001676:	623b      	str	r3, [r7, #32]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 800167c:	2300      	movs	r3, #0
 800167e:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001680:	2300      	movs	r3, #0
 8001682:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.DataMode = HAL_OSPI_DATA_NONE;
 8001684:	2300      	movs	r3, #0
 8001686:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DummyCycles = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	65bb      	str	r3, [r7, #88]	@ 0x58
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001698:	4619      	mov	r1, r3
 800169a:	484f      	ldr	r0, [pc, #316]	@ (80017d8 <W25Qxx_Write+0x198>)
 800169c:	f008 fdec 	bl	800a278 <HAL_OSPI_Command>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <W25Qxx_Write+0x72>
        printf("Failed to enable write for sector erase\r\n");
 80016a6:	484d      	ldr	r0, [pc, #308]	@ (80017dc <W25Qxx_Write+0x19c>)
 80016a8:	f010 fc74 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016b0:	e08e      	b.n	80017d0 <W25Qxx_Write+0x190>
    }

    cmd.Instruction = W25Qxx_CMD_SECTOR_ERASE;
 80016b2:	2320      	movs	r3, #32
 80016b4:	61fb      	str	r3, [r7, #28]
    cmd.Address = sector * W25Qxx_SECTOR_SIZE;
 80016b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016b8:	031b      	lsls	r3, r3, #12
 80016ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80016bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016c0:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 80016c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c6:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d0:	4619      	mov	r1, r3
 80016d2:	4841      	ldr	r0, [pc, #260]	@ (80017d8 <W25Qxx_Write+0x198>)
 80016d4:	f008 fdd0 	bl	800a278 <HAL_OSPI_Command>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <W25Qxx_Write+0xaa>
        printf("Failed to erase sector\r\n");
 80016de:	4840      	ldr	r0, [pc, #256]	@ (80017e0 <W25Qxx_Write+0x1a0>)
 80016e0:	f010 fc58 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016e8:	e072      	b.n	80017d0 <W25Qxx_Write+0x190>
    }

    if (W25Qxx_WaitForWriteEnd() != W25Qxx_OK) {
 80016ea:	f7ff ff05 	bl	80014f8 <W25Qxx_WaitForWriteEnd>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d069      	beq.n	80017c8 <W25Qxx_Write+0x188>
        printf("Timeout waiting for sector erase\r\n");
 80016f4:	483b      	ldr	r0, [pc, #236]	@ (80017e4 <W25Qxx_Write+0x1a4>)
 80016f6:	f010 fc4d 	bl	8011f94 <puts>
        return W25Qxx_ERROR;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016fe:	e067      	b.n	80017d0 <W25Qxx_Write+0x190>
    }

    /* Write data in pages */
    while (remaining > 0) {
        uint32_t page_size = (remaining > W25Qxx_PAGE_SIZE) ? W25Qxx_PAGE_SIZE : remaining;
 8001700:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001706:	bf28      	it	cs
 8001708:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800170c:	667b      	str	r3, [r7, #100]	@ 0x64

        cmd.Instruction = W25Qxx_CMD_WRITE_ENABLE;
 800170e:	2306      	movs	r3, #6
 8001710:	61fb      	str	r3, [r7, #28]
        cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8001712:	2300      	movs	r3, #0
 8001714:	633b      	str	r3, [r7, #48]	@ 0x30
        cmd.DataMode = HAL_OSPI_DATA_NONE;
 8001716:	2300      	movs	r3, #0
 8001718:	64fb      	str	r3, [r7, #76]	@ 0x4c

        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001722:	4619      	mov	r1, r3
 8001724:	482c      	ldr	r0, [pc, #176]	@ (80017d8 <W25Qxx_Write+0x198>)
 8001726:	f008 fda7 	bl	800a278 <HAL_OSPI_Command>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <W25Qxx_Write+0xfc>
            printf("Failed to enable write for page program\r\n");
 8001730:	482d      	ldr	r0, [pc, #180]	@ (80017e8 <W25Qxx_Write+0x1a8>)
 8001732:	f010 fc2f 	bl	8011f94 <puts>
            return W25Qxx_ERROR;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800173a:	e049      	b.n	80017d0 <W25Qxx_Write+0x190>
        }

        cmd.Instruction = W25Qxx_CMD_PAGE_PROGRAM;
 800173c:	2302      	movs	r3, #2
 800173e:	61fb      	str	r3, [r7, #28]
        cmd.Address = current_address;
 8001740:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
        cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8001744:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001748:	633b      	str	r3, [r7, #48]	@ 0x30
        cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 800174a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800174e:	637b      	str	r3, [r7, #52]	@ 0x34
        cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8001750:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001754:	64fb      	str	r3, [r7, #76]	@ 0x4c
        cmd.NbData = page_size;
 8001756:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001758:	653b      	str	r3, [r7, #80]	@ 0x50

        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001762:	4619      	mov	r1, r3
 8001764:	481c      	ldr	r0, [pc, #112]	@ (80017d8 <W25Qxx_Write+0x198>)
 8001766:	f008 fd87 	bl	800a278 <HAL_OSPI_Command>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <W25Qxx_Write+0x13c>
            printf("Failed to configure page program command\r\n");
 8001770:	481e      	ldr	r0, [pc, #120]	@ (80017ec <W25Qxx_Write+0x1ac>)
 8001772:	f010 fc0f 	bl	8011f94 <puts>
            return W25Qxx_ERROR;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800177a:	e029      	b.n	80017d0 <W25Qxx_Write+0x190>
        }

        if (HAL_OSPI_Transmit(&hospi1, current_buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800177c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001780:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001782:	4815      	ldr	r0, [pc, #84]	@ (80017d8 <W25Qxx_Write+0x198>)
 8001784:	f008 fe05 	bl	800a392 <HAL_OSPI_Transmit>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <W25Qxx_Write+0x15a>
            printf("Failed to write page data\r\n");
 800178e:	4818      	ldr	r0, [pc, #96]	@ (80017f0 <W25Qxx_Write+0x1b0>)
 8001790:	f010 fc00 	bl	8011f94 <puts>
            return W25Qxx_ERROR;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001798:	e01a      	b.n	80017d0 <W25Qxx_Write+0x190>
        }

        if (W25Qxx_WaitForWriteEnd() != W25Qxx_OK) {
 800179a:	f7ff fead 	bl	80014f8 <W25Qxx_WaitForWriteEnd>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <W25Qxx_Write+0x170>
            printf("Timeout waiting for page write\r\n");
 80017a4:	4813      	ldr	r0, [pc, #76]	@ (80017f4 <W25Qxx_Write+0x1b4>)
 80017a6:	f010 fbf5 	bl	8011f94 <puts>
            return W25Qxx_ERROR;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ae:	e00f      	b.n	80017d0 <W25Qxx_Write+0x190>
        }

        remaining -= page_size;
 80017b0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80017b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	677b      	str	r3, [r7, #116]	@ 0x74
        current_address += page_size;
 80017b8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80017ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017bc:	4413      	add	r3, r2
 80017be:	673b      	str	r3, [r7, #112]	@ 0x70
        current_buffer += page_size;
 80017c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80017c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017c4:	4413      	add	r3, r2
 80017c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    while (remaining > 0) {
 80017c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d198      	bne.n	8001700 <W25Qxx_Write+0xc0>
    }

    return W25Qxx_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3778      	adds	r7, #120	@ 0x78
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2400053c 	.word	0x2400053c
 80017dc:	08016a64 	.word	0x08016a64
 80017e0:	08016a90 	.word	0x08016a90
 80017e4:	08016aa8 	.word	0x08016aa8
 80017e8:	08016acc 	.word	0x08016acc
 80017ec:	08016af8 	.word	0x08016af8
 80017f0:	08016b24 	.word	0x08016b24
 80017f4:	08016b40 	.word	0x08016b40

080017f8 <HMC5883L_WriteReg>:
static volatile uint8_t i2c_error = 0;
static uint32_t last_reset_time = 0;
static uint8_t reset_attempts = 0;
static const uint8_t max_reset_attempts = 5;

static void HMC5883L_WriteReg(uint8_t reg, uint8_t value) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	4603      	mov	r3, r0
 8001800:	460a      	mov	r2, r1
 8001802:	71fb      	strb	r3, [r7, #7]
 8001804:	4613      	mov	r3, r2
 8001806:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, value};
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	733b      	strb	r3, [r7, #12]
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, tx_data, 2, 100);
 8001810:	f107 020c 	add.w	r2, r7, #12
 8001814:	2364      	movs	r3, #100	@ 0x64
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2302      	movs	r3, #2
 800181a:	213c      	movs	r1, #60	@ 0x3c
 800181c:	4803      	ldr	r0, [pc, #12]	@ (800182c <HMC5883L_WriteReg+0x34>)
 800181e:	f007 f849 	bl	80088b4 <HAL_I2C_Master_Transmit>
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2400037c 	.word	0x2400037c

08001830 <HMC5883L_ReadReg>:

uint8_t HMC5883L_ReadReg(uint8_t reg) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af02      	add	r7, sp, #8
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, &reg, 1, 100);
 800183a:	1dfa      	adds	r2, r7, #7
 800183c:	2364      	movs	r3, #100	@ 0x64
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2301      	movs	r3, #1
 8001842:	213c      	movs	r1, #60	@ 0x3c
 8001844:	4808      	ldr	r0, [pc, #32]	@ (8001868 <HMC5883L_ReadReg+0x38>)
 8001846:	f007 f835 	bl	80088b4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, HMC5883L_ADDR, &rx_data, 1, 100);
 800184a:	f107 020f 	add.w	r2, r7, #15
 800184e:	2364      	movs	r3, #100	@ 0x64
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2301      	movs	r3, #1
 8001854:	213c      	movs	r1, #60	@ 0x3c
 8001856:	4804      	ldr	r0, [pc, #16]	@ (8001868 <HMC5883L_ReadReg+0x38>)
 8001858:	f007 f944 	bl	8008ae4 <HAL_I2C_Master_Receive>
    return rx_data;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2400037c 	.word	0x2400037c

0800186c <HMC5883L_Init>:

void HMC5883L_Init(void) {
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x80); // Soft reset
 8001870:	2180      	movs	r1, #128	@ 0x80
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff ffc0 	bl	80017f8 <HMC5883L_WriteReg>
    HAL_Delay(100);
 8001878:	2064      	movs	r0, #100	@ 0x64
 800187a:	f004 f8cf 	bl	8005a1c <HAL_Delay>
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x78); // 8-avg, 75 Hz, normal mode
 800187e:	2178      	movs	r1, #120	@ 0x78
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff ffb9 	bl	80017f8 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_CONFIG_B, 0x20); // ±1.3 Gauss
 8001886:	2120      	movs	r1, #32
 8001888:	2001      	movs	r0, #1
 800188a:	f7ff ffb5 	bl	80017f8 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_MODE, 0x00);     // Continuous mode
 800188e:	2100      	movs	r1, #0
 8001890:	2002      	movs	r0, #2
 8001892:	f7ff ffb1 	bl	80017f8 <HMC5883L_WriteReg>
    HAL_Delay(10);
 8001896:	200a      	movs	r0, #10
 8001898:	f004 f8c0 	bl	8005a1c <HAL_Delay>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	601a      	str	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 0201 	bic.w	r2, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	601a      	str	r2, [r3, #0]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_SPI_SetMode>:
  *         @arg @ref LL_SPI_MODE_MASTER
  *         @arg @ref LL_SPI_MODE_SLAVE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetMode(SPI_TypeDef *SPIx, uint32_t Mode)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_MASTER, Mode);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60da      	str	r2, [r3, #12]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <LL_SPI_StartMasterTransfer>:
  * @rmtoll CR1          CSTART        LL_SPI_StartMasterTransfer
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_StartMasterTransfer(SPI_TypeDef *SPIx)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	601a      	str	r2, [r3, #0]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_SPI_SetClockPhase>:
  *         @arg @ref LL_SPI_PHASE_1EDGE
  *         @arg @ref LL_SPI_PHASE_2EDGE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPhase(SPI_TypeDef *SPIx, uint32_t ClockPhase)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_CPHA, ClockPhase);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	60da      	str	r2, [r3, #12]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_SPI_SetClockPolarity>:
  *         @arg @ref LL_SPI_POLARITY_LOW
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_CPOL, ClockPolarity);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60da      	str	r2, [r3, #12]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t Baudrate)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR, Baudrate);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_SPI_SetTransferBitOrder>:
  *         @arg @ref LL_SPI_LSB_FIRST
  *         @arg @ref LL_SPI_MSB_FIRST
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferBitOrder(SPI_TypeDef *SPIx, uint32_t BitOrder)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_LSBFRST, BitOrder);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60da      	str	r2, [r3, #12]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_SPI_SetTransferDirection>:
  *         @arg @ref LL_SPI_HALF_DUPLEX_RX
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR,  TransferDirection & SPI_CR1_HDDIR);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_COMM, TransferDirection & SPI_CFG2_COMM);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_SPI_SetDataWidth>:
  *         @arg @ref LL_SPI_DATAWIDTH_31BIT
  *         @arg @ref LL_SPI_DATAWIDTH_32BIT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetDataWidth(SPI_TypeDef *SPIx, uint32_t DataWidth)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_DSIZE, DataWidth);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f023 021f 	bic.w	r2, r3, #31
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	609a      	str	r2, [r3, #8]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_SPI_SetFIFOThreshold>:
  *         @arg @ref LL_SPI_FIFO_TH_15DATA
  *         @arg @ref LL_SPI_FIFO_TH_16DATA
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_SPI_SetNSSMode>:
  *         @arg @ref LL_SPI_NSS_HARD_INPUT
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM | SPI_CFG2_SSOE, NSS);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f023 5210 	bic.w	r2, r3, #603979776	@ 0x24000000
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60da      	str	r2, [r3, #12]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_SPI_IsActiveFlag_RXP>:
  * @rmtoll SR           RXP           LL_SPI_IsActiveFlag_RXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXP(const SPI_TypeDef *SPIx)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <LL_SPI_IsActiveFlag_RXP+0x18>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <LL_SPI_IsActiveFlag_RXP+0x1a>
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_SPI_IsActiveFlag_TXP>:
  * @rmtoll SR           TXP           LL_SPI_IsActiveFlag_TXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXP(const SPI_TypeDef *SPIx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d101      	bne.n	8001aac <LL_SPI_IsActiveFlag_TXP+0x18>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <LL_SPI_IsActiveFlag_TXP+0x1a>
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_SPI_ReceiveData8>:
  * @rmtoll RXDR         .       LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval 0..0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3330      	adds	r3, #48	@ 0x30
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b2db      	uxtb	r3, r3
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3320      	adds	r3, #32
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	701a      	strb	r2, [r3, #0]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8001b00:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <LL_AHB4_GRP1_EnableClock+0x34>)
 8001b02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b06:	4909      	ldr	r1, [pc, #36]	@ (8001b2c <LL_AHB4_GRP1_EnableClock+0x34>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <LL_AHB4_GRP1_EnableClock+0x34>)
 8001b12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	58024400 	.word	0x58024400

08001b30 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8001b38:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <LL_APB1_GRP1_EnableClock+0x34>)
 8001b3a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001b3e:	4909      	ldr	r1, [pc, #36]	@ (8001b64 <LL_APB1_GRP1_EnableClock+0x34>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <LL_APB1_GRP1_EnableClock+0x34>)
 8001b4a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4013      	ands	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b54:	68fb      	ldr	r3, [r7, #12]
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	58024400 	.word	0x58024400

08001b68 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(const GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d101      	bne.n	8001b84 <LL_GPIO_IsInputPinSet+0x1c>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <LL_GPIO_IsInputPinSet+0x1e>
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	619a      	str	r2, [r3, #24]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	041a      	lsls	r2, r3, #16
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <clamp12>:
static volatile uint8_t dma_transfer_complete = 0;
static volatile uint8_t dma_transfer_error = 0;

// Clamp signed 12-bit value
static inline int16_t clamp12(int32_t val)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
    if (val > 2047) return 2047;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001bda:	db02      	blt.n	8001be2 <clamp12+0x16>
 8001bdc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001be0:	e007      	b.n	8001bf2 <clamp12+0x26>
    if (val < -2048) return -2048;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8001be8:	da01      	bge.n	8001bee <clamp12+0x22>
 8001bea:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <clamp12+0x34>)
 8001bec:	e001      	b.n	8001bf2 <clamp12+0x26>
    return (int16_t)val;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	b21b      	sxth	r3, r3
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	fffff800 	.word	0xfffff800

08001c04 <ICM42688P_GPIO_SPI_Initialization>:

void ICM42688P_GPIO_SPI_Initialization(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b090      	sub	sp, #64	@ 0x40
 8001c08:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001c0a:	f107 0318 	add.w	r3, r7, #24
 8001c0e:	2228      	movs	r2, #40	@ 0x28
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f010 fb08 	bl	8012228 <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	463b      	mov	r3, r7
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]
 8001c26:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable for STM32H7 */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001c28:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001c2c:	f7ff ff80 	bl	8001b30 <LL_APB1_GRP1_EnableClock>

	/* GPIO clock enable for STM32H7 */
	LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff ff61 	bl	8001af8 <LL_AHB4_GRP1_EnableClock>
	LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8001c36:	2004      	movs	r0, #4
 8001c38:	f7ff ff5e 	bl	8001af8 <LL_AHB4_GRP1_EnableClock>
	/**SPI3 GPIO Configuration for STM32H7
	 * PC10  ------> SPI3_SCK
	 * PC11  ------> SPI3_MISO
	 * PC12  ------> SPI3_MOSI
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001c3c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001c40:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c42:	2302      	movs	r3, #2
 8001c44:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6; // SPI3 alternate function for STM32H7
 8001c52:	2306      	movs	r3, #6
 8001c54:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c56:	463b      	mov	r3, r7
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4830      	ldr	r0, [pc, #192]	@ (8001d1c <ICM42688P_GPIO_SPI_Initialization+0x118>)
 8001c5c:	f00d fcb2 	bl	800f5c4 <LL_GPIO_Init>
	 * PA15  ------> ICM42688P_SPI_CS_PIN (output)
	 * PC8   ------> ICM42688P_INT1_PIN (input)
	 */

	/* Chip Select Pin */
	LL_GPIO_SetOutputPin(ICM42688P_SPI_CS_PORT, ICM42688P_SPI_CS_PIN); // Start with CS high
 8001c60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c64:	482e      	ldr	r0, [pc, #184]	@ (8001d20 <ICM42688P_GPIO_SPI_Initialization+0x11c>)
 8001c66:	f7ff ff94 	bl	8001b92 <LL_GPIO_SetOutputPin>

	GPIO_InitStruct.Pin = ICM42688P_SPI_CS_PIN;
 8001c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c6e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c70:	2301      	movs	r3, #1
 8001c72:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688P_SPI_CS_PORT, &GPIO_InitStruct);
 8001c80:	463b      	mov	r3, r7
 8001c82:	4619      	mov	r1, r3
 8001c84:	4826      	ldr	r0, [pc, #152]	@ (8001d20 <ICM42688P_GPIO_SPI_Initialization+0x11c>)
 8001c86:	f00d fc9d 	bl	800f5c4 <LL_GPIO_Init>

	/* Interrupt Pin */
	GPIO_InitStruct.Pin = ICM42688P_INT1_PIN;
 8001c8a:	2310      	movs	r3, #16
 8001c8c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688P_INT1_PORT, &GPIO_InitStruct);
 8001c96:	463b      	mov	r3, r7
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4822      	ldr	r0, [pc, #136]	@ (8001d24 <ICM42688P_GPIO_SPI_Initialization+0x120>)
 8001c9c:	f00d fc92 	bl	800f5c4 <LL_GPIO_Init>

	/* STM32H7 SPI3 configuration - Fixed for proper LL driver usage */
	// Disable SPI first
	LL_SPI_Disable(ICM42688P_SPI_CHANNEL);
 8001ca0:	4821      	ldr	r0, [pc, #132]	@ (8001d28 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001ca2:	f7ff fe0d 	bl	80018c0 <LL_SPI_Disable>

	// Configure SPI3 - STM32H7 style
	LL_SPI_SetBaudRatePrescaler(ICM42688P_SPI_CHANNEL, LL_SPI_BAUDRATEPRESCALER_DIV8);
 8001ca6:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
 8001caa:	481f      	ldr	r0, [pc, #124]	@ (8001d28 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001cac:	f7ff fe61 	bl	8001972 <LL_SPI_SetBaudRatePrescaler>
	LL_SPI_SetTransferDirection(ICM42688P_SPI_CHANNEL, LL_SPI_FULL_DUPLEX);
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	481d      	ldr	r0, [pc, #116]	@ (8001d28 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001cb4:	f7ff fe83 	bl	80019be <LL_SPI_SetTransferDirection>
	LL_SPI_SetClockPhase(ICM42688P_SPI_CHANNEL, LL_SPI_PHASE_2EDGE);
 8001cb8:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001cbc:	481a      	ldr	r0, [pc, #104]	@ (8001d28 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001cbe:	f7ff fe32 	bl	8001926 <LL_SPI_SetClockPhase>
	LL_SPI_SetClockPolarity(ICM42688P_SPI_CHANNEL, LL_SPI_POLARITY_HIGH);
 8001cc2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001cc6:	4818      	ldr	r0, [pc, #96]	@ (8001d28 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001cc8:	f7ff fe40 	bl	800194c <LL_SPI_SetClockPolarity>
	LL_SPI_SetTransferBitOrder(ICM42688P_SPI_CHANNEL, LL_SPI_MSB_FIRST);
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4816      	ldr	r0, [pc, #88]	@ (8001d28 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001cd0:	f7ff fe62 	bl	8001998 <LL_SPI_SetTransferBitOrder>
	LL_SPI_SetDataWidth(ICM42688P_SPI_CHANNEL, LL_SPI_DATAWIDTH_8BIT);
 8001cd4:	2107      	movs	r1, #7
 8001cd6:	4814      	ldr	r0, [pc, #80]	@ (8001d28 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001cd8:	f7ff fe90 	bl	80019fc <LL_SPI_SetDataWidth>
	LL_SPI_SetNSSMode(ICM42688P_SPI_CHANNEL, LL_SPI_NSS_SOFT);
 8001cdc:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001ce0:	4811      	ldr	r0, [pc, #68]	@ (8001d28 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001ce2:	f7ff feb1 	bl	8001a48 <LL_SPI_SetNSSMode>
	LL_SPI_SetMode(ICM42688P_SPI_CHANNEL, LL_SPI_MODE_MASTER);
 8001ce6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001cea:	480f      	ldr	r0, [pc, #60]	@ (8001d28 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001cec:	f7ff fdf8 	bl	80018e0 <LL_SPI_SetMode>

	// STM32H7 specific settings
	LL_SPI_SetFIFOThreshold(ICM42688P_SPI_CHANNEL, LL_SPI_FIFO_TH_01DATA);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	480d      	ldr	r0, [pc, #52]	@ (8001d28 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001cf4:	f7ff fe95 	bl	8001a22 <LL_SPI_SetFIFOThreshold>

	// Enable SPI
	LL_SPI_Enable(ICM42688P_SPI_CHANNEL);
 8001cf8:	480b      	ldr	r0, [pc, #44]	@ (8001d28 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001cfa:	f7ff fdd1 	bl	80018a0 <LL_SPI_Enable>

	// Start SPI (STM32H7 requirement)
	LL_SPI_StartMasterTransfer(ICM42688P_SPI_CHANNEL);
 8001cfe:	480a      	ldr	r0, [pc, #40]	@ (8001d28 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001d00:	f7ff fe01 	bl	8001906 <LL_SPI_StartMasterTransfer>

	CHIP_DESELECT(ICM42688P);
 8001d04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d08:	4805      	ldr	r0, [pc, #20]	@ (8001d20 <ICM42688P_GPIO_SPI_Initialization+0x11c>)
 8001d0a:	f7ff ff42 	bl	8001b92 <LL_GPIO_SetOutputPin>

	printf("SPI3 initialized for STM32H7\n");
 8001d0e:	4807      	ldr	r0, [pc, #28]	@ (8001d2c <ICM42688P_GPIO_SPI_Initialization+0x128>)
 8001d10:	f010 f940 	bl	8011f94 <puts>
}
 8001d14:	bf00      	nop
 8001d16:	3740      	adds	r7, #64	@ 0x40
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	58020800 	.word	0x58020800
 8001d20:	58020000 	.word	0x58020000
 8001d24:	58021000 	.word	0x58021000
 8001d28:	40003c00 	.word	0x40003c00
 8001d2c:	08016b60 	.word	0x08016b60

08001d30 <ICM42688P_SelectBank>:

// ====== BANK SELECT ======
void ICM42688P_SelectBank(uint8_t bank)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	printf("Selecting bank %d\n", bank);
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4807      	ldr	r0, [pc, #28]	@ (8001d5c <ICM42688P_SelectBank+0x2c>)
 8001d40:	f010 f8b8 	bl	8011eb4 <iprintf>
	ICM42688P_WriteByte(ICM42688P_REG_BANK_SEL, bank);
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	4619      	mov	r1, r3
 8001d48:	2076      	movs	r0, #118	@ 0x76
 8001d4a:	f000 f87d 	bl	8001e48 <ICM42688P_WriteByte>
	HAL_Delay(1); // Small delay after bank selection
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f003 fe64 	bl	8005a1c <HAL_Delay>
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	08016b80 	.word	0x08016b80

08001d60 <SPI3_SendByte>:

uint8_t SPI3_SendByte(uint8_t data)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXP(ICM42688P_SPI_CHANNEL)==RESET);
 8001d6a:	bf00      	nop
 8001d6c:	480c      	ldr	r0, [pc, #48]	@ (8001da0 <SPI3_SendByte+0x40>)
 8001d6e:	f7ff fe91 	bl	8001a94 <LL_SPI_IsActiveFlag_TXP>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f9      	beq.n	8001d6c <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(ICM42688P_SPI_CHANNEL, data);
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4808      	ldr	r0, [pc, #32]	@ (8001da0 <SPI3_SendByte+0x40>)
 8001d7e:	f7ff feaa 	bl	8001ad6 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXP(ICM42688P_SPI_CHANNEL)==RESET);
 8001d82:	bf00      	nop
 8001d84:	4806      	ldr	r0, [pc, #24]	@ (8001da0 <SPI3_SendByte+0x40>)
 8001d86:	f7ff fe72 	bl	8001a6e <LL_SPI_IsActiveFlag_RXP>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f9      	beq.n	8001d84 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM42688P_SPI_CHANNEL);
 8001d90:	4803      	ldr	r0, [pc, #12]	@ (8001da0 <SPI3_SendByte+0x40>)
 8001d92:	f7ff fe92 	bl	8001aba <LL_SPI_ReceiveData8>
 8001d96:	4603      	mov	r3, r0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40003c00 	.word	0x40003c00

08001da4 <ICM42688P_ReadByte>:
//	ICM42688P_WriteByte(ICM42688P_REG_BANK_SEL, bank);
//	HAL_Delay(1); // Small delay after bank selection
//}

uint8_t ICM42688P_ReadByte(uint8_t reg_addr)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM42688P);
 8001dae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001db2:	480c      	ldr	r0, [pc, #48]	@ (8001de4 <ICM42688P_ReadByte+0x40>)
 8001db4:	f7ff fefb 	bl	8001bae <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ffcd 	bl	8001d60 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY to read data
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff ffca 	bl	8001d60 <SPI3_SendByte>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM42688P);
 8001dd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dd4:	4803      	ldr	r0, [pc, #12]	@ (8001de4 <ICM42688P_ReadByte+0x40>)
 8001dd6:	f7ff fedc 	bl	8001b92 <LL_GPIO_SetOutputPin>

//	printf("0x%02x\n", val);
	return val;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	58020000 	.word	0x58020000

08001de8 <ICM42688P_ReadBytes>:

void ICM42688P_ReadBytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	603a      	str	r2, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
 8001df4:	460b      	mov	r3, r1
 8001df6:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM42688P);
 8001dfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e00:	4810      	ldr	r0, [pc, #64]	@ (8001e44 <ICM42688P_ReadBytes+0x5c>)
 8001e02:	f7ff fed4 	bl	8001bae <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ffa6 	bl	8001d60 <SPI3_SendByte>
	while(i < len)
 8001e14:	e009      	b.n	8001e2a <ICM42688P_ReadBytes+0x42>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY to read data
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	60fa      	str	r2, [r7, #12]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	18d4      	adds	r4, r2, r3
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff ff9d 	bl	8001d60 <SPI3_SendByte>
 8001e26:	4603      	mov	r3, r0
 8001e28:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8001e2a:	79bb      	ldrb	r3, [r7, #6]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d3f1      	bcc.n	8001e16 <ICM42688P_ReadBytes+0x2e>
	}
	CHIP_DESELECT(ICM42688P);
 8001e32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e36:	4803      	ldr	r0, [pc, #12]	@ (8001e44 <ICM42688P_ReadBytes+0x5c>)
 8001e38:	f7ff feab 	bl	8001b92 <LL_GPIO_SetOutputPin>
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	58020000 	.word	0x58020000

08001e48 <ICM42688P_WriteByte>:

void ICM42688P_WriteByte(uint8_t reg_addr, uint8_t val)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460a      	mov	r2, r1
 8001e52:	71fb      	strb	r3, [r7, #7]
 8001e54:	4613      	mov	r3, r2
 8001e56:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM42688P);
 8001e58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e5c:	480b      	ldr	r0, [pc, #44]	@ (8001e8c <ICM42688P_WriteByte+0x44>)
 8001e5e:	f7ff fea6 	bl	8001bae <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff78 	bl	8001d60 <SPI3_SendByte>
	SPI3_SendByte(val); //Send Data to write
 8001e70:	79bb      	ldrb	r3, [r7, #6]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff74 	bl	8001d60 <SPI3_SendByte>
	CHIP_DESELECT(ICM42688P);
 8001e78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e7c:	4803      	ldr	r0, [pc, #12]	@ (8001e8c <ICM42688P_WriteByte+0x44>)
 8001e7e:	f7ff fe88 	bl	8001b92 <LL_GPIO_SetOutputPin>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	58020000 	.word	0x58020000

08001e90 <ICM42688P_Initialization>:
	}
	CHIP_DESELECT(ICM42688P);
}

int ICM42688P_Initialization(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
	uint8_t who_am_i = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	809a      	strh	r2, [r3, #4]

	ICM42688P_GPIO_SPI_Initialization();
 8001eac:	f7ff feaa 	bl	8001c04 <ICM42688P_GPIO_SPI_Initialization>

	printf("Checking ICM42688P...\n");
 8001eb0:	483f      	ldr	r0, [pc, #252]	@ (8001fb0 <ICM42688P_Initialization+0x120>)
 8001eb2:	f010 f86f 	bl	8011f94 <puts>

	// check WHO_AM_I (0x75)
	who_am_i = ICM42688P_ReadByte(ICM42688P_WHO_AM_I);
 8001eb6:	2075      	movs	r0, #117	@ 0x75
 8001eb8:	f7ff ff74 	bl	8001da4 <ICM42688P_ReadByte>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x47
	if(who_am_i == 0x47)
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	2b47      	cmp	r3, #71	@ 0x47
 8001ec4:	d105      	bne.n	8001ed2 <ICM42688P_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	483a      	ldr	r0, [pc, #232]	@ (8001fb4 <ICM42688P_Initialization+0x124>)
 8001ecc:	f00f fff2 	bl	8011eb4 <iprintf>
 8001ed0:	e012      	b.n	8001ef8 <ICM42688P_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x47)
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	2b47      	cmp	r3, #71	@ 0x47
 8001ed6:	d00f      	beq.n	8001ef8 <ICM42688P_Initialization+0x68>
	{
		who_am_i = ICM42688P_ReadByte(ICM42688P_WHO_AM_I); // check again WHO_AM_I (0x75)
 8001ed8:	2075      	movs	r0, #117	@ 0x75
 8001eda:	f7ff ff63 	bl	8001da4 <ICM42688P_ReadByte>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x47){
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	2b47      	cmp	r3, #71	@ 0x47
 8001ee6:	d007      	beq.n	8001ef8 <ICM42688P_Initialization+0x68>
			printf( "ICM42688P Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x47);
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	2247      	movs	r2, #71	@ 0x47
 8001eec:	4619      	mov	r1, r3
 8001eee:	4832      	ldr	r0, [pc, #200]	@ (8001fb8 <ICM42688P_Initialization+0x128>)
 8001ef0:	f00f ffe0 	bl	8011eb4 <iprintf>
			return 1; //ERROR
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e056      	b.n	8001fa6 <ICM42688P_Initialization+0x116>
		}
	}

	// Reset ICM42688P
	// DEVICE_CONFIG 0x11
	ICM42688P_WriteByte(ICM42688P_DEVICE_CONFIG, 0x01); // Software reset
 8001ef8:	2101      	movs	r1, #1
 8001efa:	2011      	movs	r0, #17
 8001efc:	f7ff ffa4 	bl	8001e48 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f00:	2032      	movs	r0, #50	@ 0x32
 8001f02:	f003 fd8b 	bl	8005a1c <HAL_Delay>

	// Wait for reset to complete and switch to user bank 0
	ICM42688P_SelectBank(ICM42688P_BANK_SEL_0); // Select user bank 0
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff ff12 	bl	8001d30 <ICM42688P_SelectBank>
	HAL_Delay(10);
 8001f0c:	200a      	movs	r0, #10
 8001f0e:	f003 fd85 	bl	8005a1c <HAL_Delay>

	// PWR_MGMT0 0x4E - Main power management
	// Enable Gyro and Accel in Low Noise mode, keep temperature sensor enabled
	ICM42688P_WriteByte(ICM42688P_PWR_MGMT0, ICM42688P_PWR_MGMT0_GYRO_MODE_LN | ICM42688P_PWR_MGMT0_ACCEL_MODE_LN);
 8001f12:	210f      	movs	r1, #15
 8001f14:	204e      	movs	r0, #78	@ 0x4e
 8001f16:	f7ff ff97 	bl	8001e48 <ICM42688P_WriteByte>
	// 온도센서 끄면 자이로 값 이상하게 출력됨 (same as original comment)
	HAL_Delay(50);
 8001f1a:	2032      	movs	r0, #50	@ 0x32
 8001f1c:	f003 fd7e 	bl	8005a1c <HAL_Delay>

	// GYRO_CONFIG0 0x4F - Gyro configuration
	// Set Gyro to ±2000dps and 1kHz ODR (equivalent to original 2000dps setting)
	ICM42688P_WriteByte(ICM42688P_GYRO_CONFIG0, (ICM42688P_GYRO_FS_SEL_2000DPS << 5) | ICM42688P_ODR_4KHZ);
 8001f20:	2104      	movs	r1, #4
 8001f22:	204f      	movs	r0, #79	@ 0x4f
 8001f24:	f7ff ff90 	bl	8001e48 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f28:	2032      	movs	r0, #50	@ 0x32
 8001f2a:	f003 fd77 	bl	8005a1c <HAL_Delay>

	// ACCEL_CONFIG0 0x50 - Accelerometer configuration
	// Set Accel to ±16g and 1kHz ODR (equivalent to original 16g setting)
	ICM42688P_WriteByte(ICM42688P_ACCEL_CONFIG0, (ICM42688P_ACCEL_FS_SEL_16G << 5) | ICM42688P_ODR_4KHZ);
 8001f2e:	2104      	movs	r1, #4
 8001f30:	2050      	movs	r0, #80	@ 0x50
 8001f32:	f7ff ff89 	bl	8001e48 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f36:	2032      	movs	r0, #50	@ 0x32
 8001f38:	f003 fd70 	bl	8005a1c <HAL_Delay>

	// GYRO_CONFIG1 0x51 - Gyro filter configuration
	// Enable gyro DLPF with low-pass filter (equivalent to original 20Hz filter)
	ICM42688P_WriteByte(ICM42688P_GYRO_CONFIG1, 0x16); // DLPF enabled, ~53Hz bandwidth at 1kHz ODR
 8001f3c:	2116      	movs	r1, #22
 8001f3e:	2051      	movs	r0, #81	@ 0x51
 8001f40:	f7ff ff82 	bl	8001e48 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f44:	2032      	movs	r0, #50	@ 0x32
 8001f46:	f003 fd69 	bl	8005a1c <HAL_Delay>

	// ACCEL_CONFIG1 0x53 - Accel filter configuration
	// Enable accel DLPF with low-pass filter (equivalent to original 44.8Hz filter)
	ICM42688P_WriteByte(ICM42688P_ACCEL_CONFIG1, 0x15); // DLPF enabled, ~53Hz bandwidth at 1kHz ODR
 8001f4a:	2115      	movs	r1, #21
 8001f4c:	2053      	movs	r0, #83	@ 0x53
 8001f4e:	f7ff ff7b 	bl	8001e48 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f52:	2032      	movs	r0, #50	@ 0x32
 8001f54:	f003 fd62 	bl	8005a1c <HAL_Delay>

	// TMST_CONFIG 0x54 - Timestamp configuration (optional)
	ICM42688P_WriteByte(ICM42688P_TMST_CONFIG, 0x23); // Enable timestamp, 1kHz resolution
 8001f58:	2123      	movs	r1, #35	@ 0x23
 8001f5a:	2054      	movs	r0, #84	@ 0x54
 8001f5c:	f7ff ff74 	bl	8001e48 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f60:	2032      	movs	r0, #50	@ 0x32
 8001f62:	f003 fd5b 	bl	8005a1c <HAL_Delay>

	// FIFO_CONFIG 0x16 - FIFO configuration (disable for this setup, equivalent to original)
	ICM42688P_WriteByte(ICM42688P_FIFO_CONFIG, 0x00); // FIFO bypass mode
 8001f66:	2100      	movs	r1, #0
 8001f68:	2016      	movs	r0, #22
 8001f6a:	f7ff ff6d 	bl	8001e48 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f6e:	2032      	movs	r0, #50	@ 0x32
 8001f70:	f003 fd54 	bl	8005a1c <HAL_Delay>

	// INT_CONFIG 0x14 - Interrupt configuration
	ICM42688P_WriteByte(ICM42688P_INT_CONFIG, 0x12); // INT1 push-pull, active high, pulse mode
 8001f74:	2112      	movs	r1, #18
 8001f76:	2014      	movs	r0, #20
 8001f78:	f7ff ff66 	bl	8001e48 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f7c:	2032      	movs	r0, #50	@ 0x32
 8001f7e:	f003 fd4d 	bl	8005a1c <HAL_Delay>

	// INT_CONFIG1 0x64 - Additional interrupt configuration
	ICM42688P_WriteByte(ICM42688P_INT_CONFIG1, 0x00); // Default settings
 8001f82:	2100      	movs	r1, #0
 8001f84:	2064      	movs	r0, #100	@ 0x64
 8001f86:	f7ff ff5f 	bl	8001e48 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f8a:	2032      	movs	r0, #50	@ 0x32
 8001f8c:	f003 fd46 	bl	8005a1c <HAL_Delay>

	// INT_SOURCE0 0x65 - Enable data ready interrupt (equivalent to original INT_ENABLE)
	ICM42688P_WriteByte(ICM42688P_INT_SOURCE0, 0x18); // Enable UI data ready interrupt for INT1
 8001f90:	2118      	movs	r1, #24
 8001f92:	2065      	movs	r0, #101	@ 0x65
 8001f94:	f7ff ff58 	bl	8001e48 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f98:	2032      	movs	r0, #50	@ 0x32
 8001f9a:	f003 fd3f 	bl	8005a1c <HAL_Delay>

	printf("ICM42688P initialized successfully!\n");
 8001f9e:	4807      	ldr	r0, [pc, #28]	@ (8001fbc <ICM42688P_Initialization+0x12c>)
 8001fa0:	f00f fff8 	bl	8011f94 <puts>

	return 0; //OK
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	08016b94 	.word	0x08016b94
 8001fb4:	08016bac 	.word	0x08016bac
 8001fb8:	08016bd0 	.word	0x08016bd0
 8001fbc:	08016bfc 	.word	0x08016bfc

08001fc0 <ICM42688P_Get6AxisRawData>:

void ICM42688P_Get6AxisRawData(short* accel, short* gyro)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
	unsigned char data[14];
	ICM42688P_ReadBytes(ICM42688P_ACCEL_DATA_X1, 14, data);
 8001fca:	f107 0308 	add.w	r3, r7, #8
 8001fce:	461a      	mov	r2, r3
 8001fd0:	210e      	movs	r1, #14
 8001fd2:	201f      	movs	r0, #31
 8001fd4:	f7ff ff08 	bl	8001de8 <ICM42688P_ReadBytes>

	accel[0] = (data[0] << 8) | data[1];
 8001fd8:	7a3b      	ldrb	r3, [r7, #8]
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	7a7b      	ldrb	r3, [r7, #9]
 8001fe2:	b21b      	sxth	r3, r3
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	b21a      	sxth	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	801a      	strh	r2, [r3, #0]
	accel[1] = (data[2] << 8) | data[3];
 8001fec:	7abb      	ldrb	r3, [r7, #10]
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	b219      	sxth	r1, r3
 8001ff4:	7afb      	ldrb	r3, [r7, #11]
 8001ff6:	b21a      	sxth	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	b212      	sxth	r2, r2
 8002000:	801a      	strh	r2, [r3, #0]
	accel[2] = (data[4] << 8) | data[5];
 8002002:	7b3b      	ldrb	r3, [r7, #12]
 8002004:	b21b      	sxth	r3, r3
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	b219      	sxth	r1, r3
 800200a:	7b7b      	ldrb	r3, [r7, #13]
 800200c:	b21a      	sxth	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3304      	adds	r3, #4
 8002012:	430a      	orrs	r2, r1
 8002014:	b212      	sxth	r2, r2
 8002016:	801a      	strh	r2, [r3, #0]

	gyro[0] = ((data[6] << 8) | data[7]);
 8002018:	7bbb      	ldrb	r3, [r7, #14]
 800201a:	b21b      	sxth	r3, r3
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	b21a      	sxth	r2, r3
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	b21b      	sxth	r3, r3
 8002024:	4313      	orrs	r3, r2
 8002026:	b21a      	sxth	r2, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[8] << 8) | data[9]);
 800202c:	7c3b      	ldrb	r3, [r7, #16]
 800202e:	b21b      	sxth	r3, r3
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	b219      	sxth	r1, r3
 8002034:	7c7b      	ldrb	r3, [r7, #17]
 8002036:	b21a      	sxth	r2, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	3302      	adds	r3, #2
 800203c:	430a      	orrs	r2, r1
 800203e:	b212      	sxth	r2, r2
 8002040:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[10] << 8) | data[11]);
 8002042:	7cbb      	ldrb	r3, [r7, #18]
 8002044:	b21b      	sxth	r3, r3
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	b219      	sxth	r1, r3
 800204a:	7cfb      	ldrb	r3, [r7, #19]
 800204c:	b21a      	sxth	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	3304      	adds	r3, #4
 8002052:	430a      	orrs	r2, r1
 8002054:	b212      	sxth	r2, r2
 8002056:	801a      	strh	r2, [r3, #0]
}
 8002058:	bf00      	nop
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <ICM42688P_DataReady>:
	gyro[1] = ((data[2] << 8) | data[3]);
	gyro[2] = ((data[4] << 8) | data[5]);
}

int ICM42688P_DataReady(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM42688P_INT1_PORT, ICM42688P_INT1_PIN);
 8002064:	2110      	movs	r1, #16
 8002066:	4803      	ldr	r0, [pc, #12]	@ (8002074 <ICM42688P_DataReady+0x14>)
 8002068:	f7ff fd7e 	bl	8001b68 <LL_GPIO_IsInputPinSet>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	58021000 	.word	0x58021000

08002078 <ICM42688P_WriteHWOffsets>:
    printf("Gyro HW offsets written: X=%d, Y=%d, Z=%d\n",
            offset_x, offset_y, offset_z);
}

void ICM42688P_WriteHWOffsets(float gyro_bias_dps[3], float accel_bias_g[3])
{
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b08a      	sub	sp, #40	@ 0x28
 800207c:	af04      	add	r7, sp, #16
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
    // Convert gyro (1 LSB = 1/32 dps)
    int16_t gx = clamp12((int32_t)roundf(-gyro_bias_dps[0] * 32.0f));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	eef1 7a67 	vneg.f32	s15, s15
 800208c:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 80022ac <ICM42688P_WriteHWOffsets+0x234>
 8002090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002094:	eeb0 0a67 	vmov.f32	s0, s15
 8002098:	f013 ff76 	bl	8015f88 <roundf>
 800209c:	eef0 7a40 	vmov.f32	s15, s0
 80020a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a4:	ee17 0a90 	vmov	r0, s15
 80020a8:	f7ff fd90 	bl	8001bcc <clamp12>
 80020ac:	4603      	mov	r3, r0
 80020ae:	82fb      	strh	r3, [r7, #22]
    int16_t gy = clamp12((int32_t)roundf(-gyro_bias_dps[1] * 32.0f));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3304      	adds	r3, #4
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	eef1 7a67 	vneg.f32	s15, s15
 80020bc:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80022ac <ICM42688P_WriteHWOffsets+0x234>
 80020c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020c4:	eeb0 0a67 	vmov.f32	s0, s15
 80020c8:	f013 ff5e 	bl	8015f88 <roundf>
 80020cc:	eef0 7a40 	vmov.f32	s15, s0
 80020d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020d4:	ee17 0a90 	vmov	r0, s15
 80020d8:	f7ff fd78 	bl	8001bcc <clamp12>
 80020dc:	4603      	mov	r3, r0
 80020de:	82bb      	strh	r3, [r7, #20]
    int16_t gz = clamp12((int32_t)roundf(-gyro_bias_dps[2] * 32.0f));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3308      	adds	r3, #8
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	eef1 7a67 	vneg.f32	s15, s15
 80020ec:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80022ac <ICM42688P_WriteHWOffsets+0x234>
 80020f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f4:	eeb0 0a67 	vmov.f32	s0, s15
 80020f8:	f013 ff46 	bl	8015f88 <roundf>
 80020fc:	eef0 7a40 	vmov.f32	s15, s0
 8002100:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002104:	ee17 0a90 	vmov	r0, s15
 8002108:	f7ff fd60 	bl	8001bcc <clamp12>
 800210c:	4603      	mov	r3, r0
 800210e:	827b      	strh	r3, [r7, #18]

    // Convert accel (1 LSB = 0.5 mg = 0.0005 g)
    int16_t ax = clamp12((int32_t)roundf(-accel_bias_g[0] / 0.0005f));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	edd3 7a00 	vldr	s15, [r3]
 8002116:	eef1 7a67 	vneg.f32	s15, s15
 800211a:	eddf 6a65 	vldr	s13, [pc, #404]	@ 80022b0 <ICM42688P_WriteHWOffsets+0x238>
 800211e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002122:	eeb0 0a47 	vmov.f32	s0, s14
 8002126:	f013 ff2f 	bl	8015f88 <roundf>
 800212a:	eef0 7a40 	vmov.f32	s15, s0
 800212e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002132:	ee17 0a90 	vmov	r0, s15
 8002136:	f7ff fd49 	bl	8001bcc <clamp12>
 800213a:	4603      	mov	r3, r0
 800213c:	823b      	strh	r3, [r7, #16]
    int16_t ay = clamp12((int32_t)roundf(-accel_bias_g[1] / 0.0005f));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	3304      	adds	r3, #4
 8002142:	edd3 7a00 	vldr	s15, [r3]
 8002146:	eef1 7a67 	vneg.f32	s15, s15
 800214a:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80022b0 <ICM42688P_WriteHWOffsets+0x238>
 800214e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002152:	eeb0 0a47 	vmov.f32	s0, s14
 8002156:	f013 ff17 	bl	8015f88 <roundf>
 800215a:	eef0 7a40 	vmov.f32	s15, s0
 800215e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002162:	ee17 0a90 	vmov	r0, s15
 8002166:	f7ff fd31 	bl	8001bcc <clamp12>
 800216a:	4603      	mov	r3, r0
 800216c:	81fb      	strh	r3, [r7, #14]
    int16_t az = clamp12((int32_t)roundf(-accel_bias_g[2] / 0.0005f));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	3308      	adds	r3, #8
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	eef1 7a67 	vneg.f32	s15, s15
 800217a:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 80022b0 <ICM42688P_WriteHWOffsets+0x238>
 800217e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002182:	eeb0 0a47 	vmov.f32	s0, s14
 8002186:	f013 feff 	bl	8015f88 <roundf>
 800218a:	eef0 7a40 	vmov.f32	s15, s0
 800218e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002192:	ee17 0a90 	vmov	r0, s15
 8002196:	f7ff fd19 	bl	8001bcc <clamp12>
 800219a:	4603      	mov	r3, r0
 800219c:	81bb      	strh	r3, [r7, #12]

    // Switch to USER BANK 4
    ICM42688P_SelectBank(4);
 800219e:	2004      	movs	r0, #4
 80021a0:	f7ff fdc6 	bl	8001d30 <ICM42688P_SelectBank>

    // --- Write Gyro Offsets ---
    ICM42688P_WriteByte(0x77, (uint8_t)(gx & 0xFF));                           // OFFSET_USER0
 80021a4:	8afb      	ldrh	r3, [r7, #22]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	4619      	mov	r1, r3
 80021aa:	2077      	movs	r0, #119	@ 0x77
 80021ac:	f7ff fe4c 	bl	8001e48 <ICM42688P_WriteByte>
    ICM42688P_WriteByte(0x78, (uint8_t)(((gx >> 8) & 0x0F) | ((gy >> 8) << 4))); // OFFSET_USER1
 80021b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021b4:	121b      	asrs	r3, r3, #8
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	b25b      	sxtb	r3, r3
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	b25a      	sxtb	r2, r3
 80021c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80021c4:	121b      	asrs	r3, r3, #8
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	b25b      	sxtb	r3, r3
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b25b      	sxtb	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	4619      	mov	r1, r3
 80021d6:	2078      	movs	r0, #120	@ 0x78
 80021d8:	f7ff fe36 	bl	8001e48 <ICM42688P_WriteByte>
    ICM42688P_WriteByte(0x79, (uint8_t)(gy & 0xFF));                           // OFFSET_USER2
 80021dc:	8abb      	ldrh	r3, [r7, #20]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	4619      	mov	r1, r3
 80021e2:	2079      	movs	r0, #121	@ 0x79
 80021e4:	f7ff fe30 	bl	8001e48 <ICM42688P_WriteByte>
    ICM42688P_WriteByte(0x7A, (uint8_t)(gz & 0xFF));                           // OFFSET_USER3
 80021e8:	8a7b      	ldrh	r3, [r7, #18]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	4619      	mov	r1, r3
 80021ee:	207a      	movs	r0, #122	@ 0x7a
 80021f0:	f7ff fe2a 	bl	8001e48 <ICM42688P_WriteByte>

    // OFFSET_USER4 → bits split between GZ[11:8] and AX[11:8]
    uint8_t off4 = ((gz >> 8) & 0x0F) | ((ax >> 8) << 4);
 80021f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021f8:	121b      	asrs	r3, r3, #8
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	b25b      	sxtb	r3, r3
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	b25a      	sxtb	r2, r3
 8002204:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002208:	121b      	asrs	r3, r3, #8
 800220a:	b21b      	sxth	r3, r3
 800220c:	b25b      	sxtb	r3, r3
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	b25b      	sxtb	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b25b      	sxtb	r3, r3
 8002216:	72fb      	strb	r3, [r7, #11]
    ICM42688P_WriteByte(0x7B, (uint8_t)(ax & 0xFF));                           // OFFSET_USER5
 8002218:	8a3b      	ldrh	r3, [r7, #16]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	4619      	mov	r1, r3
 800221e:	207b      	movs	r0, #123	@ 0x7b
 8002220:	f7ff fe12 	bl	8001e48 <ICM42688P_WriteByte>
    ICM42688P_WriteByte(0x7C, (uint8_t)(ay & 0xFF));                           // OFFSET_USER6
 8002224:	89fb      	ldrh	r3, [r7, #14]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4619      	mov	r1, r3
 800222a:	207c      	movs	r0, #124	@ 0x7c
 800222c:	f7ff fe0c 	bl	8001e48 <ICM42688P_WriteByte>

    // OFFSET_USER7 → bits split between AY[11:8] and AZ[11:8]
    uint8_t off7 = ((ay >> 8) & 0x0F) | ((az >> 8) << 4);
 8002230:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002234:	121b      	asrs	r3, r3, #8
 8002236:	b21b      	sxth	r3, r3
 8002238:	b25b      	sxtb	r3, r3
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	b25a      	sxtb	r2, r3
 8002240:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002244:	121b      	asrs	r3, r3, #8
 8002246:	b21b      	sxth	r3, r3
 8002248:	b25b      	sxtb	r3, r3
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	b25b      	sxtb	r3, r3
 800224e:	4313      	orrs	r3, r2
 8002250:	b25b      	sxtb	r3, r3
 8002252:	72bb      	strb	r3, [r7, #10]

    ICM42688P_WriteByte(0x7D, off4);                                           // OFFSET_USER4
 8002254:	7afb      	ldrb	r3, [r7, #11]
 8002256:	4619      	mov	r1, r3
 8002258:	207d      	movs	r0, #125	@ 0x7d
 800225a:	f7ff fdf5 	bl	8001e48 <ICM42688P_WriteByte>
    ICM42688P_WriteByte(0x7E, off7);                                           // OFFSET_USER7
 800225e:	7abb      	ldrb	r3, [r7, #10]
 8002260:	4619      	mov	r1, r3
 8002262:	207e      	movs	r0, #126	@ 0x7e
 8002264:	f7ff fdf0 	bl	8001e48 <ICM42688P_WriteByte>
    ICM42688P_WriteByte(0x7F, (uint8_t)(az & 0xFF));                           // OFFSET_USER8
 8002268:	89bb      	ldrh	r3, [r7, #12]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	4619      	mov	r1, r3
 800226e:	207f      	movs	r0, #127	@ 0x7f
 8002270:	f7ff fdea 	bl	8001e48 <ICM42688P_WriteByte>

    // Switch back to USER BANK 0
    ICM42688P_SelectBank(0);
 8002274:	2000      	movs	r0, #0
 8002276:	f7ff fd5b 	bl	8001d30 <ICM42688P_SelectBank>

    printf("HW Offsets written: Gx=%d, Gy=%d, Gz=%d | Ax=%d, Ay=%d, Az=%d\n",
 800227a:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 800227e:	f9b7 4014 	ldrsh.w	r4, [r7, #20]
 8002282:	f9b7 5012 	ldrsh.w	r5, [r7, #18]
 8002286:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800228a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800228e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002292:	9102      	str	r1, [sp, #8]
 8002294:	9201      	str	r2, [sp, #4]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	462b      	mov	r3, r5
 800229a:	4622      	mov	r2, r4
 800229c:	4601      	mov	r1, r0
 800229e:	4805      	ldr	r0, [pc, #20]	@ (80022b4 <ICM42688P_WriteHWOffsets+0x23c>)
 80022a0:	f00f fe08 	bl	8011eb4 <iprintf>
           gx, gy, gz, ax, ay, az);
}
 80022a4:	bf00      	nop
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bdb0      	pop	{r4, r5, r7, pc}
 80022ac:	42000000 	.word	0x42000000
 80022b0:	3a03126f 	.word	0x3a03126f
 80022b4:	08016ce0 	.word	0x08016ce0

080022b8 <ICM42688P_CalibrateAndWriteOffsets>:

// Calibration function
void ICM42688P_CalibrateAndWriteOffsets(uint16_t sample_count)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b098      	sub	sp, #96	@ 0x60
 80022bc:	af04      	add	r7, sp, #16
 80022be:	4603      	mov	r3, r0
 80022c0:	80fb      	strh	r3, [r7, #6]
    int32_t gyro_sum[3] = {0}, accel_sum[3] = {0};
 80022c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
    int16_t accel_raw[3], gyro_raw[3];

    printf("Keep sensor still... collecting %d samples\n", sample_count);
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	4619      	mov	r1, r3
 80022de:	4876      	ldr	r0, [pc, #472]	@ (80024b8 <ICM42688P_CalibrateAndWriteOffsets+0x200>)
 80022e0:	f00f fde8 	bl	8011eb4 <iprintf>

    for (uint16_t i = 0; i < sample_count; i++)
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80022ea:	e02d      	b.n	8002348 <ICM42688P_CalibrateAndWriteOffsets+0x90>
    {
        // Read raw sensor data
        ICM42688P_Get6AxisRawData(accel_raw, gyro_raw);
 80022ec:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80022f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fe62 	bl	8001fc0 <ICM42688P_Get6AxisRawData>

        gyro_sum[0] += gyro_raw[0];
 80022fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022fe:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8002302:	4413      	add	r3, r2
 8002304:	643b      	str	r3, [r7, #64]	@ 0x40
        gyro_sum[1] += gyro_raw[1];
 8002306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002308:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800230c:	4413      	add	r3, r2
 800230e:	647b      	str	r3, [r7, #68]	@ 0x44
        gyro_sum[2] += gyro_raw[2];
 8002310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002312:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8002316:	4413      	add	r3, r2
 8002318:	64bb      	str	r3, [r7, #72]	@ 0x48

        accel_sum[0] += accel_raw[0];
 800231a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8002320:	4413      	add	r3, r2
 8002322:	637b      	str	r3, [r7, #52]	@ 0x34
        accel_sum[1] += accel_raw[1];
 8002324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002326:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 800232a:	4413      	add	r3, r2
 800232c:	63bb      	str	r3, [r7, #56]	@ 0x38
        accel_sum[2] += accel_raw[2];
 800232e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002330:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8002334:	4413      	add	r3, r2
 8002336:	63fb      	str	r3, [r7, #60]	@ 0x3c

        HAL_Delay(2); // ~500Hz sampling if you wait 2ms
 8002338:	2002      	movs	r0, #2
 800233a:	f003 fb6f 	bl	8005a1c <HAL_Delay>
    for (uint16_t i = 0; i < sample_count; i++)
 800233e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002342:	3301      	adds	r3, #1
 8002344:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002348:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	429a      	cmp	r2, r3
 8002350:	d3cc      	bcc.n	80022ec <ICM42688P_CalibrateAndWriteOffsets+0x34>

    // Compute averages
    float gyro_bias[3];
    float accel_bias[3];

    gyro_bias[0] = (float)gyro_sum[0] / sample_count * 0.061035f; // raw->dps
 8002352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002354:	ee07 3a90 	vmov	s15, r3
 8002358:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800236a:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80024bc <ICM42688P_CalibrateAndWriteOffsets+0x204>
 800236e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002372:	edc7 7a06 	vstr	s15, [r7, #24]
    gyro_bias[1] = (float)gyro_sum[1] / sample_count * 0.061035f;
 8002376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002378:	ee07 3a90 	vmov	s15, r3
 800237c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800238a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800238e:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80024bc <ICM42688P_CalibrateAndWriteOffsets+0x204>
 8002392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002396:	edc7 7a07 	vstr	s15, [r7, #28]
    gyro_bias[2] = -(float)gyro_sum[2] / sample_count * 0.061035f;
 800239a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a4:	eef1 6a67 	vneg.f32	s13, s15
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023b6:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80024bc <ICM42688P_CalibrateAndWriteOffsets+0x204>
 80023ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023be:	edc7 7a08 	vstr	s15, [r7, #32]

    accel_bias[0] = (float)accel_sum[0] / sample_count * 0.0004883f; // raw->g
 80023c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c4:	ee07 3a90 	vmov	s15, r3
 80023c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023da:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80024c0 <ICM42688P_CalibrateAndWriteOffsets+0x208>
 80023de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e2:	edc7 7a03 	vstr	s15, [r7, #12]
    accel_bias[1] = (float)accel_sum[1] / sample_count * 0.0004883f;
 80023e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e8:	ee07 3a90 	vmov	s15, r3
 80023ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023fe:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80024c0 <ICM42688P_CalibrateAndWriteOffsets+0x208>
 8002402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002406:	edc7 7a04 	vstr	s15, [r7, #16]
    accel_bias[2] = (float)accel_sum[2] / sample_count * 0.0004883f;
 800240a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800240c:	ee07 3a90 	vmov	s15, r3
 8002410:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800241e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002422:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80024c0 <ICM42688P_CalibrateAndWriteOffsets+0x208>
 8002426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800242a:	edc7 7a05 	vstr	s15, [r7, #20]

    // Correct accel Z so gravity = +1g
    accel_bias[2] -= 1.0f;
 800242e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002432:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002436:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800243a:	edc7 7a05 	vstr	s15, [r7, #20]

    printf("Calculated biases:\n");
 800243e:	4821      	ldr	r0, [pc, #132]	@ (80024c4 <ICM42688P_CalibrateAndWriteOffsets+0x20c>)
 8002440:	f00f fda8 	bl	8011f94 <puts>
    printf(" Gyro (dps):  X=%.3f  Y=%.3f  Z=%.3f\n", gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 8002444:	edd7 7a06 	vldr	s15, [r7, #24]
 8002448:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800244c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002450:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002454:	edd7 6a08 	vldr	s13, [r7, #32]
 8002458:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800245c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002460:	ed8d 7b00 	vstr	d7, [sp]
 8002464:	ec53 2b15 	vmov	r2, r3, d5
 8002468:	4817      	ldr	r0, [pc, #92]	@ (80024c8 <ICM42688P_CalibrateAndWriteOffsets+0x210>)
 800246a:	f00f fd23 	bl	8011eb4 <iprintf>
    printf(" Accel (g):   X=%.4f Y=%.4f Z=%.4f\n", accel_bias[0], accel_bias[1], accel_bias[2]);
 800246e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002472:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002476:	edd7 7a04 	vldr	s15, [r7, #16]
 800247a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800247e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002482:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002486:	ed8d 6b02 	vstr	d6, [sp, #8]
 800248a:	ed8d 7b00 	vstr	d7, [sp]
 800248e:	ec53 2b15 	vmov	r2, r3, d5
 8002492:	480e      	ldr	r0, [pc, #56]	@ (80024cc <ICM42688P_CalibrateAndWriteOffsets+0x214>)
 8002494:	f00f fd0e 	bl	8011eb4 <iprintf>

    // Write into sensor HW registers
    ICM42688P_WriteHWOffsets(gyro_bias, accel_bias);
 8002498:	f107 020c 	add.w	r2, r7, #12
 800249c:	f107 0318 	add.w	r3, r7, #24
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fde8 	bl	8002078 <ICM42688P_WriteHWOffsets>

    printf("Biases written to ICM42688P HW registers!\n");
 80024a8:	4809      	ldr	r0, [pc, #36]	@ (80024d0 <ICM42688P_CalibrateAndWriteOffsets+0x218>)
 80024aa:	f00f fd73 	bl	8011f94 <puts>
}
 80024ae:	bf00      	nop
 80024b0:	3750      	adds	r7, #80	@ 0x50
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	08016d20 	.word	0x08016d20
 80024bc:	3d79ffd6 	.word	0x3d79ffd6
 80024c0:	3a000142 	.word	0x3a000142
 80024c4:	08016d4c 	.word	0x08016d4c
 80024c8:	08016d60 	.word	0x08016d60
 80024cc:	08016d88 	.word	0x08016d88
 80024d0:	08016dac 	.word	0x08016dac

080024d4 <WS2812_SetColor>:
    if (brightness < 0.0) brightness = 0.0;
    if (brightness > 1.0) brightness = 1.0;
    global_brightness = brightness;
}

void WS2812_SetColor(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	4608      	mov	r0, r1
 80024de:	4611      	mov	r1, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80024e6:	4603      	mov	r3, r0
 80024e8:	72fb      	strb	r3, [r7, #11]
 80024ea:	460b      	mov	r3, r1
 80024ec:	72bb      	strb	r3, [r7, #10]
 80024ee:	4613      	mov	r3, r2
 80024f0:	727b      	strb	r3, [r7, #9]
    if (led_index < LED_COUNT) {
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d165      	bne.n	80025c4 <WS2812_SetColor+0xf0>
        // Clamp brightness between 0.0 and 1.0
        if (brightness < 0.0) brightness = 0.0;
 80024f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80024fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002504:	d502      	bpl.n	800250c <WS2812_SetColor+0x38>
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	607b      	str	r3, [r7, #4]
        if (brightness > 1.0) brightness = 1.0;
 800250c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002510:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251c:	dd02      	ble.n	8002524 <WS2812_SetColor+0x50>
 800251e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002522:	607b      	str	r3, [r7, #4]
        // Apply brightness scaling (combine with global brightness)
        float total_brightness = brightness * global_brightness;
 8002524:	4b2a      	ldr	r3, [pc, #168]	@ (80025d0 <WS2812_SetColor+0xfc>)
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	ed97 7a01 	vldr	s14, [r7, #4]
 800252e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002532:	edc7 7a05 	vstr	s15, [r7, #20]
        led_data[led_index][0] = (uint8_t)(green * total_brightness); // GRB order
 8002536:	7abb      	ldrb	r3, [r7, #10]
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002540:	edd7 7a05 	vldr	s15, [r7, #20]
 8002544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800254c:	edc7 7a00 	vstr	s15, [r7]
 8002550:	783b      	ldrb	r3, [r7, #0]
 8002552:	b2d8      	uxtb	r0, r3
 8002554:	491f      	ldr	r1, [pc, #124]	@ (80025d4 <WS2812_SetColor+0x100>)
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	440b      	add	r3, r1
 8002560:	4602      	mov	r2, r0
 8002562:	701a      	strb	r2, [r3, #0]
        led_data[led_index][1] = (uint8_t)(red * total_brightness);
 8002564:	7afb      	ldrb	r3, [r7, #11]
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800256e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800257a:	edc7 7a00 	vstr	s15, [r7]
 800257e:	783b      	ldrb	r3, [r7, #0]
 8002580:	b2d8      	uxtb	r0, r3
 8002582:	4914      	ldr	r1, [pc, #80]	@ (80025d4 <WS2812_SetColor+0x100>)
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	440b      	add	r3, r1
 800258e:	3301      	adds	r3, #1
 8002590:	4602      	mov	r2, r0
 8002592:	701a      	strb	r2, [r3, #0]
        led_data[led_index][2] = (uint8_t)(blue * total_brightness);
 8002594:	7a7b      	ldrb	r3, [r7, #9]
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800259e:	edd7 7a05 	vldr	s15, [r7, #20]
 80025a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025aa:	edc7 7a00 	vstr	s15, [r7]
 80025ae:	783b      	ldrb	r3, [r7, #0]
 80025b0:	b2d8      	uxtb	r0, r3
 80025b2:	4908      	ldr	r1, [pc, #32]	@ (80025d4 <WS2812_SetColor+0x100>)
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	440b      	add	r3, r1
 80025be:	3302      	adds	r3, #2
 80025c0:	4602      	mov	r2, r0
 80025c2:	701a      	strb	r2, [r3, #0]
//        printf("WS2812 SetColor: LED %lu, R=%d, G=%d, B=%d, Brightness=%.2f\n",
//               led_index, led_data[led_index][1], led_data[led_index][0], led_data[led_index][2], brightness);
    }
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	24000000 	.word	0x24000000
 80025d4:	2400036c 	.word	0x2400036c

080025d8 <WS2812_Send>:

void WS2812_Send(void) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
    uint32_t buffer_index = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]

    // Clear buffer to ensure no stale data
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	e007      	b.n	80025f8 <WS2812_Send+0x20>
        pwm_buffer[i] = DUTY_RESET;
 80025e8:	4a34      	ldr	r2, [pc, #208]	@ (80026bc <WS2812_Send+0xe4>)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2100      	movs	r1, #0
 80025ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	3301      	adds	r3, #1
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b49      	cmp	r3, #73	@ 0x49
 80025fc:	d9f4      	bls.n	80025e8 <WS2812_Send+0x10>
    }

    // Convert LED data to PWM duty cycles
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	e039      	b.n	8002678 <WS2812_Send+0xa0>
        for (uint32_t color = 0; color < 3; color++) { // GRB
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	e030      	b.n	800266c <WS2812_Send+0x94>
            for (int8_t bit = 7; bit >= 0; bit--) {
 800260a:	2307      	movs	r3, #7
 800260c:	71fb      	strb	r3, [r7, #7]
 800260e:	e026      	b.n	800265e <WS2812_Send+0x86>
                if (led_data[led][color] & (1 << bit)) {
 8002610:	492b      	ldr	r1, [pc, #172]	@ (80026c0 <WS2812_Send+0xe8>)
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	18ca      	adds	r2, r1, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4413      	add	r3, r2
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	fa42 f303 	asr.w	r3, r2, r3
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <WS2812_Send+0x6c>
                    pwm_buffer[buffer_index++] = DUTY_1; // Logical 1
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	617a      	str	r2, [r7, #20]
 800263a:	4a20      	ldr	r2, [pc, #128]	@ (80026bc <WS2812_Send+0xe4>)
 800263c:	21a0      	movs	r1, #160	@ 0xa0
 800263e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002642:	e006      	b.n	8002652 <WS2812_Send+0x7a>
                } else {
                    pwm_buffer[buffer_index++] = DUTY_0; // Logical 0
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	617a      	str	r2, [r7, #20]
 800264a:	4a1c      	ldr	r2, [pc, #112]	@ (80026bc <WS2812_Send+0xe4>)
 800264c:	2150      	movs	r1, #80	@ 0x50
 800264e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            for (int8_t bit = 7; bit >= 0; bit--) {
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b2db      	uxtb	r3, r3
 800265c:	71fb      	strb	r3, [r7, #7]
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	dad4      	bge.n	8002610 <WS2812_Send+0x38>
        for (uint32_t color = 0; color < 3; color++) { // GRB
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	3301      	adds	r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d9cb      	bls.n	800260a <WS2812_Send+0x32>
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	3301      	adds	r3, #1
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0c2      	beq.n	8002604 <WS2812_Send+0x2c>
            }
        }
    }

    // Stop previous DMA and timer
    HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 800267e:	2104      	movs	r1, #4
 8002680:	4810      	ldr	r0, [pc, #64]	@ (80026c4 <WS2812_Send+0xec>)
 8002682:	f00b fdf9 	bl	800e278 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_Base_Stop(&WS2812_TIMER);
 8002686:	480f      	ldr	r0, [pc, #60]	@ (80026c4 <WS2812_Send+0xec>)
 8002688:	f00b fa1e 	bl	800dac8 <HAL_TIM_Base_Stop>

    // Ensure DMA interrupt is enabled
    HAL_NVIC_SetPriority(WS2812_DMA_IRQn, 0, 0);
 800268c:	2200      	movs	r2, #0
 800268e:	2100      	movs	r1, #0
 8002690:	200f      	movs	r0, #15
 8002692:	f003 fac2 	bl	8005c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WS2812_DMA_IRQn);
 8002696:	200f      	movs	r0, #15
 8002698:	f003 fad9 	bl	8005c4e <HAL_NVIC_EnableIRQ>

    // Reset flag and start new DMA transfer
    data_sent_flag = 0;
 800269c:	4b0a      	ldr	r3, [pc, #40]	@ (80026c8 <WS2812_Send+0xf0>)
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start(&WS2812_TIMER);
 80026a2:	4808      	ldr	r0, [pc, #32]	@ (80026c4 <WS2812_Send+0xec>)
 80026a4:	f00b f992 	bl	800d9cc <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL, pwm_buffer, BUFFER_SIZE);
 80026a8:	234a      	movs	r3, #74	@ 0x4a
 80026aa:	4a04      	ldr	r2, [pc, #16]	@ (80026bc <WS2812_Send+0xe4>)
 80026ac:	2104      	movs	r1, #4
 80026ae:	4805      	ldr	r0, [pc, #20]	@ (80026c4 <WS2812_Send+0xec>)
 80026b0:	f00b fbae 	bl	800de10 <HAL_TIM_PWM_Start_DMA>
//    printf("WS2812 Send Started\n");
}
 80026b4:	bf00      	nop
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	24000244 	.word	0x24000244
 80026c0:	2400036c 	.word	0x2400036c
 80026c4:	24000628 	.word	0x24000628
 80026c8:	24000240 	.word	0x24000240

080026cc <main_led>:

void main_led(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	4608      	mov	r0, r1
 80026d6:	4611      	mov	r1, r2
 80026d8:	461a      	mov	r2, r3
 80026da:	ed87 0a01 	vstr	s0, [r7, #4]
 80026de:	4603      	mov	r3, r0
 80026e0:	72fb      	strb	r3, [r7, #11]
 80026e2:	460b      	mov	r3, r1
 80026e4:	72bb      	strb	r3, [r7, #10]
 80026e6:	4613      	mov	r3, r2
 80026e8:	727b      	strb	r3, [r7, #9]
    WS2812_SetColor(led_index, red, green, blue, brightness);
 80026ea:	7a7b      	ldrb	r3, [r7, #9]
 80026ec:	7aba      	ldrb	r2, [r7, #10]
 80026ee:	7af9      	ldrb	r1, [r7, #11]
 80026f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f7ff feed 	bl	80024d4 <WS2812_SetColor>
    WS2812_Send();
 80026fa:	f7ff ff6d 	bl	80025d8 <WS2812_Send>
    led_active = true;
 80026fe:	4b07      	ldr	r3, [pc, #28]	@ (800271c <main_led+0x50>)
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]
    led_start_time = HAL_GetTick();
 8002704:	f003 f97e 	bl	8005a04 <HAL_GetTick>
 8002708:	4603      	mov	r3, r0
 800270a:	4a05      	ldr	r2, [pc, #20]	@ (8002720 <main_led+0x54>)
 800270c:	6013      	str	r3, [r2, #0]
    led_on_time = 100; // Default duration (100ms)
 800270e:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <main_led+0x58>)
 8002710:	2264      	movs	r2, #100	@ 0x64
 8002712:	601a      	str	r2, [r3, #0]
//    printf("main_led: LED %lu set, duration=%lu ms\n", led_index, led_on_time);
}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	24000378 	.word	0x24000378
 8002720:	24000374 	.word	0x24000374
 8002724:	24000370 	.word	0x24000370

08002728 <HAL_TIM_PWM_PulseFinishedCallback>:
//            printf("WS2812 LED turned off\n");
        }
    }
}

__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a08      	ldr	r2, [pc, #32]	@ (8002758 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d109      	bne.n	800274e <HAL_TIM_PWM_PulseFinishedCallback+0x26>
        HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 800273a:	2104      	movs	r1, #4
 800273c:	4807      	ldr	r0, [pc, #28]	@ (800275c <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 800273e:	f00b fd9b 	bl	800e278 <HAL_TIM_PWM_Stop_DMA>
        HAL_TIM_Base_Stop(&WS2812_TIMER);
 8002742:	4806      	ldr	r0, [pc, #24]	@ (800275c <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8002744:	f00b f9c0 	bl	800dac8 <HAL_TIM_Base_Stop>
        data_sent_flag = 1;
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
//        printf("WS2812 DMA Transfer Complete\n");
    }
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40000400 	.word	0x40000400
 800275c:	24000628 	.word	0x24000628
 8002760:	24000240 	.word	0x24000240

08002764 <__NVIC_GetPriorityGrouping>:
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002768:	4b04      	ldr	r3, [pc, #16]	@ (800277c <__NVIC_GetPriorityGrouping+0x18>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 0307 	and.w	r3, r3, #7
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_EnableIRQ>:
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800278a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800278e:	2b00      	cmp	r3, #0
 8002790:	db0b      	blt.n	80027aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	4907      	ldr	r1, [pc, #28]	@ (80027b8 <__NVIC_EnableIRQ+0x38>)
 800279a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2001      	movs	r0, #1
 80027a2:	fa00 f202 	lsl.w	r2, r0, r2
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000e100 	.word	0xe000e100

080027bc <__NVIC_SetPriority>:
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	db0a      	blt.n	80027e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	490c      	ldr	r1, [pc, #48]	@ (8002808 <__NVIC_SetPriority+0x4c>)
 80027d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027da:	0112      	lsls	r2, r2, #4
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	440b      	add	r3, r1
 80027e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80027e4:	e00a      	b.n	80027fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4908      	ldr	r1, [pc, #32]	@ (800280c <__NVIC_SetPriority+0x50>)
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	3b04      	subs	r3, #4
 80027f4:	0112      	lsls	r2, r2, #4
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	440b      	add	r3, r1
 80027fa:	761a      	strb	r2, [r3, #24]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000e100 	.word	0xe000e100
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <NVIC_EncodePriority>:
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	@ 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f1c3 0307 	rsb	r3, r3, #7
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf28      	it	cs
 800282e:	2304      	movcs	r3, #4
 8002830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3304      	adds	r3, #4
 8002836:	2b06      	cmp	r3, #6
 8002838:	d902      	bls.n	8002840 <NVIC_EncodePriority+0x30>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3b03      	subs	r3, #3
 800283e:	e000      	b.n	8002842 <NVIC_EncodePriority+0x32>
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	401a      	ands	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002858:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43d9      	mvns	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	4313      	orrs	r3, r2
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	@ 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800287e:	4b35      	ldr	r3, [pc, #212]	@ (8002954 <MX_DMA_Init+0xdc>)
 8002880:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002884:	4a33      	ldr	r2, [pc, #204]	@ (8002954 <MX_DMA_Init+0xdc>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800288e:	4b31      	ldr	r3, [pc, #196]	@ (8002954 <MX_DMA_Init+0xdc>)
 8002890:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2100      	movs	r1, #0
 80028a0:	200b      	movs	r0, #11
 80028a2:	f003 f9ba 	bl	8005c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80028a6:	200b      	movs	r0, #11
 80028a8:	f003 f9d1 	bl	8005c4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80028ac:	2200      	movs	r2, #0
 80028ae:	2100      	movs	r1, #0
 80028b0:	200c      	movs	r0, #12
 80028b2:	f003 f9b2 	bl	8005c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80028b6:	200c      	movs	r0, #12
 80028b8:	f003 f9c9 	bl	8005c4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2100      	movs	r1, #0
 80028c0:	200d      	movs	r0, #13
 80028c2:	f003 f9aa 	bl	8005c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80028c6:	200d      	movs	r0, #13
 80028c8:	f003 f9c1 	bl	8005c4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80028cc:	f7ff ff4a 	bl	8002764 <__NVIC_GetPriorityGrouping>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2200      	movs	r2, #0
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff ff9a 	bl	8002810 <NVIC_EncodePriority>
 80028dc:	4603      	mov	r3, r0
 80028de:	4619      	mov	r1, r3
 80028e0:	200e      	movs	r0, #14
 80028e2:	f7ff ff6b 	bl	80027bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80028e6:	200e      	movs	r0, #14
 80028e8:	f7ff ff4a 	bl	8002780 <__NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80028ec:	f7ff ff3a 	bl	8002764 <__NVIC_GetPriorityGrouping>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2200      	movs	r2, #0
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ff8a 	bl	8002810 <NVIC_EncodePriority>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4619      	mov	r1, r3
 8002900:	200f      	movs	r0, #15
 8002902:	f7ff ff5b 	bl	80027bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002906:	200f      	movs	r0, #15
 8002908:	f7ff ff3a 	bl	8002780 <__NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800290c:	f7ff ff2a 	bl	8002764 <__NVIC_GetPriorityGrouping>
 8002910:	4603      	mov	r3, r0
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ff7a 	bl	8002810 <NVIC_EncodePriority>
 800291c:	4603      	mov	r3, r0
 800291e:	4619      	mov	r1, r3
 8002920:	2010      	movs	r0, #16
 8002922:	f7ff ff4b 	bl	80027bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002926:	2010      	movs	r0, #16
 8002928:	f7ff ff2a 	bl	8002780 <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800292c:	f7ff ff1a 	bl	8002764 <__NVIC_GetPriorityGrouping>
 8002930:	4603      	mov	r3, r0
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff6a 	bl	8002810 <NVIC_EncodePriority>
 800293c:	4603      	mov	r3, r0
 800293e:	4619      	mov	r1, r3
 8002940:	2011      	movs	r0, #17
 8002942:	f7ff ff3b 	bl	80027bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002946:	2011      	movs	r0, #17
 8002948:	f7ff ff1a 	bl	8002780 <__NVIC_EnableIRQ>

}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	58024400 	.word	0x58024400

08002958 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08c      	sub	sp, #48	@ 0x30
 800295c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295e:	f107 031c 	add.w	r3, r7, #28
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	60da      	str	r2, [r3, #12]
 800296c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800296e:	4b50      	ldr	r3, [pc, #320]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 8002970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002974:	4a4e      	ldr	r2, [pc, #312]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 8002976:	f043 0310 	orr.w	r3, r3, #16
 800297a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800297e:	4b4c      	ldr	r3, [pc, #304]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 8002980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800298c:	4b48      	ldr	r3, [pc, #288]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 800298e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002992:	4a47      	ldr	r2, [pc, #284]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 8002994:	f043 0304 	orr.w	r3, r3, #4
 8002998:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800299c:	4b44      	ldr	r3, [pc, #272]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 800299e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029aa:	4b41      	ldr	r3, [pc, #260]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 80029ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029b0:	4a3f      	ldr	r2, [pc, #252]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 80029b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029ba:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 80029bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c8:	4b39      	ldr	r3, [pc, #228]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 80029ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029ce:	4a38      	ldr	r2, [pc, #224]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029d8:	4b35      	ldr	r3, [pc, #212]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 80029da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	4b32      	ldr	r3, [pc, #200]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 80029e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029ec:	4a30      	ldr	r2, [pc, #192]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 80029ee:	f043 0302 	orr.w	r3, r3, #2
 80029f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029f6:	4b2e      	ldr	r3, [pc, #184]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 80029f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a04:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 8002a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a0a:	4a29      	ldr	r2, [pc, #164]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 8002a0c:	f043 0308 	orr.w	r3, r3, #8
 8002a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a14:	4b26      	ldr	r3, [pc, #152]	@ (8002ab0 <MX_GPIO_Init+0x158>)
 8002a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_1_Pin|LED_2_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8002a22:	2200      	movs	r2, #0
 8002a24:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8002a28:	4822      	ldr	r0, [pc, #136]	@ (8002ab4 <MX_GPIO_Init+0x15c>)
 8002a2a:	f005 fe73 	bl	8008714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a34:	4820      	ldr	r0, [pc, #128]	@ (8002ab8 <MX_GPIO_Init+0x160>)
 8002a36:	f005 fe6d 	bl	8008714 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|SPI2_CS_Pin;
 8002a3a:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8002a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a40:	2301      	movs	r3, #1
 8002a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a4c:	f107 031c 	add.w	r3, r7, #28
 8002a50:	4619      	mov	r1, r3
 8002a52:	4818      	ldr	r0, [pc, #96]	@ (8002ab4 <MX_GPIO_Init+0x15c>)
 8002a54:	f005 fcb6 	bl	80083c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_INT_Pin */
  GPIO_InitStruct.Pin = SPI3_INT_Pin;
 8002a58:	2310      	movs	r3, #16
 8002a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI3_INT_GPIO_Port, &GPIO_InitStruct);
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4812      	ldr	r0, [pc, #72]	@ (8002ab4 <MX_GPIO_Init+0x15c>)
 8002a6c:	f005 fcaa 	bl	80083c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_INT_Pin */
  GPIO_InitStruct.Pin = SPI2_INT_Pin;
 8002a70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a76:	2300      	movs	r3, #0
 8002a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI2_INT_GPIO_Port, &GPIO_InitStruct);
 8002a7e:	f107 031c 	add.w	r3, r7, #28
 8002a82:	4619      	mov	r1, r3
 8002a84:	480d      	ldr	r0, [pc, #52]	@ (8002abc <MX_GPIO_Init+0x164>)
 8002a86:	f005 fc9d 	bl	80083c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002a8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a90:	2301      	movs	r3, #1
 8002a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4805      	ldr	r0, [pc, #20]	@ (8002ab8 <MX_GPIO_Init+0x160>)
 8002aa4:	f005 fc8e 	bl	80083c4 <HAL_GPIO_Init>

}
 8002aa8:	bf00      	nop
 8002aaa:	3730      	adds	r7, #48	@ 0x30
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	58024400 	.word	0x58024400
 8002ab4:	58021000 	.word	0x58021000
 8002ab8:	58020000 	.word	0x58020000
 8002abc:	58020800 	.word	0x58020800

08002ac0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b38 <MX_I2C1_Init+0x78>)
 8002ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00D049FB;
 8002aca:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002acc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b3c <MX_I2C1_Init+0x7c>)
 8002ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ad0:	4b18      	ldr	r3, [pc, #96]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ad6:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002adc:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ae2:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ae8:	4b12      	ldr	r3, [pc, #72]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002aee:	4b11      	ldr	r3, [pc, #68]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002af4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002afa:	480e      	ldr	r0, [pc, #56]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002afc:	f005 fe3e 	bl	800877c <HAL_I2C_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b06:	f000 fe13 	bl	8003730 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4809      	ldr	r0, [pc, #36]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002b0e:	f007 fa5f 	bl	8009fd0 <HAL_I2CEx_ConfigAnalogFilter>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b18:	f000 fe0a 	bl	8003730 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4805      	ldr	r0, [pc, #20]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002b20:	f007 faa1 	bl	800a066 <HAL_I2CEx_ConfigDigitalFilter>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b2a:	f000 fe01 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	2400037c 	.word	0x2400037c
 8002b38:	40005400 	.word	0x40005400
 8002b3c:	00d049fb 	.word	0x00d049fb

08002b40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b0b8      	sub	sp, #224	@ 0xe0
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b58:	f107 0310 	add.w	r3, r7, #16
 8002b5c:	22b8      	movs	r2, #184	@ 0xb8
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f00f fb61 	bl	8012228 <memset>
  if(i2cHandle->Instance==I2C1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a5c      	ldr	r2, [pc, #368]	@ (8002cdc <HAL_I2C_MspInit+0x19c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	f040 80b1 	bne.w	8002cd4 <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b72:	f04f 0208 	mov.w	r2, #8
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b84:	f107 0310 	add.w	r3, r7, #16
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f009 fbc3 	bl	800c314 <HAL_RCCEx_PeriphCLKConfig>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002b94:	f000 fdcc 	bl	8003730 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b98:	4b51      	ldr	r3, [pc, #324]	@ (8002ce0 <HAL_I2C_MspInit+0x1a0>)
 8002b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b9e:	4a50      	ldr	r2, [pc, #320]	@ (8002ce0 <HAL_I2C_MspInit+0x1a0>)
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce0 <HAL_I2C_MspInit+0x1a0>)
 8002baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002bb6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002bba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bbe:	2312      	movs	r3, #18
 8002bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4841      	ldr	r0, [pc, #260]	@ (8002ce4 <HAL_I2C_MspInit+0x1a4>)
 8002bde:	f005 fbf1 	bl	80083c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002be2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ce0 <HAL_I2C_MspInit+0x1a0>)
 8002be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002be8:	4a3d      	ldr	r2, [pc, #244]	@ (8002ce0 <HAL_I2C_MspInit+0x1a0>)
 8002bea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce0 <HAL_I2C_MspInit+0x1a0>)
 8002bf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002c00:	4b39      	ldr	r3, [pc, #228]	@ (8002ce8 <HAL_I2C_MspInit+0x1a8>)
 8002c02:	4a3a      	ldr	r2, [pc, #232]	@ (8002cec <HAL_I2C_MspInit+0x1ac>)
 8002c04:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002c06:	4b38      	ldr	r3, [pc, #224]	@ (8002ce8 <HAL_I2C_MspInit+0x1a8>)
 8002c08:	2221      	movs	r2, #33	@ 0x21
 8002c0a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ce8 <HAL_I2C_MspInit+0x1a8>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c12:	4b35      	ldr	r3, [pc, #212]	@ (8002ce8 <HAL_I2C_MspInit+0x1a8>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c18:	4b33      	ldr	r3, [pc, #204]	@ (8002ce8 <HAL_I2C_MspInit+0x1a8>)
 8002c1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c1e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c20:	4b31      	ldr	r3, [pc, #196]	@ (8002ce8 <HAL_I2C_MspInit+0x1a8>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c26:	4b30      	ldr	r3, [pc, #192]	@ (8002ce8 <HAL_I2C_MspInit+0x1a8>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ce8 <HAL_I2C_MspInit+0x1a8>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c32:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce8 <HAL_I2C_MspInit+0x1a8>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c38:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce8 <HAL_I2C_MspInit+0x1a8>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002c3e:	482a      	ldr	r0, [pc, #168]	@ (8002ce8 <HAL_I2C_MspInit+0x1a8>)
 8002c40:	f003 f898 	bl	8005d74 <HAL_DMA_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8002c4a:	f000 fd71 	bl	8003730 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a25      	ldr	r2, [pc, #148]	@ (8002ce8 <HAL_I2C_MspInit+0x1a8>)
 8002c52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c54:	4a24      	ldr	r2, [pc, #144]	@ (8002ce8 <HAL_I2C_MspInit+0x1a8>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002c5a:	4b25      	ldr	r3, [pc, #148]	@ (8002cf0 <HAL_I2C_MspInit+0x1b0>)
 8002c5c:	4a25      	ldr	r2, [pc, #148]	@ (8002cf4 <HAL_I2C_MspInit+0x1b4>)
 8002c5e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002c60:	4b23      	ldr	r3, [pc, #140]	@ (8002cf0 <HAL_I2C_MspInit+0x1b0>)
 8002c62:	2222      	movs	r2, #34	@ 0x22
 8002c64:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c66:	4b22      	ldr	r3, [pc, #136]	@ (8002cf0 <HAL_I2C_MspInit+0x1b0>)
 8002c68:	2240      	movs	r2, #64	@ 0x40
 8002c6a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c6c:	4b20      	ldr	r3, [pc, #128]	@ (8002cf0 <HAL_I2C_MspInit+0x1b0>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c72:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf0 <HAL_I2C_MspInit+0x1b0>)
 8002c74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c78:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf0 <HAL_I2C_MspInit+0x1b0>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c80:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf0 <HAL_I2C_MspInit+0x1b0>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf0 <HAL_I2C_MspInit+0x1b0>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c8c:	4b18      	ldr	r3, [pc, #96]	@ (8002cf0 <HAL_I2C_MspInit+0x1b0>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c92:	4b17      	ldr	r3, [pc, #92]	@ (8002cf0 <HAL_I2C_MspInit+0x1b0>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002c98:	4815      	ldr	r0, [pc, #84]	@ (8002cf0 <HAL_I2C_MspInit+0x1b0>)
 8002c9a:	f003 f86b 	bl	8005d74 <HAL_DMA_Init>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8002ca4:	f000 fd44 	bl	8003730 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a11      	ldr	r2, [pc, #68]	@ (8002cf0 <HAL_I2C_MspInit+0x1b0>)
 8002cac:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cae:	4a10      	ldr	r2, [pc, #64]	@ (8002cf0 <HAL_I2C_MspInit+0x1b0>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	201f      	movs	r0, #31
 8002cba:	f002 ffae 	bl	8005c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002cbe:	201f      	movs	r0, #31
 8002cc0:	f002 ffc5 	bl	8005c4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	2020      	movs	r0, #32
 8002cca:	f002 ffa6 	bl	8005c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002cce:	2020      	movs	r0, #32
 8002cd0:	f002 ffbd 	bl	8005c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	37e0      	adds	r7, #224	@ 0xe0
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40005400 	.word	0x40005400
 8002ce0:	58024400 	.word	0x58024400
 8002ce4:	58020400 	.word	0x58020400
 8002ce8:	240003d0 	.word	0x240003d0
 8002cec:	40020010 	.word	0x40020010
 8002cf0:	24000448 	.word	0x24000448
 8002cf4:	40020028 	.word	0x40020028

08002cf8 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f043 0201 	orr.w	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	601a      	str	r2, [r3, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f043 0201 	orr.w	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	60da      	str	r2, [r3, #12]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_USART_IsActiveFlag_FE>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d101      	bne.n	8002d50 <LL_USART_IsActiveFlag_FE+0x18>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <LL_USART_IsActiveFlag_FE+0x1a>
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_USART_IsActiveFlag_ORE>:
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d101      	bne.n	8002d76 <LL_USART_IsActiveFlag_ORE+0x18>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_USART_IsActiveFlag_ORE+0x1a>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_USART_IsActiveFlag_TC>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d94:	2b40      	cmp	r3, #64	@ 0x40
 8002d96:	d101      	bne.n	8002d9c <LL_USART_IsActiveFlag_TC+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_USART_IsActiveFlag_TC+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dba:	2b80      	cmp	r3, #128	@ 0x80
 8002dbc:	d101      	bne.n	8002dc2 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	621a      	str	r2, [r3, #32]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2208      	movs	r2, #8
 8002df6:	621a      	str	r2, [r3, #32]
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	@ 0x24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	e853 3f00 	ldrex	r3, [r3]
 8002e16:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f043 0320 	orr.w	r3, r3, #32
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	61ba      	str	r2, [r7, #24]
 8002e26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e28:	6979      	ldr	r1, [r7, #20]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	e841 2300 	strex	r3, r2, [r1]
 8002e30:	613b      	str	r3, [r7, #16]
   return(result);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e9      	bne.n	8002e0c <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	3724      	adds	r7, #36	@ 0x24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <_write>:
/* USER CODE BEGIN PTD */

/* *********** USART6 printf function code ************ */

int _write(int file, char* p, int len)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	e025      	b.n	8002ec2 <_write+0x5e>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
            if (LL_USART_IsActiveFlag_ORE(USART6) || LL_USART_IsActiveFlag_FE(USART6)) {
 8002e76:	481b      	ldr	r0, [pc, #108]	@ (8002ee4 <_write+0x80>)
 8002e78:	f7ff ff71 	bl	8002d5e <LL_USART_IsActiveFlag_ORE>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d105      	bne.n	8002e8e <_write+0x2a>
 8002e82:	4818      	ldr	r0, [pc, #96]	@ (8002ee4 <_write+0x80>)
 8002e84:	f7ff ff58 	bl	8002d38 <LL_USART_IsActiveFlag_FE>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <_write+0x3c>
                LL_USART_ClearFlag_ORE(USART6);
 8002e8e:	4815      	ldr	r0, [pc, #84]	@ (8002ee4 <_write+0x80>)
 8002e90:	f7ff ffab 	bl	8002dea <LL_USART_ClearFlag_ORE>
                LL_USART_ClearFlag_FE(USART6);
 8002e94:	4813      	ldr	r0, [pc, #76]	@ (8002ee4 <_write+0x80>)
 8002e96:	f7ff ff9b 	bl	8002dd0 <LL_USART_ClearFlag_FE>
                return -1; // Indicate error
 8002e9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e9e:	e01c      	b.n	8002eda <_write+0x76>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
 8002ea0:	4810      	ldr	r0, [pc, #64]	@ (8002ee4 <_write+0x80>)
 8002ea2:	f7ff ff82 	bl	8002daa <LL_USART_IsActiveFlag_TXE_TXFNF>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0e4      	beq.n	8002e76 <_write+0x12>
            }
        }
        LL_USART_TransmitData8(USART6, *(p + i));
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	480b      	ldr	r0, [pc, #44]	@ (8002ee4 <_write+0x80>)
 8002eb8:	f7ff ffc5 	bl	8002e46 <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	dbea      	blt.n	8002ea0 <_write+0x3c>
    }
    while (!LL_USART_IsActiveFlag_TC(USART6)) {}
 8002eca:	bf00      	nop
 8002ecc:	4805      	ldr	r0, [pc, #20]	@ (8002ee4 <_write+0x80>)
 8002ece:	f7ff ff59 	bl	8002d84 <LL_USART_IsActiveFlag_TC>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f9      	beq.n	8002ecc <_write+0x68>
    return len;
 8002ed8:	687b      	ldr	r3, [r7, #4]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40011400 	.word	0x40011400

08002ee8 <HAL_I2C_ErrorCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
    HMC5883L_DMA_Complete_Callback(hi2c);
}

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
    printf("I2C Error: %lu\n", hi2c->ErrorCode);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4803      	ldr	r0, [pc, #12]	@ (8002f04 <HAL_I2C_ErrorCallback+0x1c>)
 8002ef8:	f00e ffdc 	bl	8011eb4 <iprintf>
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	08016dd8 	.word	0x08016dd8

08002f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f0c:	b0da      	sub	sp, #360	@ 0x168
 8002f0e:	af0a      	add	r7, sp, #40	@ 0x28

  /* USER CODE BEGIN 1 */

	short gyro_x_offset = -3, gyro_y_offset = -8, gyro_z_offset = 2;
 8002f10:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8002f14:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8002f18:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8002f1c:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
 8002f20:	2302      	movs	r3, #2
 8002f22:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a

	unsigned char motor_arming_flag = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 3139 	strb.w	r3, [r7, #313]	@ 0x139
	unsigned short iBus_SwA_Prev = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	unsigned char iBus_rx_cnt = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
	unsigned short ccr1, ccr2, ccr3, ccr4;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002f38:	f000 fbce 	bl	80036d8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f3c:	f002 fcdc 	bl	80058f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f40:	f000 fb5c 	bl	80035fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f44:	f7ff fd08 	bl	8002958 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f48:	f7ff fc96 	bl	8002878 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8002f4c:	f002 fc0a 	bl	8005764 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8002f50:	f002 f8de 	bl	8005110 <MX_TIM7_Init>
  MX_SPI3_Init();
 8002f54:	f001 f890 	bl	8004078 <MX_SPI3_Init>
  MX_TIM2_Init();
 8002f58:	f001 ff52 	bl	8004e00 <MX_TIM2_Init>
  MX_OCTOSPI1_Init();
 8002f5c:	f000 fbee 	bl	800373c <MX_OCTOSPI1_Init>
  MX_TIM3_Init();
 8002f60:	f001 ffc4 	bl	8004eec <MX_TIM3_Init>
  MX_I2C1_Init();
 8002f64:	f7ff fdac 	bl	8002ac0 <MX_I2C1_Init>
  MX_UART4_Init();
 8002f68:	f002 fb62 	bl	8005630 <MX_UART4_Init>
  MX_TIM5_Init();
 8002f6c:	f002 f836 	bl	8004fdc <MX_TIM5_Init>
  MX_SPI2_Init();
 8002f70:	f000 ff72 	bl	8003e58 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  LL_USART_EnableIT_RXNE(USART6);
 8002f74:	48b2      	ldr	r0, [pc, #712]	@ (8003240 <main+0x338>)
 8002f76:	f7ff ff45 	bl	8002e04 <LL_USART_EnableIT_RXNE_RXFNE>
//  StartupTone();
  LL_USART_EnableIT_RXNE_RXFNE(UART4);
 8002f7a:	48b2      	ldr	r0, [pc, #712]	@ (8003244 <main+0x33c>)
 8002f7c:	f7ff ff42 	bl	8002e04 <LL_USART_EnableIT_RXNE_RXFNE>


  if (EEPROM_Init() != W25Qxx_OK) {
 8002f80:	f7fd ffd0 	bl	8000f24 <EEPROM_Init>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <main+0x8c>
	  printf("EEPROM Init Failed\r\n");
 8002f8a:	48af      	ldr	r0, [pc, #700]	@ (8003248 <main+0x340>)
 8002f8c:	f00f f802 	bl	8011f94 <puts>
	  Error_Handler();
 8002f90:	f000 fbce 	bl	8003730 <Error_Handler>
  }

  DroneConfig_t config;
  if (EEPROM_ReadConfig(&config) == W25Qxx_OK) {
 8002f94:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe f819 	bl	8000fd0 <EEPROM_ReadConfig>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10c      	bne.n	8002fbe <main+0xb6>
	  printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
			  config.flight_mode, config.pid[0]);
 8002fa4:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
	  printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
 8002fa8:	4619      	mov	r1, r3
			  config.flight_mode, config.pid[0]);
 8002faa:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
	  printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
 8002fae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fb2:	ec53 2b17 	vmov	r2, r3, d7
 8002fb6:	48a5      	ldr	r0, [pc, #660]	@ (800324c <main+0x344>)
 8002fb8:	f00e ff7c 	bl	8011eb4 <iprintf>
 8002fbc:	e02a      	b.n	8003014 <main+0x10c>
  } else {
	  printf("No valid config found, loading defaults\r\n");
 8002fbe:	48a4      	ldr	r0, [pc, #656]	@ (8003250 <main+0x348>)
 8002fc0:	f00e ffe8 	bl	8011f94 <puts>
	  DroneConfig_t default_config = {
 8002fc4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fc8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002fcc:	4aa1      	ldr	r2, [pc, #644]	@ (8003254 <main+0x34c>)
 8002fce:	4618      	mov	r0, r3
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	2390      	movs	r3, #144	@ 0x90
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f00f f9c6 	bl	8012366 <memcpy>
					  .rgb = {{255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}},
					  .mode = 0
			  },
			  .crc = 0
	  };
	  default_config.crc = CalculateCRC32((uint8_t*)&default_config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	218c      	movs	r1, #140	@ 0x8c
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe f851 	bl	8001088 <CalculateCRC32>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ff0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	  if (EEPROM_WriteConfig(&default_config) != W25Qxx_OK) {
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fe f821 	bl	8001040 <EEPROM_WriteConfig>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d004      	beq.n	800300e <main+0x106>
		  printf("Failed to write default config\r\n");
 8003004:	4894      	ldr	r0, [pc, #592]	@ (8003258 <main+0x350>)
 8003006:	f00e ffc5 	bl	8011f94 <puts>
		  Error_Handler();
 800300a:	f000 fb91 	bl	8003730 <Error_Handler>
	  }
	  printf("Default config written and verified\r\n");
 800300e:	4893      	ldr	r0, [pc, #588]	@ (800325c <main+0x354>)
 8003010:	f00e ffc0 	bl	8011f94 <puts>
  }

  if (EEPROM_GetPID(eeprom_pid_read) == W25Qxx_OK) {
 8003014:	4892      	ldr	r0, [pc, #584]	@ (8003260 <main+0x358>)
 8003016:	f7fe f933 	bl	8001280 <EEPROM_GetPID>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d118      	bne.n	8003052 <main+0x14a>
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
			  eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 8003020:	4b8f      	ldr	r3, [pc, #572]	@ (8003260 <main+0x358>)
 8003022:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 8003026:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 800302a:	4b8d      	ldr	r3, [pc, #564]	@ (8003260 <main+0x358>)
 800302c:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 8003030:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 8003034:	4b8a      	ldr	r3, [pc, #552]	@ (8003260 <main+0x358>)
 8003036:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 800303a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800303e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003042:	ed8d 7b00 	vstr	d7, [sp]
 8003046:	ec53 2b15 	vmov	r2, r3, d5
 800304a:	4886      	ldr	r0, [pc, #536]	@ (8003264 <main+0x35c>)
 800304c:	f00e ff32 	bl	8011eb4 <iprintf>
 8003050:	e002      	b.n	8003058 <main+0x150>
  } else {
	  printf("Failed to read PID\r\n");
 8003052:	4885      	ldr	r0, [pc, #532]	@ (8003268 <main+0x360>)
 8003054:	f00e ff9e 	bl	8011f94 <puts>
  }

  if (EEPROM_GetGyroCalibration(eeprom_gyro_read) == W25Qxx_OK) {
 8003058:	4884      	ldr	r0, [pc, #528]	@ (800326c <main+0x364>)
 800305a:	f7fe f899 	bl	8001190 <EEPROM_GetGyroCalibration>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d118      	bne.n	8003096 <main+0x18e>
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
			  eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8003064:	4b81      	ldr	r3, [pc, #516]	@ (800326c <main+0x364>)
 8003066:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 800306a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 800306e:	4b7f      	ldr	r3, [pc, #508]	@ (800326c <main+0x364>)
 8003070:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8003074:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8003078:	4b7c      	ldr	r3, [pc, #496]	@ (800326c <main+0x364>)
 800307a:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 800307e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003082:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003086:	ed8d 7b00 	vstr	d7, [sp]
 800308a:	ec53 2b15 	vmov	r2, r3, d5
 800308e:	4878      	ldr	r0, [pc, #480]	@ (8003270 <main+0x368>)
 8003090:	f00e ff10 	bl	8011eb4 <iprintf>
 8003094:	e002      	b.n	800309c <main+0x194>
  } else {
	  printf("Failed to read EEPROM Gyro Data\r\n");
 8003096:	4877      	ldr	r0, [pc, #476]	@ (8003274 <main+0x36c>)
 8003098:	f00e ff7c 	bl	8011f94 <puts>
  }

  if (EEPROM_GetAccelCalibration(eeprom_accel_read) == W25Qxx_OK) {
 800309c:	4876      	ldr	r0, [pc, #472]	@ (8003278 <main+0x370>)
 800309e:	f7fe f82d 	bl	80010fc <EEPROM_GetAccelCalibration>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d118      	bne.n	80030da <main+0x1d2>
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
			  eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 80030a8:	4b73      	ldr	r3, [pc, #460]	@ (8003278 <main+0x370>)
 80030aa:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80030ae:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 80030b2:	4b71      	ldr	r3, [pc, #452]	@ (8003278 <main+0x370>)
 80030b4:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80030b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 80030bc:	4b6e      	ldr	r3, [pc, #440]	@ (8003278 <main+0x370>)
 80030be:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80030c2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80030c6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80030ca:	ed8d 7b00 	vstr	d7, [sp]
 80030ce:	ec53 2b15 	vmov	r2, r3, d5
 80030d2:	486a      	ldr	r0, [pc, #424]	@ (800327c <main+0x374>)
 80030d4:	f00e feee 	bl	8011eb4 <iprintf>
 80030d8:	e002      	b.n	80030e0 <main+0x1d8>
  } else {
	  printf("Failed to read EEPROM Accel Data\r\n");
 80030da:	4869      	ldr	r0, [pc, #420]	@ (8003280 <main+0x378>)
 80030dc:	f00e ff5a 	bl	8011f94 <puts>
  }

  if (EEPROM_GetMagCalibration(eeprom_mag_read) == W25Qxx_OK) {
 80030e0:	4868      	ldr	r0, [pc, #416]	@ (8003284 <main+0x37c>)
 80030e2:	f7fe f89f 	bl	8001224 <EEPROM_GetMagCalibration>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d118      	bne.n	800311e <main+0x216>
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
			  eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 80030ec:	4b65      	ldr	r3, [pc, #404]	@ (8003284 <main+0x37c>)
 80030ee:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80030f2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 80030f6:	4b63      	ldr	r3, [pc, #396]	@ (8003284 <main+0x37c>)
 80030f8:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80030fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8003100:	4b60      	ldr	r3, [pc, #384]	@ (8003284 <main+0x37c>)
 8003102:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8003106:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800310a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800310e:	ed8d 7b00 	vstr	d7, [sp]
 8003112:	ec53 2b15 	vmov	r2, r3, d5
 8003116:	485c      	ldr	r0, [pc, #368]	@ (8003288 <main+0x380>)
 8003118:	f00e fecc 	bl	8011eb4 <iprintf>
 800311c:	e002      	b.n	8003124 <main+0x21c>
  } else {
	  printf("Failed to read EEPROM Mag Data\r\n");
 800311e:	485b      	ldr	r0, [pc, #364]	@ (800328c <main+0x384>)
 8003120:	f00e ff38 	bl	8011f94 <puts>
  }

  if (EEPROM_GetRollPID(&eeprom_roll_pid_read) == W25Qxx_OK) {
 8003124:	485a      	ldr	r0, [pc, #360]	@ (8003290 <main+0x388>)
 8003126:	f7fe f8cd 	bl	80012c4 <EEPROM_GetRollPID>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d12d      	bne.n	800318c <main+0x284>
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
			  eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8003130:	4b57      	ldr	r3, [pc, #348]	@ (8003290 <main+0x388>)
 8003132:	edd3 7a00 	vldr	s15, [r3]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003136:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
			  eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 800313a:	4b55      	ldr	r3, [pc, #340]	@ (8003290 <main+0x388>)
 800313c:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003140:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8003144:	4b52      	ldr	r3, [pc, #328]	@ (8003290 <main+0x388>)
 8003146:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 800314a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			  eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 800314e:	4b50      	ldr	r3, [pc, #320]	@ (8003290 <main+0x388>)
 8003150:	edd3 5a03 	vldr	s11, [r3, #12]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003154:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			  eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8003158:	4b4d      	ldr	r3, [pc, #308]	@ (8003290 <main+0x388>)
 800315a:	edd3 4a04 	vldr	s9, [r3, #16]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 800315e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			  eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8003162:	4b4b      	ldr	r3, [pc, #300]	@ (8003290 <main+0x388>)
 8003164:	edd3 3a05 	vldr	s7, [r3, #20]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003168:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800316c:	ed8d 3b08 	vstr	d3, [sp, #32]
 8003170:	ed8d 4b06 	vstr	d4, [sp, #24]
 8003174:	ed8d 5b04 	vstr	d5, [sp, #16]
 8003178:	ed8d 6b02 	vstr	d6, [sp, #8]
 800317c:	ed8d 7b00 	vstr	d7, [sp]
 8003180:	ec53 2b12 	vmov	r2, r3, d2
 8003184:	4843      	ldr	r0, [pc, #268]	@ (8003294 <main+0x38c>)
 8003186:	f00e fe95 	bl	8011eb4 <iprintf>
 800318a:	e002      	b.n	8003192 <main+0x28a>
  } else {
	  printf("Failed to read Roll PID\r\n");
 800318c:	4842      	ldr	r0, [pc, #264]	@ (8003298 <main+0x390>)
 800318e:	f00e ff01 	bl	8011f94 <puts>
  }

  if (EEPROM_GetPitchPID(&eeprom_pitch_pid_read) == W25Qxx_OK) {
 8003192:	4842      	ldr	r0, [pc, #264]	@ (800329c <main+0x394>)
 8003194:	f7fe f8e8 	bl	8001368 <EEPROM_GetPitchPID>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d12d      	bne.n	80031fa <main+0x2f2>
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
			  eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 800319e:	4b3f      	ldr	r3, [pc, #252]	@ (800329c <main+0x394>)
 80031a0:	edd3 7a00 	vldr	s15, [r3]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 80031a4:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
			  eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 80031a8:	4b3c      	ldr	r3, [pc, #240]	@ (800329c <main+0x394>)
 80031aa:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 80031ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 80031b2:	4b3a      	ldr	r3, [pc, #232]	@ (800329c <main+0x394>)
 80031b4:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 80031b8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			  eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 80031bc:	4b37      	ldr	r3, [pc, #220]	@ (800329c <main+0x394>)
 80031be:	edd3 5a03 	vldr	s11, [r3, #12]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 80031c2:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			  eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 80031c6:	4b35      	ldr	r3, [pc, #212]	@ (800329c <main+0x394>)
 80031c8:	edd3 4a04 	vldr	s9, [r3, #16]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 80031cc:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			  eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 80031d0:	4b32      	ldr	r3, [pc, #200]	@ (800329c <main+0x394>)
 80031d2:	edd3 3a05 	vldr	s7, [r3, #20]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 80031d6:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80031da:	ed8d 3b08 	vstr	d3, [sp, #32]
 80031de:	ed8d 4b06 	vstr	d4, [sp, #24]
 80031e2:	ed8d 5b04 	vstr	d5, [sp, #16]
 80031e6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80031ea:	ed8d 7b00 	vstr	d7, [sp]
 80031ee:	ec53 2b12 	vmov	r2, r3, d2
 80031f2:	482b      	ldr	r0, [pc, #172]	@ (80032a0 <main+0x398>)
 80031f4:	f00e fe5e 	bl	8011eb4 <iprintf>
 80031f8:	e002      	b.n	8003200 <main+0x2f8>
  } else {
	  printf("Failed to read Pitch PID\r\n");
 80031fa:	482a      	ldr	r0, [pc, #168]	@ (80032a4 <main+0x39c>)
 80031fc:	f00e feca 	bl	8011f94 <puts>
  }

  if (EEPROM_GetYawRatePID(&eeprom_yaw_rate_pid_read) == W25Qxx_OK) {
 8003200:	4829      	ldr	r0, [pc, #164]	@ (80032a8 <main+0x3a0>)
 8003202:	f7fe f903 	bl	800140c <EEPROM_GetYawRatePID>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d151      	bne.n	80032b0 <main+0x3a8>
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
			  eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 800320c:	4b26      	ldr	r3, [pc, #152]	@ (80032a8 <main+0x3a0>)
 800320e:	edd3 7a00 	vldr	s15, [r3]
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8003212:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8003216:	4b24      	ldr	r3, [pc, #144]	@ (80032a8 <main+0x3a0>)
 8003218:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 800321c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8003220:	4b21      	ldr	r3, [pc, #132]	@ (80032a8 <main+0x3a0>)
 8003222:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8003226:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800322a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800322e:	ed8d 7b00 	vstr	d7, [sp]
 8003232:	ec53 2b15 	vmov	r2, r3, d5
 8003236:	481d      	ldr	r0, [pc, #116]	@ (80032ac <main+0x3a4>)
 8003238:	f00e fe3c 	bl	8011eb4 <iprintf>
 800323c:	e03b      	b.n	80032b6 <main+0x3ae>
 800323e:	bf00      	nop
 8003240:	40011400 	.word	0x40011400
 8003244:	40004c00 	.word	0x40004c00
 8003248:	08016de8 	.word	0x08016de8
 800324c:	08016dfc 	.word	0x08016dfc
 8003250:	08016e2c 	.word	0x08016e2c
 8003254:	08017198 	.word	0x08017198
 8003258:	08016e58 	.word	0x08016e58
 800325c:	08016e78 	.word	0x08016e78
 8003260:	240004c0 	.word	0x240004c0
 8003264:	08016ea0 	.word	0x08016ea0
 8003268:	08016ecc 	.word	0x08016ecc
 800326c:	240004cc 	.word	0x240004cc
 8003270:	08016ee0 	.word	0x08016ee0
 8003274:	08016f0c 	.word	0x08016f0c
 8003278:	240004d8 	.word	0x240004d8
 800327c:	08016f30 	.word	0x08016f30
 8003280:	08016f5c 	.word	0x08016f5c
 8003284:	240004e4 	.word	0x240004e4
 8003288:	08016f80 	.word	0x08016f80
 800328c:	08016fac 	.word	0x08016fac
 8003290:	240004f0 	.word	0x240004f0
 8003294:	08016fcc 	.word	0x08016fcc
 8003298:	08017010 	.word	0x08017010
 800329c:	24000508 	.word	0x24000508
 80032a0:	0801702c 	.word	0x0801702c
 80032a4:	08017070 	.word	0x08017070
 80032a8:	24000520 	.word	0x24000520
 80032ac:	0801708c 	.word	0x0801708c
  } else {
	  printf("Failed to read Yaw Rate PID\r\n");
 80032b0:	48bc      	ldr	r0, [pc, #752]	@ (80035a4 <main+0x69c>)
 80032b2:	f00e fe6f 	bl	8011f94 <puts>
  }

  if (EEPROM_GetAircraftLights(&aircraft_lights) == W25Qxx_OK) {
 80032b6:	48bc      	ldr	r0, [pc, #752]	@ (80035a8 <main+0x6a0>)
 80032b8:	f7fe f8fa 	bl	80014b0 <EEPROM_GetAircraftLights>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d139      	bne.n	8003336 <main+0x42e>
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
			  aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 80032c2:	4bb9      	ldr	r3, [pc, #740]	@ (80035a8 <main+0x6a0>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80032c6:	469c      	mov	ip, r3
			  aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 80032c8:	4bb7      	ldr	r3, [pc, #732]	@ (80035a8 <main+0x6a0>)
 80032ca:	785b      	ldrb	r3, [r3, #1]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80032cc:	469e      	mov	lr, r3
			  aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 80032ce:	4bb6      	ldr	r3, [pc, #728]	@ (80035a8 <main+0x6a0>)
 80032d0:	789b      	ldrb	r3, [r3, #2]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80032d2:	4698      	mov	r8, r3
			  aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 80032d4:	4bb4      	ldr	r3, [pc, #720]	@ (80035a8 <main+0x6a0>)
 80032d6:	78db      	ldrb	r3, [r3, #3]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80032d8:	461a      	mov	r2, r3
			  aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 80032da:	4bb3      	ldr	r3, [pc, #716]	@ (80035a8 <main+0x6a0>)
 80032dc:	791b      	ldrb	r3, [r3, #4]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80032de:	4619      	mov	r1, r3
			  aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 80032e0:	4bb1      	ldr	r3, [pc, #708]	@ (80035a8 <main+0x6a0>)
 80032e2:	795b      	ldrb	r3, [r3, #5]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80032e4:	4618      	mov	r0, r3
			  aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 80032e6:	4bb0      	ldr	r3, [pc, #704]	@ (80035a8 <main+0x6a0>)
 80032e8:	799b      	ldrb	r3, [r3, #6]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80032ea:	461c      	mov	r4, r3
			  aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 80032ec:	4bae      	ldr	r3, [pc, #696]	@ (80035a8 <main+0x6a0>)
 80032ee:	79db      	ldrb	r3, [r3, #7]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80032f0:	461d      	mov	r5, r3
			  aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 80032f2:	4bad      	ldr	r3, [pc, #692]	@ (80035a8 <main+0x6a0>)
 80032f4:	7a1b      	ldrb	r3, [r3, #8]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80032f6:	461e      	mov	r6, r3
			  aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 80032f8:	4bab      	ldr	r3, [pc, #684]	@ (80035a8 <main+0x6a0>)
 80032fa:	7a5b      	ldrb	r3, [r3, #9]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80032fc:	60fb      	str	r3, [r7, #12]
			  aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 80032fe:	4baa      	ldr	r3, [pc, #680]	@ (80035a8 <main+0x6a0>)
 8003300:	7a9b      	ldrb	r3, [r3, #10]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003302:	60bb      	str	r3, [r7, #8]
			  aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 8003304:	4ba8      	ldr	r3, [pc, #672]	@ (80035a8 <main+0x6a0>)
 8003306:	7adb      	ldrb	r3, [r3, #11]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003308:	607b      	str	r3, [r7, #4]
			  aircraft_lights.mode);
 800330a:	4ba7      	ldr	r3, [pc, #668]	@ (80035a8 <main+0x6a0>)
 800330c:	7b1b      	ldrb	r3, [r3, #12]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 800330e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	9308      	str	r3, [sp, #32]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	9307      	str	r3, [sp, #28]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	9306      	str	r3, [sp, #24]
 800331c:	9605      	str	r6, [sp, #20]
 800331e:	9504      	str	r5, [sp, #16]
 8003320:	9403      	str	r4, [sp, #12]
 8003322:	9002      	str	r0, [sp, #8]
 8003324:	9101      	str	r1, [sp, #4]
 8003326:	9200      	str	r2, [sp, #0]
 8003328:	4643      	mov	r3, r8
 800332a:	4672      	mov	r2, lr
 800332c:	4661      	mov	r1, ip
 800332e:	489f      	ldr	r0, [pc, #636]	@ (80035ac <main+0x6a4>)
 8003330:	f00e fdc0 	bl	8011eb4 <iprintf>
 8003334:	e002      	b.n	800333c <main+0x434>
  } else {
	  printf("Failed to read Aircraft Lights\r\n");
 8003336:	489e      	ldr	r0, [pc, #632]	@ (80035b0 <main+0x6a8>)
 8003338:	f00e fe2c 	bl	8011f94 <puts>
  //
  //          yaw_rate_pid.kp = eeprom_yaw_rate_pid_read.kp;
  //          yaw_rate_pid.ki = eeprom_yaw_rate_pid_read.ki;
  //          yaw_rate_pid.kd = eeprom_yaw_rate_pid_read.kd;

  printf("\n");
 800333c:	200a      	movs	r0, #10
 800333e:	f00e fdcb 	bl	8011ed8 <putchar>

  /* *********** ESC Startup Calibration ************ */
  HAL_Delay(3000);
 8003342:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003346:	f002 fb69 	bl	8005a1c <HAL_Delay>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800334a:	2100      	movs	r1, #0
 800334c:	4899      	ldr	r0, [pc, #612]	@ (80035b4 <main+0x6ac>)
 800334e:	f00a fc43 	bl	800dbd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8003352:	2104      	movs	r1, #4
 8003354:	4897      	ldr	r0, [pc, #604]	@ (80035b4 <main+0x6ac>)
 8003356:	f00a fc3f 	bl	800dbd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800335a:	2108      	movs	r1, #8
 800335c:	4895      	ldr	r0, [pc, #596]	@ (80035b4 <main+0x6ac>)
 800335e:	f00a fc3b 	bl	800dbd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8003362:	210c      	movs	r1, #12
 8003364:	4893      	ldr	r0, [pc, #588]	@ (80035b4 <main+0x6ac>)
 8003366:	f00a fc37 	bl	800dbd8 <HAL_TIM_PWM_Start>
//  Buzzer_On(292);
//  HAL_Delay(100);
//  Buzzer_Off();
  /* *********** iBus Throttle Check END ************ */

  LL_TIM_EnableCounter(TIM7);
 800336a:	4893      	ldr	r0, [pc, #588]	@ (80035b8 <main+0x6b0>)
 800336c:	f7ff fcc4 	bl	8002cf8 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 8003370:	4891      	ldr	r0, [pc, #580]	@ (80035b8 <main+0x6b0>)
 8003372:	f7ff fcd1 	bl	8002d18 <LL_TIM_EnableIT_UPDATE>

  if(ICM42688P_Initialization() == 0)
 8003376:	f7fe fd8b 	bl	8001e90 <ICM42688P_Initialization>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d106      	bne.n	800338e <main+0x486>
  {
	  printf("=== Sensor Ready ===\n\n");
 8003380:	488e      	ldr	r0, [pc, #568]	@ (80035bc <main+0x6b4>)
 8003382:	f00e fe07 	bl	8011f94 <puts>
	  ICM42688P_CalibrateAndWriteOffsets(2000);
 8003386:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800338a:	f7fe ff95 	bl	80022b8 <ICM42688P_CalibrateAndWriteOffsets>
//  // Send to sensor hardware registers
//  ICM42688P_WriteHWOffsets(gyro_bias, accel_bias);
//
//  printf("Static offsets sent to sensor!\n");

  HMC5883L_Init();
 800338e:	f7fe fa6d 	bl	800186c <HMC5883L_Init>
  uint8_t hmc_id = HMC5883L_ReadReg(HMC5883L_ID_A);
 8003392:	200a      	movs	r0, #10
 8003394:	f7fe fa4c 	bl	8001830 <HMC5883L_ReadReg>
 8003398:	4603      	mov	r3, r0
 800339a:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
  printf("HMC5883L ID: %c\n", hmc_id);
 800339e:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 80033a2:	4619      	mov	r1, r3
 80033a4:	4886      	ldr	r0, [pc, #536]	@ (80035c0 <main+0x6b8>)
 80033a6:	f00e fd85 	bl	8011eb4 <iprintf>
  printf("\n");
 80033aa:	200a      	movs	r0, #10
 80033ac:	f00e fd94 	bl	8011ed8 <putchar>
//  ICM42688P_WriteByte(0x16, (gyro_y_offset*-2));
//
//  ICM42688P_WriteByte(0x17, (gyro_z_offset*-2)>>8);
//  ICM42688P_WriteByte(0x18, (gyro_z_offset*-2));

  main_led(0, 0, 0, 255, 1);
 80033b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80033b4:	23ff      	movs	r3, #255	@ 0xff
 80033b6:	2200      	movs	r2, #0
 80033b8:	2100      	movs	r1, #0
 80033ba:	2000      	movs	r0, #0
 80033bc:	f7ff f986 	bl	80026cc <main_led>
  HAL_Delay(500);
 80033c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033c4:	f002 fb2a 	bl	8005a1c <HAL_Delay>
  main_led(0, 0, 0, 255, 0);
 80033c8:	ed9f 0a7e 	vldr	s0, [pc, #504]	@ 80035c4 <main+0x6bc>
 80033cc:	23ff      	movs	r3, #255	@ 0xff
 80033ce:	2200      	movs	r2, #0
 80033d0:	2100      	movs	r1, #0
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7ff f97a 	bl	80026cc <main_led>
  HAL_Delay(500);
 80033d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033dc:	f002 fb1e 	bl	8005a1c <HAL_Delay>
  main_led(0, 0, 0, 255, 1);
 80033e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80033e4:	23ff      	movs	r3, #255	@ 0xff
 80033e6:	2200      	movs	r2, #0
 80033e8:	2100      	movs	r1, #0
 80033ea:	2000      	movs	r0, #0
 80033ec:	f7ff f96e 	bl	80026cc <main_led>
  HAL_Delay(500);
 80033f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033f4:	f002 fb12 	bl	8005a1c <HAL_Delay>
  main_led(0, 0, 0, 255, 0);
 80033f8:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 80035c4 <main+0x6bc>
 80033fc:	23ff      	movs	r3, #255	@ 0xff
 80033fe:	2200      	movs	r2, #0
 8003400:	2100      	movs	r1, #0
 8003402:	2000      	movs	r0, #0
 8003404:	f7ff f962 	bl	80026cc <main_led>
  HAL_Delay(500);
 8003408:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800340c:	f002 fb06 	bl	8005a1c <HAL_Delay>
  main_led(0, 0, 255, 0, 1);
 8003410:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003414:	2300      	movs	r3, #0
 8003416:	22ff      	movs	r2, #255	@ 0xff
 8003418:	2100      	movs	r1, #0
 800341a:	2000      	movs	r0, #0
 800341c:	f7ff f956 	bl	80026cc <main_led>
  HAL_Delay(500);
 8003420:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003424:	f002 fafa 	bl	8005a1c <HAL_Delay>
  main_led(0, 0, 255, 0, 0);
 8003428:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 80035c4 <main+0x6bc>
 800342c:	2300      	movs	r3, #0
 800342e:	22ff      	movs	r2, #255	@ 0xff
 8003430:	2100      	movs	r1, #0
 8003432:	2000      	movs	r0, #0
 8003434:	f7ff f94a 	bl	80026cc <main_led>
  HAL_Delay(500);
 8003438:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800343c:	f002 faee 	bl	8005a1c <HAL_Delay>

  main_led(0, 0, 255, 0, 1);
 8003440:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003444:	2300      	movs	r3, #0
 8003446:	22ff      	movs	r2, #255	@ 0xff
 8003448:	2100      	movs	r1, #0
 800344a:	2000      	movs	r0, #0
 800344c:	f7ff f93e 	bl	80026cc <main_led>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(tim7_1ms_flag == 1)
 8003450:	4b5d      	ldr	r3, [pc, #372]	@ (80035c8 <main+0x6c0>)
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d102      	bne.n	800345e <main+0x556>
	  {
		  tim7_1ms_flag = 0;
 8003458:	4b5b      	ldr	r3, [pc, #364]	@ (80035c8 <main+0x6c0>)
 800345a:	2200      	movs	r2, #0
 800345c:	801a      	strh	r2, [r3, #0]
//				  ICM42688P.acc_z);

//		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
	  }

	  if(tim7_20ms_flag == 1)
 800345e:	4b5b      	ldr	r3, [pc, #364]	@ (80035cc <main+0x6c4>)
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d102      	bne.n	800346c <main+0x564>
	  {
		  tim7_20ms_flag = 0;
 8003466:	4b59      	ldr	r3, [pc, #356]	@ (80035cc <main+0x6c4>)
 8003468:	2200      	movs	r2, #0
 800346a:	801a      	strh	r2, [r3, #0]


	  }

	  if(tim7_50ms_flag == 1)
 800346c:	4b58      	ldr	r3, [pc, #352]	@ (80035d0 <main+0x6c8>)
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d102      	bne.n	800347a <main+0x572>
	  {
		  tim7_50ms_flag = 0;
 8003474:	4b56      	ldr	r3, [pc, #344]	@ (80035d0 <main+0x6c8>)
 8003476:	2200      	movs	r2, #0
 8003478:	801a      	strh	r2, [r3, #0]

//		  main_led(0, 0, 255, 0, 0);

	  }

	  if(tim7_100ms_flag == 1)
 800347a:	4b56      	ldr	r3, [pc, #344]	@ (80035d4 <main+0x6cc>)
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d106      	bne.n	8003490 <main+0x588>
	  {
		  tim7_100ms_flag = 0;
 8003482:	4b54      	ldr	r3, [pc, #336]	@ (80035d4 <main+0x6cc>)
 8003484:	2200      	movs	r2, #0
 8003486:	801a      	strh	r2, [r3, #0]

		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8003488:	2120      	movs	r1, #32
 800348a:	4853      	ldr	r0, [pc, #332]	@ (80035d8 <main+0x6d0>)
 800348c:	f005 f95b 	bl	8008746 <HAL_GPIO_TogglePin>


	  }

	  if(tim7_200ms_flag == 1)
 8003490:	4b52      	ldr	r3, [pc, #328]	@ (80035dc <main+0x6d4>)
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d102      	bne.n	800349e <main+0x596>
	  {
		  tim7_200ms_flag = 0;
 8003498:	4b50      	ldr	r3, [pc, #320]	@ (80035dc <main+0x6d4>)
 800349a:	2200      	movs	r2, #0
 800349c:	801a      	strh	r2, [r3, #0]

//		  main_led(0, 0, 255, 0, 1);
	  }

	  if(tim7_1000ms_flag == 1)
 800349e:	4b50      	ldr	r3, [pc, #320]	@ (80035e0 <main+0x6d8>)
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d102      	bne.n	80034ac <main+0x5a4>
	  {
		  tim7_1000ms_flag = 0;
 80034a6:	4b4e      	ldr	r3, [pc, #312]	@ (80035e0 <main+0x6d8>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	801a      	strh	r2, [r3, #0]
//		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);

	  }


	  if(ICM42688P_DataReady() == 1)
 80034ac:	f7fe fdd8 	bl	8002060 <ICM42688P_DataReady>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d1cc      	bne.n	8003450 <main+0x548>
	  {

		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 80034b6:	2108      	movs	r1, #8
 80034b8:	4847      	ldr	r0, [pc, #284]	@ (80035d8 <main+0x6d0>)
 80034ba:	f005 f944 	bl	8008746 <HAL_GPIO_TogglePin>

		  ICM42688P_Get6AxisRawData(&ICM42688P.acc_x_raw, &ICM42688P.gyro_x_raw);
 80034be:	4949      	ldr	r1, [pc, #292]	@ (80035e4 <main+0x6dc>)
 80034c0:	4849      	ldr	r0, [pc, #292]	@ (80035e8 <main+0x6e0>)
 80034c2:	f7fe fd7d 	bl	8001fc0 <ICM42688P_Get6AxisRawData>

		  ICM42688P.gyro_x = ICM42688P.gyro_x_raw * 2000.f / 32768.f;
 80034c6:	4b48      	ldr	r3, [pc, #288]	@ (80035e8 <main+0x6e0>)
 80034c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034d4:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80035ec <main+0x6e4>
 80034d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034dc:	eddf 6a44 	vldr	s13, [pc, #272]	@ 80035f0 <main+0x6e8>
 80034e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034e4:	4b40      	ldr	r3, [pc, #256]	@ (80035e8 <main+0x6e0>)
 80034e6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		  ICM42688P.gyro_y = ICM42688P.gyro_y_raw * 2000.f / 32768.f;
 80034ea:	4b3f      	ldr	r3, [pc, #252]	@ (80035e8 <main+0x6e0>)
 80034ec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80034f0:	ee07 3a90 	vmov	s15, r3
 80034f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034f8:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80035ec <main+0x6e4>
 80034fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003500:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80035f0 <main+0x6e8>
 8003504:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003508:	4b37      	ldr	r3, [pc, #220]	@ (80035e8 <main+0x6e0>)
 800350a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		  ICM42688P.gyro_z = ICM42688P.gyro_z_raw * 2000.f / 32768.f;
 800350e:	4b36      	ldr	r3, [pc, #216]	@ (80035e8 <main+0x6e0>)
 8003510:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003514:	ee07 3a90 	vmov	s15, r3
 8003518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800351c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80035ec <main+0x6e4>
 8003520:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003524:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80035f0 <main+0x6e8>
 8003528:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800352c:	4b2e      	ldr	r3, [pc, #184]	@ (80035e8 <main+0x6e0>)
 800352e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		  ICM42688P.acc_x = ICM42688P.acc_x_raw * 0.0004883f;
 8003532:	4b2d      	ldr	r3, [pc, #180]	@ (80035e8 <main+0x6e0>)
 8003534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003538:	ee07 3a90 	vmov	s15, r3
 800353c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003540:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80035f4 <main+0x6ec>
 8003544:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003548:	4b27      	ldr	r3, [pc, #156]	@ (80035e8 <main+0x6e0>)
 800354a:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM42688P.acc_y = ICM42688P.acc_y_raw * 0.0004883f;
 800354e:	4b26      	ldr	r3, [pc, #152]	@ (80035e8 <main+0x6e0>)
 8003550:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003554:	ee07 3a90 	vmov	s15, r3
 8003558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800355c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80035f4 <main+0x6ec>
 8003560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003564:	4b20      	ldr	r3, [pc, #128]	@ (80035e8 <main+0x6e0>)
 8003566:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM42688P.acc_z = ICM42688P.acc_z_raw * 0.0004883f;
 800356a:	4b1f      	ldr	r3, [pc, #124]	@ (80035e8 <main+0x6e0>)
 800356c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003570:	ee07 3a90 	vmov	s15, r3
 8003574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003578:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80035f4 <main+0x6ec>
 800357c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003580:	4b19      	ldr	r3, [pc, #100]	@ (80035e8 <main+0x6e0>)
 8003582:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

//		  printf("%d, %d, %d, %d, %d, %d\n",
//				  (int)(ICM42688P.gyro_x*100), (int)(ICM42688P.gyro_y*100), (int)(ICM42688P.gyro_z*100),
//				  (int)(ICM42688P.acc_x), (int)(ICM42688P.acc_x), (int)(ICM42688P.acc_x));

		  printf("%d, %d, %d\n", ICM42688P.gyro_x_raw, ICM42688P.gyro_y_raw, ICM42688P.gyro_z_raw);
 8003586:	4b18      	ldr	r3, [pc, #96]	@ (80035e8 <main+0x6e0>)
 8003588:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800358c:	4619      	mov	r1, r3
 800358e:	4b16      	ldr	r3, [pc, #88]	@ (80035e8 <main+0x6e0>)
 8003590:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003594:	461a      	mov	r2, r3
 8003596:	4b14      	ldr	r3, [pc, #80]	@ (80035e8 <main+0x6e0>)
 8003598:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800359c:	4816      	ldr	r0, [pc, #88]	@ (80035f8 <main+0x6f0>)
 800359e:	f00e fc89 	bl	8011eb4 <iprintf>
	  if(tim7_1ms_flag == 1)
 80035a2:	e755      	b.n	8003450 <main+0x548>
 80035a4:	080170b4 	.word	0x080170b4
 80035a8:	2400052c 	.word	0x2400052c
 80035ac:	080170d4 	.word	0x080170d4
 80035b0:	08017140 	.word	0x08017140
 80035b4:	24000674 	.word	0x24000674
 80035b8:	40001400 	.word	0x40001400
 80035bc:	08017160 	.word	0x08017160
 80035c0:	08017178 	.word	0x08017178
 80035c4:	00000000 	.word	0x00000000
 80035c8:	240005be 	.word	0x240005be
 80035cc:	240005c2 	.word	0x240005c2
 80035d0:	240005c4 	.word	0x240005c4
 80035d4:	240005c6 	.word	0x240005c6
 80035d8:	58021000 	.word	0x58021000
 80035dc:	240005c8 	.word	0x240005c8
 80035e0:	240005ca 	.word	0x240005ca
 80035e4:	24000204 	.word	0x24000204
 80035e8:	240001fc 	.word	0x240001fc
 80035ec:	44fa0000 	.word	0x44fa0000
 80035f0:	47000000 	.word	0x47000000
 80035f4:	3a000142 	.word	0x3a000142
 80035f8:	0801718c 	.word	0x0801718c

080035fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b09c      	sub	sp, #112	@ 0x70
 8003600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003606:	224c      	movs	r2, #76	@ 0x4c
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f00e fe0c 	bl	8012228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003610:	1d3b      	adds	r3, r7, #4
 8003612:	2220      	movs	r2, #32
 8003614:	2100      	movs	r1, #0
 8003616:	4618      	mov	r0, r3
 8003618:	f00e fe06 	bl	8012228 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800361c:	2002      	movs	r0, #2
 800361e:	f007 ff35 	bl	800b48c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003622:	2300      	movs	r3, #0
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	4b2b      	ldr	r3, [pc, #172]	@ (80036d4 <SystemClock_Config+0xd8>)
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	4a2a      	ldr	r2, [pc, #168]	@ (80036d4 <SystemClock_Config+0xd8>)
 800362c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003630:	6193      	str	r3, [r2, #24]
 8003632:	4b28      	ldr	r3, [pc, #160]	@ (80036d4 <SystemClock_Config+0xd8>)
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800363e:	bf00      	nop
 8003640:	4b24      	ldr	r3, [pc, #144]	@ (80036d4 <SystemClock_Config+0xd8>)
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003648:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800364c:	d1f8      	bne.n	8003640 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800364e:	2301      	movs	r3, #1
 8003650:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003652:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003656:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003658:	2302      	movs	r3, #2
 800365a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800365c:	2302      	movs	r3, #2
 800365e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003660:	2302      	movs	r3, #2
 8003662:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8003664:	232c      	movs	r3, #44	@ 0x2c
 8003666:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8003668:	2301      	movs	r3, #1
 800366a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800366c:	2303      	movs	r3, #3
 800366e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003670:	2302      	movs	r3, #2
 8003672:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003674:	230c      	movs	r3, #12
 8003676:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003678:	2300      	movs	r3, #0
 800367a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003684:	4618      	mov	r0, r3
 8003686:	f007 ff3b 	bl	800b500 <HAL_RCC_OscConfig>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003690:	f000 f84e 	bl	8003730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003694:	233f      	movs	r3, #63	@ 0x3f
 8003696:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003698:	2303      	movs	r3, #3
 800369a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80036a0:	2308      	movs	r3, #8
 80036a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80036a4:	2340      	movs	r3, #64	@ 0x40
 80036a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80036a8:	2340      	movs	r3, #64	@ 0x40
 80036aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80036ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80036b2:	2340      	movs	r3, #64	@ 0x40
 80036b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80036b6:	1d3b      	adds	r3, r7, #4
 80036b8:	2103      	movs	r1, #3
 80036ba:	4618      	mov	r0, r3
 80036bc:	f008 fafa 	bl	800bcb4 <HAL_RCC_ClockConfig>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <SystemClock_Config+0xce>
  {
    Error_Handler();
 80036c6:	f000 f833 	bl	8003730 <Error_Handler>
  }
}
 80036ca:	bf00      	nop
 80036cc:	3770      	adds	r7, #112	@ 0x70
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	58024800 	.word	0x58024800

080036d8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80036de:	463b      	mov	r3, r7
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80036ea:	f002 facb 	bl	8005c84 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80036ee:	2301      	movs	r3, #1
 80036f0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80036fa:	231f      	movs	r3, #31
 80036fc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80036fe:	2387      	movs	r3, #135	@ 0x87
 8003700:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003702:	2300      	movs	r3, #0
 8003704:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003706:	2300      	movs	r3, #0
 8003708:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800370a:	2301      	movs	r3, #1
 800370c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800370e:	2301      	movs	r3, #1
 8003710:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003712:	2300      	movs	r3, #0
 8003714:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800371a:	463b      	mov	r3, r7
 800371c:	4618      	mov	r0, r3
 800371e:	f002 fae9 	bl	8005cf4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003722:	2004      	movs	r0, #4
 8003724:	f002 fac6 	bl	8005cb4 <HAL_MPU_Enable>

}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003734:	b672      	cpsid	i
}
 8003736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003738:	bf00      	nop
 800373a:	e7fd      	b.n	8003738 <Error_Handler+0x8>

0800373c <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8003742:	463b      	mov	r3, r7
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	60da      	str	r2, [r3, #12]
 800374e:	611a      	str	r2, [r3, #16]
 8003750:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8003752:	4b28      	ldr	r3, [pc, #160]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 8003754:	4a28      	ldr	r2, [pc, #160]	@ (80037f8 <MX_OCTOSPI1_Init+0xbc>)
 8003756:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8003758:	4b26      	ldr	r3, [pc, #152]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 800375a:	2201      	movs	r2, #1
 800375c:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800375e:	4b25      	ldr	r3, [pc, #148]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8003764:	4b23      	ldr	r3, [pc, #140]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 8003766:	2200      	movs	r2, #0
 8003768:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 800376a:	4b22      	ldr	r3, [pc, #136]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 800376c:	2217      	movs	r2, #23
 800376e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8003770:	4b20      	ldr	r3, [pc, #128]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 8003772:	2202      	movs	r2, #2
 8003774:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8003776:	4b1f      	ldr	r3, [pc, #124]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 8003778:	2200      	movs	r2, #0
 800377a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_3;
 800377c:	4b1d      	ldr	r3, [pc, #116]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 800377e:	2201      	movs	r2, #1
 8003780:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8003782:	4b1c      	ldr	r3, [pc, #112]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 8003784:	2200      	movs	r2, #0
 8003786:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3-1;
 8003788:	4b1a      	ldr	r3, [pc, #104]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 800378a:	2202      	movs	r2, #2
 800378c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800378e:	4b19      	ldr	r3, [pc, #100]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 8003790:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003794:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8003796:	4b17      	ldr	r3, [pc, #92]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 8003798:	2200      	movs	r2, #0
 800379a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 800379c:	4b15      	ldr	r3, [pc, #84]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 800379e:	2200      	movs	r2, #0
 80037a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80037a2:	4b14      	ldr	r3, [pc, #80]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 80037a4:	2208      	movs	r2, #8
 80037a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 80037a8:	4b12      	ldr	r3, [pc, #72]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 80037ae:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80037b4:	480f      	ldr	r0, [pc, #60]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 80037b6:	f006 fca3 	bl	800a100 <HAL_OSPI_Init>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 80037c0:	f7ff ffb6 	bl	8003730 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80037c4:	2301      	movs	r3, #1
 80037c6:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 80037c8:	2301      	movs	r3, #1
 80037ca:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80037cc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80037d0:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037d2:	463b      	mov	r3, r7
 80037d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d8:	4619      	mov	r1, r3
 80037da:	4806      	ldr	r0, [pc, #24]	@ (80037f4 <MX_OCTOSPI1_Init+0xb8>)
 80037dc:	f006 fefe 	bl	800a5dc <HAL_OSPIM_Config>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 80037e6:	f7ff ffa3 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80037ea:	bf00      	nop
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	2400053c 	.word	0x2400053c
 80037f8:	52005000 	.word	0x52005000

080037fc <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b0bc      	sub	sp, #240	@ 0xf0
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003814:	f107 0320 	add.w	r3, r7, #32
 8003818:	22b8      	movs	r2, #184	@ 0xb8
 800381a:	2100      	movs	r1, #0
 800381c:	4618      	mov	r0, r3
 800381e:	f00e fd03 	bl	8012228 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a5d      	ldr	r2, [pc, #372]	@ (800399c <HAL_OSPI_MspInit+0x1a0>)
 8003828:	4293      	cmp	r3, r2
 800382a:	f040 80b2 	bne.w	8003992 <HAL_OSPI_MspInit+0x196>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800382e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 800383a:	2300      	movs	r3, #0
 800383c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800383e:	f107 0320 	add.w	r3, r7, #32
 8003842:	4618      	mov	r0, r3
 8003844:	f008 fd66 	bl	800c314 <HAL_RCCEx_PeriphCLKConfig>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 800384e:	f7ff ff6f 	bl	8003730 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8003852:	4b53      	ldr	r3, [pc, #332]	@ (80039a0 <HAL_OSPI_MspInit+0x1a4>)
 8003854:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003858:	4a51      	ldr	r2, [pc, #324]	@ (80039a0 <HAL_OSPI_MspInit+0x1a4>)
 800385a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800385e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003862:	4b4f      	ldr	r3, [pc, #316]	@ (80039a0 <HAL_OSPI_MspInit+0x1a4>)
 8003864:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003870:	4b4b      	ldr	r3, [pc, #300]	@ (80039a0 <HAL_OSPI_MspInit+0x1a4>)
 8003872:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003876:	4a4a      	ldr	r2, [pc, #296]	@ (80039a0 <HAL_OSPI_MspInit+0x1a4>)
 8003878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800387c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003880:	4b47      	ldr	r3, [pc, #284]	@ (80039a0 <HAL_OSPI_MspInit+0x1a4>)
 8003882:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800388e:	4b44      	ldr	r3, [pc, #272]	@ (80039a0 <HAL_OSPI_MspInit+0x1a4>)
 8003890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003894:	4a42      	ldr	r2, [pc, #264]	@ (80039a0 <HAL_OSPI_MspInit+0x1a4>)
 8003896:	f043 0310 	orr.w	r3, r3, #16
 800389a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800389e:	4b40      	ldr	r3, [pc, #256]	@ (80039a0 <HAL_OSPI_MspInit+0x1a4>)
 80038a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ac:	4b3c      	ldr	r3, [pc, #240]	@ (80039a0 <HAL_OSPI_MspInit+0x1a4>)
 80038ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038b2:	4a3b      	ldr	r2, [pc, #236]	@ (80039a0 <HAL_OSPI_MspInit+0x1a4>)
 80038b4:	f043 0302 	orr.w	r3, r3, #2
 80038b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038bc:	4b38      	ldr	r3, [pc, #224]	@ (80039a0 <HAL_OSPI_MspInit+0x1a4>)
 80038be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038ca:	4b35      	ldr	r3, [pc, #212]	@ (80039a0 <HAL_OSPI_MspInit+0x1a4>)
 80038cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038d0:	4a33      	ldr	r2, [pc, #204]	@ (80039a0 <HAL_OSPI_MspInit+0x1a4>)
 80038d2:	f043 0308 	orr.w	r3, r3, #8
 80038d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038da:	4b31      	ldr	r3, [pc, #196]	@ (80039a0 <HAL_OSPI_MspInit+0x1a4>)
 80038dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PD13     ------> OCTOSPIM_P1_IO3
    PB6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038e8:	2304      	movs	r3, #4
 80038ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ee:	2302      	movs	r3, #2
 80038f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fa:	2303      	movs	r3, #3
 80038fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8003900:	2309      	movs	r3, #9
 8003902:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003906:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800390a:	4619      	mov	r1, r3
 800390c:	4825      	ldr	r0, [pc, #148]	@ (80039a4 <HAL_OSPI_MspInit+0x1a8>)
 800390e:	f004 fd59 	bl	80083c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003912:	2304      	movs	r3, #4
 8003914:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003918:	2302      	movs	r3, #2
 800391a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003924:	2303      	movs	r3, #3
 8003926:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800392a:	2309      	movs	r3, #9
 800392c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003930:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003934:	4619      	mov	r1, r3
 8003936:	481c      	ldr	r0, [pc, #112]	@ (80039a8 <HAL_OSPI_MspInit+0x1ac>)
 8003938:	f004 fd44 	bl	80083c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800393c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003940:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003944:	2302      	movs	r3, #2
 8003946:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	2300      	movs	r3, #0
 800394c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003950:	2303      	movs	r3, #3
 8003952:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8003956:	2309      	movs	r3, #9
 8003958:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800395c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003960:	4619      	mov	r1, r3
 8003962:	4812      	ldr	r0, [pc, #72]	@ (80039ac <HAL_OSPI_MspInit+0x1b0>)
 8003964:	f004 fd2e 	bl	80083c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003968:	2340      	movs	r3, #64	@ 0x40
 800396a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396e:	2302      	movs	r3, #2
 8003970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397a:	2303      	movs	r3, #3
 800397c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8003980:	230a      	movs	r3, #10
 8003982:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003986:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800398a:	4619      	mov	r1, r3
 800398c:	4806      	ldr	r0, [pc, #24]	@ (80039a8 <HAL_OSPI_MspInit+0x1ac>)
 800398e:	f004 fd19 	bl	80083c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8003992:	bf00      	nop
 8003994:	37f0      	adds	r7, #240	@ 0xf0
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	52005000 	.word	0x52005000
 80039a0:	58024400 	.word	0x58024400
 80039a4:	58021000 	.word	0x58021000
 80039a8:	58020400 	.word	0x58020400
 80039ac:	58020c00 	.word	0x58020c00

080039b0 <__NVIC_GetPriorityGrouping>:
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b4:	4b04      	ldr	r3, [pc, #16]	@ (80039c8 <__NVIC_GetPriorityGrouping+0x18>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	0a1b      	lsrs	r3, r3, #8
 80039ba:	f003 0307 	and.w	r3, r3, #7
}
 80039be:	4618      	mov	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000ed00 	.word	0xe000ed00

080039cc <__NVIC_EnableIRQ>:
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	db0b      	blt.n	80039f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	f003 021f 	and.w	r2, r3, #31
 80039e4:	4907      	ldr	r1, [pc, #28]	@ (8003a04 <__NVIC_EnableIRQ+0x38>)
 80039e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	2001      	movs	r0, #1
 80039ee:	fa00 f202 	lsl.w	r2, r0, r2
 80039f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	e000e100 	.word	0xe000e100

08003a08 <__NVIC_SetPriority>:
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	6039      	str	r1, [r7, #0]
 8003a12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	db0a      	blt.n	8003a32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	490c      	ldr	r1, [pc, #48]	@ (8003a54 <__NVIC_SetPriority+0x4c>)
 8003a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a26:	0112      	lsls	r2, r2, #4
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a30:	e00a      	b.n	8003a48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	4908      	ldr	r1, [pc, #32]	@ (8003a58 <__NVIC_SetPriority+0x50>)
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	3b04      	subs	r3, #4
 8003a40:	0112      	lsls	r2, r2, #4
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	440b      	add	r3, r1
 8003a46:	761a      	strb	r2, [r3, #24]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	e000e100 	.word	0xe000e100
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <NVIC_EncodePriority>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b089      	sub	sp, #36	@ 0x24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f1c3 0307 	rsb	r3, r3, #7
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	bf28      	it	cs
 8003a7a:	2304      	movcs	r3, #4
 8003a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3304      	adds	r3, #4
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	d902      	bls.n	8003a8c <NVIC_EncodePriority+0x30>
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3b03      	subs	r3, #3
 8003a8a:	e000      	b.n	8003a8e <NVIC_EncodePriority+0x32>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003aae:	43d9      	mvns	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab4:	4313      	orrs	r3, r2
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3724      	adds	r7, #36	@ 0x24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <LL_SPI_SetStandard>:
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	60da      	str	r2, [r3, #12]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_SPI_SetFIFOThreshold>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	609a      	str	r2, [r3, #8]
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_SPI_EnableNSSPulseMgt>:
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	60da      	str	r2, [r3, #12]
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <LL_AHB4_GRP1_EnableClock>:
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8003b38:	4b0a      	ldr	r3, [pc, #40]	@ (8003b64 <LL_AHB4_GRP1_EnableClock+0x34>)
 8003b3a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003b3e:	4909      	ldr	r1, [pc, #36]	@ (8003b64 <LL_AHB4_GRP1_EnableClock+0x34>)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8003b48:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <LL_AHB4_GRP1_EnableClock+0x34>)
 8003b4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4013      	ands	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b54:	68fb      	ldr	r3, [r7, #12]
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	58024400 	.word	0x58024400

08003b68 <LL_APB1_GRP1_EnableClock>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8003b70:	4b0a      	ldr	r3, [pc, #40]	@ (8003b9c <LL_APB1_GRP1_EnableClock+0x34>)
 8003b72:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8003b76:	4909      	ldr	r1, [pc, #36]	@ (8003b9c <LL_APB1_GRP1_EnableClock+0x34>)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <LL_APB1_GRP1_EnableClock+0x34>)
 8003b82:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
}
 8003b8e:	bf00      	nop
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	58024400 	.word	0x58024400

08003ba0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 8003bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003be8 <LL_DMA_SetDataTransferDirection+0x48>)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bc4:	4908      	ldr	r1, [pc, #32]	@ (8003be8 <LL_DMA_SetDataTransferDirection+0x48>)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	440b      	add	r3, r1
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	440b      	add	r3, r1
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	08017258 	.word	0x08017258

08003bec <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8003bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003c34 <LL_DMA_SetMode+0x48>)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4413      	add	r3, r2
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	4413      	add	r3, r2
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8003c10:	4908      	ldr	r1, [pc, #32]	@ (8003c34 <LL_DMA_SetMode+0x48>)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	440b      	add	r3, r1
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	440b      	add	r3, r1
 8003c1e:	4619      	mov	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	08017258 	.word	0x08017258

08003c38 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 8003c48:	4a0d      	ldr	r2, [pc, #52]	@ (8003c80 <LL_DMA_SetPeriphIncMode+0x48>)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	4413      	add	r3, r2
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003c5c:	4908      	ldr	r1, [pc, #32]	@ (8003c80 <LL_DMA_SetPeriphIncMode+0x48>)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	440b      	add	r3, r1
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	4619      	mov	r1, r3
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	440b      	add	r3, r1
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	08017258 	.word	0x08017258

08003c84 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 8003c94:	4a0d      	ldr	r2, [pc, #52]	@ (8003ccc <LL_DMA_SetMemoryIncMode+0x48>)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4413      	add	r3, r2
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ca8:	4908      	ldr	r1, [pc, #32]	@ (8003ccc <LL_DMA_SetMemoryIncMode+0x48>)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	440b      	add	r3, r1
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	440b      	add	r3, r1
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	08017258 	.word	0x08017258

08003cd0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 8003ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8003d18 <LL_DMA_SetPeriphSize+0x48>)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	4413      	add	r3, r2
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8003cf4:	4908      	ldr	r1, [pc, #32]	@ (8003d18 <LL_DMA_SetPeriphSize+0x48>)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	440b      	add	r3, r1
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	440b      	add	r3, r1
 8003d02:	4619      	mov	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	08017258 	.word	0x08017258

08003d1c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 8003d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d64 <LL_DMA_SetMemorySize+0x48>)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4413      	add	r3, r2
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	4413      	add	r3, r2
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8003d40:	4908      	ldr	r1, [pc, #32]	@ (8003d64 <LL_DMA_SetMemorySize+0x48>)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	440b      	add	r3, r1
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	440b      	add	r3, r1
 8003d4e:	4619      	mov	r1, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	08017258 	.word	0x08017258

08003d68 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 8003d78:	4a0d      	ldr	r2, [pc, #52]	@ (8003db0 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	4413      	add	r3, r2
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d8c:	4908      	ldr	r1, [pc, #32]	@ (8003db0 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	440b      	add	r3, r1
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	4619      	mov	r1, r3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	440b      	add	r3, r1
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]
}
 8003da2:	bf00      	nop
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	08017258 	.word	0x08017258

08003db4 <LL_DMA_SetPeriphRequest>:
  *
  * @note   (*) Availability depends on devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Request)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	4b12      	ldr	r3, [pc, #72]	@ (8003e0c <LL_DMA_SetPeriphRequest+0x58>)
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4911      	ldr	r1, [pc, #68]	@ (8003e10 <LL_DMA_SetPeriphRequest+0x5c>)
 8003dcc:	428a      	cmp	r2, r1
 8003dce:	d101      	bne.n	8003dd4 <LL_DMA_SetPeriphRequest+0x20>
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	e000      	b.n	8003dd6 <LL_DMA_SetPeriphRequest+0x22>
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	4413      	add	r3, r2
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	4b0a      	ldr	r3, [pc, #40]	@ (8003e0c <LL_DMA_SetPeriphRequest+0x58>)
 8003de2:	440b      	add	r3, r1
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	68f9      	ldr	r1, [r7, #12]
 8003de8:	4809      	ldr	r0, [pc, #36]	@ (8003e10 <LL_DMA_SetPeriphRequest+0x5c>)
 8003dea:	4281      	cmp	r1, r0
 8003dec:	d101      	bne.n	8003df2 <LL_DMA_SetPeriphRequest+0x3e>
 8003dee:	2100      	movs	r1, #0
 8003df0:	e000      	b.n	8003df4 <LL_DMA_SetPeriphRequest+0x40>
 8003df2:	2120      	movs	r1, #32
 8003df4:	440b      	add	r3, r1
 8003df6:	4619      	mov	r1, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]
}
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	10008200 	.word	0x10008200
 8003e10:	40020000 	.word	0x40020000

08003e14 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 8003e22:	4a0c      	ldr	r2, [pc, #48]	@ (8003e54 <LL_DMA_DisableFifoMode+0x40>)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	4413      	add	r3, r2
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	4908      	ldr	r1, [pc, #32]	@ (8003e54 <LL_DMA_DisableFifoMode+0x40>)
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	440a      	add	r2, r1
 8003e38:	7812      	ldrb	r2, [r2, #0]
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	440a      	add	r2, r1
 8003e40:	f023 0304 	bic.w	r3, r3, #4
 8003e44:	6153      	str	r3, [r2, #20]
}
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	08017258 	.word	0x08017258

08003e58 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b0be      	sub	sp, #248	@ 0xf8
 8003e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003e5e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8003e62:	2228      	movs	r2, #40	@ 0x28
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f00e f9de 	bl	8012228 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e6c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	60da      	str	r2, [r3, #12]
 8003e7a:	611a      	str	r2, [r3, #16]
 8003e7c:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e7e:	463b      	mov	r3, r7
 8003e80:	22b8      	movs	r2, #184	@ 0xb8
 8003e82:	2100      	movs	r1, #0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f00e f9cf 	bl	8012228 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003e8a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e8e:	f04f 0300 	mov.w	r3, #0
 8003e92:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e9a:	463b      	mov	r3, r7
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f008 fa39 	bl	800c314 <HAL_RCCEx_PeriphCLKConfig>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <MX_SPI2_Init+0x54>
  {
    Error_Handler();
 8003ea8:	f7ff fc42 	bl	8003730 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8003eac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003eb0:	f7ff fe5a 	bl	8003b68 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8003eb4:	2004      	movs	r0, #4
 8003eb6:	f7ff fe3b 	bl	8003b30 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 8003eba:	2002      	movs	r0, #2
 8003ebc:	f7ff fe38 	bl	8003b30 <LL_AHB4_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC1   ------> SPI2_MOSI
  PC2_C   ------> SPI2_MISO
  PB13   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8003ec0:	2306      	movs	r3, #6
 8003ec2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003ede:	2305      	movs	r3, #5
 8003ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ee4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003ee8:	4619      	mov	r1, r3
 8003eea:	485f      	ldr	r0, [pc, #380]	@ (8004068 <MX_SPI2_Init+0x210>)
 8003eec:	f00b fb6a 	bl	800f5c4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8003ef0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003f10:	2305      	movs	r3, #5
 8003f12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f16:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4853      	ldr	r0, [pc, #332]	@ (800406c <MX_SPI2_Init+0x214>)
 8003f1e:	f00b fb51 	bl	800f5c4 <LL_GPIO_Init>

  /* SPI2 DMA Init */

  /* SPI2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_5, LL_DMAMUX1_REQ_SPI2_RX);
 8003f22:	2227      	movs	r2, #39	@ 0x27
 8003f24:	2105      	movs	r1, #5
 8003f26:	4852      	ldr	r0, [pc, #328]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003f28:	f7ff ff44 	bl	8003db4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2105      	movs	r1, #5
 8003f30:	484f      	ldr	r0, [pc, #316]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003f32:	f7ff fe35 	bl	8003ba0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 8003f36:	2200      	movs	r2, #0
 8003f38:	2105      	movs	r1, #5
 8003f3a:	484d      	ldr	r0, [pc, #308]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003f3c:	f7ff ff14 	bl	8003d68 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 8003f40:	2200      	movs	r2, #0
 8003f42:	2105      	movs	r1, #5
 8003f44:	484a      	ldr	r0, [pc, #296]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003f46:	f7ff fe51 	bl	8003bec <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2105      	movs	r1, #5
 8003f4e:	4848      	ldr	r0, [pc, #288]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003f50:	f7ff fe72 	bl	8003c38 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8003f54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f58:	2105      	movs	r1, #5
 8003f5a:	4845      	ldr	r0, [pc, #276]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003f5c:	f7ff fe92 	bl	8003c84 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8003f60:	2200      	movs	r2, #0
 8003f62:	2105      	movs	r1, #5
 8003f64:	4842      	ldr	r0, [pc, #264]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003f66:	f7ff feb3 	bl	8003cd0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2105      	movs	r1, #5
 8003f6e:	4840      	ldr	r0, [pc, #256]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003f70:	f7ff fed4 	bl	8003d1c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 8003f74:	2105      	movs	r1, #5
 8003f76:	483e      	ldr	r0, [pc, #248]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003f78:	f7ff ff4c 	bl	8003e14 <LL_DMA_DisableFifoMode>

  /* SPI2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_6, LL_DMAMUX1_REQ_SPI2_TX);
 8003f7c:	2228      	movs	r2, #40	@ 0x28
 8003f7e:	2106      	movs	r1, #6
 8003f80:	483b      	ldr	r0, [pc, #236]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003f82:	f7ff ff17 	bl	8003db4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003f86:	2240      	movs	r2, #64	@ 0x40
 8003f88:	2106      	movs	r1, #6
 8003f8a:	4839      	ldr	r0, [pc, #228]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003f8c:	f7ff fe08 	bl	8003ba0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8003f90:	2200      	movs	r2, #0
 8003f92:	2106      	movs	r1, #6
 8003f94:	4836      	ldr	r0, [pc, #216]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003f96:	f7ff fee7 	bl	8003d68 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2106      	movs	r1, #6
 8003f9e:	4834      	ldr	r0, [pc, #208]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003fa0:	f7ff fe24 	bl	8003bec <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2106      	movs	r1, #6
 8003fa8:	4831      	ldr	r0, [pc, #196]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003faa:	f7ff fe45 	bl	8003c38 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8003fae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fb2:	2106      	movs	r1, #6
 8003fb4:	482e      	ldr	r0, [pc, #184]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003fb6:	f7ff fe65 	bl	8003c84 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2106      	movs	r1, #6
 8003fbe:	482c      	ldr	r0, [pc, #176]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003fc0:	f7ff fe86 	bl	8003cd0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2106      	movs	r1, #6
 8003fc8:	4829      	ldr	r0, [pc, #164]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003fca:	f7ff fea7 	bl	8003d1c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 8003fce:	2106      	movs	r1, #6
 8003fd0:	4827      	ldr	r0, [pc, #156]	@ (8004070 <MX_SPI2_Init+0x218>)
 8003fd2:	f7ff ff1f 	bl	8003e14 <LL_DMA_DisableFifoMode>

  /* SPI2 interrupt Init */
  NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003fd6:	f7ff fceb 	bl	80039b0 <__NVIC_GetPriorityGrouping>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff fd3b 	bl	8003a5c <NVIC_EncodePriority>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4619      	mov	r1, r3
 8003fea:	2024      	movs	r0, #36	@ 0x24
 8003fec:	f7ff fd0c 	bl	8003a08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI2_IRQn);
 8003ff0:	2024      	movs	r0, #36	@ 0x24
 8003ff2:	f7ff fceb 	bl	80039cc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003ffc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004000:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004004:	2307      	movs	r3, #7
 8004006:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800400a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800400e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004012:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004016:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800401a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800401e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8004022:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004026:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  SPI_InitStruct.CRCPoly = 0x0;
 8004036:	2300      	movs	r3, #0
 8004038:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800403c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8004040:	4619      	mov	r1, r3
 8004042:	480c      	ldr	r0, [pc, #48]	@ (8004074 <MX_SPI2_Init+0x21c>)
 8004044:	f00c fa10 	bl	8010468 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8004048:	2100      	movs	r1, #0
 800404a:	480a      	ldr	r0, [pc, #40]	@ (8004074 <MX_SPI2_Init+0x21c>)
 800404c:	f7ff fd39 	bl	8003ac2 <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI2, LL_SPI_FIFO_TH_01DATA);
 8004050:	2100      	movs	r1, #0
 8004052:	4808      	ldr	r0, [pc, #32]	@ (8004074 <MX_SPI2_Init+0x21c>)
 8004054:	f7ff fd48 	bl	8003ae8 <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI2);
 8004058:	4806      	ldr	r0, [pc, #24]	@ (8004074 <MX_SPI2_Init+0x21c>)
 800405a:	f7ff fd58 	bl	8003b0e <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800405e:	bf00      	nop
 8004060:	37f8      	adds	r7, #248	@ 0xf8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	58020800 	.word	0x58020800
 800406c:	58020400 	.word	0x58020400
 8004070:	40020000 	.word	0x40020000
 8004074:	40003800 	.word	0x40003800

08004078 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b0be      	sub	sp, #248	@ 0xf8
 800407c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800407e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8004082:	2228      	movs	r2, #40	@ 0x28
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f00e f8ce 	bl	8012228 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800408c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	611a      	str	r2, [r3, #16]
 800409c:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800409e:	463b      	mov	r3, r7
 80040a0:	22b8      	movs	r2, #184	@ 0xb8
 80040a2:	2100      	movs	r1, #0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f00e f8bf 	bl	8012228 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80040aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040ba:	463b      	mov	r3, r7
 80040bc:	4618      	mov	r0, r3
 80040be:	f008 f929 	bl	800c314 <HAL_RCCEx_PeriphCLKConfig>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <MX_SPI3_Init+0x54>
  {
    Error_Handler();
 80040c8:	f7ff fb32 	bl	8003730 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80040cc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80040d0:	f7ff fd4a 	bl	8003b68 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 80040d4:	2004      	movs	r0, #4
 80040d6:	f7ff fd2b 	bl	8003b30 <LL_AHB4_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80040da:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80040de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80040e2:	2302      	movs	r3, #2
 80040e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80040e8:	2300      	movs	r3, #0
 80040ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80040f4:	2300      	movs	r3, #0
 80040f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80040fa:	2306      	movs	r3, #6
 80040fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004100:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8004104:	4619      	mov	r1, r3
 8004106:	4852      	ldr	r0, [pc, #328]	@ (8004250 <MX_SPI3_Init+0x1d8>)
 8004108:	f00b fa5c 	bl	800f5c4 <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_4, LL_DMAMUX1_REQ_SPI3_RX);
 800410c:	223d      	movs	r2, #61	@ 0x3d
 800410e:	2104      	movs	r1, #4
 8004110:	4850      	ldr	r0, [pc, #320]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 8004112:	f7ff fe4f 	bl	8003db4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8004116:	2200      	movs	r2, #0
 8004118:	2104      	movs	r1, #4
 800411a:	484e      	ldr	r0, [pc, #312]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 800411c:	f7ff fd40 	bl	8003ba0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 8004120:	2200      	movs	r2, #0
 8004122:	2104      	movs	r1, #4
 8004124:	484b      	ldr	r0, [pc, #300]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 8004126:	f7ff fe1f 	bl	8003d68 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 800412a:	2200      	movs	r2, #0
 800412c:	2104      	movs	r1, #4
 800412e:	4849      	ldr	r0, [pc, #292]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 8004130:	f7ff fd5c 	bl	8003bec <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 8004134:	2200      	movs	r2, #0
 8004136:	2104      	movs	r1, #4
 8004138:	4846      	ldr	r0, [pc, #280]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 800413a:	f7ff fd7d 	bl	8003c38 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 800413e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004142:	2104      	movs	r1, #4
 8004144:	4843      	ldr	r0, [pc, #268]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 8004146:	f7ff fd9d 	bl	8003c84 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 800414a:	2200      	movs	r2, #0
 800414c:	2104      	movs	r1, #4
 800414e:	4841      	ldr	r0, [pc, #260]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 8004150:	f7ff fdbe 	bl	8003cd0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 8004154:	2200      	movs	r2, #0
 8004156:	2104      	movs	r1, #4
 8004158:	483e      	ldr	r0, [pc, #248]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 800415a:	f7ff fddf 	bl	8003d1c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_4);
 800415e:	2104      	movs	r1, #4
 8004160:	483c      	ldr	r0, [pc, #240]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 8004162:	f7ff fe57 	bl	8003e14 <LL_DMA_DisableFifoMode>

  /* SPI3_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_3, LL_DMAMUX1_REQ_SPI3_TX);
 8004166:	223e      	movs	r2, #62	@ 0x3e
 8004168:	2103      	movs	r1, #3
 800416a:	483a      	ldr	r0, [pc, #232]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 800416c:	f7ff fe22 	bl	8003db4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8004170:	2240      	movs	r2, #64	@ 0x40
 8004172:	2103      	movs	r1, #3
 8004174:	4837      	ldr	r0, [pc, #220]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 8004176:	f7ff fd13 	bl	8003ba0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_3, LL_DMA_PRIORITY_LOW);
 800417a:	2200      	movs	r2, #0
 800417c:	2103      	movs	r1, #3
 800417e:	4835      	ldr	r0, [pc, #212]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 8004180:	f7ff fdf2 	bl	8003d68 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MODE_NORMAL);
 8004184:	2200      	movs	r2, #0
 8004186:	2103      	movs	r1, #3
 8004188:	4832      	ldr	r0, [pc, #200]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 800418a:	f7ff fd2f 	bl	8003bec <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_PERIPH_NOINCREMENT);
 800418e:	2200      	movs	r2, #0
 8004190:	2103      	movs	r1, #3
 8004192:	4830      	ldr	r0, [pc, #192]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 8004194:	f7ff fd50 	bl	8003c38 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MEMORY_INCREMENT);
 8004198:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800419c:	2103      	movs	r1, #3
 800419e:	482d      	ldr	r0, [pc, #180]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 80041a0:	f7ff fd70 	bl	8003c84 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_3, LL_DMA_PDATAALIGN_BYTE);
 80041a4:	2200      	movs	r2, #0
 80041a6:	2103      	movs	r1, #3
 80041a8:	482a      	ldr	r0, [pc, #168]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 80041aa:	f7ff fd91 	bl	8003cd0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_3, LL_DMA_MDATAALIGN_BYTE);
 80041ae:	2200      	movs	r2, #0
 80041b0:	2103      	movs	r1, #3
 80041b2:	4828      	ldr	r0, [pc, #160]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 80041b4:	f7ff fdb2 	bl	8003d1c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_3);
 80041b8:	2103      	movs	r1, #3
 80041ba:	4826      	ldr	r0, [pc, #152]	@ (8004254 <MX_SPI3_Init+0x1dc>)
 80041bc:	f7ff fe2a 	bl	8003e14 <LL_DMA_DisableFifoMode>

  /* SPI3 interrupt Init */
  NVIC_SetPriority(SPI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80041c0:	f7ff fbf6 	bl	80039b0 <__NVIC_GetPriorityGrouping>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2200      	movs	r2, #0
 80041c8:	2100      	movs	r1, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff fc46 	bl	8003a5c <NVIC_EncodePriority>
 80041d0:	4603      	mov	r3, r0
 80041d2:	4619      	mov	r1, r3
 80041d4:	2033      	movs	r0, #51	@ 0x33
 80041d6:	f7ff fc17 	bl	8003a08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI3_IRQn);
 80041da:	2033      	movs	r0, #51	@ 0x33
 80041dc:	f7ff fbf6 	bl	80039cc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80041e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80041ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80041ee:	2307      	movs	r3, #7
 80041f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80041f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80041fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004204:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004208:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800420c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004210:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800421a:	2300      	movs	r3, #0
 800421c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  SPI_InitStruct.CRCPoly = 0x0;
 8004220:	2300      	movs	r3, #0
 8004222:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8004226:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800422a:	4619      	mov	r1, r3
 800422c:	480a      	ldr	r0, [pc, #40]	@ (8004258 <MX_SPI3_Init+0x1e0>)
 800422e:	f00c f91b 	bl	8010468 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8004232:	2100      	movs	r1, #0
 8004234:	4808      	ldr	r0, [pc, #32]	@ (8004258 <MX_SPI3_Init+0x1e0>)
 8004236:	f7ff fc44 	bl	8003ac2 <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI3, LL_SPI_FIFO_TH_01DATA);
 800423a:	2100      	movs	r1, #0
 800423c:	4806      	ldr	r0, [pc, #24]	@ (8004258 <MX_SPI3_Init+0x1e0>)
 800423e:	f7ff fc53 	bl	8003ae8 <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI3);
 8004242:	4805      	ldr	r0, [pc, #20]	@ (8004258 <MX_SPI3_Init+0x1e0>)
 8004244:	f7ff fc63 	bl	8003b0e <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004248:	bf00      	nop
 800424a:	37f8      	adds	r7, #248	@ 0xf8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	58020800 	.word	0x58020800
 8004254:	40020000 	.word	0x40020000
 8004258:	40003c00 	.word	0x40003c00

0800425c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004262:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <HAL_MspInit+0x30>)
 8004264:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004268:	4a08      	ldr	r2, [pc, #32]	@ (800428c <HAL_MspInit+0x30>)
 800426a:	f043 0302 	orr.w	r3, r3, #2
 800426e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004272:	4b06      	ldr	r3, [pc, #24]	@ (800428c <HAL_MspInit+0x30>)
 8004274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	58024400 	.word	0x58024400

08004290 <LL_TIM_ClearFlag_UPDATE>:
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f06f 0201 	mvn.w	r2, #1
 800429e:	611a      	str	r2, [r3, #16]
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <LL_TIM_IsActiveFlag_UPDATE>:
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <LL_USART_IsActiveFlag_FE>:
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d101      	bne.n	80042ea <LL_USART_IsActiveFlag_FE+0x18>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <LL_USART_IsActiveFlag_FE+0x1a>
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <LL_USART_IsActiveFlag_NE>:
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d101      	bne.n	8004310 <LL_USART_IsActiveFlag_NE+0x18>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <LL_USART_IsActiveFlag_NE+0x1a>
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <LL_USART_IsActiveFlag_ORE>:
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b08      	cmp	r3, #8
 8004330:	d101      	bne.n	8004336 <LL_USART_IsActiveFlag_ORE+0x18>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <LL_USART_IsActiveFlag_ORE+0x1a>
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b20      	cmp	r3, #32
 8004356:	d101      	bne.n	800435c <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8004358:	2301      	movs	r3, #1
 800435a:	e000      	b.n	800435e <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <LL_USART_ClearFlag_FE>:
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	621a      	str	r2, [r3, #32]
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_USART_ClearFlag_NE>:
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2204      	movs	r2, #4
 8004390:	621a      	str	r2, [r3, #32]
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <LL_USART_ClearFlag_ORE>:
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2208      	movs	r2, #8
 80043aa:	621a      	str	r2, [r3, #32]
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <LL_USART_ReceiveData8>:
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	b2db      	uxtb	r3, r3
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043d2:	b480      	push	{r7}
 80043d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80043d6:	bf00      	nop
 80043d8:	e7fd      	b.n	80043d6 <NMI_Handler+0x4>

080043da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043da:	b480      	push	{r7}
 80043dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043de:	bf00      	nop
 80043e0:	e7fd      	b.n	80043de <HardFault_Handler+0x4>

080043e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043e2:	b480      	push	{r7}
 80043e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043e6:	bf00      	nop
 80043e8:	e7fd      	b.n	80043e6 <MemManage_Handler+0x4>

080043ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043ea:	b480      	push	{r7}
 80043ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043ee:	bf00      	nop
 80043f0:	e7fd      	b.n	80043ee <BusFault_Handler+0x4>

080043f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043f2:	b480      	push	{r7}
 80043f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043f6:	bf00      	nop
 80043f8:	e7fd      	b.n	80043f6 <UsageFault_Handler+0x4>

080043fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043fa:	b480      	push	{r7}
 80043fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043fe:	bf00      	nop
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800440c:	bf00      	nop
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004416:	b480      	push	{r7}
 8004418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800441a:	bf00      	nop
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004428:	f001 fad8 	bl	80059dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800442c:	bf00      	nop
 800442e:	bd80      	pop	{r7, pc}

08004430 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004434:	4802      	ldr	r0, [pc, #8]	@ (8004440 <DMA1_Stream0_IRQHandler+0x10>)
 8004436:	f002 fca5 	bl	8006d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	240003d0 	.word	0x240003d0

08004444 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004448:	4802      	ldr	r0, [pc, #8]	@ (8004454 <DMA1_Stream1_IRQHandler+0x10>)
 800444a:	f002 fc9b 	bl	8006d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	24000448 	.word	0x24000448

08004458 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800445c:	4802      	ldr	r0, [pc, #8]	@ (8004468 <DMA1_Stream2_IRQHandler+0x10>)
 800445e:	f002 fc91 	bl	8006d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004462:	bf00      	nop
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	240006c0 	.word	0x240006c0

0800446c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004470:	bf00      	nop
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800447a:	b480      	push	{r7}
 800447c:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800447e:	bf00      	nop
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800448c:	bf00      	nop
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004496:	b480      	push	{r7}
 8004498:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800449a:	bf00      	nop
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80044a8:	4802      	ldr	r0, [pc, #8]	@ (80044b4 <I2C1_EV_IRQHandler+0x10>)
 80044aa:	f004 fc11 	bl	8008cd0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80044ae:	bf00      	nop
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	2400037c 	.word	0x2400037c

080044b8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80044bc:	4802      	ldr	r0, [pc, #8]	@ (80044c8 <I2C1_ER_IRQHandler+0x10>)
 80044be:	f004 fc21 	bl	8008d04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80044c2:	bf00      	nop
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	2400037c 	.word	0x2400037c

080044cc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0

  /* USER CODE END SPI2_IRQn 0 */
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80044da:	b480      	push	{r7}
 80044dc:	af00      	add	r7, sp, #0

  /* USER CODE END SPI3_IRQn 0 */
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80044de:	bf00      	nop
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

	static unsigned char cnt = 0;
	//    static uint8_t ibus_rx_buf[32];

	if (LL_USART_IsActiveFlag_RXNE(UART4)) {
 80044ec:	483f      	ldr	r0, [pc, #252]	@ (80045ec <UART4_IRQHandler+0x104>)
 80044ee:	f7ff ff29 	bl	8004344 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d059      	beq.n	80045ac <UART4_IRQHandler+0xc4>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 80044f8:	483c      	ldr	r0, [pc, #240]	@ (80045ec <UART4_IRQHandler+0x104>)
 80044fa:	f7ff ff5d 	bl	80043b8 <LL_USART_ReceiveData8>
 80044fe:	4603      	mov	r3, r0
 8004500:	461a      	mov	r2, r3
 8004502:	4b3b      	ldr	r3, [pc, #236]	@ (80045f0 <UART4_IRQHandler+0x108>)
 8004504:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 8004506:	4b3b      	ldr	r3, [pc, #236]	@ (80045f4 <UART4_IRQHandler+0x10c>)
 8004508:	2201      	movs	r2, #1
 800450a:	701a      	strb	r2, [r3, #0]

		switch (cnt) {
 800450c:	4b3a      	ldr	r3, [pc, #232]	@ (80045f8 <UART4_IRQHandler+0x110>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b1f      	cmp	r3, #31
 8004512:	d02e      	beq.n	8004572 <UART4_IRQHandler+0x8a>
 8004514:	2b1f      	cmp	r3, #31
 8004516:	dc3a      	bgt.n	800458e <UART4_IRQHandler+0xa6>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <UART4_IRQHandler+0x3a>
 800451c:	2b01      	cmp	r3, #1
 800451e:	d012      	beq.n	8004546 <UART4_IRQHandler+0x5e>
 8004520:	e035      	b.n	800458e <UART4_IRQHandler+0xa6>
		case 0:
			if (uart4_rx_data == 0x20) {
 8004522:	4b33      	ldr	r3, [pc, #204]	@ (80045f0 <UART4_IRQHandler+0x108>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b20      	cmp	r3, #32
 8004528:	d13f      	bne.n	80045aa <UART4_IRQHandler+0xc2>
				ibus_rx_buf[cnt] = uart4_rx_data;
 800452a:	4b33      	ldr	r3, [pc, #204]	@ (80045f8 <UART4_IRQHandler+0x110>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	4b2f      	ldr	r3, [pc, #188]	@ (80045f0 <UART4_IRQHandler+0x108>)
 8004532:	7819      	ldrb	r1, [r3, #0]
 8004534:	4b31      	ldr	r3, [pc, #196]	@ (80045fc <UART4_IRQHandler+0x114>)
 8004536:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004538:	4b2f      	ldr	r3, [pc, #188]	@ (80045f8 <UART4_IRQHandler+0x110>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	3301      	adds	r3, #1
 800453e:	b2da      	uxtb	r2, r3
 8004540:	4b2d      	ldr	r3, [pc, #180]	@ (80045f8 <UART4_IRQHandler+0x110>)
 8004542:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004544:	e031      	b.n	80045aa <UART4_IRQHandler+0xc2>
		case 1:
			if (uart4_rx_data == 0x40) {
 8004546:	4b2a      	ldr	r3, [pc, #168]	@ (80045f0 <UART4_IRQHandler+0x108>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b40      	cmp	r3, #64	@ 0x40
 800454c:	d10d      	bne.n	800456a <UART4_IRQHandler+0x82>
				ibus_rx_buf[cnt] = uart4_rx_data;
 800454e:	4b2a      	ldr	r3, [pc, #168]	@ (80045f8 <UART4_IRQHandler+0x110>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	4b26      	ldr	r3, [pc, #152]	@ (80045f0 <UART4_IRQHandler+0x108>)
 8004556:	7819      	ldrb	r1, [r3, #0]
 8004558:	4b28      	ldr	r3, [pc, #160]	@ (80045fc <UART4_IRQHandler+0x114>)
 800455a:	5499      	strb	r1, [r3, r2]
				cnt++;
 800455c:	4b26      	ldr	r3, [pc, #152]	@ (80045f8 <UART4_IRQHandler+0x110>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	b2da      	uxtb	r2, r3
 8004564:	4b24      	ldr	r3, [pc, #144]	@ (80045f8 <UART4_IRQHandler+0x110>)
 8004566:	701a      	strb	r2, [r3, #0]
			} else {
				cnt = 0; // Reset if invalid header
			}
			break;
 8004568:	e020      	b.n	80045ac <UART4_IRQHandler+0xc4>
				cnt = 0; // Reset if invalid header
 800456a:	4b23      	ldr	r3, [pc, #140]	@ (80045f8 <UART4_IRQHandler+0x110>)
 800456c:	2200      	movs	r2, #0
 800456e:	701a      	strb	r2, [r3, #0]
			break;
 8004570:	e01c      	b.n	80045ac <UART4_IRQHandler+0xc4>
		case 31:
			ibus_rx_buf[cnt] = uart4_rx_data;
 8004572:	4b21      	ldr	r3, [pc, #132]	@ (80045f8 <UART4_IRQHandler+0x110>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	4b1d      	ldr	r3, [pc, #116]	@ (80045f0 <UART4_IRQHandler+0x108>)
 800457a:	7819      	ldrb	r1, [r3, #0]
 800457c:	4b1f      	ldr	r3, [pc, #124]	@ (80045fc <UART4_IRQHandler+0x114>)
 800457e:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8004580:	4b1d      	ldr	r3, [pc, #116]	@ (80045f8 <UART4_IRQHandler+0x110>)
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8004586:	4b1e      	ldr	r3, [pc, #120]	@ (8004600 <UART4_IRQHandler+0x118>)
 8004588:	2201      	movs	r2, #1
 800458a:	701a      	strb	r2, [r3, #0]
			//	                for (uint8_t i = 0; i < len; i++) {
			//	                    while (!LL_USART_IsActiveFlag_TXE(USART6)) {}
			//	//                    LL_USART_TransmitData8(USART6, buffer[i]);
			//	                }
			//	                while (!LL_USART_IsActiveFlag_TC(USART6)) {}
			break;
 800458c:	e00e      	b.n	80045ac <UART4_IRQHandler+0xc4>
		default:
			ibus_rx_buf[cnt] = uart4_rx_data;
 800458e:	4b1a      	ldr	r3, [pc, #104]	@ (80045f8 <UART4_IRQHandler+0x110>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	4b16      	ldr	r3, [pc, #88]	@ (80045f0 <UART4_IRQHandler+0x108>)
 8004596:	7819      	ldrb	r1, [r3, #0]
 8004598:	4b18      	ldr	r3, [pc, #96]	@ (80045fc <UART4_IRQHandler+0x114>)
 800459a:	5499      	strb	r1, [r3, r2]
			cnt++;
 800459c:	4b16      	ldr	r3, [pc, #88]	@ (80045f8 <UART4_IRQHandler+0x110>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	3301      	adds	r3, #1
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	4b14      	ldr	r3, [pc, #80]	@ (80045f8 <UART4_IRQHandler+0x110>)
 80045a6:	701a      	strb	r2, [r3, #0]
			break;
 80045a8:	e000      	b.n	80045ac <UART4_IRQHandler+0xc4>
			break;
 80045aa:	bf00      	nop
		}
	}

	// Handle UART errors
	if (LL_USART_IsActiveFlag_ORE(UART4) || LL_USART_IsActiveFlag_FE(UART4) || LL_USART_IsActiveFlag_NE(UART4)) {
 80045ac:	480f      	ldr	r0, [pc, #60]	@ (80045ec <UART4_IRQHandler+0x104>)
 80045ae:	f7ff feb6 	bl	800431e <LL_USART_IsActiveFlag_ORE>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <UART4_IRQHandler+0xe8>
 80045b8:	480c      	ldr	r0, [pc, #48]	@ (80045ec <UART4_IRQHandler+0x104>)
 80045ba:	f7ff fe8a 	bl	80042d2 <LL_USART_IsActiveFlag_FE>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <UART4_IRQHandler+0xe8>
 80045c4:	4809      	ldr	r0, [pc, #36]	@ (80045ec <UART4_IRQHandler+0x104>)
 80045c6:	f7ff fe97 	bl	80042f8 <LL_USART_IsActiveFlag_NE>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00b      	beq.n	80045e8 <UART4_IRQHandler+0x100>
		LL_USART_ClearFlag_ORE(UART4);
 80045d0:	4806      	ldr	r0, [pc, #24]	@ (80045ec <UART4_IRQHandler+0x104>)
 80045d2:	f7ff fee4 	bl	800439e <LL_USART_ClearFlag_ORE>
		LL_USART_ClearFlag_FE(UART4);
 80045d6:	4805      	ldr	r0, [pc, #20]	@ (80045ec <UART4_IRQHandler+0x104>)
 80045d8:	f7ff fec7 	bl	800436a <LL_USART_ClearFlag_FE>
		LL_USART_ClearFlag_NE(UART4);
 80045dc:	4803      	ldr	r0, [pc, #12]	@ (80045ec <UART4_IRQHandler+0x104>)
 80045de:	f7ff fed1 	bl	8004384 <LL_USART_ClearFlag_NE>
		cnt = 0; // Reset buffer on error
 80045e2:	4b05      	ldr	r3, [pc, #20]	@ (80045f8 <UART4_IRQHandler+0x110>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80045e8:	bf00      	nop
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40004c00 	.word	0x40004c00
 80045f0:	24000599 	.word	0x24000599
 80045f4:	24000598 	.word	0x24000598
 80045f8:	24000614 	.word	0x24000614
 80045fc:	2400059c 	.word	0x2400059c
 8004600:	240005bc 	.word	0x240005bc

08004604 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
	static uint16_t tim7_50ms_count   = 0;
	static uint16_t tim7_100ms_count  = 0;
	static uint16_t tim7_200ms_count  = 0;
	static uint16_t tim7_1000ms_count = 0;

	if (LL_TIM_IsActiveFlag_UPDATE(TIM7))
 8004608:	483d      	ldr	r0, [pc, #244]	@ (8004700 <TIM7_IRQHandler+0xfc>)
 800460a:	f7ff fe4f 	bl	80042ac <LL_TIM_IsActiveFlag_UPDATE>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d073      	beq.n	80046fc <TIM7_IRQHandler+0xf8>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8004614:	483a      	ldr	r0, [pc, #232]	@ (8004700 <TIM7_IRQHandler+0xfc>)
 8004616:	f7ff fe3b 	bl	8004290 <LL_TIM_ClearFlag_UPDATE>

		if (++tim7_1ms_count >= 1) {
 800461a:	4b3a      	ldr	r3, [pc, #232]	@ (8004704 <TIM7_IRQHandler+0x100>)
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	3301      	adds	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	4b38      	ldr	r3, [pc, #224]	@ (8004704 <TIM7_IRQHandler+0x100>)
 8004624:	801a      	strh	r2, [r3, #0]
 8004626:	4b37      	ldr	r3, [pc, #220]	@ (8004704 <TIM7_IRQHandler+0x100>)
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <TIM7_IRQHandler+0x36>
			tim7_1ms_count = 0;
 800462e:	4b35      	ldr	r3, [pc, #212]	@ (8004704 <TIM7_IRQHandler+0x100>)
 8004630:	2200      	movs	r2, #0
 8004632:	801a      	strh	r2, [r3, #0]
			tim7_1ms_flag = 1;
 8004634:	4b34      	ldr	r3, [pc, #208]	@ (8004708 <TIM7_IRQHandler+0x104>)
 8004636:	2201      	movs	r2, #1
 8004638:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_2ms_count >= 2) {
 800463a:	4b34      	ldr	r3, [pc, #208]	@ (800470c <TIM7_IRQHandler+0x108>)
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	3301      	adds	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	4b32      	ldr	r3, [pc, #200]	@ (800470c <TIM7_IRQHandler+0x108>)
 8004644:	801a      	strh	r2, [r3, #0]
 8004646:	4b31      	ldr	r3, [pc, #196]	@ (800470c <TIM7_IRQHandler+0x108>)
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d905      	bls.n	800465a <TIM7_IRQHandler+0x56>
			tim7_2ms_count = 0;
 800464e:	4b2f      	ldr	r3, [pc, #188]	@ (800470c <TIM7_IRQHandler+0x108>)
 8004650:	2200      	movs	r2, #0
 8004652:	801a      	strh	r2, [r3, #0]
			tim7_2ms_flag = 1;
 8004654:	4b2e      	ldr	r3, [pc, #184]	@ (8004710 <TIM7_IRQHandler+0x10c>)
 8004656:	2201      	movs	r2, #1
 8004658:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_20ms_count >= 20) {
 800465a:	4b2e      	ldr	r3, [pc, #184]	@ (8004714 <TIM7_IRQHandler+0x110>)
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	3301      	adds	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	4b2c      	ldr	r3, [pc, #176]	@ (8004714 <TIM7_IRQHandler+0x110>)
 8004664:	801a      	strh	r2, [r3, #0]
 8004666:	4b2b      	ldr	r3, [pc, #172]	@ (8004714 <TIM7_IRQHandler+0x110>)
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	2b13      	cmp	r3, #19
 800466c:	d905      	bls.n	800467a <TIM7_IRQHandler+0x76>
			tim7_20ms_count = 0;
 800466e:	4b29      	ldr	r3, [pc, #164]	@ (8004714 <TIM7_IRQHandler+0x110>)
 8004670:	2200      	movs	r2, #0
 8004672:	801a      	strh	r2, [r3, #0]
			tim7_20ms_flag = 1;
 8004674:	4b28      	ldr	r3, [pc, #160]	@ (8004718 <TIM7_IRQHandler+0x114>)
 8004676:	2201      	movs	r2, #1
 8004678:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_50ms_count >= 50) {
 800467a:	4b28      	ldr	r3, [pc, #160]	@ (800471c <TIM7_IRQHandler+0x118>)
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	3301      	adds	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	4b26      	ldr	r3, [pc, #152]	@ (800471c <TIM7_IRQHandler+0x118>)
 8004684:	801a      	strh	r2, [r3, #0]
 8004686:	4b25      	ldr	r3, [pc, #148]	@ (800471c <TIM7_IRQHandler+0x118>)
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	2b31      	cmp	r3, #49	@ 0x31
 800468c:	d905      	bls.n	800469a <TIM7_IRQHandler+0x96>
			tim7_50ms_count = 0;
 800468e:	4b23      	ldr	r3, [pc, #140]	@ (800471c <TIM7_IRQHandler+0x118>)
 8004690:	2200      	movs	r2, #0
 8004692:	801a      	strh	r2, [r3, #0]
			tim7_50ms_flag = 1;
 8004694:	4b22      	ldr	r3, [pc, #136]	@ (8004720 <TIM7_IRQHandler+0x11c>)
 8004696:	2201      	movs	r2, #1
 8004698:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_100ms_count >= 100) {
 800469a:	4b22      	ldr	r3, [pc, #136]	@ (8004724 <TIM7_IRQHandler+0x120>)
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	3301      	adds	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	4b20      	ldr	r3, [pc, #128]	@ (8004724 <TIM7_IRQHandler+0x120>)
 80046a4:	801a      	strh	r2, [r3, #0]
 80046a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004724 <TIM7_IRQHandler+0x120>)
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	2b63      	cmp	r3, #99	@ 0x63
 80046ac:	d905      	bls.n	80046ba <TIM7_IRQHandler+0xb6>
			tim7_100ms_count = 0;
 80046ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004724 <TIM7_IRQHandler+0x120>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	801a      	strh	r2, [r3, #0]
			tim7_100ms_flag = 1;
 80046b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004728 <TIM7_IRQHandler+0x124>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_200ms_count >= 200) {
 80046ba:	4b1c      	ldr	r3, [pc, #112]	@ (800472c <TIM7_IRQHandler+0x128>)
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	4b1a      	ldr	r3, [pc, #104]	@ (800472c <TIM7_IRQHandler+0x128>)
 80046c4:	801a      	strh	r2, [r3, #0]
 80046c6:	4b19      	ldr	r3, [pc, #100]	@ (800472c <TIM7_IRQHandler+0x128>)
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80046cc:	d905      	bls.n	80046da <TIM7_IRQHandler+0xd6>
			tim7_200ms_count = 0;
 80046ce:	4b17      	ldr	r3, [pc, #92]	@ (800472c <TIM7_IRQHandler+0x128>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	801a      	strh	r2, [r3, #0]
			tim7_200ms_flag = 1;
 80046d4:	4b16      	ldr	r3, [pc, #88]	@ (8004730 <TIM7_IRQHandler+0x12c>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_1000ms_count >= 1000) {
 80046da:	4b16      	ldr	r3, [pc, #88]	@ (8004734 <TIM7_IRQHandler+0x130>)
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	3301      	adds	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	4b14      	ldr	r3, [pc, #80]	@ (8004734 <TIM7_IRQHandler+0x130>)
 80046e4:	801a      	strh	r2, [r3, #0]
 80046e6:	4b13      	ldr	r3, [pc, #76]	@ (8004734 <TIM7_IRQHandler+0x130>)
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046ee:	d305      	bcc.n	80046fc <TIM7_IRQHandler+0xf8>
			tim7_1000ms_count = 0;
 80046f0:	4b10      	ldr	r3, [pc, #64]	@ (8004734 <TIM7_IRQHandler+0x130>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag = 1;
 80046f6:	4b10      	ldr	r3, [pc, #64]	@ (8004738 <TIM7_IRQHandler+0x134>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80046fc:	bf00      	nop
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40001400 	.word	0x40001400
 8004704:	24000616 	.word	0x24000616
 8004708:	240005be 	.word	0x240005be
 800470c:	24000618 	.word	0x24000618
 8004710:	240005c0 	.word	0x240005c0
 8004714:	2400061a 	.word	0x2400061a
 8004718:	240005c2 	.word	0x240005c2
 800471c:	2400061c 	.word	0x2400061c
 8004720:	240005c4 	.word	0x240005c4
 8004724:	2400061e 	.word	0x2400061e
 8004728:	240005c6 	.word	0x240005c6
 800472c:	24000620 	.word	0x24000620
 8004730:	240005c8 	.word	0x240005c8
 8004734:	24000622 	.word	0x24000622
 8004738:	240005ca 	.word	0x240005ca

0800473c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

	if (LL_USART_IsActiveFlag_RXNE(USART6)) {
 8004742:	482b      	ldr	r0, [pc, #172]	@ (80047f0 <USART6_IRQHandler+0xb4>)
 8004744:	f7ff fdfe 	bl	8004344 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d04b      	beq.n	80047e6 <USART6_IRQHandler+0xaa>
		char c = LL_USART_ReceiveData8(USART6);
 800474e:	4828      	ldr	r0, [pc, #160]	@ (80047f0 <USART6_IRQHandler+0xb4>)
 8004750:	f7ff fe32 	bl	80043b8 <LL_USART_ReceiveData8>
 8004754:	4603      	mov	r3, r0
 8004756:	71fb      	strb	r3, [r7, #7]
		last_char_time = HAL_GetTick();  // update timestamp
 8004758:	f001 f954 	bl	8005a04 <HAL_GetTick>
 800475c:	4603      	mov	r3, r0
 800475e:	4a25      	ldr	r2, [pc, #148]	@ (80047f4 <USART6_IRQHandler+0xb8>)
 8004760:	6013      	str	r3, [r2, #0]

		if (!cmd_receiving) {
 8004762:	4b25      	ldr	r3, [pc, #148]	@ (80047f8 <USART6_IRQHandler+0xbc>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f083 0301 	eor.w	r3, r3, #1
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <USART6_IRQHandler+0x4a>
			if (c == '[') {
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	2b5b      	cmp	r3, #91	@ 0x5b
 8004776:	d136      	bne.n	80047e6 <USART6_IRQHandler+0xaa>
				cmd_receiving = true;
 8004778:	4b1f      	ldr	r3, [pc, #124]	@ (80047f8 <USART6_IRQHandler+0xbc>)
 800477a:	2201      	movs	r2, #1
 800477c:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 800477e:	4b1f      	ldr	r3, [pc, #124]	@ (80047fc <USART6_IRQHandler+0xc0>)
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004784:	e02f      	b.n	80047e6 <USART6_IRQHandler+0xaa>
			if (c == ']') {
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	2b5d      	cmp	r3, #93	@ 0x5d
 800478a:	d115      	bne.n	80047b8 <USART6_IRQHandler+0x7c>
				if (cmd_index < CMD_BUFFER_SIZE) {
 800478c:	4b1b      	ldr	r3, [pc, #108]	@ (80047fc <USART6_IRQHandler+0xc0>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b3f      	cmp	r3, #63	@ 0x3f
 8004794:	d809      	bhi.n	80047aa <USART6_IRQHandler+0x6e>
					cmd_buffer[cmd_index] = '\0';  // null-terminate
 8004796:	4b19      	ldr	r3, [pc, #100]	@ (80047fc <USART6_IRQHandler+0xc0>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	4b18      	ldr	r3, [pc, #96]	@ (8004800 <USART6_IRQHandler+0xc4>)
 80047a0:	2100      	movs	r1, #0
 80047a2:	5499      	strb	r1, [r3, r2]
					process_command((char*)cmd_buffer);  // parse the command
 80047a4:	4816      	ldr	r0, [pc, #88]	@ (8004800 <USART6_IRQHandler+0xc4>)
 80047a6:	f7fc f85b 	bl	8000860 <process_command>
				cmd_receiving = false;
 80047aa:	4b13      	ldr	r3, [pc, #76]	@ (80047f8 <USART6_IRQHandler+0xbc>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 80047b0:	4b12      	ldr	r3, [pc, #72]	@ (80047fc <USART6_IRQHandler+0xc0>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
}
 80047b6:	e016      	b.n	80047e6 <USART6_IRQHandler+0xaa>
				if (cmd_index < CMD_BUFFER_SIZE - 1) {
 80047b8:	4b10      	ldr	r3, [pc, #64]	@ (80047fc <USART6_IRQHandler+0xc0>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b3e      	cmp	r3, #62	@ 0x3e
 80047c0:	d80b      	bhi.n	80047da <USART6_IRQHandler+0x9e>
					cmd_buffer[cmd_index++] = c;
 80047c2:	4b0e      	ldr	r3, [pc, #56]	@ (80047fc <USART6_IRQHandler+0xc0>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	b2d1      	uxtb	r1, r2
 80047cc:	4a0b      	ldr	r2, [pc, #44]	@ (80047fc <USART6_IRQHandler+0xc0>)
 80047ce:	7011      	strb	r1, [r2, #0]
 80047d0:	4619      	mov	r1, r3
 80047d2:	4a0b      	ldr	r2, [pc, #44]	@ (8004800 <USART6_IRQHandler+0xc4>)
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	5453      	strb	r3, [r2, r1]
}
 80047d8:	e005      	b.n	80047e6 <USART6_IRQHandler+0xaa>
					cmd_receiving = false;
 80047da:	4b07      	ldr	r3, [pc, #28]	@ (80047f8 <USART6_IRQHandler+0xbc>)
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]
					cmd_index = 0;
 80047e0:	4b06      	ldr	r3, [pc, #24]	@ (80047fc <USART6_IRQHandler+0xc0>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
}
 80047e6:	bf00      	nop
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40011400 	.word	0x40011400
 80047f4:	24000610 	.word	0x24000610
 80047f8:	2400060d 	.word	0x2400060d
 80047fc:	2400060c 	.word	0x2400060c
 8004800:	240005cc 	.word	0x240005cc

08004804 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  return 1;
 8004808:	2301      	movs	r3, #1
}
 800480a:	4618      	mov	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <_kill>:

int _kill(int pid, int sig)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800481e:	f00d fd75 	bl	801230c <__errno>
 8004822:	4603      	mov	r3, r0
 8004824:	2216      	movs	r2, #22
 8004826:	601a      	str	r2, [r3, #0]
  return -1;
 8004828:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <_exit>:

void _exit (int status)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800483c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff ffe7 	bl	8004814 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004846:	bf00      	nop
 8004848:	e7fd      	b.n	8004846 <_exit+0x12>

0800484a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b086      	sub	sp, #24
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	e00a      	b.n	8004872 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800485c:	f3af 8000 	nop.w
 8004860:	4601      	mov	r1, r0
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	60ba      	str	r2, [r7, #8]
 8004868:	b2ca      	uxtb	r2, r1
 800486a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	3301      	adds	r3, #1
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	429a      	cmp	r2, r3
 8004878:	dbf0      	blt.n	800485c <_read+0x12>
  }

  return len;
 800487a:	687b      	ldr	r3, [r7, #4]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800488c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80048ac:	605a      	str	r2, [r3, #4]
  return 0;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <_isatty>:

int _isatty(int file)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80048c4:	2301      	movs	r3, #1
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048f4:	4a14      	ldr	r2, [pc, #80]	@ (8004948 <_sbrk+0x5c>)
 80048f6:	4b15      	ldr	r3, [pc, #84]	@ (800494c <_sbrk+0x60>)
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004900:	4b13      	ldr	r3, [pc, #76]	@ (8004950 <_sbrk+0x64>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004908:	4b11      	ldr	r3, [pc, #68]	@ (8004950 <_sbrk+0x64>)
 800490a:	4a12      	ldr	r2, [pc, #72]	@ (8004954 <_sbrk+0x68>)
 800490c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800490e:	4b10      	ldr	r3, [pc, #64]	@ (8004950 <_sbrk+0x64>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4413      	add	r3, r2
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	429a      	cmp	r2, r3
 800491a:	d207      	bcs.n	800492c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800491c:	f00d fcf6 	bl	801230c <__errno>
 8004920:	4603      	mov	r3, r0
 8004922:	220c      	movs	r2, #12
 8004924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004926:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800492a:	e009      	b.n	8004940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800492c:	4b08      	ldr	r3, [pc, #32]	@ (8004950 <_sbrk+0x64>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004932:	4b07      	ldr	r3, [pc, #28]	@ (8004950 <_sbrk+0x64>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4413      	add	r3, r2
 800493a:	4a05      	ldr	r2, [pc, #20]	@ (8004950 <_sbrk+0x64>)
 800493c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800493e:	68fb      	ldr	r3, [r7, #12]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	24050000 	.word	0x24050000
 800494c:	00000400 	.word	0x00000400
 8004950:	24000624 	.word	0x24000624
 8004954:	24000888 	.word	0x24000888

08004958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800495c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a58 <SystemInit+0x100>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004962:	4a3d      	ldr	r2, [pc, #244]	@ (8004a58 <SystemInit+0x100>)
 8004964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800496c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a5c <SystemInit+0x104>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	2b06      	cmp	r3, #6
 8004976:	d807      	bhi.n	8004988 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004978:	4b38      	ldr	r3, [pc, #224]	@ (8004a5c <SystemInit+0x104>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f023 030f 	bic.w	r3, r3, #15
 8004980:	4a36      	ldr	r2, [pc, #216]	@ (8004a5c <SystemInit+0x104>)
 8004982:	f043 0307 	orr.w	r3, r3, #7
 8004986:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004988:	4b35      	ldr	r3, [pc, #212]	@ (8004a60 <SystemInit+0x108>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a34      	ldr	r2, [pc, #208]	@ (8004a60 <SystemInit+0x108>)
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004994:	4b32      	ldr	r3, [pc, #200]	@ (8004a60 <SystemInit+0x108>)
 8004996:	2200      	movs	r2, #0
 8004998:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800499a:	4b31      	ldr	r3, [pc, #196]	@ (8004a60 <SystemInit+0x108>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4930      	ldr	r1, [pc, #192]	@ (8004a60 <SystemInit+0x108>)
 80049a0:	4b30      	ldr	r3, [pc, #192]	@ (8004a64 <SystemInit+0x10c>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80049a6:	4b2d      	ldr	r3, [pc, #180]	@ (8004a5c <SystemInit+0x104>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80049b2:	4b2a      	ldr	r3, [pc, #168]	@ (8004a5c <SystemInit+0x104>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f023 030f 	bic.w	r3, r3, #15
 80049ba:	4a28      	ldr	r2, [pc, #160]	@ (8004a5c <SystemInit+0x104>)
 80049bc:	f043 0307 	orr.w	r3, r3, #7
 80049c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80049c2:	4b27      	ldr	r3, [pc, #156]	@ (8004a60 <SystemInit+0x108>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80049c8:	4b25      	ldr	r3, [pc, #148]	@ (8004a60 <SystemInit+0x108>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80049ce:	4b24      	ldr	r3, [pc, #144]	@ (8004a60 <SystemInit+0x108>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80049d4:	4b22      	ldr	r3, [pc, #136]	@ (8004a60 <SystemInit+0x108>)
 80049d6:	4a24      	ldr	r2, [pc, #144]	@ (8004a68 <SystemInit+0x110>)
 80049d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80049da:	4b21      	ldr	r3, [pc, #132]	@ (8004a60 <SystemInit+0x108>)
 80049dc:	4a23      	ldr	r2, [pc, #140]	@ (8004a6c <SystemInit+0x114>)
 80049de:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80049e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004a60 <SystemInit+0x108>)
 80049e2:	4a23      	ldr	r2, [pc, #140]	@ (8004a70 <SystemInit+0x118>)
 80049e4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80049e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a60 <SystemInit+0x108>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80049ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004a60 <SystemInit+0x108>)
 80049ee:	4a20      	ldr	r2, [pc, #128]	@ (8004a70 <SystemInit+0x118>)
 80049f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80049f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a60 <SystemInit+0x108>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80049f8:	4b19      	ldr	r3, [pc, #100]	@ (8004a60 <SystemInit+0x108>)
 80049fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004a70 <SystemInit+0x118>)
 80049fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80049fe:	4b18      	ldr	r3, [pc, #96]	@ (8004a60 <SystemInit+0x108>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004a04:	4b16      	ldr	r3, [pc, #88]	@ (8004a60 <SystemInit+0x108>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a15      	ldr	r2, [pc, #84]	@ (8004a60 <SystemInit+0x108>)
 8004a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004a10:	4b13      	ldr	r3, [pc, #76]	@ (8004a60 <SystemInit+0x108>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8004a16:	4b12      	ldr	r3, [pc, #72]	@ (8004a60 <SystemInit+0x108>)
 8004a18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004a1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d113      	bne.n	8004a4c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8004a24:	4b0e      	ldr	r3, [pc, #56]	@ (8004a60 <SystemInit+0x108>)
 8004a26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8004a60 <SystemInit+0x108>)
 8004a2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a30:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004a34:	4b0f      	ldr	r3, [pc, #60]	@ (8004a74 <SystemInit+0x11c>)
 8004a36:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004a3a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8004a3c:	4b08      	ldr	r3, [pc, #32]	@ (8004a60 <SystemInit+0x108>)
 8004a3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004a42:	4a07      	ldr	r2, [pc, #28]	@ (8004a60 <SystemInit+0x108>)
 8004a44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a48:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004a4c:	bf00      	nop
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	e000ed00 	.word	0xe000ed00
 8004a5c:	52002000 	.word	0x52002000
 8004a60:	58024400 	.word	0x58024400
 8004a64:	eaf6ed7f 	.word	0xeaf6ed7f
 8004a68:	02020200 	.word	0x02020200
 8004a6c:	01ff0000 	.word	0x01ff0000
 8004a70:	01010280 	.word	0x01010280
 8004a74:	52004000 	.word	0x52004000

08004a78 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8004a7c:	4b09      	ldr	r3, [pc, #36]	@ (8004aa4 <ExitRun0Mode+0x2c>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a08      	ldr	r2, [pc, #32]	@ (8004aa4 <ExitRun0Mode+0x2c>)
 8004a82:	f043 0302 	orr.w	r3, r3, #2
 8004a86:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8004a88:	bf00      	nop
 8004a8a:	4b06      	ldr	r3, [pc, #24]	@ (8004aa4 <ExitRun0Mode+0x2c>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f9      	beq.n	8004a8a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	58024800 	.word	0x58024800

08004aa8 <__NVIC_GetPriorityGrouping>:
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aac:	4b04      	ldr	r3, [pc, #16]	@ (8004ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	0a1b      	lsrs	r3, r3, #8
 8004ab2:	f003 0307 	and.w	r3, r3, #7
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	e000ed00 	.word	0xe000ed00

08004ac4 <__NVIC_EnableIRQ>:
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	db0b      	blt.n	8004aee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	f003 021f 	and.w	r2, r3, #31
 8004adc:	4907      	ldr	r1, [pc, #28]	@ (8004afc <__NVIC_EnableIRQ+0x38>)
 8004ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8004aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	e000e100 	.word	0xe000e100

08004b00 <__NVIC_SetPriority>:
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	6039      	str	r1, [r7, #0]
 8004b0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	db0a      	blt.n	8004b2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	490c      	ldr	r1, [pc, #48]	@ (8004b4c <__NVIC_SetPriority+0x4c>)
 8004b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b1e:	0112      	lsls	r2, r2, #4
 8004b20:	b2d2      	uxtb	r2, r2
 8004b22:	440b      	add	r3, r1
 8004b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004b28:	e00a      	b.n	8004b40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	4908      	ldr	r1, [pc, #32]	@ (8004b50 <__NVIC_SetPriority+0x50>)
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	3b04      	subs	r3, #4
 8004b38:	0112      	lsls	r2, r2, #4
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	761a      	strb	r2, [r3, #24]
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	e000e100 	.word	0xe000e100
 8004b50:	e000ed00 	.word	0xe000ed00

08004b54 <NVIC_EncodePriority>:
{
 8004b54:	b480      	push	{r7}
 8004b56:	b089      	sub	sp, #36	@ 0x24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f1c3 0307 	rsb	r3, r3, #7
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	bf28      	it	cs
 8004b72:	2304      	movcs	r3, #4
 8004b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	2b06      	cmp	r3, #6
 8004b7c:	d902      	bls.n	8004b84 <NVIC_EncodePriority+0x30>
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	3b03      	subs	r3, #3
 8004b82:	e000      	b.n	8004b86 <NVIC_EncodePriority+0x32>
 8004b84:	2300      	movs	r3, #0
 8004b86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	43da      	mvns	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	401a      	ands	r2, r3
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba6:	43d9      	mvns	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bac:	4313      	orrs	r3, r2
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3724      	adds	r7, #36	@ 0x24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <LL_TIM_EnableARRPreload>:
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	601a      	str	r2, [r3, #0]
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <LL_TIM_OC_EnableFast>:
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d028      	beq.n	8004c3e <LL_TIM_OC_EnableFast+0x62>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d023      	beq.n	8004c3a <LL_TIM_OC_EnableFast+0x5e>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d01e      	beq.n	8004c36 <LL_TIM_OC_EnableFast+0x5a>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2b40      	cmp	r3, #64	@ 0x40
 8004bfc:	d019      	beq.n	8004c32 <LL_TIM_OC_EnableFast+0x56>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c04:	d013      	beq.n	8004c2e <LL_TIM_OC_EnableFast+0x52>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c0c:	d00d      	beq.n	8004c2a <LL_TIM_OC_EnableFast+0x4e>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c14:	d007      	beq.n	8004c26 <LL_TIM_OC_EnableFast+0x4a>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c1c:	d101      	bne.n	8004c22 <LL_TIM_OC_EnableFast+0x46>
 8004c1e:	2307      	movs	r3, #7
 8004c20:	e00e      	b.n	8004c40 <LL_TIM_OC_EnableFast+0x64>
 8004c22:	2308      	movs	r3, #8
 8004c24:	e00c      	b.n	8004c40 <LL_TIM_OC_EnableFast+0x64>
 8004c26:	2306      	movs	r3, #6
 8004c28:	e00a      	b.n	8004c40 <LL_TIM_OC_EnableFast+0x64>
 8004c2a:	2305      	movs	r3, #5
 8004c2c:	e008      	b.n	8004c40 <LL_TIM_OC_EnableFast+0x64>
 8004c2e:	2304      	movs	r3, #4
 8004c30:	e006      	b.n	8004c40 <LL_TIM_OC_EnableFast+0x64>
 8004c32:	2303      	movs	r3, #3
 8004c34:	e004      	b.n	8004c40 <LL_TIM_OC_EnableFast+0x64>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e002      	b.n	8004c40 <LL_TIM_OC_EnableFast+0x64>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <LL_TIM_OC_EnableFast+0x64>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3318      	adds	r3, #24
 8004c46:	4619      	mov	r1, r3
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c74 <LL_TIM_OC_EnableFast+0x98>)
 8004c4c:	5cd3      	ldrb	r3, [r2, r3]
 8004c4e:	440b      	add	r3, r1
 8004c50:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	4907      	ldr	r1, [pc, #28]	@ (8004c78 <LL_TIM_OC_EnableFast+0x9c>)
 8004c5a:	5ccb      	ldrb	r3, [r1, r3]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	2304      	movs	r3, #4
 8004c60:	408b      	lsls	r3, r1
 8004c62:	431a      	orrs	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	601a      	str	r2, [r3, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	08017270 	.word	0x08017270
 8004c78:	0801727c 	.word	0x0801727c

08004c7c <LL_TIM_OC_EnablePreload>:
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d028      	beq.n	8004cde <LL_TIM_OC_EnablePreload+0x62>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d023      	beq.n	8004cda <LL_TIM_OC_EnablePreload+0x5e>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d01e      	beq.n	8004cd6 <LL_TIM_OC_EnablePreload+0x5a>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b40      	cmp	r3, #64	@ 0x40
 8004c9c:	d019      	beq.n	8004cd2 <LL_TIM_OC_EnablePreload+0x56>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ca4:	d013      	beq.n	8004cce <LL_TIM_OC_EnablePreload+0x52>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cac:	d00d      	beq.n	8004cca <LL_TIM_OC_EnablePreload+0x4e>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb4:	d007      	beq.n	8004cc6 <LL_TIM_OC_EnablePreload+0x4a>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cbc:	d101      	bne.n	8004cc2 <LL_TIM_OC_EnablePreload+0x46>
 8004cbe:	2307      	movs	r3, #7
 8004cc0:	e00e      	b.n	8004ce0 <LL_TIM_OC_EnablePreload+0x64>
 8004cc2:	2308      	movs	r3, #8
 8004cc4:	e00c      	b.n	8004ce0 <LL_TIM_OC_EnablePreload+0x64>
 8004cc6:	2306      	movs	r3, #6
 8004cc8:	e00a      	b.n	8004ce0 <LL_TIM_OC_EnablePreload+0x64>
 8004cca:	2305      	movs	r3, #5
 8004ccc:	e008      	b.n	8004ce0 <LL_TIM_OC_EnablePreload+0x64>
 8004cce:	2304      	movs	r3, #4
 8004cd0:	e006      	b.n	8004ce0 <LL_TIM_OC_EnablePreload+0x64>
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e004      	b.n	8004ce0 <LL_TIM_OC_EnablePreload+0x64>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e002      	b.n	8004ce0 <LL_TIM_OC_EnablePreload+0x64>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <LL_TIM_OC_EnablePreload+0x64>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3318      	adds	r3, #24
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	4a0a      	ldr	r2, [pc, #40]	@ (8004d14 <LL_TIM_OC_EnablePreload+0x98>)
 8004cec:	5cd3      	ldrb	r3, [r2, r3]
 8004cee:	440b      	add	r3, r1
 8004cf0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	4907      	ldr	r1, [pc, #28]	@ (8004d18 <LL_TIM_OC_EnablePreload+0x9c>)
 8004cfa:	5ccb      	ldrb	r3, [r1, r3]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	2308      	movs	r3, #8
 8004d00:	408b      	lsls	r3, r1
 8004d02:	431a      	orrs	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	601a      	str	r2, [r3, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	08017270 	.word	0x08017270
 8004d18:	0801727c 	.word	0x0801727c

08004d1c <LL_TIM_SetClockSource>:
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	4b06      	ldr	r3, [pc, #24]	@ (8004d44 <LL_TIM_SetClockSource+0x28>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	609a      	str	r2, [r3, #8]
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	fffebff8 	.word	0xfffebff8

08004d48 <LL_TIM_SetTriggerOutput>:
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	605a      	str	r2, [r3, #4]
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <LL_TIM_DisableMasterSlaveMode>:
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	609a      	str	r2, [r3, #8]
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
	...

08004d90 <LL_AHB4_GRP1_EnableClock>:
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8004d98:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <LL_AHB4_GRP1_EnableClock+0x34>)
 8004d9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004d9e:	4909      	ldr	r1, [pc, #36]	@ (8004dc4 <LL_AHB4_GRP1_EnableClock+0x34>)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8004da8:	4b06      	ldr	r3, [pc, #24]	@ (8004dc4 <LL_AHB4_GRP1_EnableClock+0x34>)
 8004daa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4013      	ands	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004db4:	68fb      	ldr	r3, [r7, #12]
}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	58024400 	.word	0x58024400

08004dc8 <LL_APB1_GRP1_EnableClock>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004dfc <LL_APB1_GRP1_EnableClock+0x34>)
 8004dd2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8004dd6:	4909      	ldr	r1, [pc, #36]	@ (8004dfc <LL_APB1_GRP1_EnableClock+0x34>)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8004de0:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <LL_APB1_GRP1_EnableClock+0x34>)
 8004de2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4013      	ands	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004dec:	68fb      	ldr	r3, [r7, #12]
}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	58024400 	.word	0x58024400

08004e00 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
DMA_HandleTypeDef hdma_tim3_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b094      	sub	sp, #80	@ 0x50
 8004e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004e06:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	605a      	str	r2, [r3, #4]
 8004e10:	609a      	str	r2, [r3, #8]
 8004e12:	60da      	str	r2, [r3, #12]
 8004e14:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004e16:	f107 031c 	add.w	r3, r7, #28
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f00d fa02 	bl	8012228 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e24:	1d3b      	adds	r3, r7, #4
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	605a      	str	r2, [r3, #4]
 8004e2c:	609a      	str	r2, [r3, #8]
 8004e2e:	60da      	str	r2, [r3, #12]
 8004e30:	611a      	str	r2, [r3, #16]
 8004e32:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8004e34:	2001      	movs	r0, #1
 8004e36:	f7ff ffc7 	bl	8004dc8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 546;
 8004e3a:	f240 2322 	movw	r3, #546	@ 0x222
 8004e3e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004e40:	2300      	movs	r3, #0
 8004e42:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 249;
 8004e44:	23f9      	movs	r3, #249	@ 0xf9
 8004e46:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8004e4c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004e50:	4619      	mov	r1, r3
 8004e52:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004e56:	f00b fc15 	bl	8010684 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8004e5a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004e5e:	f7ff feac 	bl	8004bba <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004e62:	2100      	movs	r1, #0
 8004e64:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004e68:	f7ff ff58 	bl	8004d1c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004e72:	f7ff ff03 	bl	8004c7c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004e76:	2360      	movs	r3, #96	@ 0x60
 8004e78:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 125;
 8004e82:	237d      	movs	r3, #125	@ 0x7d
 8004e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004e86:	2300      	movs	r3, #0
 8004e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004e8a:	f107 031c 	add.w	r3, r7, #28
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2101      	movs	r1, #1
 8004e92:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004e96:	f00b fc95 	bl	80107c4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004ea0:	f7ff fe9c 	bl	8004bdc <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004eaa:	f7ff ff4d 	bl	8004d48 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8004eae:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004eb2:	f7ff ff5c 	bl	8004d6e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	f7ff ff6a 	bl	8004d90 <LL_AHB4_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8004ebc:	2320      	movs	r3, #32
 8004ebe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ed4:	1d3b      	adds	r3, r7, #4
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4803      	ldr	r0, [pc, #12]	@ (8004ee8 <MX_TIM2_Init+0xe8>)
 8004eda:	f00a fb73 	bl	800f5c4 <LL_GPIO_Init>

}
 8004ede:	bf00      	nop
 8004ee0:	3750      	adds	r7, #80	@ 0x50
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	58020000 	.word	0x58020000

08004eec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08e      	sub	sp, #56	@ 0x38
 8004ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ef2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	605a      	str	r2, [r3, #4]
 8004efc:	609a      	str	r2, [r3, #8]
 8004efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f00:	f107 031c 	add.w	r3, r7, #28
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	605a      	str	r2, [r3, #4]
 8004f0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f0c:	463b      	mov	r3, r7
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	605a      	str	r2, [r3, #4]
 8004f14:	609a      	str	r2, [r3, #8]
 8004f16:	60da      	str	r2, [r3, #12]
 8004f18:	611a      	str	r2, [r3, #16]
 8004f1a:	615a      	str	r2, [r3, #20]
 8004f1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd4 <MX_TIM3_Init+0xe8>)
 8004f20:	4a2d      	ldr	r2, [pc, #180]	@ (8004fd8 <MX_TIM3_Init+0xec>)
 8004f22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004f24:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd4 <MX_TIM3_Init+0xe8>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd4 <MX_TIM3_Init+0xe8>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 343;
 8004f30:	4b28      	ldr	r3, [pc, #160]	@ (8004fd4 <MX_TIM3_Init+0xe8>)
 8004f32:	f240 1257 	movw	r2, #343	@ 0x157
 8004f36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f38:	4b26      	ldr	r3, [pc, #152]	@ (8004fd4 <MX_TIM3_Init+0xe8>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f3e:	4b25      	ldr	r3, [pc, #148]	@ (8004fd4 <MX_TIM3_Init+0xe8>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004f44:	4823      	ldr	r0, [pc, #140]	@ (8004fd4 <MX_TIM3_Init+0xe8>)
 8004f46:	f008 fce9 	bl	800d91c <HAL_TIM_Base_Init>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004f50:	f7fe fbee 	bl	8003730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f58:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004f5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f5e:	4619      	mov	r1, r3
 8004f60:	481c      	ldr	r0, [pc, #112]	@ (8004fd4 <MX_TIM3_Init+0xe8>)
 8004f62:	f009 fb95 	bl	800e690 <HAL_TIM_ConfigClockSource>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004f6c:	f7fe fbe0 	bl	8003730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004f70:	4818      	ldr	r0, [pc, #96]	@ (8004fd4 <MX_TIM3_Init+0xe8>)
 8004f72:	f008 fdd0 	bl	800db16 <HAL_TIM_PWM_Init>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004f7c:	f7fe fbd8 	bl	8003730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f84:	2300      	movs	r3, #0
 8004f86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f88:	f107 031c 	add.w	r3, r7, #28
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4811      	ldr	r0, [pc, #68]	@ (8004fd4 <MX_TIM3_Init+0xe8>)
 8004f90:	f00a f9a2 	bl	800f2d8 <HAL_TIMEx_MasterConfigSynchronization>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004f9a:	f7fe fbc9 	bl	8003730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f9e:	2360      	movs	r3, #96	@ 0x60
 8004fa0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004fae:	463b      	mov	r3, r7
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4807      	ldr	r0, [pc, #28]	@ (8004fd4 <MX_TIM3_Init+0xe8>)
 8004fb6:	f009 fa57 	bl	800e468 <HAL_TIM_PWM_ConfigChannel>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004fc0:	f7fe fbb6 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004fc4:	4803      	ldr	r0, [pc, #12]	@ (8004fd4 <MX_TIM3_Init+0xe8>)
 8004fc6:	f000 f947 	bl	8005258 <HAL_TIM_MspPostInit>

}
 8004fca:	bf00      	nop
 8004fcc:	3738      	adds	r7, #56	@ 0x38
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	24000628 	.word	0x24000628
 8004fd8:	40000400 	.word	0x40000400

08004fdc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08e      	sub	sp, #56	@ 0x38
 8004fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fe2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	605a      	str	r2, [r3, #4]
 8004fec:	609a      	str	r2, [r3, #8]
 8004fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ff0:	f107 031c 	add.w	r3, r7, #28
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	605a      	str	r2, [r3, #4]
 8004ffa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ffc:	463b      	mov	r3, r7
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	605a      	str	r2, [r3, #4]
 8005004:	609a      	str	r2, [r3, #8]
 8005006:	60da      	str	r2, [r3, #12]
 8005008:	611a      	str	r2, [r3, #16]
 800500a:	615a      	str	r2, [r3, #20]
 800500c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800500e:	4b3e      	ldr	r3, [pc, #248]	@ (8005108 <MX_TIM5_Init+0x12c>)
 8005010:	4a3e      	ldr	r2, [pc, #248]	@ (800510c <MX_TIM5_Init+0x130>)
 8005012:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 275-1;
 8005014:	4b3c      	ldr	r3, [pc, #240]	@ (8005108 <MX_TIM5_Init+0x12c>)
 8005016:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800501a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800501c:	4b3a      	ldr	r3, [pc, #232]	@ (8005108 <MX_TIM5_Init+0x12c>)
 800501e:	2200      	movs	r2, #0
 8005020:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2500-1;
 8005022:	4b39      	ldr	r3, [pc, #228]	@ (8005108 <MX_TIM5_Init+0x12c>)
 8005024:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8005028:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800502a:	4b37      	ldr	r3, [pc, #220]	@ (8005108 <MX_TIM5_Init+0x12c>)
 800502c:	2200      	movs	r2, #0
 800502e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005030:	4b35      	ldr	r3, [pc, #212]	@ (8005108 <MX_TIM5_Init+0x12c>)
 8005032:	2280      	movs	r2, #128	@ 0x80
 8005034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005036:	4834      	ldr	r0, [pc, #208]	@ (8005108 <MX_TIM5_Init+0x12c>)
 8005038:	f008 fc70 	bl	800d91c <HAL_TIM_Base_Init>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 8005042:	f7fe fb75 	bl	8003730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005046:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800504a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800504c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005050:	4619      	mov	r1, r3
 8005052:	482d      	ldr	r0, [pc, #180]	@ (8005108 <MX_TIM5_Init+0x12c>)
 8005054:	f009 fb1c 	bl	800e690 <HAL_TIM_ConfigClockSource>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 800505e:	f7fe fb67 	bl	8003730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005062:	4829      	ldr	r0, [pc, #164]	@ (8005108 <MX_TIM5_Init+0x12c>)
 8005064:	f008 fd57 	bl	800db16 <HAL_TIM_PWM_Init>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 800506e:	f7fe fb5f 	bl	8003730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005076:	2300      	movs	r3, #0
 8005078:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800507a:	f107 031c 	add.w	r3, r7, #28
 800507e:	4619      	mov	r1, r3
 8005080:	4821      	ldr	r0, [pc, #132]	@ (8005108 <MX_TIM5_Init+0x12c>)
 8005082:	f00a f929 	bl	800f2d8 <HAL_TIMEx_MasterConfigSynchronization>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 800508c:	f7fe fb50 	bl	8003730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005090:	2360      	movs	r3, #96	@ 0x60
 8005092:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8005094:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005098:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80050a2:	463b      	mov	r3, r7
 80050a4:	2200      	movs	r2, #0
 80050a6:	4619      	mov	r1, r3
 80050a8:	4817      	ldr	r0, [pc, #92]	@ (8005108 <MX_TIM5_Init+0x12c>)
 80050aa:	f009 f9dd 	bl	800e468 <HAL_TIM_PWM_ConfigChannel>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 80050b4:	f7fe fb3c 	bl	8003730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80050b8:	463b      	mov	r3, r7
 80050ba:	2204      	movs	r2, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4812      	ldr	r0, [pc, #72]	@ (8005108 <MX_TIM5_Init+0x12c>)
 80050c0:	f009 f9d2 	bl	800e468 <HAL_TIM_PWM_ConfigChannel>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 80050ca:	f7fe fb31 	bl	8003730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80050ce:	463b      	mov	r3, r7
 80050d0:	2208      	movs	r2, #8
 80050d2:	4619      	mov	r1, r3
 80050d4:	480c      	ldr	r0, [pc, #48]	@ (8005108 <MX_TIM5_Init+0x12c>)
 80050d6:	f009 f9c7 	bl	800e468 <HAL_TIM_PWM_ConfigChannel>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 80050e0:	f7fe fb26 	bl	8003730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80050e4:	463b      	mov	r3, r7
 80050e6:	220c      	movs	r2, #12
 80050e8:	4619      	mov	r1, r3
 80050ea:	4807      	ldr	r0, [pc, #28]	@ (8005108 <MX_TIM5_Init+0x12c>)
 80050ec:	f009 f9bc 	bl	800e468 <HAL_TIM_PWM_ConfigChannel>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <MX_TIM5_Init+0x11e>
  {
    Error_Handler();
 80050f6:	f7fe fb1b 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80050fa:	4803      	ldr	r0, [pc, #12]	@ (8005108 <MX_TIM5_Init+0x12c>)
 80050fc:	f000 f8ac 	bl	8005258 <HAL_TIM_MspPostInit>

}
 8005100:	bf00      	nop
 8005102:	3738      	adds	r7, #56	@ 0x38
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	24000674 	.word	0x24000674
 800510c:	40000c00 	.word	0x40000c00

08005110 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005116:	1d3b      	adds	r3, r7, #4
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	605a      	str	r2, [r3, #4]
 800511e:	609a      	str	r2, [r3, #8]
 8005120:	60da      	str	r2, [r3, #12]
 8005122:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8005124:	2020      	movs	r0, #32
 8005126:	f7ff fe4f 	bl	8004dc8 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800512a:	f7ff fcbd 	bl	8004aa8 <__NVIC_GetPriorityGrouping>
 800512e:	4603      	mov	r3, r0
 8005130:	2200      	movs	r2, #0
 8005132:	2100      	movs	r1, #0
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff fd0d 	bl	8004b54 <NVIC_EncodePriority>
 800513a:	4603      	mov	r3, r0
 800513c:	4619      	mov	r1, r3
 800513e:	2037      	movs	r0, #55	@ 0x37
 8005140:	f7ff fcde 	bl	8004b00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8005144:	2037      	movs	r0, #55	@ 0x37
 8005146:	f7ff fcbd 	bl	8004ac4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 800514a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800514e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005150:	2300      	movs	r3, #0
 8005152:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 274;
 8005154:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8005158:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800515a:	1d3b      	adds	r3, r7, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4808      	ldr	r0, [pc, #32]	@ (8005180 <MX_TIM7_Init+0x70>)
 8005160:	f00b fa90 	bl	8010684 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 8005164:	4806      	ldr	r0, [pc, #24]	@ (8005180 <MX_TIM7_Init+0x70>)
 8005166:	f7ff fd28 	bl	8004bba <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 800516a:	2100      	movs	r1, #0
 800516c:	4804      	ldr	r0, [pc, #16]	@ (8005180 <MX_TIM7_Init+0x70>)
 800516e:	f7ff fdeb 	bl	8004d48 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8005172:	4803      	ldr	r0, [pc, #12]	@ (8005180 <MX_TIM7_Init+0x70>)
 8005174:	f7ff fdfb 	bl	8004d6e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005178:	bf00      	nop
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40001400 	.word	0x40001400

08005184 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a2c      	ldr	r2, [pc, #176]	@ (8005244 <HAL_TIM_Base_MspInit+0xc0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d13e      	bne.n	8005214 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005196:	4b2c      	ldr	r3, [pc, #176]	@ (8005248 <HAL_TIM_Base_MspInit+0xc4>)
 8005198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800519c:	4a2a      	ldr	r2, [pc, #168]	@ (8005248 <HAL_TIM_Base_MspInit+0xc4>)
 800519e:	f043 0302 	orr.w	r3, r3, #2
 80051a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80051a6:	4b28      	ldr	r3, [pc, #160]	@ (8005248 <HAL_TIM_Base_MspInit+0xc4>)
 80051a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream2;
 80051b4:	4b25      	ldr	r3, [pc, #148]	@ (800524c <HAL_TIM_Base_MspInit+0xc8>)
 80051b6:	4a26      	ldr	r2, [pc, #152]	@ (8005250 <HAL_TIM_Base_MspInit+0xcc>)
 80051b8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80051ba:	4b24      	ldr	r3, [pc, #144]	@ (800524c <HAL_TIM_Base_MspInit+0xc8>)
 80051bc:	2218      	movs	r2, #24
 80051be:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051c0:	4b22      	ldr	r3, [pc, #136]	@ (800524c <HAL_TIM_Base_MspInit+0xc8>)
 80051c2:	2240      	movs	r2, #64	@ 0x40
 80051c4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80051c6:	4b21      	ldr	r3, [pc, #132]	@ (800524c <HAL_TIM_Base_MspInit+0xc8>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80051cc:	4b1f      	ldr	r3, [pc, #124]	@ (800524c <HAL_TIM_Base_MspInit+0xc8>)
 80051ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80051d2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80051d4:	4b1d      	ldr	r3, [pc, #116]	@ (800524c <HAL_TIM_Base_MspInit+0xc8>)
 80051d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80051da:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80051dc:	4b1b      	ldr	r3, [pc, #108]	@ (800524c <HAL_TIM_Base_MspInit+0xc8>)
 80051de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80051e2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80051e4:	4b19      	ldr	r3, [pc, #100]	@ (800524c <HAL_TIM_Base_MspInit+0xc8>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80051ea:	4b18      	ldr	r3, [pc, #96]	@ (800524c <HAL_TIM_Base_MspInit+0xc8>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051f0:	4b16      	ldr	r3, [pc, #88]	@ (800524c <HAL_TIM_Base_MspInit+0xc8>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80051f6:	4815      	ldr	r0, [pc, #84]	@ (800524c <HAL_TIM_Base_MspInit+0xc8>)
 80051f8:	f000 fdbc 	bl	8005d74 <HAL_DMA_Init>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8005202:	f7fe fa95 	bl	8003730 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a10      	ldr	r2, [pc, #64]	@ (800524c <HAL_TIM_Base_MspInit+0xc8>)
 800520a:	629a      	str	r2, [r3, #40]	@ 0x28
 800520c:	4a0f      	ldr	r2, [pc, #60]	@ (800524c <HAL_TIM_Base_MspInit+0xc8>)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005212:	e013      	b.n	800523c <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM5)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a0e      	ldr	r2, [pc, #56]	@ (8005254 <HAL_TIM_Base_MspInit+0xd0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d10e      	bne.n	800523c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800521e:	4b0a      	ldr	r3, [pc, #40]	@ (8005248 <HAL_TIM_Base_MspInit+0xc4>)
 8005220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005224:	4a08      	ldr	r2, [pc, #32]	@ (8005248 <HAL_TIM_Base_MspInit+0xc4>)
 8005226:	f043 0308 	orr.w	r3, r3, #8
 800522a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800522e:	4b06      	ldr	r3, [pc, #24]	@ (8005248 <HAL_TIM_Base_MspInit+0xc4>)
 8005230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	68bb      	ldr	r3, [r7, #8]
}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40000400 	.word	0x40000400
 8005248:	58024400 	.word	0x58024400
 800524c:	240006c0 	.word	0x240006c0
 8005250:	40020040 	.word	0x40020040
 8005254:	40000c00 	.word	0x40000c00

08005258 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	@ 0x28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005260:	f107 0314 	add.w	r3, r7, #20
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	605a      	str	r2, [r3, #4]
 800526a:	609a      	str	r2, [r3, #8]
 800526c:	60da      	str	r2, [r3, #12]
 800526e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a25      	ldr	r2, [pc, #148]	@ (800530c <HAL_TIM_MspPostInit+0xb4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d11f      	bne.n	80052ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800527a:	4b25      	ldr	r3, [pc, #148]	@ (8005310 <HAL_TIM_MspPostInit+0xb8>)
 800527c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005280:	4a23      	ldr	r2, [pc, #140]	@ (8005310 <HAL_TIM_MspPostInit+0xb8>)
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800528a:	4b21      	ldr	r3, [pc, #132]	@ (8005310 <HAL_TIM_MspPostInit+0xb8>)
 800528c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005298:	2380      	movs	r3, #128	@ 0x80
 800529a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800529c:	2302      	movs	r3, #2
 800529e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052a4:	2300      	movs	r3, #0
 80052a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052a8:	2302      	movs	r3, #2
 80052aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ac:	f107 0314 	add.w	r3, r7, #20
 80052b0:	4619      	mov	r1, r3
 80052b2:	4818      	ldr	r0, [pc, #96]	@ (8005314 <HAL_TIM_MspPostInit+0xbc>)
 80052b4:	f003 f886 	bl	80083c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80052b8:	e023      	b.n	8005302 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a16      	ldr	r2, [pc, #88]	@ (8005318 <HAL_TIM_MspPostInit+0xc0>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d11e      	bne.n	8005302 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052c4:	4b12      	ldr	r3, [pc, #72]	@ (8005310 <HAL_TIM_MspPostInit+0xb8>)
 80052c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052ca:	4a11      	ldr	r2, [pc, #68]	@ (8005310 <HAL_TIM_MspPostInit+0xb8>)
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80052d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005310 <HAL_TIM_MspPostInit+0xb8>)
 80052d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80052e2:	230f      	movs	r3, #15
 80052e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e6:	2302      	movs	r3, #2
 80052e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ee:	2300      	movs	r3, #0
 80052f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80052f2:	2302      	movs	r3, #2
 80052f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052f6:	f107 0314 	add.w	r3, r7, #20
 80052fa:	4619      	mov	r1, r3
 80052fc:	4805      	ldr	r0, [pc, #20]	@ (8005314 <HAL_TIM_MspPostInit+0xbc>)
 80052fe:	f003 f861 	bl	80083c4 <HAL_GPIO_Init>
}
 8005302:	bf00      	nop
 8005304:	3728      	adds	r7, #40	@ 0x28
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40000400 	.word	0x40000400
 8005310:	58024400 	.word	0x58024400
 8005314:	58020000 	.word	0x58020000
 8005318:	40000c00 	.word	0x40000c00

0800531c <__NVIC_GetPriorityGrouping>:
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005320:	4b04      	ldr	r3, [pc, #16]	@ (8005334 <__NVIC_GetPriorityGrouping+0x18>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	0a1b      	lsrs	r3, r3, #8
 8005326:	f003 0307 	and.w	r3, r3, #7
}
 800532a:	4618      	mov	r0, r3
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	e000ed00 	.word	0xe000ed00

08005338 <__NVIC_EnableIRQ>:
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	4603      	mov	r3, r0
 8005340:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005346:	2b00      	cmp	r3, #0
 8005348:	db0b      	blt.n	8005362 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	f003 021f 	and.w	r2, r3, #31
 8005350:	4907      	ldr	r1, [pc, #28]	@ (8005370 <__NVIC_EnableIRQ+0x38>)
 8005352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	2001      	movs	r0, #1
 800535a:	fa00 f202 	lsl.w	r2, r0, r2
 800535e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	e000e100 	.word	0xe000e100

08005374 <__NVIC_SetPriority>:
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	4603      	mov	r3, r0
 800537c:	6039      	str	r1, [r7, #0]
 800537e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005380:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005384:	2b00      	cmp	r3, #0
 8005386:	db0a      	blt.n	800539e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	b2da      	uxtb	r2, r3
 800538c:	490c      	ldr	r1, [pc, #48]	@ (80053c0 <__NVIC_SetPriority+0x4c>)
 800538e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005392:	0112      	lsls	r2, r2, #4
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	440b      	add	r3, r1
 8005398:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800539c:	e00a      	b.n	80053b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	4908      	ldr	r1, [pc, #32]	@ (80053c4 <__NVIC_SetPriority+0x50>)
 80053a4:	88fb      	ldrh	r3, [r7, #6]
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	3b04      	subs	r3, #4
 80053ac:	0112      	lsls	r2, r2, #4
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	440b      	add	r3, r1
 80053b2:	761a      	strb	r2, [r3, #24]
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	e000e100 	.word	0xe000e100
 80053c4:	e000ed00 	.word	0xe000ed00

080053c8 <NVIC_EncodePriority>:
{
 80053c8:	b480      	push	{r7}
 80053ca:	b089      	sub	sp, #36	@ 0x24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f1c3 0307 	rsb	r3, r3, #7
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	bf28      	it	cs
 80053e6:	2304      	movcs	r3, #4
 80053e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	3304      	adds	r3, #4
 80053ee:	2b06      	cmp	r3, #6
 80053f0:	d902      	bls.n	80053f8 <NVIC_EncodePriority+0x30>
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	3b03      	subs	r3, #3
 80053f6:	e000      	b.n	80053fa <NVIC_EncodePriority+0x32>
 80053f8:	2300      	movs	r3, #0
 80053fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	43da      	mvns	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	401a      	ands	r2, r3
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005410:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	fa01 f303 	lsl.w	r3, r1, r3
 800541a:	43d9      	mvns	r1, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005420:	4313      	orrs	r3, r2
}
 8005422:	4618      	mov	r0, r3
 8005424:	3724      	adds	r7, #36	@ 0x24
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <LL_USART_Enable>:
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f043 0201 	orr.w	r2, r3, #1
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	601a      	str	r2, [r3, #0]
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <LL_USART_DisableFIFO>:
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <LL_USART_SetTXFIFOThreshold>:
{
 800546e:	b480      	push	{r7}
 8005470:	b089      	sub	sp, #36	@ 0x24
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3308      	adds	r3, #8
 800547c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	60bb      	str	r3, [r7, #8]
   return(result);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	075b      	lsls	r3, r3, #29
 8005490:	4313      	orrs	r3, r2
 8005492:	61fb      	str	r3, [r7, #28]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3308      	adds	r3, #8
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	61ba      	str	r2, [r7, #24]
 800549c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6979      	ldr	r1, [r7, #20]
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	613b      	str	r3, [r7, #16]
   return(result);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e4      	bne.n	8005478 <LL_USART_SetTXFIFOThreshold+0xa>
}
 80054ae:	bf00      	nop
 80054b0:	bf00      	nop
 80054b2:	3724      	adds	r7, #36	@ 0x24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <LL_USART_SetRXFIFOThreshold>:
{
 80054bc:	b480      	push	{r7}
 80054be:	b089      	sub	sp, #36	@ 0x24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3308      	adds	r3, #8
 80054ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	065b      	lsls	r3, r3, #25
 80054de:	4313      	orrs	r3, r2
 80054e0:	61fb      	str	r3, [r7, #28]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3308      	adds	r3, #8
 80054e6:	69fa      	ldr	r2, [r7, #28]
 80054e8:	61ba      	str	r2, [r7, #24]
 80054ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6979      	ldr	r1, [r7, #20]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	613b      	str	r3, [r7, #16]
   return(result);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e4      	bne.n	80054c6 <LL_USART_SetRXFIFOThreshold+0xa>
}
 80054fc:	bf00      	nop
 80054fe:	bf00      	nop
 8005500:	3724      	adds	r7, #36	@ 0x24
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <LL_USART_ConfigAsyncMode>:
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	609a      	str	r2, [r3, #8]
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <LL_USART_IsActiveFlag_TEACK>:
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005546:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800554a:	d101      	bne.n	8005550 <LL_USART_IsActiveFlag_TEACK+0x1a>
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <LL_USART_IsActiveFlag_REACK>:
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800556e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005572:	d101      	bne.n	8005578 <LL_USART_IsActiveFlag_REACK+0x1a>
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <LL_USART_IsActiveFlag_REACK+0x1c>
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
	...

08005588 <LL_AHB4_GRP1_EnableClock>:
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8005590:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <LL_AHB4_GRP1_EnableClock+0x34>)
 8005592:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005596:	4909      	ldr	r1, [pc, #36]	@ (80055bc <LL_AHB4_GRP1_EnableClock+0x34>)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80055a0:	4b06      	ldr	r3, [pc, #24]	@ (80055bc <LL_AHB4_GRP1_EnableClock+0x34>)
 80055a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4013      	ands	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055ac:	68fb      	ldr	r3, [r7, #12]
}
 80055ae:	bf00      	nop
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	58024400 	.word	0x58024400

080055c0 <LL_APB1_GRP1_EnableClock>:
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 80055c8:	4b0a      	ldr	r3, [pc, #40]	@ (80055f4 <LL_APB1_GRP1_EnableClock+0x34>)
 80055ca:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80055ce:	4909      	ldr	r1, [pc, #36]	@ (80055f4 <LL_APB1_GRP1_EnableClock+0x34>)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 80055d8:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <LL_APB1_GRP1_EnableClock+0x34>)
 80055da:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4013      	ands	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055e4:	68fb      	ldr	r3, [r7, #12]
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	58024400 	.word	0x58024400

080055f8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005600:	4b0a      	ldr	r3, [pc, #40]	@ (800562c <LL_APB2_GRP1_EnableClock+0x34>)
 8005602:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005606:	4909      	ldr	r1, [pc, #36]	@ (800562c <LL_APB2_GRP1_EnableClock+0x34>)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005610:	4b06      	ldr	r3, [pc, #24]	@ (800562c <LL_APB2_GRP1_EnableClock+0x34>)
 8005612:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4013      	ands	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800561c:	68fb      	ldr	r3, [r7, #12]
}
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	58024400 	.word	0x58024400

08005630 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b0bc      	sub	sp, #240	@ 0xf0
 8005634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 8005636:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800563a:	2220      	movs	r2, #32
 800563c:	2100      	movs	r1, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f00c fdf2 	bl	8012228 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005644:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	605a      	str	r2, [r3, #4]
 800564e:	609a      	str	r2, [r3, #8]
 8005650:	60da      	str	r2, [r3, #12]
 8005652:	611a      	str	r2, [r3, #16]
 8005654:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005656:	463b      	mov	r3, r7
 8005658:	22b8      	movs	r2, #184	@ 0xb8
 800565a:	2100      	movs	r1, #0
 800565c:	4618      	mov	r0, r3
 800565e:	f00c fde3 	bl	8012228 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005662:	f04f 0202 	mov.w	r2, #2
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800566e:	2300      	movs	r3, #0
 8005670:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005672:	463b      	mov	r3, r7
 8005674:	4618      	mov	r0, r3
 8005676:	f006 fe4d 	bl	800c314 <HAL_RCCEx_PeriphCLKConfig>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 8005680:	f7fe f856 	bl	8003730 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8005684:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005688:	f7ff ff9a 	bl	80055c0 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 800568c:	2008      	movs	r0, #8
 800568e:	f7ff ff7b 	bl	8005588 <LL_AHB4_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PD0   ------> UART4_RX
  PD1   ------> UART4_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8005692:	2303      	movs	r3, #3
 8005694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005698:	2302      	movs	r3, #2
 800569a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800569e:	2300      	movs	r3, #0
 80056a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80056aa:	2300      	movs	r3, #0
 80056ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80056b0:	2308      	movs	r3, #8
 80056b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056b6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80056ba:	4619      	mov	r1, r3
 80056bc:	4827      	ldr	r0, [pc, #156]	@ (800575c <MX_UART4_Init+0x12c>)
 80056be:	f009 ff81 	bl	800f5c4 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80056c2:	f7ff fe2b 	bl	800531c <__NVIC_GetPriorityGrouping>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2200      	movs	r2, #0
 80056ca:	2100      	movs	r1, #0
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff fe7b 	bl	80053c8 <NVIC_EncodePriority>
 80056d2:	4603      	mov	r3, r0
 80056d4:	4619      	mov	r1, r3
 80056d6:	2034      	movs	r0, #52	@ 0x34
 80056d8:	f7ff fe4c 	bl	8005374 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 80056dc:	2034      	movs	r0, #52	@ 0x34
 80056de:	f7ff fe2b 	bl	8005338 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80056e2:	2300      	movs	r3, #0
 80056e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  UART_InitStruct.BaudRate = 115200;
 80056e8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80056ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80056f0:	2300      	movs	r3, #0
 80056f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80056f6:	2300      	movs	r3, #0
 80056f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80056fc:	2300      	movs	r3, #0
 80056fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8005702:	2304      	movs	r3, #4
 8005704:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005708:	2300      	movs	r3, #0
 800570a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800570e:	2300      	movs	r3, #0
 8005710:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  LL_USART_Init(UART4, &UART_InitStruct);
 8005714:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8005718:	4619      	mov	r1, r3
 800571a:	4811      	ldr	r0, [pc, #68]	@ (8005760 <MX_UART4_Init+0x130>)
 800571c:	f00b fc0c 	bl	8010f38 <LL_USART_Init>
  LL_USART_DisableFIFO(UART4);
 8005720:	480f      	ldr	r0, [pc, #60]	@ (8005760 <MX_UART4_Init+0x130>)
 8005722:	f7ff fe94 	bl	800544e <LL_USART_DisableFIFO>
  LL_USART_SetTXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 8005726:	2100      	movs	r1, #0
 8005728:	480d      	ldr	r0, [pc, #52]	@ (8005760 <MX_UART4_Init+0x130>)
 800572a:	f7ff fea0 	bl	800546e <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 800572e:	2100      	movs	r1, #0
 8005730:	480b      	ldr	r0, [pc, #44]	@ (8005760 <MX_UART4_Init+0x130>)
 8005732:	f7ff fec3 	bl	80054bc <LL_USART_SetRXFIFOThreshold>
  LL_USART_ConfigAsyncMode(UART4);
 8005736:	480a      	ldr	r0, [pc, #40]	@ (8005760 <MX_UART4_Init+0x130>)
 8005738:	f7ff fee7 	bl	800550a <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType UART4 */

  /* USER CODE END WKUPType UART4 */

  LL_USART_Enable(UART4);
 800573c:	4808      	ldr	r0, [pc, #32]	@ (8005760 <MX_UART4_Init+0x130>)
 800573e:	f7ff fe76 	bl	800542e <LL_USART_Enable>

  /* Polling UART4 initialisation */
  while(!(LL_USART_IsActiveFlag_REACK(UART4)))
 8005742:	bf00      	nop
 8005744:	4806      	ldr	r0, [pc, #24]	@ (8005760 <MX_UART4_Init+0x130>)
 8005746:	f7ff ff0a 	bl	800555e <LL_USART_IsActiveFlag_REACK>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f9      	beq.n	8005744 <MX_UART4_Init+0x114>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	37f0      	adds	r7, #240	@ 0xf0
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	58020c00 	.word	0x58020c00
 8005760:	40004c00 	.word	0x40004c00

08005764 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b0bc      	sub	sp, #240	@ 0xf0
 8005768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800576a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800576e:	2220      	movs	r2, #32
 8005770:	2100      	movs	r1, #0
 8005772:	4618      	mov	r0, r3
 8005774:	f00c fd58 	bl	8012228 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005778:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	605a      	str	r2, [r3, #4]
 8005782:	609a      	str	r2, [r3, #8]
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	611a      	str	r2, [r3, #16]
 8005788:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800578a:	463b      	mov	r3, r7
 800578c:	22b8      	movs	r2, #184	@ 0xb8
 800578e:	2100      	movs	r1, #0
 8005790:	4618      	mov	r0, r3
 8005792:	f00c fd49 	bl	8012228 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005796:	f04f 0201 	mov.w	r2, #1
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80057a2:	2300      	movs	r3, #0
 80057a4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057a6:	463b      	mov	r3, r7
 80057a8:	4618      	mov	r0, r3
 80057aa:	f006 fdb3 	bl	800c314 <HAL_RCCEx_PeriphCLKConfig>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
 80057b4:	f7fd ffbc 	bl	8003730 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80057b8:	2020      	movs	r0, #32
 80057ba:	f7ff ff1d 	bl	80055f8 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 80057be:	2004      	movs	r0, #4
 80057c0:	f7ff fee2 	bl	8005588 <LL_AHB4_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80057c4:	23c0      	movs	r3, #192	@ 0xc0
 80057c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80057ca:	2302      	movs	r3, #2
 80057cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80057d0:	2300      	movs	r3, #0
 80057d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80057dc:	2300      	movs	r3, #0
 80057de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80057e2:	2307      	movs	r3, #7
 80057e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057e8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80057ec:	4619      	mov	r1, r3
 80057ee:	482a      	ldr	r0, [pc, #168]	@ (8005898 <MX_USART6_UART_Init+0x134>)
 80057f0:	f009 fee8 	bl	800f5c4 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80057f4:	f7ff fd92 	bl	800531c <__NVIC_GetPriorityGrouping>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2200      	movs	r2, #0
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fde2 	bl	80053c8 <NVIC_EncodePriority>
 8005804:	4603      	mov	r3, r0
 8005806:	4619      	mov	r1, r3
 8005808:	2047      	movs	r0, #71	@ 0x47
 800580a:	f7ff fdb3 	bl	8005374 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800580e:	2047      	movs	r0, #71	@ 0x47
 8005810:	f7ff fd92 	bl	8005338 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  USART_InitStruct.BaudRate = 115200;
 800581a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800581e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005822:	2300      	movs	r3, #0
 8005824:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005828:	2300      	movs	r3, #0
 800582a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800582e:	2300      	movs	r3, #0
 8005830:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005834:	230c      	movs	r3, #12
 8005836:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800583a:	2300      	movs	r3, #0
 800583c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005840:	2300      	movs	r3, #0
 8005842:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  LL_USART_Init(USART6, &USART_InitStruct);
 8005846:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800584a:	4619      	mov	r1, r3
 800584c:	4813      	ldr	r0, [pc, #76]	@ (800589c <MX_USART6_UART_Init+0x138>)
 800584e:	f00b fb73 	bl	8010f38 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8005852:	2100      	movs	r1, #0
 8005854:	4811      	ldr	r0, [pc, #68]	@ (800589c <MX_USART6_UART_Init+0x138>)
 8005856:	f7ff fe0a 	bl	800546e <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 800585a:	2100      	movs	r1, #0
 800585c:	480f      	ldr	r0, [pc, #60]	@ (800589c <MX_USART6_UART_Init+0x138>)
 800585e:	f7ff fe2d 	bl	80054bc <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART6);
 8005862:	480e      	ldr	r0, [pc, #56]	@ (800589c <MX_USART6_UART_Init+0x138>)
 8005864:	f7ff fdf3 	bl	800544e <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART6);
 8005868:	480c      	ldr	r0, [pc, #48]	@ (800589c <MX_USART6_UART_Init+0x138>)
 800586a:	f7ff fe4e 	bl	800550a <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART6 */

  /* USER CODE END WKUPType USART6 */

  LL_USART_Enable(USART6);
 800586e:	480b      	ldr	r0, [pc, #44]	@ (800589c <MX_USART6_UART_Init+0x138>)
 8005870:	f7ff fddd 	bl	800542e <LL_USART_Enable>

  /* Polling USART6 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART6))) || (!(LL_USART_IsActiveFlag_REACK(USART6))))
 8005874:	bf00      	nop
 8005876:	4809      	ldr	r0, [pc, #36]	@ (800589c <MX_USART6_UART_Init+0x138>)
 8005878:	f7ff fe5d 	bl	8005536 <LL_USART_IsActiveFlag_TEACK>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0f9      	beq.n	8005876 <MX_USART6_UART_Init+0x112>
 8005882:	4806      	ldr	r0, [pc, #24]	@ (800589c <MX_USART6_UART_Init+0x138>)
 8005884:	f7ff fe6b 	bl	800555e <LL_USART_IsActiveFlag_REACK>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f3      	beq.n	8005876 <MX_USART6_UART_Init+0x112>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800588e:	bf00      	nop
 8005890:	bf00      	nop
 8005892:	37f0      	adds	r7, #240	@ 0xf0
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	58020800 	.word	0x58020800
 800589c:	40011400 	.word	0x40011400

080058a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80058a0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80058dc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80058a4:	f7ff f8e8 	bl	8004a78 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80058a8:	f7ff f856 	bl	8004958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058ac:	480c      	ldr	r0, [pc, #48]	@ (80058e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80058ae:	490d      	ldr	r1, [pc, #52]	@ (80058e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80058b0:	4a0d      	ldr	r2, [pc, #52]	@ (80058e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80058b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058b4:	e002      	b.n	80058bc <LoopCopyDataInit>

080058b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058ba:	3304      	adds	r3, #4

080058bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058c0:	d3f9      	bcc.n	80058b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058c2:	4a0a      	ldr	r2, [pc, #40]	@ (80058ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80058c4:	4c0a      	ldr	r4, [pc, #40]	@ (80058f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80058c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058c8:	e001      	b.n	80058ce <LoopFillZerobss>

080058ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058cc:	3204      	adds	r2, #4

080058ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058d0:	d3fb      	bcc.n	80058ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80058d2:	f00c fd21 	bl	8012318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058d6:	f7fd fb17 	bl	8002f08 <main>
  bx  lr
 80058da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80058dc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80058e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80058e4:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80058e8:	08017724 	.word	0x08017724
  ldr r2, =_sbss
 80058ec:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 80058f0:	24000888 	.word	0x24000888

080058f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058f4:	e7fe      	b.n	80058f4 <ADC3_IRQHandler>
	...

080058f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058fe:	2003      	movs	r0, #3
 8005900:	f000 f980 	bl	8005c04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005904:	f006 fb8c 	bl	800c020 <HAL_RCC_GetSysClockFreq>
 8005908:	4602      	mov	r2, r0
 800590a:	4b15      	ldr	r3, [pc, #84]	@ (8005960 <HAL_Init+0x68>)
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	0a1b      	lsrs	r3, r3, #8
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	4913      	ldr	r1, [pc, #76]	@ (8005964 <HAL_Init+0x6c>)
 8005916:	5ccb      	ldrb	r3, [r1, r3]
 8005918:	f003 031f 	and.w	r3, r3, #31
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
 8005920:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005922:	4b0f      	ldr	r3, [pc, #60]	@ (8005960 <HAL_Init+0x68>)
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	4a0e      	ldr	r2, [pc, #56]	@ (8005964 <HAL_Init+0x6c>)
 800592c:	5cd3      	ldrb	r3, [r2, r3]
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
 8005938:	4a0b      	ldr	r2, [pc, #44]	@ (8005968 <HAL_Init+0x70>)
 800593a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800593c:	4a0b      	ldr	r2, [pc, #44]	@ (800596c <HAL_Init+0x74>)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005942:	200f      	movs	r0, #15
 8005944:	f000 f814 	bl	8005970 <HAL_InitTick>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e002      	b.n	8005958 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005952:	f7fe fc83 	bl	800425c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	58024400 	.word	0x58024400
 8005964:	08017260 	.word	0x08017260
 8005968:	24000008 	.word	0x24000008
 800596c:	24000004 	.word	0x24000004

08005970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005978:	4b15      	ldr	r3, [pc, #84]	@ (80059d0 <HAL_InitTick+0x60>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e021      	b.n	80059c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005984:	4b13      	ldr	r3, [pc, #76]	@ (80059d4 <HAL_InitTick+0x64>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	4b11      	ldr	r3, [pc, #68]	@ (80059d0 <HAL_InitTick+0x60>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	4619      	mov	r1, r3
 800598e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005992:	fbb3 f3f1 	udiv	r3, r3, r1
 8005996:	fbb2 f3f3 	udiv	r3, r2, r3
 800599a:	4618      	mov	r0, r3
 800599c:	f000 f965 	bl	8005c6a <HAL_SYSTICK_Config>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e00e      	b.n	80059c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b0f      	cmp	r3, #15
 80059ae:	d80a      	bhi.n	80059c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059b0:	2200      	movs	r2, #0
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059b8:	f000 f92f 	bl	8005c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059bc:	4a06      	ldr	r2, [pc, #24]	@ (80059d8 <HAL_InitTick+0x68>)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e000      	b.n	80059c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	24000010 	.word	0x24000010
 80059d4:	24000004 	.word	0x24000004
 80059d8:	2400000c 	.word	0x2400000c

080059dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80059e0:	4b06      	ldr	r3, [pc, #24]	@ (80059fc <HAL_IncTick+0x20>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	4b06      	ldr	r3, [pc, #24]	@ (8005a00 <HAL_IncTick+0x24>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4413      	add	r3, r2
 80059ec:	4a04      	ldr	r2, [pc, #16]	@ (8005a00 <HAL_IncTick+0x24>)
 80059ee:	6013      	str	r3, [r2, #0]
}
 80059f0:	bf00      	nop
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	24000010 	.word	0x24000010
 8005a00:	24000738 	.word	0x24000738

08005a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  return uwTick;
 8005a08:	4b03      	ldr	r3, [pc, #12]	@ (8005a18 <HAL_GetTick+0x14>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	24000738 	.word	0x24000738

08005a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a24:	f7ff ffee 	bl	8005a04 <HAL_GetTick>
 8005a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a34:	d005      	beq.n	8005a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a36:	4b0a      	ldr	r3, [pc, #40]	@ (8005a60 <HAL_Delay+0x44>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a42:	bf00      	nop
 8005a44:	f7ff ffde 	bl	8005a04 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d8f7      	bhi.n	8005a44 <HAL_Delay+0x28>
  {
  }
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	24000010 	.word	0x24000010

08005a64 <__NVIC_SetPriorityGrouping>:
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a74:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a80:	4013      	ands	r3, r2
 8005a82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a8c:	4b06      	ldr	r3, [pc, #24]	@ (8005aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a92:	4a04      	ldr	r2, [pc, #16]	@ (8005aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	60d3      	str	r3, [r2, #12]
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	e000ed00 	.word	0xe000ed00
 8005aa8:	05fa0000 	.word	0x05fa0000

08005aac <__NVIC_GetPriorityGrouping>:
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ab0:	4b04      	ldr	r3, [pc, #16]	@ (8005ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	0a1b      	lsrs	r3, r3, #8
 8005ab6:	f003 0307 	and.w	r3, r3, #7
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	e000ed00 	.word	0xe000ed00

08005ac8 <__NVIC_EnableIRQ>:
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	db0b      	blt.n	8005af2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	f003 021f 	and.w	r2, r3, #31
 8005ae0:	4907      	ldr	r1, [pc, #28]	@ (8005b00 <__NVIC_EnableIRQ+0x38>)
 8005ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	2001      	movs	r0, #1
 8005aea:	fa00 f202 	lsl.w	r2, r0, r2
 8005aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	e000e100 	.word	0xe000e100

08005b04 <__NVIC_SetPriority>:
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	6039      	str	r1, [r7, #0]
 8005b0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	db0a      	blt.n	8005b2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	490c      	ldr	r1, [pc, #48]	@ (8005b50 <__NVIC_SetPriority+0x4c>)
 8005b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b22:	0112      	lsls	r2, r2, #4
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	440b      	add	r3, r1
 8005b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005b2c:	e00a      	b.n	8005b44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	4908      	ldr	r1, [pc, #32]	@ (8005b54 <__NVIC_SetPriority+0x50>)
 8005b34:	88fb      	ldrh	r3, [r7, #6]
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	3b04      	subs	r3, #4
 8005b3c:	0112      	lsls	r2, r2, #4
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	440b      	add	r3, r1
 8005b42:	761a      	strb	r2, [r3, #24]
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	e000e100 	.word	0xe000e100
 8005b54:	e000ed00 	.word	0xe000ed00

08005b58 <NVIC_EncodePriority>:
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b089      	sub	sp, #36	@ 0x24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f1c3 0307 	rsb	r3, r3, #7
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	bf28      	it	cs
 8005b76:	2304      	movcs	r3, #4
 8005b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	2b06      	cmp	r3, #6
 8005b80:	d902      	bls.n	8005b88 <NVIC_EncodePriority+0x30>
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	3b03      	subs	r3, #3
 8005b86:	e000      	b.n	8005b8a <NVIC_EncodePriority+0x32>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	fa02 f303 	lsl.w	r3, r2, r3
 8005b96:	43da      	mvns	r2, r3
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	401a      	ands	r2, r3
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ba0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8005baa:	43d9      	mvns	r1, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bb0:	4313      	orrs	r3, r2
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3724      	adds	r7, #36	@ 0x24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bd0:	d301      	bcc.n	8005bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e00f      	b.n	8005bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8005c00 <SysTick_Config+0x40>)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bde:	210f      	movs	r1, #15
 8005be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005be4:	f7ff ff8e 	bl	8005b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005be8:	4b05      	ldr	r3, [pc, #20]	@ (8005c00 <SysTick_Config+0x40>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bee:	4b04      	ldr	r3, [pc, #16]	@ (8005c00 <SysTick_Config+0x40>)
 8005bf0:	2207      	movs	r2, #7
 8005bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	e000e010 	.word	0xe000e010

08005c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff ff29 	bl	8005a64 <__NVIC_SetPriorityGrouping>
}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b086      	sub	sp, #24
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	4603      	mov	r3, r0
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
 8005c26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c28:	f7ff ff40 	bl	8005aac <__NVIC_GetPriorityGrouping>
 8005c2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	6978      	ldr	r0, [r7, #20]
 8005c34:	f7ff ff90 	bl	8005b58 <NVIC_EncodePriority>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c3e:	4611      	mov	r1, r2
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff ff5f 	bl	8005b04 <__NVIC_SetPriority>
}
 8005c46:	bf00      	nop
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	4603      	mov	r3, r0
 8005c56:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff ff33 	bl	8005ac8 <__NVIC_EnableIRQ>
}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7ff ffa4 	bl	8005bc0 <SysTick_Config>
 8005c78:	4603      	mov	r3, r0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005c88:	f3bf 8f5f 	dmb	sy
}
 8005c8c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005c8e:	4b07      	ldr	r3, [pc, #28]	@ (8005cac <HAL_MPU_Disable+0x28>)
 8005c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c92:	4a06      	ldr	r2, [pc, #24]	@ (8005cac <HAL_MPU_Disable+0x28>)
 8005c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c98:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005c9a:	4b05      	ldr	r3, [pc, #20]	@ (8005cb0 <HAL_MPU_Disable+0x2c>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	605a      	str	r2, [r3, #4]
}
 8005ca0:	bf00      	nop
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	e000ed00 	.word	0xe000ed00
 8005cb0:	e000ed90 	.word	0xe000ed90

08005cb4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8005cec <HAL_MPU_Enable+0x38>)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f043 0301 	orr.w	r3, r3, #1
 8005cc4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf0 <HAL_MPU_Enable+0x3c>)
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cca:	4a09      	ldr	r2, [pc, #36]	@ (8005cf0 <HAL_MPU_Enable+0x3c>)
 8005ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cd0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005cd2:	f3bf 8f4f 	dsb	sy
}
 8005cd6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005cd8:	f3bf 8f6f 	isb	sy
}
 8005cdc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	e000ed90 	.word	0xe000ed90
 8005cf0:	e000ed00 	.word	0xe000ed00

08005cf4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	785a      	ldrb	r2, [r3, #1]
 8005d00:	4b1b      	ldr	r3, [pc, #108]	@ (8005d70 <HAL_MPU_ConfigRegion+0x7c>)
 8005d02:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005d04:	4b1a      	ldr	r3, [pc, #104]	@ (8005d70 <HAL_MPU_ConfigRegion+0x7c>)
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	4a19      	ldr	r2, [pc, #100]	@ (8005d70 <HAL_MPU_ConfigRegion+0x7c>)
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005d10:	4a17      	ldr	r2, [pc, #92]	@ (8005d70 <HAL_MPU_ConfigRegion+0x7c>)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	7b1b      	ldrb	r3, [r3, #12]
 8005d1c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	7adb      	ldrb	r3, [r3, #11]
 8005d22:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	7a9b      	ldrb	r3, [r3, #10]
 8005d2a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005d2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	7b5b      	ldrb	r3, [r3, #13]
 8005d32:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005d34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	7b9b      	ldrb	r3, [r3, #14]
 8005d3a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005d3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	7bdb      	ldrb	r3, [r3, #15]
 8005d42:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005d44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	7a5b      	ldrb	r3, [r3, #9]
 8005d4a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005d4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	7a1b      	ldrb	r3, [r3, #8]
 8005d52:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005d54:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	7812      	ldrb	r2, [r2, #0]
 8005d5a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d5c:	4a04      	ldr	r2, [pc, #16]	@ (8005d70 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d5e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d60:	6113      	str	r3, [r2, #16]
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	e000ed90 	.word	0xe000ed90

08005d74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d7c:	f7ff fe42 	bl	8005a04 <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e312      	b.n	80063b2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a66      	ldr	r2, [pc, #408]	@ (8005f2c <HAL_DMA_Init+0x1b8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d04a      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a65      	ldr	r2, [pc, #404]	@ (8005f30 <HAL_DMA_Init+0x1bc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d045      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a63      	ldr	r2, [pc, #396]	@ (8005f34 <HAL_DMA_Init+0x1c0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d040      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a62      	ldr	r2, [pc, #392]	@ (8005f38 <HAL_DMA_Init+0x1c4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d03b      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a60      	ldr	r2, [pc, #384]	@ (8005f3c <HAL_DMA_Init+0x1c8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d036      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a5f      	ldr	r2, [pc, #380]	@ (8005f40 <HAL_DMA_Init+0x1cc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d031      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8005f44 <HAL_DMA_Init+0x1d0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d02c      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a5c      	ldr	r2, [pc, #368]	@ (8005f48 <HAL_DMA_Init+0x1d4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d027      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a5a      	ldr	r2, [pc, #360]	@ (8005f4c <HAL_DMA_Init+0x1d8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d022      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a59      	ldr	r2, [pc, #356]	@ (8005f50 <HAL_DMA_Init+0x1dc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d01d      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a57      	ldr	r2, [pc, #348]	@ (8005f54 <HAL_DMA_Init+0x1e0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d018      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a56      	ldr	r2, [pc, #344]	@ (8005f58 <HAL_DMA_Init+0x1e4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d013      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a54      	ldr	r2, [pc, #336]	@ (8005f5c <HAL_DMA_Init+0x1e8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00e      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a53      	ldr	r2, [pc, #332]	@ (8005f60 <HAL_DMA_Init+0x1ec>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d009      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a51      	ldr	r2, [pc, #324]	@ (8005f64 <HAL_DMA_Init+0x1f0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a50      	ldr	r2, [pc, #320]	@ (8005f68 <HAL_DMA_Init+0x1f4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d101      	bne.n	8005e30 <HAL_DMA_Init+0xbc>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <HAL_DMA_Init+0xbe>
 8005e30:	2300      	movs	r3, #0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 813c 	beq.w	80060b0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a37      	ldr	r2, [pc, #220]	@ (8005f2c <HAL_DMA_Init+0x1b8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d04a      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a36      	ldr	r2, [pc, #216]	@ (8005f30 <HAL_DMA_Init+0x1bc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d045      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a34      	ldr	r2, [pc, #208]	@ (8005f34 <HAL_DMA_Init+0x1c0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d040      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a33      	ldr	r2, [pc, #204]	@ (8005f38 <HAL_DMA_Init+0x1c4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d03b      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a31      	ldr	r2, [pc, #196]	@ (8005f3c <HAL_DMA_Init+0x1c8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d036      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a30      	ldr	r2, [pc, #192]	@ (8005f40 <HAL_DMA_Init+0x1cc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d031      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a2e      	ldr	r2, [pc, #184]	@ (8005f44 <HAL_DMA_Init+0x1d0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d02c      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a2d      	ldr	r2, [pc, #180]	@ (8005f48 <HAL_DMA_Init+0x1d4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d027      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a2b      	ldr	r2, [pc, #172]	@ (8005f4c <HAL_DMA_Init+0x1d8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d022      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8005f50 <HAL_DMA_Init+0x1dc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d01d      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a28      	ldr	r2, [pc, #160]	@ (8005f54 <HAL_DMA_Init+0x1e0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d018      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a27      	ldr	r2, [pc, #156]	@ (8005f58 <HAL_DMA_Init+0x1e4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d013      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a25      	ldr	r2, [pc, #148]	@ (8005f5c <HAL_DMA_Init+0x1e8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00e      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a24      	ldr	r2, [pc, #144]	@ (8005f60 <HAL_DMA_Init+0x1ec>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d009      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a22      	ldr	r2, [pc, #136]	@ (8005f64 <HAL_DMA_Init+0x1f0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a21      	ldr	r2, [pc, #132]	@ (8005f68 <HAL_DMA_Init+0x1f4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d108      	bne.n	8005efa <HAL_DMA_Init+0x186>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0201 	bic.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	e007      	b.n	8005f0a <HAL_DMA_Init+0x196>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0201 	bic.w	r2, r2, #1
 8005f08:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f0a:	e02f      	b.n	8005f6c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f0c:	f7ff fd7a 	bl	8005a04 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b05      	cmp	r3, #5
 8005f18:	d928      	bls.n	8005f6c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2203      	movs	r2, #3
 8005f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e242      	b.n	80063b2 <HAL_DMA_Init+0x63e>
 8005f2c:	40020010 	.word	0x40020010
 8005f30:	40020028 	.word	0x40020028
 8005f34:	40020040 	.word	0x40020040
 8005f38:	40020058 	.word	0x40020058
 8005f3c:	40020070 	.word	0x40020070
 8005f40:	40020088 	.word	0x40020088
 8005f44:	400200a0 	.word	0x400200a0
 8005f48:	400200b8 	.word	0x400200b8
 8005f4c:	40020410 	.word	0x40020410
 8005f50:	40020428 	.word	0x40020428
 8005f54:	40020440 	.word	0x40020440
 8005f58:	40020458 	.word	0x40020458
 8005f5c:	40020470 	.word	0x40020470
 8005f60:	40020488 	.word	0x40020488
 8005f64:	400204a0 	.word	0x400204a0
 8005f68:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1c8      	bne.n	8005f0c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4b83      	ldr	r3, [pc, #524]	@ (8006194 <HAL_DMA_Init+0x420>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005f92:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005faa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d107      	bne.n	8005fd0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b28      	cmp	r3, #40	@ 0x28
 8005fd6:	d903      	bls.n	8005fe0 <HAL_DMA_Init+0x26c>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fde:	d91f      	bls.n	8006020 <HAL_DMA_Init+0x2ac>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fe6:	d903      	bls.n	8005ff0 <HAL_DMA_Init+0x27c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b42      	cmp	r3, #66	@ 0x42
 8005fee:	d917      	bls.n	8006020 <HAL_DMA_Init+0x2ac>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b46      	cmp	r3, #70	@ 0x46
 8005ff6:	d903      	bls.n	8006000 <HAL_DMA_Init+0x28c>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b48      	cmp	r3, #72	@ 0x48
 8005ffe:	d90f      	bls.n	8006020 <HAL_DMA_Init+0x2ac>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b4e      	cmp	r3, #78	@ 0x4e
 8006006:	d903      	bls.n	8006010 <HAL_DMA_Init+0x29c>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b52      	cmp	r3, #82	@ 0x52
 800600e:	d907      	bls.n	8006020 <HAL_DMA_Init+0x2ac>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b73      	cmp	r3, #115	@ 0x73
 8006016:	d905      	bls.n	8006024 <HAL_DMA_Init+0x2b0>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b77      	cmp	r3, #119	@ 0x77
 800601e:	d801      	bhi.n	8006024 <HAL_DMA_Init+0x2b0>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <HAL_DMA_Init+0x2b2>
 8006024:	2300      	movs	r3, #0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006030:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f023 0307 	bic.w	r3, r3, #7
 8006048:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	4313      	orrs	r3, r2
 8006052:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006058:	2b04      	cmp	r3, #4
 800605a:	d117      	bne.n	800608c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00e      	beq.n	800608c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f002 f81e 	bl	80080b0 <DMA_CheckFifoParam>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d008      	beq.n	800608c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2240      	movs	r2, #64	@ 0x40
 800607e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e192      	b.n	80063b2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f001 ff59 	bl	8007f4c <DMA_CalcBaseAndBitshift>
 800609a:	4603      	mov	r3, r0
 800609c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a2:	f003 031f 	and.w	r3, r3, #31
 80060a6:	223f      	movs	r2, #63	@ 0x3f
 80060a8:	409a      	lsls	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	609a      	str	r2, [r3, #8]
 80060ae:	e0c8      	b.n	8006242 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a38      	ldr	r2, [pc, #224]	@ (8006198 <HAL_DMA_Init+0x424>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d022      	beq.n	8006100 <HAL_DMA_Init+0x38c>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a37      	ldr	r2, [pc, #220]	@ (800619c <HAL_DMA_Init+0x428>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d01d      	beq.n	8006100 <HAL_DMA_Init+0x38c>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a35      	ldr	r2, [pc, #212]	@ (80061a0 <HAL_DMA_Init+0x42c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d018      	beq.n	8006100 <HAL_DMA_Init+0x38c>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a34      	ldr	r2, [pc, #208]	@ (80061a4 <HAL_DMA_Init+0x430>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d013      	beq.n	8006100 <HAL_DMA_Init+0x38c>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a32      	ldr	r2, [pc, #200]	@ (80061a8 <HAL_DMA_Init+0x434>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00e      	beq.n	8006100 <HAL_DMA_Init+0x38c>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a31      	ldr	r2, [pc, #196]	@ (80061ac <HAL_DMA_Init+0x438>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d009      	beq.n	8006100 <HAL_DMA_Init+0x38c>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a2f      	ldr	r2, [pc, #188]	@ (80061b0 <HAL_DMA_Init+0x43c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d004      	beq.n	8006100 <HAL_DMA_Init+0x38c>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a2e      	ldr	r2, [pc, #184]	@ (80061b4 <HAL_DMA_Init+0x440>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d101      	bne.n	8006104 <HAL_DMA_Init+0x390>
 8006100:	2301      	movs	r3, #1
 8006102:	e000      	b.n	8006106 <HAL_DMA_Init+0x392>
 8006104:	2300      	movs	r3, #0
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 8092 	beq.w	8006230 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a21      	ldr	r2, [pc, #132]	@ (8006198 <HAL_DMA_Init+0x424>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d021      	beq.n	800615a <HAL_DMA_Init+0x3e6>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a20      	ldr	r2, [pc, #128]	@ (800619c <HAL_DMA_Init+0x428>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d01c      	beq.n	800615a <HAL_DMA_Init+0x3e6>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1e      	ldr	r2, [pc, #120]	@ (80061a0 <HAL_DMA_Init+0x42c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d017      	beq.n	800615a <HAL_DMA_Init+0x3e6>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a1d      	ldr	r2, [pc, #116]	@ (80061a4 <HAL_DMA_Init+0x430>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d012      	beq.n	800615a <HAL_DMA_Init+0x3e6>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1b      	ldr	r2, [pc, #108]	@ (80061a8 <HAL_DMA_Init+0x434>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00d      	beq.n	800615a <HAL_DMA_Init+0x3e6>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a1a      	ldr	r2, [pc, #104]	@ (80061ac <HAL_DMA_Init+0x438>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d008      	beq.n	800615a <HAL_DMA_Init+0x3e6>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a18      	ldr	r2, [pc, #96]	@ (80061b0 <HAL_DMA_Init+0x43c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d003      	beq.n	800615a <HAL_DMA_Init+0x3e6>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a17      	ldr	r2, [pc, #92]	@ (80061b4 <HAL_DMA_Init+0x440>)
 8006158:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4b10      	ldr	r3, [pc, #64]	@ (80061b8 <HAL_DMA_Init+0x444>)
 8006176:	4013      	ands	r3, r2
 8006178:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b40      	cmp	r3, #64	@ 0x40
 8006180:	d01c      	beq.n	80061bc <HAL_DMA_Init+0x448>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	2b80      	cmp	r3, #128	@ 0x80
 8006188:	d102      	bne.n	8006190 <HAL_DMA_Init+0x41c>
 800618a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800618e:	e016      	b.n	80061be <HAL_DMA_Init+0x44a>
 8006190:	2300      	movs	r3, #0
 8006192:	e014      	b.n	80061be <HAL_DMA_Init+0x44a>
 8006194:	fe10803f 	.word	0xfe10803f
 8006198:	58025408 	.word	0x58025408
 800619c:	5802541c 	.word	0x5802541c
 80061a0:	58025430 	.word	0x58025430
 80061a4:	58025444 	.word	0x58025444
 80061a8:	58025458 	.word	0x58025458
 80061ac:	5802546c 	.word	0x5802546c
 80061b0:	58025480 	.word	0x58025480
 80061b4:	58025494 	.word	0x58025494
 80061b8:	fffe000f 	.word	0xfffe000f
 80061bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	68d2      	ldr	r2, [r2, #12]
 80061c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80061cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80061d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80061dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80061e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	4b6e      	ldr	r3, [pc, #440]	@ (80063bc <HAL_DMA_Init+0x648>)
 8006204:	4413      	add	r3, r2
 8006206:	4a6e      	ldr	r2, [pc, #440]	@ (80063c0 <HAL_DMA_Init+0x64c>)
 8006208:	fba2 2303 	umull	r2, r3, r2, r3
 800620c:	091b      	lsrs	r3, r3, #4
 800620e:	009a      	lsls	r2, r3, #2
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 fe99 	bl	8007f4c <DMA_CalcBaseAndBitshift>
 800621a:	4603      	mov	r3, r0
 800621c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006222:	f003 031f 	and.w	r3, r3, #31
 8006226:	2201      	movs	r2, #1
 8006228:	409a      	lsls	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	605a      	str	r2, [r3, #4]
 800622e:	e008      	b.n	8006242 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2240      	movs	r2, #64	@ 0x40
 8006234:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2203      	movs	r2, #3
 800623a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e0b7      	b.n	80063b2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a5f      	ldr	r2, [pc, #380]	@ (80063c4 <HAL_DMA_Init+0x650>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d072      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a5d      	ldr	r2, [pc, #372]	@ (80063c8 <HAL_DMA_Init+0x654>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d06d      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a5c      	ldr	r2, [pc, #368]	@ (80063cc <HAL_DMA_Init+0x658>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d068      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a5a      	ldr	r2, [pc, #360]	@ (80063d0 <HAL_DMA_Init+0x65c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d063      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a59      	ldr	r2, [pc, #356]	@ (80063d4 <HAL_DMA_Init+0x660>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d05e      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a57      	ldr	r2, [pc, #348]	@ (80063d8 <HAL_DMA_Init+0x664>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d059      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a56      	ldr	r2, [pc, #344]	@ (80063dc <HAL_DMA_Init+0x668>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d054      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a54      	ldr	r2, [pc, #336]	@ (80063e0 <HAL_DMA_Init+0x66c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d04f      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a53      	ldr	r2, [pc, #332]	@ (80063e4 <HAL_DMA_Init+0x670>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d04a      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a51      	ldr	r2, [pc, #324]	@ (80063e8 <HAL_DMA_Init+0x674>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d045      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a50      	ldr	r2, [pc, #320]	@ (80063ec <HAL_DMA_Init+0x678>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d040      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a4e      	ldr	r2, [pc, #312]	@ (80063f0 <HAL_DMA_Init+0x67c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d03b      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a4d      	ldr	r2, [pc, #308]	@ (80063f4 <HAL_DMA_Init+0x680>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d036      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a4b      	ldr	r2, [pc, #300]	@ (80063f8 <HAL_DMA_Init+0x684>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d031      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a4a      	ldr	r2, [pc, #296]	@ (80063fc <HAL_DMA_Init+0x688>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d02c      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a48      	ldr	r2, [pc, #288]	@ (8006400 <HAL_DMA_Init+0x68c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d027      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a47      	ldr	r2, [pc, #284]	@ (8006404 <HAL_DMA_Init+0x690>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d022      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a45      	ldr	r2, [pc, #276]	@ (8006408 <HAL_DMA_Init+0x694>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01d      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a44      	ldr	r2, [pc, #272]	@ (800640c <HAL_DMA_Init+0x698>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d018      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a42      	ldr	r2, [pc, #264]	@ (8006410 <HAL_DMA_Init+0x69c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d013      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a41      	ldr	r2, [pc, #260]	@ (8006414 <HAL_DMA_Init+0x6a0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00e      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a3f      	ldr	r2, [pc, #252]	@ (8006418 <HAL_DMA_Init+0x6a4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d009      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a3e      	ldr	r2, [pc, #248]	@ (800641c <HAL_DMA_Init+0x6a8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d004      	beq.n	8006332 <HAL_DMA_Init+0x5be>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a3c      	ldr	r2, [pc, #240]	@ (8006420 <HAL_DMA_Init+0x6ac>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d101      	bne.n	8006336 <HAL_DMA_Init+0x5c2>
 8006332:	2301      	movs	r3, #1
 8006334:	e000      	b.n	8006338 <HAL_DMA_Init+0x5c4>
 8006336:	2300      	movs	r3, #0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d032      	beq.n	80063a2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 ff33 	bl	80081a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	2b80      	cmp	r3, #128	@ 0x80
 8006348:	d102      	bne.n	8006350 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006364:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d010      	beq.n	8006390 <HAL_DMA_Init+0x61c>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b08      	cmp	r3, #8
 8006374:	d80c      	bhi.n	8006390 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 ffb0 	bl	80082dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006380:	2200      	movs	r2, #0
 8006382:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800638c:	605a      	str	r2, [r3, #4]
 800638e:	e008      	b.n	80063a2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	a7fdabf8 	.word	0xa7fdabf8
 80063c0:	cccccccd 	.word	0xcccccccd
 80063c4:	40020010 	.word	0x40020010
 80063c8:	40020028 	.word	0x40020028
 80063cc:	40020040 	.word	0x40020040
 80063d0:	40020058 	.word	0x40020058
 80063d4:	40020070 	.word	0x40020070
 80063d8:	40020088 	.word	0x40020088
 80063dc:	400200a0 	.word	0x400200a0
 80063e0:	400200b8 	.word	0x400200b8
 80063e4:	40020410 	.word	0x40020410
 80063e8:	40020428 	.word	0x40020428
 80063ec:	40020440 	.word	0x40020440
 80063f0:	40020458 	.word	0x40020458
 80063f4:	40020470 	.word	0x40020470
 80063f8:	40020488 	.word	0x40020488
 80063fc:	400204a0 	.word	0x400204a0
 8006400:	400204b8 	.word	0x400204b8
 8006404:	58025408 	.word	0x58025408
 8006408:	5802541c 	.word	0x5802541c
 800640c:	58025430 	.word	0x58025430
 8006410:	58025444 	.word	0x58025444
 8006414:	58025458 	.word	0x58025458
 8006418:	5802546c 	.word	0x5802546c
 800641c:	58025480 	.word	0x58025480
 8006420:	58025494 	.word	0x58025494

08006424 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e226      	b.n	800688e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <HAL_DMA_Start_IT+0x2a>
 800644a:	2302      	movs	r3, #2
 800644c:	e21f      	b.n	800688e <HAL_DMA_Start_IT+0x46a>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b01      	cmp	r3, #1
 8006460:	f040 820a 	bne.w	8006878 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a68      	ldr	r2, [pc, #416]	@ (8006618 <HAL_DMA_Start_IT+0x1f4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d04a      	beq.n	8006512 <HAL_DMA_Start_IT+0xee>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a66      	ldr	r2, [pc, #408]	@ (800661c <HAL_DMA_Start_IT+0x1f8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d045      	beq.n	8006512 <HAL_DMA_Start_IT+0xee>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a65      	ldr	r2, [pc, #404]	@ (8006620 <HAL_DMA_Start_IT+0x1fc>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d040      	beq.n	8006512 <HAL_DMA_Start_IT+0xee>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a63      	ldr	r2, [pc, #396]	@ (8006624 <HAL_DMA_Start_IT+0x200>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d03b      	beq.n	8006512 <HAL_DMA_Start_IT+0xee>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a62      	ldr	r2, [pc, #392]	@ (8006628 <HAL_DMA_Start_IT+0x204>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d036      	beq.n	8006512 <HAL_DMA_Start_IT+0xee>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a60      	ldr	r2, [pc, #384]	@ (800662c <HAL_DMA_Start_IT+0x208>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d031      	beq.n	8006512 <HAL_DMA_Start_IT+0xee>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a5f      	ldr	r2, [pc, #380]	@ (8006630 <HAL_DMA_Start_IT+0x20c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d02c      	beq.n	8006512 <HAL_DMA_Start_IT+0xee>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a5d      	ldr	r2, [pc, #372]	@ (8006634 <HAL_DMA_Start_IT+0x210>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d027      	beq.n	8006512 <HAL_DMA_Start_IT+0xee>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a5c      	ldr	r2, [pc, #368]	@ (8006638 <HAL_DMA_Start_IT+0x214>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d022      	beq.n	8006512 <HAL_DMA_Start_IT+0xee>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a5a      	ldr	r2, [pc, #360]	@ (800663c <HAL_DMA_Start_IT+0x218>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d01d      	beq.n	8006512 <HAL_DMA_Start_IT+0xee>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a59      	ldr	r2, [pc, #356]	@ (8006640 <HAL_DMA_Start_IT+0x21c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d018      	beq.n	8006512 <HAL_DMA_Start_IT+0xee>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a57      	ldr	r2, [pc, #348]	@ (8006644 <HAL_DMA_Start_IT+0x220>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d013      	beq.n	8006512 <HAL_DMA_Start_IT+0xee>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a56      	ldr	r2, [pc, #344]	@ (8006648 <HAL_DMA_Start_IT+0x224>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00e      	beq.n	8006512 <HAL_DMA_Start_IT+0xee>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a54      	ldr	r2, [pc, #336]	@ (800664c <HAL_DMA_Start_IT+0x228>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d009      	beq.n	8006512 <HAL_DMA_Start_IT+0xee>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a53      	ldr	r2, [pc, #332]	@ (8006650 <HAL_DMA_Start_IT+0x22c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d004      	beq.n	8006512 <HAL_DMA_Start_IT+0xee>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a51      	ldr	r2, [pc, #324]	@ (8006654 <HAL_DMA_Start_IT+0x230>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d108      	bne.n	8006524 <HAL_DMA_Start_IT+0x100>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0201 	bic.w	r2, r2, #1
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	e007      	b.n	8006534 <HAL_DMA_Start_IT+0x110>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0201 	bic.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	68b9      	ldr	r1, [r7, #8]
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f001 fb5a 	bl	8007bf4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a34      	ldr	r2, [pc, #208]	@ (8006618 <HAL_DMA_Start_IT+0x1f4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d04a      	beq.n	80065e0 <HAL_DMA_Start_IT+0x1bc>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a33      	ldr	r2, [pc, #204]	@ (800661c <HAL_DMA_Start_IT+0x1f8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d045      	beq.n	80065e0 <HAL_DMA_Start_IT+0x1bc>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a31      	ldr	r2, [pc, #196]	@ (8006620 <HAL_DMA_Start_IT+0x1fc>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d040      	beq.n	80065e0 <HAL_DMA_Start_IT+0x1bc>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a30      	ldr	r2, [pc, #192]	@ (8006624 <HAL_DMA_Start_IT+0x200>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d03b      	beq.n	80065e0 <HAL_DMA_Start_IT+0x1bc>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a2e      	ldr	r2, [pc, #184]	@ (8006628 <HAL_DMA_Start_IT+0x204>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d036      	beq.n	80065e0 <HAL_DMA_Start_IT+0x1bc>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a2d      	ldr	r2, [pc, #180]	@ (800662c <HAL_DMA_Start_IT+0x208>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d031      	beq.n	80065e0 <HAL_DMA_Start_IT+0x1bc>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a2b      	ldr	r2, [pc, #172]	@ (8006630 <HAL_DMA_Start_IT+0x20c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d02c      	beq.n	80065e0 <HAL_DMA_Start_IT+0x1bc>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a2a      	ldr	r2, [pc, #168]	@ (8006634 <HAL_DMA_Start_IT+0x210>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d027      	beq.n	80065e0 <HAL_DMA_Start_IT+0x1bc>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a28      	ldr	r2, [pc, #160]	@ (8006638 <HAL_DMA_Start_IT+0x214>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d022      	beq.n	80065e0 <HAL_DMA_Start_IT+0x1bc>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a27      	ldr	r2, [pc, #156]	@ (800663c <HAL_DMA_Start_IT+0x218>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d01d      	beq.n	80065e0 <HAL_DMA_Start_IT+0x1bc>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a25      	ldr	r2, [pc, #148]	@ (8006640 <HAL_DMA_Start_IT+0x21c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d018      	beq.n	80065e0 <HAL_DMA_Start_IT+0x1bc>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a24      	ldr	r2, [pc, #144]	@ (8006644 <HAL_DMA_Start_IT+0x220>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d013      	beq.n	80065e0 <HAL_DMA_Start_IT+0x1bc>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a22      	ldr	r2, [pc, #136]	@ (8006648 <HAL_DMA_Start_IT+0x224>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00e      	beq.n	80065e0 <HAL_DMA_Start_IT+0x1bc>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a21      	ldr	r2, [pc, #132]	@ (800664c <HAL_DMA_Start_IT+0x228>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d009      	beq.n	80065e0 <HAL_DMA_Start_IT+0x1bc>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006650 <HAL_DMA_Start_IT+0x22c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d004      	beq.n	80065e0 <HAL_DMA_Start_IT+0x1bc>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a1e      	ldr	r2, [pc, #120]	@ (8006654 <HAL_DMA_Start_IT+0x230>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d101      	bne.n	80065e4 <HAL_DMA_Start_IT+0x1c0>
 80065e0:	2301      	movs	r3, #1
 80065e2:	e000      	b.n	80065e6 <HAL_DMA_Start_IT+0x1c2>
 80065e4:	2300      	movs	r3, #0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d036      	beq.n	8006658 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f023 021e 	bic.w	r2, r3, #30
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0216 	orr.w	r2, r2, #22
 80065fc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006602:	2b00      	cmp	r3, #0
 8006604:	d03e      	beq.n	8006684 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 0208 	orr.w	r2, r2, #8
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	e035      	b.n	8006684 <HAL_DMA_Start_IT+0x260>
 8006618:	40020010 	.word	0x40020010
 800661c:	40020028 	.word	0x40020028
 8006620:	40020040 	.word	0x40020040
 8006624:	40020058 	.word	0x40020058
 8006628:	40020070 	.word	0x40020070
 800662c:	40020088 	.word	0x40020088
 8006630:	400200a0 	.word	0x400200a0
 8006634:	400200b8 	.word	0x400200b8
 8006638:	40020410 	.word	0x40020410
 800663c:	40020428 	.word	0x40020428
 8006640:	40020440 	.word	0x40020440
 8006644:	40020458 	.word	0x40020458
 8006648:	40020470 	.word	0x40020470
 800664c:	40020488 	.word	0x40020488
 8006650:	400204a0 	.word	0x400204a0
 8006654:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f023 020e 	bic.w	r2, r3, #14
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 020a 	orr.w	r2, r2, #10
 800666a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d007      	beq.n	8006684 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0204 	orr.w	r2, r2, #4
 8006682:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a83      	ldr	r2, [pc, #524]	@ (8006898 <HAL_DMA_Start_IT+0x474>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d072      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a82      	ldr	r2, [pc, #520]	@ (800689c <HAL_DMA_Start_IT+0x478>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d06d      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a80      	ldr	r2, [pc, #512]	@ (80068a0 <HAL_DMA_Start_IT+0x47c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d068      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a7f      	ldr	r2, [pc, #508]	@ (80068a4 <HAL_DMA_Start_IT+0x480>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d063      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a7d      	ldr	r2, [pc, #500]	@ (80068a8 <HAL_DMA_Start_IT+0x484>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d05e      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a7c      	ldr	r2, [pc, #496]	@ (80068ac <HAL_DMA_Start_IT+0x488>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d059      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a7a      	ldr	r2, [pc, #488]	@ (80068b0 <HAL_DMA_Start_IT+0x48c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d054      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a79      	ldr	r2, [pc, #484]	@ (80068b4 <HAL_DMA_Start_IT+0x490>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d04f      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a77      	ldr	r2, [pc, #476]	@ (80068b8 <HAL_DMA_Start_IT+0x494>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d04a      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a76      	ldr	r2, [pc, #472]	@ (80068bc <HAL_DMA_Start_IT+0x498>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d045      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a74      	ldr	r2, [pc, #464]	@ (80068c0 <HAL_DMA_Start_IT+0x49c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d040      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a73      	ldr	r2, [pc, #460]	@ (80068c4 <HAL_DMA_Start_IT+0x4a0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d03b      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a71      	ldr	r2, [pc, #452]	@ (80068c8 <HAL_DMA_Start_IT+0x4a4>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d036      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a70      	ldr	r2, [pc, #448]	@ (80068cc <HAL_DMA_Start_IT+0x4a8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d031      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a6e      	ldr	r2, [pc, #440]	@ (80068d0 <HAL_DMA_Start_IT+0x4ac>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d02c      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a6d      	ldr	r2, [pc, #436]	@ (80068d4 <HAL_DMA_Start_IT+0x4b0>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d027      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a6b      	ldr	r2, [pc, #428]	@ (80068d8 <HAL_DMA_Start_IT+0x4b4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d022      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a6a      	ldr	r2, [pc, #424]	@ (80068dc <HAL_DMA_Start_IT+0x4b8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d01d      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a68      	ldr	r2, [pc, #416]	@ (80068e0 <HAL_DMA_Start_IT+0x4bc>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d018      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a67      	ldr	r2, [pc, #412]	@ (80068e4 <HAL_DMA_Start_IT+0x4c0>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d013      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a65      	ldr	r2, [pc, #404]	@ (80068e8 <HAL_DMA_Start_IT+0x4c4>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00e      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a64      	ldr	r2, [pc, #400]	@ (80068ec <HAL_DMA_Start_IT+0x4c8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d009      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a62      	ldr	r2, [pc, #392]	@ (80068f0 <HAL_DMA_Start_IT+0x4cc>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d004      	beq.n	8006774 <HAL_DMA_Start_IT+0x350>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a61      	ldr	r2, [pc, #388]	@ (80068f4 <HAL_DMA_Start_IT+0x4d0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d101      	bne.n	8006778 <HAL_DMA_Start_IT+0x354>
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <HAL_DMA_Start_IT+0x356>
 8006778:	2300      	movs	r3, #0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d01a      	beq.n	80067b4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d007      	beq.n	800679c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006796:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800679a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d007      	beq.n	80067b4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067b2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a37      	ldr	r2, [pc, #220]	@ (8006898 <HAL_DMA_Start_IT+0x474>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d04a      	beq.n	8006854 <HAL_DMA_Start_IT+0x430>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a36      	ldr	r2, [pc, #216]	@ (800689c <HAL_DMA_Start_IT+0x478>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d045      	beq.n	8006854 <HAL_DMA_Start_IT+0x430>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a34      	ldr	r2, [pc, #208]	@ (80068a0 <HAL_DMA_Start_IT+0x47c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d040      	beq.n	8006854 <HAL_DMA_Start_IT+0x430>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a33      	ldr	r2, [pc, #204]	@ (80068a4 <HAL_DMA_Start_IT+0x480>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d03b      	beq.n	8006854 <HAL_DMA_Start_IT+0x430>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a31      	ldr	r2, [pc, #196]	@ (80068a8 <HAL_DMA_Start_IT+0x484>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d036      	beq.n	8006854 <HAL_DMA_Start_IT+0x430>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a30      	ldr	r2, [pc, #192]	@ (80068ac <HAL_DMA_Start_IT+0x488>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d031      	beq.n	8006854 <HAL_DMA_Start_IT+0x430>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a2e      	ldr	r2, [pc, #184]	@ (80068b0 <HAL_DMA_Start_IT+0x48c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d02c      	beq.n	8006854 <HAL_DMA_Start_IT+0x430>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a2d      	ldr	r2, [pc, #180]	@ (80068b4 <HAL_DMA_Start_IT+0x490>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d027      	beq.n	8006854 <HAL_DMA_Start_IT+0x430>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a2b      	ldr	r2, [pc, #172]	@ (80068b8 <HAL_DMA_Start_IT+0x494>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d022      	beq.n	8006854 <HAL_DMA_Start_IT+0x430>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a2a      	ldr	r2, [pc, #168]	@ (80068bc <HAL_DMA_Start_IT+0x498>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d01d      	beq.n	8006854 <HAL_DMA_Start_IT+0x430>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a28      	ldr	r2, [pc, #160]	@ (80068c0 <HAL_DMA_Start_IT+0x49c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d018      	beq.n	8006854 <HAL_DMA_Start_IT+0x430>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a27      	ldr	r2, [pc, #156]	@ (80068c4 <HAL_DMA_Start_IT+0x4a0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d013      	beq.n	8006854 <HAL_DMA_Start_IT+0x430>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a25      	ldr	r2, [pc, #148]	@ (80068c8 <HAL_DMA_Start_IT+0x4a4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00e      	beq.n	8006854 <HAL_DMA_Start_IT+0x430>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a24      	ldr	r2, [pc, #144]	@ (80068cc <HAL_DMA_Start_IT+0x4a8>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d009      	beq.n	8006854 <HAL_DMA_Start_IT+0x430>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a22      	ldr	r2, [pc, #136]	@ (80068d0 <HAL_DMA_Start_IT+0x4ac>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <HAL_DMA_Start_IT+0x430>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a21      	ldr	r2, [pc, #132]	@ (80068d4 <HAL_DMA_Start_IT+0x4b0>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d108      	bne.n	8006866 <HAL_DMA_Start_IT+0x442>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0201 	orr.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	e012      	b.n	800688c <HAL_DMA_Start_IT+0x468>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f042 0201 	orr.w	r2, r2, #1
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	e009      	b.n	800688c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800687e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800688c:	7dfb      	ldrb	r3, [r7, #23]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40020010 	.word	0x40020010
 800689c:	40020028 	.word	0x40020028
 80068a0:	40020040 	.word	0x40020040
 80068a4:	40020058 	.word	0x40020058
 80068a8:	40020070 	.word	0x40020070
 80068ac:	40020088 	.word	0x40020088
 80068b0:	400200a0 	.word	0x400200a0
 80068b4:	400200b8 	.word	0x400200b8
 80068b8:	40020410 	.word	0x40020410
 80068bc:	40020428 	.word	0x40020428
 80068c0:	40020440 	.word	0x40020440
 80068c4:	40020458 	.word	0x40020458
 80068c8:	40020470 	.word	0x40020470
 80068cc:	40020488 	.word	0x40020488
 80068d0:	400204a0 	.word	0x400204a0
 80068d4:	400204b8 	.word	0x400204b8
 80068d8:	58025408 	.word	0x58025408
 80068dc:	5802541c 	.word	0x5802541c
 80068e0:	58025430 	.word	0x58025430
 80068e4:	58025444 	.word	0x58025444
 80068e8:	58025458 	.word	0x58025458
 80068ec:	5802546c 	.word	0x5802546c
 80068f0:	58025480 	.word	0x58025480
 80068f4:	58025494 	.word	0x58025494

080068f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e237      	b.n	8006d7a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d004      	beq.n	8006920 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2280      	movs	r2, #128	@ 0x80
 800691a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e22c      	b.n	8006d7a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a5c      	ldr	r2, [pc, #368]	@ (8006a98 <HAL_DMA_Abort_IT+0x1a0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d04a      	beq.n	80069c0 <HAL_DMA_Abort_IT+0xc8>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a5b      	ldr	r2, [pc, #364]	@ (8006a9c <HAL_DMA_Abort_IT+0x1a4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d045      	beq.n	80069c0 <HAL_DMA_Abort_IT+0xc8>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a59      	ldr	r2, [pc, #356]	@ (8006aa0 <HAL_DMA_Abort_IT+0x1a8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d040      	beq.n	80069c0 <HAL_DMA_Abort_IT+0xc8>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a58      	ldr	r2, [pc, #352]	@ (8006aa4 <HAL_DMA_Abort_IT+0x1ac>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d03b      	beq.n	80069c0 <HAL_DMA_Abort_IT+0xc8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a56      	ldr	r2, [pc, #344]	@ (8006aa8 <HAL_DMA_Abort_IT+0x1b0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d036      	beq.n	80069c0 <HAL_DMA_Abort_IT+0xc8>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a55      	ldr	r2, [pc, #340]	@ (8006aac <HAL_DMA_Abort_IT+0x1b4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d031      	beq.n	80069c0 <HAL_DMA_Abort_IT+0xc8>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a53      	ldr	r2, [pc, #332]	@ (8006ab0 <HAL_DMA_Abort_IT+0x1b8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d02c      	beq.n	80069c0 <HAL_DMA_Abort_IT+0xc8>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a52      	ldr	r2, [pc, #328]	@ (8006ab4 <HAL_DMA_Abort_IT+0x1bc>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d027      	beq.n	80069c0 <HAL_DMA_Abort_IT+0xc8>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a50      	ldr	r2, [pc, #320]	@ (8006ab8 <HAL_DMA_Abort_IT+0x1c0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d022      	beq.n	80069c0 <HAL_DMA_Abort_IT+0xc8>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a4f      	ldr	r2, [pc, #316]	@ (8006abc <HAL_DMA_Abort_IT+0x1c4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d01d      	beq.n	80069c0 <HAL_DMA_Abort_IT+0xc8>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a4d      	ldr	r2, [pc, #308]	@ (8006ac0 <HAL_DMA_Abort_IT+0x1c8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d018      	beq.n	80069c0 <HAL_DMA_Abort_IT+0xc8>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a4c      	ldr	r2, [pc, #304]	@ (8006ac4 <HAL_DMA_Abort_IT+0x1cc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d013      	beq.n	80069c0 <HAL_DMA_Abort_IT+0xc8>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a4a      	ldr	r2, [pc, #296]	@ (8006ac8 <HAL_DMA_Abort_IT+0x1d0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00e      	beq.n	80069c0 <HAL_DMA_Abort_IT+0xc8>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a49      	ldr	r2, [pc, #292]	@ (8006acc <HAL_DMA_Abort_IT+0x1d4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d009      	beq.n	80069c0 <HAL_DMA_Abort_IT+0xc8>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a47      	ldr	r2, [pc, #284]	@ (8006ad0 <HAL_DMA_Abort_IT+0x1d8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d004      	beq.n	80069c0 <HAL_DMA_Abort_IT+0xc8>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a46      	ldr	r2, [pc, #280]	@ (8006ad4 <HAL_DMA_Abort_IT+0x1dc>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d101      	bne.n	80069c4 <HAL_DMA_Abort_IT+0xcc>
 80069c0:	2301      	movs	r3, #1
 80069c2:	e000      	b.n	80069c6 <HAL_DMA_Abort_IT+0xce>
 80069c4:	2300      	movs	r3, #0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 8086 	beq.w	8006ad8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2204      	movs	r2, #4
 80069d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a2f      	ldr	r2, [pc, #188]	@ (8006a98 <HAL_DMA_Abort_IT+0x1a0>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d04a      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x17c>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a2e      	ldr	r2, [pc, #184]	@ (8006a9c <HAL_DMA_Abort_IT+0x1a4>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d045      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x17c>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a2c      	ldr	r2, [pc, #176]	@ (8006aa0 <HAL_DMA_Abort_IT+0x1a8>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d040      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x17c>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a2b      	ldr	r2, [pc, #172]	@ (8006aa4 <HAL_DMA_Abort_IT+0x1ac>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d03b      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x17c>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a29      	ldr	r2, [pc, #164]	@ (8006aa8 <HAL_DMA_Abort_IT+0x1b0>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d036      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x17c>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a28      	ldr	r2, [pc, #160]	@ (8006aac <HAL_DMA_Abort_IT+0x1b4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d031      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x17c>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a26      	ldr	r2, [pc, #152]	@ (8006ab0 <HAL_DMA_Abort_IT+0x1b8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d02c      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x17c>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a25      	ldr	r2, [pc, #148]	@ (8006ab4 <HAL_DMA_Abort_IT+0x1bc>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d027      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x17c>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a23      	ldr	r2, [pc, #140]	@ (8006ab8 <HAL_DMA_Abort_IT+0x1c0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d022      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x17c>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a22      	ldr	r2, [pc, #136]	@ (8006abc <HAL_DMA_Abort_IT+0x1c4>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d01d      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x17c>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a20      	ldr	r2, [pc, #128]	@ (8006ac0 <HAL_DMA_Abort_IT+0x1c8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d018      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x17c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1f      	ldr	r2, [pc, #124]	@ (8006ac4 <HAL_DMA_Abort_IT+0x1cc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d013      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x17c>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1d      	ldr	r2, [pc, #116]	@ (8006ac8 <HAL_DMA_Abort_IT+0x1d0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00e      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x17c>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8006acc <HAL_DMA_Abort_IT+0x1d4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d009      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x17c>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1a      	ldr	r2, [pc, #104]	@ (8006ad0 <HAL_DMA_Abort_IT+0x1d8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d004      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x17c>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a19      	ldr	r2, [pc, #100]	@ (8006ad4 <HAL_DMA_Abort_IT+0x1dc>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d108      	bne.n	8006a86 <HAL_DMA_Abort_IT+0x18e>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0201 	bic.w	r2, r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	e178      	b.n	8006d78 <HAL_DMA_Abort_IT+0x480>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0201 	bic.w	r2, r2, #1
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	e16f      	b.n	8006d78 <HAL_DMA_Abort_IT+0x480>
 8006a98:	40020010 	.word	0x40020010
 8006a9c:	40020028 	.word	0x40020028
 8006aa0:	40020040 	.word	0x40020040
 8006aa4:	40020058 	.word	0x40020058
 8006aa8:	40020070 	.word	0x40020070
 8006aac:	40020088 	.word	0x40020088
 8006ab0:	400200a0 	.word	0x400200a0
 8006ab4:	400200b8 	.word	0x400200b8
 8006ab8:	40020410 	.word	0x40020410
 8006abc:	40020428 	.word	0x40020428
 8006ac0:	40020440 	.word	0x40020440
 8006ac4:	40020458 	.word	0x40020458
 8006ac8:	40020470 	.word	0x40020470
 8006acc:	40020488 	.word	0x40020488
 8006ad0:	400204a0 	.word	0x400204a0
 8006ad4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 020e 	bic.w	r2, r2, #14
 8006ae6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a6c      	ldr	r2, [pc, #432]	@ (8006ca0 <HAL_DMA_Abort_IT+0x3a8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d04a      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x290>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a6b      	ldr	r2, [pc, #428]	@ (8006ca4 <HAL_DMA_Abort_IT+0x3ac>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d045      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x290>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a69      	ldr	r2, [pc, #420]	@ (8006ca8 <HAL_DMA_Abort_IT+0x3b0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d040      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x290>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a68      	ldr	r2, [pc, #416]	@ (8006cac <HAL_DMA_Abort_IT+0x3b4>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d03b      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x290>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a66      	ldr	r2, [pc, #408]	@ (8006cb0 <HAL_DMA_Abort_IT+0x3b8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d036      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x290>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a65      	ldr	r2, [pc, #404]	@ (8006cb4 <HAL_DMA_Abort_IT+0x3bc>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d031      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x290>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a63      	ldr	r2, [pc, #396]	@ (8006cb8 <HAL_DMA_Abort_IT+0x3c0>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d02c      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x290>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a62      	ldr	r2, [pc, #392]	@ (8006cbc <HAL_DMA_Abort_IT+0x3c4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d027      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x290>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a60      	ldr	r2, [pc, #384]	@ (8006cc0 <HAL_DMA_Abort_IT+0x3c8>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d022      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x290>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a5f      	ldr	r2, [pc, #380]	@ (8006cc4 <HAL_DMA_Abort_IT+0x3cc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d01d      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x290>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a5d      	ldr	r2, [pc, #372]	@ (8006cc8 <HAL_DMA_Abort_IT+0x3d0>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d018      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x290>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a5c      	ldr	r2, [pc, #368]	@ (8006ccc <HAL_DMA_Abort_IT+0x3d4>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d013      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x290>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a5a      	ldr	r2, [pc, #360]	@ (8006cd0 <HAL_DMA_Abort_IT+0x3d8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00e      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x290>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a59      	ldr	r2, [pc, #356]	@ (8006cd4 <HAL_DMA_Abort_IT+0x3dc>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d009      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x290>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a57      	ldr	r2, [pc, #348]	@ (8006cd8 <HAL_DMA_Abort_IT+0x3e0>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d004      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x290>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a56      	ldr	r2, [pc, #344]	@ (8006cdc <HAL_DMA_Abort_IT+0x3e4>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d108      	bne.n	8006b9a <HAL_DMA_Abort_IT+0x2a2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0201 	bic.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	e007      	b.n	8006baa <HAL_DMA_Abort_IT+0x2b2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0201 	bic.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a3c      	ldr	r2, [pc, #240]	@ (8006ca0 <HAL_DMA_Abort_IT+0x3a8>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d072      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8006ca4 <HAL_DMA_Abort_IT+0x3ac>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d06d      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a39      	ldr	r2, [pc, #228]	@ (8006ca8 <HAL_DMA_Abort_IT+0x3b0>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d068      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a37      	ldr	r2, [pc, #220]	@ (8006cac <HAL_DMA_Abort_IT+0x3b4>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d063      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a36      	ldr	r2, [pc, #216]	@ (8006cb0 <HAL_DMA_Abort_IT+0x3b8>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d05e      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a34      	ldr	r2, [pc, #208]	@ (8006cb4 <HAL_DMA_Abort_IT+0x3bc>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d059      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a33      	ldr	r2, [pc, #204]	@ (8006cb8 <HAL_DMA_Abort_IT+0x3c0>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d054      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a31      	ldr	r2, [pc, #196]	@ (8006cbc <HAL_DMA_Abort_IT+0x3c4>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d04f      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a30      	ldr	r2, [pc, #192]	@ (8006cc0 <HAL_DMA_Abort_IT+0x3c8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d04a      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a2e      	ldr	r2, [pc, #184]	@ (8006cc4 <HAL_DMA_Abort_IT+0x3cc>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d045      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a2d      	ldr	r2, [pc, #180]	@ (8006cc8 <HAL_DMA_Abort_IT+0x3d0>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d040      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8006ccc <HAL_DMA_Abort_IT+0x3d4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d03b      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a2a      	ldr	r2, [pc, #168]	@ (8006cd0 <HAL_DMA_Abort_IT+0x3d8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d036      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a28      	ldr	r2, [pc, #160]	@ (8006cd4 <HAL_DMA_Abort_IT+0x3dc>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d031      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a27      	ldr	r2, [pc, #156]	@ (8006cd8 <HAL_DMA_Abort_IT+0x3e0>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d02c      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a25      	ldr	r2, [pc, #148]	@ (8006cdc <HAL_DMA_Abort_IT+0x3e4>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d027      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a24      	ldr	r2, [pc, #144]	@ (8006ce0 <HAL_DMA_Abort_IT+0x3e8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d022      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a22      	ldr	r2, [pc, #136]	@ (8006ce4 <HAL_DMA_Abort_IT+0x3ec>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d01d      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a21      	ldr	r2, [pc, #132]	@ (8006ce8 <HAL_DMA_Abort_IT+0x3f0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d018      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006cec <HAL_DMA_Abort_IT+0x3f4>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d013      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a1e      	ldr	r2, [pc, #120]	@ (8006cf0 <HAL_DMA_Abort_IT+0x3f8>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d00e      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a1c      	ldr	r2, [pc, #112]	@ (8006cf4 <HAL_DMA_Abort_IT+0x3fc>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d009      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006cf8 <HAL_DMA_Abort_IT+0x400>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d004      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x3a2>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a19      	ldr	r2, [pc, #100]	@ (8006cfc <HAL_DMA_Abort_IT+0x404>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d132      	bne.n	8006d00 <HAL_DMA_Abort_IT+0x408>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e031      	b.n	8006d02 <HAL_DMA_Abort_IT+0x40a>
 8006c9e:	bf00      	nop
 8006ca0:	40020010 	.word	0x40020010
 8006ca4:	40020028 	.word	0x40020028
 8006ca8:	40020040 	.word	0x40020040
 8006cac:	40020058 	.word	0x40020058
 8006cb0:	40020070 	.word	0x40020070
 8006cb4:	40020088 	.word	0x40020088
 8006cb8:	400200a0 	.word	0x400200a0
 8006cbc:	400200b8 	.word	0x400200b8
 8006cc0:	40020410 	.word	0x40020410
 8006cc4:	40020428 	.word	0x40020428
 8006cc8:	40020440 	.word	0x40020440
 8006ccc:	40020458 	.word	0x40020458
 8006cd0:	40020470 	.word	0x40020470
 8006cd4:	40020488 	.word	0x40020488
 8006cd8:	400204a0 	.word	0x400204a0
 8006cdc:	400204b8 	.word	0x400204b8
 8006ce0:	58025408 	.word	0x58025408
 8006ce4:	5802541c 	.word	0x5802541c
 8006ce8:	58025430 	.word	0x58025430
 8006cec:	58025444 	.word	0x58025444
 8006cf0:	58025458 	.word	0x58025458
 8006cf4:	5802546c 	.word	0x5802546c
 8006cf8:	58025480 	.word	0x58025480
 8006cfc:	58025494 	.word	0x58025494
 8006d00:	2300      	movs	r3, #0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d028      	beq.n	8006d58 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d14:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d1a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d20:	f003 031f 	and.w	r3, r3, #31
 8006d24:	2201      	movs	r2, #1
 8006d26:	409a      	lsls	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006d34:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00c      	beq.n	8006d58 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d4c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006d56:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop

08006d84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08a      	sub	sp, #40	@ 0x28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d90:	4b67      	ldr	r3, [pc, #412]	@ (8006f30 <HAL_DMA_IRQHandler+0x1ac>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a67      	ldr	r2, [pc, #412]	@ (8006f34 <HAL_DMA_IRQHandler+0x1b0>)
 8006d96:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9a:	0a9b      	lsrs	r3, r3, #10
 8006d9c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a5f      	ldr	r2, [pc, #380]	@ (8006f38 <HAL_DMA_IRQHandler+0x1b4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d04a      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xd2>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a5d      	ldr	r2, [pc, #372]	@ (8006f3c <HAL_DMA_IRQHandler+0x1b8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d045      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xd2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a5c      	ldr	r2, [pc, #368]	@ (8006f40 <HAL_DMA_IRQHandler+0x1bc>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d040      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xd2>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a5a      	ldr	r2, [pc, #360]	@ (8006f44 <HAL_DMA_IRQHandler+0x1c0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d03b      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xd2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a59      	ldr	r2, [pc, #356]	@ (8006f48 <HAL_DMA_IRQHandler+0x1c4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d036      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xd2>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a57      	ldr	r2, [pc, #348]	@ (8006f4c <HAL_DMA_IRQHandler+0x1c8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d031      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xd2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a56      	ldr	r2, [pc, #344]	@ (8006f50 <HAL_DMA_IRQHandler+0x1cc>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d02c      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xd2>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a54      	ldr	r2, [pc, #336]	@ (8006f54 <HAL_DMA_IRQHandler+0x1d0>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d027      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xd2>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a53      	ldr	r2, [pc, #332]	@ (8006f58 <HAL_DMA_IRQHandler+0x1d4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d022      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xd2>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a51      	ldr	r2, [pc, #324]	@ (8006f5c <HAL_DMA_IRQHandler+0x1d8>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d01d      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xd2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a50      	ldr	r2, [pc, #320]	@ (8006f60 <HAL_DMA_IRQHandler+0x1dc>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d018      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xd2>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a4e      	ldr	r2, [pc, #312]	@ (8006f64 <HAL_DMA_IRQHandler+0x1e0>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xd2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a4d      	ldr	r2, [pc, #308]	@ (8006f68 <HAL_DMA_IRQHandler+0x1e4>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00e      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xd2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a4b      	ldr	r2, [pc, #300]	@ (8006f6c <HAL_DMA_IRQHandler+0x1e8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d009      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xd2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a4a      	ldr	r2, [pc, #296]	@ (8006f70 <HAL_DMA_IRQHandler+0x1ec>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xd2>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a48      	ldr	r2, [pc, #288]	@ (8006f74 <HAL_DMA_IRQHandler+0x1f0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d101      	bne.n	8006e5a <HAL_DMA_IRQHandler+0xd6>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <HAL_DMA_IRQHandler+0xd8>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 842b 	beq.w	80076b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e66:	f003 031f 	and.w	r3, r3, #31
 8006e6a:	2208      	movs	r2, #8
 8006e6c:	409a      	lsls	r2, r3
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	4013      	ands	r3, r2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 80a2 	beq.w	8006fbc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8006f38 <HAL_DMA_IRQHandler+0x1b4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d04a      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x194>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a2d      	ldr	r2, [pc, #180]	@ (8006f3c <HAL_DMA_IRQHandler+0x1b8>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d045      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x194>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a2b      	ldr	r2, [pc, #172]	@ (8006f40 <HAL_DMA_IRQHandler+0x1bc>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d040      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x194>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8006f44 <HAL_DMA_IRQHandler+0x1c0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d03b      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x194>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a28      	ldr	r2, [pc, #160]	@ (8006f48 <HAL_DMA_IRQHandler+0x1c4>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d036      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x194>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a27      	ldr	r2, [pc, #156]	@ (8006f4c <HAL_DMA_IRQHandler+0x1c8>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d031      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x194>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a25      	ldr	r2, [pc, #148]	@ (8006f50 <HAL_DMA_IRQHandler+0x1cc>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d02c      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x194>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a24      	ldr	r2, [pc, #144]	@ (8006f54 <HAL_DMA_IRQHandler+0x1d0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d027      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x194>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a22      	ldr	r2, [pc, #136]	@ (8006f58 <HAL_DMA_IRQHandler+0x1d4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d022      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x194>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a21      	ldr	r2, [pc, #132]	@ (8006f5c <HAL_DMA_IRQHandler+0x1d8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d01d      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x194>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8006f60 <HAL_DMA_IRQHandler+0x1dc>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d018      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x194>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a1e      	ldr	r2, [pc, #120]	@ (8006f64 <HAL_DMA_IRQHandler+0x1e0>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d013      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x194>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8006f68 <HAL_DMA_IRQHandler+0x1e4>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00e      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x194>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a1b      	ldr	r2, [pc, #108]	@ (8006f6c <HAL_DMA_IRQHandler+0x1e8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d009      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x194>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a19      	ldr	r2, [pc, #100]	@ (8006f70 <HAL_DMA_IRQHandler+0x1ec>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d004      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x194>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a18      	ldr	r2, [pc, #96]	@ (8006f74 <HAL_DMA_IRQHandler+0x1f0>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d12f      	bne.n	8006f78 <HAL_DMA_IRQHandler+0x1f4>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	bf14      	ite	ne
 8006f26:	2301      	movne	r3, #1
 8006f28:	2300      	moveq	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	e02e      	b.n	8006f8c <HAL_DMA_IRQHandler+0x208>
 8006f2e:	bf00      	nop
 8006f30:	24000004 	.word	0x24000004
 8006f34:	1b4e81b5 	.word	0x1b4e81b5
 8006f38:	40020010 	.word	0x40020010
 8006f3c:	40020028 	.word	0x40020028
 8006f40:	40020040 	.word	0x40020040
 8006f44:	40020058 	.word	0x40020058
 8006f48:	40020070 	.word	0x40020070
 8006f4c:	40020088 	.word	0x40020088
 8006f50:	400200a0 	.word	0x400200a0
 8006f54:	400200b8 	.word	0x400200b8
 8006f58:	40020410 	.word	0x40020410
 8006f5c:	40020428 	.word	0x40020428
 8006f60:	40020440 	.word	0x40020440
 8006f64:	40020458 	.word	0x40020458
 8006f68:	40020470 	.word	0x40020470
 8006f6c:	40020488 	.word	0x40020488
 8006f70:	400204a0 	.word	0x400204a0
 8006f74:	400204b8 	.word	0x400204b8
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0308 	and.w	r3, r3, #8
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	bf14      	ite	ne
 8006f86:	2301      	movne	r3, #1
 8006f88:	2300      	moveq	r3, #0
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d015      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0204 	bic.w	r2, r2, #4
 8006f9e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	2208      	movs	r2, #8
 8006faa:	409a      	lsls	r2, r3
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb4:	f043 0201 	orr.w	r2, r3, #1
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d06e      	beq.n	80070b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a69      	ldr	r2, [pc, #420]	@ (800717c <HAL_DMA_IRQHandler+0x3f8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d04a      	beq.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a67      	ldr	r2, [pc, #412]	@ (8007180 <HAL_DMA_IRQHandler+0x3fc>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d045      	beq.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a66      	ldr	r2, [pc, #408]	@ (8007184 <HAL_DMA_IRQHandler+0x400>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d040      	beq.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a64      	ldr	r2, [pc, #400]	@ (8007188 <HAL_DMA_IRQHandler+0x404>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d03b      	beq.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a63      	ldr	r2, [pc, #396]	@ (800718c <HAL_DMA_IRQHandler+0x408>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d036      	beq.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a61      	ldr	r2, [pc, #388]	@ (8007190 <HAL_DMA_IRQHandler+0x40c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d031      	beq.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a60      	ldr	r2, [pc, #384]	@ (8007194 <HAL_DMA_IRQHandler+0x410>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d02c      	beq.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a5e      	ldr	r2, [pc, #376]	@ (8007198 <HAL_DMA_IRQHandler+0x414>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d027      	beq.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a5d      	ldr	r2, [pc, #372]	@ (800719c <HAL_DMA_IRQHandler+0x418>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d022      	beq.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a5b      	ldr	r2, [pc, #364]	@ (80071a0 <HAL_DMA_IRQHandler+0x41c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d01d      	beq.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a5a      	ldr	r2, [pc, #360]	@ (80071a4 <HAL_DMA_IRQHandler+0x420>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d018      	beq.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a58      	ldr	r2, [pc, #352]	@ (80071a8 <HAL_DMA_IRQHandler+0x424>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d013      	beq.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a57      	ldr	r2, [pc, #348]	@ (80071ac <HAL_DMA_IRQHandler+0x428>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00e      	beq.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a55      	ldr	r2, [pc, #340]	@ (80071b0 <HAL_DMA_IRQHandler+0x42c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d009      	beq.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a54      	ldr	r2, [pc, #336]	@ (80071b4 <HAL_DMA_IRQHandler+0x430>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d004      	beq.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a52      	ldr	r2, [pc, #328]	@ (80071b8 <HAL_DMA_IRQHandler+0x434>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d10a      	bne.n	8007088 <HAL_DMA_IRQHandler+0x304>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800707c:	2b00      	cmp	r3, #0
 800707e:	bf14      	ite	ne
 8007080:	2301      	movne	r3, #1
 8007082:	2300      	moveq	r3, #0
 8007084:	b2db      	uxtb	r3, r3
 8007086:	e003      	b.n	8007090 <HAL_DMA_IRQHandler+0x30c>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2300      	movs	r3, #0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00d      	beq.n	80070b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007098:	f003 031f 	and.w	r3, r3, #31
 800709c:	2201      	movs	r2, #1
 800709e:	409a      	lsls	r2, r3
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070a8:	f043 0202 	orr.w	r2, r3, #2
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070b4:	f003 031f 	and.w	r3, r3, #31
 80070b8:	2204      	movs	r2, #4
 80070ba:	409a      	lsls	r2, r3
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	4013      	ands	r3, r2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 808f 	beq.w	80071e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a2c      	ldr	r2, [pc, #176]	@ (800717c <HAL_DMA_IRQHandler+0x3f8>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d04a      	beq.n	8007166 <HAL_DMA_IRQHandler+0x3e2>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007180 <HAL_DMA_IRQHandler+0x3fc>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d045      	beq.n	8007166 <HAL_DMA_IRQHandler+0x3e2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a29      	ldr	r2, [pc, #164]	@ (8007184 <HAL_DMA_IRQHandler+0x400>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d040      	beq.n	8007166 <HAL_DMA_IRQHandler+0x3e2>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a27      	ldr	r2, [pc, #156]	@ (8007188 <HAL_DMA_IRQHandler+0x404>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d03b      	beq.n	8007166 <HAL_DMA_IRQHandler+0x3e2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a26      	ldr	r2, [pc, #152]	@ (800718c <HAL_DMA_IRQHandler+0x408>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d036      	beq.n	8007166 <HAL_DMA_IRQHandler+0x3e2>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a24      	ldr	r2, [pc, #144]	@ (8007190 <HAL_DMA_IRQHandler+0x40c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d031      	beq.n	8007166 <HAL_DMA_IRQHandler+0x3e2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a23      	ldr	r2, [pc, #140]	@ (8007194 <HAL_DMA_IRQHandler+0x410>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d02c      	beq.n	8007166 <HAL_DMA_IRQHandler+0x3e2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a21      	ldr	r2, [pc, #132]	@ (8007198 <HAL_DMA_IRQHandler+0x414>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d027      	beq.n	8007166 <HAL_DMA_IRQHandler+0x3e2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a20      	ldr	r2, [pc, #128]	@ (800719c <HAL_DMA_IRQHandler+0x418>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d022      	beq.n	8007166 <HAL_DMA_IRQHandler+0x3e2>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1e      	ldr	r2, [pc, #120]	@ (80071a0 <HAL_DMA_IRQHandler+0x41c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d01d      	beq.n	8007166 <HAL_DMA_IRQHandler+0x3e2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a1d      	ldr	r2, [pc, #116]	@ (80071a4 <HAL_DMA_IRQHandler+0x420>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d018      	beq.n	8007166 <HAL_DMA_IRQHandler+0x3e2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a1b      	ldr	r2, [pc, #108]	@ (80071a8 <HAL_DMA_IRQHandler+0x424>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d013      	beq.n	8007166 <HAL_DMA_IRQHandler+0x3e2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a1a      	ldr	r2, [pc, #104]	@ (80071ac <HAL_DMA_IRQHandler+0x428>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d00e      	beq.n	8007166 <HAL_DMA_IRQHandler+0x3e2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a18      	ldr	r2, [pc, #96]	@ (80071b0 <HAL_DMA_IRQHandler+0x42c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d009      	beq.n	8007166 <HAL_DMA_IRQHandler+0x3e2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a17      	ldr	r2, [pc, #92]	@ (80071b4 <HAL_DMA_IRQHandler+0x430>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d004      	beq.n	8007166 <HAL_DMA_IRQHandler+0x3e2>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a15      	ldr	r2, [pc, #84]	@ (80071b8 <HAL_DMA_IRQHandler+0x434>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d12a      	bne.n	80071bc <HAL_DMA_IRQHandler+0x438>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b00      	cmp	r3, #0
 8007172:	bf14      	ite	ne
 8007174:	2301      	movne	r3, #1
 8007176:	2300      	moveq	r3, #0
 8007178:	b2db      	uxtb	r3, r3
 800717a:	e023      	b.n	80071c4 <HAL_DMA_IRQHandler+0x440>
 800717c:	40020010 	.word	0x40020010
 8007180:	40020028 	.word	0x40020028
 8007184:	40020040 	.word	0x40020040
 8007188:	40020058 	.word	0x40020058
 800718c:	40020070 	.word	0x40020070
 8007190:	40020088 	.word	0x40020088
 8007194:	400200a0 	.word	0x400200a0
 8007198:	400200b8 	.word	0x400200b8
 800719c:	40020410 	.word	0x40020410
 80071a0:	40020428 	.word	0x40020428
 80071a4:	40020440 	.word	0x40020440
 80071a8:	40020458 	.word	0x40020458
 80071ac:	40020470 	.word	0x40020470
 80071b0:	40020488 	.word	0x40020488
 80071b4:	400204a0 	.word	0x400204a0
 80071b8:	400204b8 	.word	0x400204b8
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2300      	movs	r3, #0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00d      	beq.n	80071e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071cc:	f003 031f 	and.w	r3, r3, #31
 80071d0:	2204      	movs	r2, #4
 80071d2:	409a      	lsls	r2, r3
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071dc:	f043 0204 	orr.w	r2, r3, #4
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071e8:	f003 031f 	and.w	r3, r3, #31
 80071ec:	2210      	movs	r2, #16
 80071ee:	409a      	lsls	r2, r3
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	4013      	ands	r3, r2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 80a6 	beq.w	8007346 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a85      	ldr	r2, [pc, #532]	@ (8007414 <HAL_DMA_IRQHandler+0x690>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d04a      	beq.n	800729a <HAL_DMA_IRQHandler+0x516>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a83      	ldr	r2, [pc, #524]	@ (8007418 <HAL_DMA_IRQHandler+0x694>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d045      	beq.n	800729a <HAL_DMA_IRQHandler+0x516>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a82      	ldr	r2, [pc, #520]	@ (800741c <HAL_DMA_IRQHandler+0x698>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d040      	beq.n	800729a <HAL_DMA_IRQHandler+0x516>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a80      	ldr	r2, [pc, #512]	@ (8007420 <HAL_DMA_IRQHandler+0x69c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d03b      	beq.n	800729a <HAL_DMA_IRQHandler+0x516>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a7f      	ldr	r2, [pc, #508]	@ (8007424 <HAL_DMA_IRQHandler+0x6a0>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d036      	beq.n	800729a <HAL_DMA_IRQHandler+0x516>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a7d      	ldr	r2, [pc, #500]	@ (8007428 <HAL_DMA_IRQHandler+0x6a4>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d031      	beq.n	800729a <HAL_DMA_IRQHandler+0x516>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a7c      	ldr	r2, [pc, #496]	@ (800742c <HAL_DMA_IRQHandler+0x6a8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d02c      	beq.n	800729a <HAL_DMA_IRQHandler+0x516>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a7a      	ldr	r2, [pc, #488]	@ (8007430 <HAL_DMA_IRQHandler+0x6ac>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d027      	beq.n	800729a <HAL_DMA_IRQHandler+0x516>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a79      	ldr	r2, [pc, #484]	@ (8007434 <HAL_DMA_IRQHandler+0x6b0>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d022      	beq.n	800729a <HAL_DMA_IRQHandler+0x516>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a77      	ldr	r2, [pc, #476]	@ (8007438 <HAL_DMA_IRQHandler+0x6b4>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d01d      	beq.n	800729a <HAL_DMA_IRQHandler+0x516>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a76      	ldr	r2, [pc, #472]	@ (800743c <HAL_DMA_IRQHandler+0x6b8>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d018      	beq.n	800729a <HAL_DMA_IRQHandler+0x516>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a74      	ldr	r2, [pc, #464]	@ (8007440 <HAL_DMA_IRQHandler+0x6bc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d013      	beq.n	800729a <HAL_DMA_IRQHandler+0x516>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a73      	ldr	r2, [pc, #460]	@ (8007444 <HAL_DMA_IRQHandler+0x6c0>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00e      	beq.n	800729a <HAL_DMA_IRQHandler+0x516>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a71      	ldr	r2, [pc, #452]	@ (8007448 <HAL_DMA_IRQHandler+0x6c4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d009      	beq.n	800729a <HAL_DMA_IRQHandler+0x516>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a70      	ldr	r2, [pc, #448]	@ (800744c <HAL_DMA_IRQHandler+0x6c8>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d004      	beq.n	800729a <HAL_DMA_IRQHandler+0x516>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a6e      	ldr	r2, [pc, #440]	@ (8007450 <HAL_DMA_IRQHandler+0x6cc>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d10a      	bne.n	80072b0 <HAL_DMA_IRQHandler+0x52c>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	bf14      	ite	ne
 80072a8:	2301      	movne	r3, #1
 80072aa:	2300      	moveq	r3, #0
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	e009      	b.n	80072c4 <HAL_DMA_IRQHandler+0x540>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0304 	and.w	r3, r3, #4
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	bf14      	ite	ne
 80072be:	2301      	movne	r3, #1
 80072c0:	2300      	moveq	r3, #0
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d03e      	beq.n	8007346 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072cc:	f003 031f 	and.w	r3, r3, #31
 80072d0:	2210      	movs	r2, #16
 80072d2:	409a      	lsls	r2, r3
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d018      	beq.n	8007318 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d108      	bne.n	8007306 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d024      	beq.n	8007346 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
 8007304:	e01f      	b.n	8007346 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800730a:	2b00      	cmp	r3, #0
 800730c:	d01b      	beq.n	8007346 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
 8007316:	e016      	b.n	8007346 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007322:	2b00      	cmp	r3, #0
 8007324:	d107      	bne.n	8007336 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0208 	bic.w	r2, r2, #8
 8007334:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800734a:	f003 031f 	and.w	r3, r3, #31
 800734e:	2220      	movs	r2, #32
 8007350:	409a      	lsls	r2, r3
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	4013      	ands	r3, r2
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 8110 	beq.w	800757c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a2c      	ldr	r2, [pc, #176]	@ (8007414 <HAL_DMA_IRQHandler+0x690>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d04a      	beq.n	80073fc <HAL_DMA_IRQHandler+0x678>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a2b      	ldr	r2, [pc, #172]	@ (8007418 <HAL_DMA_IRQHandler+0x694>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d045      	beq.n	80073fc <HAL_DMA_IRQHandler+0x678>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a29      	ldr	r2, [pc, #164]	@ (800741c <HAL_DMA_IRQHandler+0x698>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d040      	beq.n	80073fc <HAL_DMA_IRQHandler+0x678>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a28      	ldr	r2, [pc, #160]	@ (8007420 <HAL_DMA_IRQHandler+0x69c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d03b      	beq.n	80073fc <HAL_DMA_IRQHandler+0x678>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a26      	ldr	r2, [pc, #152]	@ (8007424 <HAL_DMA_IRQHandler+0x6a0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d036      	beq.n	80073fc <HAL_DMA_IRQHandler+0x678>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a25      	ldr	r2, [pc, #148]	@ (8007428 <HAL_DMA_IRQHandler+0x6a4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d031      	beq.n	80073fc <HAL_DMA_IRQHandler+0x678>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a23      	ldr	r2, [pc, #140]	@ (800742c <HAL_DMA_IRQHandler+0x6a8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d02c      	beq.n	80073fc <HAL_DMA_IRQHandler+0x678>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a22      	ldr	r2, [pc, #136]	@ (8007430 <HAL_DMA_IRQHandler+0x6ac>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d027      	beq.n	80073fc <HAL_DMA_IRQHandler+0x678>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a20      	ldr	r2, [pc, #128]	@ (8007434 <HAL_DMA_IRQHandler+0x6b0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d022      	beq.n	80073fc <HAL_DMA_IRQHandler+0x678>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a1f      	ldr	r2, [pc, #124]	@ (8007438 <HAL_DMA_IRQHandler+0x6b4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d01d      	beq.n	80073fc <HAL_DMA_IRQHandler+0x678>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a1d      	ldr	r2, [pc, #116]	@ (800743c <HAL_DMA_IRQHandler+0x6b8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d018      	beq.n	80073fc <HAL_DMA_IRQHandler+0x678>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007440 <HAL_DMA_IRQHandler+0x6bc>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d013      	beq.n	80073fc <HAL_DMA_IRQHandler+0x678>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a1a      	ldr	r2, [pc, #104]	@ (8007444 <HAL_DMA_IRQHandler+0x6c0>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00e      	beq.n	80073fc <HAL_DMA_IRQHandler+0x678>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a19      	ldr	r2, [pc, #100]	@ (8007448 <HAL_DMA_IRQHandler+0x6c4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d009      	beq.n	80073fc <HAL_DMA_IRQHandler+0x678>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a17      	ldr	r2, [pc, #92]	@ (800744c <HAL_DMA_IRQHandler+0x6c8>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d004      	beq.n	80073fc <HAL_DMA_IRQHandler+0x678>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a16      	ldr	r2, [pc, #88]	@ (8007450 <HAL_DMA_IRQHandler+0x6cc>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d12b      	bne.n	8007454 <HAL_DMA_IRQHandler+0x6d0>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0310 	and.w	r3, r3, #16
 8007406:	2b00      	cmp	r3, #0
 8007408:	bf14      	ite	ne
 800740a:	2301      	movne	r3, #1
 800740c:	2300      	moveq	r3, #0
 800740e:	b2db      	uxtb	r3, r3
 8007410:	e02a      	b.n	8007468 <HAL_DMA_IRQHandler+0x6e4>
 8007412:	bf00      	nop
 8007414:	40020010 	.word	0x40020010
 8007418:	40020028 	.word	0x40020028
 800741c:	40020040 	.word	0x40020040
 8007420:	40020058 	.word	0x40020058
 8007424:	40020070 	.word	0x40020070
 8007428:	40020088 	.word	0x40020088
 800742c:	400200a0 	.word	0x400200a0
 8007430:	400200b8 	.word	0x400200b8
 8007434:	40020410 	.word	0x40020410
 8007438:	40020428 	.word	0x40020428
 800743c:	40020440 	.word	0x40020440
 8007440:	40020458 	.word	0x40020458
 8007444:	40020470 	.word	0x40020470
 8007448:	40020488 	.word	0x40020488
 800744c:	400204a0 	.word	0x400204a0
 8007450:	400204b8 	.word	0x400204b8
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	bf14      	ite	ne
 8007462:	2301      	movne	r3, #1
 8007464:	2300      	moveq	r3, #0
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 8087 	beq.w	800757c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007472:	f003 031f 	and.w	r3, r3, #31
 8007476:	2220      	movs	r2, #32
 8007478:	409a      	lsls	r2, r3
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b04      	cmp	r3, #4
 8007488:	d139      	bne.n	80074fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0216 	bic.w	r2, r2, #22
 8007498:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695a      	ldr	r2, [r3, #20]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d103      	bne.n	80074ba <HAL_DMA_IRQHandler+0x736>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d007      	beq.n	80074ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0208 	bic.w	r2, r2, #8
 80074c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ce:	f003 031f 	and.w	r3, r3, #31
 80074d2:	223f      	movs	r2, #63	@ 0x3f
 80074d4:	409a      	lsls	r2, r3
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 834a 	beq.w	8007b88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	4798      	blx	r3
          }
          return;
 80074fc:	e344      	b.n	8007b88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d018      	beq.n	800753e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d108      	bne.n	800752c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800751e:	2b00      	cmp	r3, #0
 8007520:	d02c      	beq.n	800757c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	4798      	blx	r3
 800752a:	e027      	b.n	800757c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007530:	2b00      	cmp	r3, #0
 8007532:	d023      	beq.n	800757c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
 800753c:	e01e      	b.n	800757c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10f      	bne.n	800756c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0210 	bic.w	r2, r2, #16
 800755a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 8306 	beq.w	8007b92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 8088 	beq.w	80076a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2204      	movs	r2, #4
 8007598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a7a      	ldr	r2, [pc, #488]	@ (800778c <HAL_DMA_IRQHandler+0xa08>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d04a      	beq.n	800763c <HAL_DMA_IRQHandler+0x8b8>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a79      	ldr	r2, [pc, #484]	@ (8007790 <HAL_DMA_IRQHandler+0xa0c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d045      	beq.n	800763c <HAL_DMA_IRQHandler+0x8b8>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a77      	ldr	r2, [pc, #476]	@ (8007794 <HAL_DMA_IRQHandler+0xa10>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d040      	beq.n	800763c <HAL_DMA_IRQHandler+0x8b8>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a76      	ldr	r2, [pc, #472]	@ (8007798 <HAL_DMA_IRQHandler+0xa14>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d03b      	beq.n	800763c <HAL_DMA_IRQHandler+0x8b8>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a74      	ldr	r2, [pc, #464]	@ (800779c <HAL_DMA_IRQHandler+0xa18>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d036      	beq.n	800763c <HAL_DMA_IRQHandler+0x8b8>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a73      	ldr	r2, [pc, #460]	@ (80077a0 <HAL_DMA_IRQHandler+0xa1c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d031      	beq.n	800763c <HAL_DMA_IRQHandler+0x8b8>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a71      	ldr	r2, [pc, #452]	@ (80077a4 <HAL_DMA_IRQHandler+0xa20>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d02c      	beq.n	800763c <HAL_DMA_IRQHandler+0x8b8>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a70      	ldr	r2, [pc, #448]	@ (80077a8 <HAL_DMA_IRQHandler+0xa24>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d027      	beq.n	800763c <HAL_DMA_IRQHandler+0x8b8>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a6e      	ldr	r2, [pc, #440]	@ (80077ac <HAL_DMA_IRQHandler+0xa28>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d022      	beq.n	800763c <HAL_DMA_IRQHandler+0x8b8>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a6d      	ldr	r2, [pc, #436]	@ (80077b0 <HAL_DMA_IRQHandler+0xa2c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d01d      	beq.n	800763c <HAL_DMA_IRQHandler+0x8b8>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a6b      	ldr	r2, [pc, #428]	@ (80077b4 <HAL_DMA_IRQHandler+0xa30>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d018      	beq.n	800763c <HAL_DMA_IRQHandler+0x8b8>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a6a      	ldr	r2, [pc, #424]	@ (80077b8 <HAL_DMA_IRQHandler+0xa34>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d013      	beq.n	800763c <HAL_DMA_IRQHandler+0x8b8>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a68      	ldr	r2, [pc, #416]	@ (80077bc <HAL_DMA_IRQHandler+0xa38>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d00e      	beq.n	800763c <HAL_DMA_IRQHandler+0x8b8>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a67      	ldr	r2, [pc, #412]	@ (80077c0 <HAL_DMA_IRQHandler+0xa3c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d009      	beq.n	800763c <HAL_DMA_IRQHandler+0x8b8>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a65      	ldr	r2, [pc, #404]	@ (80077c4 <HAL_DMA_IRQHandler+0xa40>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d004      	beq.n	800763c <HAL_DMA_IRQHandler+0x8b8>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a64      	ldr	r2, [pc, #400]	@ (80077c8 <HAL_DMA_IRQHandler+0xa44>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d108      	bne.n	800764e <HAL_DMA_IRQHandler+0x8ca>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0201 	bic.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	e007      	b.n	800765e <HAL_DMA_IRQHandler+0x8da>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0201 	bic.w	r2, r2, #1
 800765c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3301      	adds	r3, #1
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007666:	429a      	cmp	r2, r3
 8007668:	d307      	bcc.n	800767a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1f2      	bne.n	800765e <HAL_DMA_IRQHandler+0x8da>
 8007678:	e000      	b.n	800767c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800767a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d004      	beq.n	8007694 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2203      	movs	r2, #3
 800768e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007692:	e003      	b.n	800769c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 8272 	beq.w	8007b92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
 80076b6:	e26c      	b.n	8007b92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a43      	ldr	r2, [pc, #268]	@ (80077cc <HAL_DMA_IRQHandler+0xa48>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d022      	beq.n	8007708 <HAL_DMA_IRQHandler+0x984>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a42      	ldr	r2, [pc, #264]	@ (80077d0 <HAL_DMA_IRQHandler+0xa4c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d01d      	beq.n	8007708 <HAL_DMA_IRQHandler+0x984>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a40      	ldr	r2, [pc, #256]	@ (80077d4 <HAL_DMA_IRQHandler+0xa50>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d018      	beq.n	8007708 <HAL_DMA_IRQHandler+0x984>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a3f      	ldr	r2, [pc, #252]	@ (80077d8 <HAL_DMA_IRQHandler+0xa54>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d013      	beq.n	8007708 <HAL_DMA_IRQHandler+0x984>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a3d      	ldr	r2, [pc, #244]	@ (80077dc <HAL_DMA_IRQHandler+0xa58>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d00e      	beq.n	8007708 <HAL_DMA_IRQHandler+0x984>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a3c      	ldr	r2, [pc, #240]	@ (80077e0 <HAL_DMA_IRQHandler+0xa5c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d009      	beq.n	8007708 <HAL_DMA_IRQHandler+0x984>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a3a      	ldr	r2, [pc, #232]	@ (80077e4 <HAL_DMA_IRQHandler+0xa60>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d004      	beq.n	8007708 <HAL_DMA_IRQHandler+0x984>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a39      	ldr	r2, [pc, #228]	@ (80077e8 <HAL_DMA_IRQHandler+0xa64>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d101      	bne.n	800770c <HAL_DMA_IRQHandler+0x988>
 8007708:	2301      	movs	r3, #1
 800770a:	e000      	b.n	800770e <HAL_DMA_IRQHandler+0x98a>
 800770c:	2300      	movs	r3, #0
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 823f 	beq.w	8007b92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007720:	f003 031f 	and.w	r3, r3, #31
 8007724:	2204      	movs	r2, #4
 8007726:	409a      	lsls	r2, r3
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	4013      	ands	r3, r2
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 80cd 	beq.w	80078cc <HAL_DMA_IRQHandler+0xb48>
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 80c7 	beq.w	80078cc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007742:	f003 031f 	and.w	r3, r3, #31
 8007746:	2204      	movs	r2, #4
 8007748:	409a      	lsls	r2, r3
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d049      	beq.n	80077ec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d109      	bne.n	8007776 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 8210 	beq.w	8007b8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007774:	e20a      	b.n	8007b8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 8206 	beq.w	8007b8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007788:	e200      	b.n	8007b8c <HAL_DMA_IRQHandler+0xe08>
 800778a:	bf00      	nop
 800778c:	40020010 	.word	0x40020010
 8007790:	40020028 	.word	0x40020028
 8007794:	40020040 	.word	0x40020040
 8007798:	40020058 	.word	0x40020058
 800779c:	40020070 	.word	0x40020070
 80077a0:	40020088 	.word	0x40020088
 80077a4:	400200a0 	.word	0x400200a0
 80077a8:	400200b8 	.word	0x400200b8
 80077ac:	40020410 	.word	0x40020410
 80077b0:	40020428 	.word	0x40020428
 80077b4:	40020440 	.word	0x40020440
 80077b8:	40020458 	.word	0x40020458
 80077bc:	40020470 	.word	0x40020470
 80077c0:	40020488 	.word	0x40020488
 80077c4:	400204a0 	.word	0x400204a0
 80077c8:	400204b8 	.word	0x400204b8
 80077cc:	58025408 	.word	0x58025408
 80077d0:	5802541c 	.word	0x5802541c
 80077d4:	58025430 	.word	0x58025430
 80077d8:	58025444 	.word	0x58025444
 80077dc:	58025458 	.word	0x58025458
 80077e0:	5802546c 	.word	0x5802546c
 80077e4:	58025480 	.word	0x58025480
 80077e8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f003 0320 	and.w	r3, r3, #32
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d160      	bne.n	80078b8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a7f      	ldr	r2, [pc, #508]	@ (80079f8 <HAL_DMA_IRQHandler+0xc74>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d04a      	beq.n	8007896 <HAL_DMA_IRQHandler+0xb12>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a7d      	ldr	r2, [pc, #500]	@ (80079fc <HAL_DMA_IRQHandler+0xc78>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d045      	beq.n	8007896 <HAL_DMA_IRQHandler+0xb12>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a7c      	ldr	r2, [pc, #496]	@ (8007a00 <HAL_DMA_IRQHandler+0xc7c>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d040      	beq.n	8007896 <HAL_DMA_IRQHandler+0xb12>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a7a      	ldr	r2, [pc, #488]	@ (8007a04 <HAL_DMA_IRQHandler+0xc80>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d03b      	beq.n	8007896 <HAL_DMA_IRQHandler+0xb12>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a79      	ldr	r2, [pc, #484]	@ (8007a08 <HAL_DMA_IRQHandler+0xc84>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d036      	beq.n	8007896 <HAL_DMA_IRQHandler+0xb12>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a77      	ldr	r2, [pc, #476]	@ (8007a0c <HAL_DMA_IRQHandler+0xc88>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d031      	beq.n	8007896 <HAL_DMA_IRQHandler+0xb12>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a76      	ldr	r2, [pc, #472]	@ (8007a10 <HAL_DMA_IRQHandler+0xc8c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d02c      	beq.n	8007896 <HAL_DMA_IRQHandler+0xb12>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a74      	ldr	r2, [pc, #464]	@ (8007a14 <HAL_DMA_IRQHandler+0xc90>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d027      	beq.n	8007896 <HAL_DMA_IRQHandler+0xb12>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a73      	ldr	r2, [pc, #460]	@ (8007a18 <HAL_DMA_IRQHandler+0xc94>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d022      	beq.n	8007896 <HAL_DMA_IRQHandler+0xb12>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a71      	ldr	r2, [pc, #452]	@ (8007a1c <HAL_DMA_IRQHandler+0xc98>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d01d      	beq.n	8007896 <HAL_DMA_IRQHandler+0xb12>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a70      	ldr	r2, [pc, #448]	@ (8007a20 <HAL_DMA_IRQHandler+0xc9c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d018      	beq.n	8007896 <HAL_DMA_IRQHandler+0xb12>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a6e      	ldr	r2, [pc, #440]	@ (8007a24 <HAL_DMA_IRQHandler+0xca0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d013      	beq.n	8007896 <HAL_DMA_IRQHandler+0xb12>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a6d      	ldr	r2, [pc, #436]	@ (8007a28 <HAL_DMA_IRQHandler+0xca4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d00e      	beq.n	8007896 <HAL_DMA_IRQHandler+0xb12>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a6b      	ldr	r2, [pc, #428]	@ (8007a2c <HAL_DMA_IRQHandler+0xca8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d009      	beq.n	8007896 <HAL_DMA_IRQHandler+0xb12>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a6a      	ldr	r2, [pc, #424]	@ (8007a30 <HAL_DMA_IRQHandler+0xcac>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d004      	beq.n	8007896 <HAL_DMA_IRQHandler+0xb12>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a68      	ldr	r2, [pc, #416]	@ (8007a34 <HAL_DMA_IRQHandler+0xcb0>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d108      	bne.n	80078a8 <HAL_DMA_IRQHandler+0xb24>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0208 	bic.w	r2, r2, #8
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	e007      	b.n	80078b8 <HAL_DMA_IRQHandler+0xb34>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0204 	bic.w	r2, r2, #4
 80078b6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 8165 	beq.w	8007b8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078ca:	e15f      	b.n	8007b8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078d0:	f003 031f 	and.w	r3, r3, #31
 80078d4:	2202      	movs	r2, #2
 80078d6:	409a      	lsls	r2, r3
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	4013      	ands	r3, r2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 80c5 	beq.w	8007a6c <HAL_DMA_IRQHandler+0xce8>
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 80bf 	beq.w	8007a6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078f2:	f003 031f 	and.w	r3, r3, #31
 80078f6:	2202      	movs	r2, #2
 80078f8:	409a      	lsls	r2, r3
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d018      	beq.n	800793a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 813a 	beq.w	8007b90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007924:	e134      	b.n	8007b90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 8130 	beq.w	8007b90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007938:	e12a      	b.n	8007b90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	f040 8089 	bne.w	8007a58 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a2b      	ldr	r2, [pc, #172]	@ (80079f8 <HAL_DMA_IRQHandler+0xc74>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d04a      	beq.n	80079e6 <HAL_DMA_IRQHandler+0xc62>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a29      	ldr	r2, [pc, #164]	@ (80079fc <HAL_DMA_IRQHandler+0xc78>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d045      	beq.n	80079e6 <HAL_DMA_IRQHandler+0xc62>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a28      	ldr	r2, [pc, #160]	@ (8007a00 <HAL_DMA_IRQHandler+0xc7c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d040      	beq.n	80079e6 <HAL_DMA_IRQHandler+0xc62>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a26      	ldr	r2, [pc, #152]	@ (8007a04 <HAL_DMA_IRQHandler+0xc80>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d03b      	beq.n	80079e6 <HAL_DMA_IRQHandler+0xc62>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a25      	ldr	r2, [pc, #148]	@ (8007a08 <HAL_DMA_IRQHandler+0xc84>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d036      	beq.n	80079e6 <HAL_DMA_IRQHandler+0xc62>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a23      	ldr	r2, [pc, #140]	@ (8007a0c <HAL_DMA_IRQHandler+0xc88>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d031      	beq.n	80079e6 <HAL_DMA_IRQHandler+0xc62>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a22      	ldr	r2, [pc, #136]	@ (8007a10 <HAL_DMA_IRQHandler+0xc8c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d02c      	beq.n	80079e6 <HAL_DMA_IRQHandler+0xc62>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a20      	ldr	r2, [pc, #128]	@ (8007a14 <HAL_DMA_IRQHandler+0xc90>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d027      	beq.n	80079e6 <HAL_DMA_IRQHandler+0xc62>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a1f      	ldr	r2, [pc, #124]	@ (8007a18 <HAL_DMA_IRQHandler+0xc94>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d022      	beq.n	80079e6 <HAL_DMA_IRQHandler+0xc62>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a1d      	ldr	r2, [pc, #116]	@ (8007a1c <HAL_DMA_IRQHandler+0xc98>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d01d      	beq.n	80079e6 <HAL_DMA_IRQHandler+0xc62>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a1c      	ldr	r2, [pc, #112]	@ (8007a20 <HAL_DMA_IRQHandler+0xc9c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d018      	beq.n	80079e6 <HAL_DMA_IRQHandler+0xc62>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a1a      	ldr	r2, [pc, #104]	@ (8007a24 <HAL_DMA_IRQHandler+0xca0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d013      	beq.n	80079e6 <HAL_DMA_IRQHandler+0xc62>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a19      	ldr	r2, [pc, #100]	@ (8007a28 <HAL_DMA_IRQHandler+0xca4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d00e      	beq.n	80079e6 <HAL_DMA_IRQHandler+0xc62>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a17      	ldr	r2, [pc, #92]	@ (8007a2c <HAL_DMA_IRQHandler+0xca8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d009      	beq.n	80079e6 <HAL_DMA_IRQHandler+0xc62>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a16      	ldr	r2, [pc, #88]	@ (8007a30 <HAL_DMA_IRQHandler+0xcac>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d004      	beq.n	80079e6 <HAL_DMA_IRQHandler+0xc62>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a14      	ldr	r2, [pc, #80]	@ (8007a34 <HAL_DMA_IRQHandler+0xcb0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d128      	bne.n	8007a38 <HAL_DMA_IRQHandler+0xcb4>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0214 	bic.w	r2, r2, #20
 80079f4:	601a      	str	r2, [r3, #0]
 80079f6:	e027      	b.n	8007a48 <HAL_DMA_IRQHandler+0xcc4>
 80079f8:	40020010 	.word	0x40020010
 80079fc:	40020028 	.word	0x40020028
 8007a00:	40020040 	.word	0x40020040
 8007a04:	40020058 	.word	0x40020058
 8007a08:	40020070 	.word	0x40020070
 8007a0c:	40020088 	.word	0x40020088
 8007a10:	400200a0 	.word	0x400200a0
 8007a14:	400200b8 	.word	0x400200b8
 8007a18:	40020410 	.word	0x40020410
 8007a1c:	40020428 	.word	0x40020428
 8007a20:	40020440 	.word	0x40020440
 8007a24:	40020458 	.word	0x40020458
 8007a28:	40020470 	.word	0x40020470
 8007a2c:	40020488 	.word	0x40020488
 8007a30:	400204a0 	.word	0x400204a0
 8007a34:	400204b8 	.word	0x400204b8
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 020a 	bic.w	r2, r2, #10
 8007a46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 8097 	beq.w	8007b90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a6a:	e091      	b.n	8007b90 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a70:	f003 031f 	and.w	r3, r3, #31
 8007a74:	2208      	movs	r2, #8
 8007a76:	409a      	lsls	r2, r3
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 8088 	beq.w	8007b92 <HAL_DMA_IRQHandler+0xe0e>
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f003 0308 	and.w	r3, r3, #8
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 8082 	beq.w	8007b92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a41      	ldr	r2, [pc, #260]	@ (8007b98 <HAL_DMA_IRQHandler+0xe14>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d04a      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xdaa>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a3f      	ldr	r2, [pc, #252]	@ (8007b9c <HAL_DMA_IRQHandler+0xe18>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d045      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xdaa>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a3e      	ldr	r2, [pc, #248]	@ (8007ba0 <HAL_DMA_IRQHandler+0xe1c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d040      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xdaa>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a3c      	ldr	r2, [pc, #240]	@ (8007ba4 <HAL_DMA_IRQHandler+0xe20>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d03b      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xdaa>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a3b      	ldr	r2, [pc, #236]	@ (8007ba8 <HAL_DMA_IRQHandler+0xe24>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d036      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xdaa>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a39      	ldr	r2, [pc, #228]	@ (8007bac <HAL_DMA_IRQHandler+0xe28>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d031      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xdaa>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a38      	ldr	r2, [pc, #224]	@ (8007bb0 <HAL_DMA_IRQHandler+0xe2c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d02c      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xdaa>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a36      	ldr	r2, [pc, #216]	@ (8007bb4 <HAL_DMA_IRQHandler+0xe30>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d027      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xdaa>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a35      	ldr	r2, [pc, #212]	@ (8007bb8 <HAL_DMA_IRQHandler+0xe34>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d022      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xdaa>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a33      	ldr	r2, [pc, #204]	@ (8007bbc <HAL_DMA_IRQHandler+0xe38>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d01d      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xdaa>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a32      	ldr	r2, [pc, #200]	@ (8007bc0 <HAL_DMA_IRQHandler+0xe3c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d018      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xdaa>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a30      	ldr	r2, [pc, #192]	@ (8007bc4 <HAL_DMA_IRQHandler+0xe40>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d013      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xdaa>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a2f      	ldr	r2, [pc, #188]	@ (8007bc8 <HAL_DMA_IRQHandler+0xe44>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d00e      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xdaa>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a2d      	ldr	r2, [pc, #180]	@ (8007bcc <HAL_DMA_IRQHandler+0xe48>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d009      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xdaa>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8007bd0 <HAL_DMA_IRQHandler+0xe4c>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d004      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xdaa>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a2a      	ldr	r2, [pc, #168]	@ (8007bd4 <HAL_DMA_IRQHandler+0xe50>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d108      	bne.n	8007b40 <HAL_DMA_IRQHandler+0xdbc>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 021c 	bic.w	r2, r2, #28
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	e007      	b.n	8007b50 <HAL_DMA_IRQHandler+0xdcc>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 020e 	bic.w	r2, r2, #14
 8007b4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b54:	f003 031f 	and.w	r3, r3, #31
 8007b58:	2201      	movs	r2, #1
 8007b5a:	409a      	lsls	r2, r3
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d009      	beq.n	8007b92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	4798      	blx	r3
 8007b86:	e004      	b.n	8007b92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007b88:	bf00      	nop
 8007b8a:	e002      	b.n	8007b92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b8c:	bf00      	nop
 8007b8e:	e000      	b.n	8007b92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007b92:	3728      	adds	r7, #40	@ 0x28
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	40020010 	.word	0x40020010
 8007b9c:	40020028 	.word	0x40020028
 8007ba0:	40020040 	.word	0x40020040
 8007ba4:	40020058 	.word	0x40020058
 8007ba8:	40020070 	.word	0x40020070
 8007bac:	40020088 	.word	0x40020088
 8007bb0:	400200a0 	.word	0x400200a0
 8007bb4:	400200b8 	.word	0x400200b8
 8007bb8:	40020410 	.word	0x40020410
 8007bbc:	40020428 	.word	0x40020428
 8007bc0:	40020440 	.word	0x40020440
 8007bc4:	40020458 	.word	0x40020458
 8007bc8:	40020470 	.word	0x40020470
 8007bcc:	40020488 	.word	0x40020488
 8007bd0:	400204a0 	.word	0x400204a0
 8007bd4:	400204b8 	.word	0x400204b8

08007bd8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007be6:	b2db      	uxtb	r3, r3
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b087      	sub	sp, #28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c06:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c0c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a7f      	ldr	r2, [pc, #508]	@ (8007e10 <DMA_SetConfig+0x21c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d072      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a7d      	ldr	r2, [pc, #500]	@ (8007e14 <DMA_SetConfig+0x220>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d06d      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a7c      	ldr	r2, [pc, #496]	@ (8007e18 <DMA_SetConfig+0x224>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d068      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a7a      	ldr	r2, [pc, #488]	@ (8007e1c <DMA_SetConfig+0x228>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d063      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a79      	ldr	r2, [pc, #484]	@ (8007e20 <DMA_SetConfig+0x22c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d05e      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a77      	ldr	r2, [pc, #476]	@ (8007e24 <DMA_SetConfig+0x230>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d059      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a76      	ldr	r2, [pc, #472]	@ (8007e28 <DMA_SetConfig+0x234>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d054      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a74      	ldr	r2, [pc, #464]	@ (8007e2c <DMA_SetConfig+0x238>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d04f      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a73      	ldr	r2, [pc, #460]	@ (8007e30 <DMA_SetConfig+0x23c>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d04a      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a71      	ldr	r2, [pc, #452]	@ (8007e34 <DMA_SetConfig+0x240>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d045      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a70      	ldr	r2, [pc, #448]	@ (8007e38 <DMA_SetConfig+0x244>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d040      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a6e      	ldr	r2, [pc, #440]	@ (8007e3c <DMA_SetConfig+0x248>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d03b      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a6d      	ldr	r2, [pc, #436]	@ (8007e40 <DMA_SetConfig+0x24c>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d036      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a6b      	ldr	r2, [pc, #428]	@ (8007e44 <DMA_SetConfig+0x250>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d031      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a6a      	ldr	r2, [pc, #424]	@ (8007e48 <DMA_SetConfig+0x254>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d02c      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a68      	ldr	r2, [pc, #416]	@ (8007e4c <DMA_SetConfig+0x258>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d027      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a67      	ldr	r2, [pc, #412]	@ (8007e50 <DMA_SetConfig+0x25c>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d022      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a65      	ldr	r2, [pc, #404]	@ (8007e54 <DMA_SetConfig+0x260>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d01d      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a64      	ldr	r2, [pc, #400]	@ (8007e58 <DMA_SetConfig+0x264>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d018      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a62      	ldr	r2, [pc, #392]	@ (8007e5c <DMA_SetConfig+0x268>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d013      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a61      	ldr	r2, [pc, #388]	@ (8007e60 <DMA_SetConfig+0x26c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00e      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a5f      	ldr	r2, [pc, #380]	@ (8007e64 <DMA_SetConfig+0x270>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d009      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a5e      	ldr	r2, [pc, #376]	@ (8007e68 <DMA_SetConfig+0x274>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d004      	beq.n	8007cfe <DMA_SetConfig+0x10a>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a5c      	ldr	r2, [pc, #368]	@ (8007e6c <DMA_SetConfig+0x278>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d101      	bne.n	8007d02 <DMA_SetConfig+0x10e>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e000      	b.n	8007d04 <DMA_SetConfig+0x110>
 8007d02:	2300      	movs	r3, #0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00d      	beq.n	8007d24 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007d10:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d004      	beq.n	8007d24 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007d22:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a39      	ldr	r2, [pc, #228]	@ (8007e10 <DMA_SetConfig+0x21c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d04a      	beq.n	8007dc4 <DMA_SetConfig+0x1d0>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a38      	ldr	r2, [pc, #224]	@ (8007e14 <DMA_SetConfig+0x220>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d045      	beq.n	8007dc4 <DMA_SetConfig+0x1d0>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a36      	ldr	r2, [pc, #216]	@ (8007e18 <DMA_SetConfig+0x224>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d040      	beq.n	8007dc4 <DMA_SetConfig+0x1d0>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a35      	ldr	r2, [pc, #212]	@ (8007e1c <DMA_SetConfig+0x228>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d03b      	beq.n	8007dc4 <DMA_SetConfig+0x1d0>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a33      	ldr	r2, [pc, #204]	@ (8007e20 <DMA_SetConfig+0x22c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d036      	beq.n	8007dc4 <DMA_SetConfig+0x1d0>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a32      	ldr	r2, [pc, #200]	@ (8007e24 <DMA_SetConfig+0x230>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d031      	beq.n	8007dc4 <DMA_SetConfig+0x1d0>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a30      	ldr	r2, [pc, #192]	@ (8007e28 <DMA_SetConfig+0x234>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d02c      	beq.n	8007dc4 <DMA_SetConfig+0x1d0>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8007e2c <DMA_SetConfig+0x238>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d027      	beq.n	8007dc4 <DMA_SetConfig+0x1d0>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a2d      	ldr	r2, [pc, #180]	@ (8007e30 <DMA_SetConfig+0x23c>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d022      	beq.n	8007dc4 <DMA_SetConfig+0x1d0>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a2c      	ldr	r2, [pc, #176]	@ (8007e34 <DMA_SetConfig+0x240>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d01d      	beq.n	8007dc4 <DMA_SetConfig+0x1d0>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8007e38 <DMA_SetConfig+0x244>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d018      	beq.n	8007dc4 <DMA_SetConfig+0x1d0>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a29      	ldr	r2, [pc, #164]	@ (8007e3c <DMA_SetConfig+0x248>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d013      	beq.n	8007dc4 <DMA_SetConfig+0x1d0>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a27      	ldr	r2, [pc, #156]	@ (8007e40 <DMA_SetConfig+0x24c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d00e      	beq.n	8007dc4 <DMA_SetConfig+0x1d0>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a26      	ldr	r2, [pc, #152]	@ (8007e44 <DMA_SetConfig+0x250>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d009      	beq.n	8007dc4 <DMA_SetConfig+0x1d0>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a24      	ldr	r2, [pc, #144]	@ (8007e48 <DMA_SetConfig+0x254>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d004      	beq.n	8007dc4 <DMA_SetConfig+0x1d0>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a23      	ldr	r2, [pc, #140]	@ (8007e4c <DMA_SetConfig+0x258>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d101      	bne.n	8007dc8 <DMA_SetConfig+0x1d4>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e000      	b.n	8007dca <DMA_SetConfig+0x1d6>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d059      	beq.n	8007e82 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dd2:	f003 031f 	and.w	r3, r3, #31
 8007dd6:	223f      	movs	r2, #63	@ 0x3f
 8007dd8:	409a      	lsls	r2, r3
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007dec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	2b40      	cmp	r3, #64	@ 0x40
 8007dfc:	d138      	bne.n	8007e70 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e0e:	e086      	b.n	8007f1e <DMA_SetConfig+0x32a>
 8007e10:	40020010 	.word	0x40020010
 8007e14:	40020028 	.word	0x40020028
 8007e18:	40020040 	.word	0x40020040
 8007e1c:	40020058 	.word	0x40020058
 8007e20:	40020070 	.word	0x40020070
 8007e24:	40020088 	.word	0x40020088
 8007e28:	400200a0 	.word	0x400200a0
 8007e2c:	400200b8 	.word	0x400200b8
 8007e30:	40020410 	.word	0x40020410
 8007e34:	40020428 	.word	0x40020428
 8007e38:	40020440 	.word	0x40020440
 8007e3c:	40020458 	.word	0x40020458
 8007e40:	40020470 	.word	0x40020470
 8007e44:	40020488 	.word	0x40020488
 8007e48:	400204a0 	.word	0x400204a0
 8007e4c:	400204b8 	.word	0x400204b8
 8007e50:	58025408 	.word	0x58025408
 8007e54:	5802541c 	.word	0x5802541c
 8007e58:	58025430 	.word	0x58025430
 8007e5c:	58025444 	.word	0x58025444
 8007e60:	58025458 	.word	0x58025458
 8007e64:	5802546c 	.word	0x5802546c
 8007e68:	58025480 	.word	0x58025480
 8007e6c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	60da      	str	r2, [r3, #12]
}
 8007e80:	e04d      	b.n	8007f1e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a29      	ldr	r2, [pc, #164]	@ (8007f2c <DMA_SetConfig+0x338>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d022      	beq.n	8007ed2 <DMA_SetConfig+0x2de>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a27      	ldr	r2, [pc, #156]	@ (8007f30 <DMA_SetConfig+0x33c>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d01d      	beq.n	8007ed2 <DMA_SetConfig+0x2de>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a26      	ldr	r2, [pc, #152]	@ (8007f34 <DMA_SetConfig+0x340>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d018      	beq.n	8007ed2 <DMA_SetConfig+0x2de>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a24      	ldr	r2, [pc, #144]	@ (8007f38 <DMA_SetConfig+0x344>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d013      	beq.n	8007ed2 <DMA_SetConfig+0x2de>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a23      	ldr	r2, [pc, #140]	@ (8007f3c <DMA_SetConfig+0x348>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d00e      	beq.n	8007ed2 <DMA_SetConfig+0x2de>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a21      	ldr	r2, [pc, #132]	@ (8007f40 <DMA_SetConfig+0x34c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d009      	beq.n	8007ed2 <DMA_SetConfig+0x2de>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a20      	ldr	r2, [pc, #128]	@ (8007f44 <DMA_SetConfig+0x350>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d004      	beq.n	8007ed2 <DMA_SetConfig+0x2de>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8007f48 <DMA_SetConfig+0x354>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d101      	bne.n	8007ed6 <DMA_SetConfig+0x2e2>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e000      	b.n	8007ed8 <DMA_SetConfig+0x2e4>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d020      	beq.n	8007f1e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ee0:	f003 031f 	and.w	r3, r3, #31
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	409a      	lsls	r2, r3
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	2b40      	cmp	r3, #64	@ 0x40
 8007efa:	d108      	bne.n	8007f0e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	60da      	str	r2, [r3, #12]
}
 8007f0c:	e007      	b.n	8007f1e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	60da      	str	r2, [r3, #12]
}
 8007f1e:	bf00      	nop
 8007f20:	371c      	adds	r7, #28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	58025408 	.word	0x58025408
 8007f30:	5802541c 	.word	0x5802541c
 8007f34:	58025430 	.word	0x58025430
 8007f38:	58025444 	.word	0x58025444
 8007f3c:	58025458 	.word	0x58025458
 8007f40:	5802546c 	.word	0x5802546c
 8007f44:	58025480 	.word	0x58025480
 8007f48:	58025494 	.word	0x58025494

08007f4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a42      	ldr	r2, [pc, #264]	@ (8008064 <DMA_CalcBaseAndBitshift+0x118>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d04a      	beq.n	8007ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a41      	ldr	r2, [pc, #260]	@ (8008068 <DMA_CalcBaseAndBitshift+0x11c>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d045      	beq.n	8007ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a3f      	ldr	r2, [pc, #252]	@ (800806c <DMA_CalcBaseAndBitshift+0x120>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d040      	beq.n	8007ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a3e      	ldr	r2, [pc, #248]	@ (8008070 <DMA_CalcBaseAndBitshift+0x124>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d03b      	beq.n	8007ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a3c      	ldr	r2, [pc, #240]	@ (8008074 <DMA_CalcBaseAndBitshift+0x128>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d036      	beq.n	8007ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a3b      	ldr	r2, [pc, #236]	@ (8008078 <DMA_CalcBaseAndBitshift+0x12c>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d031      	beq.n	8007ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a39      	ldr	r2, [pc, #228]	@ (800807c <DMA_CalcBaseAndBitshift+0x130>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d02c      	beq.n	8007ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a38      	ldr	r2, [pc, #224]	@ (8008080 <DMA_CalcBaseAndBitshift+0x134>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d027      	beq.n	8007ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a36      	ldr	r2, [pc, #216]	@ (8008084 <DMA_CalcBaseAndBitshift+0x138>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d022      	beq.n	8007ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a35      	ldr	r2, [pc, #212]	@ (8008088 <DMA_CalcBaseAndBitshift+0x13c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d01d      	beq.n	8007ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a33      	ldr	r2, [pc, #204]	@ (800808c <DMA_CalcBaseAndBitshift+0x140>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d018      	beq.n	8007ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a32      	ldr	r2, [pc, #200]	@ (8008090 <DMA_CalcBaseAndBitshift+0x144>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d013      	beq.n	8007ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a30      	ldr	r2, [pc, #192]	@ (8008094 <DMA_CalcBaseAndBitshift+0x148>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00e      	beq.n	8007ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a2f      	ldr	r2, [pc, #188]	@ (8008098 <DMA_CalcBaseAndBitshift+0x14c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d009      	beq.n	8007ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a2d      	ldr	r2, [pc, #180]	@ (800809c <DMA_CalcBaseAndBitshift+0x150>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d004      	beq.n	8007ff4 <DMA_CalcBaseAndBitshift+0xa8>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a2c      	ldr	r2, [pc, #176]	@ (80080a0 <DMA_CalcBaseAndBitshift+0x154>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d101      	bne.n	8007ff8 <DMA_CalcBaseAndBitshift+0xac>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e000      	b.n	8007ffa <DMA_CalcBaseAndBitshift+0xae>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d024      	beq.n	8008048 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	3b10      	subs	r3, #16
 8008006:	4a27      	ldr	r2, [pc, #156]	@ (80080a4 <DMA_CalcBaseAndBitshift+0x158>)
 8008008:	fba2 2303 	umull	r2, r3, r2, r3
 800800c:	091b      	lsrs	r3, r3, #4
 800800e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	4a24      	ldr	r2, [pc, #144]	@ (80080a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8008018:	5cd3      	ldrb	r3, [r2, r3]
 800801a:	461a      	mov	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b03      	cmp	r3, #3
 8008024:	d908      	bls.n	8008038 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	4b1f      	ldr	r3, [pc, #124]	@ (80080ac <DMA_CalcBaseAndBitshift+0x160>)
 800802e:	4013      	ands	r3, r2
 8008030:	1d1a      	adds	r2, r3, #4
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	659a      	str	r2, [r3, #88]	@ 0x58
 8008036:	e00d      	b.n	8008054 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	461a      	mov	r2, r3
 800803e:	4b1b      	ldr	r3, [pc, #108]	@ (80080ac <DMA_CalcBaseAndBitshift+0x160>)
 8008040:	4013      	ands	r3, r2
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	6593      	str	r3, [r2, #88]	@ 0x58
 8008046:	e005      	b.n	8008054 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008058:	4618      	mov	r0, r3
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	40020010 	.word	0x40020010
 8008068:	40020028 	.word	0x40020028
 800806c:	40020040 	.word	0x40020040
 8008070:	40020058 	.word	0x40020058
 8008074:	40020070 	.word	0x40020070
 8008078:	40020088 	.word	0x40020088
 800807c:	400200a0 	.word	0x400200a0
 8008080:	400200b8 	.word	0x400200b8
 8008084:	40020410 	.word	0x40020410
 8008088:	40020428 	.word	0x40020428
 800808c:	40020440 	.word	0x40020440
 8008090:	40020458 	.word	0x40020458
 8008094:	40020470 	.word	0x40020470
 8008098:	40020488 	.word	0x40020488
 800809c:	400204a0 	.word	0x400204a0
 80080a0:	400204b8 	.word	0x400204b8
 80080a4:	aaaaaaab 	.word	0xaaaaaaab
 80080a8:	08017288 	.word	0x08017288
 80080ac:	fffffc00 	.word	0xfffffc00

080080b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d120      	bne.n	8008106 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	d858      	bhi.n	800817e <DMA_CheckFifoParam+0xce>
 80080cc:	a201      	add	r2, pc, #4	@ (adr r2, 80080d4 <DMA_CheckFifoParam+0x24>)
 80080ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d2:	bf00      	nop
 80080d4:	080080e5 	.word	0x080080e5
 80080d8:	080080f7 	.word	0x080080f7
 80080dc:	080080e5 	.word	0x080080e5
 80080e0:	0800817f 	.word	0x0800817f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d048      	beq.n	8008182 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80080f4:	e045      	b.n	8008182 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80080fe:	d142      	bne.n	8008186 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008104:	e03f      	b.n	8008186 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800810e:	d123      	bne.n	8008158 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008114:	2b03      	cmp	r3, #3
 8008116:	d838      	bhi.n	800818a <DMA_CheckFifoParam+0xda>
 8008118:	a201      	add	r2, pc, #4	@ (adr r2, 8008120 <DMA_CheckFifoParam+0x70>)
 800811a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811e:	bf00      	nop
 8008120:	08008131 	.word	0x08008131
 8008124:	08008137 	.word	0x08008137
 8008128:	08008131 	.word	0x08008131
 800812c:	08008149 	.word	0x08008149
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	73fb      	strb	r3, [r7, #15]
        break;
 8008134:	e030      	b.n	8008198 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d025      	beq.n	800818e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008146:	e022      	b.n	800818e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008150:	d11f      	bne.n	8008192 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008156:	e01c      	b.n	8008192 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815c:	2b02      	cmp	r3, #2
 800815e:	d902      	bls.n	8008166 <DMA_CheckFifoParam+0xb6>
 8008160:	2b03      	cmp	r3, #3
 8008162:	d003      	beq.n	800816c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008164:	e018      	b.n	8008198 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	73fb      	strb	r3, [r7, #15]
        break;
 800816a:	e015      	b.n	8008198 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008170:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00e      	beq.n	8008196 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	73fb      	strb	r3, [r7, #15]
    break;
 800817c:	e00b      	b.n	8008196 <DMA_CheckFifoParam+0xe6>
        break;
 800817e:	bf00      	nop
 8008180:	e00a      	b.n	8008198 <DMA_CheckFifoParam+0xe8>
        break;
 8008182:	bf00      	nop
 8008184:	e008      	b.n	8008198 <DMA_CheckFifoParam+0xe8>
        break;
 8008186:	bf00      	nop
 8008188:	e006      	b.n	8008198 <DMA_CheckFifoParam+0xe8>
        break;
 800818a:	bf00      	nop
 800818c:	e004      	b.n	8008198 <DMA_CheckFifoParam+0xe8>
        break;
 800818e:	bf00      	nop
 8008190:	e002      	b.n	8008198 <DMA_CheckFifoParam+0xe8>
        break;
 8008192:	bf00      	nop
 8008194:	e000      	b.n	8008198 <DMA_CheckFifoParam+0xe8>
    break;
 8008196:	bf00      	nop
    }
  }

  return status;
 8008198:	7bfb      	ldrb	r3, [r7, #15]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop

080081a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a38      	ldr	r2, [pc, #224]	@ (800829c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d022      	beq.n	8008206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a36      	ldr	r2, [pc, #216]	@ (80082a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d01d      	beq.n	8008206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a35      	ldr	r2, [pc, #212]	@ (80082a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d018      	beq.n	8008206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a33      	ldr	r2, [pc, #204]	@ (80082a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d013      	beq.n	8008206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a32      	ldr	r2, [pc, #200]	@ (80082ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00e      	beq.n	8008206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a30      	ldr	r2, [pc, #192]	@ (80082b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d009      	beq.n	8008206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a2f      	ldr	r2, [pc, #188]	@ (80082b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d004      	beq.n	8008206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a2d      	ldr	r2, [pc, #180]	@ (80082b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d101      	bne.n	800820a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008206:	2301      	movs	r3, #1
 8008208:	e000      	b.n	800820c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800820a:	2300      	movs	r3, #0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d01a      	beq.n	8008246 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	b2db      	uxtb	r3, r3
 8008216:	3b08      	subs	r3, #8
 8008218:	4a28      	ldr	r2, [pc, #160]	@ (80082bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800821a:	fba2 2303 	umull	r2, r3, r2, r3
 800821e:	091b      	lsrs	r3, r3, #4
 8008220:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	4b26      	ldr	r3, [pc, #152]	@ (80082c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008226:	4413      	add	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	461a      	mov	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a24      	ldr	r2, [pc, #144]	@ (80082c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008234:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f003 031f 	and.w	r3, r3, #31
 800823c:	2201      	movs	r2, #1
 800823e:	409a      	lsls	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008244:	e024      	b.n	8008290 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	b2db      	uxtb	r3, r3
 800824c:	3b10      	subs	r3, #16
 800824e:	4a1e      	ldr	r2, [pc, #120]	@ (80082c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008250:	fba2 2303 	umull	r2, r3, r2, r3
 8008254:	091b      	lsrs	r3, r3, #4
 8008256:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	4a1c      	ldr	r2, [pc, #112]	@ (80082cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d806      	bhi.n	800826e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	4a1b      	ldr	r2, [pc, #108]	@ (80082d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d902      	bls.n	800826e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	3308      	adds	r3, #8
 800826c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	4b18      	ldr	r3, [pc, #96]	@ (80082d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008272:	4413      	add	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	461a      	mov	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a16      	ldr	r2, [pc, #88]	@ (80082d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008280:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f003 031f 	and.w	r3, r3, #31
 8008288:	2201      	movs	r2, #1
 800828a:	409a      	lsls	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008290:	bf00      	nop
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	58025408 	.word	0x58025408
 80082a0:	5802541c 	.word	0x5802541c
 80082a4:	58025430 	.word	0x58025430
 80082a8:	58025444 	.word	0x58025444
 80082ac:	58025458 	.word	0x58025458
 80082b0:	5802546c 	.word	0x5802546c
 80082b4:	58025480 	.word	0x58025480
 80082b8:	58025494 	.word	0x58025494
 80082bc:	cccccccd 	.word	0xcccccccd
 80082c0:	16009600 	.word	0x16009600
 80082c4:	58025880 	.word	0x58025880
 80082c8:	aaaaaaab 	.word	0xaaaaaaab
 80082cc:	400204b8 	.word	0x400204b8
 80082d0:	4002040f 	.word	0x4002040f
 80082d4:	10008200 	.word	0x10008200
 80082d8:	40020880 	.word	0x40020880

080082dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d04a      	beq.n	8008388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d847      	bhi.n	8008388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a25      	ldr	r2, [pc, #148]	@ (8008394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d022      	beq.n	8008348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a24      	ldr	r2, [pc, #144]	@ (8008398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d01d      	beq.n	8008348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a22      	ldr	r2, [pc, #136]	@ (800839c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d018      	beq.n	8008348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a21      	ldr	r2, [pc, #132]	@ (80083a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d013      	beq.n	8008348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a1f      	ldr	r2, [pc, #124]	@ (80083a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d00e      	beq.n	8008348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a1e      	ldr	r2, [pc, #120]	@ (80083a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d009      	beq.n	8008348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a1c      	ldr	r2, [pc, #112]	@ (80083ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d004      	beq.n	8008348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a1b      	ldr	r2, [pc, #108]	@ (80083b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d101      	bne.n	800834c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008348:	2301      	movs	r3, #1
 800834a:	e000      	b.n	800834e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800834c:	2300      	movs	r3, #0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00a      	beq.n	8008368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4b17      	ldr	r3, [pc, #92]	@ (80083b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008356:	4413      	add	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	461a      	mov	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a15      	ldr	r2, [pc, #84]	@ (80083b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008364:	671a      	str	r2, [r3, #112]	@ 0x70
 8008366:	e009      	b.n	800837c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	4b14      	ldr	r3, [pc, #80]	@ (80083bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800836c:	4413      	add	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	461a      	mov	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a11      	ldr	r2, [pc, #68]	@ (80083c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800837a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3b01      	subs	r3, #1
 8008380:	2201      	movs	r2, #1
 8008382:	409a      	lsls	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008388:	bf00      	nop
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	58025408 	.word	0x58025408
 8008398:	5802541c 	.word	0x5802541c
 800839c:	58025430 	.word	0x58025430
 80083a0:	58025444 	.word	0x58025444
 80083a4:	58025458 	.word	0x58025458
 80083a8:	5802546c 	.word	0x5802546c
 80083ac:	58025480 	.word	0x58025480
 80083b0:	58025494 	.word	0x58025494
 80083b4:	1600963f 	.word	0x1600963f
 80083b8:	58025940 	.word	0x58025940
 80083bc:	1000823f 	.word	0x1000823f
 80083c0:	40020940 	.word	0x40020940

080083c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b089      	sub	sp, #36	@ 0x24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80083d2:	4b86      	ldr	r3, [pc, #536]	@ (80085ec <HAL_GPIO_Init+0x228>)
 80083d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083d6:	e18c      	b.n	80086f2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	2101      	movs	r1, #1
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	fa01 f303 	lsl.w	r3, r1, r3
 80083e4:	4013      	ands	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 817e 	beq.w	80086ec <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f003 0303 	and.w	r3, r3, #3
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d005      	beq.n	8008408 <HAL_GPIO_Init+0x44>
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	f003 0303 	and.w	r3, r3, #3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d130      	bne.n	800846a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	2203      	movs	r2, #3
 8008414:	fa02 f303 	lsl.w	r3, r2, r3
 8008418:	43db      	mvns	r3, r3
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	4013      	ands	r3, r2
 800841e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	005b      	lsls	r3, r3, #1
 8008428:	fa02 f303 	lsl.w	r3, r2, r3
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	4313      	orrs	r3, r2
 8008430:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800843e:	2201      	movs	r2, #1
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	fa02 f303 	lsl.w	r3, r2, r3
 8008446:	43db      	mvns	r3, r3
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	4013      	ands	r3, r2
 800844c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	091b      	lsrs	r3, r3, #4
 8008454:	f003 0201 	and.w	r2, r3, #1
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	fa02 f303 	lsl.w	r3, r2, r3
 800845e:	69ba      	ldr	r2, [r7, #24]
 8008460:	4313      	orrs	r3, r2
 8008462:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f003 0303 	and.w	r3, r3, #3
 8008472:	2b03      	cmp	r3, #3
 8008474:	d017      	beq.n	80084a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	2203      	movs	r2, #3
 8008482:	fa02 f303 	lsl.w	r3, r2, r3
 8008486:	43db      	mvns	r3, r3
 8008488:	69ba      	ldr	r2, [r7, #24]
 800848a:	4013      	ands	r3, r2
 800848c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	689a      	ldr	r2, [r3, #8]
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	fa02 f303 	lsl.w	r3, r2, r3
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	4313      	orrs	r3, r2
 800849e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d123      	bne.n	80084fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	08da      	lsrs	r2, r3, #3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	3208      	adds	r2, #8
 80084ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	f003 0307 	and.w	r3, r3, #7
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	220f      	movs	r2, #15
 80084ca:	fa02 f303 	lsl.w	r3, r2, r3
 80084ce:	43db      	mvns	r3, r3
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	4013      	ands	r3, r2
 80084d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	691a      	ldr	r2, [r3, #16]
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	f003 0307 	and.w	r3, r3, #7
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	fa02 f303 	lsl.w	r3, r2, r3
 80084e6:	69ba      	ldr	r2, [r7, #24]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	08da      	lsrs	r2, r3, #3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3208      	adds	r2, #8
 80084f4:	69b9      	ldr	r1, [r7, #24]
 80084f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	2203      	movs	r2, #3
 8008506:	fa02 f303 	lsl.w	r3, r2, r3
 800850a:	43db      	mvns	r3, r3
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	4013      	ands	r3, r2
 8008510:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f003 0203 	and.w	r2, r3, #3
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	fa02 f303 	lsl.w	r3, r2, r3
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	4313      	orrs	r3, r2
 8008526:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 80d8 	beq.w	80086ec <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800853c:	4b2c      	ldr	r3, [pc, #176]	@ (80085f0 <HAL_GPIO_Init+0x22c>)
 800853e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008542:	4a2b      	ldr	r2, [pc, #172]	@ (80085f0 <HAL_GPIO_Init+0x22c>)
 8008544:	f043 0302 	orr.w	r3, r3, #2
 8008548:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800854c:	4b28      	ldr	r3, [pc, #160]	@ (80085f0 <HAL_GPIO_Init+0x22c>)
 800854e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800855a:	4a26      	ldr	r2, [pc, #152]	@ (80085f4 <HAL_GPIO_Init+0x230>)
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	089b      	lsrs	r3, r3, #2
 8008560:	3302      	adds	r3, #2
 8008562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	f003 0303 	and.w	r3, r3, #3
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	220f      	movs	r2, #15
 8008572:	fa02 f303 	lsl.w	r3, r2, r3
 8008576:	43db      	mvns	r3, r3
 8008578:	69ba      	ldr	r2, [r7, #24]
 800857a:	4013      	ands	r3, r2
 800857c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a1d      	ldr	r2, [pc, #116]	@ (80085f8 <HAL_GPIO_Init+0x234>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d04a      	beq.n	800861c <HAL_GPIO_Init+0x258>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a1c      	ldr	r2, [pc, #112]	@ (80085fc <HAL_GPIO_Init+0x238>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d02b      	beq.n	80085e6 <HAL_GPIO_Init+0x222>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a1b      	ldr	r2, [pc, #108]	@ (8008600 <HAL_GPIO_Init+0x23c>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d025      	beq.n	80085e2 <HAL_GPIO_Init+0x21e>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a1a      	ldr	r2, [pc, #104]	@ (8008604 <HAL_GPIO_Init+0x240>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d01f      	beq.n	80085de <HAL_GPIO_Init+0x21a>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a19      	ldr	r2, [pc, #100]	@ (8008608 <HAL_GPIO_Init+0x244>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d019      	beq.n	80085da <HAL_GPIO_Init+0x216>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a18      	ldr	r2, [pc, #96]	@ (800860c <HAL_GPIO_Init+0x248>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d013      	beq.n	80085d6 <HAL_GPIO_Init+0x212>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a17      	ldr	r2, [pc, #92]	@ (8008610 <HAL_GPIO_Init+0x24c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d00d      	beq.n	80085d2 <HAL_GPIO_Init+0x20e>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a16      	ldr	r2, [pc, #88]	@ (8008614 <HAL_GPIO_Init+0x250>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d007      	beq.n	80085ce <HAL_GPIO_Init+0x20a>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a15      	ldr	r2, [pc, #84]	@ (8008618 <HAL_GPIO_Init+0x254>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d101      	bne.n	80085ca <HAL_GPIO_Init+0x206>
 80085c6:	2309      	movs	r3, #9
 80085c8:	e029      	b.n	800861e <HAL_GPIO_Init+0x25a>
 80085ca:	230a      	movs	r3, #10
 80085cc:	e027      	b.n	800861e <HAL_GPIO_Init+0x25a>
 80085ce:	2307      	movs	r3, #7
 80085d0:	e025      	b.n	800861e <HAL_GPIO_Init+0x25a>
 80085d2:	2306      	movs	r3, #6
 80085d4:	e023      	b.n	800861e <HAL_GPIO_Init+0x25a>
 80085d6:	2305      	movs	r3, #5
 80085d8:	e021      	b.n	800861e <HAL_GPIO_Init+0x25a>
 80085da:	2304      	movs	r3, #4
 80085dc:	e01f      	b.n	800861e <HAL_GPIO_Init+0x25a>
 80085de:	2303      	movs	r3, #3
 80085e0:	e01d      	b.n	800861e <HAL_GPIO_Init+0x25a>
 80085e2:	2302      	movs	r3, #2
 80085e4:	e01b      	b.n	800861e <HAL_GPIO_Init+0x25a>
 80085e6:	2301      	movs	r3, #1
 80085e8:	e019      	b.n	800861e <HAL_GPIO_Init+0x25a>
 80085ea:	bf00      	nop
 80085ec:	58000080 	.word	0x58000080
 80085f0:	58024400 	.word	0x58024400
 80085f4:	58000400 	.word	0x58000400
 80085f8:	58020000 	.word	0x58020000
 80085fc:	58020400 	.word	0x58020400
 8008600:	58020800 	.word	0x58020800
 8008604:	58020c00 	.word	0x58020c00
 8008608:	58021000 	.word	0x58021000
 800860c:	58021400 	.word	0x58021400
 8008610:	58021800 	.word	0x58021800
 8008614:	58021c00 	.word	0x58021c00
 8008618:	58022400 	.word	0x58022400
 800861c:	2300      	movs	r3, #0
 800861e:	69fa      	ldr	r2, [r7, #28]
 8008620:	f002 0203 	and.w	r2, r2, #3
 8008624:	0092      	lsls	r2, r2, #2
 8008626:	4093      	lsls	r3, r2
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	4313      	orrs	r3, r2
 800862c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800862e:	4938      	ldr	r1, [pc, #224]	@ (8008710 <HAL_GPIO_Init+0x34c>)
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	089b      	lsrs	r3, r3, #2
 8008634:	3302      	adds	r3, #2
 8008636:	69ba      	ldr	r2, [r7, #24]
 8008638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800863c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	43db      	mvns	r3, r3
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	4013      	ands	r3, r2
 800864c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800865a:	69ba      	ldr	r2, [r7, #24]
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	4313      	orrs	r3, r2
 8008660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008662:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800866a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	43db      	mvns	r3, r3
 8008676:	69ba      	ldr	r2, [r7, #24]
 8008678:	4013      	ands	r3, r2
 800867a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d003      	beq.n	8008690 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	4313      	orrs	r3, r2
 800868e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008690:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	43db      	mvns	r3, r3
 80086a2:	69ba      	ldr	r2, [r7, #24]
 80086a4:	4013      	ands	r3, r2
 80086a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d003      	beq.n	80086bc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	43db      	mvns	r3, r3
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	4013      	ands	r3, r2
 80086d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	3301      	adds	r3, #1
 80086f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	fa22 f303 	lsr.w	r3, r2, r3
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f47f ae6b 	bne.w	80083d8 <HAL_GPIO_Init+0x14>
  }
}
 8008702:	bf00      	nop
 8008704:	bf00      	nop
 8008706:	3724      	adds	r7, #36	@ 0x24
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	58000400 	.word	0x58000400

08008714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	807b      	strh	r3, [r7, #2]
 8008720:	4613      	mov	r3, r2
 8008722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008724:	787b      	ldrb	r3, [r7, #1]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800872a:	887a      	ldrh	r2, [r7, #2]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008730:	e003      	b.n	800873a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008732:	887b      	ldrh	r3, [r7, #2]
 8008734:	041a      	lsls	r2, r3, #16
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	619a      	str	r2, [r3, #24]
}
 800873a:	bf00      	nop
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008746:	b480      	push	{r7}
 8008748:	b085      	sub	sp, #20
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	460b      	mov	r3, r1
 8008750:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008758:	887a      	ldrh	r2, [r7, #2]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4013      	ands	r3, r2
 800875e:	041a      	lsls	r2, r3, #16
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	43d9      	mvns	r1, r3
 8008764:	887b      	ldrh	r3, [r7, #2]
 8008766:	400b      	ands	r3, r1
 8008768:	431a      	orrs	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	619a      	str	r2, [r3, #24]
}
 800876e:	bf00      	nop
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
	...

0800877c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e08b      	b.n	80088a6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d106      	bne.n	80087a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7fa f9cc 	bl	8002b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2224      	movs	r2, #36	@ 0x24
 80087ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0201 	bic.w	r2, r2, #1
 80087be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685a      	ldr	r2, [r3, #4]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80087cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80087dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d107      	bne.n	80087f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80087f2:	609a      	str	r2, [r3, #8]
 80087f4:	e006      	b.n	8008804 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	689a      	ldr	r2, [r3, #8]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008802:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	2b02      	cmp	r3, #2
 800880a:	d108      	bne.n	800881e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800881a:	605a      	str	r2, [r3, #4]
 800881c:	e007      	b.n	800882e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800882c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6859      	ldr	r1, [r3, #4]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	4b1d      	ldr	r3, [pc, #116]	@ (80088b0 <HAL_I2C_Init+0x134>)
 800883a:	430b      	orrs	r3, r1
 800883c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68da      	ldr	r2, [r3, #12]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800884c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691a      	ldr	r2, [r3, #16]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	430a      	orrs	r2, r1
 8008866:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	69d9      	ldr	r1, [r3, #28]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a1a      	ldr	r2, [r3, #32]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	430a      	orrs	r2, r1
 8008876:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 0201 	orr.w	r2, r2, #1
 8008886:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2220      	movs	r2, #32
 8008892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	02008000 	.word	0x02008000

080088b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b088      	sub	sp, #32
 80088b8:	af02      	add	r7, sp, #8
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	607a      	str	r2, [r7, #4]
 80088be:	461a      	mov	r2, r3
 80088c0:	460b      	mov	r3, r1
 80088c2:	817b      	strh	r3, [r7, #10]
 80088c4:	4613      	mov	r3, r2
 80088c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b20      	cmp	r3, #32
 80088d2:	f040 80fd 	bne.w	8008ad0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d101      	bne.n	80088e4 <HAL_I2C_Master_Transmit+0x30>
 80088e0:	2302      	movs	r3, #2
 80088e2:	e0f6      	b.n	8008ad2 <HAL_I2C_Master_Transmit+0x21e>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088ec:	f7fd f88a 	bl	8005a04 <HAL_GetTick>
 80088f0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	2319      	movs	r3, #25
 80088f8:	2201      	movs	r2, #1
 80088fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f001 f887 	bl	8009a12 <I2C_WaitOnFlagUntilTimeout>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e0e1      	b.n	8008ad2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2221      	movs	r2, #33	@ 0x21
 8008912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2210      	movs	r2, #16
 800891a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	893a      	ldrh	r2, [r7, #8]
 800892e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800893a:	b29b      	uxth	r3, r3
 800893c:	2bff      	cmp	r3, #255	@ 0xff
 800893e:	d906      	bls.n	800894e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	22ff      	movs	r2, #255	@ 0xff
 8008944:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008946:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800894a:	617b      	str	r3, [r7, #20]
 800894c:	e007      	b.n	800895e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008952:	b29a      	uxth	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008958:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800895c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008962:	2b00      	cmp	r3, #0
 8008964:	d024      	beq.n	80089b0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800896a:	781a      	ldrb	r2, [r3, #0]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008980:	b29b      	uxth	r3, r3
 8008982:	3b01      	subs	r3, #1
 8008984:	b29a      	uxth	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800898e:	3b01      	subs	r3, #1
 8008990:	b29a      	uxth	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800899a:	b2db      	uxtb	r3, r3
 800899c:	3301      	adds	r3, #1
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	8979      	ldrh	r1, [r7, #10]
 80089a2:	4b4e      	ldr	r3, [pc, #312]	@ (8008adc <HAL_I2C_Master_Transmit+0x228>)
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f001 fa81 	bl	8009eb0 <I2C_TransferConfig>
 80089ae:	e066      	b.n	8008a7e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	8979      	ldrh	r1, [r7, #10]
 80089b8:	4b48      	ldr	r3, [pc, #288]	@ (8008adc <HAL_I2C_Master_Transmit+0x228>)
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f001 fa76 	bl	8009eb0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80089c4:	e05b      	b.n	8008a7e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	6a39      	ldr	r1, [r7, #32]
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f001 f87a 	bl	8009ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e07b      	b.n	8008ad2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089de:	781a      	ldrb	r2, [r3, #0]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ea:	1c5a      	adds	r2, r3, #1
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	3b01      	subs	r3, #1
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a02:	3b01      	subs	r3, #1
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d034      	beq.n	8008a7e <HAL_I2C_Master_Transmit+0x1ca>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d130      	bne.n	8008a7e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	2200      	movs	r2, #0
 8008a24:	2180      	movs	r1, #128	@ 0x80
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 fff3 	bl	8009a12 <I2C_WaitOnFlagUntilTimeout>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e04d      	b.n	8008ad2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	2bff      	cmp	r3, #255	@ 0xff
 8008a3e:	d90e      	bls.n	8008a5e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	22ff      	movs	r2, #255	@ 0xff
 8008a44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	8979      	ldrh	r1, [r7, #10]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f001 fa2a 	bl	8009eb0 <I2C_TransferConfig>
 8008a5c:	e00f      	b.n	8008a7e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	8979      	ldrh	r1, [r7, #10]
 8008a70:	2300      	movs	r3, #0
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f001 fa19 	bl	8009eb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d19e      	bne.n	80089c6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	6a39      	ldr	r1, [r7, #32]
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f001 f860 	bl	8009b52 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e01a      	b.n	8008ad2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6859      	ldr	r1, [r3, #4]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae0 <HAL_I2C_Master_Transmit+0x22c>)
 8008ab0:	400b      	ands	r3, r1
 8008ab2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	e000      	b.n	8008ad2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008ad0:	2302      	movs	r3, #2
  }
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	80002000 	.word	0x80002000
 8008ae0:	fe00e800 	.word	0xfe00e800

08008ae4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b088      	sub	sp, #32
 8008ae8:	af02      	add	r7, sp, #8
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	607a      	str	r2, [r7, #4]
 8008aee:	461a      	mov	r2, r3
 8008af0:	460b      	mov	r3, r1
 8008af2:	817b      	strh	r3, [r7, #10]
 8008af4:	4613      	mov	r3, r2
 8008af6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b20      	cmp	r3, #32
 8008b02:	f040 80db 	bne.w	8008cbc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d101      	bne.n	8008b14 <HAL_I2C_Master_Receive+0x30>
 8008b10:	2302      	movs	r3, #2
 8008b12:	e0d4      	b.n	8008cbe <HAL_I2C_Master_Receive+0x1da>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b1c:	f7fc ff72 	bl	8005a04 <HAL_GetTick>
 8008b20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	2319      	movs	r3, #25
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 ff6f 	bl	8009a12 <I2C_WaitOnFlagUntilTimeout>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e0bf      	b.n	8008cbe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2222      	movs	r2, #34	@ 0x22
 8008b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2210      	movs	r2, #16
 8008b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	893a      	ldrh	r2, [r7, #8]
 8008b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	2bff      	cmp	r3, #255	@ 0xff
 8008b6e:	d90e      	bls.n	8008b8e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	22ff      	movs	r2, #255	@ 0xff
 8008b74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	8979      	ldrh	r1, [r7, #10]
 8008b7e:	4b52      	ldr	r3, [pc, #328]	@ (8008cc8 <HAL_I2C_Master_Receive+0x1e4>)
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f001 f992 	bl	8009eb0 <I2C_TransferConfig>
 8008b8c:	e06d      	b.n	8008c6a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	8979      	ldrh	r1, [r7, #10]
 8008ba0:	4b49      	ldr	r3, [pc, #292]	@ (8008cc8 <HAL_I2C_Master_Receive+0x1e4>)
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f001 f981 	bl	8009eb0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008bae:	e05c      	b.n	8008c6a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	6a39      	ldr	r1, [r7, #32]
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f001 f80f 	bl	8009bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e07c      	b.n	8008cbe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bce:	b2d2      	uxtb	r2, r2
 8008bd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd6:	1c5a      	adds	r2, r3, #1
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008be0:	3b01      	subs	r3, #1
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d034      	beq.n	8008c6a <HAL_I2C_Master_Receive+0x186>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d130      	bne.n	8008c6a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	2180      	movs	r1, #128	@ 0x80
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 fefd 	bl	8009a12 <I2C_WaitOnFlagUntilTimeout>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e04d      	b.n	8008cbe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	2bff      	cmp	r3, #255	@ 0xff
 8008c2a:	d90e      	bls.n	8008c4a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	22ff      	movs	r2, #255	@ 0xff
 8008c30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	8979      	ldrh	r1, [r7, #10]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f001 f934 	bl	8009eb0 <I2C_TransferConfig>
 8008c48:	e00f      	b.n	8008c6a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	8979      	ldrh	r1, [r7, #10]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f001 f923 	bl	8009eb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d19d      	bne.n	8008bb0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	6a39      	ldr	r1, [r7, #32]
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 ff6a 	bl	8009b52 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e01a      	b.n	8008cbe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6859      	ldr	r1, [r3, #4]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8008ccc <HAL_I2C_Master_Receive+0x1e8>)
 8008c9c:	400b      	ands	r3, r1
 8008c9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	e000      	b.n	8008cbe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008cbc:	2302      	movs	r3, #2
  }
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	80002400 	.word	0x80002400
 8008ccc:	fe00e800 	.word	0xfe00e800

08008cd0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d005      	beq.n	8008cfc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	68f9      	ldr	r1, [r7, #12]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	4798      	blx	r3
  }
}
 8008cfc:	bf00      	nop
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	0a1b      	lsrs	r3, r3, #8
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d010      	beq.n	8008d4a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	09db      	lsrs	r3, r3, #7
 8008d2c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00a      	beq.n	8008d4a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d38:	f043 0201 	orr.w	r2, r3, #1
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d48:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	0a9b      	lsrs	r3, r3, #10
 8008d4e:	f003 0301 	and.w	r3, r3, #1
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d010      	beq.n	8008d78 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	09db      	lsrs	r3, r3, #7
 8008d5a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00a      	beq.n	8008d78 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d66:	f043 0208 	orr.w	r2, r3, #8
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008d76:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	0a5b      	lsrs	r3, r3, #9
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d010      	beq.n	8008da6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	09db      	lsrs	r3, r3, #7
 8008d88:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00a      	beq.n	8008da6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d94:	f043 0202 	orr.w	r2, r3, #2
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008da4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f003 030b 	and.w	r3, r3, #11
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8008db6:	68f9      	ldr	r1, [r7, #12]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fcd1 	bl	8009760 <I2C_ITError>
  }
}
 8008dbe:	bf00      	nop
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b083      	sub	sp, #12
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008dce:	bf00      	nop
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b083      	sub	sp, #12
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008de2:	bf00      	nop
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b083      	sub	sp, #12
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	460b      	mov	r3, r1
 8008df8:	70fb      	strb	r3, [r7, #3]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008dfe:	bf00      	nop
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b083      	sub	sp, #12
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008e12:	bf00      	nop
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b083      	sub	sp, #12
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008e26:	bf00      	nop
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b086      	sub	sp, #24
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e42:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d101      	bne.n	8008e56 <I2C_Slave_ISR_IT+0x24>
 8008e52:	2302      	movs	r3, #2
 8008e54:	e0ed      	b.n	8009032 <I2C_Slave_ISR_IT+0x200>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	095b      	lsrs	r3, r3, #5
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	095b      	lsrs	r3, r3, #5
 8008e6e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d004      	beq.n	8008e80 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008e76:	6939      	ldr	r1, [r7, #16]
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f000 f9c1 	bl	8009200 <I2C_ITSlaveCplt>
 8008e7e:	e0d3      	b.n	8009028 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	091b      	lsrs	r3, r3, #4
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d04d      	beq.n	8008f28 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	091b      	lsrs	r3, r3, #4
 8008e90:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d047      	beq.n	8008f28 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d128      	bne.n	8008ef4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b28      	cmp	r3, #40	@ 0x28
 8008eac:	d108      	bne.n	8008ec0 <I2C_Slave_ISR_IT+0x8e>
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008eb4:	d104      	bne.n	8008ec0 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008eb6:	6939      	ldr	r1, [r7, #16]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 fbfb 	bl	80096b4 <I2C_ITListenCplt>
 8008ebe:	e032      	b.n	8008f26 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b29      	cmp	r3, #41	@ 0x29
 8008eca:	d10e      	bne.n	8008eea <I2C_Slave_ISR_IT+0xb8>
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008ed2:	d00a      	beq.n	8008eea <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2210      	movs	r2, #16
 8008eda:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f000 fd56 	bl	800998e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f000 f92d 	bl	8009142 <I2C_ITSlaveSeqCplt>
 8008ee8:	e01d      	b.n	8008f26 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2210      	movs	r2, #16
 8008ef0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008ef2:	e096      	b.n	8009022 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2210      	movs	r2, #16
 8008efa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f00:	f043 0204 	orr.w	r2, r3, #4
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d004      	beq.n	8008f18 <I2C_Slave_ISR_IT+0xe6>
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f14:	f040 8085 	bne.w	8009022 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 fc1e 	bl	8009760 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008f24:	e07d      	b.n	8009022 <I2C_Slave_ISR_IT+0x1f0>
 8008f26:	e07c      	b.n	8009022 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	089b      	lsrs	r3, r3, #2
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d030      	beq.n	8008f96 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	089b      	lsrs	r3, r3, #2
 8008f38:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d02a      	beq.n	8008f96 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d018      	beq.n	8008f7c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f54:	b2d2      	uxtb	r2, r2
 8008f56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f5c:	1c5a      	adds	r2, r3, #1
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f66:	3b01      	subs	r3, #1
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	3b01      	subs	r3, #1
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d14f      	bne.n	8009026 <I2C_Slave_ISR_IT+0x1f4>
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008f8c:	d04b      	beq.n	8009026 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f000 f8d7 	bl	8009142 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008f94:	e047      	b.n	8009026 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	08db      	lsrs	r3, r3, #3
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00a      	beq.n	8008fb8 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	08db      	lsrs	r3, r3, #3
 8008fa6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d004      	beq.n	8008fb8 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008fae:	6939      	ldr	r1, [r7, #16]
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 f842 	bl	800903a <I2C_ITAddrCplt>
 8008fb6:	e037      	b.n	8009028 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	085b      	lsrs	r3, r3, #1
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d031      	beq.n	8009028 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	085b      	lsrs	r3, r3, #1
 8008fc8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d02b      	beq.n	8009028 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d018      	beq.n	800900c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fde:	781a      	ldrb	r2, [r3, #0]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fea:	1c5a      	adds	r2, r3, #1
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009002:	3b01      	subs	r3, #1
 8009004:	b29a      	uxth	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	851a      	strh	r2, [r3, #40]	@ 0x28
 800900a:	e00d      	b.n	8009028 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009012:	d002      	beq.n	800901a <I2C_Slave_ISR_IT+0x1e8>
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d106      	bne.n	8009028 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f000 f891 	bl	8009142 <I2C_ITSlaveSeqCplt>
 8009020:	e002      	b.n	8009028 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8009022:	bf00      	nop
 8009024:	e000      	b.n	8009028 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8009026:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800904a:	b2db      	uxtb	r3, r3
 800904c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009050:	2b28      	cmp	r3, #40	@ 0x28
 8009052:	d16a      	bne.n	800912a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	0c1b      	lsrs	r3, r3, #16
 800905c:	b2db      	uxtb	r3, r3
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	0c1b      	lsrs	r3, r3, #16
 800906c:	b29b      	uxth	r3, r3
 800906e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009072:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	b29b      	uxth	r3, r3
 800907c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009080:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	b29b      	uxth	r3, r3
 800908a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800908e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	2b02      	cmp	r3, #2
 8009096:	d138      	bne.n	800910a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8009098:	897b      	ldrh	r3, [r7, #10]
 800909a:	09db      	lsrs	r3, r3, #7
 800909c:	b29a      	uxth	r2, r3
 800909e:	89bb      	ldrh	r3, [r7, #12]
 80090a0:	4053      	eors	r3, r2
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	f003 0306 	and.w	r3, r3, #6
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d11c      	bne.n	80090e6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80090ac:	897b      	ldrh	r3, [r7, #10]
 80090ae:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090b4:	1c5a      	adds	r2, r3, #1
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d13b      	bne.n	800913a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2208      	movs	r2, #8
 80090ce:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80090d8:	89ba      	ldrh	r2, [r7, #12]
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff fe85 	bl	8008dee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80090e4:	e029      	b.n	800913a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80090e6:	893b      	ldrh	r3, [r7, #8]
 80090e8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80090ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 ff10 	bl	8009f14 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80090fc:	89ba      	ldrh	r2, [r7, #12]
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7ff fe73 	bl	8008dee <HAL_I2C_AddrCallback>
}
 8009108:	e017      	b.n	800913a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800910a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 ff00 	bl	8009f14 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800911c:	89ba      	ldrh	r2, [r7, #12]
 800911e:	7bfb      	ldrb	r3, [r7, #15]
 8009120:	4619      	mov	r1, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7ff fe63 	bl	8008dee <HAL_I2C_AddrCallback>
}
 8009128:	e007      	b.n	800913a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2208      	movs	r2, #8
 8009130:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800913a:	bf00      	nop
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b084      	sub	sp, #16
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	0b9b      	lsrs	r3, r3, #14
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	2b00      	cmp	r3, #0
 8009164:	d008      	beq.n	8009178 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	e00d      	b.n	8009194 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	0bdb      	lsrs	r3, r3, #15
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	d007      	beq.n	8009194 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009192:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b29      	cmp	r3, #41	@ 0x29
 800919e:	d112      	bne.n	80091c6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2228      	movs	r2, #40	@ 0x28
 80091a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2221      	movs	r2, #33	@ 0x21
 80091ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80091ae:	2101      	movs	r1, #1
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 feaf 	bl	8009f14 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f7ff fe01 	bl	8008dc6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80091c4:	e017      	b.n	80091f6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80091d0:	d111      	bne.n	80091f6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2228      	movs	r2, #40	@ 0x28
 80091d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2222      	movs	r2, #34	@ 0x22
 80091de:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80091e0:	2102      	movs	r1, #2
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fe96 	bl	8009f14 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff fdf2 	bl	8008dda <HAL_I2C_SlaveRxCpltCallback>
}
 80091f6:	bf00      	nop
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
	...

08009200 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800921a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009222:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2220      	movs	r2, #32
 800922a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	2b21      	cmp	r3, #33	@ 0x21
 8009230:	d002      	beq.n	8009238 <I2C_ITSlaveCplt+0x38>
 8009232:	7afb      	ldrb	r3, [r7, #11]
 8009234:	2b29      	cmp	r3, #41	@ 0x29
 8009236:	d108      	bne.n	800924a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009238:	f248 0101 	movw	r1, #32769	@ 0x8001
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fe69 	bl	8009f14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2221      	movs	r2, #33	@ 0x21
 8009246:	631a      	str	r2, [r3, #48]	@ 0x30
 8009248:	e019      	b.n	800927e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800924a:	7afb      	ldrb	r3, [r7, #11]
 800924c:	2b22      	cmp	r3, #34	@ 0x22
 800924e:	d002      	beq.n	8009256 <I2C_ITSlaveCplt+0x56>
 8009250:	7afb      	ldrb	r3, [r7, #11]
 8009252:	2b2a      	cmp	r3, #42	@ 0x2a
 8009254:	d108      	bne.n	8009268 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009256:	f248 0102 	movw	r1, #32770	@ 0x8002
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fe5a 	bl	8009f14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2222      	movs	r2, #34	@ 0x22
 8009264:	631a      	str	r2, [r3, #48]	@ 0x30
 8009266:	e00a      	b.n	800927e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8009268:	7afb      	ldrb	r3, [r7, #11]
 800926a:	2b28      	cmp	r3, #40	@ 0x28
 800926c:	d107      	bne.n	800927e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800926e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fe4e 	bl	8009f14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800928c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	6859      	ldr	r1, [r3, #4]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	4b80      	ldr	r3, [pc, #512]	@ (800949c <I2C_ITSlaveCplt+0x29c>)
 800929a:	400b      	ands	r3, r1
 800929c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fb75 	bl	800998e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	0b9b      	lsrs	r3, r3, #14
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d07a      	beq.n	80093a6 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80092be:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f000 8112 	beq.w	80094ee <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a73      	ldr	r2, [pc, #460]	@ (80094a0 <I2C_ITSlaveCplt+0x2a0>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d059      	beq.n	800938a <I2C_ITSlaveCplt+0x18a>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a71      	ldr	r2, [pc, #452]	@ (80094a4 <I2C_ITSlaveCplt+0x2a4>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d053      	beq.n	800938a <I2C_ITSlaveCplt+0x18a>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a6f      	ldr	r2, [pc, #444]	@ (80094a8 <I2C_ITSlaveCplt+0x2a8>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d04d      	beq.n	800938a <I2C_ITSlaveCplt+0x18a>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a6d      	ldr	r2, [pc, #436]	@ (80094ac <I2C_ITSlaveCplt+0x2ac>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d047      	beq.n	800938a <I2C_ITSlaveCplt+0x18a>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a6b      	ldr	r2, [pc, #428]	@ (80094b0 <I2C_ITSlaveCplt+0x2b0>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d041      	beq.n	800938a <I2C_ITSlaveCplt+0x18a>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a69      	ldr	r2, [pc, #420]	@ (80094b4 <I2C_ITSlaveCplt+0x2b4>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d03b      	beq.n	800938a <I2C_ITSlaveCplt+0x18a>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a67      	ldr	r2, [pc, #412]	@ (80094b8 <I2C_ITSlaveCplt+0x2b8>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d035      	beq.n	800938a <I2C_ITSlaveCplt+0x18a>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a65      	ldr	r2, [pc, #404]	@ (80094bc <I2C_ITSlaveCplt+0x2bc>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d02f      	beq.n	800938a <I2C_ITSlaveCplt+0x18a>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a63      	ldr	r2, [pc, #396]	@ (80094c0 <I2C_ITSlaveCplt+0x2c0>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d029      	beq.n	800938a <I2C_ITSlaveCplt+0x18a>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a61      	ldr	r2, [pc, #388]	@ (80094c4 <I2C_ITSlaveCplt+0x2c4>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d023      	beq.n	800938a <I2C_ITSlaveCplt+0x18a>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a5f      	ldr	r2, [pc, #380]	@ (80094c8 <I2C_ITSlaveCplt+0x2c8>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d01d      	beq.n	800938a <I2C_ITSlaveCplt+0x18a>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a5d      	ldr	r2, [pc, #372]	@ (80094cc <I2C_ITSlaveCplt+0x2cc>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d017      	beq.n	800938a <I2C_ITSlaveCplt+0x18a>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a5b      	ldr	r2, [pc, #364]	@ (80094d0 <I2C_ITSlaveCplt+0x2d0>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d011      	beq.n	800938a <I2C_ITSlaveCplt+0x18a>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a59      	ldr	r2, [pc, #356]	@ (80094d4 <I2C_ITSlaveCplt+0x2d4>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d00b      	beq.n	800938a <I2C_ITSlaveCplt+0x18a>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a57      	ldr	r2, [pc, #348]	@ (80094d8 <I2C_ITSlaveCplt+0x2d8>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d005      	beq.n	800938a <I2C_ITSlaveCplt+0x18a>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a55      	ldr	r2, [pc, #340]	@ (80094dc <I2C_ITSlaveCplt+0x2dc>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d105      	bne.n	8009396 <I2C_ITSlaveCplt+0x196>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	b29b      	uxth	r3, r3
 8009394:	e004      	b.n	80093a0 <I2C_ITSlaveCplt+0x1a0>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80093a4:	e0a3      	b.n	80094ee <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	0bdb      	lsrs	r3, r3, #15
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f000 809d 	beq.w	80094ee <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80093c2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 8090 	beq.w	80094ee <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a32      	ldr	r2, [pc, #200]	@ (80094a0 <I2C_ITSlaveCplt+0x2a0>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d059      	beq.n	800948e <I2C_ITSlaveCplt+0x28e>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a30      	ldr	r2, [pc, #192]	@ (80094a4 <I2C_ITSlaveCplt+0x2a4>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d053      	beq.n	800948e <I2C_ITSlaveCplt+0x28e>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a2e      	ldr	r2, [pc, #184]	@ (80094a8 <I2C_ITSlaveCplt+0x2a8>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d04d      	beq.n	800948e <I2C_ITSlaveCplt+0x28e>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a2c      	ldr	r2, [pc, #176]	@ (80094ac <I2C_ITSlaveCplt+0x2ac>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d047      	beq.n	800948e <I2C_ITSlaveCplt+0x28e>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a2a      	ldr	r2, [pc, #168]	@ (80094b0 <I2C_ITSlaveCplt+0x2b0>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d041      	beq.n	800948e <I2C_ITSlaveCplt+0x28e>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a28      	ldr	r2, [pc, #160]	@ (80094b4 <I2C_ITSlaveCplt+0x2b4>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d03b      	beq.n	800948e <I2C_ITSlaveCplt+0x28e>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a26      	ldr	r2, [pc, #152]	@ (80094b8 <I2C_ITSlaveCplt+0x2b8>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d035      	beq.n	800948e <I2C_ITSlaveCplt+0x28e>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a24      	ldr	r2, [pc, #144]	@ (80094bc <I2C_ITSlaveCplt+0x2bc>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d02f      	beq.n	800948e <I2C_ITSlaveCplt+0x28e>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a22      	ldr	r2, [pc, #136]	@ (80094c0 <I2C_ITSlaveCplt+0x2c0>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d029      	beq.n	800948e <I2C_ITSlaveCplt+0x28e>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a20      	ldr	r2, [pc, #128]	@ (80094c4 <I2C_ITSlaveCplt+0x2c4>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d023      	beq.n	800948e <I2C_ITSlaveCplt+0x28e>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a1e      	ldr	r2, [pc, #120]	@ (80094c8 <I2C_ITSlaveCplt+0x2c8>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d01d      	beq.n	800948e <I2C_ITSlaveCplt+0x28e>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a1c      	ldr	r2, [pc, #112]	@ (80094cc <I2C_ITSlaveCplt+0x2cc>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d017      	beq.n	800948e <I2C_ITSlaveCplt+0x28e>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a1a      	ldr	r2, [pc, #104]	@ (80094d0 <I2C_ITSlaveCplt+0x2d0>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d011      	beq.n	800948e <I2C_ITSlaveCplt+0x28e>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a18      	ldr	r2, [pc, #96]	@ (80094d4 <I2C_ITSlaveCplt+0x2d4>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d00b      	beq.n	800948e <I2C_ITSlaveCplt+0x28e>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a16      	ldr	r2, [pc, #88]	@ (80094d8 <I2C_ITSlaveCplt+0x2d8>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d005      	beq.n	800948e <I2C_ITSlaveCplt+0x28e>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a14      	ldr	r2, [pc, #80]	@ (80094dc <I2C_ITSlaveCplt+0x2dc>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d128      	bne.n	80094e0 <I2C_ITSlaveCplt+0x2e0>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	b29b      	uxth	r3, r3
 8009498:	e027      	b.n	80094ea <I2C_ITSlaveCplt+0x2ea>
 800949a:	bf00      	nop
 800949c:	fe00e800 	.word	0xfe00e800
 80094a0:	40020010 	.word	0x40020010
 80094a4:	40020028 	.word	0x40020028
 80094a8:	40020040 	.word	0x40020040
 80094ac:	40020058 	.word	0x40020058
 80094b0:	40020070 	.word	0x40020070
 80094b4:	40020088 	.word	0x40020088
 80094b8:	400200a0 	.word	0x400200a0
 80094bc:	400200b8 	.word	0x400200b8
 80094c0:	40020410 	.word	0x40020410
 80094c4:	40020428 	.word	0x40020428
 80094c8:	40020440 	.word	0x40020440
 80094cc:	40020458 	.word	0x40020458
 80094d0:	40020470 	.word	0x40020470
 80094d4:	40020488 	.word	0x40020488
 80094d8:	400204a0 	.word	0x400204a0
 80094dc:	400204b8 	.word	0x400204b8
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	089b      	lsrs	r3, r3, #2
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d020      	beq.n	800953c <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	f023 0304 	bic.w	r3, r3, #4
 8009500:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800950c:	b2d2      	uxtb	r2, r2
 800950e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009514:	1c5a      	adds	r2, r3, #1
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00c      	beq.n	800953c <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009526:	3b01      	subs	r3, #1
 8009528:	b29a      	uxth	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009532:	b29b      	uxth	r3, r3
 8009534:	3b01      	subs	r3, #1
 8009536:	b29a      	uxth	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009540:	b29b      	uxth	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d005      	beq.n	8009552 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800954a:	f043 0204 	orr.w	r2, r3, #4
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	091b      	lsrs	r3, r3, #4
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b00      	cmp	r3, #0
 800955c:	d04a      	beq.n	80095f4 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	091b      	lsrs	r3, r3, #4
 8009562:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009566:	2b00      	cmp	r3, #0
 8009568:	d044      	beq.n	80095f4 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800956e:	b29b      	uxth	r3, r3
 8009570:	2b00      	cmp	r3, #0
 8009572:	d128      	bne.n	80095c6 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b28      	cmp	r3, #40	@ 0x28
 800957e:	d108      	bne.n	8009592 <I2C_ITSlaveCplt+0x392>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009586:	d104      	bne.n	8009592 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009588:	6979      	ldr	r1, [r7, #20]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f892 	bl	80096b4 <I2C_ITListenCplt>
 8009590:	e030      	b.n	80095f4 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b29      	cmp	r3, #41	@ 0x29
 800959c:	d10e      	bne.n	80095bc <I2C_ITSlaveCplt+0x3bc>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80095a4:	d00a      	beq.n	80095bc <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2210      	movs	r2, #16
 80095ac:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f9ed 	bl	800998e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7ff fdc4 	bl	8009142 <I2C_ITSlaveSeqCplt>
 80095ba:	e01b      	b.n	80095f4 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2210      	movs	r2, #16
 80095c2:	61da      	str	r2, [r3, #28]
 80095c4:	e016      	b.n	80095f4 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2210      	movs	r2, #16
 80095cc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095d2:	f043 0204 	orr.w	r2, r3, #4
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d003      	beq.n	80095e8 <I2C_ITSlaveCplt+0x3e8>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095e6:	d105      	bne.n	80095f4 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f8b6 	bl	8009760 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009606:	2b00      	cmp	r3, #0
 8009608:	d010      	beq.n	800962c <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f8a5 	bl	8009760 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b28      	cmp	r3, #40	@ 0x28
 8009620:	d141      	bne.n	80096a6 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009622:	6979      	ldr	r1, [r7, #20]
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f845 	bl	80096b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800962a:	e03c      	b.n	80096a6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009630:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009634:	d014      	beq.n	8009660 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7ff fd83 	bl	8009142 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a1c      	ldr	r2, [pc, #112]	@ (80096b0 <I2C_ITSlaveCplt+0x4b0>)
 8009640:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2220      	movs	r2, #32
 8009646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7ff fbd6 	bl	8008e0a <HAL_I2C_ListenCpltCallback>
}
 800965e:	e022      	b.n	80096a6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b22      	cmp	r3, #34	@ 0x22
 800966a:	d10e      	bne.n	800968a <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2220      	movs	r2, #32
 8009670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f7ff fba9 	bl	8008dda <HAL_I2C_SlaveRxCpltCallback>
}
 8009688:	e00d      	b.n	80096a6 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2220      	movs	r2, #32
 800968e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7ff fb90 	bl	8008dc6 <HAL_I2C_SlaveTxCpltCallback>
}
 80096a6:	bf00      	nop
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	ffff0000 	.word	0xffff0000

080096b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a26      	ldr	r2, [pc, #152]	@ (800975c <I2C_ITListenCplt+0xa8>)
 80096c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2220      	movs	r2, #32
 80096ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	089b      	lsrs	r3, r3, #2
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d022      	beq.n	8009732 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f6:	b2d2      	uxtb	r2, r2
 80096f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096fe:	1c5a      	adds	r2, r3, #1
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009708:	2b00      	cmp	r3, #0
 800970a:	d012      	beq.n	8009732 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009710:	3b01      	subs	r3, #1
 8009712:	b29a      	uxth	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800971c:	b29b      	uxth	r3, r3
 800971e:	3b01      	subs	r3, #1
 8009720:	b29a      	uxth	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800972a:	f043 0204 	orr.w	r2, r3, #4
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009732:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fbec 	bl	8009f14 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2210      	movs	r2, #16
 8009742:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f7ff fb5c 	bl	8008e0a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009752:	bf00      	nop
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	ffff0000 	.word	0xffff0000

08009760 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009770:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a6d      	ldr	r2, [pc, #436]	@ (8009934 <I2C_ITError+0x1d4>)
 800977e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	431a      	orrs	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	2b28      	cmp	r3, #40	@ 0x28
 8009796:	d005      	beq.n	80097a4 <I2C_ITError+0x44>
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	2b29      	cmp	r3, #41	@ 0x29
 800979c:	d002      	beq.n	80097a4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800979e:	7bfb      	ldrb	r3, [r7, #15]
 80097a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80097a2:	d10b      	bne.n	80097bc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80097a4:	2103      	movs	r1, #3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fbb4 	bl	8009f14 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2228      	movs	r2, #40	@ 0x28
 80097b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a60      	ldr	r2, [pc, #384]	@ (8009938 <I2C_ITError+0x1d8>)
 80097b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80097ba:	e030      	b.n	800981e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80097bc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fba7 	bl	8009f14 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f8e1 	bl	800998e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	2b60      	cmp	r3, #96	@ 0x60
 80097d6:	d01f      	beq.n	8009818 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2220      	movs	r2, #32
 80097dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	f003 0320 	and.w	r3, r3, #32
 80097ea:	2b20      	cmp	r3, #32
 80097ec:	d114      	bne.n	8009818 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	f003 0310 	and.w	r3, r3, #16
 80097f8:	2b10      	cmp	r3, #16
 80097fa:	d109      	bne.n	8009810 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2210      	movs	r2, #16
 8009802:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009808:	f043 0204 	orr.w	r2, r3, #4
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2220      	movs	r2, #32
 8009816:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009822:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009828:	2b00      	cmp	r3, #0
 800982a:	d039      	beq.n	80098a0 <I2C_ITError+0x140>
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	2b11      	cmp	r3, #17
 8009830:	d002      	beq.n	8009838 <I2C_ITError+0xd8>
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	2b21      	cmp	r3, #33	@ 0x21
 8009836:	d133      	bne.n	80098a0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009842:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009846:	d107      	bne.n	8009858 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009856:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800985c:	4618      	mov	r0, r3
 800985e:	f7fe f9bb 	bl	8007bd8 <HAL_DMA_GetState>
 8009862:	4603      	mov	r3, r0
 8009864:	2b01      	cmp	r3, #1
 8009866:	d017      	beq.n	8009898 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800986c:	4a33      	ldr	r2, [pc, #204]	@ (800993c <I2C_ITError+0x1dc>)
 800986e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800987c:	4618      	mov	r0, r3
 800987e:	f7fd f83b 	bl	80068f8 <HAL_DMA_Abort_IT>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d04d      	beq.n	8009924 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800988c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009892:	4610      	mov	r0, r2
 8009894:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009896:	e045      	b.n	8009924 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f851 	bl	8009940 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800989e:	e041      	b.n	8009924 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d039      	beq.n	800991c <I2C_ITError+0x1bc>
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	2b12      	cmp	r3, #18
 80098ac:	d002      	beq.n	80098b4 <I2C_ITError+0x154>
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	2b22      	cmp	r3, #34	@ 0x22
 80098b2:	d133      	bne.n	800991c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098c2:	d107      	bne.n	80098d4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80098d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fe f97d 	bl	8007bd8 <HAL_DMA_GetState>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d017      	beq.n	8009914 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098e8:	4a14      	ldr	r2, [pc, #80]	@ (800993c <I2C_ITError+0x1dc>)
 80098ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fc fffd 	bl	80068f8 <HAL_DMA_Abort_IT>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d011      	beq.n	8009928 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800990e:	4610      	mov	r0, r2
 8009910:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009912:	e009      	b.n	8009928 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f813 	bl	8009940 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800991a:	e005      	b.n	8009928 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f80f 	bl	8009940 <I2C_TreatErrorCallback>
  }
}
 8009922:	e002      	b.n	800992a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009924:	bf00      	nop
 8009926:	e000      	b.n	800992a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009928:	bf00      	nop
}
 800992a:	bf00      	nop
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	ffff0000 	.word	0xffff0000
 8009938:	08008e33 	.word	0x08008e33
 800993c:	080099d7 	.word	0x080099d7

08009940 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b60      	cmp	r3, #96	@ 0x60
 8009952:	d10e      	bne.n	8009972 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2220      	movs	r2, #32
 8009958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f7ff fa57 	bl	8008e1e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009970:	e009      	b.n	8009986 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7f9 fab1 	bl	8002ee8 <HAL_I2C_ErrorCallback>
}
 8009986:	bf00      	nop
 8009988:	3708      	adds	r7, #8
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800998e:	b480      	push	{r7}
 8009990:	b083      	sub	sp, #12
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	f003 0302 	and.w	r3, r3, #2
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d103      	bne.n	80099ac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2200      	movs	r2, #0
 80099aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d007      	beq.n	80099ca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	699a      	ldr	r2, [r3, #24]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f042 0201 	orr.w	r2, r2, #1
 80099c8:	619a      	str	r2, [r3, #24]
  }
}
 80099ca:	bf00      	nop
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d003      	beq.n	80099f4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f0:	2200      	movs	r2, #0
 80099f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a00:	2200      	movs	r2, #0
 8009a02:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f7ff ff9b 	bl	8009940 <I2C_TreatErrorCallback>
}
 8009a0a:	bf00      	nop
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b084      	sub	sp, #16
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	60f8      	str	r0, [r7, #12]
 8009a1a:	60b9      	str	r1, [r7, #8]
 8009a1c:	603b      	str	r3, [r7, #0]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a22:	e03b      	b.n	8009a9c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a24:	69ba      	ldr	r2, [r7, #24]
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 f961 	bl	8009cf0 <I2C_IsErrorOccurred>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e041      	b.n	8009abc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a3e:	d02d      	beq.n	8009a9c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a40:	f7fb ffe0 	bl	8005a04 <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d302      	bcc.n	8009a56 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d122      	bne.n	8009a9c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	699a      	ldr	r2, [r3, #24]
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	4013      	ands	r3, r2
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	bf0c      	ite	eq
 8009a66:	2301      	moveq	r3, #1
 8009a68:	2300      	movne	r3, #0
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	79fb      	ldrb	r3, [r7, #7]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d113      	bne.n	8009a9c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a78:	f043 0220 	orr.w	r2, r3, #32
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2220      	movs	r2, #32
 8009a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e00f      	b.n	8009abc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	699a      	ldr	r2, [r3, #24]
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	bf0c      	ite	eq
 8009aac:	2301      	moveq	r3, #1
 8009aae:	2300      	movne	r3, #0
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	79fb      	ldrb	r3, [r7, #7]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d0b4      	beq.n	8009a24 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009ad0:	e033      	b.n	8009b3a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	68b9      	ldr	r1, [r7, #8]
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f000 f90a 	bl	8009cf0 <I2C_IsErrorOccurred>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e031      	b.n	8009b4a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009aec:	d025      	beq.n	8009b3a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009aee:	f7fb ff89 	bl	8005a04 <HAL_GetTick>
 8009af2:	4602      	mov	r2, r0
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d302      	bcc.n	8009b04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d11a      	bne.n	8009b3a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	f003 0302 	and.w	r3, r3, #2
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d013      	beq.n	8009b3a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b16:	f043 0220 	orr.w	r2, r3, #32
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2220      	movs	r2, #32
 8009b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e007      	b.n	8009b4a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	f003 0302 	and.w	r3, r3, #2
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d1c4      	bne.n	8009ad2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b084      	sub	sp, #16
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	60b9      	str	r1, [r7, #8]
 8009b5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b5e:	e02f      	b.n	8009bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	68b9      	ldr	r1, [r7, #8]
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 f8c3 	bl	8009cf0 <I2C_IsErrorOccurred>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	e02d      	b.n	8009bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b74:	f7fb ff46 	bl	8005a04 <HAL_GetTick>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d302      	bcc.n	8009b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d11a      	bne.n	8009bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	f003 0320 	and.w	r3, r3, #32
 8009b94:	2b20      	cmp	r3, #32
 8009b96:	d013      	beq.n	8009bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b9c:	f043 0220 	orr.w	r2, r3, #32
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e007      	b.n	8009bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	f003 0320 	and.w	r3, r3, #32
 8009bca:	2b20      	cmp	r3, #32
 8009bcc:	d1c8      	bne.n	8009b60 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009be8:	e071      	b.n	8009cce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	68b9      	ldr	r1, [r7, #8]
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 f87e 	bl	8009cf0 <I2C_IsErrorOccurred>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	f003 0320 	and.w	r3, r3, #32
 8009c08:	2b20      	cmp	r3, #32
 8009c0a:	d13b      	bne.n	8009c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009c0c:	7dfb      	ldrb	r3, [r7, #23]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d138      	bne.n	8009c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	f003 0304 	and.w	r3, r3, #4
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	d105      	bne.n	8009c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	f003 0310 	and.w	r3, r3, #16
 8009c36:	2b10      	cmp	r3, #16
 8009c38:	d121      	bne.n	8009c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2210      	movs	r2, #16
 8009c40:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2204      	movs	r2, #4
 8009c46:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2220      	movs	r2, #32
 8009c4e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6859      	ldr	r1, [r3, #4]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	4b24      	ldr	r3, [pc, #144]	@ (8009cec <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009c5c:	400b      	ands	r3, r1
 8009c5e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2220      	movs	r2, #32
 8009c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	75fb      	strb	r3, [r7, #23]
 8009c7c:	e002      	b.n	8009c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009c84:	f7fb febe 	bl	8005a04 <HAL_GetTick>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d302      	bcc.n	8009c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d119      	bne.n	8009cce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009c9a:	7dfb      	ldrb	r3, [r7, #23]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d116      	bne.n	8009cce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	f003 0304 	and.w	r3, r3, #4
 8009caa:	2b04      	cmp	r3, #4
 8009cac:	d00f      	beq.n	8009cce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cb2:	f043 0220 	orr.w	r2, r3, #32
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2220      	movs	r2, #32
 8009cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	f003 0304 	and.w	r3, r3, #4
 8009cd8:	2b04      	cmp	r3, #4
 8009cda:	d002      	beq.n	8009ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d083      	beq.n	8009bea <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	fe00e800 	.word	0xfe00e800

08009cf0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b08a      	sub	sp, #40	@ 0x28
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	699b      	ldr	r3, [r3, #24]
 8009d08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	f003 0310 	and.w	r3, r3, #16
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d068      	beq.n	8009dee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2210      	movs	r2, #16
 8009d22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d24:	e049      	b.n	8009dba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d2c:	d045      	beq.n	8009dba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009d2e:	f7fb fe69 	bl	8005a04 <HAL_GetTick>
 8009d32:	4602      	mov	r2, r0
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d302      	bcc.n	8009d44 <I2C_IsErrorOccurred+0x54>
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d13a      	bne.n	8009dba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	699b      	ldr	r3, [r3, #24]
 8009d5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d66:	d121      	bne.n	8009dac <I2C_IsErrorOccurred+0xbc>
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d6e:	d01d      	beq.n	8009dac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009d70:	7cfb      	ldrb	r3, [r7, #19]
 8009d72:	2b20      	cmp	r3, #32
 8009d74:	d01a      	beq.n	8009dac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009d86:	f7fb fe3d 	bl	8005a04 <HAL_GetTick>
 8009d8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d8c:	e00e      	b.n	8009dac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009d8e:	f7fb fe39 	bl	8005a04 <HAL_GetTick>
 8009d92:	4602      	mov	r2, r0
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	2b19      	cmp	r3, #25
 8009d9a:	d907      	bls.n	8009dac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	f043 0320 	orr.w	r3, r3, #32
 8009da2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009daa:	e006      	b.n	8009dba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	f003 0320 	and.w	r3, r3, #32
 8009db6:	2b20      	cmp	r3, #32
 8009db8:	d1e9      	bne.n	8009d8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	f003 0320 	and.w	r3, r3, #32
 8009dc4:	2b20      	cmp	r3, #32
 8009dc6:	d003      	beq.n	8009dd0 <I2C_IsErrorOccurred+0xe0>
 8009dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d0aa      	beq.n	8009d26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d103      	bne.n	8009de0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	f043 0304 	orr.w	r3, r3, #4
 8009de6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00b      	beq.n	8009e18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009e00:	6a3b      	ldr	r3, [r7, #32]
 8009e02:	f043 0301 	orr.w	r3, r3, #1
 8009e06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00b      	beq.n	8009e3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009e22:	6a3b      	ldr	r3, [r7, #32]
 8009e24:	f043 0308 	orr.w	r3, r3, #8
 8009e28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009e32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00b      	beq.n	8009e5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	f043 0302 	orr.w	r3, r3, #2
 8009e4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d01c      	beq.n	8009e9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f7ff fd92 	bl	800998e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6859      	ldr	r1, [r3, #4]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	4b0d      	ldr	r3, [pc, #52]	@ (8009eac <I2C_IsErrorOccurred+0x1bc>)
 8009e76:	400b      	ands	r3, r1
 8009e78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e7e:	6a3b      	ldr	r3, [r7, #32]
 8009e80:	431a      	orrs	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2220      	movs	r2, #32
 8009e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3728      	adds	r7, #40	@ 0x28
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	fe00e800 	.word	0xfe00e800

08009eb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b087      	sub	sp, #28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	607b      	str	r3, [r7, #4]
 8009eba:	460b      	mov	r3, r1
 8009ebc:	817b      	strh	r3, [r7, #10]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ec2:	897b      	ldrh	r3, [r7, #10]
 8009ec4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ec8:	7a7b      	ldrb	r3, [r7, #9]
 8009eca:	041b      	lsls	r3, r3, #16
 8009ecc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ed0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ede:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	685a      	ldr	r2, [r3, #4]
 8009ee6:	6a3b      	ldr	r3, [r7, #32]
 8009ee8:	0d5b      	lsrs	r3, r3, #21
 8009eea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009eee:	4b08      	ldr	r3, [pc, #32]	@ (8009f10 <I2C_TransferConfig+0x60>)
 8009ef0:	430b      	orrs	r3, r1
 8009ef2:	43db      	mvns	r3, r3
 8009ef4:	ea02 0103 	and.w	r1, r2, r3
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	430a      	orrs	r2, r1
 8009f00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009f02:	bf00      	nop
 8009f04:	371c      	adds	r7, #28
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	03ff63ff 	.word	0x03ff63ff

08009f14 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009f24:	887b      	ldrh	r3, [r7, #2]
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00f      	beq.n	8009f4e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009f34:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009f42:	2b28      	cmp	r3, #40	@ 0x28
 8009f44:	d003      	beq.n	8009f4e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009f4c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009f4e:	887b      	ldrh	r3, [r7, #2]
 8009f50:	f003 0302 	and.w	r3, r3, #2
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00f      	beq.n	8009f78 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009f5e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009f6c:	2b28      	cmp	r3, #40	@ 0x28
 8009f6e:	d003      	beq.n	8009f78 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009f76:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009f78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	da03      	bge.n	8009f88 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009f86:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009f88:	887b      	ldrh	r3, [r7, #2]
 8009f8a:	2b10      	cmp	r3, #16
 8009f8c:	d103      	bne.n	8009f96 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009f94:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009f96:	887b      	ldrh	r3, [r7, #2]
 8009f98:	2b20      	cmp	r3, #32
 8009f9a:	d103      	bne.n	8009fa4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f043 0320 	orr.w	r3, r3, #32
 8009fa2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009fa4:	887b      	ldrh	r3, [r7, #2]
 8009fa6:	2b40      	cmp	r3, #64	@ 0x40
 8009fa8:	d103      	bne.n	8009fb2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	6819      	ldr	r1, [r3, #0]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	43da      	mvns	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	400a      	ands	r2, r1
 8009fc2:	601a      	str	r2, [r3, #0]
}
 8009fc4:	bf00      	nop
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b20      	cmp	r3, #32
 8009fe4:	d138      	bne.n	800a058 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d101      	bne.n	8009ff4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	e032      	b.n	800a05a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2224      	movs	r2, #36	@ 0x24
 800a000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f022 0201 	bic.w	r2, r2, #1
 800a012:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a022:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	6819      	ldr	r1, [r3, #0]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	430a      	orrs	r2, r1
 800a032:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f042 0201 	orr.w	r2, r2, #1
 800a042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2220      	movs	r2, #32
 800a048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	e000      	b.n	800a05a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a058:	2302      	movs	r3, #2
  }
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	370c      	adds	r7, #12
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a066:	b480      	push	{r7}
 800a068:	b085      	sub	sp, #20
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b20      	cmp	r3, #32
 800a07a:	d139      	bne.n	800a0f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a082:	2b01      	cmp	r3, #1
 800a084:	d101      	bne.n	800a08a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a086:	2302      	movs	r3, #2
 800a088:	e033      	b.n	800a0f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2224      	movs	r2, #36	@ 0x24
 800a096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f022 0201 	bic.w	r2, r2, #1
 800a0a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a0b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	021b      	lsls	r3, r3, #8
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f042 0201 	orr.w	r2, r2, #1
 800a0da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2220      	movs	r2, #32
 800a0e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	e000      	b.n	800a0f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a0f0:	2302      	movs	r3, #2
  }
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
	...

0800a100 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af02      	add	r7, sp, #8
 800a106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800a10c:	f7fb fc7a 	bl	8005a04 <HAL_GetTick>
 800a110:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d102      	bne.n	800a11e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	73fb      	strb	r3, [r7, #15]
 800a11c:	e0a5      	b.n	800a26a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f040 809e 	bne.w	800a26a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7f9 fb64 	bl	80037fc <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800a134:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fa40 	bl	800a5be <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	689a      	ldr	r2, [r3, #8]
 800a144:	4b4b      	ldr	r3, [pc, #300]	@ (800a274 <HAL_OSPI_Init+0x174>)
 800a146:	4013      	ands	r3, r2
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	68d1      	ldr	r1, [r2, #12]
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	6912      	ldr	r2, [r2, #16]
 800a150:	3a01      	subs	r2, #1
 800a152:	0412      	lsls	r2, r2, #16
 800a154:	4311      	orrs	r1, r2
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	6952      	ldr	r2, [r2, #20]
 800a15a:	3a01      	subs	r2, #1
 800a15c:	0212      	lsls	r2, r2, #8
 800a15e:	4311      	orrs	r1, r2
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a164:	4311      	orrs	r1, r2
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	69d2      	ldr	r2, [r2, #28]
 800a16a:	4311      	orrs	r1, r2
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	6812      	ldr	r2, [r2, #0]
 800a170:	430b      	orrs	r3, r1
 800a172:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a1a      	ldr	r2, [r3, #32]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	430a      	orrs	r2, r1
 800a188:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a18e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	430a      	orrs	r2, r1
 800a19a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a1a4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	021a      	lsls	r2, r3, #8
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	430a      	orrs	r2, r1
 800a1be:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	2120      	movs	r1, #32
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fef1 	bl	800afb4 <OSPI_WaitFlagStateUntilTimeout>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a1d6:	7bfb      	ldrb	r3, [r7, #15]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d146      	bne.n	800a26a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ea:	1e5a      	subs	r2, r3, #1
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	430a      	orrs	r2, r1
 800a1f2:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	689a      	ldr	r2, [r3, #8]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	430a      	orrs	r2, r1
 800a208:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a212:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a21e:	431a      	orrs	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	430a      	orrs	r2, r1
 800a226:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f042 0201 	orr.w	r2, r2, #1
 800a238:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	699b      	ldr	r3, [r3, #24]
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d107      	bne.n	800a252 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689a      	ldr	r2, [r3, #8]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f042 0202 	orr.w	r2, r2, #2
 800a250:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a25a:	d103      	bne.n	800a264 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	651a      	str	r2, [r3, #80]	@ 0x50
 800a262:	e002      	b.n	800a26a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2202      	movs	r2, #2
 800a268:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	f8e0f8f4 	.word	0xf8e0f8f4

0800a278 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b08a      	sub	sp, #40	@ 0x28
 800a27c:	af02      	add	r7, sp, #8
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800a284:	f7fb fbbe 	bl	8005a04 <HAL_GetTick>
 800a288:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a28e:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a294:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d104      	bne.n	800a2a6 <HAL_OSPI_Command+0x2e>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2a4:	d115      	bne.n	800a2d2 <HAL_OSPI_Command+0x5a>
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2b14      	cmp	r3, #20
 800a2aa:	d107      	bne.n	800a2bc <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d00e      	beq.n	800a2d2 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b03      	cmp	r3, #3
 800a2ba:	d00a      	beq.n	800a2d2 <HAL_OSPI_Command+0x5a>
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	2b24      	cmp	r3, #36	@ 0x24
 800a2c0:	d15b      	bne.n	800a37a <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d003      	beq.n	800a2d2 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d153      	bne.n	800a37a <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	2120      	movs	r1, #32
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f000 fe69 	bl	800afb4 <OSPI_WaitFlagStateUntilTimeout>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800a2e6:	7ffb      	ldrb	r3, [r7, #31]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d14c      	bne.n	800a386 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800a2f2:	68b9      	ldr	r1, [r7, #8]
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 fe95 	bl	800b024 <OSPI_ConfigCmd>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800a2fe:	7ffb      	ldrb	r3, [r7, #31]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d140      	bne.n	800a386 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10e      	bne.n	800a32a <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	2201      	movs	r2, #1
 800a314:	2102      	movs	r1, #2
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f000 fe4c 	bl	800afb4 <OSPI_WaitFlagStateUntilTimeout>
 800a31c:	4603      	mov	r3, r0
 800a31e:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2202      	movs	r2, #2
 800a326:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800a328:	e02d      	b.n	800a386 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d103      	bne.n	800a33a <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2204      	movs	r2, #4
 800a336:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800a338:	e025      	b.n	800a386 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d10b      	bne.n	800a35a <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a346:	2b24      	cmp	r3, #36	@ 0x24
 800a348:	d103      	bne.n	800a352 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2204      	movs	r2, #4
 800a34e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800a350:	e019      	b.n	800a386 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2214      	movs	r2, #20
 800a356:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800a358:	e015      	b.n	800a386 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d111      	bne.n	800a386 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a366:	2b14      	cmp	r3, #20
 800a368:	d103      	bne.n	800a372 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2204      	movs	r2, #4
 800a36e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800a370:	e009      	b.n	800a386 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2224      	movs	r2, #36	@ 0x24
 800a376:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800a378:	e005      	b.n	800a386 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2210      	movs	r2, #16
 800a382:	655a      	str	r2, [r3, #84]	@ 0x54
 800a384:	e000      	b.n	800a388 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800a386:	bf00      	nop
  }

  /* Return function status */
  return status;
 800a388:	7ffb      	ldrb	r3, [r7, #31]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3720      	adds	r7, #32
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b08a      	sub	sp, #40	@ 0x28
 800a396:	af02      	add	r7, sp, #8
 800a398:	60f8      	str	r0, [r7, #12]
 800a39a:	60b9      	str	r1, [r7, #8]
 800a39c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a39e:	f7fb fb31 	bl	8005a04 <HAL_GetTick>
 800a3a2:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3350      	adds	r3, #80	@ 0x50
 800a3aa:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d105      	bne.n	800a3be <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2208      	movs	r2, #8
 800a3ba:	655a      	str	r2, [r3, #84]	@ 0x54
 800a3bc:	e057      	b.n	800a46e <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3c2:	2b04      	cmp	r3, #4
 800a3c4:	d14e      	bne.n	800a464 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3cc:	1c5a      	adds	r2, r3, #1
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a3ee:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	2104      	movs	r1, #4
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f000 fdda 	bl	800afb4 <OSPI_WaitFlagStateUntilTimeout>
 800a400:	4603      	mov	r3, r0
 800a402:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800a404:	7ffb      	ldrb	r3, [r7, #31]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d113      	bne.n	800a432 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a40e:	781a      	ldrb	r2, [r3, #0]
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a418:	1c5a      	adds	r2, r3, #1
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a422:	1e5a      	subs	r2, r3, #1
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1df      	bne.n	800a3f0 <HAL_OSPI_Transmit+0x5e>
 800a430:	e000      	b.n	800a434 <HAL_OSPI_Transmit+0xa2>
          break;
 800a432:	bf00      	nop

      if (status == HAL_OK)
 800a434:	7ffb      	ldrb	r3, [r7, #31]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d119      	bne.n	800a46e <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	2201      	movs	r2, #1
 800a442:	2102      	movs	r1, #2
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f000 fdb5 	bl	800afb4 <OSPI_WaitFlagStateUntilTimeout>
 800a44a:	4603      	mov	r3, r0
 800a44c:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800a44e:	7ffb      	ldrb	r3, [r7, #31]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10c      	bne.n	800a46e <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2202      	movs	r2, #2
 800a45a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2202      	movs	r2, #2
 800a460:	651a      	str	r2, [r3, #80]	@ 0x50
 800a462:	e004      	b.n	800a46e <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2210      	movs	r2, #16
 800a46c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800a46e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3720      	adds	r7, #32
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b08c      	sub	sp, #48	@ 0x30
 800a47c:	af02      	add	r7, sp, #8
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a484:	f7fb fabe 	bl	8005a04 <HAL_GetTick>
 800a488:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	3350      	adds	r3, #80	@ 0x50
 800a490:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a498:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800a4a2:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d106      	bne.n	800a4b8 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2208      	movs	r2, #8
 800a4b4:	655a      	str	r2, [r3, #84]	@ 0x54
 800a4b6:	e07c      	b.n	800a5b2 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4bc:	2b04      	cmp	r3, #4
 800a4be:	d172      	bne.n	800a5a6 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c6:	1c5a      	adds	r2, r3, #1
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800a4ec:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4f6:	d104      	bne.n	800a502 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	69ba      	ldr	r2, [r7, #24]
 800a4fe:	649a      	str	r2, [r3, #72]	@ 0x48
 800a500:	e011      	b.n	800a526 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800a50a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d004      	beq.n	800a51c <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	69ba      	ldr	r2, [r7, #24]
 800a518:	649a      	str	r2, [r3, #72]	@ 0x48
 800a51a:	e004      	b.n	800a526 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	6a3b      	ldr	r3, [r7, #32]
 800a52c:	2201      	movs	r2, #1
 800a52e:	2106      	movs	r1, #6
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f000 fd3f 	bl	800afb4 <OSPI_WaitFlagStateUntilTimeout>
 800a536:	4603      	mov	r3, r0
 800a538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800a53c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a540:	2b00      	cmp	r3, #0
 800a542:	d114      	bne.n	800a56e <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a548:	69fa      	ldr	r2, [r7, #28]
 800a54a:	7812      	ldrb	r2, [r2, #0]
 800a54c:	b2d2      	uxtb	r2, r2
 800a54e:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a554:	1c5a      	adds	r2, r3, #1
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a55e:	1e5a      	subs	r2, r3, #1
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1dc      	bne.n	800a526 <HAL_OSPI_Receive+0xae>
 800a56c:	e000      	b.n	800a570 <HAL_OSPI_Receive+0xf8>
          break;
 800a56e:	bf00      	nop

      if (status == HAL_OK)
 800a570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a574:	2b00      	cmp	r3, #0
 800a576:	d11c      	bne.n	800a5b2 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	6a3b      	ldr	r3, [r7, #32]
 800a57e:	2201      	movs	r2, #1
 800a580:	2102      	movs	r1, #2
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f000 fd16 	bl	800afb4 <OSPI_WaitFlagStateUntilTimeout>
 800a588:	4603      	mov	r3, r0
 800a58a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800a58e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a592:	2b00      	cmp	r3, #0
 800a594:	d10d      	bne.n	800a5b2 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2202      	movs	r2, #2
 800a59c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2202      	movs	r2, #2
 800a5a2:	651a      	str	r2, [r3, #80]	@ 0x50
 800a5a4:	e005      	b.n	800a5b2 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2210      	movs	r2, #16
 800a5b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800a5b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3728      	adds	r7, #40	@ 0x28
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b083      	sub	sp, #12
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b094      	sub	sp, #80	@ 0x50
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a9d      	ldr	r2, [pc, #628]	@ (800a870 <HAL_OSPIM_Config+0x294>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d105      	bne.n	800a60a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800a5fe:	2300      	movs	r3, #0
 800a600:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 800a602:	2301      	movs	r3, #1
 800a604:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800a608:	e004      	b.n	800a614 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800a60a:	2301      	movs	r3, #1
 800a60c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 800a60e:	2300      	movs	r3, #0
 800a610:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a614:	2300      	movs	r3, #0
 800a616:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a61a:	e01d      	b.n	800a658 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800a61c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a620:	3301      	adds	r3, #1
 800a622:	b2d8      	uxtb	r0, r3
 800a624:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a628:	f107 0114 	add.w	r1, r7, #20
 800a62c:	4613      	mov	r3, r2
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	4413      	add	r3, r2
 800a632:	00db      	lsls	r3, r3, #3
 800a634:	440b      	add	r3, r1
 800a636:	4619      	mov	r1, r3
 800a638:	f000 fe6e 	bl	800b318 <OSPIM_GetConfig>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d005      	beq.n	800a64e <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2208      	movs	r2, #8
 800a64c:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a64e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a652:	3301      	adds	r3, #1
 800a654:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a658:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d9dd      	bls.n	800a61c <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800a660:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a664:	2b00      	cmp	r3, #0
 800a666:	f040 8499 	bne.w	800af9c <HAL_OSPIM_Config+0x9c0>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800a66a:	4b81      	ldr	r3, [pc, #516]	@ (800a870 <HAL_OSPIM_Config+0x294>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 0301 	and.w	r3, r3, #1
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00b      	beq.n	800a68e <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a676:	4b7e      	ldr	r3, [pc, #504]	@ (800a870 <HAL_OSPIM_Config+0x294>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a7d      	ldr	r2, [pc, #500]	@ (800a870 <HAL_OSPIM_Config+0x294>)
 800a67c:	f023 0301 	bic.w	r3, r3, #1
 800a680:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800a682:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a686:	f043 0301 	orr.w	r3, r3, #1
 800a68a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800a68e:	4b79      	ldr	r3, [pc, #484]	@ (800a874 <HAL_OSPIM_Config+0x298>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00b      	beq.n	800a6b2 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a69a:	4b76      	ldr	r3, [pc, #472]	@ (800a874 <HAL_OSPIM_Config+0x298>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a75      	ldr	r2, [pc, #468]	@ (800a874 <HAL_OSPIM_Config+0x298>)
 800a6a0:	f023 0301 	bic.w	r3, r3, #1
 800a6a4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800a6a6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a6aa:	f043 0302 	orr.w	r3, r3, #2
 800a6ae:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800a6b2:	4971      	ldr	r1, [pc, #452]	@ (800a878 <HAL_OSPIM_Config+0x29c>)
 800a6b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	005b      	lsls	r3, r3, #1
 800a6ba:	4413      	add	r3, r2
 800a6bc:	00db      	lsls	r3, r3, #3
 800a6be:	3350      	adds	r3, #80	@ 0x50
 800a6c0:	443b      	add	r3, r7
 800a6c2:	3b34      	subs	r3, #52	@ 0x34
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	440b      	add	r3, r1
 800a6cc:	6859      	ldr	r1, [r3, #4]
 800a6ce:	486a      	ldr	r0, [pc, #424]	@ (800a878 <HAL_OSPIM_Config+0x29c>)
 800a6d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	4413      	add	r3, r2
 800a6d8:	00db      	lsls	r3, r3, #3
 800a6da:	3350      	adds	r3, #80	@ 0x50
 800a6dc:	443b      	add	r3, r7
 800a6de:	3b34      	subs	r3, #52	@ 0x34
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4403      	add	r3, r0
 800a6ec:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a6ee:	4b62      	ldr	r3, [pc, #392]	@ (800a878 <HAL_OSPIM_Config+0x29c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f003 0301 	and.w	r3, r3, #1
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 80c0 	beq.w	800a87c <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a6fc:	4b5e      	ldr	r3, [pc, #376]	@ (800a878 <HAL_OSPIM_Config+0x29c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a5d      	ldr	r2, [pc, #372]	@ (800a878 <HAL_OSPIM_Config+0x29c>)
 800a702:	f023 0301 	bic.w	r3, r3, #1
 800a706:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800a708:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	f040 8162 	bne.w	800a9d6 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800a712:	4959      	ldr	r1, [pc, #356]	@ (800a878 <HAL_OSPIM_Config+0x29c>)
 800a714:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a718:	4613      	mov	r3, r2
 800a71a:	005b      	lsls	r3, r3, #1
 800a71c:	4413      	add	r3, r2
 800a71e:	00db      	lsls	r3, r3, #3
 800a720:	3350      	adds	r3, #80	@ 0x50
 800a722:	443b      	add	r3, r7
 800a724:	3b3c      	subs	r3, #60	@ 0x3c
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	3b01      	subs	r3, #1
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	440b      	add	r3, r1
 800a72e:	6859      	ldr	r1, [r3, #4]
 800a730:	4851      	ldr	r0, [pc, #324]	@ (800a878 <HAL_OSPIM_Config+0x29c>)
 800a732:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a736:	4613      	mov	r3, r2
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	4413      	add	r3, r2
 800a73c:	00db      	lsls	r3, r3, #3
 800a73e:	3350      	adds	r3, #80	@ 0x50
 800a740:	443b      	add	r3, r7
 800a742:	3b3c      	subs	r3, #60	@ 0x3c
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3b01      	subs	r3, #1
 800a748:	f041 0202 	orr.w	r2, r1, #2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4403      	add	r3, r0
 800a750:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a752:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a756:	4613      	mov	r3, r2
 800a758:	005b      	lsls	r3, r3, #1
 800a75a:	4413      	add	r3, r2
 800a75c:	00db      	lsls	r3, r3, #3
 800a75e:	3350      	adds	r3, #80	@ 0x50
 800a760:	443b      	add	r3, r7
 800a762:	3b38      	subs	r3, #56	@ 0x38
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d01f      	beq.n	800a7aa <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800a76a:	4943      	ldr	r1, [pc, #268]	@ (800a878 <HAL_OSPIM_Config+0x29c>)
 800a76c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a770:	4613      	mov	r3, r2
 800a772:	005b      	lsls	r3, r3, #1
 800a774:	4413      	add	r3, r2
 800a776:	00db      	lsls	r3, r3, #3
 800a778:	3350      	adds	r3, #80	@ 0x50
 800a77a:	443b      	add	r3, r7
 800a77c:	3b38      	subs	r3, #56	@ 0x38
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	3b01      	subs	r3, #1
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	440b      	add	r3, r1
 800a786:	6859      	ldr	r1, [r3, #4]
 800a788:	483b      	ldr	r0, [pc, #236]	@ (800a878 <HAL_OSPIM_Config+0x29c>)
 800a78a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a78e:	4613      	mov	r3, r2
 800a790:	005b      	lsls	r3, r3, #1
 800a792:	4413      	add	r3, r2
 800a794:	00db      	lsls	r3, r3, #3
 800a796:	3350      	adds	r3, #80	@ 0x50
 800a798:	443b      	add	r3, r7
 800a79a:	3b38      	subs	r3, #56	@ 0x38
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	f041 0220 	orr.w	r2, r1, #32
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4403      	add	r3, r0
 800a7a8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a7aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	005b      	lsls	r3, r3, #1
 800a7b2:	4413      	add	r3, r2
 800a7b4:	00db      	lsls	r3, r3, #3
 800a7b6:	3350      	adds	r3, #80	@ 0x50
 800a7b8:	443b      	add	r3, r7
 800a7ba:	3b30      	subs	r3, #48	@ 0x30
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d023      	beq.n	800a80a <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800a7c2:	492d      	ldr	r1, [pc, #180]	@ (800a878 <HAL_OSPIM_Config+0x29c>)
 800a7c4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	005b      	lsls	r3, r3, #1
 800a7cc:	4413      	add	r3, r2
 800a7ce:	00db      	lsls	r3, r3, #3
 800a7d0:	3350      	adds	r3, #80	@ 0x50
 800a7d2:	443b      	add	r3, r7
 800a7d4:	3b30      	subs	r3, #48	@ 0x30
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	440b      	add	r3, r1
 800a7e2:	6859      	ldr	r1, [r3, #4]
 800a7e4:	4824      	ldr	r0, [pc, #144]	@ (800a878 <HAL_OSPIM_Config+0x29c>)
 800a7e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	005b      	lsls	r3, r3, #1
 800a7ee:	4413      	add	r3, r2
 800a7f0:	00db      	lsls	r3, r3, #3
 800a7f2:	3350      	adds	r3, #80	@ 0x50
 800a7f4:	443b      	add	r3, r7
 800a7f6:	3b30      	subs	r3, #48	@ 0x30
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	f003 0301 	and.w	r3, r3, #1
 800a800:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	4403      	add	r3, r0
 800a808:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a80a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a80e:	4613      	mov	r3, r2
 800a810:	005b      	lsls	r3, r3, #1
 800a812:	4413      	add	r3, r2
 800a814:	00db      	lsls	r3, r3, #3
 800a816:	3350      	adds	r3, #80	@ 0x50
 800a818:	443b      	add	r3, r7
 800a81a:	3b2c      	subs	r3, #44	@ 0x2c
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	f000 80d9 	beq.w	800a9d6 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800a824:	4914      	ldr	r1, [pc, #80]	@ (800a878 <HAL_OSPIM_Config+0x29c>)
 800a826:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a82a:	4613      	mov	r3, r2
 800a82c:	005b      	lsls	r3, r3, #1
 800a82e:	4413      	add	r3, r2
 800a830:	00db      	lsls	r3, r3, #3
 800a832:	3350      	adds	r3, #80	@ 0x50
 800a834:	443b      	add	r3, r7
 800a836:	3b2c      	subs	r3, #44	@ 0x2c
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	f003 0301 	and.w	r3, r3, #1
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	440b      	add	r3, r1
 800a844:	6859      	ldr	r1, [r3, #4]
 800a846:	480c      	ldr	r0, [pc, #48]	@ (800a878 <HAL_OSPIM_Config+0x29c>)
 800a848:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a84c:	4613      	mov	r3, r2
 800a84e:	005b      	lsls	r3, r3, #1
 800a850:	4413      	add	r3, r2
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	3350      	adds	r3, #80	@ 0x50
 800a856:	443b      	add	r3, r7
 800a858:	3b2c      	subs	r3, #44	@ 0x2c
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	3b01      	subs	r3, #1
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	4403      	add	r3, r0
 800a86a:	605a      	str	r2, [r3, #4]
 800a86c:	e0b3      	b.n	800a9d6 <HAL_OSPIM_Config+0x3fa>
 800a86e:	bf00      	nop
 800a870:	52005000 	.word	0x52005000
 800a874:	5200a000 	.word	0x5200a000
 800a878:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800a87c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a87e:	4613      	mov	r3, r2
 800a880:	005b      	lsls	r3, r3, #1
 800a882:	4413      	add	r3, r2
 800a884:	00db      	lsls	r3, r3, #3
 800a886:	3350      	adds	r3, #80	@ 0x50
 800a888:	443b      	add	r3, r7
 800a88a:	3b3c      	subs	r3, #60	@ 0x3c
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f000 80a1 	beq.w	800a9d6 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800a894:	4995      	ldr	r1, [pc, #596]	@ (800aaec <HAL_OSPIM_Config+0x510>)
 800a896:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a898:	4613      	mov	r3, r2
 800a89a:	005b      	lsls	r3, r3, #1
 800a89c:	4413      	add	r3, r2
 800a89e:	00db      	lsls	r3, r3, #3
 800a8a0:	3350      	adds	r3, #80	@ 0x50
 800a8a2:	443b      	add	r3, r7
 800a8a4:	3b3c      	subs	r3, #60	@ 0x3c
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	440b      	add	r3, r1
 800a8ae:	6859      	ldr	r1, [r3, #4]
 800a8b0:	488e      	ldr	r0, [pc, #568]	@ (800aaec <HAL_OSPIM_Config+0x510>)
 800a8b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	4413      	add	r3, r2
 800a8ba:	00db      	lsls	r3, r3, #3
 800a8bc:	3350      	adds	r3, #80	@ 0x50
 800a8be:	443b      	add	r3, r7
 800a8c0:	3b3c      	subs	r3, #60	@ 0x3c
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	f021 0201 	bic.w	r2, r1, #1
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4403      	add	r3, r0
 800a8ce:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800a8d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	4413      	add	r3, r2
 800a8d8:	00db      	lsls	r3, r3, #3
 800a8da:	3350      	adds	r3, #80	@ 0x50
 800a8dc:	443b      	add	r3, r7
 800a8de:	3b38      	subs	r3, #56	@ 0x38
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d01d      	beq.n	800a922 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a8e6:	4981      	ldr	r1, [pc, #516]	@ (800aaec <HAL_OSPIM_Config+0x510>)
 800a8e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	005b      	lsls	r3, r3, #1
 800a8ee:	4413      	add	r3, r2
 800a8f0:	00db      	lsls	r3, r3, #3
 800a8f2:	3350      	adds	r3, #80	@ 0x50
 800a8f4:	443b      	add	r3, r7
 800a8f6:	3b38      	subs	r3, #56	@ 0x38
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	440b      	add	r3, r1
 800a900:	6859      	ldr	r1, [r3, #4]
 800a902:	487a      	ldr	r0, [pc, #488]	@ (800aaec <HAL_OSPIM_Config+0x510>)
 800a904:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a906:	4613      	mov	r3, r2
 800a908:	005b      	lsls	r3, r3, #1
 800a90a:	4413      	add	r3, r2
 800a90c:	00db      	lsls	r3, r3, #3
 800a90e:	3350      	adds	r3, #80	@ 0x50
 800a910:	443b      	add	r3, r7
 800a912:	3b38      	subs	r3, #56	@ 0x38
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3b01      	subs	r3, #1
 800a918:	f021 0210 	bic.w	r2, r1, #16
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4403      	add	r3, r0
 800a920:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a922:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a924:	4613      	mov	r3, r2
 800a926:	005b      	lsls	r3, r3, #1
 800a928:	4413      	add	r3, r2
 800a92a:	00db      	lsls	r3, r3, #3
 800a92c:	3350      	adds	r3, #80	@ 0x50
 800a92e:	443b      	add	r3, r7
 800a930:	3b30      	subs	r3, #48	@ 0x30
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d021      	beq.n	800a97c <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800a938:	496c      	ldr	r1, [pc, #432]	@ (800aaec <HAL_OSPIM_Config+0x510>)
 800a93a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a93c:	4613      	mov	r3, r2
 800a93e:	005b      	lsls	r3, r3, #1
 800a940:	4413      	add	r3, r2
 800a942:	00db      	lsls	r3, r3, #3
 800a944:	3350      	adds	r3, #80	@ 0x50
 800a946:	443b      	add	r3, r7
 800a948:	3b30      	subs	r3, #48	@ 0x30
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3b01      	subs	r3, #1
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	440b      	add	r3, r1
 800a956:	6859      	ldr	r1, [r3, #4]
 800a958:	4864      	ldr	r0, [pc, #400]	@ (800aaec <HAL_OSPIM_Config+0x510>)
 800a95a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a95c:	4613      	mov	r3, r2
 800a95e:	005b      	lsls	r3, r3, #1
 800a960:	4413      	add	r3, r2
 800a962:	00db      	lsls	r3, r3, #3
 800a964:	3350      	adds	r3, #80	@ 0x50
 800a966:	443b      	add	r3, r7
 800a968:	3b30      	subs	r3, #48	@ 0x30
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4403      	add	r3, r0
 800a97a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a97c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a97e:	4613      	mov	r3, r2
 800a980:	005b      	lsls	r3, r3, #1
 800a982:	4413      	add	r3, r2
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	3350      	adds	r3, #80	@ 0x50
 800a988:	443b      	add	r3, r7
 800a98a:	3b2c      	subs	r3, #44	@ 0x2c
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d021      	beq.n	800a9d6 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800a992:	4956      	ldr	r1, [pc, #344]	@ (800aaec <HAL_OSPIM_Config+0x510>)
 800a994:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a996:	4613      	mov	r3, r2
 800a998:	005b      	lsls	r3, r3, #1
 800a99a:	4413      	add	r3, r2
 800a99c:	00db      	lsls	r3, r3, #3
 800a99e:	3350      	adds	r3, #80	@ 0x50
 800a9a0:	443b      	add	r3, r7
 800a9a2:	3b2c      	subs	r3, #44	@ 0x2c
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	f003 0301 	and.w	r3, r3, #1
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	440b      	add	r3, r1
 800a9b0:	6859      	ldr	r1, [r3, #4]
 800a9b2:	484e      	ldr	r0, [pc, #312]	@ (800aaec <HAL_OSPIM_Config+0x510>)
 800a9b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	005b      	lsls	r3, r3, #1
 800a9ba:	4413      	add	r3, r2
 800a9bc:	00db      	lsls	r3, r3, #3
 800a9be:	3350      	adds	r3, #80	@ 0x50
 800a9c0:	443b      	add	r3, r7
 800a9c2:	3b2c      	subs	r3, #44	@ 0x2c
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	f003 0301 	and.w	r3, r3, #1
 800a9cc:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4403      	add	r3, r0
 800a9d4:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	6819      	ldr	r1, [r3, #0]
 800a9da:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a9de:	4613      	mov	r3, r2
 800a9e0:	005b      	lsls	r3, r3, #1
 800a9e2:	4413      	add	r3, r2
 800a9e4:	00db      	lsls	r3, r3, #3
 800a9e6:	3350      	adds	r3, #80	@ 0x50
 800a9e8:	443b      	add	r3, r7
 800a9ea:	3b3c      	subs	r3, #60	@ 0x3c
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4299      	cmp	r1, r3
 800a9f0:	d03c      	beq.n	800aa6c <HAL_OSPIM_Config+0x490>
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	6899      	ldr	r1, [r3, #8]
 800a9f6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	005b      	lsls	r3, r3, #1
 800a9fe:	4413      	add	r3, r2
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	3350      	adds	r3, #80	@ 0x50
 800aa04:	443b      	add	r3, r7
 800aa06:	3b34      	subs	r3, #52	@ 0x34
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4299      	cmp	r1, r3
 800aa0c:	d02e      	beq.n	800aa6c <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	6859      	ldr	r1, [r3, #4]
 800aa12:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800aa16:	4613      	mov	r3, r2
 800aa18:	005b      	lsls	r3, r3, #1
 800aa1a:	4413      	add	r3, r2
 800aa1c:	00db      	lsls	r3, r3, #3
 800aa1e:	3350      	adds	r3, #80	@ 0x50
 800aa20:	443b      	add	r3, r7
 800aa22:	3b38      	subs	r3, #56	@ 0x38
 800aa24:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800aa26:	4299      	cmp	r1, r3
 800aa28:	d103      	bne.n	800aa32 <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d11c      	bne.n	800aa6c <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	68d9      	ldr	r1, [r3, #12]
 800aa36:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	005b      	lsls	r3, r3, #1
 800aa3e:	4413      	add	r3, r2
 800aa40:	00db      	lsls	r3, r3, #3
 800aa42:	3350      	adds	r3, #80	@ 0x50
 800aa44:	443b      	add	r3, r7
 800aa46:	3b30      	subs	r3, #48	@ 0x30
 800aa48:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800aa4a:	4299      	cmp	r1, r3
 800aa4c:	d00e      	beq.n	800aa6c <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	6919      	ldr	r1, [r3, #16]
 800aa52:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800aa56:	4613      	mov	r3, r2
 800aa58:	005b      	lsls	r3, r3, #1
 800aa5a:	4413      	add	r3, r2
 800aa5c:	00db      	lsls	r3, r3, #3
 800aa5e:	3350      	adds	r3, #80	@ 0x50
 800aa60:	443b      	add	r3, r7
 800aa62:	3b2c      	subs	r3, #44	@ 0x2c
 800aa64:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800aa66:	4299      	cmp	r1, r3
 800aa68:	f040 810e 	bne.w	800ac88 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	6819      	ldr	r1, [r3, #0]
 800aa70:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800aa74:	4613      	mov	r3, r2
 800aa76:	005b      	lsls	r3, r3, #1
 800aa78:	4413      	add	r3, r2
 800aa7a:	00db      	lsls	r3, r3, #3
 800aa7c:	3350      	adds	r3, #80	@ 0x50
 800aa7e:	443b      	add	r3, r7
 800aa80:	3b3c      	subs	r3, #60	@ 0x3c
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4299      	cmp	r1, r3
 800aa86:	d133      	bne.n	800aaf0 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	6859      	ldr	r1, [r3, #4]
 800aa8c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800aa90:	4613      	mov	r3, r2
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	4413      	add	r3, r2
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	3350      	adds	r3, #80	@ 0x50
 800aa9a:	443b      	add	r3, r7
 800aa9c:	3b38      	subs	r3, #56	@ 0x38
 800aa9e:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800aaa0:	4299      	cmp	r1, r3
 800aaa2:	d125      	bne.n	800aaf0 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	68d9      	ldr	r1, [r3, #12]
 800aaa8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800aaac:	4613      	mov	r3, r2
 800aaae:	005b      	lsls	r3, r3, #1
 800aab0:	4413      	add	r3, r2
 800aab2:	00db      	lsls	r3, r3, #3
 800aab4:	3350      	adds	r3, #80	@ 0x50
 800aab6:	443b      	add	r3, r7
 800aab8:	3b30      	subs	r3, #48	@ 0x30
 800aaba:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800aabc:	4299      	cmp	r1, r3
 800aabe:	d117      	bne.n	800aaf0 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	6919      	ldr	r1, [r3, #16]
 800aac4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800aac8:	4613      	mov	r3, r2
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	4413      	add	r3, r2
 800aace:	00db      	lsls	r3, r3, #3
 800aad0:	3350      	adds	r3, #80	@ 0x50
 800aad2:	443b      	add	r3, r7
 800aad4:	3b2c      	subs	r3, #44	@ 0x2c
 800aad6:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800aad8:	4299      	cmp	r1, r3
 800aada:	d109      	bne.n	800aaf0 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800aadc:	4b03      	ldr	r3, [pc, #12]	@ (800aaec <HAL_OSPIM_Config+0x510>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a02      	ldr	r2, [pc, #8]	@ (800aaec <HAL_OSPIM_Config+0x510>)
 800aae2:	f043 0301 	orr.w	r3, r3, #1
 800aae6:	6013      	str	r3, [r2, #0]
 800aae8:	e0ce      	b.n	800ac88 <HAL_OSPIM_Config+0x6ac>
 800aaea:	bf00      	nop
 800aaec:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800aaf0:	49bb      	ldr	r1, [pc, #748]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800aaf2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	005b      	lsls	r3, r3, #1
 800aafa:	4413      	add	r3, r2
 800aafc:	00db      	lsls	r3, r3, #3
 800aafe:	3350      	adds	r3, #80	@ 0x50
 800ab00:	443b      	add	r3, r7
 800ab02:	3b3c      	subs	r3, #60	@ 0x3c
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	3b01      	subs	r3, #1
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	440b      	add	r3, r1
 800ab0c:	6859      	ldr	r1, [r3, #4]
 800ab0e:	48b4      	ldr	r0, [pc, #720]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800ab10:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ab14:	4613      	mov	r3, r2
 800ab16:	005b      	lsls	r3, r3, #1
 800ab18:	4413      	add	r3, r2
 800ab1a:	00db      	lsls	r3, r3, #3
 800ab1c:	3350      	adds	r3, #80	@ 0x50
 800ab1e:	443b      	add	r3, r7
 800ab20:	3b3c      	subs	r3, #60	@ 0x3c
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3b01      	subs	r3, #1
 800ab26:	f021 0201 	bic.w	r2, r1, #1
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4403      	add	r3, r0
 800ab2e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800ab30:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ab34:	4613      	mov	r3, r2
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	4413      	add	r3, r2
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	3350      	adds	r3, #80	@ 0x50
 800ab3e:	443b      	add	r3, r7
 800ab40:	3b38      	subs	r3, #56	@ 0x38
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d01f      	beq.n	800ab88 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800ab48:	49a5      	ldr	r1, [pc, #660]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800ab4a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ab4e:	4613      	mov	r3, r2
 800ab50:	005b      	lsls	r3, r3, #1
 800ab52:	4413      	add	r3, r2
 800ab54:	00db      	lsls	r3, r3, #3
 800ab56:	3350      	adds	r3, #80	@ 0x50
 800ab58:	443b      	add	r3, r7
 800ab5a:	3b38      	subs	r3, #56	@ 0x38
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	440b      	add	r3, r1
 800ab64:	6859      	ldr	r1, [r3, #4]
 800ab66:	489e      	ldr	r0, [pc, #632]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800ab68:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	005b      	lsls	r3, r3, #1
 800ab70:	4413      	add	r3, r2
 800ab72:	00db      	lsls	r3, r3, #3
 800ab74:	3350      	adds	r3, #80	@ 0x50
 800ab76:	443b      	add	r3, r7
 800ab78:	3b38      	subs	r3, #56	@ 0x38
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	f021 0210 	bic.w	r2, r1, #16
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4403      	add	r3, r0
 800ab86:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800ab88:	4995      	ldr	r1, [pc, #596]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800ab8a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ab8e:	4613      	mov	r3, r2
 800ab90:	005b      	lsls	r3, r3, #1
 800ab92:	4413      	add	r3, r2
 800ab94:	00db      	lsls	r3, r3, #3
 800ab96:	3350      	adds	r3, #80	@ 0x50
 800ab98:	443b      	add	r3, r7
 800ab9a:	3b34      	subs	r3, #52	@ 0x34
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	440b      	add	r3, r1
 800aba4:	6859      	ldr	r1, [r3, #4]
 800aba6:	488e      	ldr	r0, [pc, #568]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800aba8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800abac:	4613      	mov	r3, r2
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	4413      	add	r3, r2
 800abb2:	00db      	lsls	r3, r3, #3
 800abb4:	3350      	adds	r3, #80	@ 0x50
 800abb6:	443b      	add	r3, r7
 800abb8:	3b34      	subs	r3, #52	@ 0x34
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3b01      	subs	r3, #1
 800abbe:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4403      	add	r3, r0
 800abc6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800abc8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800abcc:	4613      	mov	r3, r2
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	4413      	add	r3, r2
 800abd2:	00db      	lsls	r3, r3, #3
 800abd4:	3350      	adds	r3, #80	@ 0x50
 800abd6:	443b      	add	r3, r7
 800abd8:	3b30      	subs	r3, #48	@ 0x30
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d023      	beq.n	800ac28 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800abe0:	497f      	ldr	r1, [pc, #508]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800abe2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800abe6:	4613      	mov	r3, r2
 800abe8:	005b      	lsls	r3, r3, #1
 800abea:	4413      	add	r3, r2
 800abec:	00db      	lsls	r3, r3, #3
 800abee:	3350      	adds	r3, #80	@ 0x50
 800abf0:	443b      	add	r3, r7
 800abf2:	3b30      	subs	r3, #48	@ 0x30
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3b01      	subs	r3, #1
 800abf8:	f003 0301 	and.w	r3, r3, #1
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	440b      	add	r3, r1
 800ac00:	6859      	ldr	r1, [r3, #4]
 800ac02:	4877      	ldr	r0, [pc, #476]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800ac04:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ac08:	4613      	mov	r3, r2
 800ac0a:	005b      	lsls	r3, r3, #1
 800ac0c:	4413      	add	r3, r2
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	3350      	adds	r3, #80	@ 0x50
 800ac12:	443b      	add	r3, r7
 800ac14:	3b30      	subs	r3, #48	@ 0x30
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4403      	add	r3, r0
 800ac26:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800ac28:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	005b      	lsls	r3, r3, #1
 800ac30:	4413      	add	r3, r2
 800ac32:	00db      	lsls	r3, r3, #3
 800ac34:	3350      	adds	r3, #80	@ 0x50
 800ac36:	443b      	add	r3, r7
 800ac38:	3b2c      	subs	r3, #44	@ 0x2c
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d023      	beq.n	800ac88 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ac40:	4967      	ldr	r1, [pc, #412]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800ac42:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ac46:	4613      	mov	r3, r2
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	4413      	add	r3, r2
 800ac4c:	00db      	lsls	r3, r3, #3
 800ac4e:	3350      	adds	r3, #80	@ 0x50
 800ac50:	443b      	add	r3, r7
 800ac52:	3b2c      	subs	r3, #44	@ 0x2c
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	f003 0301 	and.w	r3, r3, #1
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	440b      	add	r3, r1
 800ac60:	6859      	ldr	r1, [r3, #4]
 800ac62:	485f      	ldr	r0, [pc, #380]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800ac64:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ac68:	4613      	mov	r3, r2
 800ac6a:	005b      	lsls	r3, r3, #1
 800ac6c:	4413      	add	r3, r2
 800ac6e:	00db      	lsls	r3, r3, #3
 800ac70:	3350      	adds	r3, #80	@ 0x50
 800ac72:	443b      	add	r3, r7
 800ac74:	3b2c      	subs	r3, #44	@ 0x2c
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	f003 0301 	and.w	r3, r3, #1
 800ac7e:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4403      	add	r3, r0
 800ac86:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800ac88:	4a55      	ldr	r2, [pc, #340]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ac9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac9c:	025b      	lsls	r3, r3, #9
 800ac9e:	431a      	orrs	r2, r3
 800aca0:	494f      	ldr	r1, [pc, #316]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	3b01      	subs	r3, #1
 800aca8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	440b      	add	r3, r1
 800acb0:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	695b      	ldr	r3, [r3, #20]
 800acb6:	1e5a      	subs	r2, r3, #1
 800acb8:	4b49      	ldr	r3, [pc, #292]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	0c1b      	lsrs	r3, r3, #16
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d90a      	bls.n	800acda <HAL_OSPIM_Config+0x6fe>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800acc4:	4b46      	ldr	r3, [pc, #280]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	695b      	ldr	r3, [r3, #20]
 800acd0:	3b01      	subs	r3, #1
 800acd2:	041b      	lsls	r3, r3, #16
 800acd4:	4942      	ldr	r1, [pc, #264]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800acd6:	4313      	orrs	r3, r2
 800acd8:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800acda:	4b41      	ldr	r3, [pc, #260]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f000 809a 	beq.w	800ae1c <HAL_OSPIM_Config+0x840>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800ace8:	4a3d      	ldr	r2, [pc, #244]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	3b01      	subs	r3, #1
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4413      	add	r3, r2
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	f023 0203 	bic.w	r2, r3, #3
 800acfa:	4939      	ldr	r1, [pc, #228]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	3b01      	subs	r3, #1
 800ad02:	f042 0201 	orr.w	r2, r2, #1
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	440b      	add	r3, r1
 800ad0a:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d011      	beq.n	800ad38 <HAL_OSPIM_Config+0x75c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800ad14:	4a32      	ldr	r2, [pc, #200]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	4413      	add	r3, r2
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ad26:	492e      	ldr	r1, [pc, #184]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	f042 0210 	orr.w	r2, r2, #16
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	440b      	add	r3, r1
 800ad36:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d016      	beq.n	800ad72 <HAL_OSPIM_Config+0x796>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ad44:	4a26      	ldr	r2, [pc, #152]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800ad5a:	4921      	ldr	r1, [pc, #132]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	3b01      	subs	r3, #1
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	440b      	add	r3, r1
 800ad6e:	605a      	str	r2, [r3, #4]
 800ad70:	e019      	b.n	800ada6 <HAL_OSPIM_Config+0x7ca>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d015      	beq.n	800ada6 <HAL_OSPIM_Config+0x7ca>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ad7a:	4a19      	ldr	r2, [pc, #100]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	3b01      	subs	r3, #1
 800ad82:	f003 0301 	and.w	r3, r3, #1
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800ad90:	4913      	ldr	r1, [pc, #76]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	3b01      	subs	r3, #1
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	440b      	add	r3, r1
 800ada4:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d018      	beq.n	800ade4 <HAL_OSPIM_Config+0x808>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800adb2:	4a0b      	ldr	r2, [pc, #44]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	3b01      	subs	r3, #1
 800adba:	f003 0301 	and.w	r3, r3, #1
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800adc8:	4905      	ldr	r1, [pc, #20]	@ (800ade0 <HAL_OSPIM_Config+0x804>)
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	3b01      	subs	r3, #1
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	440b      	add	r3, r1
 800addc:	605a      	str	r2, [r3, #4]
 800adde:	e0c5      	b.n	800af6c <HAL_OSPIM_Config+0x990>
 800ade0:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f000 80bf 	beq.w	800af6c <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800adee:	4a6e      	ldr	r2, [pc, #440]	@ (800afa8 <HAL_OSPIM_Config+0x9cc>)
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	3b01      	subs	r3, #1
 800adf6:	f003 0301 	and.w	r3, r3, #1
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	4413      	add	r3, r2
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800ae04:	4968      	ldr	r1, [pc, #416]	@ (800afa8 <HAL_OSPIM_Config+0x9cc>)
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	f003 0301 	and.w	r3, r3, #1
 800ae10:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	440b      	add	r3, r1
 800ae18:	605a      	str	r2, [r3, #4]
 800ae1a:	e0a7      	b.n	800af6c <HAL_OSPIM_Config+0x990>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800ae1c:	4a62      	ldr	r2, [pc, #392]	@ (800afa8 <HAL_OSPIM_Config+0x9cc>)
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3b01      	subs	r3, #1
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4413      	add	r3, r2
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	f023 0203 	bic.w	r2, r3, #3
 800ae2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae30:	005b      	lsls	r3, r3, #1
 800ae32:	431a      	orrs	r2, r3
 800ae34:	495c      	ldr	r1, [pc, #368]	@ (800afa8 <HAL_OSPIM_Config+0x9cc>)
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	f042 0201 	orr.w	r2, r2, #1
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	440b      	add	r3, r1
 800ae44:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d014      	beq.n	800ae78 <HAL_OSPIM_Config+0x89c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800ae4e:	4a56      	ldr	r2, [pc, #344]	@ (800afa8 <HAL_OSPIM_Config+0x9cc>)
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	3b01      	subs	r3, #1
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ae60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae62:	015b      	lsls	r3, r3, #5
 800ae64:	431a      	orrs	r2, r3
 800ae66:	4950      	ldr	r1, [pc, #320]	@ (800afa8 <HAL_OSPIM_Config+0x9cc>)
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	f042 0210 	orr.w	r2, r2, #16
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	440b      	add	r3, r1
 800ae76:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d019      	beq.n	800aeb8 <HAL_OSPIM_Config+0x8dc>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ae84:	4a48      	ldr	r2, [pc, #288]	@ (800afa8 <HAL_OSPIM_Config+0x9cc>)
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	f003 0301 	and.w	r3, r3, #1
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800ae9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae9c:	049b      	lsls	r3, r3, #18
 800ae9e:	431a      	orrs	r2, r3
 800aea0:	4941      	ldr	r1, [pc, #260]	@ (800afa8 <HAL_OSPIM_Config+0x9cc>)
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	3b01      	subs	r3, #1
 800aea8:	f003 0301 	and.w	r3, r3, #1
 800aeac:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	440b      	add	r3, r1
 800aeb4:	605a      	str	r2, [r3, #4]
 800aeb6:	e01c      	b.n	800aef2 <HAL_OSPIM_Config+0x916>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d018      	beq.n	800aef2 <HAL_OSPIM_Config+0x916>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800aec0:	4a39      	ldr	r2, [pc, #228]	@ (800afa8 <HAL_OSPIM_Config+0x9cc>)
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	3b01      	subs	r3, #1
 800aec8:	f003 0301 	and.w	r3, r3, #1
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800aed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aed8:	069b      	lsls	r3, r3, #26
 800aeda:	431a      	orrs	r2, r3
 800aedc:	4932      	ldr	r1, [pc, #200]	@ (800afa8 <HAL_OSPIM_Config+0x9cc>)
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	3b01      	subs	r3, #1
 800aee4:	f003 0301 	and.w	r3, r3, #1
 800aee8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	440b      	add	r3, r1
 800aef0:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d019      	beq.n	800af32 <HAL_OSPIM_Config+0x956>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800aefe:	4a2a      	ldr	r2, [pc, #168]	@ (800afa8 <HAL_OSPIM_Config+0x9cc>)
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	3b01      	subs	r3, #1
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	4413      	add	r3, r2
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800af14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af16:	049b      	lsls	r3, r3, #18
 800af18:	431a      	orrs	r2, r3
 800af1a:	4923      	ldr	r1, [pc, #140]	@ (800afa8 <HAL_OSPIM_Config+0x9cc>)
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	3b01      	subs	r3, #1
 800af22:	f003 0301 	and.w	r3, r3, #1
 800af26:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	440b      	add	r3, r1
 800af2e:	605a      	str	r2, [r3, #4]
 800af30:	e01c      	b.n	800af6c <HAL_OSPIM_Config+0x990>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d018      	beq.n	800af6c <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800af3a:	4a1b      	ldr	r2, [pc, #108]	@ (800afa8 <HAL_OSPIM_Config+0x9cc>)
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	3b01      	subs	r3, #1
 800af42:	f003 0301 	and.w	r3, r3, #1
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4413      	add	r3, r2
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800af50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af52:	069b      	lsls	r3, r3, #26
 800af54:	431a      	orrs	r2, r3
 800af56:	4914      	ldr	r1, [pc, #80]	@ (800afa8 <HAL_OSPIM_Config+0x9cc>)
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	3b01      	subs	r3, #1
 800af5e:	f003 0301 	and.w	r3, r3, #1
 800af62:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	440b      	add	r3, r1
 800af6a:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800af6c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800af70:	f003 0301 	and.w	r3, r3, #1
 800af74:	2b00      	cmp	r3, #0
 800af76:	d005      	beq.n	800af84 <HAL_OSPIM_Config+0x9a8>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800af78:	4b0c      	ldr	r3, [pc, #48]	@ (800afac <HAL_OSPIM_Config+0x9d0>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a0b      	ldr	r2, [pc, #44]	@ (800afac <HAL_OSPIM_Config+0x9d0>)
 800af7e:	f043 0301 	orr.w	r3, r3, #1
 800af82:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800af84:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800af88:	f003 0302 	and.w	r3, r3, #2
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d005      	beq.n	800af9c <HAL_OSPIM_Config+0x9c0>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800af90:	4b07      	ldr	r3, [pc, #28]	@ (800afb0 <HAL_OSPIM_Config+0x9d4>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a06      	ldr	r2, [pc, #24]	@ (800afb0 <HAL_OSPIM_Config+0x9d4>)
 800af96:	f043 0301 	orr.w	r3, r3, #1
 800af9a:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800af9c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3750      	adds	r7, #80	@ 0x50
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	5200b400 	.word	0x5200b400
 800afac:	52005000 	.word	0x52005000
 800afb0:	5200a000 	.word	0x5200a000

0800afb4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	603b      	str	r3, [r7, #0]
 800afc0:	4613      	mov	r3, r2
 800afc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800afc4:	e01a      	b.n	800affc <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afcc:	d016      	beq.n	800affc <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afce:	f7fa fd19 	bl	8005a04 <HAL_GetTick>
 800afd2:	4602      	mov	r2, r0
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	69ba      	ldr	r2, [r7, #24]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d302      	bcc.n	800afe4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10b      	bne.n	800affc <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afea:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aff0:	f043 0201 	orr.w	r2, r3, #1
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e00e      	b.n	800b01a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6a1a      	ldr	r2, [r3, #32]
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	4013      	ands	r3, r2
 800b006:	2b00      	cmp	r3, #0
 800b008:	bf14      	ite	ne
 800b00a:	2301      	movne	r3, #1
 800b00c:	2300      	moveq	r3, #0
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	461a      	mov	r2, r3
 800b012:	79fb      	ldrb	r3, [r7, #7]
 800b014:	429a      	cmp	r2, r3
 800b016:	d1d6      	bne.n	800afc6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
	...

0800b024 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800b024:	b480      	push	{r7}
 800b026:	b089      	sub	sp, #36	@ 0x24
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b02e:	2300      	movs	r3, #0
 800b030:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b040:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10a      	bne.n	800b060 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	430a      	orrs	r2, r1
 800b05e:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2b02      	cmp	r3, #2
 800b066:	d114      	bne.n	800b092 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800b070:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800b07a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800b084:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	e02c      	b.n	800b0ec <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b03      	cmp	r3, #3
 800b098:	d114      	bne.n	800b0c4 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800b0a2:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800b0ac:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b0b6:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800b0c0:	60fb      	str	r3, [r7, #12]
 800b0c2:	e013      	b.n	800b0ec <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800b0cc:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800b0d6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800b0e0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800b0ea:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0f4:	431a      	orrs	r2, r3
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d012      	beq.n	800b128 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b11a:	4319      	orrs	r1, r3
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b120:	430b      	orrs	r3, r1
 800b122:	431a      	orrs	r2, r3
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f023 021f 	bic.w	r2, r3, #31
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b134:	431a      	orrs	r2, r3
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d009      	beq.n	800b156 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d105      	bne.n	800b156 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3a01      	subs	r2, #1
 800b154:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f000 8095 	beq.w	800b28a <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	69db      	ldr	r3, [r3, #28]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d053      	beq.n	800b210 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d01e      	beq.n	800b1ae <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	4b64      	ldr	r3, [pc, #400]	@ (800b308 <OSPI_ConfigCmd+0x2e4>)
 800b176:	4013      	ands	r3, r2
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	68d1      	ldr	r1, [r2, #12]
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	6952      	ldr	r2, [r2, #20]
 800b180:	4311      	orrs	r1, r2
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	6912      	ldr	r2, [r2, #16]
 800b186:	4311      	orrs	r1, r2
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	69d2      	ldr	r2, [r2, #28]
 800b18c:	4311      	orrs	r1, r2
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b192:	4311      	orrs	r1, r2
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	6a12      	ldr	r2, [r2, #32]
 800b198:	4311      	orrs	r1, r2
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b19e:	4311      	orrs	r1, r2
 800b1a0:	683a      	ldr	r2, [r7, #0]
 800b1a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b1a4:	430a      	orrs	r2, r1
 800b1a6:	431a      	orrs	r2, r3
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	601a      	str	r2, [r3, #0]
 800b1ac:	e026      	b.n	800b1fc <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	4b56      	ldr	r3, [pc, #344]	@ (800b30c <OSPI_ConfigCmd+0x2e8>)
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	683a      	ldr	r2, [r7, #0]
 800b1b8:	68d1      	ldr	r1, [r2, #12]
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	6952      	ldr	r2, [r2, #20]
 800b1be:	4311      	orrs	r1, r2
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	6912      	ldr	r2, [r2, #16]
 800b1c4:	4311      	orrs	r1, r2
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	69d2      	ldr	r2, [r2, #28]
 800b1ca:	4311      	orrs	r1, r2
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b1d0:	4311      	orrs	r1, r2
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	6a12      	ldr	r2, [r2, #32]
 800b1d6:	430a      	orrs	r2, r1
 800b1d8:	431a      	orrs	r2, r3
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1e6:	d109      	bne.n	800b1fc <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b1ec:	2b08      	cmp	r3, #8
 800b1ee:	d105      	bne.n	800b1fc <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	689a      	ldr	r2, [r3, #8]
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	6992      	ldr	r2, [r2, #24]
 800b20c:	649a      	str	r2, [r3, #72]	@ 0x48
 800b20e:	e074      	b.n	800b2fa <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b214:	2b00      	cmp	r3, #0
 800b216:	d015      	beq.n	800b244 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	4b3c      	ldr	r3, [pc, #240]	@ (800b310 <OSPI_ConfigCmd+0x2ec>)
 800b21e:	4013      	ands	r3, r2
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	68d1      	ldr	r1, [r2, #12]
 800b224:	683a      	ldr	r2, [r7, #0]
 800b226:	6952      	ldr	r2, [r2, #20]
 800b228:	4311      	orrs	r1, r2
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	6912      	ldr	r2, [r2, #16]
 800b22e:	4311      	orrs	r1, r2
 800b230:	683a      	ldr	r2, [r7, #0]
 800b232:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b234:	4311      	orrs	r1, r2
 800b236:	683a      	ldr	r2, [r7, #0]
 800b238:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b23a:	430a      	orrs	r2, r1
 800b23c:	431a      	orrs	r2, r3
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	601a      	str	r2, [r3, #0]
 800b242:	e01d      	b.n	800b280 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	68d9      	ldr	r1, [r3, #12]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	695b      	ldr	r3, [r3, #20]
 800b254:	4319      	orrs	r1, r3
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	430b      	orrs	r3, r1
 800b25c:	431a      	orrs	r2, r3
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b26a:	d109      	bne.n	800b280 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b270:	2b08      	cmp	r3, #8
 800b272:	d105      	bne.n	800b280 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	689a      	ldr	r2, [r3, #8]
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	e037      	b.n	800b2fa <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	69db      	ldr	r3, [r3, #28]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d02e      	beq.n	800b2f0 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b296:	2b00      	cmp	r3, #0
 800b298:	d015      	beq.n	800b2c6 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	4b1d      	ldr	r3, [pc, #116]	@ (800b314 <OSPI_ConfigCmd+0x2f0>)
 800b2a0:	4013      	ands	r3, r2
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	69d1      	ldr	r1, [r2, #28]
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b2aa:	4311      	orrs	r1, r2
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	6a12      	ldr	r2, [r2, #32]
 800b2b0:	4311      	orrs	r1, r2
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b2b6:	4311      	orrs	r1, r2
 800b2b8:	683a      	ldr	r2, [r7, #0]
 800b2ba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b2bc:	430a      	orrs	r2, r1
 800b2be:	431a      	orrs	r2, r3
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	e00e      	b.n	800b2e4 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	69d9      	ldr	r1, [r3, #28]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d6:	4319      	orrs	r1, r3
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	6a1b      	ldr	r3, [r3, #32]
 800b2dc:	430b      	orrs	r3, r1
 800b2de:	431a      	orrs	r2, r3
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	6992      	ldr	r2, [r2, #24]
 800b2ec:	649a      	str	r2, [r3, #72]	@ 0x48
 800b2ee:	e004      	b.n	800b2fa <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2208      	movs	r2, #8
 800b2f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800b2fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3724      	adds	r7, #36	@ 0x24
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	f0ffc0c0 	.word	0xf0ffc0c0
 800b30c:	ffffc0c0 	.word	0xffffc0c0
 800b310:	f0ffffc0 	.word	0xf0ffffc0
 800b314:	f0ffc0ff 	.word	0xf0ffc0ff

0800b318 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800b318:	b480      	push	{r7}
 800b31a:	b087      	sub	sp, #28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	4603      	mov	r3, r0
 800b320:	6039      	str	r1, [r7, #0]
 800b322:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800b324:	2300      	movs	r3, #0
 800b326:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800b328:	2300      	movs	r3, #0
 800b32a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800b32c:	79fb      	ldrb	r3, [r7, #7]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d005      	beq.n	800b33e <OSPIM_GetConfig+0x26>
 800b332:	79fb      	ldrb	r3, [r7, #7]
 800b334:	2b02      	cmp	r3, #2
 800b336:	d802      	bhi.n	800b33e <OSPIM_GetConfig+0x26>
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d102      	bne.n	800b344 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	75fb      	strb	r3, [r7, #23]
 800b342:	e098      	b.n	800b476 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	2200      	movs	r2, #0
 800b348:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	2200      	movs	r2, #0
 800b34e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	2200      	movs	r2, #0
 800b354:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2200      	movs	r2, #0
 800b35a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	2200      	movs	r2, #0
 800b360:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800b362:	79fb      	ldrb	r3, [r7, #7]
 800b364:	2b02      	cmp	r3, #2
 800b366:	d10b      	bne.n	800b380 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800b368:	4b46      	ldr	r3, [pc, #280]	@ (800b484 <OSPIM_GetConfig+0x16c>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 0301 	and.w	r3, r3, #1
 800b370:	2b00      	cmp	r3, #0
 800b372:	d102      	bne.n	800b37a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800b374:	4b44      	ldr	r3, [pc, #272]	@ (800b488 <OSPIM_GetConfig+0x170>)
 800b376:	613b      	str	r3, [r7, #16]
 800b378:	e002      	b.n	800b380 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800b37a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b37e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b380:	2300      	movs	r3, #0
 800b382:	60fb      	str	r3, [r7, #12]
 800b384:	e074      	b.n	800b470 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800b386:	4a3f      	ldr	r2, [pc, #252]	@ (800b484 <OSPIM_GetConfig+0x16c>)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4413      	add	r3, r2
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	f003 0301 	and.w	r3, r3, #1
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00a      	beq.n	800b3b2 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	4053      	eors	r3, r2
 800b3a2:	f003 0302 	and.w	r3, r3, #2
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d103      	bne.n	800b3b2 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	f003 0310 	and.w	r3, r3, #16
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00a      	beq.n	800b3d2 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800b3bc:	68ba      	ldr	r2, [r7, #8]
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	4053      	eors	r3, r2
 800b3c2:	f003 0320 	and.w	r3, r3, #32
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d103      	bne.n	800b3d2 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	1c5a      	adds	r2, r3, #1
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00a      	beq.n	800b3f2 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800b3dc:	68ba      	ldr	r2, [r7, #8]
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	4053      	eors	r3, r2
 800b3e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d103      	bne.n	800b3f2 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	1c5a      	adds	r2, r3, #1
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d018      	beq.n	800b42e <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	4053      	eors	r3, r2
 800b402:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b406:	2b00      	cmp	r3, #0
 800b408:	d111      	bne.n	800b42e <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d106      	bne.n	800b422 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	3301      	adds	r3, #1
 800b418:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	60da      	str	r2, [r3, #12]
 800b420:	e005      	b.n	800b42e <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	3301      	adds	r3, #1
 800b426:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b434:	2b00      	cmp	r3, #0
 800b436:	d018      	beq.n	800b46a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	4053      	eors	r3, r2
 800b43e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b442:	2b00      	cmp	r3, #0
 800b444:	d111      	bne.n	800b46a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d106      	bne.n	800b45e <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	3301      	adds	r3, #1
 800b454:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	611a      	str	r2, [r3, #16]
 800b45c:	e005      	b.n	800b46a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3301      	adds	r3, #1
 800b462:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	3301      	adds	r3, #1
 800b46e:	60fb      	str	r3, [r7, #12]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d987      	bls.n	800b386 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800b476:	7dfb      	ldrb	r3, [r7, #23]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	371c      	adds	r7, #28
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr
 800b484:	5200b400 	.word	0x5200b400
 800b488:	04040222 	.word	0x04040222

0800b48c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b494:	4b19      	ldr	r3, [pc, #100]	@ (800b4fc <HAL_PWREx_ConfigSupply+0x70>)
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	f003 0304 	and.w	r3, r3, #4
 800b49c:	2b04      	cmp	r3, #4
 800b49e:	d00a      	beq.n	800b4b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b4a0:	4b16      	ldr	r3, [pc, #88]	@ (800b4fc <HAL_PWREx_ConfigSupply+0x70>)
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	f003 0307 	and.w	r3, r3, #7
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d001      	beq.n	800b4b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e01f      	b.n	800b4f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	e01d      	b.n	800b4f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b4b6:	4b11      	ldr	r3, [pc, #68]	@ (800b4fc <HAL_PWREx_ConfigSupply+0x70>)
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	f023 0207 	bic.w	r2, r3, #7
 800b4be:	490f      	ldr	r1, [pc, #60]	@ (800b4fc <HAL_PWREx_ConfigSupply+0x70>)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b4c6:	f7fa fa9d 	bl	8005a04 <HAL_GetTick>
 800b4ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b4cc:	e009      	b.n	800b4e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b4ce:	f7fa fa99 	bl	8005a04 <HAL_GetTick>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b4dc:	d901      	bls.n	800b4e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e007      	b.n	800b4f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b4e2:	4b06      	ldr	r3, [pc, #24]	@ (800b4fc <HAL_PWREx_ConfigSupply+0x70>)
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b4ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4ee:	d1ee      	bne.n	800b4ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	58024800 	.word	0x58024800

0800b500 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b08c      	sub	sp, #48	@ 0x30
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d101      	bne.n	800b512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	e3c8      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f003 0301 	and.w	r3, r3, #1
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f000 8087 	beq.w	800b62e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b520:	4b88      	ldr	r3, [pc, #544]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b522:	691b      	ldr	r3, [r3, #16]
 800b524:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b528:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b52a:	4b86      	ldr	r3, [pc, #536]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b52e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b532:	2b10      	cmp	r3, #16
 800b534:	d007      	beq.n	800b546 <HAL_RCC_OscConfig+0x46>
 800b536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b538:	2b18      	cmp	r3, #24
 800b53a:	d110      	bne.n	800b55e <HAL_RCC_OscConfig+0x5e>
 800b53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b53e:	f003 0303 	and.w	r3, r3, #3
 800b542:	2b02      	cmp	r3, #2
 800b544:	d10b      	bne.n	800b55e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b546:	4b7f      	ldr	r3, [pc, #508]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d06c      	beq.n	800b62c <HAL_RCC_OscConfig+0x12c>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d168      	bne.n	800b62c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	e3a2      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b566:	d106      	bne.n	800b576 <HAL_RCC_OscConfig+0x76>
 800b568:	4b76      	ldr	r3, [pc, #472]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a75      	ldr	r2, [pc, #468]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b56e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b572:	6013      	str	r3, [r2, #0]
 800b574:	e02e      	b.n	800b5d4 <HAL_RCC_OscConfig+0xd4>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d10c      	bne.n	800b598 <HAL_RCC_OscConfig+0x98>
 800b57e:	4b71      	ldr	r3, [pc, #452]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a70      	ldr	r2, [pc, #448]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b588:	6013      	str	r3, [r2, #0]
 800b58a:	4b6e      	ldr	r3, [pc, #440]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a6d      	ldr	r2, [pc, #436]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b590:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b594:	6013      	str	r3, [r2, #0]
 800b596:	e01d      	b.n	800b5d4 <HAL_RCC_OscConfig+0xd4>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b5a0:	d10c      	bne.n	800b5bc <HAL_RCC_OscConfig+0xbc>
 800b5a2:	4b68      	ldr	r3, [pc, #416]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a67      	ldr	r2, [pc, #412]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b5a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b5ac:	6013      	str	r3, [r2, #0]
 800b5ae:	4b65      	ldr	r3, [pc, #404]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a64      	ldr	r2, [pc, #400]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b5b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5b8:	6013      	str	r3, [r2, #0]
 800b5ba:	e00b      	b.n	800b5d4 <HAL_RCC_OscConfig+0xd4>
 800b5bc:	4b61      	ldr	r3, [pc, #388]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a60      	ldr	r2, [pc, #384]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b5c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	4b5e      	ldr	r3, [pc, #376]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a5d      	ldr	r2, [pc, #372]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b5ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b5d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d013      	beq.n	800b604 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5dc:	f7fa fa12 	bl	8005a04 <HAL_GetTick>
 800b5e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b5e2:	e008      	b.n	800b5f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5e4:	f7fa fa0e 	bl	8005a04 <HAL_GetTick>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	2b64      	cmp	r3, #100	@ 0x64
 800b5f0:	d901      	bls.n	800b5f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e356      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b5f6:	4b53      	ldr	r3, [pc, #332]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d0f0      	beq.n	800b5e4 <HAL_RCC_OscConfig+0xe4>
 800b602:	e014      	b.n	800b62e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b604:	f7fa f9fe 	bl	8005a04 <HAL_GetTick>
 800b608:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b60a:	e008      	b.n	800b61e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b60c:	f7fa f9fa 	bl	8005a04 <HAL_GetTick>
 800b610:	4602      	mov	r2, r0
 800b612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	2b64      	cmp	r3, #100	@ 0x64
 800b618:	d901      	bls.n	800b61e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e342      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b61e:	4b49      	ldr	r3, [pc, #292]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1f0      	bne.n	800b60c <HAL_RCC_OscConfig+0x10c>
 800b62a:	e000      	b.n	800b62e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b62c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 0302 	and.w	r3, r3, #2
 800b636:	2b00      	cmp	r3, #0
 800b638:	f000 808c 	beq.w	800b754 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b63c:	4b41      	ldr	r3, [pc, #260]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b644:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b646:	4b3f      	ldr	r3, [pc, #252]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b64a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b64c:	6a3b      	ldr	r3, [r7, #32]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d007      	beq.n	800b662 <HAL_RCC_OscConfig+0x162>
 800b652:	6a3b      	ldr	r3, [r7, #32]
 800b654:	2b18      	cmp	r3, #24
 800b656:	d137      	bne.n	800b6c8 <HAL_RCC_OscConfig+0x1c8>
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	f003 0303 	and.w	r3, r3, #3
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d132      	bne.n	800b6c8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b662:	4b38      	ldr	r3, [pc, #224]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f003 0304 	and.w	r3, r3, #4
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d005      	beq.n	800b67a <HAL_RCC_OscConfig+0x17a>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d101      	bne.n	800b67a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	e314      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b67a:	4b32      	ldr	r3, [pc, #200]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f023 0219 	bic.w	r2, r3, #25
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	492f      	ldr	r1, [pc, #188]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b688:	4313      	orrs	r3, r2
 800b68a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b68c:	f7fa f9ba 	bl	8005a04 <HAL_GetTick>
 800b690:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b692:	e008      	b.n	800b6a6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b694:	f7fa f9b6 	bl	8005a04 <HAL_GetTick>
 800b698:	4602      	mov	r2, r0
 800b69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69c:	1ad3      	subs	r3, r2, r3
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	d901      	bls.n	800b6a6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	e2fe      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b6a6:	4b27      	ldr	r3, [pc, #156]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f003 0304 	and.w	r3, r3, #4
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d0f0      	beq.n	800b694 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6b2:	4b24      	ldr	r3, [pc, #144]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	061b      	lsls	r3, r3, #24
 800b6c0:	4920      	ldr	r1, [pc, #128]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b6c6:	e045      	b.n	800b754 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d026      	beq.n	800b71e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b6d0:	4b1c      	ldr	r3, [pc, #112]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f023 0219 	bic.w	r2, r3, #25
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	4919      	ldr	r1, [pc, #100]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6e2:	f7fa f98f 	bl	8005a04 <HAL_GetTick>
 800b6e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b6e8:	e008      	b.n	800b6fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b6ea:	f7fa f98b 	bl	8005a04 <HAL_GetTick>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f2:	1ad3      	subs	r3, r2, r3
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d901      	bls.n	800b6fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	e2d3      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b6fc:	4b11      	ldr	r3, [pc, #68]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f003 0304 	and.w	r3, r3, #4
 800b704:	2b00      	cmp	r3, #0
 800b706:	d0f0      	beq.n	800b6ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b708:	4b0e      	ldr	r3, [pc, #56]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	061b      	lsls	r3, r3, #24
 800b716:	490b      	ldr	r1, [pc, #44]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b718:	4313      	orrs	r3, r2
 800b71a:	604b      	str	r3, [r1, #4]
 800b71c:	e01a      	b.n	800b754 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b71e:	4b09      	ldr	r3, [pc, #36]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a08      	ldr	r2, [pc, #32]	@ (800b744 <HAL_RCC_OscConfig+0x244>)
 800b724:	f023 0301 	bic.w	r3, r3, #1
 800b728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b72a:	f7fa f96b 	bl	8005a04 <HAL_GetTick>
 800b72e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b730:	e00a      	b.n	800b748 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b732:	f7fa f967 	bl	8005a04 <HAL_GetTick>
 800b736:	4602      	mov	r2, r0
 800b738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d903      	bls.n	800b748 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b740:	2303      	movs	r3, #3
 800b742:	e2af      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
 800b744:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b748:	4b96      	ldr	r3, [pc, #600]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f003 0304 	and.w	r3, r3, #4
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1ee      	bne.n	800b732 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 0310 	and.w	r3, r3, #16
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d06a      	beq.n	800b836 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b760:	4b90      	ldr	r3, [pc, #576]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b768:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b76a:	4b8e      	ldr	r3, [pc, #568]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b76e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	2b08      	cmp	r3, #8
 800b774:	d007      	beq.n	800b786 <HAL_RCC_OscConfig+0x286>
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	2b18      	cmp	r3, #24
 800b77a:	d11b      	bne.n	800b7b4 <HAL_RCC_OscConfig+0x2b4>
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	f003 0303 	and.w	r3, r3, #3
 800b782:	2b01      	cmp	r3, #1
 800b784:	d116      	bne.n	800b7b4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b786:	4b87      	ldr	r3, [pc, #540]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d005      	beq.n	800b79e <HAL_RCC_OscConfig+0x29e>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	69db      	ldr	r3, [r3, #28]
 800b796:	2b80      	cmp	r3, #128	@ 0x80
 800b798:	d001      	beq.n	800b79e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	e282      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b79e:	4b81      	ldr	r3, [pc, #516]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6a1b      	ldr	r3, [r3, #32]
 800b7aa:	061b      	lsls	r3, r3, #24
 800b7ac:	497d      	ldr	r1, [pc, #500]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b7b2:	e040      	b.n	800b836 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	69db      	ldr	r3, [r3, #28]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d023      	beq.n	800b804 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b7bc:	4b79      	ldr	r3, [pc, #484]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a78      	ldr	r2, [pc, #480]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b7c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7c8:	f7fa f91c 	bl	8005a04 <HAL_GetTick>
 800b7cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b7ce:	e008      	b.n	800b7e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b7d0:	f7fa f918 	bl	8005a04 <HAL_GetTick>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d8:	1ad3      	subs	r3, r2, r3
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d901      	bls.n	800b7e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b7de:	2303      	movs	r3, #3
 800b7e0:	e260      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b7e2:	4b70      	ldr	r3, [pc, #448]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d0f0      	beq.n	800b7d0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b7ee:	4b6d      	ldr	r3, [pc, #436]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a1b      	ldr	r3, [r3, #32]
 800b7fa:	061b      	lsls	r3, r3, #24
 800b7fc:	4969      	ldr	r1, [pc, #420]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b7fe:	4313      	orrs	r3, r2
 800b800:	60cb      	str	r3, [r1, #12]
 800b802:	e018      	b.n	800b836 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b804:	4b67      	ldr	r3, [pc, #412]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a66      	ldr	r2, [pc, #408]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b80a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b80e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b810:	f7fa f8f8 	bl	8005a04 <HAL_GetTick>
 800b814:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b816:	e008      	b.n	800b82a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b818:	f7fa f8f4 	bl	8005a04 <HAL_GetTick>
 800b81c:	4602      	mov	r2, r0
 800b81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	2b02      	cmp	r3, #2
 800b824:	d901      	bls.n	800b82a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800b826:	2303      	movs	r3, #3
 800b828:	e23c      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b82a:	4b5e      	ldr	r3, [pc, #376]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1f0      	bne.n	800b818 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f003 0308 	and.w	r3, r3, #8
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d036      	beq.n	800b8b0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	695b      	ldr	r3, [r3, #20]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d019      	beq.n	800b87e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b84a:	4b56      	ldr	r3, [pc, #344]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b84c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b84e:	4a55      	ldr	r2, [pc, #340]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b850:	f043 0301 	orr.w	r3, r3, #1
 800b854:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b856:	f7fa f8d5 	bl	8005a04 <HAL_GetTick>
 800b85a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b85c:	e008      	b.n	800b870 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b85e:	f7fa f8d1 	bl	8005a04 <HAL_GetTick>
 800b862:	4602      	mov	r2, r0
 800b864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b866:	1ad3      	subs	r3, r2, r3
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d901      	bls.n	800b870 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800b86c:	2303      	movs	r3, #3
 800b86e:	e219      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b870:	4b4c      	ldr	r3, [pc, #304]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b874:	f003 0302 	and.w	r3, r3, #2
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d0f0      	beq.n	800b85e <HAL_RCC_OscConfig+0x35e>
 800b87c:	e018      	b.n	800b8b0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b87e:	4b49      	ldr	r3, [pc, #292]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b882:	4a48      	ldr	r2, [pc, #288]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b884:	f023 0301 	bic.w	r3, r3, #1
 800b888:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b88a:	f7fa f8bb 	bl	8005a04 <HAL_GetTick>
 800b88e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b890:	e008      	b.n	800b8a4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b892:	f7fa f8b7 	bl	8005a04 <HAL_GetTick>
 800b896:	4602      	mov	r2, r0
 800b898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	d901      	bls.n	800b8a4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	e1ff      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b8a4:	4b3f      	ldr	r3, [pc, #252]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b8a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8a8:	f003 0302 	and.w	r3, r3, #2
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1f0      	bne.n	800b892 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f003 0320 	and.w	r3, r3, #32
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d036      	beq.n	800b92a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d019      	beq.n	800b8f8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b8c4:	4b37      	ldr	r3, [pc, #220]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a36      	ldr	r2, [pc, #216]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b8ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b8ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b8d0:	f7fa f898 	bl	8005a04 <HAL_GetTick>
 800b8d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b8d6:	e008      	b.n	800b8ea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b8d8:	f7fa f894 	bl	8005a04 <HAL_GetTick>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d901      	bls.n	800b8ea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	e1dc      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b8ea:	4b2e      	ldr	r3, [pc, #184]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d0f0      	beq.n	800b8d8 <HAL_RCC_OscConfig+0x3d8>
 800b8f6:	e018      	b.n	800b92a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b8f8:	4b2a      	ldr	r3, [pc, #168]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a29      	ldr	r2, [pc, #164]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b8fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b902:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b904:	f7fa f87e 	bl	8005a04 <HAL_GetTick>
 800b908:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b90a:	e008      	b.n	800b91e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b90c:	f7fa f87a 	bl	8005a04 <HAL_GetTick>
 800b910:	4602      	mov	r2, r0
 800b912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	2b02      	cmp	r3, #2
 800b918:	d901      	bls.n	800b91e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b91a:	2303      	movs	r3, #3
 800b91c:	e1c2      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b91e:	4b21      	ldr	r3, [pc, #132]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1f0      	bne.n	800b90c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f003 0304 	and.w	r3, r3, #4
 800b932:	2b00      	cmp	r3, #0
 800b934:	f000 8086 	beq.w	800ba44 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b938:	4b1b      	ldr	r3, [pc, #108]	@ (800b9a8 <HAL_RCC_OscConfig+0x4a8>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4a1a      	ldr	r2, [pc, #104]	@ (800b9a8 <HAL_RCC_OscConfig+0x4a8>)
 800b93e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b942:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b944:	f7fa f85e 	bl	8005a04 <HAL_GetTick>
 800b948:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b94a:	e008      	b.n	800b95e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b94c:	f7fa f85a 	bl	8005a04 <HAL_GetTick>
 800b950:	4602      	mov	r2, r0
 800b952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	2b64      	cmp	r3, #100	@ 0x64
 800b958:	d901      	bls.n	800b95e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b95a:	2303      	movs	r3, #3
 800b95c:	e1a2      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b95e:	4b12      	ldr	r3, [pc, #72]	@ (800b9a8 <HAL_RCC_OscConfig+0x4a8>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b966:	2b00      	cmp	r3, #0
 800b968:	d0f0      	beq.n	800b94c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d106      	bne.n	800b980 <HAL_RCC_OscConfig+0x480>
 800b972:	4b0c      	ldr	r3, [pc, #48]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b976:	4a0b      	ldr	r2, [pc, #44]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b978:	f043 0301 	orr.w	r3, r3, #1
 800b97c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b97e:	e032      	b.n	800b9e6 <HAL_RCC_OscConfig+0x4e6>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d111      	bne.n	800b9ac <HAL_RCC_OscConfig+0x4ac>
 800b988:	4b06      	ldr	r3, [pc, #24]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b98a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b98c:	4a05      	ldr	r2, [pc, #20]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b98e:	f023 0301 	bic.w	r3, r3, #1
 800b992:	6713      	str	r3, [r2, #112]	@ 0x70
 800b994:	4b03      	ldr	r3, [pc, #12]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b998:	4a02      	ldr	r2, [pc, #8]	@ (800b9a4 <HAL_RCC_OscConfig+0x4a4>)
 800b99a:	f023 0304 	bic.w	r3, r3, #4
 800b99e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b9a0:	e021      	b.n	800b9e6 <HAL_RCC_OscConfig+0x4e6>
 800b9a2:	bf00      	nop
 800b9a4:	58024400 	.word	0x58024400
 800b9a8:	58024800 	.word	0x58024800
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	2b05      	cmp	r3, #5
 800b9b2:	d10c      	bne.n	800b9ce <HAL_RCC_OscConfig+0x4ce>
 800b9b4:	4b83      	ldr	r3, [pc, #524]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800b9b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9b8:	4a82      	ldr	r2, [pc, #520]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800b9ba:	f043 0304 	orr.w	r3, r3, #4
 800b9be:	6713      	str	r3, [r2, #112]	@ 0x70
 800b9c0:	4b80      	ldr	r3, [pc, #512]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800b9c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9c4:	4a7f      	ldr	r2, [pc, #508]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800b9c6:	f043 0301 	orr.w	r3, r3, #1
 800b9ca:	6713      	str	r3, [r2, #112]	@ 0x70
 800b9cc:	e00b      	b.n	800b9e6 <HAL_RCC_OscConfig+0x4e6>
 800b9ce:	4b7d      	ldr	r3, [pc, #500]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800b9d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9d2:	4a7c      	ldr	r2, [pc, #496]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800b9d4:	f023 0301 	bic.w	r3, r3, #1
 800b9d8:	6713      	str	r3, [r2, #112]	@ 0x70
 800b9da:	4b7a      	ldr	r3, [pc, #488]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800b9dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9de:	4a79      	ldr	r2, [pc, #484]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800b9e0:	f023 0304 	bic.w	r3, r3, #4
 800b9e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d015      	beq.n	800ba1a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9ee:	f7fa f809 	bl	8005a04 <HAL_GetTick>
 800b9f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9f4:	e00a      	b.n	800ba0c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9f6:	f7fa f805 	bl	8005a04 <HAL_GetTick>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d901      	bls.n	800ba0c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	e14b      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba0c:	4b6d      	ldr	r3, [pc, #436]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800ba0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba10:	f003 0302 	and.w	r3, r3, #2
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d0ee      	beq.n	800b9f6 <HAL_RCC_OscConfig+0x4f6>
 800ba18:	e014      	b.n	800ba44 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba1a:	f7f9 fff3 	bl	8005a04 <HAL_GetTick>
 800ba1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ba20:	e00a      	b.n	800ba38 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba22:	f7f9 ffef 	bl	8005a04 <HAL_GetTick>
 800ba26:	4602      	mov	r2, r0
 800ba28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d901      	bls.n	800ba38 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ba34:	2303      	movs	r3, #3
 800ba36:	e135      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ba38:	4b62      	ldr	r3, [pc, #392]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800ba3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba3c:	f003 0302 	and.w	r3, r3, #2
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1ee      	bne.n	800ba22 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f000 812a 	beq.w	800bca2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ba4e:	4b5d      	ldr	r3, [pc, #372]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800ba50:	691b      	ldr	r3, [r3, #16]
 800ba52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ba56:	2b18      	cmp	r3, #24
 800ba58:	f000 80ba 	beq.w	800bbd0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	f040 8095 	bne.w	800bb90 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba66:	4b57      	ldr	r3, [pc, #348]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a56      	ldr	r2, [pc, #344]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800ba6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba72:	f7f9 ffc7 	bl	8005a04 <HAL_GetTick>
 800ba76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba78:	e008      	b.n	800ba8c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba7a:	f7f9 ffc3 	bl	8005a04 <HAL_GetTick>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	2b02      	cmp	r3, #2
 800ba86:	d901      	bls.n	800ba8c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ba88:	2303      	movs	r3, #3
 800ba8a:	e10b      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba8c:	4b4d      	ldr	r3, [pc, #308]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1f0      	bne.n	800ba7a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ba98:	4b4a      	ldr	r3, [pc, #296]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800ba9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba9c:	4b4a      	ldr	r3, [pc, #296]	@ (800bbc8 <HAL_RCC_OscConfig+0x6c8>)
 800ba9e:	4013      	ands	r3, r2
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800baa8:	0112      	lsls	r2, r2, #4
 800baaa:	430a      	orrs	r2, r1
 800baac:	4945      	ldr	r1, [pc, #276]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800baae:	4313      	orrs	r3, r2
 800bab0:	628b      	str	r3, [r1, #40]	@ 0x28
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bab6:	3b01      	subs	r3, #1
 800bab8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bac0:	3b01      	subs	r3, #1
 800bac2:	025b      	lsls	r3, r3, #9
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	431a      	orrs	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bacc:	3b01      	subs	r3, #1
 800bace:	041b      	lsls	r3, r3, #16
 800bad0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bad4:	431a      	orrs	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bada:	3b01      	subs	r3, #1
 800badc:	061b      	lsls	r3, r3, #24
 800bade:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bae2:	4938      	ldr	r1, [pc, #224]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bae4:	4313      	orrs	r3, r2
 800bae6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bae8:	4b36      	ldr	r3, [pc, #216]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800baea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baec:	4a35      	ldr	r2, [pc, #212]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800baee:	f023 0301 	bic.w	r3, r3, #1
 800baf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800baf4:	4b33      	ldr	r3, [pc, #204]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800baf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800baf8:	4b34      	ldr	r3, [pc, #208]	@ (800bbcc <HAL_RCC_OscConfig+0x6cc>)
 800bafa:	4013      	ands	r3, r2
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bb00:	00d2      	lsls	r2, r2, #3
 800bb02:	4930      	ldr	r1, [pc, #192]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb04:	4313      	orrs	r3, r2
 800bb06:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bb08:	4b2e      	ldr	r3, [pc, #184]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb0c:	f023 020c 	bic.w	r2, r3, #12
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb14:	492b      	ldr	r1, [pc, #172]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb16:	4313      	orrs	r3, r2
 800bb18:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bb1a:	4b2a      	ldr	r3, [pc, #168]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb1e:	f023 0202 	bic.w	r2, r3, #2
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb26:	4927      	ldr	r1, [pc, #156]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bb2c:	4b25      	ldr	r3, [pc, #148]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb30:	4a24      	ldr	r2, [pc, #144]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb38:	4b22      	ldr	r3, [pc, #136]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb3c:	4a21      	ldr	r2, [pc, #132]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bb44:	4b1f      	ldr	r3, [pc, #124]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb48:	4a1e      	ldr	r2, [pc, #120]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bb4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bb50:	4b1c      	ldr	r3, [pc, #112]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb54:	4a1b      	ldr	r2, [pc, #108]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb56:	f043 0301 	orr.w	r3, r3, #1
 800bb5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bb5c:	4b19      	ldr	r3, [pc, #100]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a18      	ldr	r2, [pc, #96]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bb66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb68:	f7f9 ff4c 	bl	8005a04 <HAL_GetTick>
 800bb6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bb6e:	e008      	b.n	800bb82 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb70:	f7f9 ff48 	bl	8005a04 <HAL_GetTick>
 800bb74:	4602      	mov	r2, r0
 800bb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb78:	1ad3      	subs	r3, r2, r3
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	d901      	bls.n	800bb82 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800bb7e:	2303      	movs	r3, #3
 800bb80:	e090      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bb82:	4b10      	ldr	r3, [pc, #64]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d0f0      	beq.n	800bb70 <HAL_RCC_OscConfig+0x670>
 800bb8e:	e088      	b.n	800bca2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb90:	4b0c      	ldr	r3, [pc, #48]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a0b      	ldr	r2, [pc, #44]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bb96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bb9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb9c:	f7f9 ff32 	bl	8005a04 <HAL_GetTick>
 800bba0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bba2:	e008      	b.n	800bbb6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bba4:	f7f9 ff2e 	bl	8005a04 <HAL_GetTick>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbac:	1ad3      	subs	r3, r2, r3
 800bbae:	2b02      	cmp	r3, #2
 800bbb0:	d901      	bls.n	800bbb6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800bbb2:	2303      	movs	r3, #3
 800bbb4:	e076      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bbb6:	4b03      	ldr	r3, [pc, #12]	@ (800bbc4 <HAL_RCC_OscConfig+0x6c4>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1f0      	bne.n	800bba4 <HAL_RCC_OscConfig+0x6a4>
 800bbc2:	e06e      	b.n	800bca2 <HAL_RCC_OscConfig+0x7a2>
 800bbc4:	58024400 	.word	0x58024400
 800bbc8:	fffffc0c 	.word	0xfffffc0c
 800bbcc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bbd0:	4b36      	ldr	r3, [pc, #216]	@ (800bcac <HAL_RCC_OscConfig+0x7ac>)
 800bbd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbd4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bbd6:	4b35      	ldr	r3, [pc, #212]	@ (800bcac <HAL_RCC_OscConfig+0x7ac>)
 800bbd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbda:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d031      	beq.n	800bc48 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	f003 0203 	and.w	r2, r3, #3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d12a      	bne.n	800bc48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	091b      	lsrs	r3, r3, #4
 800bbf6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d122      	bne.n	800bc48 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d11a      	bne.n	800bc48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	0a5b      	lsrs	r3, r3, #9
 800bc16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc1e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d111      	bne.n	800bc48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	0c1b      	lsrs	r3, r3, #16
 800bc28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc30:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d108      	bne.n	800bc48 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	0e1b      	lsrs	r3, r3, #24
 800bc3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d001      	beq.n	800bc4c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e02b      	b.n	800bca4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bc4c:	4b17      	ldr	r3, [pc, #92]	@ (800bcac <HAL_RCC_OscConfig+0x7ac>)
 800bc4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc50:	08db      	lsrs	r3, r3, #3
 800bc52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc56:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d01f      	beq.n	800bca2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800bc62:	4b12      	ldr	r3, [pc, #72]	@ (800bcac <HAL_RCC_OscConfig+0x7ac>)
 800bc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc66:	4a11      	ldr	r2, [pc, #68]	@ (800bcac <HAL_RCC_OscConfig+0x7ac>)
 800bc68:	f023 0301 	bic.w	r3, r3, #1
 800bc6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bc6e:	f7f9 fec9 	bl	8005a04 <HAL_GetTick>
 800bc72:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bc74:	bf00      	nop
 800bc76:	f7f9 fec5 	bl	8005a04 <HAL_GetTick>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d0f9      	beq.n	800bc76 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bc82:	4b0a      	ldr	r3, [pc, #40]	@ (800bcac <HAL_RCC_OscConfig+0x7ac>)
 800bc84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc86:	4b0a      	ldr	r3, [pc, #40]	@ (800bcb0 <HAL_RCC_OscConfig+0x7b0>)
 800bc88:	4013      	ands	r3, r2
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bc8e:	00d2      	lsls	r2, r2, #3
 800bc90:	4906      	ldr	r1, [pc, #24]	@ (800bcac <HAL_RCC_OscConfig+0x7ac>)
 800bc92:	4313      	orrs	r3, r2
 800bc94:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800bc96:	4b05      	ldr	r3, [pc, #20]	@ (800bcac <HAL_RCC_OscConfig+0x7ac>)
 800bc98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc9a:	4a04      	ldr	r2, [pc, #16]	@ (800bcac <HAL_RCC_OscConfig+0x7ac>)
 800bc9c:	f043 0301 	orr.w	r3, r3, #1
 800bca0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3730      	adds	r7, #48	@ 0x30
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	58024400 	.word	0x58024400
 800bcb0:	ffff0007 	.word	0xffff0007

0800bcb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d101      	bne.n	800bcc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e19c      	b.n	800c002 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bcc8:	4b8a      	ldr	r3, [pc, #552]	@ (800bef4 <HAL_RCC_ClockConfig+0x240>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f003 030f 	and.w	r3, r3, #15
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d910      	bls.n	800bcf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcd6:	4b87      	ldr	r3, [pc, #540]	@ (800bef4 <HAL_RCC_ClockConfig+0x240>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f023 020f 	bic.w	r2, r3, #15
 800bcde:	4985      	ldr	r1, [pc, #532]	@ (800bef4 <HAL_RCC_ClockConfig+0x240>)
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bce6:	4b83      	ldr	r3, [pc, #524]	@ (800bef4 <HAL_RCC_ClockConfig+0x240>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f003 030f 	and.w	r3, r3, #15
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d001      	beq.n	800bcf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e184      	b.n	800c002 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f003 0304 	and.w	r3, r3, #4
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d010      	beq.n	800bd26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	691a      	ldr	r2, [r3, #16]
 800bd08:	4b7b      	ldr	r3, [pc, #492]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bd0a:	699b      	ldr	r3, [r3, #24]
 800bd0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d908      	bls.n	800bd26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bd14:	4b78      	ldr	r3, [pc, #480]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bd16:	699b      	ldr	r3, [r3, #24]
 800bd18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	691b      	ldr	r3, [r3, #16]
 800bd20:	4975      	ldr	r1, [pc, #468]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bd22:	4313      	orrs	r3, r2
 800bd24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f003 0308 	and.w	r3, r3, #8
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d010      	beq.n	800bd54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	695a      	ldr	r2, [r3, #20]
 800bd36:	4b70      	ldr	r3, [pc, #448]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bd38:	69db      	ldr	r3, [r3, #28]
 800bd3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d908      	bls.n	800bd54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bd42:	4b6d      	ldr	r3, [pc, #436]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bd44:	69db      	ldr	r3, [r3, #28]
 800bd46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	695b      	ldr	r3, [r3, #20]
 800bd4e:	496a      	ldr	r1, [pc, #424]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bd50:	4313      	orrs	r3, r2
 800bd52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 0310 	and.w	r3, r3, #16
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d010      	beq.n	800bd82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	699a      	ldr	r2, [r3, #24]
 800bd64:	4b64      	ldr	r3, [pc, #400]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bd66:	69db      	ldr	r3, [r3, #28]
 800bd68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d908      	bls.n	800bd82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bd70:	4b61      	ldr	r3, [pc, #388]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bd72:	69db      	ldr	r3, [r3, #28]
 800bd74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	699b      	ldr	r3, [r3, #24]
 800bd7c:	495e      	ldr	r1, [pc, #376]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f003 0320 	and.w	r3, r3, #32
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d010      	beq.n	800bdb0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	69da      	ldr	r2, [r3, #28]
 800bd92:	4b59      	ldr	r3, [pc, #356]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bd94:	6a1b      	ldr	r3, [r3, #32]
 800bd96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d908      	bls.n	800bdb0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bd9e:	4b56      	ldr	r3, [pc, #344]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bda0:	6a1b      	ldr	r3, [r3, #32]
 800bda2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	69db      	ldr	r3, [r3, #28]
 800bdaa:	4953      	ldr	r1, [pc, #332]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bdac:	4313      	orrs	r3, r2
 800bdae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 0302 	and.w	r3, r3, #2
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d010      	beq.n	800bdde <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	68da      	ldr	r2, [r3, #12]
 800bdc0:	4b4d      	ldr	r3, [pc, #308]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bdc2:	699b      	ldr	r3, [r3, #24]
 800bdc4:	f003 030f 	and.w	r3, r3, #15
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d908      	bls.n	800bdde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bdcc:	4b4a      	ldr	r3, [pc, #296]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bdce:	699b      	ldr	r3, [r3, #24]
 800bdd0:	f023 020f 	bic.w	r2, r3, #15
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	4947      	ldr	r1, [pc, #284]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bdda:	4313      	orrs	r3, r2
 800bddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f003 0301 	and.w	r3, r3, #1
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d055      	beq.n	800be96 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bdea:	4b43      	ldr	r3, [pc, #268]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	4940      	ldr	r1, [pc, #256]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	2b02      	cmp	r3, #2
 800be02:	d107      	bne.n	800be14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800be04:	4b3c      	ldr	r3, [pc, #240]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d121      	bne.n	800be54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	e0f6      	b.n	800c002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	2b03      	cmp	r3, #3
 800be1a:	d107      	bne.n	800be2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800be1c:	4b36      	ldr	r3, [pc, #216]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be24:	2b00      	cmp	r3, #0
 800be26:	d115      	bne.n	800be54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800be28:	2301      	movs	r3, #1
 800be2a:	e0ea      	b.n	800c002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	2b01      	cmp	r3, #1
 800be32:	d107      	bne.n	800be44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800be34:	4b30      	ldr	r3, [pc, #192]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d109      	bne.n	800be54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	e0de      	b.n	800c002 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be44:	4b2c      	ldr	r3, [pc, #176]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f003 0304 	and.w	r3, r3, #4
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800be50:	2301      	movs	r3, #1
 800be52:	e0d6      	b.n	800c002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800be54:	4b28      	ldr	r3, [pc, #160]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800be56:	691b      	ldr	r3, [r3, #16]
 800be58:	f023 0207 	bic.w	r2, r3, #7
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	4925      	ldr	r1, [pc, #148]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800be62:	4313      	orrs	r3, r2
 800be64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be66:	f7f9 fdcd 	bl	8005a04 <HAL_GetTick>
 800be6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be6c:	e00a      	b.n	800be84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be6e:	f7f9 fdc9 	bl	8005a04 <HAL_GetTick>
 800be72:	4602      	mov	r2, r0
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d901      	bls.n	800be84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800be80:	2303      	movs	r3, #3
 800be82:	e0be      	b.n	800c002 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be84:	4b1c      	ldr	r3, [pc, #112]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	00db      	lsls	r3, r3, #3
 800be92:	429a      	cmp	r2, r3
 800be94:	d1eb      	bne.n	800be6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f003 0302 	and.w	r3, r3, #2
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d010      	beq.n	800bec4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	68da      	ldr	r2, [r3, #12]
 800bea6:	4b14      	ldr	r3, [pc, #80]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	f003 030f 	and.w	r3, r3, #15
 800beae:	429a      	cmp	r2, r3
 800beb0:	d208      	bcs.n	800bec4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800beb2:	4b11      	ldr	r3, [pc, #68]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800beb4:	699b      	ldr	r3, [r3, #24]
 800beb6:	f023 020f 	bic.w	r2, r3, #15
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	490e      	ldr	r1, [pc, #56]	@ (800bef8 <HAL_RCC_ClockConfig+0x244>)
 800bec0:	4313      	orrs	r3, r2
 800bec2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bec4:	4b0b      	ldr	r3, [pc, #44]	@ (800bef4 <HAL_RCC_ClockConfig+0x240>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f003 030f 	and.w	r3, r3, #15
 800becc:	683a      	ldr	r2, [r7, #0]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d214      	bcs.n	800befc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bed2:	4b08      	ldr	r3, [pc, #32]	@ (800bef4 <HAL_RCC_ClockConfig+0x240>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f023 020f 	bic.w	r2, r3, #15
 800beda:	4906      	ldr	r1, [pc, #24]	@ (800bef4 <HAL_RCC_ClockConfig+0x240>)
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	4313      	orrs	r3, r2
 800bee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bee2:	4b04      	ldr	r3, [pc, #16]	@ (800bef4 <HAL_RCC_ClockConfig+0x240>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f003 030f 	and.w	r3, r3, #15
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	429a      	cmp	r2, r3
 800beee:	d005      	beq.n	800befc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	e086      	b.n	800c002 <HAL_RCC_ClockConfig+0x34e>
 800bef4:	52002000 	.word	0x52002000
 800bef8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f003 0304 	and.w	r3, r3, #4
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d010      	beq.n	800bf2a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	691a      	ldr	r2, [r3, #16]
 800bf0c:	4b3f      	ldr	r3, [pc, #252]	@ (800c00c <HAL_RCC_ClockConfig+0x358>)
 800bf0e:	699b      	ldr	r3, [r3, #24]
 800bf10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d208      	bcs.n	800bf2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bf18:	4b3c      	ldr	r3, [pc, #240]	@ (800c00c <HAL_RCC_ClockConfig+0x358>)
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	691b      	ldr	r3, [r3, #16]
 800bf24:	4939      	ldr	r1, [pc, #228]	@ (800c00c <HAL_RCC_ClockConfig+0x358>)
 800bf26:	4313      	orrs	r3, r2
 800bf28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 0308 	and.w	r3, r3, #8
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d010      	beq.n	800bf58 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	695a      	ldr	r2, [r3, #20]
 800bf3a:	4b34      	ldr	r3, [pc, #208]	@ (800c00c <HAL_RCC_ClockConfig+0x358>)
 800bf3c:	69db      	ldr	r3, [r3, #28]
 800bf3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d208      	bcs.n	800bf58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bf46:	4b31      	ldr	r3, [pc, #196]	@ (800c00c <HAL_RCC_ClockConfig+0x358>)
 800bf48:	69db      	ldr	r3, [r3, #28]
 800bf4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	695b      	ldr	r3, [r3, #20]
 800bf52:	492e      	ldr	r1, [pc, #184]	@ (800c00c <HAL_RCC_ClockConfig+0x358>)
 800bf54:	4313      	orrs	r3, r2
 800bf56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f003 0310 	and.w	r3, r3, #16
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d010      	beq.n	800bf86 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	699a      	ldr	r2, [r3, #24]
 800bf68:	4b28      	ldr	r3, [pc, #160]	@ (800c00c <HAL_RCC_ClockConfig+0x358>)
 800bf6a:	69db      	ldr	r3, [r3, #28]
 800bf6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d208      	bcs.n	800bf86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bf74:	4b25      	ldr	r3, [pc, #148]	@ (800c00c <HAL_RCC_ClockConfig+0x358>)
 800bf76:	69db      	ldr	r3, [r3, #28]
 800bf78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	699b      	ldr	r3, [r3, #24]
 800bf80:	4922      	ldr	r1, [pc, #136]	@ (800c00c <HAL_RCC_ClockConfig+0x358>)
 800bf82:	4313      	orrs	r3, r2
 800bf84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f003 0320 	and.w	r3, r3, #32
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d010      	beq.n	800bfb4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	69da      	ldr	r2, [r3, #28]
 800bf96:	4b1d      	ldr	r3, [pc, #116]	@ (800c00c <HAL_RCC_ClockConfig+0x358>)
 800bf98:	6a1b      	ldr	r3, [r3, #32]
 800bf9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d208      	bcs.n	800bfb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bfa2:	4b1a      	ldr	r3, [pc, #104]	@ (800c00c <HAL_RCC_ClockConfig+0x358>)
 800bfa4:	6a1b      	ldr	r3, [r3, #32]
 800bfa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	69db      	ldr	r3, [r3, #28]
 800bfae:	4917      	ldr	r1, [pc, #92]	@ (800c00c <HAL_RCC_ClockConfig+0x358>)
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bfb4:	f000 f834 	bl	800c020 <HAL_RCC_GetSysClockFreq>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	4b14      	ldr	r3, [pc, #80]	@ (800c00c <HAL_RCC_ClockConfig+0x358>)
 800bfbc:	699b      	ldr	r3, [r3, #24]
 800bfbe:	0a1b      	lsrs	r3, r3, #8
 800bfc0:	f003 030f 	and.w	r3, r3, #15
 800bfc4:	4912      	ldr	r1, [pc, #72]	@ (800c010 <HAL_RCC_ClockConfig+0x35c>)
 800bfc6:	5ccb      	ldrb	r3, [r1, r3]
 800bfc8:	f003 031f 	and.w	r3, r3, #31
 800bfcc:	fa22 f303 	lsr.w	r3, r2, r3
 800bfd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bfd2:	4b0e      	ldr	r3, [pc, #56]	@ (800c00c <HAL_RCC_ClockConfig+0x358>)
 800bfd4:	699b      	ldr	r3, [r3, #24]
 800bfd6:	f003 030f 	and.w	r3, r3, #15
 800bfda:	4a0d      	ldr	r2, [pc, #52]	@ (800c010 <HAL_RCC_ClockConfig+0x35c>)
 800bfdc:	5cd3      	ldrb	r3, [r2, r3]
 800bfde:	f003 031f 	and.w	r3, r3, #31
 800bfe2:	693a      	ldr	r2, [r7, #16]
 800bfe4:	fa22 f303 	lsr.w	r3, r2, r3
 800bfe8:	4a0a      	ldr	r2, [pc, #40]	@ (800c014 <HAL_RCC_ClockConfig+0x360>)
 800bfea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bfec:	4a0a      	ldr	r2, [pc, #40]	@ (800c018 <HAL_RCC_ClockConfig+0x364>)
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800bff2:	4b0a      	ldr	r3, [pc, #40]	@ (800c01c <HAL_RCC_ClockConfig+0x368>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7f9 fcba 	bl	8005970 <HAL_InitTick>
 800bffc:	4603      	mov	r3, r0
 800bffe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c000:	7bfb      	ldrb	r3, [r7, #15]
}
 800c002:	4618      	mov	r0, r3
 800c004:	3718      	adds	r7, #24
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	58024400 	.word	0x58024400
 800c010:	08017260 	.word	0x08017260
 800c014:	24000008 	.word	0x24000008
 800c018:	24000004 	.word	0x24000004
 800c01c:	2400000c 	.word	0x2400000c

0800c020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c020:	b480      	push	{r7}
 800c022:	b089      	sub	sp, #36	@ 0x24
 800c024:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c026:	4bb3      	ldr	r3, [pc, #716]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c02e:	2b18      	cmp	r3, #24
 800c030:	f200 8155 	bhi.w	800c2de <HAL_RCC_GetSysClockFreq+0x2be>
 800c034:	a201      	add	r2, pc, #4	@ (adr r2, 800c03c <HAL_RCC_GetSysClockFreq+0x1c>)
 800c036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c03a:	bf00      	nop
 800c03c:	0800c0a1 	.word	0x0800c0a1
 800c040:	0800c2df 	.word	0x0800c2df
 800c044:	0800c2df 	.word	0x0800c2df
 800c048:	0800c2df 	.word	0x0800c2df
 800c04c:	0800c2df 	.word	0x0800c2df
 800c050:	0800c2df 	.word	0x0800c2df
 800c054:	0800c2df 	.word	0x0800c2df
 800c058:	0800c2df 	.word	0x0800c2df
 800c05c:	0800c0c7 	.word	0x0800c0c7
 800c060:	0800c2df 	.word	0x0800c2df
 800c064:	0800c2df 	.word	0x0800c2df
 800c068:	0800c2df 	.word	0x0800c2df
 800c06c:	0800c2df 	.word	0x0800c2df
 800c070:	0800c2df 	.word	0x0800c2df
 800c074:	0800c2df 	.word	0x0800c2df
 800c078:	0800c2df 	.word	0x0800c2df
 800c07c:	0800c0cd 	.word	0x0800c0cd
 800c080:	0800c2df 	.word	0x0800c2df
 800c084:	0800c2df 	.word	0x0800c2df
 800c088:	0800c2df 	.word	0x0800c2df
 800c08c:	0800c2df 	.word	0x0800c2df
 800c090:	0800c2df 	.word	0x0800c2df
 800c094:	0800c2df 	.word	0x0800c2df
 800c098:	0800c2df 	.word	0x0800c2df
 800c09c:	0800c0d3 	.word	0x0800c0d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0a0:	4b94      	ldr	r3, [pc, #592]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f003 0320 	and.w	r3, r3, #32
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d009      	beq.n	800c0c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0ac:	4b91      	ldr	r3, [pc, #580]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	08db      	lsrs	r3, r3, #3
 800c0b2:	f003 0303 	and.w	r3, r3, #3
 800c0b6:	4a90      	ldr	r2, [pc, #576]	@ (800c2f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c0b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c0bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c0be:	e111      	b.n	800c2e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c0c0:	4b8d      	ldr	r3, [pc, #564]	@ (800c2f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c0c2:	61bb      	str	r3, [r7, #24]
      break;
 800c0c4:	e10e      	b.n	800c2e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c0c6:	4b8d      	ldr	r3, [pc, #564]	@ (800c2fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c0c8:	61bb      	str	r3, [r7, #24]
      break;
 800c0ca:	e10b      	b.n	800c2e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c0cc:	4b8c      	ldr	r3, [pc, #560]	@ (800c300 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c0ce:	61bb      	str	r3, [r7, #24]
      break;
 800c0d0:	e108      	b.n	800c2e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0d2:	4b88      	ldr	r3, [pc, #544]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0d6:	f003 0303 	and.w	r3, r3, #3
 800c0da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c0dc:	4b85      	ldr	r3, [pc, #532]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0e0:	091b      	lsrs	r3, r3, #4
 800c0e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c0e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c0e8:	4b82      	ldr	r3, [pc, #520]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ec:	f003 0301 	and.w	r3, r3, #1
 800c0f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c0f2:	4b80      	ldr	r3, [pc, #512]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0f6:	08db      	lsrs	r3, r3, #3
 800c0f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	fb02 f303 	mul.w	r3, r2, r3
 800c102:	ee07 3a90 	vmov	s15, r3
 800c106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c10a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	2b00      	cmp	r3, #0
 800c112:	f000 80e1 	beq.w	800c2d8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	2b02      	cmp	r3, #2
 800c11a:	f000 8083 	beq.w	800c224 <HAL_RCC_GetSysClockFreq+0x204>
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	2b02      	cmp	r3, #2
 800c122:	f200 80a1 	bhi.w	800c268 <HAL_RCC_GetSysClockFreq+0x248>
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d003      	beq.n	800c134 <HAL_RCC_GetSysClockFreq+0x114>
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d056      	beq.n	800c1e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c132:	e099      	b.n	800c268 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c134:	4b6f      	ldr	r3, [pc, #444]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f003 0320 	and.w	r3, r3, #32
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d02d      	beq.n	800c19c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c140:	4b6c      	ldr	r3, [pc, #432]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	08db      	lsrs	r3, r3, #3
 800c146:	f003 0303 	and.w	r3, r3, #3
 800c14a:	4a6b      	ldr	r2, [pc, #428]	@ (800c2f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c14c:	fa22 f303 	lsr.w	r3, r2, r3
 800c150:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	ee07 3a90 	vmov	s15, r3
 800c158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	ee07 3a90 	vmov	s15, r3
 800c162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c16a:	4b62      	ldr	r3, [pc, #392]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c16c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c16e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c172:	ee07 3a90 	vmov	s15, r3
 800c176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c17a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c17e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c18a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c18e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c196:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c19a:	e087      	b.n	800c2ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	ee07 3a90 	vmov	s15, r3
 800c1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c308 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c1aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ae:	4b51      	ldr	r3, [pc, #324]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b6:	ee07 3a90 	vmov	s15, r3
 800c1ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1be:	ed97 6a02 	vldr	s12, [r7, #8]
 800c1c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c1c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c1de:	e065      	b.n	800c2ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	ee07 3a90 	vmov	s15, r3
 800c1e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c30c <HAL_RCC_GetSysClockFreq+0x2ec>
 800c1ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1f2:	4b40      	ldr	r3, [pc, #256]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1fa:	ee07 3a90 	vmov	s15, r3
 800c1fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c202:	ed97 6a02 	vldr	s12, [r7, #8]
 800c206:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c20a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c20e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c21a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c21e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c222:	e043      	b.n	800c2ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	ee07 3a90 	vmov	s15, r3
 800c22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c22e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c310 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c236:	4b2f      	ldr	r3, [pc, #188]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c23a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c23e:	ee07 3a90 	vmov	s15, r3
 800c242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c246:	ed97 6a02 	vldr	s12, [r7, #8]
 800c24a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c24e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c25a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c25e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c262:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c266:	e021      	b.n	800c2ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	ee07 3a90 	vmov	s15, r3
 800c26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c272:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c30c <HAL_RCC_GetSysClockFreq+0x2ec>
 800c276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c27a:	4b1e      	ldr	r3, [pc, #120]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c27c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c282:	ee07 3a90 	vmov	s15, r3
 800c286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c28a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c28e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c29a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c29e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c2aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c2ac:	4b11      	ldr	r3, [pc, #68]	@ (800c2f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2b0:	0a5b      	lsrs	r3, r3, #9
 800c2b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	ee07 3a90 	vmov	s15, r3
 800c2c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c2c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2d0:	ee17 3a90 	vmov	r3, s15
 800c2d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c2d6:	e005      	b.n	800c2e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	61bb      	str	r3, [r7, #24]
      break;
 800c2dc:	e002      	b.n	800c2e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c2de:	4b07      	ldr	r3, [pc, #28]	@ (800c2fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c2e0:	61bb      	str	r3, [r7, #24]
      break;
 800c2e2:	bf00      	nop
  }

  return sysclockfreq;
 800c2e4:	69bb      	ldr	r3, [r7, #24]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3724      	adds	r7, #36	@ 0x24
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr
 800c2f2:	bf00      	nop
 800c2f4:	58024400 	.word	0x58024400
 800c2f8:	03d09000 	.word	0x03d09000
 800c2fc:	003d0900 	.word	0x003d0900
 800c300:	017d7840 	.word	0x017d7840
 800c304:	46000000 	.word	0x46000000
 800c308:	4c742400 	.word	0x4c742400
 800c30c:	4a742400 	.word	0x4a742400
 800c310:	4bbebc20 	.word	0x4bbebc20

0800c314 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c318:	b0c6      	sub	sp, #280	@ 0x118
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c320:	2300      	movs	r3, #0
 800c322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c326:	2300      	movs	r3, #0
 800c328:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c334:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c338:	2500      	movs	r5, #0
 800c33a:	ea54 0305 	orrs.w	r3, r4, r5
 800c33e:	d049      	beq.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c344:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c346:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c34a:	d02f      	beq.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c34c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c350:	d828      	bhi.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c352:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c356:	d01a      	beq.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c358:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c35c:	d822      	bhi.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d003      	beq.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c366:	d007      	beq.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c368:	e01c      	b.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c36a:	4bab      	ldr	r3, [pc, #684]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c36c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c36e:	4aaa      	ldr	r2, [pc, #680]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c374:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c376:	e01a      	b.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c37c:	3308      	adds	r3, #8
 800c37e:	2102      	movs	r1, #2
 800c380:	4618      	mov	r0, r3
 800c382:	f001 f967 	bl	800d654 <RCCEx_PLL2_Config>
 800c386:	4603      	mov	r3, r0
 800c388:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c38c:	e00f      	b.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c392:	3328      	adds	r3, #40	@ 0x28
 800c394:	2102      	movs	r1, #2
 800c396:	4618      	mov	r0, r3
 800c398:	f001 fa0e 	bl	800d7b8 <RCCEx_PLL3_Config>
 800c39c:	4603      	mov	r3, r0
 800c39e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c3a2:	e004      	b.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c3aa:	e000      	b.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c3ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d10a      	bne.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c3b6:	4b98      	ldr	r3, [pc, #608]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c3b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3c4:	4a94      	ldr	r2, [pc, #592]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c3c6:	430b      	orrs	r3, r1
 800c3c8:	6513      	str	r3, [r2, #80]	@ 0x50
 800c3ca:	e003      	b.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800c3e0:	f04f 0900 	mov.w	r9, #0
 800c3e4:	ea58 0309 	orrs.w	r3, r8, r9
 800c3e8:	d047      	beq.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3f0:	2b04      	cmp	r3, #4
 800c3f2:	d82a      	bhi.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c3f4:	a201      	add	r2, pc, #4	@ (adr r2, 800c3fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3fa:	bf00      	nop
 800c3fc:	0800c411 	.word	0x0800c411
 800c400:	0800c41f 	.word	0x0800c41f
 800c404:	0800c435 	.word	0x0800c435
 800c408:	0800c453 	.word	0x0800c453
 800c40c:	0800c453 	.word	0x0800c453
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c410:	4b81      	ldr	r3, [pc, #516]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c414:	4a80      	ldr	r2, [pc, #512]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c41a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c41c:	e01a      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c422:	3308      	adds	r3, #8
 800c424:	2100      	movs	r1, #0
 800c426:	4618      	mov	r0, r3
 800c428:	f001 f914 	bl	800d654 <RCCEx_PLL2_Config>
 800c42c:	4603      	mov	r3, r0
 800c42e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c432:	e00f      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c438:	3328      	adds	r3, #40	@ 0x28
 800c43a:	2100      	movs	r1, #0
 800c43c:	4618      	mov	r0, r3
 800c43e:	f001 f9bb 	bl	800d7b8 <RCCEx_PLL3_Config>
 800c442:	4603      	mov	r3, r0
 800c444:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c448:	e004      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c44a:	2301      	movs	r3, #1
 800c44c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c450:	e000      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c452:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10a      	bne.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c45c:	4b6e      	ldr	r3, [pc, #440]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c45e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c460:	f023 0107 	bic.w	r1, r3, #7
 800c464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c46a:	4a6b      	ldr	r2, [pc, #428]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c46c:	430b      	orrs	r3, r1
 800c46e:	6513      	str	r3, [r2, #80]	@ 0x50
 800c470:	e003      	b.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c472:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c476:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800c486:	f04f 0b00 	mov.w	fp, #0
 800c48a:	ea5a 030b 	orrs.w	r3, sl, fp
 800c48e:	d05b      	beq.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c494:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c498:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c49c:	d03b      	beq.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800c49e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c4a2:	d834      	bhi.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c4a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c4a8:	d037      	beq.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c4aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c4ae:	d82e      	bhi.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c4b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c4b4:	d033      	beq.n	800c51e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800c4b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c4ba:	d828      	bhi.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c4bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c4c0:	d01a      	beq.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800c4c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c4c6:	d822      	bhi.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d003      	beq.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c4cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c4d0:	d007      	beq.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800c4d2:	e01c      	b.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4d4:	4b50      	ldr	r3, [pc, #320]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4d8:	4a4f      	ldr	r2, [pc, #316]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c4da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c4e0:	e01e      	b.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4e6:	3308      	adds	r3, #8
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f001 f8b2 	bl	800d654 <RCCEx_PLL2_Config>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c4f6:	e013      	b.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4fc:	3328      	adds	r3, #40	@ 0x28
 800c4fe:	2100      	movs	r1, #0
 800c500:	4618      	mov	r0, r3
 800c502:	f001 f959 	bl	800d7b8 <RCCEx_PLL3_Config>
 800c506:	4603      	mov	r3, r0
 800c508:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c50c:	e008      	b.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c50e:	2301      	movs	r3, #1
 800c510:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c514:	e004      	b.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c516:	bf00      	nop
 800c518:	e002      	b.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c51a:	bf00      	nop
 800c51c:	e000      	b.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c51e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c520:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c524:	2b00      	cmp	r3, #0
 800c526:	d10b      	bne.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c528:	4b3b      	ldr	r3, [pc, #236]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c52a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c52c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c534:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c538:	4a37      	ldr	r2, [pc, #220]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c53a:	430b      	orrs	r3, r1
 800c53c:	6593      	str	r3, [r2, #88]	@ 0x58
 800c53e:	e003      	b.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c544:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c550:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c554:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c558:	2300      	movs	r3, #0
 800c55a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c55e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c562:	460b      	mov	r3, r1
 800c564:	4313      	orrs	r3, r2
 800c566:	d05d      	beq.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c56c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c570:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c574:	d03b      	beq.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c576:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c57a:	d834      	bhi.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c57c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c580:	d037      	beq.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800c582:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c586:	d82e      	bhi.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c588:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c58c:	d033      	beq.n	800c5f6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800c58e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c592:	d828      	bhi.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c594:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c598:	d01a      	beq.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800c59a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c59e:	d822      	bhi.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d003      	beq.n	800c5ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c5a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c5a8:	d007      	beq.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c5aa:	e01c      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5ac:	4b1a      	ldr	r3, [pc, #104]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b0:	4a19      	ldr	r2, [pc, #100]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c5b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c5b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c5b8:	e01e      	b.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5be:	3308      	adds	r3, #8
 800c5c0:	2100      	movs	r1, #0
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f001 f846 	bl	800d654 <RCCEx_PLL2_Config>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c5ce:	e013      	b.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5d4:	3328      	adds	r3, #40	@ 0x28
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f001 f8ed 	bl	800d7b8 <RCCEx_PLL3_Config>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c5e4:	e008      	b.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c5ec:	e004      	b.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c5ee:	bf00      	nop
 800c5f0:	e002      	b.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c5f2:	bf00      	nop
 800c5f4:	e000      	b.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c5f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d10d      	bne.n	800c61c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c600:	4b05      	ldr	r3, [pc, #20]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c604:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c60c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c610:	4a01      	ldr	r2, [pc, #4]	@ (800c618 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c612:	430b      	orrs	r3, r1
 800c614:	6593      	str	r3, [r2, #88]	@ 0x58
 800c616:	e005      	b.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800c618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c61c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c620:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c630:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c634:	2300      	movs	r3, #0
 800c636:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c63a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c63e:	460b      	mov	r3, r1
 800c640:	4313      	orrs	r3, r2
 800c642:	d03a      	beq.n	800c6ba <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c64a:	2b30      	cmp	r3, #48	@ 0x30
 800c64c:	d01f      	beq.n	800c68e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800c64e:	2b30      	cmp	r3, #48	@ 0x30
 800c650:	d819      	bhi.n	800c686 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c652:	2b20      	cmp	r3, #32
 800c654:	d00c      	beq.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c656:	2b20      	cmp	r3, #32
 800c658:	d815      	bhi.n	800c686 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d019      	beq.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c65e:	2b10      	cmp	r3, #16
 800c660:	d111      	bne.n	800c686 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c662:	4baa      	ldr	r3, [pc, #680]	@ (800c90c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c666:	4aa9      	ldr	r2, [pc, #676]	@ (800c90c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c66c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c66e:	e011      	b.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c674:	3308      	adds	r3, #8
 800c676:	2102      	movs	r1, #2
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 ffeb 	bl	800d654 <RCCEx_PLL2_Config>
 800c67e:	4603      	mov	r3, r0
 800c680:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c684:	e006      	b.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c686:	2301      	movs	r3, #1
 800c688:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c68c:	e002      	b.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c68e:	bf00      	nop
 800c690:	e000      	b.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c692:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c694:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d10a      	bne.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c69c:	4b9b      	ldr	r3, [pc, #620]	@ (800c90c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c69e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6a0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6aa:	4a98      	ldr	r2, [pc, #608]	@ (800c90c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c6ac:	430b      	orrs	r3, r1
 800c6ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c6b0:	e003      	b.n	800c6ba <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c6b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c6c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c6d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	d051      	beq.n	800c77e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c6e4:	d035      	beq.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800c6e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c6ea:	d82e      	bhi.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c6ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c6f0:	d031      	beq.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800c6f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c6f6:	d828      	bhi.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c6f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c6fc:	d01a      	beq.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800c6fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c702:	d822      	bhi.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c704:	2b00      	cmp	r3, #0
 800c706:	d003      	beq.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800c708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c70c:	d007      	beq.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800c70e:	e01c      	b.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c710:	4b7e      	ldr	r3, [pc, #504]	@ (800c90c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c714:	4a7d      	ldr	r2, [pc, #500]	@ (800c90c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c71a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c71c:	e01c      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c722:	3308      	adds	r3, #8
 800c724:	2100      	movs	r1, #0
 800c726:	4618      	mov	r0, r3
 800c728:	f000 ff94 	bl	800d654 <RCCEx_PLL2_Config>
 800c72c:	4603      	mov	r3, r0
 800c72e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c732:	e011      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c738:	3328      	adds	r3, #40	@ 0x28
 800c73a:	2100      	movs	r1, #0
 800c73c:	4618      	mov	r0, r3
 800c73e:	f001 f83b 	bl	800d7b8 <RCCEx_PLL3_Config>
 800c742:	4603      	mov	r3, r0
 800c744:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c748:	e006      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c74a:	2301      	movs	r3, #1
 800c74c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c750:	e002      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c752:	bf00      	nop
 800c754:	e000      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c756:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10a      	bne.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c760:	4b6a      	ldr	r3, [pc, #424]	@ (800c90c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c764:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c76c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c76e:	4a67      	ldr	r2, [pc, #412]	@ (800c90c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c770:	430b      	orrs	r3, r1
 800c772:	6513      	str	r3, [r2, #80]	@ 0x50
 800c774:	e003      	b.n	800c77e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c776:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c77a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c786:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800c78a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c78e:	2300      	movs	r3, #0
 800c790:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c794:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800c798:	460b      	mov	r3, r1
 800c79a:	4313      	orrs	r3, r2
 800c79c:	d053      	beq.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c7a8:	d033      	beq.n	800c812 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800c7aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c7ae:	d82c      	bhi.n	800c80a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c7b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c7b4:	d02f      	beq.n	800c816 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800c7b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c7ba:	d826      	bhi.n	800c80a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c7bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c7c0:	d02b      	beq.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c7c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c7c6:	d820      	bhi.n	800c80a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c7c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c7cc:	d012      	beq.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800c7ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c7d2:	d81a      	bhi.n	800c80a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d022      	beq.n	800c81e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800c7d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7dc:	d115      	bne.n	800c80a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e2:	3308      	adds	r3, #8
 800c7e4:	2101      	movs	r1, #1
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f000 ff34 	bl	800d654 <RCCEx_PLL2_Config>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c7f2:	e015      	b.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7f8:	3328      	adds	r3, #40	@ 0x28
 800c7fa:	2101      	movs	r1, #1
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 ffdb 	bl	800d7b8 <RCCEx_PLL3_Config>
 800c802:	4603      	mov	r3, r0
 800c804:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c808:	e00a      	b.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c80a:	2301      	movs	r3, #1
 800c80c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c810:	e006      	b.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c812:	bf00      	nop
 800c814:	e004      	b.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c816:	bf00      	nop
 800c818:	e002      	b.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c81a:	bf00      	nop
 800c81c:	e000      	b.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c81e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c820:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c824:	2b00      	cmp	r3, #0
 800c826:	d10a      	bne.n	800c83e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c828:	4b38      	ldr	r3, [pc, #224]	@ (800c90c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c82a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c82c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c836:	4a35      	ldr	r2, [pc, #212]	@ (800c90c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c838:	430b      	orrs	r3, r1
 800c83a:	6513      	str	r3, [r2, #80]	@ 0x50
 800c83c:	e003      	b.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c83e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c842:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800c852:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c856:	2300      	movs	r3, #0
 800c858:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c85c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c860:	460b      	mov	r3, r1
 800c862:	4313      	orrs	r3, r2
 800c864:	d058      	beq.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c86a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c86e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c872:	d033      	beq.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c874:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c878:	d82c      	bhi.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c87a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c87e:	d02f      	beq.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c884:	d826      	bhi.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c886:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c88a:	d02b      	beq.n	800c8e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c88c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c890:	d820      	bhi.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c896:	d012      	beq.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c89c:	d81a      	bhi.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d022      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c8a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8a6:	d115      	bne.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8ac:	3308      	adds	r3, #8
 800c8ae:	2101      	movs	r1, #1
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f000 fecf 	bl	800d654 <RCCEx_PLL2_Config>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c8bc:	e015      	b.n	800c8ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8c2:	3328      	adds	r3, #40	@ 0x28
 800c8c4:	2101      	movs	r1, #1
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f000 ff76 	bl	800d7b8 <RCCEx_PLL3_Config>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c8d2:	e00a      	b.n	800c8ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c8da:	e006      	b.n	800c8ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c8dc:	bf00      	nop
 800c8de:	e004      	b.n	800c8ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c8e0:	bf00      	nop
 800c8e2:	e002      	b.n	800c8ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c8e4:	bf00      	nop
 800c8e6:	e000      	b.n	800c8ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c8e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d10e      	bne.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c8f2:	4b06      	ldr	r3, [pc, #24]	@ (800c90c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c8f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c902:	4a02      	ldr	r2, [pc, #8]	@ (800c90c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c904:	430b      	orrs	r3, r1
 800c906:	6593      	str	r3, [r2, #88]	@ 0x58
 800c908:	e006      	b.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c90a:	bf00      	nop
 800c90c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c910:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c914:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c920:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c924:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c928:	2300      	movs	r3, #0
 800c92a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c92e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c932:	460b      	mov	r3, r1
 800c934:	4313      	orrs	r3, r2
 800c936:	d037      	beq.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c93c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c93e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c942:	d00e      	beq.n	800c962 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c948:	d816      	bhi.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d018      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c94e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c952:	d111      	bne.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c954:	4bc4      	ldr	r3, [pc, #784]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c958:	4ac3      	ldr	r2, [pc, #780]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c95a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c95e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c960:	e00f      	b.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c966:	3308      	adds	r3, #8
 800c968:	2101      	movs	r1, #1
 800c96a:	4618      	mov	r0, r3
 800c96c:	f000 fe72 	bl	800d654 <RCCEx_PLL2_Config>
 800c970:	4603      	mov	r3, r0
 800c972:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c976:	e004      	b.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c978:	2301      	movs	r3, #1
 800c97a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c97e:	e000      	b.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c980:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c982:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c986:	2b00      	cmp	r3, #0
 800c988:	d10a      	bne.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c98a:	4bb7      	ldr	r3, [pc, #732]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c98c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c98e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c996:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c998:	4ab3      	ldr	r2, [pc, #716]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c99a:	430b      	orrs	r3, r1
 800c99c:	6513      	str	r3, [r2, #80]	@ 0x50
 800c99e:	e003      	b.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c9b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c9be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	d039      	beq.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c9ce:	2b03      	cmp	r3, #3
 800c9d0:	d81c      	bhi.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c9d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d8:	0800ca15 	.word	0x0800ca15
 800c9dc:	0800c9e9 	.word	0x0800c9e9
 800c9e0:	0800c9f7 	.word	0x0800c9f7
 800c9e4:	0800ca15 	.word	0x0800ca15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9e8:	4b9f      	ldr	r3, [pc, #636]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ec:	4a9e      	ldr	r2, [pc, #632]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c9f4:	e00f      	b.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9fa:	3308      	adds	r3, #8
 800c9fc:	2102      	movs	r1, #2
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f000 fe28 	bl	800d654 <RCCEx_PLL2_Config>
 800ca04:	4603      	mov	r3, r0
 800ca06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ca0a:	e004      	b.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ca12:	e000      	b.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ca14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d10a      	bne.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ca1e:	4b92      	ldr	r3, [pc, #584]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca22:	f023 0103 	bic.w	r1, r3, #3
 800ca26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca2c:	4a8e      	ldr	r2, [pc, #568]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca2e:	430b      	orrs	r3, r1
 800ca30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ca32:	e003      	b.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ca3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca44:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ca48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ca52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ca56:	460b      	mov	r3, r1
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	f000 8099 	beq.w	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ca5e:	4b83      	ldr	r3, [pc, #524]	@ (800cc6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a82      	ldr	r2, [pc, #520]	@ (800cc6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ca64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ca68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ca6a:	f7f8 ffcb 	bl	8005a04 <HAL_GetTick>
 800ca6e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ca72:	e00b      	b.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca74:	f7f8 ffc6 	bl	8005a04 <HAL_GetTick>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ca7e:	1ad3      	subs	r3, r2, r3
 800ca80:	2b64      	cmp	r3, #100	@ 0x64
 800ca82:	d903      	bls.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ca84:	2303      	movs	r3, #3
 800ca86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ca8a:	e005      	b.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ca8c:	4b77      	ldr	r3, [pc, #476]	@ (800cc6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d0ed      	beq.n	800ca74 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ca98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d173      	bne.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800caa0:	4b71      	ldr	r3, [pc, #452]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800caa2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800caa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800caac:	4053      	eors	r3, r2
 800caae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d015      	beq.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cab6:	4b6c      	ldr	r3, [pc, #432]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800caba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cabe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cac2:	4b69      	ldr	r3, [pc, #420]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cac6:	4a68      	ldr	r2, [pc, #416]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cacc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cace:	4b66      	ldr	r3, [pc, #408]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cad2:	4a65      	ldr	r2, [pc, #404]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cad8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cada:	4a63      	ldr	r2, [pc, #396]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cadc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cae0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cae6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800caea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800caee:	d118      	bne.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800caf0:	f7f8 ff88 	bl	8005a04 <HAL_GetTick>
 800caf4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800caf8:	e00d      	b.n	800cb16 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cafa:	f7f8 ff83 	bl	8005a04 <HAL_GetTick>
 800cafe:	4602      	mov	r2, r0
 800cb00:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800cb04:	1ad2      	subs	r2, r2, r3
 800cb06:	f241 3388 	movw	r3, #5000	@ 0x1388
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d903      	bls.n	800cb16 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800cb0e:	2303      	movs	r3, #3
 800cb10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800cb14:	e005      	b.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cb16:	4b54      	ldr	r3, [pc, #336]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cb18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb1a:	f003 0302 	and.w	r3, r3, #2
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d0eb      	beq.n	800cafa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800cb22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d129      	bne.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cb32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cb36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb3a:	d10e      	bne.n	800cb5a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800cb3c:	4b4a      	ldr	r3, [pc, #296]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cb3e:	691b      	ldr	r3, [r3, #16]
 800cb40:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800cb44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cb4c:	091a      	lsrs	r2, r3, #4
 800cb4e:	4b48      	ldr	r3, [pc, #288]	@ (800cc70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800cb50:	4013      	ands	r3, r2
 800cb52:	4a45      	ldr	r2, [pc, #276]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cb54:	430b      	orrs	r3, r1
 800cb56:	6113      	str	r3, [r2, #16]
 800cb58:	e005      	b.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800cb5a:	4b43      	ldr	r3, [pc, #268]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cb5c:	691b      	ldr	r3, [r3, #16]
 800cb5e:	4a42      	ldr	r2, [pc, #264]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cb60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800cb64:	6113      	str	r3, [r2, #16]
 800cb66:	4b40      	ldr	r3, [pc, #256]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cb68:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800cb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cb72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb76:	4a3c      	ldr	r2, [pc, #240]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cb78:	430b      	orrs	r3, r1
 800cb7a:	6713      	str	r3, [r2, #112]	@ 0x70
 800cb7c:	e008      	b.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cb7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800cb86:	e003      	b.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cb90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb98:	f002 0301 	and.w	r3, r2, #1
 800cb9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cba0:	2300      	movs	r3, #0
 800cba2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cba6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800cbaa:	460b      	mov	r3, r1
 800cbac:	4313      	orrs	r3, r2
 800cbae:	f000 808f 	beq.w	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800cbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cbb8:	2b28      	cmp	r3, #40	@ 0x28
 800cbba:	d871      	bhi.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800cbbc:	a201      	add	r2, pc, #4	@ (adr r2, 800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800cbbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc2:	bf00      	nop
 800cbc4:	0800cca9 	.word	0x0800cca9
 800cbc8:	0800cca1 	.word	0x0800cca1
 800cbcc:	0800cca1 	.word	0x0800cca1
 800cbd0:	0800cca1 	.word	0x0800cca1
 800cbd4:	0800cca1 	.word	0x0800cca1
 800cbd8:	0800cca1 	.word	0x0800cca1
 800cbdc:	0800cca1 	.word	0x0800cca1
 800cbe0:	0800cca1 	.word	0x0800cca1
 800cbe4:	0800cc75 	.word	0x0800cc75
 800cbe8:	0800cca1 	.word	0x0800cca1
 800cbec:	0800cca1 	.word	0x0800cca1
 800cbf0:	0800cca1 	.word	0x0800cca1
 800cbf4:	0800cca1 	.word	0x0800cca1
 800cbf8:	0800cca1 	.word	0x0800cca1
 800cbfc:	0800cca1 	.word	0x0800cca1
 800cc00:	0800cca1 	.word	0x0800cca1
 800cc04:	0800cc8b 	.word	0x0800cc8b
 800cc08:	0800cca1 	.word	0x0800cca1
 800cc0c:	0800cca1 	.word	0x0800cca1
 800cc10:	0800cca1 	.word	0x0800cca1
 800cc14:	0800cca1 	.word	0x0800cca1
 800cc18:	0800cca1 	.word	0x0800cca1
 800cc1c:	0800cca1 	.word	0x0800cca1
 800cc20:	0800cca1 	.word	0x0800cca1
 800cc24:	0800cca9 	.word	0x0800cca9
 800cc28:	0800cca1 	.word	0x0800cca1
 800cc2c:	0800cca1 	.word	0x0800cca1
 800cc30:	0800cca1 	.word	0x0800cca1
 800cc34:	0800cca1 	.word	0x0800cca1
 800cc38:	0800cca1 	.word	0x0800cca1
 800cc3c:	0800cca1 	.word	0x0800cca1
 800cc40:	0800cca1 	.word	0x0800cca1
 800cc44:	0800cca9 	.word	0x0800cca9
 800cc48:	0800cca1 	.word	0x0800cca1
 800cc4c:	0800cca1 	.word	0x0800cca1
 800cc50:	0800cca1 	.word	0x0800cca1
 800cc54:	0800cca1 	.word	0x0800cca1
 800cc58:	0800cca1 	.word	0x0800cca1
 800cc5c:	0800cca1 	.word	0x0800cca1
 800cc60:	0800cca1 	.word	0x0800cca1
 800cc64:	0800cca9 	.word	0x0800cca9
 800cc68:	58024400 	.word	0x58024400
 800cc6c:	58024800 	.word	0x58024800
 800cc70:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc78:	3308      	adds	r3, #8
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f000 fce9 	bl	800d654 <RCCEx_PLL2_Config>
 800cc82:	4603      	mov	r3, r0
 800cc84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cc88:	e00f      	b.n	800ccaa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc8e:	3328      	adds	r3, #40	@ 0x28
 800cc90:	2101      	movs	r1, #1
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 fd90 	bl	800d7b8 <RCCEx_PLL3_Config>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cc9e:	e004      	b.n	800ccaa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cca0:	2301      	movs	r3, #1
 800cca2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cca6:	e000      	b.n	800ccaa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800cca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d10a      	bne.n	800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ccb2:	4bbf      	ldr	r3, [pc, #764]	@ (800cfb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ccb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccb6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ccba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ccc0:	4abb      	ldr	r2, [pc, #748]	@ (800cfb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ccc2:	430b      	orrs	r3, r1
 800ccc4:	6553      	str	r3, [r2, #84]	@ 0x54
 800ccc6:	e003      	b.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cccc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ccd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd8:	f002 0302 	and.w	r3, r2, #2
 800ccdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cce0:	2300      	movs	r3, #0
 800cce2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cce6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ccea:	460b      	mov	r3, r1
 800ccec:	4313      	orrs	r3, r2
 800ccee:	d041      	beq.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ccf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccf6:	2b05      	cmp	r3, #5
 800ccf8:	d824      	bhi.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800ccfa:	a201      	add	r2, pc, #4	@ (adr r2, 800cd00 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800ccfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd00:	0800cd4d 	.word	0x0800cd4d
 800cd04:	0800cd19 	.word	0x0800cd19
 800cd08:	0800cd2f 	.word	0x0800cd2f
 800cd0c:	0800cd4d 	.word	0x0800cd4d
 800cd10:	0800cd4d 	.word	0x0800cd4d
 800cd14:	0800cd4d 	.word	0x0800cd4d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd1c:	3308      	adds	r3, #8
 800cd1e:	2101      	movs	r1, #1
 800cd20:	4618      	mov	r0, r3
 800cd22:	f000 fc97 	bl	800d654 <RCCEx_PLL2_Config>
 800cd26:	4603      	mov	r3, r0
 800cd28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cd2c:	e00f      	b.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd32:	3328      	adds	r3, #40	@ 0x28
 800cd34:	2101      	movs	r1, #1
 800cd36:	4618      	mov	r0, r3
 800cd38:	f000 fd3e 	bl	800d7b8 <RCCEx_PLL3_Config>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cd42:	e004      	b.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cd4a:	e000      	b.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800cd4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10a      	bne.n	800cd6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cd56:	4b96      	ldr	r3, [pc, #600]	@ (800cfb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cd58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd5a:	f023 0107 	bic.w	r1, r3, #7
 800cd5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd64:	4a92      	ldr	r2, [pc, #584]	@ (800cfb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cd66:	430b      	orrs	r3, r1
 800cd68:	6553      	str	r3, [r2, #84]	@ 0x54
 800cd6a:	e003      	b.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cd74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	f002 0304 	and.w	r3, r2, #4
 800cd80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cd84:	2300      	movs	r3, #0
 800cd86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cd8a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cd8e:	460b      	mov	r3, r1
 800cd90:	4313      	orrs	r3, r2
 800cd92:	d044      	beq.n	800ce1e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800cd94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd9c:	2b05      	cmp	r3, #5
 800cd9e:	d825      	bhi.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800cda0:	a201      	add	r2, pc, #4	@ (adr r2, 800cda8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800cda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda6:	bf00      	nop
 800cda8:	0800cdf5 	.word	0x0800cdf5
 800cdac:	0800cdc1 	.word	0x0800cdc1
 800cdb0:	0800cdd7 	.word	0x0800cdd7
 800cdb4:	0800cdf5 	.word	0x0800cdf5
 800cdb8:	0800cdf5 	.word	0x0800cdf5
 800cdbc:	0800cdf5 	.word	0x0800cdf5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cdc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdc4:	3308      	adds	r3, #8
 800cdc6:	2101      	movs	r1, #1
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f000 fc43 	bl	800d654 <RCCEx_PLL2_Config>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cdd4:	e00f      	b.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cdd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdda:	3328      	adds	r3, #40	@ 0x28
 800cddc:	2101      	movs	r1, #1
 800cdde:	4618      	mov	r0, r3
 800cde0:	f000 fcea 	bl	800d7b8 <RCCEx_PLL3_Config>
 800cde4:	4603      	mov	r3, r0
 800cde6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cdea:	e004      	b.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cdec:	2301      	movs	r3, #1
 800cdee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cdf2:	e000      	b.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800cdf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdf6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d10b      	bne.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cdfe:	4b6c      	ldr	r3, [pc, #432]	@ (800cfb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ce00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce02:	f023 0107 	bic.w	r1, r3, #7
 800ce06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce0e:	4a68      	ldr	r2, [pc, #416]	@ (800cfb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ce10:	430b      	orrs	r3, r1
 800ce12:	6593      	str	r3, [r2, #88]	@ 0x58
 800ce14:	e003      	b.n	800ce1e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ce1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce26:	f002 0320 	and.w	r3, r2, #32
 800ce2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ce2e:	2300      	movs	r3, #0
 800ce30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ce34:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ce38:	460b      	mov	r3, r1
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	d055      	beq.n	800ceea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ce3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ce46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ce4a:	d033      	beq.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800ce4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ce50:	d82c      	bhi.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ce52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce56:	d02f      	beq.n	800ceb8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800ce58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce5c:	d826      	bhi.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ce5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ce62:	d02b      	beq.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800ce64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ce68:	d820      	bhi.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ce6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce6e:	d012      	beq.n	800ce96 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800ce70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce74:	d81a      	bhi.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d022      	beq.n	800cec0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800ce7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce7e:	d115      	bne.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce84:	3308      	adds	r3, #8
 800ce86:	2100      	movs	r1, #0
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 fbe3 	bl	800d654 <RCCEx_PLL2_Config>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ce94:	e015      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce9a:	3328      	adds	r3, #40	@ 0x28
 800ce9c:	2102      	movs	r1, #2
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f000 fc8a 	bl	800d7b8 <RCCEx_PLL3_Config>
 800cea4:	4603      	mov	r3, r0
 800cea6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ceaa:	e00a      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ceac:	2301      	movs	r3, #1
 800ceae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ceb2:	e006      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ceb4:	bf00      	nop
 800ceb6:	e004      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ceb8:	bf00      	nop
 800ceba:	e002      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800cebc:	bf00      	nop
 800cebe:	e000      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800cec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cec2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d10b      	bne.n	800cee2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ceca:	4b39      	ldr	r3, [pc, #228]	@ (800cfb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cece:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ced2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ced6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ceda:	4a35      	ldr	r2, [pc, #212]	@ (800cfb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cedc:	430b      	orrs	r3, r1
 800cede:	6553      	str	r3, [r2, #84]	@ 0x54
 800cee0:	e003      	b.n	800ceea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cee2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cee6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ceea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800cef6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cefa:	2300      	movs	r3, #0
 800cefc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cf00:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800cf04:	460b      	mov	r3, r1
 800cf06:	4313      	orrs	r3, r2
 800cf08:	d058      	beq.n	800cfbc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800cf0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cf12:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800cf16:	d033      	beq.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800cf18:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800cf1c:	d82c      	bhi.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cf1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf22:	d02f      	beq.n	800cf84 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800cf24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf28:	d826      	bhi.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cf2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cf2e:	d02b      	beq.n	800cf88 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800cf30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cf34:	d820      	bhi.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cf36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf3a:	d012      	beq.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800cf3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf40:	d81a      	bhi.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d022      	beq.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800cf46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf4a:	d115      	bne.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf50:	3308      	adds	r3, #8
 800cf52:	2100      	movs	r1, #0
 800cf54:	4618      	mov	r0, r3
 800cf56:	f000 fb7d 	bl	800d654 <RCCEx_PLL2_Config>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cf60:	e015      	b.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cf62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf66:	3328      	adds	r3, #40	@ 0x28
 800cf68:	2102      	movs	r1, #2
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f000 fc24 	bl	800d7b8 <RCCEx_PLL3_Config>
 800cf70:	4603      	mov	r3, r0
 800cf72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cf76:	e00a      	b.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cf7e:	e006      	b.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cf80:	bf00      	nop
 800cf82:	e004      	b.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cf84:	bf00      	nop
 800cf86:	e002      	b.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cf88:	bf00      	nop
 800cf8a:	e000      	b.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cf8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d10e      	bne.n	800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cf96:	4b06      	ldr	r3, [pc, #24]	@ (800cfb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cf98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf9a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800cf9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cfa6:	4a02      	ldr	r2, [pc, #8]	@ (800cfb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cfa8:	430b      	orrs	r3, r1
 800cfaa:	6593      	str	r3, [r2, #88]	@ 0x58
 800cfac:	e006      	b.n	800cfbc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800cfae:	bf00      	nop
 800cfb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cfb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cfbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800cfc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cfcc:	2300      	movs	r3, #0
 800cfce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cfd2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	d055      	beq.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800cfdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cfe4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800cfe8:	d033      	beq.n	800d052 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800cfea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800cfee:	d82c      	bhi.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cff4:	d02f      	beq.n	800d056 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800cff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cffa:	d826      	bhi.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cffc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d000:	d02b      	beq.n	800d05a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800d002:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d006:	d820      	bhi.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d008:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d00c:	d012      	beq.n	800d034 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800d00e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d012:	d81a      	bhi.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d014:	2b00      	cmp	r3, #0
 800d016:	d022      	beq.n	800d05e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800d018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d01c:	d115      	bne.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d022:	3308      	adds	r3, #8
 800d024:	2100      	movs	r1, #0
 800d026:	4618      	mov	r0, r3
 800d028:	f000 fb14 	bl	800d654 <RCCEx_PLL2_Config>
 800d02c:	4603      	mov	r3, r0
 800d02e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d032:	e015      	b.n	800d060 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d038:	3328      	adds	r3, #40	@ 0x28
 800d03a:	2102      	movs	r1, #2
 800d03c:	4618      	mov	r0, r3
 800d03e:	f000 fbbb 	bl	800d7b8 <RCCEx_PLL3_Config>
 800d042:	4603      	mov	r3, r0
 800d044:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d048:	e00a      	b.n	800d060 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d04a:	2301      	movs	r3, #1
 800d04c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d050:	e006      	b.n	800d060 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d052:	bf00      	nop
 800d054:	e004      	b.n	800d060 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d056:	bf00      	nop
 800d058:	e002      	b.n	800d060 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d05a:	bf00      	nop
 800d05c:	e000      	b.n	800d060 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d05e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d060:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d064:	2b00      	cmp	r3, #0
 800d066:	d10b      	bne.n	800d080 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d068:	4ba0      	ldr	r3, [pc, #640]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d06a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d06c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d074:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d078:	4a9c      	ldr	r2, [pc, #624]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d07a:	430b      	orrs	r3, r1
 800d07c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d07e:	e003      	b.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d080:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d084:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800d088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d090:	f002 0308 	and.w	r3, r2, #8
 800d094:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d098:	2300      	movs	r3, #0
 800d09a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d09e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	d01e      	beq.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800d0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0b4:	d10c      	bne.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0ba:	3328      	adds	r3, #40	@ 0x28
 800d0bc:	2102      	movs	r1, #2
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f000 fb7a 	bl	800d7b8 <RCCEx_PLL3_Config>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d002      	beq.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800d0d0:	4b86      	ldr	r3, [pc, #536]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d0d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0e0:	4a82      	ldr	r2, [pc, #520]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d0e2:	430b      	orrs	r3, r1
 800d0e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ee:	f002 0310 	and.w	r3, r2, #16
 800d0f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d0fc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d100:	460b      	mov	r3, r1
 800d102:	4313      	orrs	r3, r2
 800d104:	d01e      	beq.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d10a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d10e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d112:	d10c      	bne.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d118:	3328      	adds	r3, #40	@ 0x28
 800d11a:	2102      	movs	r1, #2
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 fb4b 	bl	800d7b8 <RCCEx_PLL3_Config>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d002      	beq.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d12e:	4b6f      	ldr	r3, [pc, #444]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d132:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d13a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d13e:	4a6b      	ldr	r2, [pc, #428]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d140:	430b      	orrs	r3, r1
 800d142:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d150:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d152:	2300      	movs	r3, #0
 800d154:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d156:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d15a:	460b      	mov	r3, r1
 800d15c:	4313      	orrs	r3, r2
 800d15e:	d03e      	beq.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d164:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d168:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d16c:	d022      	beq.n	800d1b4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800d16e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d172:	d81b      	bhi.n	800d1ac <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800d174:	2b00      	cmp	r3, #0
 800d176:	d003      	beq.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800d178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d17c:	d00b      	beq.n	800d196 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800d17e:	e015      	b.n	800d1ac <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d184:	3308      	adds	r3, #8
 800d186:	2100      	movs	r1, #0
 800d188:	4618      	mov	r0, r3
 800d18a:	f000 fa63 	bl	800d654 <RCCEx_PLL2_Config>
 800d18e:	4603      	mov	r3, r0
 800d190:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d194:	e00f      	b.n	800d1b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d19a:	3328      	adds	r3, #40	@ 0x28
 800d19c:	2102      	movs	r1, #2
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f000 fb0a 	bl	800d7b8 <RCCEx_PLL3_Config>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d1aa:	e004      	b.n	800d1b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d1b2:	e000      	b.n	800d1b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800d1b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d10b      	bne.n	800d1d6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d1be:	4b4b      	ldr	r3, [pc, #300]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d1c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d1ce:	4a47      	ldr	r2, [pc, #284]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d1d0:	430b      	orrs	r3, r1
 800d1d2:	6593      	str	r3, [r2, #88]	@ 0x58
 800d1d4:	e003      	b.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d1da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d1ea:	673b      	str	r3, [r7, #112]	@ 0x70
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	677b      	str	r3, [r7, #116]	@ 0x74
 800d1f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	d03b      	beq.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d202:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d206:	d01f      	beq.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800d208:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d20c:	d818      	bhi.n	800d240 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800d20e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d212:	d003      	beq.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800d214:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d218:	d007      	beq.n	800d22a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800d21a:	e011      	b.n	800d240 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d21c:	4b33      	ldr	r3, [pc, #204]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d220:	4a32      	ldr	r2, [pc, #200]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d222:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d226:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d228:	e00f      	b.n	800d24a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d22a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d22e:	3328      	adds	r3, #40	@ 0x28
 800d230:	2101      	movs	r1, #1
 800d232:	4618      	mov	r0, r3
 800d234:	f000 fac0 	bl	800d7b8 <RCCEx_PLL3_Config>
 800d238:	4603      	mov	r3, r0
 800d23a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800d23e:	e004      	b.n	800d24a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d240:	2301      	movs	r3, #1
 800d242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d246:	e000      	b.n	800d24a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800d248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d24a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d10b      	bne.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d252:	4b26      	ldr	r3, [pc, #152]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d256:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d25e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d262:	4a22      	ldr	r2, [pc, #136]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d264:	430b      	orrs	r3, r1
 800d266:	6553      	str	r3, [r2, #84]	@ 0x54
 800d268:	e003      	b.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d26a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d26e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d27e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d280:	2300      	movs	r3, #0
 800d282:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d284:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d288:	460b      	mov	r3, r1
 800d28a:	4313      	orrs	r3, r2
 800d28c:	d034      	beq.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d294:	2b00      	cmp	r3, #0
 800d296:	d003      	beq.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800d298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d29c:	d007      	beq.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800d29e:	e011      	b.n	800d2c4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2a0:	4b12      	ldr	r3, [pc, #72]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2a4:	4a11      	ldr	r2, [pc, #68]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d2a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d2aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d2ac:	e00e      	b.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d2ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2b2:	3308      	adds	r3, #8
 800d2b4:	2102      	movs	r1, #2
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 f9cc 	bl	800d654 <RCCEx_PLL2_Config>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d2c2:	e003      	b.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d2ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d10d      	bne.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d2d4:	4b05      	ldr	r3, [pc, #20]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d2d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2e2:	4a02      	ldr	r2, [pc, #8]	@ (800d2ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d2e4:	430b      	orrs	r3, r1
 800d2e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d2e8:	e006      	b.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800d2ea:	bf00      	nop
 800d2ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d300:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d304:	663b      	str	r3, [r7, #96]	@ 0x60
 800d306:	2300      	movs	r3, #0
 800d308:	667b      	str	r3, [r7, #100]	@ 0x64
 800d30a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d30e:	460b      	mov	r3, r1
 800d310:	4313      	orrs	r3, r2
 800d312:	d00c      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d318:	3328      	adds	r3, #40	@ 0x28
 800d31a:	2102      	movs	r1, #2
 800d31c:	4618      	mov	r0, r3
 800d31e:	f000 fa4b 	bl	800d7b8 <RCCEx_PLL3_Config>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d002      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800d328:	2301      	movs	r3, #1
 800d32a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d336:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d33a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d33c:	2300      	movs	r3, #0
 800d33e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d340:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d344:	460b      	mov	r3, r1
 800d346:	4313      	orrs	r3, r2
 800d348:	d036      	beq.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d34e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d350:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d354:	d018      	beq.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800d356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d35a:	d811      	bhi.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d35c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d360:	d014      	beq.n	800d38c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800d362:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d366:	d80b      	bhi.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d011      	beq.n	800d390 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800d36c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d370:	d106      	bne.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d372:	4bb7      	ldr	r3, [pc, #732]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d376:	4ab6      	ldr	r2, [pc, #728]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d37c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d37e:	e008      	b.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d380:	2301      	movs	r3, #1
 800d382:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d386:	e004      	b.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d388:	bf00      	nop
 800d38a:	e002      	b.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d38c:	bf00      	nop
 800d38e:	e000      	b.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d390:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d392:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d396:	2b00      	cmp	r3, #0
 800d398:	d10a      	bne.n	800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d39a:	4bad      	ldr	r3, [pc, #692]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d39c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d39e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d3a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d3a8:	4aa9      	ldr	r2, [pc, #676]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d3aa:	430b      	orrs	r3, r1
 800d3ac:	6553      	str	r3, [r2, #84]	@ 0x54
 800d3ae:	e003      	b.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d3c4:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	657b      	str	r3, [r7, #84]	@ 0x54
 800d3ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d3ce:	460b      	mov	r3, r1
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	d009      	beq.n	800d3e8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d3d4:	4b9e      	ldr	r3, [pc, #632]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d3d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3e2:	4a9b      	ldr	r2, [pc, #620]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d3e4:	430b      	orrs	r3, r1
 800d3e6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800d3f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3fa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800d3fe:	460b      	mov	r3, r1
 800d400:	4313      	orrs	r3, r2
 800d402:	d009      	beq.n	800d418 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d404:	4b92      	ldr	r3, [pc, #584]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d408:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800d40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d410:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d412:	4a8f      	ldr	r2, [pc, #572]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d414:	430b      	orrs	r3, r1
 800d416:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d420:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d424:	643b      	str	r3, [r7, #64]	@ 0x40
 800d426:	2300      	movs	r3, #0
 800d428:	647b      	str	r3, [r7, #68]	@ 0x44
 800d42a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d42e:	460b      	mov	r3, r1
 800d430:	4313      	orrs	r3, r2
 800d432:	d00e      	beq.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d434:	4b86      	ldr	r3, [pc, #536]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d436:	691b      	ldr	r3, [r3, #16]
 800d438:	4a85      	ldr	r2, [pc, #532]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d43a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d43e:	6113      	str	r3, [r2, #16]
 800d440:	4b83      	ldr	r3, [pc, #524]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d442:	6919      	ldr	r1, [r3, #16]
 800d444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d448:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d44c:	4a80      	ldr	r2, [pc, #512]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d44e:	430b      	orrs	r3, r1
 800d450:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d45e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d460:	2300      	movs	r3, #0
 800d462:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d464:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d468:	460b      	mov	r3, r1
 800d46a:	4313      	orrs	r3, r2
 800d46c:	d009      	beq.n	800d482 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d46e:	4b78      	ldr	r3, [pc, #480]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d472:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d47a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d47c:	4a74      	ldr	r2, [pc, #464]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d47e:	430b      	orrs	r3, r1
 800d480:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d48e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d490:	2300      	movs	r3, #0
 800d492:	637b      	str	r3, [r7, #52]	@ 0x34
 800d494:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d498:	460b      	mov	r3, r1
 800d49a:	4313      	orrs	r3, r2
 800d49c:	d00a      	beq.n	800d4b4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d49e:	4b6c      	ldr	r3, [pc, #432]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d4a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4a2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4ae:	4a68      	ldr	r2, [pc, #416]	@ (800d650 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d4b0:	430b      	orrs	r3, r1
 800d4b2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d4b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4bc:	2100      	movs	r1, #0
 800d4be:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d4c0:	f003 0301 	and.w	r3, r3, #1
 800d4c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	d011      	beq.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4d4:	3308      	adds	r3, #8
 800d4d6:	2100      	movs	r1, #0
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f000 f8bb 	bl	800d654 <RCCEx_PLL2_Config>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d4e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d003      	beq.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	6239      	str	r1, [r7, #32]
 800d500:	f003 0302 	and.w	r3, r3, #2
 800d504:	627b      	str	r3, [r7, #36]	@ 0x24
 800d506:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d50a:	460b      	mov	r3, r1
 800d50c:	4313      	orrs	r3, r2
 800d50e:	d011      	beq.n	800d534 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d514:	3308      	adds	r3, #8
 800d516:	2101      	movs	r1, #1
 800d518:	4618      	mov	r0, r3
 800d51a:	f000 f89b 	bl	800d654 <RCCEx_PLL2_Config>
 800d51e:	4603      	mov	r3, r0
 800d520:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d003      	beq.n	800d534 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d52c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d530:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53c:	2100      	movs	r1, #0
 800d53e:	61b9      	str	r1, [r7, #24]
 800d540:	f003 0304 	and.w	r3, r3, #4
 800d544:	61fb      	str	r3, [r7, #28]
 800d546:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d54a:	460b      	mov	r3, r1
 800d54c:	4313      	orrs	r3, r2
 800d54e:	d011      	beq.n	800d574 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d554:	3308      	adds	r3, #8
 800d556:	2102      	movs	r1, #2
 800d558:	4618      	mov	r0, r3
 800d55a:	f000 f87b 	bl	800d654 <RCCEx_PLL2_Config>
 800d55e:	4603      	mov	r3, r0
 800d560:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d564:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d003      	beq.n	800d574 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d56c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d570:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57c:	2100      	movs	r1, #0
 800d57e:	6139      	str	r1, [r7, #16]
 800d580:	f003 0308 	and.w	r3, r3, #8
 800d584:	617b      	str	r3, [r7, #20]
 800d586:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d58a:	460b      	mov	r3, r1
 800d58c:	4313      	orrs	r3, r2
 800d58e:	d011      	beq.n	800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d594:	3328      	adds	r3, #40	@ 0x28
 800d596:	2100      	movs	r1, #0
 800d598:	4618      	mov	r0, r3
 800d59a:	f000 f90d 	bl	800d7b8 <RCCEx_PLL3_Config>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800d5a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d003      	beq.n	800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5bc:	2100      	movs	r1, #0
 800d5be:	60b9      	str	r1, [r7, #8]
 800d5c0:	f003 0310 	and.w	r3, r3, #16
 800d5c4:	60fb      	str	r3, [r7, #12]
 800d5c6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	d011      	beq.n	800d5f4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5d4:	3328      	adds	r3, #40	@ 0x28
 800d5d6:	2101      	movs	r1, #1
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f000 f8ed 	bl	800d7b8 <RCCEx_PLL3_Config>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d5e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d003      	beq.n	800d5f4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	6039      	str	r1, [r7, #0]
 800d600:	f003 0320 	and.w	r3, r3, #32
 800d604:	607b      	str	r3, [r7, #4]
 800d606:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d60a:	460b      	mov	r3, r1
 800d60c:	4313      	orrs	r3, r2
 800d60e:	d011      	beq.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d614:	3328      	adds	r3, #40	@ 0x28
 800d616:	2102      	movs	r1, #2
 800d618:	4618      	mov	r0, r3
 800d61a:	f000 f8cd 	bl	800d7b8 <RCCEx_PLL3_Config>
 800d61e:	4603      	mov	r3, r0
 800d620:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d624:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d003      	beq.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d62c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d630:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800d634:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d101      	bne.n	800d640 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800d63c:	2300      	movs	r3, #0
 800d63e:	e000      	b.n	800d642 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800d640:	2301      	movs	r3, #1
}
 800d642:	4618      	mov	r0, r3
 800d644:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800d648:	46bd      	mov	sp, r7
 800d64a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d64e:	bf00      	nop
 800d650:	58024400 	.word	0x58024400

0800d654 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d65e:	2300      	movs	r3, #0
 800d660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d662:	4b53      	ldr	r3, [pc, #332]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d666:	f003 0303 	and.w	r3, r3, #3
 800d66a:	2b03      	cmp	r3, #3
 800d66c:	d101      	bne.n	800d672 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d66e:	2301      	movs	r3, #1
 800d670:	e099      	b.n	800d7a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d672:	4b4f      	ldr	r3, [pc, #316]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a4e      	ldr	r2, [pc, #312]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d678:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d67c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d67e:	f7f8 f9c1 	bl	8005a04 <HAL_GetTick>
 800d682:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d684:	e008      	b.n	800d698 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d686:	f7f8 f9bd 	bl	8005a04 <HAL_GetTick>
 800d68a:	4602      	mov	r2, r0
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	1ad3      	subs	r3, r2, r3
 800d690:	2b02      	cmp	r3, #2
 800d692:	d901      	bls.n	800d698 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d694:	2303      	movs	r3, #3
 800d696:	e086      	b.n	800d7a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d698:	4b45      	ldr	r3, [pc, #276]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1f0      	bne.n	800d686 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d6a4:	4b42      	ldr	r3, [pc, #264]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d6a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	031b      	lsls	r3, r3, #12
 800d6b2:	493f      	ldr	r1, [pc, #252]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	628b      	str	r3, [r1, #40]	@ 0x28
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	3b01      	subs	r3, #1
 800d6be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	025b      	lsls	r3, r3, #9
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	431a      	orrs	r2, r3
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	3b01      	subs	r3, #1
 800d6d4:	041b      	lsls	r3, r3, #16
 800d6d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d6da:	431a      	orrs	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	691b      	ldr	r3, [r3, #16]
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	061b      	lsls	r3, r3, #24
 800d6e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d6e8:	4931      	ldr	r1, [pc, #196]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d6ee:	4b30      	ldr	r3, [pc, #192]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	695b      	ldr	r3, [r3, #20]
 800d6fa:	492d      	ldr	r1, [pc, #180]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d6fc:	4313      	orrs	r3, r2
 800d6fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d700:	4b2b      	ldr	r3, [pc, #172]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d704:	f023 0220 	bic.w	r2, r3, #32
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	699b      	ldr	r3, [r3, #24]
 800d70c:	4928      	ldr	r1, [pc, #160]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d70e:	4313      	orrs	r3, r2
 800d710:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d712:	4b27      	ldr	r3, [pc, #156]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d716:	4a26      	ldr	r2, [pc, #152]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d718:	f023 0310 	bic.w	r3, r3, #16
 800d71c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d71e:	4b24      	ldr	r3, [pc, #144]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d720:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d722:	4b24      	ldr	r3, [pc, #144]	@ (800d7b4 <RCCEx_PLL2_Config+0x160>)
 800d724:	4013      	ands	r3, r2
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	69d2      	ldr	r2, [r2, #28]
 800d72a:	00d2      	lsls	r2, r2, #3
 800d72c:	4920      	ldr	r1, [pc, #128]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d72e:	4313      	orrs	r3, r2
 800d730:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d732:	4b1f      	ldr	r3, [pc, #124]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d736:	4a1e      	ldr	r2, [pc, #120]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d738:	f043 0310 	orr.w	r3, r3, #16
 800d73c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d106      	bne.n	800d752 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d744:	4b1a      	ldr	r3, [pc, #104]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d748:	4a19      	ldr	r2, [pc, #100]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d74a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d74e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d750:	e00f      	b.n	800d772 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	2b01      	cmp	r3, #1
 800d756:	d106      	bne.n	800d766 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d758:	4b15      	ldr	r3, [pc, #84]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d75c:	4a14      	ldr	r2, [pc, #80]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d75e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d762:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d764:	e005      	b.n	800d772 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d766:	4b12      	ldr	r3, [pc, #72]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d76a:	4a11      	ldr	r2, [pc, #68]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d76c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d770:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d772:	4b0f      	ldr	r3, [pc, #60]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a0e      	ldr	r2, [pc, #56]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d778:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d77c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d77e:	f7f8 f941 	bl	8005a04 <HAL_GetTick>
 800d782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d784:	e008      	b.n	800d798 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d786:	f7f8 f93d 	bl	8005a04 <HAL_GetTick>
 800d78a:	4602      	mov	r2, r0
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	1ad3      	subs	r3, r2, r3
 800d790:	2b02      	cmp	r3, #2
 800d792:	d901      	bls.n	800d798 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d794:	2303      	movs	r3, #3
 800d796:	e006      	b.n	800d7a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d798:	4b05      	ldr	r3, [pc, #20]	@ (800d7b0 <RCCEx_PLL2_Config+0x15c>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d0f0      	beq.n	800d786 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	58024400 	.word	0x58024400
 800d7b4:	ffff0007 	.word	0xffff0007

0800d7b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d7c6:	4b53      	ldr	r3, [pc, #332]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d7c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ca:	f003 0303 	and.w	r3, r3, #3
 800d7ce:	2b03      	cmp	r3, #3
 800d7d0:	d101      	bne.n	800d7d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e099      	b.n	800d90a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d7d6:	4b4f      	ldr	r3, [pc, #316]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a4e      	ldr	r2, [pc, #312]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d7dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d7e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7e2:	f7f8 f90f 	bl	8005a04 <HAL_GetTick>
 800d7e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d7e8:	e008      	b.n	800d7fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d7ea:	f7f8 f90b 	bl	8005a04 <HAL_GetTick>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	1ad3      	subs	r3, r2, r3
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d901      	bls.n	800d7fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d7f8:	2303      	movs	r3, #3
 800d7fa:	e086      	b.n	800d90a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d7fc:	4b45      	ldr	r3, [pc, #276]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d804:	2b00      	cmp	r3, #0
 800d806:	d1f0      	bne.n	800d7ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d808:	4b42      	ldr	r3, [pc, #264]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d80c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	051b      	lsls	r3, r3, #20
 800d816:	493f      	ldr	r1, [pc, #252]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d818:	4313      	orrs	r3, r2
 800d81a:	628b      	str	r3, [r1, #40]	@ 0x28
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	3b01      	subs	r3, #1
 800d822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	689b      	ldr	r3, [r3, #8]
 800d82a:	3b01      	subs	r3, #1
 800d82c:	025b      	lsls	r3, r3, #9
 800d82e:	b29b      	uxth	r3, r3
 800d830:	431a      	orrs	r2, r3
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	68db      	ldr	r3, [r3, #12]
 800d836:	3b01      	subs	r3, #1
 800d838:	041b      	lsls	r3, r3, #16
 800d83a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d83e:	431a      	orrs	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	691b      	ldr	r3, [r3, #16]
 800d844:	3b01      	subs	r3, #1
 800d846:	061b      	lsls	r3, r3, #24
 800d848:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d84c:	4931      	ldr	r1, [pc, #196]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d84e:	4313      	orrs	r3, r2
 800d850:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d852:	4b30      	ldr	r3, [pc, #192]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d856:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	695b      	ldr	r3, [r3, #20]
 800d85e:	492d      	ldr	r1, [pc, #180]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d860:	4313      	orrs	r3, r2
 800d862:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d864:	4b2b      	ldr	r3, [pc, #172]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d868:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	699b      	ldr	r3, [r3, #24]
 800d870:	4928      	ldr	r1, [pc, #160]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d872:	4313      	orrs	r3, r2
 800d874:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d876:	4b27      	ldr	r3, [pc, #156]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d87a:	4a26      	ldr	r2, [pc, #152]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d87c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d880:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d882:	4b24      	ldr	r3, [pc, #144]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d886:	4b24      	ldr	r3, [pc, #144]	@ (800d918 <RCCEx_PLL3_Config+0x160>)
 800d888:	4013      	ands	r3, r2
 800d88a:	687a      	ldr	r2, [r7, #4]
 800d88c:	69d2      	ldr	r2, [r2, #28]
 800d88e:	00d2      	lsls	r2, r2, #3
 800d890:	4920      	ldr	r1, [pc, #128]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d892:	4313      	orrs	r3, r2
 800d894:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d896:	4b1f      	ldr	r3, [pc, #124]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d89a:	4a1e      	ldr	r2, [pc, #120]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d89c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d8a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d106      	bne.n	800d8b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d8a8:	4b1a      	ldr	r3, [pc, #104]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ac:	4a19      	ldr	r2, [pc, #100]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d8ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d8b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d8b4:	e00f      	b.n	800d8d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d106      	bne.n	800d8ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d8bc:	4b15      	ldr	r3, [pc, #84]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8c0:	4a14      	ldr	r2, [pc, #80]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d8c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d8c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d8c8:	e005      	b.n	800d8d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d8ca:	4b12      	ldr	r3, [pc, #72]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ce:	4a11      	ldr	r2, [pc, #68]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d8d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d8d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d8d6:	4b0f      	ldr	r3, [pc, #60]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	4a0e      	ldr	r2, [pc, #56]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d8dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d8e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8e2:	f7f8 f88f 	bl	8005a04 <HAL_GetTick>
 800d8e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d8e8:	e008      	b.n	800d8fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d8ea:	f7f8 f88b 	bl	8005a04 <HAL_GetTick>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	1ad3      	subs	r3, r2, r3
 800d8f4:	2b02      	cmp	r3, #2
 800d8f6:	d901      	bls.n	800d8fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d8f8:	2303      	movs	r3, #3
 800d8fa:	e006      	b.n	800d90a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d8fc:	4b05      	ldr	r3, [pc, #20]	@ (800d914 <RCCEx_PLL3_Config+0x15c>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d904:	2b00      	cmp	r3, #0
 800d906:	d0f0      	beq.n	800d8ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d908:	7bfb      	ldrb	r3, [r7, #15]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	58024400 	.word	0x58024400
 800d918:	ffff0007 	.word	0xffff0007

0800d91c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d101      	bne.n	800d92e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d92a:	2301      	movs	r3, #1
 800d92c:	e049      	b.n	800d9c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d934:	b2db      	uxtb	r3, r3
 800d936:	2b00      	cmp	r3, #0
 800d938:	d106      	bne.n	800d948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2200      	movs	r2, #0
 800d93e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f7f7 fc1e 	bl	8005184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2202      	movs	r2, #2
 800d94c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	3304      	adds	r3, #4
 800d958:	4619      	mov	r1, r3
 800d95a:	4610      	mov	r0, r2
 800d95c:	f001 f876 	bl	800ea4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2201      	movs	r2, #1
 800d96c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2201      	movs	r2, #1
 800d974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2201      	movs	r2, #1
 800d97c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2201      	movs	r2, #1
 800d984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2201      	movs	r2, #1
 800d98c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2201      	movs	r2, #1
 800d994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2201      	movs	r2, #1
 800d99c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d9c0:	2300      	movs	r3, #0
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3708      	adds	r7, #8
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
	...

0800d9cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b085      	sub	sp, #20
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d9da:	b2db      	uxtb	r3, r3
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d001      	beq.n	800d9e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e056      	b.n	800da92 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2202      	movs	r2, #2
 800d9e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a2b      	ldr	r2, [pc, #172]	@ (800daa0 <HAL_TIM_Base_Start+0xd4>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d02c      	beq.n	800da50 <HAL_TIM_Base_Start+0x84>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9fe:	d027      	beq.n	800da50 <HAL_TIM_Base_Start+0x84>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a27      	ldr	r2, [pc, #156]	@ (800daa4 <HAL_TIM_Base_Start+0xd8>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d022      	beq.n	800da50 <HAL_TIM_Base_Start+0x84>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4a26      	ldr	r2, [pc, #152]	@ (800daa8 <HAL_TIM_Base_Start+0xdc>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d01d      	beq.n	800da50 <HAL_TIM_Base_Start+0x84>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a24      	ldr	r2, [pc, #144]	@ (800daac <HAL_TIM_Base_Start+0xe0>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d018      	beq.n	800da50 <HAL_TIM_Base_Start+0x84>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4a23      	ldr	r2, [pc, #140]	@ (800dab0 <HAL_TIM_Base_Start+0xe4>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d013      	beq.n	800da50 <HAL_TIM_Base_Start+0x84>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a21      	ldr	r2, [pc, #132]	@ (800dab4 <HAL_TIM_Base_Start+0xe8>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d00e      	beq.n	800da50 <HAL_TIM_Base_Start+0x84>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4a20      	ldr	r2, [pc, #128]	@ (800dab8 <HAL_TIM_Base_Start+0xec>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d009      	beq.n	800da50 <HAL_TIM_Base_Start+0x84>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a1e      	ldr	r2, [pc, #120]	@ (800dabc <HAL_TIM_Base_Start+0xf0>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d004      	beq.n	800da50 <HAL_TIM_Base_Start+0x84>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a1d      	ldr	r2, [pc, #116]	@ (800dac0 <HAL_TIM_Base_Start+0xf4>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d115      	bne.n	800da7c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	689a      	ldr	r2, [r3, #8]
 800da56:	4b1b      	ldr	r3, [pc, #108]	@ (800dac4 <HAL_TIM_Base_Start+0xf8>)
 800da58:	4013      	ands	r3, r2
 800da5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2b06      	cmp	r3, #6
 800da60:	d015      	beq.n	800da8e <HAL_TIM_Base_Start+0xc2>
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da68:	d011      	beq.n	800da8e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f042 0201 	orr.w	r2, r2, #1
 800da78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da7a:	e008      	b.n	800da8e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f042 0201 	orr.w	r2, r2, #1
 800da8a:	601a      	str	r2, [r3, #0]
 800da8c:	e000      	b.n	800da90 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800da90:	2300      	movs	r3, #0
}
 800da92:	4618      	mov	r0, r3
 800da94:	3714      	adds	r7, #20
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr
 800da9e:	bf00      	nop
 800daa0:	40010000 	.word	0x40010000
 800daa4:	40000400 	.word	0x40000400
 800daa8:	40000800 	.word	0x40000800
 800daac:	40000c00 	.word	0x40000c00
 800dab0:	40010400 	.word	0x40010400
 800dab4:	40001800 	.word	0x40001800
 800dab8:	40014000 	.word	0x40014000
 800dabc:	4000e000 	.word	0x4000e000
 800dac0:	4000e400 	.word	0x4000e400
 800dac4:	00010007 	.word	0x00010007

0800dac8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	6a1a      	ldr	r2, [r3, #32]
 800dad6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800dada:	4013      	ands	r3, r2
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10f      	bne.n	800db00 <HAL_TIM_Base_Stop+0x38>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	6a1a      	ldr	r2, [r3, #32]
 800dae6:	f240 4344 	movw	r3, #1092	@ 0x444
 800daea:	4013      	ands	r3, r2
 800daec:	2b00      	cmp	r3, #0
 800daee:	d107      	bne.n	800db00 <HAL_TIM_Base_Stop+0x38>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f022 0201 	bic.w	r2, r2, #1
 800dafe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2201      	movs	r2, #1
 800db04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	370c      	adds	r7, #12
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr

0800db16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800db16:	b580      	push	{r7, lr}
 800db18:	b082      	sub	sp, #8
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d101      	bne.n	800db28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800db24:	2301      	movs	r3, #1
 800db26:	e049      	b.n	800dbbc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	2b00      	cmp	r3, #0
 800db32:	d106      	bne.n	800db42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 f841 	bl	800dbc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2202      	movs	r2, #2
 800db46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681a      	ldr	r2, [r3, #0]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	3304      	adds	r3, #4
 800db52:	4619      	mov	r1, r3
 800db54:	4610      	mov	r0, r2
 800db56:	f000 ff79 	bl	800ea4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2201      	movs	r2, #1
 800db5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2201      	movs	r2, #1
 800db66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2201      	movs	r2, #1
 800db6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2201      	movs	r2, #1
 800db76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2201      	movs	r2, #1
 800db7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2201      	movs	r2, #1
 800db86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2201      	movs	r2, #1
 800db8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2201      	movs	r2, #1
 800db96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2201      	movs	r2, #1
 800db9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2201      	movs	r2, #1
 800dba6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2201      	movs	r2, #1
 800dbae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dbba:	2300      	movs	r3, #0
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800dbcc:	bf00      	nop
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d109      	bne.n	800dbfc <HAL_TIM_PWM_Start+0x24>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	bf14      	ite	ne
 800dbf4:	2301      	movne	r3, #1
 800dbf6:	2300      	moveq	r3, #0
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	e03c      	b.n	800dc76 <HAL_TIM_PWM_Start+0x9e>
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	2b04      	cmp	r3, #4
 800dc00:	d109      	bne.n	800dc16 <HAL_TIM_PWM_Start+0x3e>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	bf14      	ite	ne
 800dc0e:	2301      	movne	r3, #1
 800dc10:	2300      	moveq	r3, #0
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	e02f      	b.n	800dc76 <HAL_TIM_PWM_Start+0x9e>
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	2b08      	cmp	r3, #8
 800dc1a:	d109      	bne.n	800dc30 <HAL_TIM_PWM_Start+0x58>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	bf14      	ite	ne
 800dc28:	2301      	movne	r3, #1
 800dc2a:	2300      	moveq	r3, #0
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	e022      	b.n	800dc76 <HAL_TIM_PWM_Start+0x9e>
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	2b0c      	cmp	r3, #12
 800dc34:	d109      	bne.n	800dc4a <HAL_TIM_PWM_Start+0x72>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	bf14      	ite	ne
 800dc42:	2301      	movne	r3, #1
 800dc44:	2300      	moveq	r3, #0
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	e015      	b.n	800dc76 <HAL_TIM_PWM_Start+0x9e>
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	2b10      	cmp	r3, #16
 800dc4e:	d109      	bne.n	800dc64 <HAL_TIM_PWM_Start+0x8c>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	bf14      	ite	ne
 800dc5c:	2301      	movne	r3, #1
 800dc5e:	2300      	moveq	r3, #0
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	e008      	b.n	800dc76 <HAL_TIM_PWM_Start+0x9e>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	bf14      	ite	ne
 800dc70:	2301      	movne	r3, #1
 800dc72:	2300      	moveq	r3, #0
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d001      	beq.n	800dc7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	e0ab      	b.n	800ddd6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d104      	bne.n	800dc8e <HAL_TIM_PWM_Start+0xb6>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2202      	movs	r2, #2
 800dc88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dc8c:	e023      	b.n	800dcd6 <HAL_TIM_PWM_Start+0xfe>
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	2b04      	cmp	r3, #4
 800dc92:	d104      	bne.n	800dc9e <HAL_TIM_PWM_Start+0xc6>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2202      	movs	r2, #2
 800dc98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dc9c:	e01b      	b.n	800dcd6 <HAL_TIM_PWM_Start+0xfe>
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	2b08      	cmp	r3, #8
 800dca2:	d104      	bne.n	800dcae <HAL_TIM_PWM_Start+0xd6>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2202      	movs	r2, #2
 800dca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dcac:	e013      	b.n	800dcd6 <HAL_TIM_PWM_Start+0xfe>
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	2b0c      	cmp	r3, #12
 800dcb2:	d104      	bne.n	800dcbe <HAL_TIM_PWM_Start+0xe6>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2202      	movs	r2, #2
 800dcb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dcbc:	e00b      	b.n	800dcd6 <HAL_TIM_PWM_Start+0xfe>
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	2b10      	cmp	r3, #16
 800dcc2:	d104      	bne.n	800dcce <HAL_TIM_PWM_Start+0xf6>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2202      	movs	r2, #2
 800dcc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dccc:	e003      	b.n	800dcd6 <HAL_TIM_PWM_Start+0xfe>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2202      	movs	r2, #2
 800dcd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	6839      	ldr	r1, [r7, #0]
 800dcde:	4618      	mov	r0, r3
 800dce0:	f001 fad4 	bl	800f28c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4a3d      	ldr	r2, [pc, #244]	@ (800dde0 <HAL_TIM_PWM_Start+0x208>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d013      	beq.n	800dd16 <HAL_TIM_PWM_Start+0x13e>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4a3c      	ldr	r2, [pc, #240]	@ (800dde4 <HAL_TIM_PWM_Start+0x20c>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d00e      	beq.n	800dd16 <HAL_TIM_PWM_Start+0x13e>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a3a      	ldr	r2, [pc, #232]	@ (800dde8 <HAL_TIM_PWM_Start+0x210>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d009      	beq.n	800dd16 <HAL_TIM_PWM_Start+0x13e>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4a39      	ldr	r2, [pc, #228]	@ (800ddec <HAL_TIM_PWM_Start+0x214>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d004      	beq.n	800dd16 <HAL_TIM_PWM_Start+0x13e>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a37      	ldr	r2, [pc, #220]	@ (800ddf0 <HAL_TIM_PWM_Start+0x218>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d101      	bne.n	800dd1a <HAL_TIM_PWM_Start+0x142>
 800dd16:	2301      	movs	r3, #1
 800dd18:	e000      	b.n	800dd1c <HAL_TIM_PWM_Start+0x144>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d007      	beq.n	800dd30 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dd2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4a2a      	ldr	r2, [pc, #168]	@ (800dde0 <HAL_TIM_PWM_Start+0x208>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d02c      	beq.n	800dd94 <HAL_TIM_PWM_Start+0x1bc>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd42:	d027      	beq.n	800dd94 <HAL_TIM_PWM_Start+0x1bc>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a2a      	ldr	r2, [pc, #168]	@ (800ddf4 <HAL_TIM_PWM_Start+0x21c>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d022      	beq.n	800dd94 <HAL_TIM_PWM_Start+0x1bc>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	4a29      	ldr	r2, [pc, #164]	@ (800ddf8 <HAL_TIM_PWM_Start+0x220>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d01d      	beq.n	800dd94 <HAL_TIM_PWM_Start+0x1bc>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4a27      	ldr	r2, [pc, #156]	@ (800ddfc <HAL_TIM_PWM_Start+0x224>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d018      	beq.n	800dd94 <HAL_TIM_PWM_Start+0x1bc>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4a1f      	ldr	r2, [pc, #124]	@ (800dde4 <HAL_TIM_PWM_Start+0x20c>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d013      	beq.n	800dd94 <HAL_TIM_PWM_Start+0x1bc>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4a23      	ldr	r2, [pc, #140]	@ (800de00 <HAL_TIM_PWM_Start+0x228>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d00e      	beq.n	800dd94 <HAL_TIM_PWM_Start+0x1bc>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4a1b      	ldr	r2, [pc, #108]	@ (800dde8 <HAL_TIM_PWM_Start+0x210>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d009      	beq.n	800dd94 <HAL_TIM_PWM_Start+0x1bc>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a1f      	ldr	r2, [pc, #124]	@ (800de04 <HAL_TIM_PWM_Start+0x22c>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d004      	beq.n	800dd94 <HAL_TIM_PWM_Start+0x1bc>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4a1e      	ldr	r2, [pc, #120]	@ (800de08 <HAL_TIM_PWM_Start+0x230>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d115      	bne.n	800ddc0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	689a      	ldr	r2, [r3, #8]
 800dd9a:	4b1c      	ldr	r3, [pc, #112]	@ (800de0c <HAL_TIM_PWM_Start+0x234>)
 800dd9c:	4013      	ands	r3, r2
 800dd9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2b06      	cmp	r3, #6
 800dda4:	d015      	beq.n	800ddd2 <HAL_TIM_PWM_Start+0x1fa>
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddac:	d011      	beq.n	800ddd2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	681a      	ldr	r2, [r3, #0]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f042 0201 	orr.w	r2, r2, #1
 800ddbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddbe:	e008      	b.n	800ddd2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f042 0201 	orr.w	r2, r2, #1
 800ddce:	601a      	str	r2, [r3, #0]
 800ddd0:	e000      	b.n	800ddd4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ddd4:	2300      	movs	r3, #0
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3710      	adds	r7, #16
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	40010000 	.word	0x40010000
 800dde4:	40010400 	.word	0x40010400
 800dde8:	40014000 	.word	0x40014000
 800ddec:	40014400 	.word	0x40014400
 800ddf0:	40014800 	.word	0x40014800
 800ddf4:	40000400 	.word	0x40000400
 800ddf8:	40000800 	.word	0x40000800
 800ddfc:	40000c00 	.word	0x40000c00
 800de00:	40001800 	.word	0x40001800
 800de04:	4000e000 	.word	0x4000e000
 800de08:	4000e400 	.word	0x4000e400
 800de0c:	00010007 	.word	0x00010007

0800de10 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
 800de1c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800de1e:	2300      	movs	r3, #0
 800de20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d109      	bne.n	800de3c <HAL_TIM_PWM_Start_DMA+0x2c>
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	2b02      	cmp	r3, #2
 800de32:	bf0c      	ite	eq
 800de34:	2301      	moveq	r3, #1
 800de36:	2300      	movne	r3, #0
 800de38:	b2db      	uxtb	r3, r3
 800de3a:	e03c      	b.n	800deb6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	2b04      	cmp	r3, #4
 800de40:	d109      	bne.n	800de56 <HAL_TIM_PWM_Start_DMA+0x46>
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	2b02      	cmp	r3, #2
 800de4c:	bf0c      	ite	eq
 800de4e:	2301      	moveq	r3, #1
 800de50:	2300      	movne	r3, #0
 800de52:	b2db      	uxtb	r3, r3
 800de54:	e02f      	b.n	800deb6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	2b08      	cmp	r3, #8
 800de5a:	d109      	bne.n	800de70 <HAL_TIM_PWM_Start_DMA+0x60>
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800de62:	b2db      	uxtb	r3, r3
 800de64:	2b02      	cmp	r3, #2
 800de66:	bf0c      	ite	eq
 800de68:	2301      	moveq	r3, #1
 800de6a:	2300      	movne	r3, #0
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	e022      	b.n	800deb6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	2b0c      	cmp	r3, #12
 800de74:	d109      	bne.n	800de8a <HAL_TIM_PWM_Start_DMA+0x7a>
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	2b02      	cmp	r3, #2
 800de80:	bf0c      	ite	eq
 800de82:	2301      	moveq	r3, #1
 800de84:	2300      	movne	r3, #0
 800de86:	b2db      	uxtb	r3, r3
 800de88:	e015      	b.n	800deb6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	2b10      	cmp	r3, #16
 800de8e:	d109      	bne.n	800dea4 <HAL_TIM_PWM_Start_DMA+0x94>
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800de96:	b2db      	uxtb	r3, r3
 800de98:	2b02      	cmp	r3, #2
 800de9a:	bf0c      	ite	eq
 800de9c:	2301      	moveq	r3, #1
 800de9e:	2300      	movne	r3, #0
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	e008      	b.n	800deb6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	2b02      	cmp	r3, #2
 800deae:	bf0c      	ite	eq
 800deb0:	2301      	moveq	r3, #1
 800deb2:	2300      	movne	r3, #0
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d001      	beq.n	800debe <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800deba:	2302      	movs	r3, #2
 800debc:	e1ba      	b.n	800e234 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d109      	bne.n	800ded8 <HAL_TIM_PWM_Start_DMA+0xc8>
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800deca:	b2db      	uxtb	r3, r3
 800decc:	2b01      	cmp	r3, #1
 800dece:	bf0c      	ite	eq
 800ded0:	2301      	moveq	r3, #1
 800ded2:	2300      	movne	r3, #0
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	e03c      	b.n	800df52 <HAL_TIM_PWM_Start_DMA+0x142>
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	2b04      	cmp	r3, #4
 800dedc:	d109      	bne.n	800def2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	bf0c      	ite	eq
 800deea:	2301      	moveq	r3, #1
 800deec:	2300      	movne	r3, #0
 800deee:	b2db      	uxtb	r3, r3
 800def0:	e02f      	b.n	800df52 <HAL_TIM_PWM_Start_DMA+0x142>
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	2b08      	cmp	r3, #8
 800def6:	d109      	bne.n	800df0c <HAL_TIM_PWM_Start_DMA+0xfc>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800defe:	b2db      	uxtb	r3, r3
 800df00:	2b01      	cmp	r3, #1
 800df02:	bf0c      	ite	eq
 800df04:	2301      	moveq	r3, #1
 800df06:	2300      	movne	r3, #0
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	e022      	b.n	800df52 <HAL_TIM_PWM_Start_DMA+0x142>
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	2b0c      	cmp	r3, #12
 800df10:	d109      	bne.n	800df26 <HAL_TIM_PWM_Start_DMA+0x116>
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	bf0c      	ite	eq
 800df1e:	2301      	moveq	r3, #1
 800df20:	2300      	movne	r3, #0
 800df22:	b2db      	uxtb	r3, r3
 800df24:	e015      	b.n	800df52 <HAL_TIM_PWM_Start_DMA+0x142>
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	2b10      	cmp	r3, #16
 800df2a:	d109      	bne.n	800df40 <HAL_TIM_PWM_Start_DMA+0x130>
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800df32:	b2db      	uxtb	r3, r3
 800df34:	2b01      	cmp	r3, #1
 800df36:	bf0c      	ite	eq
 800df38:	2301      	moveq	r3, #1
 800df3a:	2300      	movne	r3, #0
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	e008      	b.n	800df52 <HAL_TIM_PWM_Start_DMA+0x142>
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800df46:	b2db      	uxtb	r3, r3
 800df48:	2b01      	cmp	r3, #1
 800df4a:	bf0c      	ite	eq
 800df4c:	2301      	moveq	r3, #1
 800df4e:	2300      	movne	r3, #0
 800df50:	b2db      	uxtb	r3, r3
 800df52:	2b00      	cmp	r3, #0
 800df54:	d034      	beq.n	800dfc0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d002      	beq.n	800df62 <HAL_TIM_PWM_Start_DMA+0x152>
 800df5c:	887b      	ldrh	r3, [r7, #2]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d101      	bne.n	800df66 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800df62:	2301      	movs	r3, #1
 800df64:	e166      	b.n	800e234 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d104      	bne.n	800df76 <HAL_TIM_PWM_Start_DMA+0x166>
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2202      	movs	r2, #2
 800df70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800df74:	e026      	b.n	800dfc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	2b04      	cmp	r3, #4
 800df7a:	d104      	bne.n	800df86 <HAL_TIM_PWM_Start_DMA+0x176>
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2202      	movs	r2, #2
 800df80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800df84:	e01e      	b.n	800dfc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	2b08      	cmp	r3, #8
 800df8a:	d104      	bne.n	800df96 <HAL_TIM_PWM_Start_DMA+0x186>
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2202      	movs	r2, #2
 800df90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800df94:	e016      	b.n	800dfc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	2b0c      	cmp	r3, #12
 800df9a:	d104      	bne.n	800dfa6 <HAL_TIM_PWM_Start_DMA+0x196>
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2202      	movs	r2, #2
 800dfa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dfa4:	e00e      	b.n	800dfc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	2b10      	cmp	r3, #16
 800dfaa:	d104      	bne.n	800dfb6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2202      	movs	r2, #2
 800dfb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dfb4:	e006      	b.n	800dfc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2202      	movs	r2, #2
 800dfba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dfbe:	e001      	b.n	800dfc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e137      	b.n	800e234 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	2b0c      	cmp	r3, #12
 800dfc8:	f200 80ae 	bhi.w	800e128 <HAL_TIM_PWM_Start_DMA+0x318>
 800dfcc:	a201      	add	r2, pc, #4	@ (adr r2, 800dfd4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800dfce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd2:	bf00      	nop
 800dfd4:	0800e009 	.word	0x0800e009
 800dfd8:	0800e129 	.word	0x0800e129
 800dfdc:	0800e129 	.word	0x0800e129
 800dfe0:	0800e129 	.word	0x0800e129
 800dfe4:	0800e051 	.word	0x0800e051
 800dfe8:	0800e129 	.word	0x0800e129
 800dfec:	0800e129 	.word	0x0800e129
 800dff0:	0800e129 	.word	0x0800e129
 800dff4:	0800e099 	.word	0x0800e099
 800dff8:	0800e129 	.word	0x0800e129
 800dffc:	0800e129 	.word	0x0800e129
 800e000:	0800e129 	.word	0x0800e129
 800e004:	0800e0e1 	.word	0x0800e0e1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e00c:	4a8b      	ldr	r2, [pc, #556]	@ (800e23c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e00e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e014:	4a8a      	ldr	r2, [pc, #552]	@ (800e240 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e016:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e01c:	4a89      	ldr	r2, [pc, #548]	@ (800e244 <HAL_TIM_PWM_Start_DMA+0x434>)
 800e01e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800e024:	6879      	ldr	r1, [r7, #4]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	3334      	adds	r3, #52	@ 0x34
 800e02c:	461a      	mov	r2, r3
 800e02e:	887b      	ldrh	r3, [r7, #2]
 800e030:	f7f8 f9f8 	bl	8006424 <HAL_DMA_Start_IT>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d001      	beq.n	800e03e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e03a:	2301      	movs	r3, #1
 800e03c:	e0fa      	b.n	800e234 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	68da      	ldr	r2, [r3, #12]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e04c:	60da      	str	r2, [r3, #12]
      break;
 800e04e:	e06e      	b.n	800e12e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e054:	4a79      	ldr	r2, [pc, #484]	@ (800e23c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e056:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e05c:	4a78      	ldr	r2, [pc, #480]	@ (800e240 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e05e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e064:	4a77      	ldr	r2, [pc, #476]	@ (800e244 <HAL_TIM_PWM_Start_DMA+0x434>)
 800e066:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800e06c:	6879      	ldr	r1, [r7, #4]
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	3338      	adds	r3, #56	@ 0x38
 800e074:	461a      	mov	r2, r3
 800e076:	887b      	ldrh	r3, [r7, #2]
 800e078:	f7f8 f9d4 	bl	8006424 <HAL_DMA_Start_IT>
 800e07c:	4603      	mov	r3, r0
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d001      	beq.n	800e086 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e082:	2301      	movs	r3, #1
 800e084:	e0d6      	b.n	800e234 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	68da      	ldr	r2, [r3, #12]
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e094:	60da      	str	r2, [r3, #12]
      break;
 800e096:	e04a      	b.n	800e12e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e09c:	4a67      	ldr	r2, [pc, #412]	@ (800e23c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e09e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0a4:	4a66      	ldr	r2, [pc, #408]	@ (800e240 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e0a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ac:	4a65      	ldr	r2, [pc, #404]	@ (800e244 <HAL_TIM_PWM_Start_DMA+0x434>)
 800e0ae:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800e0b4:	6879      	ldr	r1, [r7, #4]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	333c      	adds	r3, #60	@ 0x3c
 800e0bc:	461a      	mov	r2, r3
 800e0be:	887b      	ldrh	r3, [r7, #2]
 800e0c0:	f7f8 f9b0 	bl	8006424 <HAL_DMA_Start_IT>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d001      	beq.n	800e0ce <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	e0b2      	b.n	800e234 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	68da      	ldr	r2, [r3, #12]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e0dc:	60da      	str	r2, [r3, #12]
      break;
 800e0de:	e026      	b.n	800e12e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0e4:	4a55      	ldr	r2, [pc, #340]	@ (800e23c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e0e6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0ec:	4a54      	ldr	r2, [pc, #336]	@ (800e240 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e0ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0f4:	4a53      	ldr	r2, [pc, #332]	@ (800e244 <HAL_TIM_PWM_Start_DMA+0x434>)
 800e0f6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e0fc:	6879      	ldr	r1, [r7, #4]
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	3340      	adds	r3, #64	@ 0x40
 800e104:	461a      	mov	r2, r3
 800e106:	887b      	ldrh	r3, [r7, #2]
 800e108:	f7f8 f98c 	bl	8006424 <HAL_DMA_Start_IT>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d001      	beq.n	800e116 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e112:	2301      	movs	r3, #1
 800e114:	e08e      	b.n	800e234 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	68da      	ldr	r2, [r3, #12]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e124:	60da      	str	r2, [r3, #12]
      break;
 800e126:	e002      	b.n	800e12e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800e128:	2301      	movs	r3, #1
 800e12a:	75fb      	strb	r3, [r7, #23]
      break;
 800e12c:	bf00      	nop
  }

  if (status == HAL_OK)
 800e12e:	7dfb      	ldrb	r3, [r7, #23]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d17e      	bne.n	800e232 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2201      	movs	r2, #1
 800e13a:	68b9      	ldr	r1, [r7, #8]
 800e13c:	4618      	mov	r0, r3
 800e13e:	f001 f8a5 	bl	800f28c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a40      	ldr	r2, [pc, #256]	@ (800e248 <HAL_TIM_PWM_Start_DMA+0x438>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d013      	beq.n	800e174 <HAL_TIM_PWM_Start_DMA+0x364>
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4a3e      	ldr	r2, [pc, #248]	@ (800e24c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d00e      	beq.n	800e174 <HAL_TIM_PWM_Start_DMA+0x364>
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a3d      	ldr	r2, [pc, #244]	@ (800e250 <HAL_TIM_PWM_Start_DMA+0x440>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d009      	beq.n	800e174 <HAL_TIM_PWM_Start_DMA+0x364>
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4a3b      	ldr	r2, [pc, #236]	@ (800e254 <HAL_TIM_PWM_Start_DMA+0x444>)
 800e166:	4293      	cmp	r3, r2
 800e168:	d004      	beq.n	800e174 <HAL_TIM_PWM_Start_DMA+0x364>
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4a3a      	ldr	r2, [pc, #232]	@ (800e258 <HAL_TIM_PWM_Start_DMA+0x448>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d101      	bne.n	800e178 <HAL_TIM_PWM_Start_DMA+0x368>
 800e174:	2301      	movs	r3, #1
 800e176:	e000      	b.n	800e17a <HAL_TIM_PWM_Start_DMA+0x36a>
 800e178:	2300      	movs	r3, #0
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d007      	beq.n	800e18e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e18c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4a2d      	ldr	r2, [pc, #180]	@ (800e248 <HAL_TIM_PWM_Start_DMA+0x438>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d02c      	beq.n	800e1f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1a0:	d027      	beq.n	800e1f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	4a2d      	ldr	r2, [pc, #180]	@ (800e25c <HAL_TIM_PWM_Start_DMA+0x44c>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d022      	beq.n	800e1f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a2b      	ldr	r2, [pc, #172]	@ (800e260 <HAL_TIM_PWM_Start_DMA+0x450>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d01d      	beq.n	800e1f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4a2a      	ldr	r2, [pc, #168]	@ (800e264 <HAL_TIM_PWM_Start_DMA+0x454>)
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d018      	beq.n	800e1f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	4a21      	ldr	r2, [pc, #132]	@ (800e24c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d013      	beq.n	800e1f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	4a26      	ldr	r2, [pc, #152]	@ (800e268 <HAL_TIM_PWM_Start_DMA+0x458>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d00e      	beq.n	800e1f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a1d      	ldr	r2, [pc, #116]	@ (800e250 <HAL_TIM_PWM_Start_DMA+0x440>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d009      	beq.n	800e1f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a22      	ldr	r2, [pc, #136]	@ (800e26c <HAL_TIM_PWM_Start_DMA+0x45c>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d004      	beq.n	800e1f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a20      	ldr	r2, [pc, #128]	@ (800e270 <HAL_TIM_PWM_Start_DMA+0x460>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d115      	bne.n	800e21e <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	689a      	ldr	r2, [r3, #8]
 800e1f8:	4b1e      	ldr	r3, [pc, #120]	@ (800e274 <HAL_TIM_PWM_Start_DMA+0x464>)
 800e1fa:	4013      	ands	r3, r2
 800e1fc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	2b06      	cmp	r3, #6
 800e202:	d015      	beq.n	800e230 <HAL_TIM_PWM_Start_DMA+0x420>
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e20a:	d011      	beq.n	800e230 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f042 0201 	orr.w	r2, r2, #1
 800e21a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e21c:	e008      	b.n	800e230 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	681a      	ldr	r2, [r3, #0]
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f042 0201 	orr.w	r2, r2, #1
 800e22c:	601a      	str	r2, [r3, #0]
 800e22e:	e000      	b.n	800e232 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e230:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e232:	7dfb      	ldrb	r3, [r7, #23]
}
 800e234:	4618      	mov	r0, r3
 800e236:	3718      	adds	r7, #24
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}
 800e23c:	0800e93b 	.word	0x0800e93b
 800e240:	0800e9e3 	.word	0x0800e9e3
 800e244:	0800e8a9 	.word	0x0800e8a9
 800e248:	40010000 	.word	0x40010000
 800e24c:	40010400 	.word	0x40010400
 800e250:	40014000 	.word	0x40014000
 800e254:	40014400 	.word	0x40014400
 800e258:	40014800 	.word	0x40014800
 800e25c:	40000400 	.word	0x40000400
 800e260:	40000800 	.word	0x40000800
 800e264:	40000c00 	.word	0x40000c00
 800e268:	40001800 	.word	0x40001800
 800e26c:	4000e000 	.word	0x4000e000
 800e270:	4000e400 	.word	0x4000e400
 800e274:	00010007 	.word	0x00010007

0800e278 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e282:	2300      	movs	r3, #0
 800e284:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	2b0c      	cmp	r3, #12
 800e28a:	d855      	bhi.n	800e338 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800e28c:	a201      	add	r2, pc, #4	@ (adr r2, 800e294 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800e28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e292:	bf00      	nop
 800e294:	0800e2c9 	.word	0x0800e2c9
 800e298:	0800e339 	.word	0x0800e339
 800e29c:	0800e339 	.word	0x0800e339
 800e2a0:	0800e339 	.word	0x0800e339
 800e2a4:	0800e2e5 	.word	0x0800e2e5
 800e2a8:	0800e339 	.word	0x0800e339
 800e2ac:	0800e339 	.word	0x0800e339
 800e2b0:	0800e339 	.word	0x0800e339
 800e2b4:	0800e301 	.word	0x0800e301
 800e2b8:	0800e339 	.word	0x0800e339
 800e2bc:	0800e339 	.word	0x0800e339
 800e2c0:	0800e339 	.word	0x0800e339
 800e2c4:	0800e31d 	.word	0x0800e31d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	68da      	ldr	r2, [r3, #12]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800e2d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7f8 fb0b 	bl	80068f8 <HAL_DMA_Abort_IT>
      break;
 800e2e2:	e02c      	b.n	800e33e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	68da      	ldr	r2, [r3, #12]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e2f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7f8 fafd 	bl	80068f8 <HAL_DMA_Abort_IT>
      break;
 800e2fe:	e01e      	b.n	800e33e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	68da      	ldr	r2, [r3, #12]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e30e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e314:	4618      	mov	r0, r3
 800e316:	f7f8 faef 	bl	80068f8 <HAL_DMA_Abort_IT>
      break;
 800e31a:	e010      	b.n	800e33e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	68da      	ldr	r2, [r3, #12]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e32a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e330:	4618      	mov	r0, r3
 800e332:	f7f8 fae1 	bl	80068f8 <HAL_DMA_Abort_IT>
      break;
 800e336:	e002      	b.n	800e33e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800e338:	2301      	movs	r3, #1
 800e33a:	73fb      	strb	r3, [r7, #15]
      break;
 800e33c:	bf00      	nop
  }

  if (status == HAL_OK)
 800e33e:	7bfb      	ldrb	r3, [r7, #15]
 800e340:	2b00      	cmp	r3, #0
 800e342:	f040 8081 	bne.w	800e448 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2200      	movs	r2, #0
 800e34c:	6839      	ldr	r1, [r7, #0]
 800e34e:	4618      	mov	r0, r3
 800e350:	f000 ff9c 	bl	800f28c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4a3e      	ldr	r2, [pc, #248]	@ (800e454 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d013      	beq.n	800e386 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	4a3d      	ldr	r2, [pc, #244]	@ (800e458 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d00e      	beq.n	800e386 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a3b      	ldr	r2, [pc, #236]	@ (800e45c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d009      	beq.n	800e386 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4a3a      	ldr	r2, [pc, #232]	@ (800e460 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800e378:	4293      	cmp	r3, r2
 800e37a:	d004      	beq.n	800e386 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4a38      	ldr	r2, [pc, #224]	@ (800e464 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800e382:	4293      	cmp	r3, r2
 800e384:	d101      	bne.n	800e38a <HAL_TIM_PWM_Stop_DMA+0x112>
 800e386:	2301      	movs	r3, #1
 800e388:	e000      	b.n	800e38c <HAL_TIM_PWM_Stop_DMA+0x114>
 800e38a:	2300      	movs	r3, #0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d017      	beq.n	800e3c0 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	6a1a      	ldr	r2, [r3, #32]
 800e396:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e39a:	4013      	ands	r3, r2
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d10f      	bne.n	800e3c0 <HAL_TIM_PWM_Stop_DMA+0x148>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	6a1a      	ldr	r2, [r3, #32]
 800e3a6:	f240 4344 	movw	r3, #1092	@ 0x444
 800e3aa:	4013      	ands	r3, r2
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d107      	bne.n	800e3c0 <HAL_TIM_PWM_Stop_DMA+0x148>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e3be:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	6a1a      	ldr	r2, [r3, #32]
 800e3c6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e3ca:	4013      	ands	r3, r2
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d10f      	bne.n	800e3f0 <HAL_TIM_PWM_Stop_DMA+0x178>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	6a1a      	ldr	r2, [r3, #32]
 800e3d6:	f240 4344 	movw	r3, #1092	@ 0x444
 800e3da:	4013      	ands	r3, r2
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d107      	bne.n	800e3f0 <HAL_TIM_PWM_Stop_DMA+0x178>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f022 0201 	bic.w	r2, r2, #1
 800e3ee:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d104      	bne.n	800e400 <HAL_TIM_PWM_Stop_DMA+0x188>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e3fe:	e023      	b.n	800e448 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	2b04      	cmp	r3, #4
 800e404:	d104      	bne.n	800e410 <HAL_TIM_PWM_Stop_DMA+0x198>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2201      	movs	r2, #1
 800e40a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e40e:	e01b      	b.n	800e448 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	2b08      	cmp	r3, #8
 800e414:	d104      	bne.n	800e420 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2201      	movs	r2, #1
 800e41a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e41e:	e013      	b.n	800e448 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	2b0c      	cmp	r3, #12
 800e424:	d104      	bne.n	800e430 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2201      	movs	r2, #1
 800e42a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e42e:	e00b      	b.n	800e448 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	2b10      	cmp	r3, #16
 800e434:	d104      	bne.n	800e440 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2201      	movs	r2, #1
 800e43a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e43e:	e003      	b.n	800e448 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2201      	movs	r2, #1
 800e444:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800e448:	7bfb      	ldrb	r3, [r7, #15]
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	40010000 	.word	0x40010000
 800e458:	40010400 	.word	0x40010400
 800e45c:	40014000 	.word	0x40014000
 800e460:	40014400 	.word	0x40014400
 800e464:	40014800 	.word	0x40014800

0800e468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b086      	sub	sp, #24
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	60f8      	str	r0, [r7, #12]
 800e470:	60b9      	str	r1, [r7, #8]
 800e472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e474:	2300      	movs	r3, #0
 800e476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d101      	bne.n	800e486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e482:	2302      	movs	r3, #2
 800e484:	e0ff      	b.n	800e686 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2201      	movs	r2, #1
 800e48a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2b14      	cmp	r3, #20
 800e492:	f200 80f0 	bhi.w	800e676 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e496:	a201      	add	r2, pc, #4	@ (adr r2, 800e49c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e49c:	0800e4f1 	.word	0x0800e4f1
 800e4a0:	0800e677 	.word	0x0800e677
 800e4a4:	0800e677 	.word	0x0800e677
 800e4a8:	0800e677 	.word	0x0800e677
 800e4ac:	0800e531 	.word	0x0800e531
 800e4b0:	0800e677 	.word	0x0800e677
 800e4b4:	0800e677 	.word	0x0800e677
 800e4b8:	0800e677 	.word	0x0800e677
 800e4bc:	0800e573 	.word	0x0800e573
 800e4c0:	0800e677 	.word	0x0800e677
 800e4c4:	0800e677 	.word	0x0800e677
 800e4c8:	0800e677 	.word	0x0800e677
 800e4cc:	0800e5b3 	.word	0x0800e5b3
 800e4d0:	0800e677 	.word	0x0800e677
 800e4d4:	0800e677 	.word	0x0800e677
 800e4d8:	0800e677 	.word	0x0800e677
 800e4dc:	0800e5f5 	.word	0x0800e5f5
 800e4e0:	0800e677 	.word	0x0800e677
 800e4e4:	0800e677 	.word	0x0800e677
 800e4e8:	0800e677 	.word	0x0800e677
 800e4ec:	0800e635 	.word	0x0800e635
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	68b9      	ldr	r1, [r7, #8]
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f000 fb54 	bl	800eba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	699a      	ldr	r2, [r3, #24]
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f042 0208 	orr.w	r2, r2, #8
 800e50a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	699a      	ldr	r2, [r3, #24]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f022 0204 	bic.w	r2, r2, #4
 800e51a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	6999      	ldr	r1, [r3, #24]
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	691a      	ldr	r2, [r3, #16]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	430a      	orrs	r2, r1
 800e52c:	619a      	str	r2, [r3, #24]
      break;
 800e52e:	e0a5      	b.n	800e67c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	68b9      	ldr	r1, [r7, #8]
 800e536:	4618      	mov	r0, r3
 800e538:	f000 fbc4 	bl	800ecc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	699a      	ldr	r2, [r3, #24]
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e54a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	699a      	ldr	r2, [r3, #24]
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e55a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	6999      	ldr	r1, [r3, #24]
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	691b      	ldr	r3, [r3, #16]
 800e566:	021a      	lsls	r2, r3, #8
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	430a      	orrs	r2, r1
 800e56e:	619a      	str	r2, [r3, #24]
      break;
 800e570:	e084      	b.n	800e67c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	68b9      	ldr	r1, [r7, #8]
 800e578:	4618      	mov	r0, r3
 800e57a:	f000 fc2d 	bl	800edd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	69da      	ldr	r2, [r3, #28]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f042 0208 	orr.w	r2, r2, #8
 800e58c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	69da      	ldr	r2, [r3, #28]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f022 0204 	bic.w	r2, r2, #4
 800e59c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	69d9      	ldr	r1, [r3, #28]
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	691a      	ldr	r2, [r3, #16]
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	430a      	orrs	r2, r1
 800e5ae:	61da      	str	r2, [r3, #28]
      break;
 800e5b0:	e064      	b.n	800e67c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	68b9      	ldr	r1, [r7, #8]
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f000 fc95 	bl	800eee8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	69da      	ldr	r2, [r3, #28]
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e5cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	69da      	ldr	r2, [r3, #28]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e5dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	69d9      	ldr	r1, [r3, #28]
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	691b      	ldr	r3, [r3, #16]
 800e5e8:	021a      	lsls	r2, r3, #8
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	430a      	orrs	r2, r1
 800e5f0:	61da      	str	r2, [r3, #28]
      break;
 800e5f2:	e043      	b.n	800e67c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	68b9      	ldr	r1, [r7, #8]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f000 fcde 	bl	800efbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f042 0208 	orr.w	r2, r2, #8
 800e60e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f022 0204 	bic.w	r2, r2, #4
 800e61e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	691a      	ldr	r2, [r3, #16]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	430a      	orrs	r2, r1
 800e630:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e632:	e023      	b.n	800e67c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	68b9      	ldr	r1, [r7, #8]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f000 fd22 	bl	800f084 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e64e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e65e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	691b      	ldr	r3, [r3, #16]
 800e66a:	021a      	lsls	r2, r3, #8
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	430a      	orrs	r2, r1
 800e672:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e674:	e002      	b.n	800e67c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e676:	2301      	movs	r3, #1
 800e678:	75fb      	strb	r3, [r7, #23]
      break;
 800e67a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2200      	movs	r2, #0
 800e680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e684:	7dfb      	ldrb	r3, [r7, #23]
}
 800e686:	4618      	mov	r0, r3
 800e688:	3718      	adds	r7, #24
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
 800e68e:	bf00      	nop

0800e690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e69a:	2300      	movs	r3, #0
 800e69c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	d101      	bne.n	800e6ac <HAL_TIM_ConfigClockSource+0x1c>
 800e6a8:	2302      	movs	r3, #2
 800e6aa:	e0dc      	b.n	800e866 <HAL_TIM_ConfigClockSource+0x1d6>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2202      	movs	r2, #2
 800e6b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	689b      	ldr	r3, [r3, #8]
 800e6c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e6c4:	68ba      	ldr	r2, [r7, #8]
 800e6c6:	4b6a      	ldr	r3, [pc, #424]	@ (800e870 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e6c8:	4013      	ands	r3, r2
 800e6ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e6d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	68ba      	ldr	r2, [r7, #8]
 800e6da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a64      	ldr	r2, [pc, #400]	@ (800e874 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	f000 80a9 	beq.w	800e83a <HAL_TIM_ConfigClockSource+0x1aa>
 800e6e8:	4a62      	ldr	r2, [pc, #392]	@ (800e874 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	f200 80ae 	bhi.w	800e84c <HAL_TIM_ConfigClockSource+0x1bc>
 800e6f0:	4a61      	ldr	r2, [pc, #388]	@ (800e878 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	f000 80a1 	beq.w	800e83a <HAL_TIM_ConfigClockSource+0x1aa>
 800e6f8:	4a5f      	ldr	r2, [pc, #380]	@ (800e878 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	f200 80a6 	bhi.w	800e84c <HAL_TIM_ConfigClockSource+0x1bc>
 800e700:	4a5e      	ldr	r2, [pc, #376]	@ (800e87c <HAL_TIM_ConfigClockSource+0x1ec>)
 800e702:	4293      	cmp	r3, r2
 800e704:	f000 8099 	beq.w	800e83a <HAL_TIM_ConfigClockSource+0x1aa>
 800e708:	4a5c      	ldr	r2, [pc, #368]	@ (800e87c <HAL_TIM_ConfigClockSource+0x1ec>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	f200 809e 	bhi.w	800e84c <HAL_TIM_ConfigClockSource+0x1bc>
 800e710:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e714:	f000 8091 	beq.w	800e83a <HAL_TIM_ConfigClockSource+0x1aa>
 800e718:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e71c:	f200 8096 	bhi.w	800e84c <HAL_TIM_ConfigClockSource+0x1bc>
 800e720:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e724:	f000 8089 	beq.w	800e83a <HAL_TIM_ConfigClockSource+0x1aa>
 800e728:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e72c:	f200 808e 	bhi.w	800e84c <HAL_TIM_ConfigClockSource+0x1bc>
 800e730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e734:	d03e      	beq.n	800e7b4 <HAL_TIM_ConfigClockSource+0x124>
 800e736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e73a:	f200 8087 	bhi.w	800e84c <HAL_TIM_ConfigClockSource+0x1bc>
 800e73e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e742:	f000 8086 	beq.w	800e852 <HAL_TIM_ConfigClockSource+0x1c2>
 800e746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e74a:	d87f      	bhi.n	800e84c <HAL_TIM_ConfigClockSource+0x1bc>
 800e74c:	2b70      	cmp	r3, #112	@ 0x70
 800e74e:	d01a      	beq.n	800e786 <HAL_TIM_ConfigClockSource+0xf6>
 800e750:	2b70      	cmp	r3, #112	@ 0x70
 800e752:	d87b      	bhi.n	800e84c <HAL_TIM_ConfigClockSource+0x1bc>
 800e754:	2b60      	cmp	r3, #96	@ 0x60
 800e756:	d050      	beq.n	800e7fa <HAL_TIM_ConfigClockSource+0x16a>
 800e758:	2b60      	cmp	r3, #96	@ 0x60
 800e75a:	d877      	bhi.n	800e84c <HAL_TIM_ConfigClockSource+0x1bc>
 800e75c:	2b50      	cmp	r3, #80	@ 0x50
 800e75e:	d03c      	beq.n	800e7da <HAL_TIM_ConfigClockSource+0x14a>
 800e760:	2b50      	cmp	r3, #80	@ 0x50
 800e762:	d873      	bhi.n	800e84c <HAL_TIM_ConfigClockSource+0x1bc>
 800e764:	2b40      	cmp	r3, #64	@ 0x40
 800e766:	d058      	beq.n	800e81a <HAL_TIM_ConfigClockSource+0x18a>
 800e768:	2b40      	cmp	r3, #64	@ 0x40
 800e76a:	d86f      	bhi.n	800e84c <HAL_TIM_ConfigClockSource+0x1bc>
 800e76c:	2b30      	cmp	r3, #48	@ 0x30
 800e76e:	d064      	beq.n	800e83a <HAL_TIM_ConfigClockSource+0x1aa>
 800e770:	2b30      	cmp	r3, #48	@ 0x30
 800e772:	d86b      	bhi.n	800e84c <HAL_TIM_ConfigClockSource+0x1bc>
 800e774:	2b20      	cmp	r3, #32
 800e776:	d060      	beq.n	800e83a <HAL_TIM_ConfigClockSource+0x1aa>
 800e778:	2b20      	cmp	r3, #32
 800e77a:	d867      	bhi.n	800e84c <HAL_TIM_ConfigClockSource+0x1bc>
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d05c      	beq.n	800e83a <HAL_TIM_ConfigClockSource+0x1aa>
 800e780:	2b10      	cmp	r3, #16
 800e782:	d05a      	beq.n	800e83a <HAL_TIM_ConfigClockSource+0x1aa>
 800e784:	e062      	b.n	800e84c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e796:	f000 fd59 	bl	800f24c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e7a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	68ba      	ldr	r2, [r7, #8]
 800e7b0:	609a      	str	r2, [r3, #8]
      break;
 800e7b2:	e04f      	b.n	800e854 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e7c4:	f000 fd42 	bl	800f24c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	689a      	ldr	r2, [r3, #8]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e7d6:	609a      	str	r2, [r3, #8]
      break;
 800e7d8:	e03c      	b.n	800e854 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	f000 fcb2 	bl	800f150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	2150      	movs	r1, #80	@ 0x50
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f000 fd0c 	bl	800f210 <TIM_ITRx_SetConfig>
      break;
 800e7f8:	e02c      	b.n	800e854 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e806:	461a      	mov	r2, r3
 800e808:	f000 fcd1 	bl	800f1ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	2160      	movs	r1, #96	@ 0x60
 800e812:	4618      	mov	r0, r3
 800e814:	f000 fcfc 	bl	800f210 <TIM_ITRx_SetConfig>
      break;
 800e818:	e01c      	b.n	800e854 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e826:	461a      	mov	r2, r3
 800e828:	f000 fc92 	bl	800f150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2140      	movs	r1, #64	@ 0x40
 800e832:	4618      	mov	r0, r3
 800e834:	f000 fcec 	bl	800f210 <TIM_ITRx_SetConfig>
      break;
 800e838:	e00c      	b.n	800e854 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4619      	mov	r1, r3
 800e844:	4610      	mov	r0, r2
 800e846:	f000 fce3 	bl	800f210 <TIM_ITRx_SetConfig>
      break;
 800e84a:	e003      	b.n	800e854 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e84c:	2301      	movs	r3, #1
 800e84e:	73fb      	strb	r3, [r7, #15]
      break;
 800e850:	e000      	b.n	800e854 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e852:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2201      	movs	r2, #1
 800e858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2200      	movs	r2, #0
 800e860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e864:	7bfb      	ldrb	r3, [r7, #15]
}
 800e866:	4618      	mov	r0, r3
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	ffceff88 	.word	0xffceff88
 800e874:	00100040 	.word	0x00100040
 800e878:	00100030 	.word	0x00100030
 800e87c:	00100020 	.word	0x00100020

0800e880 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e880:	b480      	push	{r7}
 800e882:	b083      	sub	sp, #12
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800e888:	bf00      	nop
 800e88a:	370c      	adds	r7, #12
 800e88c:	46bd      	mov	sp, r7
 800e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e892:	4770      	bx	lr

0800e894 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e89c:	bf00      	nop
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d107      	bne.n	800e8d0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e8ce:	e02a      	b.n	800e926 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d107      	bne.n	800e8ea <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2202      	movs	r2, #2
 800e8de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e8e8:	e01d      	b.n	800e926 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ee:	687a      	ldr	r2, [r7, #4]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d107      	bne.n	800e904 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2204      	movs	r2, #4
 800e8f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e902:	e010      	b.n	800e926 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d107      	bne.n	800e91e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2208      	movs	r2, #8
 800e912:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2201      	movs	r2, #1
 800e918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e91c:	e003      	b.n	800e926 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2201      	movs	r2, #1
 800e922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800e926:	68f8      	ldr	r0, [r7, #12]
 800e928:	f7ff ffb4 	bl	800e894 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2200      	movs	r2, #0
 800e930:	771a      	strb	r2, [r3, #28]
}
 800e932:	bf00      	nop
 800e934:	3710      	adds	r7, #16
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}

0800e93a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b084      	sub	sp, #16
 800e93e:	af00      	add	r7, sp, #0
 800e940:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e946:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d10b      	bne.n	800e96a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2201      	movs	r2, #1
 800e956:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	69db      	ldr	r3, [r3, #28]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d136      	bne.n	800e9ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2201      	movs	r2, #1
 800e964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e968:	e031      	b.n	800e9ce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	429a      	cmp	r2, r3
 800e972:	d10b      	bne.n	800e98c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2202      	movs	r2, #2
 800e978:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	69db      	ldr	r3, [r3, #28]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d125      	bne.n	800e9ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2201      	movs	r2, #1
 800e986:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e98a:	e020      	b.n	800e9ce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	429a      	cmp	r2, r3
 800e994:	d10b      	bne.n	800e9ae <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	2204      	movs	r2, #4
 800e99a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	69db      	ldr	r3, [r3, #28]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d114      	bne.n	800e9ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e9ac:	e00f      	b.n	800e9ce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d10a      	bne.n	800e9ce <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2208      	movs	r2, #8
 800e9bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	69db      	ldr	r3, [r3, #28]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d103      	bne.n	800e9ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	2201      	movs	r2, #1
 800e9ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9ce:	68f8      	ldr	r0, [r7, #12]
 800e9d0:	f7f3 feaa 	bl	8002728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	771a      	strb	r2, [r3, #28]
}
 800e9da:	bf00      	nop
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b084      	sub	sp, #16
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d103      	bne.n	800ea02 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	771a      	strb	r2, [r3, #28]
 800ea00:	e019      	b.n	800ea36 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d103      	bne.n	800ea14 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2202      	movs	r2, #2
 800ea10:	771a      	strb	r2, [r3, #28]
 800ea12:	e010      	b.n	800ea36 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d103      	bne.n	800ea26 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2204      	movs	r2, #4
 800ea22:	771a      	strb	r2, [r3, #28]
 800ea24:	e007      	b.n	800ea36 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d102      	bne.n	800ea36 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2208      	movs	r2, #8
 800ea34:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800ea36:	68f8      	ldr	r0, [r7, #12]
 800ea38:	f7ff ff22 	bl	800e880 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	771a      	strb	r2, [r3, #28]
}
 800ea42:	bf00      	nop
 800ea44:	3710      	adds	r7, #16
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
	...

0800ea4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b085      	sub	sp, #20
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4a47      	ldr	r2, [pc, #284]	@ (800eb7c <TIM_Base_SetConfig+0x130>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d013      	beq.n	800ea8c <TIM_Base_SetConfig+0x40>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea6a:	d00f      	beq.n	800ea8c <TIM_Base_SetConfig+0x40>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	4a44      	ldr	r2, [pc, #272]	@ (800eb80 <TIM_Base_SetConfig+0x134>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d00b      	beq.n	800ea8c <TIM_Base_SetConfig+0x40>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4a43      	ldr	r2, [pc, #268]	@ (800eb84 <TIM_Base_SetConfig+0x138>)
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d007      	beq.n	800ea8c <TIM_Base_SetConfig+0x40>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4a42      	ldr	r2, [pc, #264]	@ (800eb88 <TIM_Base_SetConfig+0x13c>)
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d003      	beq.n	800ea8c <TIM_Base_SetConfig+0x40>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	4a41      	ldr	r2, [pc, #260]	@ (800eb8c <TIM_Base_SetConfig+0x140>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d108      	bne.n	800ea9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	68fa      	ldr	r2, [r7, #12]
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	4a36      	ldr	r2, [pc, #216]	@ (800eb7c <TIM_Base_SetConfig+0x130>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d027      	beq.n	800eaf6 <TIM_Base_SetConfig+0xaa>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eaac:	d023      	beq.n	800eaf6 <TIM_Base_SetConfig+0xaa>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4a33      	ldr	r2, [pc, #204]	@ (800eb80 <TIM_Base_SetConfig+0x134>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d01f      	beq.n	800eaf6 <TIM_Base_SetConfig+0xaa>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	4a32      	ldr	r2, [pc, #200]	@ (800eb84 <TIM_Base_SetConfig+0x138>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d01b      	beq.n	800eaf6 <TIM_Base_SetConfig+0xaa>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4a31      	ldr	r2, [pc, #196]	@ (800eb88 <TIM_Base_SetConfig+0x13c>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d017      	beq.n	800eaf6 <TIM_Base_SetConfig+0xaa>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a30      	ldr	r2, [pc, #192]	@ (800eb8c <TIM_Base_SetConfig+0x140>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d013      	beq.n	800eaf6 <TIM_Base_SetConfig+0xaa>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	4a2f      	ldr	r2, [pc, #188]	@ (800eb90 <TIM_Base_SetConfig+0x144>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d00f      	beq.n	800eaf6 <TIM_Base_SetConfig+0xaa>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4a2e      	ldr	r2, [pc, #184]	@ (800eb94 <TIM_Base_SetConfig+0x148>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d00b      	beq.n	800eaf6 <TIM_Base_SetConfig+0xaa>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	4a2d      	ldr	r2, [pc, #180]	@ (800eb98 <TIM_Base_SetConfig+0x14c>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d007      	beq.n	800eaf6 <TIM_Base_SetConfig+0xaa>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	4a2c      	ldr	r2, [pc, #176]	@ (800eb9c <TIM_Base_SetConfig+0x150>)
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d003      	beq.n	800eaf6 <TIM_Base_SetConfig+0xaa>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4a2b      	ldr	r2, [pc, #172]	@ (800eba0 <TIM_Base_SetConfig+0x154>)
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d108      	bne.n	800eb08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eafc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	68db      	ldr	r3, [r3, #12]
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	4313      	orrs	r3, r2
 800eb06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	695b      	ldr	r3, [r3, #20]
 800eb12:	4313      	orrs	r3, r2
 800eb14:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	689a      	ldr	r2, [r3, #8]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	4a14      	ldr	r2, [pc, #80]	@ (800eb7c <TIM_Base_SetConfig+0x130>)
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	d00f      	beq.n	800eb4e <TIM_Base_SetConfig+0x102>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	4a16      	ldr	r2, [pc, #88]	@ (800eb8c <TIM_Base_SetConfig+0x140>)
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d00b      	beq.n	800eb4e <TIM_Base_SetConfig+0x102>
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	4a15      	ldr	r2, [pc, #84]	@ (800eb90 <TIM_Base_SetConfig+0x144>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d007      	beq.n	800eb4e <TIM_Base_SetConfig+0x102>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	4a14      	ldr	r2, [pc, #80]	@ (800eb94 <TIM_Base_SetConfig+0x148>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d003      	beq.n	800eb4e <TIM_Base_SetConfig+0x102>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	4a13      	ldr	r2, [pc, #76]	@ (800eb98 <TIM_Base_SetConfig+0x14c>)
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d103      	bne.n	800eb56 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	691a      	ldr	r2, [r3, #16]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f043 0204 	orr.w	r2, r3, #4
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2201      	movs	r2, #1
 800eb66:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	68fa      	ldr	r2, [r7, #12]
 800eb6c:	601a      	str	r2, [r3, #0]
}
 800eb6e:	bf00      	nop
 800eb70:	3714      	adds	r7, #20
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr
 800eb7a:	bf00      	nop
 800eb7c:	40010000 	.word	0x40010000
 800eb80:	40000400 	.word	0x40000400
 800eb84:	40000800 	.word	0x40000800
 800eb88:	40000c00 	.word	0x40000c00
 800eb8c:	40010400 	.word	0x40010400
 800eb90:	40014000 	.word	0x40014000
 800eb94:	40014400 	.word	0x40014400
 800eb98:	40014800 	.word	0x40014800
 800eb9c:	4000e000 	.word	0x4000e000
 800eba0:	4000e400 	.word	0x4000e400

0800eba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b087      	sub	sp, #28
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6a1b      	ldr	r3, [r3, #32]
 800ebb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6a1b      	ldr	r3, [r3, #32]
 800ebb8:	f023 0201 	bic.w	r2, r3, #1
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	699b      	ldr	r3, [r3, #24]
 800ebca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	4b37      	ldr	r3, [pc, #220]	@ (800ecac <TIM_OC1_SetConfig+0x108>)
 800ebd0:	4013      	ands	r3, r2
 800ebd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f023 0303 	bic.w	r3, r3, #3
 800ebda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	68fa      	ldr	r2, [r7, #12]
 800ebe2:	4313      	orrs	r3, r2
 800ebe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	f023 0302 	bic.w	r3, r3, #2
 800ebec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	697a      	ldr	r2, [r7, #20]
 800ebf4:	4313      	orrs	r3, r2
 800ebf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	4a2d      	ldr	r2, [pc, #180]	@ (800ecb0 <TIM_OC1_SetConfig+0x10c>)
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d00f      	beq.n	800ec20 <TIM_OC1_SetConfig+0x7c>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	4a2c      	ldr	r2, [pc, #176]	@ (800ecb4 <TIM_OC1_SetConfig+0x110>)
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d00b      	beq.n	800ec20 <TIM_OC1_SetConfig+0x7c>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	4a2b      	ldr	r2, [pc, #172]	@ (800ecb8 <TIM_OC1_SetConfig+0x114>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d007      	beq.n	800ec20 <TIM_OC1_SetConfig+0x7c>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	4a2a      	ldr	r2, [pc, #168]	@ (800ecbc <TIM_OC1_SetConfig+0x118>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d003      	beq.n	800ec20 <TIM_OC1_SetConfig+0x7c>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	4a29      	ldr	r2, [pc, #164]	@ (800ecc0 <TIM_OC1_SetConfig+0x11c>)
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	d10c      	bne.n	800ec3a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	f023 0308 	bic.w	r3, r3, #8
 800ec26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	68db      	ldr	r3, [r3, #12]
 800ec2c:	697a      	ldr	r2, [r7, #20]
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	f023 0304 	bic.w	r3, r3, #4
 800ec38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	4a1c      	ldr	r2, [pc, #112]	@ (800ecb0 <TIM_OC1_SetConfig+0x10c>)
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d00f      	beq.n	800ec62 <TIM_OC1_SetConfig+0xbe>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	4a1b      	ldr	r2, [pc, #108]	@ (800ecb4 <TIM_OC1_SetConfig+0x110>)
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d00b      	beq.n	800ec62 <TIM_OC1_SetConfig+0xbe>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	4a1a      	ldr	r2, [pc, #104]	@ (800ecb8 <TIM_OC1_SetConfig+0x114>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d007      	beq.n	800ec62 <TIM_OC1_SetConfig+0xbe>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	4a19      	ldr	r2, [pc, #100]	@ (800ecbc <TIM_OC1_SetConfig+0x118>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d003      	beq.n	800ec62 <TIM_OC1_SetConfig+0xbe>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	4a18      	ldr	r2, [pc, #96]	@ (800ecc0 <TIM_OC1_SetConfig+0x11c>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d111      	bne.n	800ec86 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ec70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	695b      	ldr	r3, [r3, #20]
 800ec76:	693a      	ldr	r2, [r7, #16]
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	699b      	ldr	r3, [r3, #24]
 800ec80:	693a      	ldr	r2, [r7, #16]
 800ec82:	4313      	orrs	r3, r2
 800ec84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	693a      	ldr	r2, [r7, #16]
 800ec8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	68fa      	ldr	r2, [r7, #12]
 800ec90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	685a      	ldr	r2, [r3, #4]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	697a      	ldr	r2, [r7, #20]
 800ec9e:	621a      	str	r2, [r3, #32]
}
 800eca0:	bf00      	nop
 800eca2:	371c      	adds	r7, #28
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr
 800ecac:	fffeff8f 	.word	0xfffeff8f
 800ecb0:	40010000 	.word	0x40010000
 800ecb4:	40010400 	.word	0x40010400
 800ecb8:	40014000 	.word	0x40014000
 800ecbc:	40014400 	.word	0x40014400
 800ecc0:	40014800 	.word	0x40014800

0800ecc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b087      	sub	sp, #28
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6a1b      	ldr	r3, [r3, #32]
 800ecd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6a1b      	ldr	r3, [r3, #32]
 800ecd8:	f023 0210 	bic.w	r2, r3, #16
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	699b      	ldr	r3, [r3, #24]
 800ecea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ecec:	68fa      	ldr	r2, [r7, #12]
 800ecee:	4b34      	ldr	r3, [pc, #208]	@ (800edc0 <TIM_OC2_SetConfig+0xfc>)
 800ecf0:	4013      	ands	r3, r2
 800ecf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ecfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	021b      	lsls	r3, r3, #8
 800ed02:	68fa      	ldr	r2, [r7, #12]
 800ed04:	4313      	orrs	r3, r2
 800ed06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	f023 0320 	bic.w	r3, r3, #32
 800ed0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	689b      	ldr	r3, [r3, #8]
 800ed14:	011b      	lsls	r3, r3, #4
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	4313      	orrs	r3, r2
 800ed1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	4a29      	ldr	r2, [pc, #164]	@ (800edc4 <TIM_OC2_SetConfig+0x100>)
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d003      	beq.n	800ed2c <TIM_OC2_SetConfig+0x68>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4a28      	ldr	r2, [pc, #160]	@ (800edc8 <TIM_OC2_SetConfig+0x104>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d10d      	bne.n	800ed48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ed32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	011b      	lsls	r3, r3, #4
 800ed3a:	697a      	ldr	r2, [r7, #20]
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	4a1e      	ldr	r2, [pc, #120]	@ (800edc4 <TIM_OC2_SetConfig+0x100>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d00f      	beq.n	800ed70 <TIM_OC2_SetConfig+0xac>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4a1d      	ldr	r2, [pc, #116]	@ (800edc8 <TIM_OC2_SetConfig+0x104>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d00b      	beq.n	800ed70 <TIM_OC2_SetConfig+0xac>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	4a1c      	ldr	r2, [pc, #112]	@ (800edcc <TIM_OC2_SetConfig+0x108>)
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d007      	beq.n	800ed70 <TIM_OC2_SetConfig+0xac>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	4a1b      	ldr	r2, [pc, #108]	@ (800edd0 <TIM_OC2_SetConfig+0x10c>)
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d003      	beq.n	800ed70 <TIM_OC2_SetConfig+0xac>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	4a1a      	ldr	r2, [pc, #104]	@ (800edd4 <TIM_OC2_SetConfig+0x110>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d113      	bne.n	800ed98 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ed76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ed7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	695b      	ldr	r3, [r3, #20]
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	693a      	ldr	r2, [r7, #16]
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	699b      	ldr	r3, [r3, #24]
 800ed90:	009b      	lsls	r3, r3, #2
 800ed92:	693a      	ldr	r2, [r7, #16]
 800ed94:	4313      	orrs	r3, r2
 800ed96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	693a      	ldr	r2, [r7, #16]
 800ed9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	68fa      	ldr	r2, [r7, #12]
 800eda2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	685a      	ldr	r2, [r3, #4]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	697a      	ldr	r2, [r7, #20]
 800edb0:	621a      	str	r2, [r3, #32]
}
 800edb2:	bf00      	nop
 800edb4:	371c      	adds	r7, #28
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop
 800edc0:	feff8fff 	.word	0xfeff8fff
 800edc4:	40010000 	.word	0x40010000
 800edc8:	40010400 	.word	0x40010400
 800edcc:	40014000 	.word	0x40014000
 800edd0:	40014400 	.word	0x40014400
 800edd4:	40014800 	.word	0x40014800

0800edd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800edd8:	b480      	push	{r7}
 800edda:	b087      	sub	sp, #28
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6a1b      	ldr	r3, [r3, #32]
 800ede6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6a1b      	ldr	r3, [r3, #32]
 800edec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	69db      	ldr	r3, [r3, #28]
 800edfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ee00:	68fa      	ldr	r2, [r7, #12]
 800ee02:	4b33      	ldr	r3, [pc, #204]	@ (800eed0 <TIM_OC3_SetConfig+0xf8>)
 800ee04:	4013      	ands	r3, r2
 800ee06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f023 0303 	bic.w	r3, r3, #3
 800ee0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	68fa      	ldr	r2, [r7, #12]
 800ee16:	4313      	orrs	r3, r2
 800ee18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ee20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	689b      	ldr	r3, [r3, #8]
 800ee26:	021b      	lsls	r3, r3, #8
 800ee28:	697a      	ldr	r2, [r7, #20]
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	4a28      	ldr	r2, [pc, #160]	@ (800eed4 <TIM_OC3_SetConfig+0xfc>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d003      	beq.n	800ee3e <TIM_OC3_SetConfig+0x66>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	4a27      	ldr	r2, [pc, #156]	@ (800eed8 <TIM_OC3_SetConfig+0x100>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d10d      	bne.n	800ee5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ee44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	021b      	lsls	r3, r3, #8
 800ee4c:	697a      	ldr	r2, [r7, #20]
 800ee4e:	4313      	orrs	r3, r2
 800ee50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ee58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4a1d      	ldr	r2, [pc, #116]	@ (800eed4 <TIM_OC3_SetConfig+0xfc>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d00f      	beq.n	800ee82 <TIM_OC3_SetConfig+0xaa>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4a1c      	ldr	r2, [pc, #112]	@ (800eed8 <TIM_OC3_SetConfig+0x100>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d00b      	beq.n	800ee82 <TIM_OC3_SetConfig+0xaa>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	4a1b      	ldr	r2, [pc, #108]	@ (800eedc <TIM_OC3_SetConfig+0x104>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d007      	beq.n	800ee82 <TIM_OC3_SetConfig+0xaa>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	4a1a      	ldr	r2, [pc, #104]	@ (800eee0 <TIM_OC3_SetConfig+0x108>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d003      	beq.n	800ee82 <TIM_OC3_SetConfig+0xaa>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	4a19      	ldr	r2, [pc, #100]	@ (800eee4 <TIM_OC3_SetConfig+0x10c>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d113      	bne.n	800eeaa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ee88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ee90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	695b      	ldr	r3, [r3, #20]
 800ee96:	011b      	lsls	r3, r3, #4
 800ee98:	693a      	ldr	r2, [r7, #16]
 800ee9a:	4313      	orrs	r3, r2
 800ee9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	699b      	ldr	r3, [r3, #24]
 800eea2:	011b      	lsls	r3, r3, #4
 800eea4:	693a      	ldr	r2, [r7, #16]
 800eea6:	4313      	orrs	r3, r2
 800eea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	693a      	ldr	r2, [r7, #16]
 800eeae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	68fa      	ldr	r2, [r7, #12]
 800eeb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	685a      	ldr	r2, [r3, #4]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	697a      	ldr	r2, [r7, #20]
 800eec2:	621a      	str	r2, [r3, #32]
}
 800eec4:	bf00      	nop
 800eec6:	371c      	adds	r7, #28
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr
 800eed0:	fffeff8f 	.word	0xfffeff8f
 800eed4:	40010000 	.word	0x40010000
 800eed8:	40010400 	.word	0x40010400
 800eedc:	40014000 	.word	0x40014000
 800eee0:	40014400 	.word	0x40014400
 800eee4:	40014800 	.word	0x40014800

0800eee8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eee8:	b480      	push	{r7}
 800eeea:	b087      	sub	sp, #28
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6a1b      	ldr	r3, [r3, #32]
 800eef6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6a1b      	ldr	r3, [r3, #32]
 800eefc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	69db      	ldr	r3, [r3, #28]
 800ef0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ef10:	68fa      	ldr	r2, [r7, #12]
 800ef12:	4b24      	ldr	r3, [pc, #144]	@ (800efa4 <TIM_OC4_SetConfig+0xbc>)
 800ef14:	4013      	ands	r3, r2
 800ef16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ef1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	021b      	lsls	r3, r3, #8
 800ef26:	68fa      	ldr	r2, [r7, #12]
 800ef28:	4313      	orrs	r3, r2
 800ef2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ef32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	689b      	ldr	r3, [r3, #8]
 800ef38:	031b      	lsls	r3, r3, #12
 800ef3a:	693a      	ldr	r2, [r7, #16]
 800ef3c:	4313      	orrs	r3, r2
 800ef3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	4a19      	ldr	r2, [pc, #100]	@ (800efa8 <TIM_OC4_SetConfig+0xc0>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d00f      	beq.n	800ef68 <TIM_OC4_SetConfig+0x80>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4a18      	ldr	r2, [pc, #96]	@ (800efac <TIM_OC4_SetConfig+0xc4>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d00b      	beq.n	800ef68 <TIM_OC4_SetConfig+0x80>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	4a17      	ldr	r2, [pc, #92]	@ (800efb0 <TIM_OC4_SetConfig+0xc8>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d007      	beq.n	800ef68 <TIM_OC4_SetConfig+0x80>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4a16      	ldr	r2, [pc, #88]	@ (800efb4 <TIM_OC4_SetConfig+0xcc>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d003      	beq.n	800ef68 <TIM_OC4_SetConfig+0x80>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	4a15      	ldr	r2, [pc, #84]	@ (800efb8 <TIM_OC4_SetConfig+0xd0>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d109      	bne.n	800ef7c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ef6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	695b      	ldr	r3, [r3, #20]
 800ef74:	019b      	lsls	r3, r3, #6
 800ef76:	697a      	ldr	r2, [r7, #20]
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	697a      	ldr	r2, [r7, #20]
 800ef80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	68fa      	ldr	r2, [r7, #12]
 800ef86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	685a      	ldr	r2, [r3, #4]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	693a      	ldr	r2, [r7, #16]
 800ef94:	621a      	str	r2, [r3, #32]
}
 800ef96:	bf00      	nop
 800ef98:	371c      	adds	r7, #28
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	feff8fff 	.word	0xfeff8fff
 800efa8:	40010000 	.word	0x40010000
 800efac:	40010400 	.word	0x40010400
 800efb0:	40014000 	.word	0x40014000
 800efb4:	40014400 	.word	0x40014400
 800efb8:	40014800 	.word	0x40014800

0800efbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b087      	sub	sp, #28
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6a1b      	ldr	r3, [r3, #32]
 800efca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6a1b      	ldr	r3, [r3, #32]
 800efd0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800efe4:	68fa      	ldr	r2, [r7, #12]
 800efe6:	4b21      	ldr	r3, [pc, #132]	@ (800f06c <TIM_OC5_SetConfig+0xb0>)
 800efe8:	4013      	ands	r3, r2
 800efea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	68fa      	ldr	r2, [r7, #12]
 800eff2:	4313      	orrs	r3, r2
 800eff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800effc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	689b      	ldr	r3, [r3, #8]
 800f002:	041b      	lsls	r3, r3, #16
 800f004:	693a      	ldr	r2, [r7, #16]
 800f006:	4313      	orrs	r3, r2
 800f008:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	4a18      	ldr	r2, [pc, #96]	@ (800f070 <TIM_OC5_SetConfig+0xb4>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d00f      	beq.n	800f032 <TIM_OC5_SetConfig+0x76>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	4a17      	ldr	r2, [pc, #92]	@ (800f074 <TIM_OC5_SetConfig+0xb8>)
 800f016:	4293      	cmp	r3, r2
 800f018:	d00b      	beq.n	800f032 <TIM_OC5_SetConfig+0x76>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	4a16      	ldr	r2, [pc, #88]	@ (800f078 <TIM_OC5_SetConfig+0xbc>)
 800f01e:	4293      	cmp	r3, r2
 800f020:	d007      	beq.n	800f032 <TIM_OC5_SetConfig+0x76>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	4a15      	ldr	r2, [pc, #84]	@ (800f07c <TIM_OC5_SetConfig+0xc0>)
 800f026:	4293      	cmp	r3, r2
 800f028:	d003      	beq.n	800f032 <TIM_OC5_SetConfig+0x76>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	4a14      	ldr	r2, [pc, #80]	@ (800f080 <TIM_OC5_SetConfig+0xc4>)
 800f02e:	4293      	cmp	r3, r2
 800f030:	d109      	bne.n	800f046 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f038:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	695b      	ldr	r3, [r3, #20]
 800f03e:	021b      	lsls	r3, r3, #8
 800f040:	697a      	ldr	r2, [r7, #20]
 800f042:	4313      	orrs	r3, r2
 800f044:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	697a      	ldr	r2, [r7, #20]
 800f04a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	68fa      	ldr	r2, [r7, #12]
 800f050:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	685a      	ldr	r2, [r3, #4]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	693a      	ldr	r2, [r7, #16]
 800f05e:	621a      	str	r2, [r3, #32]
}
 800f060:	bf00      	nop
 800f062:	371c      	adds	r7, #28
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr
 800f06c:	fffeff8f 	.word	0xfffeff8f
 800f070:	40010000 	.word	0x40010000
 800f074:	40010400 	.word	0x40010400
 800f078:	40014000 	.word	0x40014000
 800f07c:	40014400 	.word	0x40014400
 800f080:	40014800 	.word	0x40014800

0800f084 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f084:	b480      	push	{r7}
 800f086:	b087      	sub	sp, #28
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6a1b      	ldr	r3, [r3, #32]
 800f092:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6a1b      	ldr	r3, [r3, #32]
 800f098:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f0ac:	68fa      	ldr	r2, [r7, #12]
 800f0ae:	4b22      	ldr	r3, [pc, #136]	@ (800f138 <TIM_OC6_SetConfig+0xb4>)
 800f0b0:	4013      	ands	r3, r2
 800f0b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	021b      	lsls	r3, r3, #8
 800f0ba:	68fa      	ldr	r2, [r7, #12]
 800f0bc:	4313      	orrs	r3, r2
 800f0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f0c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	689b      	ldr	r3, [r3, #8]
 800f0cc:	051b      	lsls	r3, r3, #20
 800f0ce:	693a      	ldr	r2, [r7, #16]
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	4a19      	ldr	r2, [pc, #100]	@ (800f13c <TIM_OC6_SetConfig+0xb8>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d00f      	beq.n	800f0fc <TIM_OC6_SetConfig+0x78>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4a18      	ldr	r2, [pc, #96]	@ (800f140 <TIM_OC6_SetConfig+0xbc>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d00b      	beq.n	800f0fc <TIM_OC6_SetConfig+0x78>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4a17      	ldr	r2, [pc, #92]	@ (800f144 <TIM_OC6_SetConfig+0xc0>)
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d007      	beq.n	800f0fc <TIM_OC6_SetConfig+0x78>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	4a16      	ldr	r2, [pc, #88]	@ (800f148 <TIM_OC6_SetConfig+0xc4>)
 800f0f0:	4293      	cmp	r3, r2
 800f0f2:	d003      	beq.n	800f0fc <TIM_OC6_SetConfig+0x78>
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	4a15      	ldr	r2, [pc, #84]	@ (800f14c <TIM_OC6_SetConfig+0xc8>)
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d109      	bne.n	800f110 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f102:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	695b      	ldr	r3, [r3, #20]
 800f108:	029b      	lsls	r3, r3, #10
 800f10a:	697a      	ldr	r2, [r7, #20]
 800f10c:	4313      	orrs	r3, r2
 800f10e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	697a      	ldr	r2, [r7, #20]
 800f114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	68fa      	ldr	r2, [r7, #12]
 800f11a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	685a      	ldr	r2, [r3, #4]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	693a      	ldr	r2, [r7, #16]
 800f128:	621a      	str	r2, [r3, #32]
}
 800f12a:	bf00      	nop
 800f12c:	371c      	adds	r7, #28
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr
 800f136:	bf00      	nop
 800f138:	feff8fff 	.word	0xfeff8fff
 800f13c:	40010000 	.word	0x40010000
 800f140:	40010400 	.word	0x40010400
 800f144:	40014000 	.word	0x40014000
 800f148:	40014400 	.word	0x40014400
 800f14c:	40014800 	.word	0x40014800

0800f150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f150:	b480      	push	{r7}
 800f152:	b087      	sub	sp, #28
 800f154:	af00      	add	r7, sp, #0
 800f156:	60f8      	str	r0, [r7, #12]
 800f158:	60b9      	str	r1, [r7, #8]
 800f15a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	6a1b      	ldr	r3, [r3, #32]
 800f160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	6a1b      	ldr	r3, [r3, #32]
 800f166:	f023 0201 	bic.w	r2, r3, #1
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	699b      	ldr	r3, [r3, #24]
 800f172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f17a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	011b      	lsls	r3, r3, #4
 800f180:	693a      	ldr	r2, [r7, #16]
 800f182:	4313      	orrs	r3, r2
 800f184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	f023 030a 	bic.w	r3, r3, #10
 800f18c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f18e:	697a      	ldr	r2, [r7, #20]
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	4313      	orrs	r3, r2
 800f194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	693a      	ldr	r2, [r7, #16]
 800f19a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	697a      	ldr	r2, [r7, #20]
 800f1a0:	621a      	str	r2, [r3, #32]
}
 800f1a2:	bf00      	nop
 800f1a4:	371c      	adds	r7, #28
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr

0800f1ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f1ae:	b480      	push	{r7}
 800f1b0:	b087      	sub	sp, #28
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	60f8      	str	r0, [r7, #12]
 800f1b6:	60b9      	str	r1, [r7, #8]
 800f1b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	6a1b      	ldr	r3, [r3, #32]
 800f1be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	6a1b      	ldr	r3, [r3, #32]
 800f1c4:	f023 0210 	bic.w	r2, r3, #16
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	699b      	ldr	r3, [r3, #24]
 800f1d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f1d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	031b      	lsls	r3, r3, #12
 800f1de:	693a      	ldr	r2, [r7, #16]
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f1ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	011b      	lsls	r3, r3, #4
 800f1f0:	697a      	ldr	r2, [r7, #20]
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	693a      	ldr	r2, [r7, #16]
 800f1fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	697a      	ldr	r2, [r7, #20]
 800f200:	621a      	str	r2, [r3, #32]
}
 800f202:	bf00      	nop
 800f204:	371c      	adds	r7, #28
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr
	...

0800f210 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f210:	b480      	push	{r7}
 800f212:	b085      	sub	sp, #20
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	689b      	ldr	r3, [r3, #8]
 800f21e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f220:	68fa      	ldr	r2, [r7, #12]
 800f222:	4b09      	ldr	r3, [pc, #36]	@ (800f248 <TIM_ITRx_SetConfig+0x38>)
 800f224:	4013      	ands	r3, r2
 800f226:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f228:	683a      	ldr	r2, [r7, #0]
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	4313      	orrs	r3, r2
 800f22e:	f043 0307 	orr.w	r3, r3, #7
 800f232:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	68fa      	ldr	r2, [r7, #12]
 800f238:	609a      	str	r2, [r3, #8]
}
 800f23a:	bf00      	nop
 800f23c:	3714      	adds	r7, #20
 800f23e:	46bd      	mov	sp, r7
 800f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f244:	4770      	bx	lr
 800f246:	bf00      	nop
 800f248:	ffcfff8f 	.word	0xffcfff8f

0800f24c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b087      	sub	sp, #28
 800f250:	af00      	add	r7, sp, #0
 800f252:	60f8      	str	r0, [r7, #12]
 800f254:	60b9      	str	r1, [r7, #8]
 800f256:	607a      	str	r2, [r7, #4]
 800f258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	021a      	lsls	r2, r3, #8
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	431a      	orrs	r2, r3
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	4313      	orrs	r3, r2
 800f274:	697a      	ldr	r2, [r7, #20]
 800f276:	4313      	orrs	r3, r2
 800f278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	697a      	ldr	r2, [r7, #20]
 800f27e:	609a      	str	r2, [r3, #8]
}
 800f280:	bf00      	nop
 800f282:	371c      	adds	r7, #28
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b087      	sub	sp, #28
 800f290:	af00      	add	r7, sp, #0
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	60b9      	str	r1, [r7, #8]
 800f296:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	f003 031f 	and.w	r3, r3, #31
 800f29e:	2201      	movs	r2, #1
 800f2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800f2a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	6a1a      	ldr	r2, [r3, #32]
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	43db      	mvns	r3, r3
 800f2ae:	401a      	ands	r2, r3
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	6a1a      	ldr	r2, [r3, #32]
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	f003 031f 	and.w	r3, r3, #31
 800f2be:	6879      	ldr	r1, [r7, #4]
 800f2c0:	fa01 f303 	lsl.w	r3, r1, r3
 800f2c4:	431a      	orrs	r2, r3
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	621a      	str	r2, [r3, #32]
}
 800f2ca:	bf00      	nop
 800f2cc:	371c      	adds	r7, #28
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr
	...

0800f2d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b085      	sub	sp, #20
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d101      	bne.n	800f2f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f2ec:	2302      	movs	r3, #2
 800f2ee:	e077      	b.n	800f3e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2202      	movs	r2, #2
 800f2fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	685b      	ldr	r3, [r3, #4]
 800f306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	689b      	ldr	r3, [r3, #8]
 800f30e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4a35      	ldr	r2, [pc, #212]	@ (800f3ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f316:	4293      	cmp	r3, r2
 800f318:	d004      	beq.n	800f324 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	4a34      	ldr	r2, [pc, #208]	@ (800f3f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d108      	bne.n	800f336 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f32a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	4313      	orrs	r3, r2
 800f334:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f33c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	68fa      	ldr	r2, [r7, #12]
 800f344:	4313      	orrs	r3, r2
 800f346:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	68fa      	ldr	r2, [r7, #12]
 800f34e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4a25      	ldr	r2, [pc, #148]	@ (800f3ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d02c      	beq.n	800f3b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f362:	d027      	beq.n	800f3b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4a22      	ldr	r2, [pc, #136]	@ (800f3f4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d022      	beq.n	800f3b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	4a21      	ldr	r2, [pc, #132]	@ (800f3f8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f374:	4293      	cmp	r3, r2
 800f376:	d01d      	beq.n	800f3b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4a1f      	ldr	r2, [pc, #124]	@ (800f3fc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d018      	beq.n	800f3b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	4a1a      	ldr	r2, [pc, #104]	@ (800f3f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	d013      	beq.n	800f3b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	4a1b      	ldr	r2, [pc, #108]	@ (800f400 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d00e      	beq.n	800f3b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	4a1a      	ldr	r2, [pc, #104]	@ (800f404 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d009      	beq.n	800f3b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	4a18      	ldr	r2, [pc, #96]	@ (800f408 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d004      	beq.n	800f3b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	4a17      	ldr	r2, [pc, #92]	@ (800f40c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d10c      	bne.n	800f3ce <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f3ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	689b      	ldr	r3, [r3, #8]
 800f3c0:	68ba      	ldr	r2, [r7, #8]
 800f3c2:	4313      	orrs	r3, r2
 800f3c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	68ba      	ldr	r2, [r7, #8]
 800f3cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f3de:	2300      	movs	r3, #0
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3714      	adds	r7, #20
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr
 800f3ec:	40010000 	.word	0x40010000
 800f3f0:	40010400 	.word	0x40010400
 800f3f4:	40000400 	.word	0x40000400
 800f3f8:	40000800 	.word	0x40000800
 800f3fc:	40000c00 	.word	0x40000c00
 800f400:	40001800 	.word	0x40001800
 800f404:	40014000 	.word	0x40014000
 800f408:	4000e000 	.word	0x4000e000
 800f40c:	4000e400 	.word	0x4000e400

0800f410 <LL_GPIO_SetPinMode>:
{
 800f410:	b480      	push	{r7}
 800f412:	b085      	sub	sp, #20
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	6819      	ldr	r1, [r3, #0]
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	fb03 f203 	mul.w	r2, r3, r3
 800f426:	4613      	mov	r3, r2
 800f428:	005b      	lsls	r3, r3, #1
 800f42a:	4413      	add	r3, r2
 800f42c:	43db      	mvns	r3, r3
 800f42e:	ea01 0203 	and.w	r2, r1, r3
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	fb03 f303 	mul.w	r3, r3, r3
 800f438:	6879      	ldr	r1, [r7, #4]
 800f43a:	fb01 f303 	mul.w	r3, r1, r3
 800f43e:	431a      	orrs	r2, r3
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	601a      	str	r2, [r3, #0]
}
 800f444:	bf00      	nop
 800f446:	3714      	adds	r7, #20
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr

0800f450 <LL_GPIO_SetPinOutputType>:
{
 800f450:	b480      	push	{r7}
 800f452:	b085      	sub	sp, #20
 800f454:	af00      	add	r7, sp, #0
 800f456:	60f8      	str	r0, [r7, #12]
 800f458:	60b9      	str	r1, [r7, #8]
 800f45a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	685a      	ldr	r2, [r3, #4]
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	43db      	mvns	r3, r3
 800f464:	401a      	ands	r2, r3
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	6879      	ldr	r1, [r7, #4]
 800f46a:	fb01 f303 	mul.w	r3, r1, r3
 800f46e:	431a      	orrs	r2, r3
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	605a      	str	r2, [r3, #4]
}
 800f474:	bf00      	nop
 800f476:	3714      	adds	r7, #20
 800f478:	46bd      	mov	sp, r7
 800f47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47e:	4770      	bx	lr

0800f480 <LL_GPIO_SetPinSpeed>:
{
 800f480:	b480      	push	{r7}
 800f482:	b085      	sub	sp, #20
 800f484:	af00      	add	r7, sp, #0
 800f486:	60f8      	str	r0, [r7, #12]
 800f488:	60b9      	str	r1, [r7, #8]
 800f48a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	6899      	ldr	r1, [r3, #8]
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	fb03 f203 	mul.w	r2, r3, r3
 800f496:	4613      	mov	r3, r2
 800f498:	005b      	lsls	r3, r3, #1
 800f49a:	4413      	add	r3, r2
 800f49c:	43db      	mvns	r3, r3
 800f49e:	ea01 0203 	and.w	r2, r1, r3
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	fb03 f303 	mul.w	r3, r3, r3
 800f4a8:	6879      	ldr	r1, [r7, #4]
 800f4aa:	fb01 f303 	mul.w	r3, r1, r3
 800f4ae:	431a      	orrs	r2, r3
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	609a      	str	r2, [r3, #8]
}
 800f4b4:	bf00      	nop
 800f4b6:	3714      	adds	r7, #20
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <LL_GPIO_SetPinPull>:
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b085      	sub	sp, #20
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	68d9      	ldr	r1, [r3, #12]
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	fb03 f203 	mul.w	r2, r3, r3
 800f4d6:	4613      	mov	r3, r2
 800f4d8:	005b      	lsls	r3, r3, #1
 800f4da:	4413      	add	r3, r2
 800f4dc:	43db      	mvns	r3, r3
 800f4de:	ea01 0203 	and.w	r2, r1, r3
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	fb03 f303 	mul.w	r3, r3, r3
 800f4e8:	6879      	ldr	r1, [r7, #4]
 800f4ea:	fb01 f303 	mul.w	r3, r1, r3
 800f4ee:	431a      	orrs	r2, r3
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	60da      	str	r2, [r3, #12]
}
 800f4f4:	bf00      	nop
 800f4f6:	3714      	adds	r7, #20
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr

0800f500 <LL_GPIO_SetAFPin_0_7>:
{
 800f500:	b480      	push	{r7}
 800f502:	b085      	sub	sp, #20
 800f504:	af00      	add	r7, sp, #0
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	60b9      	str	r1, [r7, #8]
 800f50a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	6a19      	ldr	r1, [r3, #32]
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	fb03 f303 	mul.w	r3, r3, r3
 800f516:	68ba      	ldr	r2, [r7, #8]
 800f518:	fb02 f303 	mul.w	r3, r2, r3
 800f51c:	68ba      	ldr	r2, [r7, #8]
 800f51e:	fb03 f202 	mul.w	r2, r3, r2
 800f522:	4613      	mov	r3, r2
 800f524:	011b      	lsls	r3, r3, #4
 800f526:	1a9b      	subs	r3, r3, r2
 800f528:	43db      	mvns	r3, r3
 800f52a:	ea01 0203 	and.w	r2, r1, r3
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	fb03 f303 	mul.w	r3, r3, r3
 800f534:	68b9      	ldr	r1, [r7, #8]
 800f536:	fb01 f303 	mul.w	r3, r1, r3
 800f53a:	68b9      	ldr	r1, [r7, #8]
 800f53c:	fb01 f303 	mul.w	r3, r1, r3
 800f540:	6879      	ldr	r1, [r7, #4]
 800f542:	fb01 f303 	mul.w	r3, r1, r3
 800f546:	431a      	orrs	r2, r3
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	621a      	str	r2, [r3, #32]
}
 800f54c:	bf00      	nop
 800f54e:	3714      	adds	r7, #20
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr

0800f558 <LL_GPIO_SetAFPin_8_15>:
{
 800f558:	b480      	push	{r7}
 800f55a:	b085      	sub	sp, #20
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	0a1b      	lsrs	r3, r3, #8
 800f56c:	68ba      	ldr	r2, [r7, #8]
 800f56e:	0a12      	lsrs	r2, r2, #8
 800f570:	fb02 f303 	mul.w	r3, r2, r3
 800f574:	68ba      	ldr	r2, [r7, #8]
 800f576:	0a12      	lsrs	r2, r2, #8
 800f578:	fb02 f303 	mul.w	r3, r2, r3
 800f57c:	68ba      	ldr	r2, [r7, #8]
 800f57e:	0a12      	lsrs	r2, r2, #8
 800f580:	fb03 f202 	mul.w	r2, r3, r2
 800f584:	4613      	mov	r3, r2
 800f586:	011b      	lsls	r3, r3, #4
 800f588:	1a9b      	subs	r3, r3, r2
 800f58a:	43db      	mvns	r3, r3
 800f58c:	ea01 0203 	and.w	r2, r1, r3
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	0a1b      	lsrs	r3, r3, #8
 800f594:	68b9      	ldr	r1, [r7, #8]
 800f596:	0a09      	lsrs	r1, r1, #8
 800f598:	fb01 f303 	mul.w	r3, r1, r3
 800f59c:	68b9      	ldr	r1, [r7, #8]
 800f59e:	0a09      	lsrs	r1, r1, #8
 800f5a0:	fb01 f303 	mul.w	r3, r1, r3
 800f5a4:	68b9      	ldr	r1, [r7, #8]
 800f5a6:	0a09      	lsrs	r1, r1, #8
 800f5a8:	fb01 f303 	mul.w	r3, r1, r3
 800f5ac:	6879      	ldr	r1, [r7, #4]
 800f5ae:	fb01 f303 	mul.w	r3, r1, r3
 800f5b2:	431a      	orrs	r2, r3
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800f5b8:	bf00      	nop
 800f5ba:	3714      	adds	r7, #20
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr

0800f5c4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b088      	sub	sp, #32
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	fa93 f3a3 	rbit	r3, r3
 800f5da:	60fb      	str	r3, [r7, #12]
  return result;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d101      	bne.n	800f5ea <LL_GPIO_Init+0x26>
    return 32U;
 800f5e6:	2320      	movs	r3, #32
 800f5e8:	e003      	b.n	800f5f2 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	fab3 f383 	clz	r3, r3
 800f5f0:	b2db      	uxtb	r3, r3
 800f5f2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f5f4:	e048      	b.n	800f688 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	681a      	ldr	r2, [r3, #0]
 800f5fa:	2101      	movs	r1, #1
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	fa01 f303 	lsl.w	r3, r1, r3
 800f602:	4013      	ands	r3, r2
 800f604:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800f606:	69bb      	ldr	r3, [r7, #24]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d03a      	beq.n	800f682 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	2b01      	cmp	r3, #1
 800f612:	d003      	beq.n	800f61c <LL_GPIO_Init+0x58>
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	2b02      	cmp	r3, #2
 800f61a:	d10e      	bne.n	800f63a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	689b      	ldr	r3, [r3, #8]
 800f620:	461a      	mov	r2, r3
 800f622:	69b9      	ldr	r1, [r7, #24]
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f7ff ff2b 	bl	800f480 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	6819      	ldr	r1, [r3, #0]
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	461a      	mov	r2, r3
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f7ff ff0b 	bl	800f450 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	691b      	ldr	r3, [r3, #16]
 800f63e:	461a      	mov	r2, r3
 800f640:	69b9      	ldr	r1, [r7, #24]
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f7ff ff3c 	bl	800f4c0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	685b      	ldr	r3, [r3, #4]
 800f64c:	2b02      	cmp	r3, #2
 800f64e:	d111      	bne.n	800f674 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800f650:	69bb      	ldr	r3, [r7, #24]
 800f652:	2bff      	cmp	r3, #255	@ 0xff
 800f654:	d807      	bhi.n	800f666 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	695b      	ldr	r3, [r3, #20]
 800f65a:	461a      	mov	r2, r3
 800f65c:	69b9      	ldr	r1, [r7, #24]
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f7ff ff4e 	bl	800f500 <LL_GPIO_SetAFPin_0_7>
 800f664:	e006      	b.n	800f674 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	695b      	ldr	r3, [r3, #20]
 800f66a:	461a      	mov	r2, r3
 800f66c:	69b9      	ldr	r1, [r7, #24]
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f7ff ff72 	bl	800f558 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	461a      	mov	r2, r3
 800f67a:	69b9      	ldr	r1, [r7, #24]
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f7ff fec7 	bl	800f410 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800f682:	69fb      	ldr	r3, [r7, #28]
 800f684:	3301      	adds	r3, #1
 800f686:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	fa22 f303 	lsr.w	r3, r2, r3
 800f692:	2b00      	cmp	r3, #0
 800f694:	d1af      	bne.n	800f5f6 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800f696:	2300      	movs	r3, #0
}
 800f698:	4618      	mov	r0, r3
 800f69a:	3720      	adds	r7, #32
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800f6a4:	4b07      	ldr	r3, [pc, #28]	@ (800f6c4 <LL_RCC_HSE_IsReady+0x24>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f6ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f6b0:	d101      	bne.n	800f6b6 <LL_RCC_HSE_IsReady+0x16>
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	e000      	b.n	800f6b8 <LL_RCC_HSE_IsReady+0x18>
 800f6b6:	2300      	movs	r3, #0
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr
 800f6c2:	bf00      	nop
 800f6c4:	58024400 	.word	0x58024400

0800f6c8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800f6cc:	4b06      	ldr	r3, [pc, #24]	@ (800f6e8 <LL_RCC_HSI_IsReady+0x20>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f003 0304 	and.w	r3, r3, #4
 800f6d4:	2b04      	cmp	r3, #4
 800f6d6:	d101      	bne.n	800f6dc <LL_RCC_HSI_IsReady+0x14>
 800f6d8:	2301      	movs	r3, #1
 800f6da:	e000      	b.n	800f6de <LL_RCC_HSI_IsReady+0x16>
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr
 800f6e8:	58024400 	.word	0x58024400

0800f6ec <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 800f6f0:	4b04      	ldr	r3, [pc, #16]	@ (800f704 <LL_RCC_HSI_GetDivider+0x18>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	f003 0318 	and.w	r3, r3, #24
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f700:	4770      	bx	lr
 800f702:	bf00      	nop
 800f704:	58024400 	.word	0x58024400

0800f708 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 800f708:	b480      	push	{r7}
 800f70a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 800f70c:	4b07      	ldr	r3, [pc, #28]	@ (800f72c <LL_RCC_CSI_IsReady+0x24>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f714:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f718:	d101      	bne.n	800f71e <LL_RCC_CSI_IsReady+0x16>
 800f71a:	2301      	movs	r3, #1
 800f71c:	e000      	b.n	800f720 <LL_RCC_CSI_IsReady+0x18>
 800f71e:	2300      	movs	r3, #0
}
 800f720:	4618      	mov	r0, r3
 800f722:	46bd      	mov	sp, r7
 800f724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f728:	4770      	bx	lr
 800f72a:	bf00      	nop
 800f72c:	58024400 	.word	0x58024400

0800f730 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800f730:	b480      	push	{r7}
 800f732:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f734:	4b06      	ldr	r3, [pc, #24]	@ (800f750 <LL_RCC_LSE_IsReady+0x20>)
 800f736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f738:	f003 0302 	and.w	r3, r3, #2
 800f73c:	2b02      	cmp	r3, #2
 800f73e:	d101      	bne.n	800f744 <LL_RCC_LSE_IsReady+0x14>
 800f740:	2301      	movs	r3, #1
 800f742:	e000      	b.n	800f746 <LL_RCC_LSE_IsReady+0x16>
 800f744:	2300      	movs	r3, #0
}
 800f746:	4618      	mov	r0, r3
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr
 800f750:	58024400 	.word	0x58024400

0800f754 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800f754:	b480      	push	{r7}
 800f756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f758:	4b04      	ldr	r3, [pc, #16]	@ (800f76c <LL_RCC_GetSysClkSource+0x18>)
 800f75a:	691b      	ldr	r3, [r3, #16]
 800f75c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 800f760:	4618      	mov	r0, r3
 800f762:	46bd      	mov	sp, r7
 800f764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f768:	4770      	bx	lr
 800f76a:	bf00      	nop
 800f76c:	58024400 	.word	0x58024400

0800f770 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 800f770:	b480      	push	{r7}
 800f772:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 800f774:	4b04      	ldr	r3, [pc, #16]	@ (800f788 <LL_RCC_GetSysPrescaler+0x18>)
 800f776:	699b      	ldr	r3, [r3, #24]
 800f778:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	46bd      	mov	sp, r7
 800f780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f784:	4770      	bx	lr
 800f786:	bf00      	nop
 800f788:	58024400 	.word	0x58024400

0800f78c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800f78c:	b480      	push	{r7}
 800f78e:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 800f790:	4b04      	ldr	r3, [pc, #16]	@ (800f7a4 <LL_RCC_GetAHBPrescaler+0x18>)
 800f792:	699b      	ldr	r3, [r3, #24]
 800f794:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 800f798:	4618      	mov	r0, r3
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop
 800f7a4:	58024400 	.word	0x58024400

0800f7a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 800f7ac:	4b04      	ldr	r3, [pc, #16]	@ (800f7c0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800f7ae:	69db      	ldr	r3, [r3, #28]
 800f7b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7bc:	4770      	bx	lr
 800f7be:	bf00      	nop
 800f7c0:	58024400 	.word	0x58024400

0800f7c4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 800f7c8:	4b04      	ldr	r3, [pc, #16]	@ (800f7dc <LL_RCC_GetAPB2Prescaler+0x18>)
 800f7ca:	69db      	ldr	r3, [r3, #28]
 800f7cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d8:	4770      	bx	lr
 800f7da:	bf00      	nop
 800f7dc:	58024400 	.word	0x58024400

0800f7e0 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b085      	sub	sp, #20
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	b2da      	uxtb	r2, r3
 800f7ec:	4b0e      	ldr	r3, [pc, #56]	@ (800f828 <LL_RCC_GetClockSource+0x48>)
 800f7ee:	4413      	add	r3, r2
 800f7f0:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681a      	ldr	r2, [r3, #0]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	0e19      	lsrs	r1, r3, #24
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	0a1b      	lsrs	r3, r3, #8
 800f7fe:	f003 031f 	and.w	r3, r3, #31
 800f802:	fa01 f303 	lsl.w	r3, r1, r3
 800f806:	401a      	ands	r2, r3
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	0a1b      	lsrs	r3, r3, #8
 800f80c:	f003 031f 	and.w	r3, r3, #31
 800f810:	fa22 f303 	lsr.w	r3, r2, r3
 800f814:	041a      	lsls	r2, r3, #16
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4313      	orrs	r3, r2
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3714      	adds	r7, #20
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr
 800f826:	bf00      	nop
 800f828:	5802444c 	.word	0x5802444c

0800f82c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f7ff ffd3 	bl	800f7e0 <LL_RCC_GetClockSource>
 800f83a:	4603      	mov	r3, r0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3708      	adds	r7, #8
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 800f844:	b480      	push	{r7}
 800f846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 800f848:	4b04      	ldr	r3, [pc, #16]	@ (800f85c <LL_RCC_PLL_GetSource+0x18>)
 800f84a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f84c:	f003 0303 	and.w	r3, r3, #3
}
 800f850:	4618      	mov	r0, r3
 800f852:	46bd      	mov	sp, r7
 800f854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f858:	4770      	bx	lr
 800f85a:	bf00      	nop
 800f85c:	58024400 	.word	0x58024400

0800f860 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 800f860:	b480      	push	{r7}
 800f862:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 800f864:	4b07      	ldr	r3, [pc, #28]	@ (800f884 <LL_RCC_PLL1P_IsEnabled+0x24>)
 800f866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f86c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f870:	d101      	bne.n	800f876 <LL_RCC_PLL1P_IsEnabled+0x16>
 800f872:	2301      	movs	r3, #1
 800f874:	e000      	b.n	800f878 <LL_RCC_PLL1P_IsEnabled+0x18>
 800f876:	2300      	movs	r3, #0
}
 800f878:	4618      	mov	r0, r3
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr
 800f882:	bf00      	nop
 800f884:	58024400 	.word	0x58024400

0800f888 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 800f888:	b480      	push	{r7}
 800f88a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 800f88c:	4b07      	ldr	r3, [pc, #28]	@ (800f8ac <LL_RCC_PLL1Q_IsEnabled+0x24>)
 800f88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f898:	d101      	bne.n	800f89e <LL_RCC_PLL1Q_IsEnabled+0x16>
 800f89a:	2301      	movs	r3, #1
 800f89c:	e000      	b.n	800f8a0 <LL_RCC_PLL1Q_IsEnabled+0x18>
 800f89e:	2300      	movs	r3, #0
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr
 800f8aa:	bf00      	nop
 800f8ac:	58024400 	.word	0x58024400

0800f8b0 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 800f8b4:	4b07      	ldr	r3, [pc, #28]	@ (800f8d4 <LL_RCC_PLL1R_IsEnabled+0x24>)
 800f8b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f8bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f8c0:	d101      	bne.n	800f8c6 <LL_RCC_PLL1R_IsEnabled+0x16>
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	e000      	b.n	800f8c8 <LL_RCC_PLL1R_IsEnabled+0x18>
 800f8c6:	2300      	movs	r3, #0
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop
 800f8d4:	58024400 	.word	0x58024400

0800f8d8 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 800f8dc:	4b06      	ldr	r3, [pc, #24]	@ (800f8f8 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 800f8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8e0:	f003 0301 	and.w	r3, r3, #1
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d101      	bne.n	800f8ec <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	e000      	b.n	800f8ee <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 800f8ec:	2300      	movs	r3, #0
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr
 800f8f8:	58024400 	.word	0x58024400

0800f8fc <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 800f900:	4b04      	ldr	r3, [pc, #16]	@ (800f914 <LL_RCC_PLL1_GetN+0x18>)
 800f902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f908:	3301      	adds	r3, #1
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	46bd      	mov	sp, r7
 800f90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f912:	4770      	bx	lr
 800f914:	58024400 	.word	0x58024400

0800f918 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 800f918:	b480      	push	{r7}
 800f91a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 800f91c:	4b04      	ldr	r3, [pc, #16]	@ (800f930 <LL_RCC_PLL1_GetM+0x18>)
 800f91e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f920:	091b      	lsrs	r3, r3, #4
 800f922:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800f926:	4618      	mov	r0, r3
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr
 800f930:	58024400 	.word	0x58024400

0800f934 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 800f934:	b480      	push	{r7}
 800f936:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 800f938:	4b05      	ldr	r3, [pc, #20]	@ (800f950 <LL_RCC_PLL1_GetP+0x1c>)
 800f93a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f93c:	0a5b      	lsrs	r3, r3, #9
 800f93e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f942:	3301      	adds	r3, #1
}
 800f944:	4618      	mov	r0, r3
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr
 800f94e:	bf00      	nop
 800f950:	58024400 	.word	0x58024400

0800f954 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 800f954:	b480      	push	{r7}
 800f956:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 800f958:	4b05      	ldr	r3, [pc, #20]	@ (800f970 <LL_RCC_PLL1_GetQ+0x1c>)
 800f95a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f95c:	0c1b      	lsrs	r3, r3, #16
 800f95e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f962:	3301      	adds	r3, #1
}
 800f964:	4618      	mov	r0, r3
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr
 800f96e:	bf00      	nop
 800f970:	58024400 	.word	0x58024400

0800f974 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 800f974:	b480      	push	{r7}
 800f976:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 800f978:	4b05      	ldr	r3, [pc, #20]	@ (800f990 <LL_RCC_PLL1_GetR+0x1c>)
 800f97a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f97c:	0e1b      	lsrs	r3, r3, #24
 800f97e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f982:	3301      	adds	r3, #1
}
 800f984:	4618      	mov	r0, r3
 800f986:	46bd      	mov	sp, r7
 800f988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop
 800f990:	58024400 	.word	0x58024400

0800f994 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 800f994:	b480      	push	{r7}
 800f996:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 800f998:	4b04      	ldr	r3, [pc, #16]	@ (800f9ac <LL_RCC_PLL1_GetFRACN+0x18>)
 800f99a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f99c:	08db      	lsrs	r3, r3, #3
 800f99e:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr
 800f9ac:	58024400 	.word	0x58024400

0800f9b0 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 800f9b4:	4b07      	ldr	r3, [pc, #28]	@ (800f9d4 <LL_RCC_PLL2_IsReady+0x24>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f9bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f9c0:	d101      	bne.n	800f9c6 <LL_RCC_PLL2_IsReady+0x16>
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	e000      	b.n	800f9c8 <LL_RCC_PLL2_IsReady+0x18>
 800f9c6:	2300      	movs	r3, #0
}
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d0:	4770      	bx	lr
 800f9d2:	bf00      	nop
 800f9d4:	58024400 	.word	0x58024400

0800f9d8 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 800f9dc:	4b07      	ldr	r3, [pc, #28]	@ (800f9fc <LL_RCC_PLL2P_IsEnabled+0x24>)
 800f9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f9e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800f9e8:	d101      	bne.n	800f9ee <LL_RCC_PLL2P_IsEnabled+0x16>
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	e000      	b.n	800f9f0 <LL_RCC_PLL2P_IsEnabled+0x18>
 800f9ee:	2300      	movs	r3, #0
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr
 800f9fa:	bf00      	nop
 800f9fc:	58024400 	.word	0x58024400

0800fa00 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 800fa00:	b480      	push	{r7}
 800fa02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 800fa04:	4b07      	ldr	r3, [pc, #28]	@ (800fa24 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 800fa06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fa0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa10:	d101      	bne.n	800fa16 <LL_RCC_PLL2Q_IsEnabled+0x16>
 800fa12:	2301      	movs	r3, #1
 800fa14:	e000      	b.n	800fa18 <LL_RCC_PLL2Q_IsEnabled+0x18>
 800fa16:	2300      	movs	r3, #0
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa20:	4770      	bx	lr
 800fa22:	bf00      	nop
 800fa24:	58024400 	.word	0x58024400

0800fa28 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 800fa2c:	4b07      	ldr	r3, [pc, #28]	@ (800fa4c <LL_RCC_PLL2R_IsEnabled+0x24>)
 800fa2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fa34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fa38:	d101      	bne.n	800fa3e <LL_RCC_PLL2R_IsEnabled+0x16>
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	e000      	b.n	800fa40 <LL_RCC_PLL2R_IsEnabled+0x18>
 800fa3e:	2300      	movs	r3, #0
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr
 800fa4a:	bf00      	nop
 800fa4c:	58024400 	.word	0x58024400

0800fa50 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 800fa50:	b480      	push	{r7}
 800fa52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 800fa54:	4b06      	ldr	r3, [pc, #24]	@ (800fa70 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 800fa56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa58:	f003 0310 	and.w	r3, r3, #16
 800fa5c:	2b10      	cmp	r3, #16
 800fa5e:	d101      	bne.n	800fa64 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 800fa60:	2301      	movs	r3, #1
 800fa62:	e000      	b.n	800fa66 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 800fa64:	2300      	movs	r3, #0
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr
 800fa70:	58024400 	.word	0x58024400

0800fa74 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 800fa74:	b480      	push	{r7}
 800fa76:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 800fa78:	4b04      	ldr	r3, [pc, #16]	@ (800fa8c <LL_RCC_PLL2_GetN+0x18>)
 800fa7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa80:	3301      	adds	r3, #1
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr
 800fa8c:	58024400 	.word	0x58024400

0800fa90 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 800fa90:	b480      	push	{r7}
 800fa92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 800fa94:	4b04      	ldr	r3, [pc, #16]	@ (800faa8 <LL_RCC_PLL2_GetM+0x18>)
 800fa96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa98:	0b1b      	lsrs	r3, r3, #12
 800fa9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr
 800faa8:	58024400 	.word	0x58024400

0800faac <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 800faac:	b480      	push	{r7}
 800faae:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 800fab0:	4b05      	ldr	r3, [pc, #20]	@ (800fac8 <LL_RCC_PLL2_GetP+0x1c>)
 800fab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fab4:	0a5b      	lsrs	r3, r3, #9
 800fab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800faba:	3301      	adds	r3, #1
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	46bd      	mov	sp, r7
 800fac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac4:	4770      	bx	lr
 800fac6:	bf00      	nop
 800fac8:	58024400 	.word	0x58024400

0800facc <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 800facc:	b480      	push	{r7}
 800face:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 800fad0:	4b05      	ldr	r3, [pc, #20]	@ (800fae8 <LL_RCC_PLL2_GetQ+0x1c>)
 800fad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fad4:	0c1b      	lsrs	r3, r3, #16
 800fad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fada:	3301      	adds	r3, #1
}
 800fadc:	4618      	mov	r0, r3
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr
 800fae6:	bf00      	nop
 800fae8:	58024400 	.word	0x58024400

0800faec <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 800faec:	b480      	push	{r7}
 800faee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 800faf0:	4b05      	ldr	r3, [pc, #20]	@ (800fb08 <LL_RCC_PLL2_GetR+0x1c>)
 800faf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faf4:	0e1b      	lsrs	r3, r3, #24
 800faf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fafa:	3301      	adds	r3, #1
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr
 800fb06:	bf00      	nop
 800fb08:	58024400 	.word	0x58024400

0800fb0c <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 800fb10:	4b04      	ldr	r3, [pc, #16]	@ (800fb24 <LL_RCC_PLL2_GetFRACN+0x18>)
 800fb12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb14:	08db      	lsrs	r3, r3, #3
 800fb16:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr
 800fb24:	58024400 	.word	0x58024400

0800fb28 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 800fb2c:	4b07      	ldr	r3, [pc, #28]	@ (800fb4c <LL_RCC_PLL3_IsReady+0x24>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fb34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb38:	d101      	bne.n	800fb3e <LL_RCC_PLL3_IsReady+0x16>
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	e000      	b.n	800fb40 <LL_RCC_PLL3_IsReady+0x18>
 800fb3e:	2300      	movs	r3, #0
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	46bd      	mov	sp, r7
 800fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb48:	4770      	bx	lr
 800fb4a:	bf00      	nop
 800fb4c:	58024400 	.word	0x58024400

0800fb50 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 800fb50:	b480      	push	{r7}
 800fb52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 800fb54:	4b07      	ldr	r3, [pc, #28]	@ (800fb74 <LL_RCC_PLL3P_IsEnabled+0x24>)
 800fb56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fb5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fb60:	d101      	bne.n	800fb66 <LL_RCC_PLL3P_IsEnabled+0x16>
 800fb62:	2301      	movs	r3, #1
 800fb64:	e000      	b.n	800fb68 <LL_RCC_PLL3P_IsEnabled+0x18>
 800fb66:	2300      	movs	r3, #0
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr
 800fb72:	bf00      	nop
 800fb74:	58024400 	.word	0x58024400

0800fb78 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 800fb7c:	4b07      	ldr	r3, [pc, #28]	@ (800fb9c <LL_RCC_PLL3Q_IsEnabled+0x24>)
 800fb7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fb84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fb88:	d101      	bne.n	800fb8e <LL_RCC_PLL3Q_IsEnabled+0x16>
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	e000      	b.n	800fb90 <LL_RCC_PLL3Q_IsEnabled+0x18>
 800fb8e:	2300      	movs	r3, #0
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	46bd      	mov	sp, r7
 800fb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb98:	4770      	bx	lr
 800fb9a:	bf00      	nop
 800fb9c:	58024400 	.word	0x58024400

0800fba0 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 800fba0:	b480      	push	{r7}
 800fba2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 800fba4:	4b07      	ldr	r3, [pc, #28]	@ (800fbc4 <LL_RCC_PLL3R_IsEnabled+0x24>)
 800fba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fba8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fbac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fbb0:	d101      	bne.n	800fbb6 <LL_RCC_PLL3R_IsEnabled+0x16>
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e000      	b.n	800fbb8 <LL_RCC_PLL3R_IsEnabled+0x18>
 800fbb6:	2300      	movs	r3, #0
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc0:	4770      	bx	lr
 800fbc2:	bf00      	nop
 800fbc4:	58024400 	.word	0x58024400

0800fbc8 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 800fbcc:	4b07      	ldr	r3, [pc, #28]	@ (800fbec <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 800fbce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fbd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fbd8:	d101      	bne.n	800fbde <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 800fbda:	2301      	movs	r3, #1
 800fbdc:	e000      	b.n	800fbe0 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 800fbde:	2300      	movs	r3, #0
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr
 800fbea:	bf00      	nop
 800fbec:	58024400 	.word	0x58024400

0800fbf0 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 800fbf4:	4b04      	ldr	r3, [pc, #16]	@ (800fc08 <LL_RCC_PLL3_GetN+0x18>)
 800fbf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbfc:	3301      	adds	r3, #1
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	46bd      	mov	sp, r7
 800fc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc06:	4770      	bx	lr
 800fc08:	58024400 	.word	0x58024400

0800fc0c <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 800fc10:	4b04      	ldr	r3, [pc, #16]	@ (800fc24 <LL_RCC_PLL3_GetM+0x18>)
 800fc12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc14:	0d1b      	lsrs	r3, r3, #20
 800fc16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr
 800fc24:	58024400 	.word	0x58024400

0800fc28 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 800fc2c:	4b05      	ldr	r3, [pc, #20]	@ (800fc44 <LL_RCC_PLL3_GetP+0x1c>)
 800fc2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc30:	0a5b      	lsrs	r3, r3, #9
 800fc32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc36:	3301      	adds	r3, #1
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop
 800fc44:	58024400 	.word	0x58024400

0800fc48 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 800fc4c:	4b05      	ldr	r3, [pc, #20]	@ (800fc64 <LL_RCC_PLL3_GetQ+0x1c>)
 800fc4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc50:	0c1b      	lsrs	r3, r3, #16
 800fc52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc56:	3301      	adds	r3, #1
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr
 800fc62:	bf00      	nop
 800fc64:	58024400 	.word	0x58024400

0800fc68 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 800fc6c:	4b05      	ldr	r3, [pc, #20]	@ (800fc84 <LL_RCC_PLL3_GetR+0x1c>)
 800fc6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc70:	0e1b      	lsrs	r3, r3, #24
 800fc72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc76:	3301      	adds	r3, #1
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc80:	4770      	bx	lr
 800fc82:	bf00      	nop
 800fc84:	58024400 	.word	0x58024400

0800fc88 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 800fc8c:	4b04      	ldr	r3, [pc, #16]	@ (800fca0 <LL_RCC_PLL3_GetFRACN+0x18>)
 800fc8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc90:	08db      	lsrs	r3, r3, #3
 800fc92:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr
 800fca0:	58024400 	.word	0x58024400

0800fca4 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b08a      	sub	sp, #40	@ 0x28
 800fca8:	af02      	add	r7, sp, #8
 800fcaa:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800fcac:	2300      	movs	r3, #0
 800fcae:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800fcb4:	f7ff fdc6 	bl	800f844 <LL_RCC_PLL_GetSource>
 800fcb8:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	2b02      	cmp	r3, #2
 800fcbe:	d01f      	beq.n	800fd00 <LL_RCC_GetPLL1ClockFreq+0x5c>
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	2b02      	cmp	r3, #2
 800fcc4:	d824      	bhi.n	800fd10 <LL_RCC_GetPLL1ClockFreq+0x6c>
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d003      	beq.n	800fcd4 <LL_RCC_GetPLL1ClockFreq+0x30>
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	2b01      	cmp	r3, #1
 800fcd0:	d00e      	beq.n	800fcf0 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800fcd2:	e01d      	b.n	800fd10 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800fcd4:	f7ff fcf8 	bl	800f6c8 <LL_RCC_HSI_IsReady>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d01a      	beq.n	800fd14 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800fcde:	f7ff fd05 	bl	800f6ec <LL_RCC_HSI_GetDivider>
 800fce2:	4603      	mov	r3, r0
 800fce4:	08db      	lsrs	r3, r3, #3
 800fce6:	4a38      	ldr	r2, [pc, #224]	@ (800fdc8 <LL_RCC_GetPLL1ClockFreq+0x124>)
 800fce8:	fa22 f303 	lsr.w	r3, r2, r3
 800fcec:	61fb      	str	r3, [r7, #28]
      break;
 800fcee:	e011      	b.n	800fd14 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800fcf0:	f7ff fd0a 	bl	800f708 <LL_RCC_CSI_IsReady>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d00e      	beq.n	800fd18 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800fcfa:	4b34      	ldr	r3, [pc, #208]	@ (800fdcc <LL_RCC_GetPLL1ClockFreq+0x128>)
 800fcfc:	61fb      	str	r3, [r7, #28]
      break;
 800fcfe:	e00b      	b.n	800fd18 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800fd00:	f7ff fcce 	bl	800f6a0 <LL_RCC_HSE_IsReady>
 800fd04:	4603      	mov	r3, r0
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d008      	beq.n	800fd1c <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800fd0a:	4b31      	ldr	r3, [pc, #196]	@ (800fdd0 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 800fd0c:	61fb      	str	r3, [r7, #28]
      break;
 800fd0e:	e005      	b.n	800fd1c <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 800fd10:	bf00      	nop
 800fd12:	e004      	b.n	800fd1e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800fd14:	bf00      	nop
 800fd16:	e002      	b.n	800fd1e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800fd18:	bf00      	nop
 800fd1a:	e000      	b.n	800fd1e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800fd1c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2200      	movs	r2, #0
 800fd22:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2200      	movs	r2, #0
 800fd28:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 800fd30:	f7ff fdf2 	bl	800f918 <LL_RCC_PLL1_GetM>
 800fd34:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 800fd36:	f7ff fde1 	bl	800f8fc <LL_RCC_PLL1_GetN>
 800fd3a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 800fd3c:	f7ff fdcc 	bl	800f8d8 <LL_RCC_PLL1FRACN_IsEnabled>
 800fd40:	4603      	mov	r3, r0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d002      	beq.n	800fd4c <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 800fd46:	f7ff fe25 	bl	800f994 <LL_RCC_PLL1_GetFRACN>
 800fd4a:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d035      	beq.n	800fdbe <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 800fd52:	f7ff fd85 	bl	800f860 <LL_RCC_PLL1P_IsEnabled>
 800fd56:	4603      	mov	r3, r0
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d00c      	beq.n	800fd76 <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 800fd5c:	f7ff fdea 	bl	800f934 <LL_RCC_PLL1_GetP>
 800fd60:	4603      	mov	r3, r0
 800fd62:	9300      	str	r3, [sp, #0]
 800fd64:	69bb      	ldr	r3, [r7, #24]
 800fd66:	68fa      	ldr	r2, [r7, #12]
 800fd68:	6939      	ldr	r1, [r7, #16]
 800fd6a:	69f8      	ldr	r0, [r7, #28]
 800fd6c:	f000 f964 	bl	8010038 <LL_RCC_CalcPLLClockFreq>
 800fd70:	4602      	mov	r2, r0
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 800fd76:	f7ff fd87 	bl	800f888 <LL_RCC_PLL1Q_IsEnabled>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d00c      	beq.n	800fd9a <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 800fd80:	f7ff fde8 	bl	800f954 <LL_RCC_PLL1_GetQ>
 800fd84:	4603      	mov	r3, r0
 800fd86:	9300      	str	r3, [sp, #0]
 800fd88:	69bb      	ldr	r3, [r7, #24]
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	6939      	ldr	r1, [r7, #16]
 800fd8e:	69f8      	ldr	r0, [r7, #28]
 800fd90:	f000 f952 	bl	8010038 <LL_RCC_CalcPLLClockFreq>
 800fd94:	4602      	mov	r2, r0
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 800fd9a:	f7ff fd89 	bl	800f8b0 <LL_RCC_PLL1R_IsEnabled>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d00c      	beq.n	800fdbe <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 800fda4:	f7ff fde6 	bl	800f974 <LL_RCC_PLL1_GetR>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	9300      	str	r3, [sp, #0]
 800fdac:	69bb      	ldr	r3, [r7, #24]
 800fdae:	68fa      	ldr	r2, [r7, #12]
 800fdb0:	6939      	ldr	r1, [r7, #16]
 800fdb2:	69f8      	ldr	r0, [r7, #28]
 800fdb4:	f000 f940 	bl	8010038 <LL_RCC_CalcPLLClockFreq>
 800fdb8:	4602      	mov	r2, r0
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	609a      	str	r2, [r3, #8]
    }
  }
}
 800fdbe:	bf00      	nop
 800fdc0:	3720      	adds	r7, #32
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	03d09000 	.word	0x03d09000
 800fdcc:	003d0900 	.word	0x003d0900
 800fdd0:	017d7840 	.word	0x017d7840

0800fdd4 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b08a      	sub	sp, #40	@ 0x28
 800fdd8:	af02      	add	r7, sp, #8
 800fdda:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800fddc:	2300      	movs	r3, #0
 800fdde:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800fde0:	2300      	movs	r3, #0
 800fde2:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800fde4:	f7ff fd2e 	bl	800f844 <LL_RCC_PLL_GetSource>
 800fde8:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	2b02      	cmp	r3, #2
 800fdee:	d01f      	beq.n	800fe30 <LL_RCC_GetPLL2ClockFreq+0x5c>
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	2b02      	cmp	r3, #2
 800fdf4:	d824      	bhi.n	800fe40 <LL_RCC_GetPLL2ClockFreq+0x6c>
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d003      	beq.n	800fe04 <LL_RCC_GetPLL2ClockFreq+0x30>
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	2b01      	cmp	r3, #1
 800fe00:	d00e      	beq.n	800fe20 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800fe02:	e01d      	b.n	800fe40 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800fe04:	f7ff fc60 	bl	800f6c8 <LL_RCC_HSI_IsReady>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d01a      	beq.n	800fe44 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800fe0e:	f7ff fc6d 	bl	800f6ec <LL_RCC_HSI_GetDivider>
 800fe12:	4603      	mov	r3, r0
 800fe14:	08db      	lsrs	r3, r3, #3
 800fe16:	4a38      	ldr	r2, [pc, #224]	@ (800fef8 <LL_RCC_GetPLL2ClockFreq+0x124>)
 800fe18:	fa22 f303 	lsr.w	r3, r2, r3
 800fe1c:	61fb      	str	r3, [r7, #28]
      break;
 800fe1e:	e011      	b.n	800fe44 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800fe20:	f7ff fc72 	bl	800f708 <LL_RCC_CSI_IsReady>
 800fe24:	4603      	mov	r3, r0
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d00e      	beq.n	800fe48 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800fe2a:	4b34      	ldr	r3, [pc, #208]	@ (800fefc <LL_RCC_GetPLL2ClockFreq+0x128>)
 800fe2c:	61fb      	str	r3, [r7, #28]
      break;
 800fe2e:	e00b      	b.n	800fe48 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800fe30:	f7ff fc36 	bl	800f6a0 <LL_RCC_HSE_IsReady>
 800fe34:	4603      	mov	r3, r0
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d008      	beq.n	800fe4c <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800fe3a:	4b31      	ldr	r3, [pc, #196]	@ (800ff00 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 800fe3c:	61fb      	str	r3, [r7, #28]
      break;
 800fe3e:	e005      	b.n	800fe4c <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 800fe40:	bf00      	nop
 800fe42:	e004      	b.n	800fe4e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800fe44:	bf00      	nop
 800fe46:	e002      	b.n	800fe4e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800fe48:	bf00      	nop
 800fe4a:	e000      	b.n	800fe4e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800fe4c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2200      	movs	r2, #0
 800fe52:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 800fe60:	f7ff fe16 	bl	800fa90 <LL_RCC_PLL2_GetM>
 800fe64:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 800fe66:	f7ff fe05 	bl	800fa74 <LL_RCC_PLL2_GetN>
 800fe6a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 800fe6c:	f7ff fdf0 	bl	800fa50 <LL_RCC_PLL2FRACN_IsEnabled>
 800fe70:	4603      	mov	r3, r0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d002      	beq.n	800fe7c <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 800fe76:	f7ff fe49 	bl	800fb0c <LL_RCC_PLL2_GetFRACN>
 800fe7a:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d035      	beq.n	800feee <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 800fe82:	f7ff fda9 	bl	800f9d8 <LL_RCC_PLL2P_IsEnabled>
 800fe86:	4603      	mov	r3, r0
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d00c      	beq.n	800fea6 <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 800fe8c:	f7ff fe0e 	bl	800faac <LL_RCC_PLL2_GetP>
 800fe90:	4603      	mov	r3, r0
 800fe92:	9300      	str	r3, [sp, #0]
 800fe94:	69bb      	ldr	r3, [r7, #24]
 800fe96:	68fa      	ldr	r2, [r7, #12]
 800fe98:	6939      	ldr	r1, [r7, #16]
 800fe9a:	69f8      	ldr	r0, [r7, #28]
 800fe9c:	f000 f8cc 	bl	8010038 <LL_RCC_CalcPLLClockFreq>
 800fea0:	4602      	mov	r2, r0
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800fea6:	f7ff fdab 	bl	800fa00 <LL_RCC_PLL2Q_IsEnabled>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d00c      	beq.n	800feca <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 800feb0:	f7ff fe0c 	bl	800facc <LL_RCC_PLL2_GetQ>
 800feb4:	4603      	mov	r3, r0
 800feb6:	9300      	str	r3, [sp, #0]
 800feb8:	69bb      	ldr	r3, [r7, #24]
 800feba:	68fa      	ldr	r2, [r7, #12]
 800febc:	6939      	ldr	r1, [r7, #16]
 800febe:	69f8      	ldr	r0, [r7, #28]
 800fec0:	f000 f8ba 	bl	8010038 <LL_RCC_CalcPLLClockFreq>
 800fec4:	4602      	mov	r2, r0
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 800feca:	f7ff fdad 	bl	800fa28 <LL_RCC_PLL2R_IsEnabled>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d00c      	beq.n	800feee <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 800fed4:	f7ff fe0a 	bl	800faec <LL_RCC_PLL2_GetR>
 800fed8:	4603      	mov	r3, r0
 800feda:	9300      	str	r3, [sp, #0]
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	68fa      	ldr	r2, [r7, #12]
 800fee0:	6939      	ldr	r1, [r7, #16]
 800fee2:	69f8      	ldr	r0, [r7, #28]
 800fee4:	f000 f8a8 	bl	8010038 <LL_RCC_CalcPLLClockFreq>
 800fee8:	4602      	mov	r2, r0
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	609a      	str	r2, [r3, #8]
    }
  }
}
 800feee:	bf00      	nop
 800fef0:	3720      	adds	r7, #32
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
 800fef6:	bf00      	nop
 800fef8:	03d09000 	.word	0x03d09000
 800fefc:	003d0900 	.word	0x003d0900
 800ff00:	017d7840 	.word	0x017d7840

0800ff04 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b08a      	sub	sp, #40	@ 0x28
 800ff08:	af02      	add	r7, sp, #8
 800ff0a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800ff10:	2300      	movs	r3, #0
 800ff12:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800ff14:	f7ff fc96 	bl	800f844 <LL_RCC_PLL_GetSource>
 800ff18:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	2b02      	cmp	r3, #2
 800ff1e:	d01f      	beq.n	800ff60 <LL_RCC_GetPLL3ClockFreq+0x5c>
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	2b02      	cmp	r3, #2
 800ff24:	d824      	bhi.n	800ff70 <LL_RCC_GetPLL3ClockFreq+0x6c>
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d003      	beq.n	800ff34 <LL_RCC_GetPLL3ClockFreq+0x30>
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d00e      	beq.n	800ff50 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800ff32:	e01d      	b.n	800ff70 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800ff34:	f7ff fbc8 	bl	800f6c8 <LL_RCC_HSI_IsReady>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d01a      	beq.n	800ff74 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800ff3e:	f7ff fbd5 	bl	800f6ec <LL_RCC_HSI_GetDivider>
 800ff42:	4603      	mov	r3, r0
 800ff44:	08db      	lsrs	r3, r3, #3
 800ff46:	4a39      	ldr	r2, [pc, #228]	@ (801002c <LL_RCC_GetPLL3ClockFreq+0x128>)
 800ff48:	fa22 f303 	lsr.w	r3, r2, r3
 800ff4c:	61fb      	str	r3, [r7, #28]
      break;
 800ff4e:	e011      	b.n	800ff74 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800ff50:	f7ff fbda 	bl	800f708 <LL_RCC_CSI_IsReady>
 800ff54:	4603      	mov	r3, r0
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d00e      	beq.n	800ff78 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800ff5a:	4b35      	ldr	r3, [pc, #212]	@ (8010030 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 800ff5c:	61fb      	str	r3, [r7, #28]
      break;
 800ff5e:	e00b      	b.n	800ff78 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800ff60:	f7ff fb9e 	bl	800f6a0 <LL_RCC_HSE_IsReady>
 800ff64:	4603      	mov	r3, r0
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d008      	beq.n	800ff7c <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800ff6a:	4b32      	ldr	r3, [pc, #200]	@ (8010034 <LL_RCC_GetPLL3ClockFreq+0x130>)
 800ff6c:	61fb      	str	r3, [r7, #28]
      break;
 800ff6e:	e005      	b.n	800ff7c <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 800ff70:	bf00      	nop
 800ff72:	e004      	b.n	800ff7e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800ff74:	bf00      	nop
 800ff76:	e002      	b.n	800ff7e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800ff78:	bf00      	nop
 800ff7a:	e000      	b.n	800ff7e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800ff7c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2200      	movs	r2, #0
 800ff82:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2200      	movs	r2, #0
 800ff88:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 800ff90:	f7ff fe3c 	bl	800fc0c <LL_RCC_PLL3_GetM>
 800ff94:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 800ff96:	f7ff fe2b 	bl	800fbf0 <LL_RCC_PLL3_GetN>
 800ff9a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 800ff9c:	f7ff fe14 	bl	800fbc8 <LL_RCC_PLL3FRACN_IsEnabled>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d002      	beq.n	800ffac <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 800ffa6:	f7ff fe6f 	bl	800fc88 <LL_RCC_PLL3_GetFRACN>
 800ffaa:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d038      	beq.n	8010024 <LL_RCC_GetPLL3ClockFreq+0x120>
 800ffb2:	69fb      	ldr	r3, [r7, #28]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d035      	beq.n	8010024 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 800ffb8:	f7ff fdca 	bl	800fb50 <LL_RCC_PLL3P_IsEnabled>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d00c      	beq.n	800ffdc <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 800ffc2:	f7ff fe31 	bl	800fc28 <LL_RCC_PLL3_GetP>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	9300      	str	r3, [sp, #0]
 800ffca:	69bb      	ldr	r3, [r7, #24]
 800ffcc:	68fa      	ldr	r2, [r7, #12]
 800ffce:	6939      	ldr	r1, [r7, #16]
 800ffd0:	69f8      	ldr	r0, [r7, #28]
 800ffd2:	f000 f831 	bl	8010038 <LL_RCC_CalcPLLClockFreq>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800ffdc:	f7ff fdcc 	bl	800fb78 <LL_RCC_PLL3Q_IsEnabled>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d00c      	beq.n	8010000 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 800ffe6:	f7ff fe2f 	bl	800fc48 <LL_RCC_PLL3_GetQ>
 800ffea:	4603      	mov	r3, r0
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	69bb      	ldr	r3, [r7, #24]
 800fff0:	68fa      	ldr	r2, [r7, #12]
 800fff2:	6939      	ldr	r1, [r7, #16]
 800fff4:	69f8      	ldr	r0, [r7, #28]
 800fff6:	f000 f81f 	bl	8010038 <LL_RCC_CalcPLLClockFreq>
 800fffa:	4602      	mov	r2, r0
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8010000:	f7ff fdce 	bl	800fba0 <LL_RCC_PLL3R_IsEnabled>
 8010004:	4603      	mov	r3, r0
 8010006:	2b00      	cmp	r3, #0
 8010008:	d00c      	beq.n	8010024 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 801000a:	f7ff fe2d 	bl	800fc68 <LL_RCC_PLL3_GetR>
 801000e:	4603      	mov	r3, r0
 8010010:	9300      	str	r3, [sp, #0]
 8010012:	69bb      	ldr	r3, [r7, #24]
 8010014:	68fa      	ldr	r2, [r7, #12]
 8010016:	6939      	ldr	r1, [r7, #16]
 8010018:	69f8      	ldr	r0, [r7, #28]
 801001a:	f000 f80d 	bl	8010038 <LL_RCC_CalcPLLClockFreq>
 801001e:	4602      	mov	r2, r0
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	609a      	str	r2, [r3, #8]
    }
  }
}
 8010024:	bf00      	nop
 8010026:	3720      	adds	r7, #32
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}
 801002c:	03d09000 	.word	0x03d09000
 8010030:	003d0900 	.word	0x003d0900
 8010034:	017d7840 	.word	0x017d7840

08010038 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 8010038:	b480      	push	{r7}
 801003a:	b087      	sub	sp, #28
 801003c:	af00      	add	r7, sp, #0
 801003e:	60f8      	str	r0, [r7, #12]
 8010040:	60b9      	str	r1, [r7, #8]
 8010042:	607a      	str	r2, [r7, #4]
 8010044:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	ee07 3a90 	vmov	s15, r3
 801004c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	ee07 3a90 	vmov	s15, r3
 8010056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801005a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	ee07 3a90 	vmov	s15, r3
 8010064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	ee07 3a90 	vmov	s15, r3
 801006e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8010072:	eddf 5a10 	vldr	s11, [pc, #64]	@ 80100b4 <LL_RCC_CalcPLLClockFreq+0x7c>
 8010076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801007a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801007e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010082:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 8010086:	6a3b      	ldr	r3, [r7, #32]
 8010088:	ee07 3a90 	vmov	s15, r3
 801008c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010090:	edd7 6a05 	vldr	s13, [r7, #20]
 8010094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010098:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 801009c:	edd7 7a05 	vldr	s15, [r7, #20]
 80100a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100a4:	ee17 3a90 	vmov	r3, s15
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	371c      	adds	r7, #28
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr
 80100b4:	46000000 	.word	0x46000000

080100b8 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80100b8:	b590      	push	{r4, r7, lr}
 80100ba:	b087      	sub	sp, #28
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80100c0:	2300      	movs	r3, #0
 80100c2:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f7ff fbb1 	bl	800f82c <LL_RCC_GetUSARTClockSource>
 80100ca:	4603      	mov	r3, r0
 80100cc:	4a62      	ldr	r2, [pc, #392]	@ (8010258 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	f000 80a9 	beq.w	8010226 <LL_RCC_GetUSARTClockFreq+0x16e>
 80100d4:	4a60      	ldr	r2, [pc, #384]	@ (8010258 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 80100d6:	4293      	cmp	r3, r2
 80100d8:	f200 80ae 	bhi.w	8010238 <LL_RCC_GetUSARTClockFreq+0x180>
 80100dc:	4a5f      	ldr	r2, [pc, #380]	@ (801025c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	f000 80a1 	beq.w	8010226 <LL_RCC_GetUSARTClockFreq+0x16e>
 80100e4:	4a5d      	ldr	r2, [pc, #372]	@ (801025c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 80100e6:	4293      	cmp	r3, r2
 80100e8:	f200 80a6 	bhi.w	8010238 <LL_RCC_GetUSARTClockFreq+0x180>
 80100ec:	4a5c      	ldr	r2, [pc, #368]	@ (8010260 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 80100ee:	4293      	cmp	r3, r2
 80100f0:	f000 8091 	beq.w	8010216 <LL_RCC_GetUSARTClockFreq+0x15e>
 80100f4:	4a5a      	ldr	r2, [pc, #360]	@ (8010260 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	f200 809e 	bhi.w	8010238 <LL_RCC_GetUSARTClockFreq+0x180>
 80100fc:	4a59      	ldr	r2, [pc, #356]	@ (8010264 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 80100fe:	4293      	cmp	r3, r2
 8010100:	f000 8089 	beq.w	8010216 <LL_RCC_GetUSARTClockFreq+0x15e>
 8010104:	4a57      	ldr	r2, [pc, #348]	@ (8010264 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8010106:	4293      	cmp	r3, r2
 8010108:	f200 8096 	bhi.w	8010238 <LL_RCC_GetUSARTClockFreq+0x180>
 801010c:	4a56      	ldr	r2, [pc, #344]	@ (8010268 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d073      	beq.n	80101fa <LL_RCC_GetUSARTClockFreq+0x142>
 8010112:	4a55      	ldr	r2, [pc, #340]	@ (8010268 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8010114:	4293      	cmp	r3, r2
 8010116:	f200 808f 	bhi.w	8010238 <LL_RCC_GetUSARTClockFreq+0x180>
 801011a:	4a54      	ldr	r2, [pc, #336]	@ (801026c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d06c      	beq.n	80101fa <LL_RCC_GetUSARTClockFreq+0x142>
 8010120:	4a52      	ldr	r2, [pc, #328]	@ (801026c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8010122:	4293      	cmp	r3, r2
 8010124:	f200 8088 	bhi.w	8010238 <LL_RCC_GetUSARTClockFreq+0x180>
 8010128:	4a51      	ldr	r2, [pc, #324]	@ (8010270 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 801012a:	4293      	cmp	r3, r2
 801012c:	d058      	beq.n	80101e0 <LL_RCC_GetUSARTClockFreq+0x128>
 801012e:	4a50      	ldr	r2, [pc, #320]	@ (8010270 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8010130:	4293      	cmp	r3, r2
 8010132:	f200 8081 	bhi.w	8010238 <LL_RCC_GetUSARTClockFreq+0x180>
 8010136:	4a4f      	ldr	r2, [pc, #316]	@ (8010274 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d051      	beq.n	80101e0 <LL_RCC_GetUSARTClockFreq+0x128>
 801013c:	4a4d      	ldr	r2, [pc, #308]	@ (8010274 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 801013e:	4293      	cmp	r3, r2
 8010140:	d87a      	bhi.n	8010238 <LL_RCC_GetUSARTClockFreq+0x180>
 8010142:	4a4d      	ldr	r2, [pc, #308]	@ (8010278 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8010144:	4293      	cmp	r3, r2
 8010146:	d03e      	beq.n	80101c6 <LL_RCC_GetUSARTClockFreq+0x10e>
 8010148:	4a4b      	ldr	r2, [pc, #300]	@ (8010278 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 801014a:	4293      	cmp	r3, r2
 801014c:	d874      	bhi.n	8010238 <LL_RCC_GetUSARTClockFreq+0x180>
 801014e:	4a4b      	ldr	r2, [pc, #300]	@ (801027c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d038      	beq.n	80101c6 <LL_RCC_GetUSARTClockFreq+0x10e>
 8010154:	4a49      	ldr	r2, [pc, #292]	@ (801027c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8010156:	4293      	cmp	r3, r2
 8010158:	d86e      	bhi.n	8010238 <LL_RCC_GetUSARTClockFreq+0x180>
 801015a:	4a49      	ldr	r2, [pc, #292]	@ (8010280 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 801015c:	4293      	cmp	r3, r2
 801015e:	d01a      	beq.n	8010196 <LL_RCC_GetUSARTClockFreq+0xde>
 8010160:	4a48      	ldr	r2, [pc, #288]	@ (8010284 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8010162:	4293      	cmp	r3, r2
 8010164:	d168      	bne.n	8010238 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8010166:	f000 f895 	bl	8010294 <RCC_GetSystemClockFreq>
 801016a:	4604      	mov	r4, r0
 801016c:	f7ff fb00 	bl	800f770 <LL_RCC_GetSysPrescaler>
 8010170:	4603      	mov	r3, r0
 8010172:	0a1b      	lsrs	r3, r3, #8
 8010174:	f003 030f 	and.w	r3, r3, #15
 8010178:	4a43      	ldr	r2, [pc, #268]	@ (8010288 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 801017a:	5cd3      	ldrb	r3, [r2, r3]
 801017c:	f003 031f 	and.w	r3, r3, #31
 8010180:	fa24 f303 	lsr.w	r3, r4, r3
 8010184:	4618      	mov	r0, r3
 8010186:	f000 f8e7 	bl	8010358 <RCC_GetHCLKClockFreq>
 801018a:	4603      	mov	r3, r0
 801018c:	4618      	mov	r0, r3
 801018e:	f000 f911 	bl	80103b4 <RCC_GetPCLK2ClockFreq>
 8010192:	6178      	str	r0, [r7, #20]
      break;
 8010194:	e05b      	b.n	801024e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8010196:	f000 f87d 	bl	8010294 <RCC_GetSystemClockFreq>
 801019a:	4604      	mov	r4, r0
 801019c:	f7ff fae8 	bl	800f770 <LL_RCC_GetSysPrescaler>
 80101a0:	4603      	mov	r3, r0
 80101a2:	0a1b      	lsrs	r3, r3, #8
 80101a4:	f003 030f 	and.w	r3, r3, #15
 80101a8:	4a37      	ldr	r2, [pc, #220]	@ (8010288 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 80101aa:	5cd3      	ldrb	r3, [r2, r3]
 80101ac:	f003 031f 	and.w	r3, r3, #31
 80101b0:	fa24 f303 	lsr.w	r3, r4, r3
 80101b4:	4618      	mov	r0, r3
 80101b6:	f000 f8cf 	bl	8010358 <RCC_GetHCLKClockFreq>
 80101ba:	4603      	mov	r3, r0
 80101bc:	4618      	mov	r0, r3
 80101be:	f000 f8e1 	bl	8010384 <RCC_GetPCLK1ClockFreq>
 80101c2:	6178      	str	r0, [r7, #20]
      break;
 80101c4:	e043      	b.n	801024e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 80101c6:	f7ff fbf3 	bl	800f9b0 <LL_RCC_PLL2_IsReady>
 80101ca:	4603      	mov	r3, r0
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d035      	beq.n	801023c <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 80101d0:	f107 0308 	add.w	r3, r7, #8
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7ff fdfd 	bl	800fdd4 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	617b      	str	r3, [r7, #20]
      }
      break;
 80101de:	e02d      	b.n	801023c <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 80101e0:	f7ff fca2 	bl	800fb28 <LL_RCC_PLL3_IsReady>
 80101e4:	4603      	mov	r3, r0
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d02a      	beq.n	8010240 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 80101ea:	f107 0308 	add.w	r3, r7, #8
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7ff fe88 	bl	800ff04 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	617b      	str	r3, [r7, #20]
      }
      break;
 80101f8:	e022      	b.n	8010240 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 80101fa:	f7ff fa65 	bl	800f6c8 <LL_RCC_HSI_IsReady>
 80101fe:	4603      	mov	r3, r0
 8010200:	2b00      	cmp	r3, #0
 8010202:	d01f      	beq.n	8010244 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8010204:	f7ff fa72 	bl	800f6ec <LL_RCC_HSI_GetDivider>
 8010208:	4603      	mov	r3, r0
 801020a:	08db      	lsrs	r3, r3, #3
 801020c:	4a1f      	ldr	r2, [pc, #124]	@ (801028c <LL_RCC_GetUSARTClockFreq+0x1d4>)
 801020e:	fa22 f303 	lsr.w	r3, r2, r3
 8010212:	617b      	str	r3, [r7, #20]
      }
      break;
 8010214:	e016      	b.n	8010244 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 8010216:	f7ff fa77 	bl	800f708 <LL_RCC_CSI_IsReady>
 801021a:	4603      	mov	r3, r0
 801021c:	2b00      	cmp	r3, #0
 801021e:	d013      	beq.n	8010248 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 8010220:	4b1b      	ldr	r3, [pc, #108]	@ (8010290 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8010222:	617b      	str	r3, [r7, #20]
      }
      break;
 8010224:	e010      	b.n	8010248 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 8010226:	f7ff fa83 	bl	800f730 <LL_RCC_LSE_IsReady>
 801022a:	4603      	mov	r3, r0
 801022c:	2b00      	cmp	r3, #0
 801022e:	d00d      	beq.n	801024c <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 8010230:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010234:	617b      	str	r3, [r7, #20]
      }
      break;
 8010236:	e009      	b.n	801024c <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 8010238:	bf00      	nop
 801023a:	e008      	b.n	801024e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 801023c:	bf00      	nop
 801023e:	e006      	b.n	801024e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8010240:	bf00      	nop
 8010242:	e004      	b.n	801024e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8010244:	bf00      	nop
 8010246:	e002      	b.n	801024e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8010248:	bf00      	nop
 801024a:	e000      	b.n	801024e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 801024c:	bf00      	nop
  }

  return usart_frequency;
 801024e:	697b      	ldr	r3, [r7, #20]
}
 8010250:	4618      	mov	r0, r3
 8010252:	371c      	adds	r7, #28
 8010254:	46bd      	mov	sp, r7
 8010256:	bd90      	pop	{r4, r7, pc}
 8010258:	07050308 	.word	0x07050308
 801025c:	07050008 	.word	0x07050008
 8010260:	07040308 	.word	0x07040308
 8010264:	07040008 	.word	0x07040008
 8010268:	07030308 	.word	0x07030308
 801026c:	07030008 	.word	0x07030008
 8010270:	07020308 	.word	0x07020308
 8010274:	07020008 	.word	0x07020008
 8010278:	07010308 	.word	0x07010308
 801027c:	07010008 	.word	0x07010008
 8010280:	07000008 	.word	0x07000008
 8010284:	07000308 	.word	0x07000308
 8010288:	08017290 	.word	0x08017290
 801028c:	03d09000 	.word	0x03d09000
 8010290:	003d0900 	.word	0x003d0900

08010294 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 801029a:	2300      	movs	r3, #0
 801029c:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 801029e:	f7ff fa59 	bl	800f754 <LL_RCC_GetSysClkSource>
 80102a2:	4603      	mov	r3, r0
 80102a4:	2b18      	cmp	r3, #24
 80102a6:	d84b      	bhi.n	8010340 <RCC_GetSystemClockFreq+0xac>
 80102a8:	a201      	add	r2, pc, #4	@ (adr r2, 80102b0 <RCC_GetSystemClockFreq+0x1c>)
 80102aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ae:	bf00      	nop
 80102b0:	08010315 	.word	0x08010315
 80102b4:	08010341 	.word	0x08010341
 80102b8:	08010341 	.word	0x08010341
 80102bc:	08010341 	.word	0x08010341
 80102c0:	08010341 	.word	0x08010341
 80102c4:	08010341 	.word	0x08010341
 80102c8:	08010341 	.word	0x08010341
 80102cc:	08010341 	.word	0x08010341
 80102d0:	08010327 	.word	0x08010327
 80102d4:	08010341 	.word	0x08010341
 80102d8:	08010341 	.word	0x08010341
 80102dc:	08010341 	.word	0x08010341
 80102e0:	08010341 	.word	0x08010341
 80102e4:	08010341 	.word	0x08010341
 80102e8:	08010341 	.word	0x08010341
 80102ec:	08010341 	.word	0x08010341
 80102f0:	0801032d 	.word	0x0801032d
 80102f4:	08010341 	.word	0x08010341
 80102f8:	08010341 	.word	0x08010341
 80102fc:	08010341 	.word	0x08010341
 8010300:	08010341 	.word	0x08010341
 8010304:	08010341 	.word	0x08010341
 8010308:	08010341 	.word	0x08010341
 801030c:	08010341 	.word	0x08010341
 8010310:	08010333 	.word	0x08010333
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8010314:	f7ff f9ea 	bl	800f6ec <LL_RCC_HSI_GetDivider>
 8010318:	4603      	mov	r3, r0
 801031a:	08db      	lsrs	r3, r3, #3
 801031c:	4a0b      	ldr	r2, [pc, #44]	@ (801034c <RCC_GetSystemClockFreq+0xb8>)
 801031e:	fa22 f303 	lsr.w	r3, r2, r3
 8010322:	60fb      	str	r3, [r7, #12]
      break;
 8010324:	e00d      	b.n	8010342 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 8010326:	4b0a      	ldr	r3, [pc, #40]	@ (8010350 <RCC_GetSystemClockFreq+0xbc>)
 8010328:	60fb      	str	r3, [r7, #12]
      break;
 801032a:	e00a      	b.n	8010342 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 801032c:	4b09      	ldr	r3, [pc, #36]	@ (8010354 <RCC_GetSystemClockFreq+0xc0>)
 801032e:	60fb      	str	r3, [r7, #12]
      break;
 8010330:	e007      	b.n	8010342 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8010332:	463b      	mov	r3, r7
 8010334:	4618      	mov	r0, r3
 8010336:	f7ff fcb5 	bl	800fca4 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	60fb      	str	r3, [r7, #12]
      break;
 801033e:	e000      	b.n	8010342 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8010340:	bf00      	nop
  }

  return frequency;
 8010342:	68fb      	ldr	r3, [r7, #12]
}
 8010344:	4618      	mov	r0, r3
 8010346:	3710      	adds	r7, #16
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	03d09000 	.word	0x03d09000
 8010350:	003d0900 	.word	0x003d0900
 8010354:	017d7840 	.word	0x017d7840

08010358 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8010360:	f7ff fa14 	bl	800f78c <LL_RCC_GetAHBPrescaler>
 8010364:	4603      	mov	r3, r0
 8010366:	f003 030f 	and.w	r3, r3, #15
 801036a:	4a05      	ldr	r2, [pc, #20]	@ (8010380 <RCC_GetHCLKClockFreq+0x28>)
 801036c:	5cd3      	ldrb	r3, [r2, r3]
 801036e:	f003 031f 	and.w	r3, r3, #31
 8010372:	687a      	ldr	r2, [r7, #4]
 8010374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010378:	4618      	mov	r0, r3
 801037a:	3708      	adds	r7, #8
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}
 8010380:	08017290 	.word	0x08017290

08010384 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b082      	sub	sp, #8
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 801038c:	f7ff fa0c 	bl	800f7a8 <LL_RCC_GetAPB1Prescaler>
 8010390:	4603      	mov	r3, r0
 8010392:	091b      	lsrs	r3, r3, #4
 8010394:	f003 0307 	and.w	r3, r3, #7
 8010398:	4a05      	ldr	r2, [pc, #20]	@ (80103b0 <RCC_GetPCLK1ClockFreq+0x2c>)
 801039a:	5cd3      	ldrb	r3, [r2, r3]
 801039c:	f003 031f 	and.w	r3, r3, #31
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	fa22 f303 	lsr.w	r3, r2, r3
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	08017290 	.word	0x08017290

080103b4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80103bc:	f7ff fa02 	bl	800f7c4 <LL_RCC_GetAPB2Prescaler>
 80103c0:	4603      	mov	r3, r0
 80103c2:	0a1b      	lsrs	r3, r3, #8
 80103c4:	f003 0307 	and.w	r3, r3, #7
 80103c8:	4a05      	ldr	r2, [pc, #20]	@ (80103e0 <RCC_GetPCLK2ClockFreq+0x2c>)
 80103ca:	5cd3      	ldrb	r3, [r2, r3]
 80103cc:	f003 031f 	and.w	r3, r3, #31
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	fa22 f303 	lsr.w	r3, r2, r3
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3708      	adds	r7, #8
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	08017290 	.word	0x08017290

080103e4 <LL_SPI_IsEnabled>:
{
 80103e4:	b480      	push	{r7}
 80103e6:	b083      	sub	sp, #12
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f003 0301 	and.w	r3, r3, #1
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d101      	bne.n	80103fc <LL_SPI_IsEnabled+0x18>
 80103f8:	2301      	movs	r3, #1
 80103fa:	e000      	b.n	80103fe <LL_SPI_IsEnabled+0x1a>
 80103fc:	2300      	movs	r3, #0
}
 80103fe:	4618      	mov	r0, r3
 8010400:	370c      	adds	r7, #12
 8010402:	46bd      	mov	sp, r7
 8010404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010408:	4770      	bx	lr

0801040a <LL_SPI_SetInternalSSLevel>:
{
 801040a:	b480      	push	{r7}
 801040c:	b083      	sub	sp, #12
 801040e:	af00      	add	r7, sp, #0
 8010410:	6078      	str	r0, [r7, #4]
 8010412:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	431a      	orrs	r2, r3
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	601a      	str	r2, [r3, #0]
}
 8010424:	bf00      	nop
 8010426:	370c      	adds	r7, #12
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr

08010430 <LL_SPI_GetNSSPolarity>:
{
 8010430:	b480      	push	{r7}
 8010432:	b083      	sub	sp, #12
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	68db      	ldr	r3, [r3, #12]
 801043c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 8010440:	4618      	mov	r0, r3
 8010442:	370c      	adds	r7, #12
 8010444:	46bd      	mov	sp, r7
 8010446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044a:	4770      	bx	lr

0801044c <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 801044c:	b480      	push	{r7}
 801044e:	b083      	sub	sp, #12
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	683a      	ldr	r2, [r7, #0]
 801045a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 801045c:	bf00      	nop
 801045e:	370c      	adds	r7, #12
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr

08010468 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b086      	sub	sp, #24
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8010472:	2301      	movs	r3, #1
 8010474:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f7ff ffb4 	bl	80103e4 <LL_SPI_IsEnabled>
 801047c:	4603      	mov	r3, r0
 801047e:	2b00      	cmp	r3, #0
 8010480:	d167      	bne.n	8010552 <LL_SPI_Init+0xea>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	689a      	ldr	r2, [r3, #8]
 8010486:	4b35      	ldr	r3, [pc, #212]	@ (801055c <LL_SPI_Init+0xf4>)
 8010488:	4013      	ands	r3, r2
 801048a:	683a      	ldr	r2, [r7, #0]
 801048c:	6991      	ldr	r1, [r2, #24]
 801048e:	683a      	ldr	r2, [r7, #0]
 8010490:	6a12      	ldr	r2, [r2, #32]
 8010492:	4311      	orrs	r1, r2
 8010494:	683a      	ldr	r2, [r7, #0]
 8010496:	6892      	ldr	r2, [r2, #8]
 8010498:	430a      	orrs	r2, r1
 801049a:	431a      	orrs	r2, r3
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	695b      	ldr	r3, [r3, #20]
 80104a4:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f7ff ffbf 	bl	8010430 <LL_SPI_GetNSSPolarity>
 80104b2:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80104ba:	d112      	bne.n	80104e2 <LL_SPI_Init+0x7a>
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d103      	bne.n	80104ca <LL_SPI_Init+0x62>
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80104c8:	d006      	beq.n	80104d8 <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80104d0:	d107      	bne.n	80104e2 <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d104      	bne.n	80104e2 <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 80104d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f7ff ff94 	bl	801040a <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	68da      	ldr	r2, [r3, #12]
 80104e6:	4b1e      	ldr	r3, [pc, #120]	@ (8010560 <LL_SPI_Init+0xf8>)
 80104e8:	4013      	ands	r3, r2
 80104ea:	683a      	ldr	r2, [r7, #0]
 80104ec:	6951      	ldr	r1, [r2, #20]
 80104ee:	683a      	ldr	r2, [r7, #0]
 80104f0:	68d2      	ldr	r2, [r2, #12]
 80104f2:	4311      	orrs	r1, r2
 80104f4:	683a      	ldr	r2, [r7, #0]
 80104f6:	6912      	ldr	r2, [r2, #16]
 80104f8:	4311      	orrs	r1, r2
 80104fa:	683a      	ldr	r2, [r7, #0]
 80104fc:	69d2      	ldr	r2, [r2, #28]
 80104fe:	4311      	orrs	r1, r2
 8010500:	683a      	ldr	r2, [r7, #0]
 8010502:	6852      	ldr	r2, [r2, #4]
 8010504:	4311      	orrs	r1, r2
 8010506:	683a      	ldr	r2, [r7, #0]
 8010508:	6812      	ldr	r2, [r2, #0]
 801050a:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 801050e:	430a      	orrs	r2, r1
 8010510:	431a      	orrs	r2, r3
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010526:	431a      	orrs	r2, r3
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	6a1b      	ldr	r3, [r3, #32]
 8010530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010534:	d105      	bne.n	8010542 <LL_SPI_Init+0xda>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801053a:	4619      	mov	r1, r3
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f7ff ff85 	bl	801044c <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010546:	f023 0201 	bic.w	r2, r3, #1
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 801054e:	2300      	movs	r3, #0
 8010550:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8010552:	7dfb      	ldrb	r3, [r7, #23]
}
 8010554:	4618      	mov	r0, r3
 8010556:	3718      	adds	r7, #24
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}
 801055c:	8fbfffe0 	.word	0x8fbfffe0
 8010560:	d839ffff 	.word	0xd839ffff

08010564 <LL_TIM_SetPrescaler>:
{
 8010564:	b480      	push	{r7}
 8010566:	b083      	sub	sp, #12
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	683a      	ldr	r2, [r7, #0]
 8010572:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010574:	bf00      	nop
 8010576:	370c      	adds	r7, #12
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr

08010580 <LL_TIM_SetAutoReload>:
{
 8010580:	b480      	push	{r7}
 8010582:	b083      	sub	sp, #12
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	683a      	ldr	r2, [r7, #0]
 801058e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8010590:	bf00      	nop
 8010592:	370c      	adds	r7, #12
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr

0801059c <LL_TIM_SetRepetitionCounter>:
{
 801059c:	b480      	push	{r7}
 801059e:	b083      	sub	sp, #12
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	683a      	ldr	r2, [r7, #0]
 80105aa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80105ac:	bf00      	nop
 80105ae:	370c      	adds	r7, #12
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr

080105b8 <LL_TIM_OC_SetCompareCH1>:
{
 80105b8:	b480      	push	{r7}
 80105ba:	b083      	sub	sp, #12
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	683a      	ldr	r2, [r7, #0]
 80105c6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80105c8:	bf00      	nop
 80105ca:	370c      	adds	r7, #12
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr

080105d4 <LL_TIM_OC_SetCompareCH2>:
{
 80105d4:	b480      	push	{r7}
 80105d6:	b083      	sub	sp, #12
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	683a      	ldr	r2, [r7, #0]
 80105e2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80105e4:	bf00      	nop
 80105e6:	370c      	adds	r7, #12
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr

080105f0 <LL_TIM_OC_SetCompareCH3>:
{
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	683a      	ldr	r2, [r7, #0]
 80105fe:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8010600:	bf00      	nop
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr

0801060c <LL_TIM_OC_SetCompareCH4>:
{
 801060c:	b480      	push	{r7}
 801060e:	b083      	sub	sp, #12
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	683a      	ldr	r2, [r7, #0]
 801061a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 801061c:	bf00      	nop
 801061e:	370c      	adds	r7, #12
 8010620:	46bd      	mov	sp, r7
 8010622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010626:	4770      	bx	lr

08010628 <LL_TIM_OC_SetCompareCH5>:
{
 8010628:	b480      	push	{r7}
 801062a:	b083      	sub	sp, #12
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	683a      	ldr	r2, [r7, #0]
 801063a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 801063c:	bf00      	nop
 801063e:	370c      	adds	r7, #12
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <LL_TIM_OC_SetCompareCH6>:
{
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	683a      	ldr	r2, [r7, #0]
 8010656:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8010658:	bf00      	nop
 801065a:	370c      	adds	r7, #12
 801065c:	46bd      	mov	sp, r7
 801065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010662:	4770      	bx	lr

08010664 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8010664:	b480      	push	{r7}
 8010666:	b083      	sub	sp, #12
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	695b      	ldr	r3, [r3, #20]
 8010670:	f043 0201 	orr.w	r2, r3, #1
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	615a      	str	r2, [r3, #20]
}
 8010678:	bf00      	nop
 801067a:	370c      	adds	r7, #12
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr

08010684 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b084      	sub	sp, #16
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	4a41      	ldr	r2, [pc, #260]	@ (801079c <LL_TIM_Init+0x118>)
 8010698:	4293      	cmp	r3, r2
 801069a:	d013      	beq.n	80106c4 <LL_TIM_Init+0x40>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80106a2:	d00f      	beq.n	80106c4 <LL_TIM_Init+0x40>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	4a3e      	ldr	r2, [pc, #248]	@ (80107a0 <LL_TIM_Init+0x11c>)
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d00b      	beq.n	80106c4 <LL_TIM_Init+0x40>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	4a3d      	ldr	r2, [pc, #244]	@ (80107a4 <LL_TIM_Init+0x120>)
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d007      	beq.n	80106c4 <LL_TIM_Init+0x40>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4a3c      	ldr	r2, [pc, #240]	@ (80107a8 <LL_TIM_Init+0x124>)
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d003      	beq.n	80106c4 <LL_TIM_Init+0x40>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	4a3b      	ldr	r2, [pc, #236]	@ (80107ac <LL_TIM_Init+0x128>)
 80106c0:	4293      	cmp	r3, r2
 80106c2:	d106      	bne.n	80106d2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	685b      	ldr	r3, [r3, #4]
 80106ce:	4313      	orrs	r3, r2
 80106d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4a31      	ldr	r2, [pc, #196]	@ (801079c <LL_TIM_Init+0x118>)
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d027      	beq.n	801072a <LL_TIM_Init+0xa6>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80106e0:	d023      	beq.n	801072a <LL_TIM_Init+0xa6>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4a2e      	ldr	r2, [pc, #184]	@ (80107a0 <LL_TIM_Init+0x11c>)
 80106e6:	4293      	cmp	r3, r2
 80106e8:	d01f      	beq.n	801072a <LL_TIM_Init+0xa6>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	4a2d      	ldr	r2, [pc, #180]	@ (80107a4 <LL_TIM_Init+0x120>)
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d01b      	beq.n	801072a <LL_TIM_Init+0xa6>
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	4a2c      	ldr	r2, [pc, #176]	@ (80107a8 <LL_TIM_Init+0x124>)
 80106f6:	4293      	cmp	r3, r2
 80106f8:	d017      	beq.n	801072a <LL_TIM_Init+0xa6>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	4a2b      	ldr	r2, [pc, #172]	@ (80107ac <LL_TIM_Init+0x128>)
 80106fe:	4293      	cmp	r3, r2
 8010700:	d013      	beq.n	801072a <LL_TIM_Init+0xa6>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	4a2a      	ldr	r2, [pc, #168]	@ (80107b0 <LL_TIM_Init+0x12c>)
 8010706:	4293      	cmp	r3, r2
 8010708:	d00f      	beq.n	801072a <LL_TIM_Init+0xa6>
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	4a29      	ldr	r2, [pc, #164]	@ (80107b4 <LL_TIM_Init+0x130>)
 801070e:	4293      	cmp	r3, r2
 8010710:	d00b      	beq.n	801072a <LL_TIM_Init+0xa6>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	4a28      	ldr	r2, [pc, #160]	@ (80107b8 <LL_TIM_Init+0x134>)
 8010716:	4293      	cmp	r3, r2
 8010718:	d007      	beq.n	801072a <LL_TIM_Init+0xa6>
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	4a27      	ldr	r2, [pc, #156]	@ (80107bc <LL_TIM_Init+0x138>)
 801071e:	4293      	cmp	r3, r2
 8010720:	d003      	beq.n	801072a <LL_TIM_Init+0xa6>
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	4a26      	ldr	r2, [pc, #152]	@ (80107c0 <LL_TIM_Init+0x13c>)
 8010726:	4293      	cmp	r3, r2
 8010728:	d106      	bne.n	8010738 <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	4313      	orrs	r3, r2
 8010736:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	68fa      	ldr	r2, [r7, #12]
 801073c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	689b      	ldr	r3, [r3, #8]
 8010742:	4619      	mov	r1, r3
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f7ff ff1b 	bl	8010580 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	881b      	ldrh	r3, [r3, #0]
 801074e:	4619      	mov	r1, r3
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f7ff ff07 	bl	8010564 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	4a10      	ldr	r2, [pc, #64]	@ (801079c <LL_TIM_Init+0x118>)
 801075a:	4293      	cmp	r3, r2
 801075c:	d00f      	beq.n	801077e <LL_TIM_Init+0xfa>
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	4a12      	ldr	r2, [pc, #72]	@ (80107ac <LL_TIM_Init+0x128>)
 8010762:	4293      	cmp	r3, r2
 8010764:	d00b      	beq.n	801077e <LL_TIM_Init+0xfa>
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	4a11      	ldr	r2, [pc, #68]	@ (80107b0 <LL_TIM_Init+0x12c>)
 801076a:	4293      	cmp	r3, r2
 801076c:	d007      	beq.n	801077e <LL_TIM_Init+0xfa>
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	4a10      	ldr	r2, [pc, #64]	@ (80107b4 <LL_TIM_Init+0x130>)
 8010772:	4293      	cmp	r3, r2
 8010774:	d003      	beq.n	801077e <LL_TIM_Init+0xfa>
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	4a0f      	ldr	r2, [pc, #60]	@ (80107b8 <LL_TIM_Init+0x134>)
 801077a:	4293      	cmp	r3, r2
 801077c:	d105      	bne.n	801078a <LL_TIM_Init+0x106>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	691b      	ldr	r3, [r3, #16]
 8010782:	4619      	mov	r1, r3
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f7ff ff09 	bl	801059c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f7ff ff6a 	bl	8010664 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8010790:	2300      	movs	r3, #0
}
 8010792:	4618      	mov	r0, r3
 8010794:	3710      	adds	r7, #16
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	40010000 	.word	0x40010000
 80107a0:	40000400 	.word	0x40000400
 80107a4:	40000800 	.word	0x40000800
 80107a8:	40000c00 	.word	0x40000c00
 80107ac:	40010400 	.word	0x40010400
 80107b0:	40014000 	.word	0x40014000
 80107b4:	40014400 	.word	0x40014400
 80107b8:	40014800 	.word	0x40014800
 80107bc:	4000e000 	.word	0x4000e000
 80107c0:	4000e400 	.word	0x4000e400

080107c4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b086      	sub	sp, #24
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	60b9      	str	r1, [r7, #8]
 80107ce:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80107d0:	2301      	movs	r3, #1
 80107d2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80107da:	d045      	beq.n	8010868 <LL_TIM_OC_Init+0xa4>
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80107e2:	d848      	bhi.n	8010876 <LL_TIM_OC_Init+0xb2>
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80107ea:	d036      	beq.n	801085a <LL_TIM_OC_Init+0x96>
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80107f2:	d840      	bhi.n	8010876 <LL_TIM_OC_Init+0xb2>
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80107fa:	d027      	beq.n	801084c <LL_TIM_OC_Init+0x88>
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010802:	d838      	bhi.n	8010876 <LL_TIM_OC_Init+0xb2>
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801080a:	d018      	beq.n	801083e <LL_TIM_OC_Init+0x7a>
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010812:	d830      	bhi.n	8010876 <LL_TIM_OC_Init+0xb2>
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	2b01      	cmp	r3, #1
 8010818:	d003      	beq.n	8010822 <LL_TIM_OC_Init+0x5e>
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	2b10      	cmp	r3, #16
 801081e:	d007      	beq.n	8010830 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8010820:	e029      	b.n	8010876 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8010822:	6879      	ldr	r1, [r7, #4]
 8010824:	68f8      	ldr	r0, [r7, #12]
 8010826:	f000 f82d 	bl	8010884 <OC1Config>
 801082a:	4603      	mov	r3, r0
 801082c:	75fb      	strb	r3, [r7, #23]
      break;
 801082e:	e023      	b.n	8010878 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8010830:	6879      	ldr	r1, [r7, #4]
 8010832:	68f8      	ldr	r0, [r7, #12]
 8010834:	f000 f8a6 	bl	8010984 <OC2Config>
 8010838:	4603      	mov	r3, r0
 801083a:	75fb      	strb	r3, [r7, #23]
      break;
 801083c:	e01c      	b.n	8010878 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 801083e:	6879      	ldr	r1, [r7, #4]
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f000 f923 	bl	8010a8c <OC3Config>
 8010846:	4603      	mov	r3, r0
 8010848:	75fb      	strb	r3, [r7, #23]
      break;
 801084a:	e015      	b.n	8010878 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 801084c:	6879      	ldr	r1, [r7, #4]
 801084e:	68f8      	ldr	r0, [r7, #12]
 8010850:	f000 f9a0 	bl	8010b94 <OC4Config>
 8010854:	4603      	mov	r3, r0
 8010856:	75fb      	strb	r3, [r7, #23]
      break;
 8010858:	e00e      	b.n	8010878 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 801085a:	6879      	ldr	r1, [r7, #4]
 801085c:	68f8      	ldr	r0, [r7, #12]
 801085e:	f000 fa05 	bl	8010c6c <OC5Config>
 8010862:	4603      	mov	r3, r0
 8010864:	75fb      	strb	r3, [r7, #23]
      break;
 8010866:	e007      	b.n	8010878 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8010868:	6879      	ldr	r1, [r7, #4]
 801086a:	68f8      	ldr	r0, [r7, #12]
 801086c:	f000 fa62 	bl	8010d34 <OC6Config>
 8010870:	4603      	mov	r3, r0
 8010872:	75fb      	strb	r3, [r7, #23]
      break;
 8010874:	e000      	b.n	8010878 <LL_TIM_OC_Init+0xb4>
      break;
 8010876:	bf00      	nop
  }

  return result;
 8010878:	7dfb      	ldrb	r3, [r7, #23]
}
 801087a:	4618      	mov	r0, r3
 801087c:	3718      	adds	r7, #24
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}
	...

08010884 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b086      	sub	sp, #24
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6a1b      	ldr	r3, [r3, #32]
 8010892:	f023 0201 	bic.w	r2, r3, #1
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6a1b      	ldr	r3, [r3, #32]
 801089e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	699b      	ldr	r3, [r3, #24]
 80108aa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f023 0303 	bic.w	r3, r3, #3
 80108b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80108b4:	68fa      	ldr	r2, [r7, #12]
 80108b6:	4b2d      	ldr	r3, [pc, #180]	@ (801096c <OC1Config+0xe8>)
 80108b8:	4013      	ands	r3, r2
 80108ba:	683a      	ldr	r2, [r7, #0]
 80108bc:	6812      	ldr	r2, [r2, #0]
 80108be:	4313      	orrs	r3, r2
 80108c0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	f023 0202 	bic.w	r2, r3, #2
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	691b      	ldr	r3, [r3, #16]
 80108cc:	4313      	orrs	r3, r2
 80108ce:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	f023 0201 	bic.w	r2, r3, #1
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	685b      	ldr	r3, [r3, #4]
 80108da:	4313      	orrs	r3, r2
 80108dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	4a23      	ldr	r2, [pc, #140]	@ (8010970 <OC1Config+0xec>)
 80108e2:	4293      	cmp	r3, r2
 80108e4:	d00f      	beq.n	8010906 <OC1Config+0x82>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	4a22      	ldr	r2, [pc, #136]	@ (8010974 <OC1Config+0xf0>)
 80108ea:	4293      	cmp	r3, r2
 80108ec:	d00b      	beq.n	8010906 <OC1Config+0x82>
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	4a21      	ldr	r2, [pc, #132]	@ (8010978 <OC1Config+0xf4>)
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d007      	beq.n	8010906 <OC1Config+0x82>
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	4a20      	ldr	r2, [pc, #128]	@ (801097c <OC1Config+0xf8>)
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d003      	beq.n	8010906 <OC1Config+0x82>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	4a1f      	ldr	r2, [pc, #124]	@ (8010980 <OC1Config+0xfc>)
 8010902:	4293      	cmp	r3, r2
 8010904:	d11e      	bne.n	8010944 <OC1Config+0xc0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	f023 0208 	bic.w	r2, r3, #8
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	695b      	ldr	r3, [r3, #20]
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	4313      	orrs	r3, r2
 8010914:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	f023 0204 	bic.w	r2, r3, #4
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	689b      	ldr	r3, [r3, #8]
 8010920:	009b      	lsls	r3, r3, #2
 8010922:	4313      	orrs	r3, r2
 8010924:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	699b      	ldr	r3, [r3, #24]
 8010930:	4313      	orrs	r3, r2
 8010932:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	69db      	ldr	r3, [r3, #28]
 801093e:	005b      	lsls	r3, r3, #1
 8010940:	4313      	orrs	r3, r2
 8010942:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	693a      	ldr	r2, [r7, #16]
 8010948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	68fa      	ldr	r2, [r7, #12]
 801094e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	68db      	ldr	r3, [r3, #12]
 8010954:	4619      	mov	r1, r3
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f7ff fe2e 	bl	80105b8 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	697a      	ldr	r2, [r7, #20]
 8010960:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010962:	2300      	movs	r3, #0
}
 8010964:	4618      	mov	r0, r3
 8010966:	3718      	adds	r7, #24
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	fffeff8f 	.word	0xfffeff8f
 8010970:	40010000 	.word	0x40010000
 8010974:	40010400 	.word	0x40010400
 8010978:	40014000 	.word	0x40014000
 801097c:	40014400 	.word	0x40014400
 8010980:	40014800 	.word	0x40014800

08010984 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b086      	sub	sp, #24
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6a1b      	ldr	r3, [r3, #32]
 8010992:	f023 0210 	bic.w	r2, r3, #16
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6a1b      	ldr	r3, [r3, #32]
 801099e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	699b      	ldr	r3, [r3, #24]
 80109aa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80109b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80109b4:	68fa      	ldr	r2, [r7, #12]
 80109b6:	4b2f      	ldr	r3, [pc, #188]	@ (8010a74 <OC2Config+0xf0>)
 80109b8:	4013      	ands	r3, r2
 80109ba:	683a      	ldr	r2, [r7, #0]
 80109bc:	6812      	ldr	r2, [r2, #0]
 80109be:	0212      	lsls	r2, r2, #8
 80109c0:	4313      	orrs	r3, r2
 80109c2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	f023 0220 	bic.w	r2, r3, #32
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	691b      	ldr	r3, [r3, #16]
 80109ce:	011b      	lsls	r3, r3, #4
 80109d0:	4313      	orrs	r3, r2
 80109d2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	f023 0210 	bic.w	r2, r3, #16
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	011b      	lsls	r3, r3, #4
 80109e0:	4313      	orrs	r3, r2
 80109e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	4a24      	ldr	r2, [pc, #144]	@ (8010a78 <OC2Config+0xf4>)
 80109e8:	4293      	cmp	r3, r2
 80109ea:	d00f      	beq.n	8010a0c <OC2Config+0x88>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	4a23      	ldr	r2, [pc, #140]	@ (8010a7c <OC2Config+0xf8>)
 80109f0:	4293      	cmp	r3, r2
 80109f2:	d00b      	beq.n	8010a0c <OC2Config+0x88>
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	4a22      	ldr	r2, [pc, #136]	@ (8010a80 <OC2Config+0xfc>)
 80109f8:	4293      	cmp	r3, r2
 80109fa:	d007      	beq.n	8010a0c <OC2Config+0x88>
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	4a21      	ldr	r2, [pc, #132]	@ (8010a84 <OC2Config+0x100>)
 8010a00:	4293      	cmp	r3, r2
 8010a02:	d003      	beq.n	8010a0c <OC2Config+0x88>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	4a20      	ldr	r2, [pc, #128]	@ (8010a88 <OC2Config+0x104>)
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	d11f      	bne.n	8010a4c <OC2Config+0xc8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	695b      	ldr	r3, [r3, #20]
 8010a16:	019b      	lsls	r3, r3, #6
 8010a18:	4313      	orrs	r3, r2
 8010a1a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	689b      	ldr	r3, [r3, #8]
 8010a26:	019b      	lsls	r3, r3, #6
 8010a28:	4313      	orrs	r3, r2
 8010a2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8010a2c:	693b      	ldr	r3, [r7, #16]
 8010a2e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	699b      	ldr	r3, [r3, #24]
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	4313      	orrs	r3, r2
 8010a3a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	69db      	ldr	r3, [r3, #28]
 8010a46:	00db      	lsls	r3, r3, #3
 8010a48:	4313      	orrs	r3, r2
 8010a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	693a      	ldr	r2, [r7, #16]
 8010a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	68fa      	ldr	r2, [r7, #12]
 8010a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	68db      	ldr	r3, [r3, #12]
 8010a5c:	4619      	mov	r1, r3
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f7ff fdb8 	bl	80105d4 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	697a      	ldr	r2, [r7, #20]
 8010a68:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010a6a:	2300      	movs	r3, #0
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3718      	adds	r7, #24
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}
 8010a74:	feff8fff 	.word	0xfeff8fff
 8010a78:	40010000 	.word	0x40010000
 8010a7c:	40010400 	.word	0x40010400
 8010a80:	40014000 	.word	0x40014000
 8010a84:	40014400 	.word	0x40014400
 8010a88:	40014800 	.word	0x40014800

08010a8c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b086      	sub	sp, #24
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6a1b      	ldr	r3, [r3, #32]
 8010a9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6a1b      	ldr	r3, [r3, #32]
 8010aa6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	685b      	ldr	r3, [r3, #4]
 8010aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	69db      	ldr	r3, [r3, #28]
 8010ab2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f023 0303 	bic.w	r3, r3, #3
 8010aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8010abc:	68fa      	ldr	r2, [r7, #12]
 8010abe:	4b2f      	ldr	r3, [pc, #188]	@ (8010b7c <OC3Config+0xf0>)
 8010ac0:	4013      	ands	r3, r2
 8010ac2:	683a      	ldr	r2, [r7, #0]
 8010ac4:	6812      	ldr	r2, [r2, #0]
 8010ac6:	4313      	orrs	r3, r2
 8010ac8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	691b      	ldr	r3, [r3, #16]
 8010ad4:	021b      	lsls	r3, r3, #8
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	685b      	ldr	r3, [r3, #4]
 8010ae4:	021b      	lsls	r3, r3, #8
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	4a24      	ldr	r2, [pc, #144]	@ (8010b80 <OC3Config+0xf4>)
 8010aee:	4293      	cmp	r3, r2
 8010af0:	d00f      	beq.n	8010b12 <OC3Config+0x86>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	4a23      	ldr	r2, [pc, #140]	@ (8010b84 <OC3Config+0xf8>)
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d00b      	beq.n	8010b12 <OC3Config+0x86>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	4a22      	ldr	r2, [pc, #136]	@ (8010b88 <OC3Config+0xfc>)
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d007      	beq.n	8010b12 <OC3Config+0x86>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	4a21      	ldr	r2, [pc, #132]	@ (8010b8c <OC3Config+0x100>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d003      	beq.n	8010b12 <OC3Config+0x86>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	4a20      	ldr	r2, [pc, #128]	@ (8010b90 <OC3Config+0x104>)
 8010b0e:	4293      	cmp	r3, r2
 8010b10:	d11f      	bne.n	8010b52 <OC3Config+0xc6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8010b12:	697b      	ldr	r3, [r7, #20]
 8010b14:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	695b      	ldr	r3, [r3, #20]
 8010b1c:	029b      	lsls	r3, r3, #10
 8010b1e:	4313      	orrs	r3, r2
 8010b20:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	689b      	ldr	r3, [r3, #8]
 8010b2c:	029b      	lsls	r3, r3, #10
 8010b2e:	4313      	orrs	r3, r2
 8010b30:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	699b      	ldr	r3, [r3, #24]
 8010b3c:	011b      	lsls	r3, r3, #4
 8010b3e:	4313      	orrs	r3, r2
 8010b40:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8010b42:	693b      	ldr	r3, [r7, #16]
 8010b44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	69db      	ldr	r3, [r3, #28]
 8010b4c:	015b      	lsls	r3, r3, #5
 8010b4e:	4313      	orrs	r3, r2
 8010b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	693a      	ldr	r2, [r7, #16]
 8010b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	68fa      	ldr	r2, [r7, #12]
 8010b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	68db      	ldr	r3, [r3, #12]
 8010b62:	4619      	mov	r1, r3
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f7ff fd43 	bl	80105f0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	697a      	ldr	r2, [r7, #20]
 8010b6e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010b70:	2300      	movs	r3, #0
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3718      	adds	r7, #24
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}
 8010b7a:	bf00      	nop
 8010b7c:	fffeff8f 	.word	0xfffeff8f
 8010b80:	40010000 	.word	0x40010000
 8010b84:	40010400 	.word	0x40010400
 8010b88:	40014000 	.word	0x40014000
 8010b8c:	40014400 	.word	0x40014400
 8010b90:	40014800 	.word	0x40014800

08010b94 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b086      	sub	sp, #24
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
 8010b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6a1b      	ldr	r3, [r3, #32]
 8010ba2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6a1b      	ldr	r3, [r3, #32]
 8010bae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	685b      	ldr	r3, [r3, #4]
 8010bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	69db      	ldr	r3, [r3, #28]
 8010bba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8010bc4:	68fa      	ldr	r2, [r7, #12]
 8010bc6:	4b23      	ldr	r3, [pc, #140]	@ (8010c54 <OC4Config+0xc0>)
 8010bc8:	4013      	ands	r3, r2
 8010bca:	683a      	ldr	r2, [r7, #0]
 8010bcc:	6812      	ldr	r2, [r2, #0]
 8010bce:	0212      	lsls	r2, r2, #8
 8010bd0:	4313      	orrs	r3, r2
 8010bd2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	691b      	ldr	r3, [r3, #16]
 8010bde:	031b      	lsls	r3, r3, #12
 8010be0:	4313      	orrs	r3, r2
 8010be2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	031b      	lsls	r3, r3, #12
 8010bf0:	4313      	orrs	r3, r2
 8010bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	4a18      	ldr	r2, [pc, #96]	@ (8010c58 <OC4Config+0xc4>)
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	d00f      	beq.n	8010c1c <OC4Config+0x88>
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	4a17      	ldr	r2, [pc, #92]	@ (8010c5c <OC4Config+0xc8>)
 8010c00:	4293      	cmp	r3, r2
 8010c02:	d00b      	beq.n	8010c1c <OC4Config+0x88>
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	4a16      	ldr	r2, [pc, #88]	@ (8010c60 <OC4Config+0xcc>)
 8010c08:	4293      	cmp	r3, r2
 8010c0a:	d007      	beq.n	8010c1c <OC4Config+0x88>
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	4a15      	ldr	r2, [pc, #84]	@ (8010c64 <OC4Config+0xd0>)
 8010c10:	4293      	cmp	r3, r2
 8010c12:	d003      	beq.n	8010c1c <OC4Config+0x88>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	4a14      	ldr	r2, [pc, #80]	@ (8010c68 <OC4Config+0xd4>)
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d107      	bne.n	8010c2c <OC4Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	699b      	ldr	r3, [r3, #24]
 8010c26:	019b      	lsls	r3, r3, #6
 8010c28:	4313      	orrs	r3, r2
 8010c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	697a      	ldr	r2, [r7, #20]
 8010c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	68fa      	ldr	r2, [r7, #12]
 8010c36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	68db      	ldr	r3, [r3, #12]
 8010c3c:	4619      	mov	r1, r3
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f7ff fce4 	bl	801060c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	693a      	ldr	r2, [r7, #16]
 8010c48:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010c4a:	2300      	movs	r3, #0
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3718      	adds	r7, #24
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}
 8010c54:	feff8fff 	.word	0xfeff8fff
 8010c58:	40010000 	.word	0x40010000
 8010c5c:	40010400 	.word	0x40010400
 8010c60:	40014000 	.word	0x40014000
 8010c64:	40014400 	.word	0x40014400
 8010c68:	40014800 	.word	0x40014800

08010c6c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b084      	sub	sp, #16
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6a1b      	ldr	r3, [r3, #32]
 8010c7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6a1b      	ldr	r3, [r3, #32]
 8010c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c8c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8010c8e:	68ba      	ldr	r2, [r7, #8]
 8010c90:	4b22      	ldr	r3, [pc, #136]	@ (8010d1c <OC5Config+0xb0>)
 8010c92:	4013      	ands	r3, r2
 8010c94:	683a      	ldr	r2, [r7, #0]
 8010c96:	6812      	ldr	r2, [r2, #0]
 8010c98:	4313      	orrs	r3, r2
 8010c9a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	691b      	ldr	r3, [r3, #16]
 8010ca6:	041b      	lsls	r3, r3, #16
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	685b      	ldr	r3, [r3, #4]
 8010cb6:	041b      	lsls	r3, r3, #16
 8010cb8:	4313      	orrs	r3, r2
 8010cba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	4a18      	ldr	r2, [pc, #96]	@ (8010d20 <OC5Config+0xb4>)
 8010cc0:	4293      	cmp	r3, r2
 8010cc2:	d00f      	beq.n	8010ce4 <OC5Config+0x78>
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	4a17      	ldr	r2, [pc, #92]	@ (8010d24 <OC5Config+0xb8>)
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	d00b      	beq.n	8010ce4 <OC5Config+0x78>
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	4a16      	ldr	r2, [pc, #88]	@ (8010d28 <OC5Config+0xbc>)
 8010cd0:	4293      	cmp	r3, r2
 8010cd2:	d007      	beq.n	8010ce4 <OC5Config+0x78>
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	4a15      	ldr	r2, [pc, #84]	@ (8010d2c <OC5Config+0xc0>)
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d003      	beq.n	8010ce4 <OC5Config+0x78>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	4a14      	ldr	r2, [pc, #80]	@ (8010d30 <OC5Config+0xc4>)
 8010ce0:	4293      	cmp	r3, r2
 8010ce2:	d109      	bne.n	8010cf8 <OC5Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	685b      	ldr	r3, [r3, #4]
 8010ce8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	699b      	ldr	r3, [r3, #24]
 8010cf0:	021b      	lsls	r3, r3, #8
 8010cf2:	431a      	orrs	r2, r3
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	68ba      	ldr	r2, [r7, #8]
 8010cfc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	68db      	ldr	r3, [r3, #12]
 8010d02:	4619      	mov	r1, r3
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f7ff fc8f 	bl	8010628 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	68fa      	ldr	r2, [r7, #12]
 8010d0e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010d10:	2300      	movs	r3, #0
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3710      	adds	r7, #16
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	fffeff8f 	.word	0xfffeff8f
 8010d20:	40010000 	.word	0x40010000
 8010d24:	40010400 	.word	0x40010400
 8010d28:	40014000 	.word	0x40014000
 8010d2c:	40014400 	.word	0x40014400
 8010d30:	40014800 	.word	0x40014800

08010d34 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b084      	sub	sp, #16
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6a1b      	ldr	r3, [r3, #32]
 8010d42:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6a1b      	ldr	r3, [r3, #32]
 8010d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d54:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8010d56:	68ba      	ldr	r2, [r7, #8]
 8010d58:	4b22      	ldr	r3, [pc, #136]	@ (8010de4 <OC6Config+0xb0>)
 8010d5a:	4013      	ands	r3, r2
 8010d5c:	683a      	ldr	r2, [r7, #0]
 8010d5e:	6812      	ldr	r2, [r2, #0]
 8010d60:	0212      	lsls	r2, r2, #8
 8010d62:	4313      	orrs	r3, r2
 8010d64:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	691b      	ldr	r3, [r3, #16]
 8010d70:	051b      	lsls	r3, r3, #20
 8010d72:	4313      	orrs	r3, r2
 8010d74:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	685b      	ldr	r3, [r3, #4]
 8010d80:	051b      	lsls	r3, r3, #20
 8010d82:	4313      	orrs	r3, r2
 8010d84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	4a17      	ldr	r2, [pc, #92]	@ (8010de8 <OC6Config+0xb4>)
 8010d8a:	4293      	cmp	r3, r2
 8010d8c:	d00f      	beq.n	8010dae <OC6Config+0x7a>
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	4a16      	ldr	r2, [pc, #88]	@ (8010dec <OC6Config+0xb8>)
 8010d92:	4293      	cmp	r3, r2
 8010d94:	d00b      	beq.n	8010dae <OC6Config+0x7a>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	4a15      	ldr	r2, [pc, #84]	@ (8010df0 <OC6Config+0xbc>)
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d007      	beq.n	8010dae <OC6Config+0x7a>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	4a14      	ldr	r2, [pc, #80]	@ (8010df4 <OC6Config+0xc0>)
 8010da2:	4293      	cmp	r3, r2
 8010da4:	d003      	beq.n	8010dae <OC6Config+0x7a>
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	4a13      	ldr	r2, [pc, #76]	@ (8010df8 <OC6Config+0xc4>)
 8010daa:	4293      	cmp	r3, r2
 8010dac:	d109      	bne.n	8010dc2 <OC6Config+0x8e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	699b      	ldr	r3, [r3, #24]
 8010dba:	029b      	lsls	r3, r3, #10
 8010dbc:	431a      	orrs	r2, r3
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	68ba      	ldr	r2, [r7, #8]
 8010dc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	68db      	ldr	r3, [r3, #12]
 8010dcc:	4619      	mov	r1, r3
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f7ff fc3a 	bl	8010648 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	68fa      	ldr	r2, [r7, #12]
 8010dd8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010dda:	2300      	movs	r3, #0
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3710      	adds	r7, #16
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}
 8010de4:	feff8fff 	.word	0xfeff8fff
 8010de8:	40010000 	.word	0x40010000
 8010dec:	40010400 	.word	0x40010400
 8010df0:	40014000 	.word	0x40014000
 8010df4:	40014400 	.word	0x40014400
 8010df8:	40014800 	.word	0x40014800

08010dfc <LL_USART_IsEnabled>:
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b083      	sub	sp, #12
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	f003 0301 	and.w	r3, r3, #1
 8010e0c:	2b01      	cmp	r3, #1
 8010e0e:	d101      	bne.n	8010e14 <LL_USART_IsEnabled+0x18>
 8010e10:	2301      	movs	r3, #1
 8010e12:	e000      	b.n	8010e16 <LL_USART_IsEnabled+0x1a>
 8010e14:	2300      	movs	r3, #0
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	370c      	adds	r7, #12
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e20:	4770      	bx	lr

08010e22 <LL_USART_SetPrescaler>:
{
 8010e22:	b480      	push	{r7}
 8010e24:	b083      	sub	sp, #12
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	6078      	str	r0, [r7, #4]
 8010e2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e30:	f023 030f 	bic.w	r3, r3, #15
 8010e34:	683a      	ldr	r2, [r7, #0]
 8010e36:	b292      	uxth	r2, r2
 8010e38:	431a      	orrs	r2, r3
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8010e3e:	bf00      	nop
 8010e40:	370c      	adds	r7, #12
 8010e42:	46bd      	mov	sp, r7
 8010e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e48:	4770      	bx	lr

08010e4a <LL_USART_SetStopBitsLength>:
{
 8010e4a:	b480      	push	{r7}
 8010e4c:	b083      	sub	sp, #12
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	6078      	str	r0, [r7, #4]
 8010e52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	685b      	ldr	r3, [r3, #4]
 8010e58:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	431a      	orrs	r2, r3
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	605a      	str	r2, [r3, #4]
}
 8010e64:	bf00      	nop
 8010e66:	370c      	adds	r7, #12
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr

08010e70 <LL_USART_SetHWFlowCtrl>:
{
 8010e70:	b480      	push	{r7}
 8010e72:	b083      	sub	sp, #12
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	689b      	ldr	r3, [r3, #8]
 8010e7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	431a      	orrs	r2, r3
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	609a      	str	r2, [r3, #8]
}
 8010e8a:	bf00      	nop
 8010e8c:	370c      	adds	r7, #12
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e94:	4770      	bx	lr
	...

08010e98 <LL_USART_SetBaudRate>:
{
 8010e98:	b480      	push	{r7}
 8010e9a:	b087      	sub	sp, #28
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	60f8      	str	r0, [r7, #12]
 8010ea0:	60b9      	str	r1, [r7, #8]
 8010ea2:	607a      	str	r2, [r7, #4]
 8010ea4:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2b0b      	cmp	r3, #11
 8010eaa:	d83c      	bhi.n	8010f26 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8010eac:	6a3b      	ldr	r3, [r7, #32]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d039      	beq.n	8010f26 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010eb8:	d122      	bne.n	8010f00 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	b2db      	uxtb	r3, r3
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8010f34 <LL_USART_SetBaudRate+0x9c>)
 8010ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ec6:	68ba      	ldr	r2, [r7, #8]
 8010ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ecc:	005a      	lsls	r2, r3, #1
 8010ece:	6a3b      	ldr	r3, [r7, #32]
 8010ed0:	085b      	lsrs	r3, r3, #1
 8010ed2:	441a      	add	r2, r3
 8010ed4:	6a3b      	ldr	r3, [r7, #32]
 8010ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8010ede:	697a      	ldr	r2, [r7, #20]
 8010ee0:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8010ee4:	4013      	ands	r3, r2
 8010ee6:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	085b      	lsrs	r3, r3, #1
 8010eec:	b29b      	uxth	r3, r3
 8010eee:	f003 0307 	and.w	r3, r3, #7
 8010ef2:	693a      	ldr	r2, [r7, #16]
 8010ef4:	4313      	orrs	r3, r2
 8010ef6:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	693a      	ldr	r2, [r7, #16]
 8010efc:	60da      	str	r2, [r3, #12]
}
 8010efe:	e012      	b.n	8010f26 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	b2db      	uxtb	r3, r3
 8010f04:	461a      	mov	r2, r3
 8010f06:	4b0b      	ldr	r3, [pc, #44]	@ (8010f34 <LL_USART_SetBaudRate+0x9c>)
 8010f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f0c:	68ba      	ldr	r2, [r7, #8]
 8010f0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8010f12:	6a3b      	ldr	r3, [r7, #32]
 8010f14:	085b      	lsrs	r3, r3, #1
 8010f16:	441a      	add	r2, r3
 8010f18:	6a3b      	ldr	r3, [r7, #32]
 8010f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f1e:	b29b      	uxth	r3, r3
 8010f20:	461a      	mov	r2, r3
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	60da      	str	r2, [r3, #12]
}
 8010f26:	bf00      	nop
 8010f28:	371c      	adds	r7, #28
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f30:	4770      	bx	lr
 8010f32:	bf00      	nop
 8010f34:	080172a0 	.word	0x080172a0

08010f38 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b086      	sub	sp, #24
 8010f3c:	af02      	add	r7, sp, #8
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8010f42:	2301      	movs	r3, #1
 8010f44:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8010f46:	2300      	movs	r3, #0
 8010f48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f7ff ff56 	bl	8010dfc <LL_USART_IsEnabled>
 8010f50:	4603      	mov	r3, r0
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	f040 8092 	bne.w	801107c <LL_USART_Init+0x144>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681a      	ldr	r2, [r3, #0]
 8010f5c:	4b4a      	ldr	r3, [pc, #296]	@ (8011088 <LL_USART_Init+0x150>)
 8010f5e:	4013      	ands	r3, r2
 8010f60:	683a      	ldr	r2, [r7, #0]
 8010f62:	6891      	ldr	r1, [r2, #8]
 8010f64:	683a      	ldr	r2, [r7, #0]
 8010f66:	6912      	ldr	r2, [r2, #16]
 8010f68:	4311      	orrs	r1, r2
 8010f6a:	683a      	ldr	r2, [r7, #0]
 8010f6c:	6952      	ldr	r2, [r2, #20]
 8010f6e:	4311      	orrs	r1, r2
 8010f70:	683a      	ldr	r2, [r7, #0]
 8010f72:	69d2      	ldr	r2, [r2, #28]
 8010f74:	430a      	orrs	r2, r1
 8010f76:	431a      	orrs	r2, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	68db      	ldr	r3, [r3, #12]
 8010f80:	4619      	mov	r1, r3
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f7ff ff61 	bl	8010e4a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	699b      	ldr	r3, [r3, #24]
 8010f8c:	4619      	mov	r1, r3
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f7ff ff6e 	bl	8010e70 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	4a3d      	ldr	r2, [pc, #244]	@ (801108c <LL_USART_Init+0x154>)
 8010f98:	4293      	cmp	r3, r2
 8010f9a:	d104      	bne.n	8010fa6 <LL_USART_Init+0x6e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010f9c:	483c      	ldr	r0, [pc, #240]	@ (8011090 <LL_USART_Init+0x158>)
 8010f9e:	f7ff f88b 	bl	80100b8 <LL_RCC_GetUSARTClockFreq>
 8010fa2:	60b8      	str	r0, [r7, #8]
 8010fa4:	e04f      	b.n	8011046 <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART2)
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	4a3a      	ldr	r2, [pc, #232]	@ (8011094 <LL_USART_Init+0x15c>)
 8010faa:	4293      	cmp	r3, r2
 8010fac:	d104      	bne.n	8010fb8 <LL_USART_Init+0x80>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010fae:	483a      	ldr	r0, [pc, #232]	@ (8011098 <LL_USART_Init+0x160>)
 8010fb0:	f7ff f882 	bl	80100b8 <LL_RCC_GetUSARTClockFreq>
 8010fb4:	60b8      	str	r0, [r7, #8]
 8010fb6:	e046      	b.n	8011046 <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART3)
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	4a38      	ldr	r2, [pc, #224]	@ (801109c <LL_USART_Init+0x164>)
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d104      	bne.n	8010fca <LL_USART_Init+0x92>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010fc0:	4835      	ldr	r0, [pc, #212]	@ (8011098 <LL_USART_Init+0x160>)
 8010fc2:	f7ff f879 	bl	80100b8 <LL_RCC_GetUSARTClockFreq>
 8010fc6:	60b8      	str	r0, [r7, #8]
 8010fc8:	e03d      	b.n	8011046 <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART4)
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	4a34      	ldr	r2, [pc, #208]	@ (80110a0 <LL_USART_Init+0x168>)
 8010fce:	4293      	cmp	r3, r2
 8010fd0:	d104      	bne.n	8010fdc <LL_USART_Init+0xa4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010fd2:	4831      	ldr	r0, [pc, #196]	@ (8011098 <LL_USART_Init+0x160>)
 8010fd4:	f7ff f870 	bl	80100b8 <LL_RCC_GetUSARTClockFreq>
 8010fd8:	60b8      	str	r0, [r7, #8]
 8010fda:	e034      	b.n	8011046 <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART5)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	4a31      	ldr	r2, [pc, #196]	@ (80110a4 <LL_USART_Init+0x16c>)
 8010fe0:	4293      	cmp	r3, r2
 8010fe2:	d104      	bne.n	8010fee <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010fe4:	482c      	ldr	r0, [pc, #176]	@ (8011098 <LL_USART_Init+0x160>)
 8010fe6:	f7ff f867 	bl	80100b8 <LL_RCC_GetUSARTClockFreq>
 8010fea:	60b8      	str	r0, [r7, #8]
 8010fec:	e02b      	b.n	8011046 <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART6)
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80110a8 <LL_USART_Init+0x170>)
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	d104      	bne.n	8011000 <LL_USART_Init+0xc8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010ff6:	4826      	ldr	r0, [pc, #152]	@ (8011090 <LL_USART_Init+0x158>)
 8010ff8:	f7ff f85e 	bl	80100b8 <LL_RCC_GetUSARTClockFreq>
 8010ffc:	60b8      	str	r0, [r7, #8]
 8010ffe:	e022      	b.n	8011046 <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART7)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	4a2a      	ldr	r2, [pc, #168]	@ (80110ac <LL_USART_Init+0x174>)
 8011004:	4293      	cmp	r3, r2
 8011006:	d104      	bne.n	8011012 <LL_USART_Init+0xda>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8011008:	4823      	ldr	r0, [pc, #140]	@ (8011098 <LL_USART_Init+0x160>)
 801100a:	f7ff f855 	bl	80100b8 <LL_RCC_GetUSARTClockFreq>
 801100e:	60b8      	str	r0, [r7, #8]
 8011010:	e019      	b.n	8011046 <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART8)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4a26      	ldr	r2, [pc, #152]	@ (80110b0 <LL_USART_Init+0x178>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d104      	bne.n	8011024 <LL_USART_Init+0xec>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 801101a:	481f      	ldr	r0, [pc, #124]	@ (8011098 <LL_USART_Init+0x160>)
 801101c:	f7ff f84c 	bl	80100b8 <LL_RCC_GetUSARTClockFreq>
 8011020:	60b8      	str	r0, [r7, #8]
 8011022:	e010      	b.n	8011046 <LL_USART_Init+0x10e>
    }
#if defined(UART9)
    else if (USARTx == UART9)
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	4a23      	ldr	r2, [pc, #140]	@ (80110b4 <LL_USART_Init+0x17c>)
 8011028:	4293      	cmp	r3, r2
 801102a:	d104      	bne.n	8011036 <LL_USART_Init+0xfe>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 801102c:	4818      	ldr	r0, [pc, #96]	@ (8011090 <LL_USART_Init+0x158>)
 801102e:	f7ff f843 	bl	80100b8 <LL_RCC_GetUSARTClockFreq>
 8011032:	60b8      	str	r0, [r7, #8]
 8011034:	e007      	b.n	8011046 <LL_USART_Init+0x10e>
    }
#endif /* UART9 */
#if defined(USART10)
    else if (USARTx == USART10)
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	4a1f      	ldr	r2, [pc, #124]	@ (80110b8 <LL_USART_Init+0x180>)
 801103a:	4293      	cmp	r3, r2
 801103c:	d103      	bne.n	8011046 <LL_USART_Init+0x10e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 801103e:	4814      	ldr	r0, [pc, #80]	@ (8011090 <LL_USART_Init+0x158>)
 8011040:	f7ff f83a 	bl	80100b8 <LL_RCC_GetUSARTClockFreq>
 8011044:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d011      	beq.n	8011070 <LL_USART_Init+0x138>
        && (USART_InitStruct->BaudRate != 0U))
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d00d      	beq.n	8011070 <LL_USART_Init+0x138>
    {
      status = SUCCESS;
 8011054:	2300      	movs	r3, #0
 8011056:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8011064:	9300      	str	r3, [sp, #0]
 8011066:	460b      	mov	r3, r1
 8011068:	68b9      	ldr	r1, [r7, #8]
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f7ff ff14 	bl	8010e98 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	4619      	mov	r1, r3
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f7ff fed3 	bl	8010e22 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 801107c:	7bfb      	ldrb	r3, [r7, #15]
}
 801107e:	4618      	mov	r0, r3
 8011080:	3710      	adds	r7, #16
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
 8011086:	bf00      	nop
 8011088:	efff69f3 	.word	0xefff69f3
 801108c:	40011000 	.word	0x40011000
 8011090:	07000308 	.word	0x07000308
 8011094:	40004400 	.word	0x40004400
 8011098:	07000008 	.word	0x07000008
 801109c:	40004800 	.word	0x40004800
 80110a0:	40004c00 	.word	0x40004c00
 80110a4:	40005000 	.word	0x40005000
 80110a8:	40011400 	.word	0x40011400
 80110ac:	40007800 	.word	0x40007800
 80110b0:	40007c00 	.word	0x40007c00
 80110b4:	40011800 	.word	0x40011800
 80110b8:	40011c00 	.word	0x40011c00

080110bc <__cvt>:
 80110bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110be:	ed2d 8b02 	vpush	{d8}
 80110c2:	eeb0 8b40 	vmov.f64	d8, d0
 80110c6:	b085      	sub	sp, #20
 80110c8:	4617      	mov	r7, r2
 80110ca:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80110cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80110ce:	ee18 2a90 	vmov	r2, s17
 80110d2:	f025 0520 	bic.w	r5, r5, #32
 80110d6:	2a00      	cmp	r2, #0
 80110d8:	bfb6      	itet	lt
 80110da:	222d      	movlt	r2, #45	@ 0x2d
 80110dc:	2200      	movge	r2, #0
 80110de:	eeb1 8b40 	vneglt.f64	d8, d0
 80110e2:	2d46      	cmp	r5, #70	@ 0x46
 80110e4:	460c      	mov	r4, r1
 80110e6:	701a      	strb	r2, [r3, #0]
 80110e8:	d004      	beq.n	80110f4 <__cvt+0x38>
 80110ea:	2d45      	cmp	r5, #69	@ 0x45
 80110ec:	d100      	bne.n	80110f0 <__cvt+0x34>
 80110ee:	3401      	adds	r4, #1
 80110f0:	2102      	movs	r1, #2
 80110f2:	e000      	b.n	80110f6 <__cvt+0x3a>
 80110f4:	2103      	movs	r1, #3
 80110f6:	ab03      	add	r3, sp, #12
 80110f8:	9301      	str	r3, [sp, #4]
 80110fa:	ab02      	add	r3, sp, #8
 80110fc:	9300      	str	r3, [sp, #0]
 80110fe:	4622      	mov	r2, r4
 8011100:	4633      	mov	r3, r6
 8011102:	eeb0 0b48 	vmov.f64	d0, d8
 8011106:	f001 f9cb 	bl	80124a0 <_dtoa_r>
 801110a:	2d47      	cmp	r5, #71	@ 0x47
 801110c:	d114      	bne.n	8011138 <__cvt+0x7c>
 801110e:	07fb      	lsls	r3, r7, #31
 8011110:	d50a      	bpl.n	8011128 <__cvt+0x6c>
 8011112:	1902      	adds	r2, r0, r4
 8011114:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801111c:	bf08      	it	eq
 801111e:	9203      	streq	r2, [sp, #12]
 8011120:	2130      	movs	r1, #48	@ 0x30
 8011122:	9b03      	ldr	r3, [sp, #12]
 8011124:	4293      	cmp	r3, r2
 8011126:	d319      	bcc.n	801115c <__cvt+0xa0>
 8011128:	9b03      	ldr	r3, [sp, #12]
 801112a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801112c:	1a1b      	subs	r3, r3, r0
 801112e:	6013      	str	r3, [r2, #0]
 8011130:	b005      	add	sp, #20
 8011132:	ecbd 8b02 	vpop	{d8}
 8011136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011138:	2d46      	cmp	r5, #70	@ 0x46
 801113a:	eb00 0204 	add.w	r2, r0, r4
 801113e:	d1e9      	bne.n	8011114 <__cvt+0x58>
 8011140:	7803      	ldrb	r3, [r0, #0]
 8011142:	2b30      	cmp	r3, #48	@ 0x30
 8011144:	d107      	bne.n	8011156 <__cvt+0x9a>
 8011146:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801114e:	bf1c      	itt	ne
 8011150:	f1c4 0401 	rsbne	r4, r4, #1
 8011154:	6034      	strne	r4, [r6, #0]
 8011156:	6833      	ldr	r3, [r6, #0]
 8011158:	441a      	add	r2, r3
 801115a:	e7db      	b.n	8011114 <__cvt+0x58>
 801115c:	1c5c      	adds	r4, r3, #1
 801115e:	9403      	str	r4, [sp, #12]
 8011160:	7019      	strb	r1, [r3, #0]
 8011162:	e7de      	b.n	8011122 <__cvt+0x66>

08011164 <__exponent>:
 8011164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011166:	2900      	cmp	r1, #0
 8011168:	bfba      	itte	lt
 801116a:	4249      	neglt	r1, r1
 801116c:	232d      	movlt	r3, #45	@ 0x2d
 801116e:	232b      	movge	r3, #43	@ 0x2b
 8011170:	2909      	cmp	r1, #9
 8011172:	7002      	strb	r2, [r0, #0]
 8011174:	7043      	strb	r3, [r0, #1]
 8011176:	dd29      	ble.n	80111cc <__exponent+0x68>
 8011178:	f10d 0307 	add.w	r3, sp, #7
 801117c:	461d      	mov	r5, r3
 801117e:	270a      	movs	r7, #10
 8011180:	461a      	mov	r2, r3
 8011182:	fbb1 f6f7 	udiv	r6, r1, r7
 8011186:	fb07 1416 	mls	r4, r7, r6, r1
 801118a:	3430      	adds	r4, #48	@ 0x30
 801118c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011190:	460c      	mov	r4, r1
 8011192:	2c63      	cmp	r4, #99	@ 0x63
 8011194:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8011198:	4631      	mov	r1, r6
 801119a:	dcf1      	bgt.n	8011180 <__exponent+0x1c>
 801119c:	3130      	adds	r1, #48	@ 0x30
 801119e:	1e94      	subs	r4, r2, #2
 80111a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80111a4:	1c41      	adds	r1, r0, #1
 80111a6:	4623      	mov	r3, r4
 80111a8:	42ab      	cmp	r3, r5
 80111aa:	d30a      	bcc.n	80111c2 <__exponent+0x5e>
 80111ac:	f10d 0309 	add.w	r3, sp, #9
 80111b0:	1a9b      	subs	r3, r3, r2
 80111b2:	42ac      	cmp	r4, r5
 80111b4:	bf88      	it	hi
 80111b6:	2300      	movhi	r3, #0
 80111b8:	3302      	adds	r3, #2
 80111ba:	4403      	add	r3, r0
 80111bc:	1a18      	subs	r0, r3, r0
 80111be:	b003      	add	sp, #12
 80111c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80111c6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80111ca:	e7ed      	b.n	80111a8 <__exponent+0x44>
 80111cc:	2330      	movs	r3, #48	@ 0x30
 80111ce:	3130      	adds	r1, #48	@ 0x30
 80111d0:	7083      	strb	r3, [r0, #2]
 80111d2:	70c1      	strb	r1, [r0, #3]
 80111d4:	1d03      	adds	r3, r0, #4
 80111d6:	e7f1      	b.n	80111bc <__exponent+0x58>

080111d8 <_printf_float>:
 80111d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111dc:	b08d      	sub	sp, #52	@ 0x34
 80111de:	460c      	mov	r4, r1
 80111e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80111e4:	4616      	mov	r6, r2
 80111e6:	461f      	mov	r7, r3
 80111e8:	4605      	mov	r5, r0
 80111ea:	f001 f845 	bl	8012278 <_localeconv_r>
 80111ee:	f8d0 b000 	ldr.w	fp, [r0]
 80111f2:	4658      	mov	r0, fp
 80111f4:	f7ef f8ec 	bl	80003d0 <strlen>
 80111f8:	2300      	movs	r3, #0
 80111fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80111fc:	f8d8 3000 	ldr.w	r3, [r8]
 8011200:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011204:	6822      	ldr	r2, [r4, #0]
 8011206:	9005      	str	r0, [sp, #20]
 8011208:	3307      	adds	r3, #7
 801120a:	f023 0307 	bic.w	r3, r3, #7
 801120e:	f103 0108 	add.w	r1, r3, #8
 8011212:	f8c8 1000 	str.w	r1, [r8]
 8011216:	ed93 0b00 	vldr	d0, [r3]
 801121a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8011478 <_printf_float+0x2a0>
 801121e:	eeb0 7bc0 	vabs.f64	d7, d0
 8011222:	eeb4 7b46 	vcmp.f64	d7, d6
 8011226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801122a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801122e:	dd24      	ble.n	801127a <_printf_float+0xa2>
 8011230:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011238:	d502      	bpl.n	8011240 <_printf_float+0x68>
 801123a:	232d      	movs	r3, #45	@ 0x2d
 801123c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011240:	498f      	ldr	r1, [pc, #572]	@ (8011480 <_printf_float+0x2a8>)
 8011242:	4b90      	ldr	r3, [pc, #576]	@ (8011484 <_printf_float+0x2ac>)
 8011244:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011248:	bf8c      	ite	hi
 801124a:	4688      	movhi	r8, r1
 801124c:	4698      	movls	r8, r3
 801124e:	f022 0204 	bic.w	r2, r2, #4
 8011252:	2303      	movs	r3, #3
 8011254:	6123      	str	r3, [r4, #16]
 8011256:	6022      	str	r2, [r4, #0]
 8011258:	f04f 0a00 	mov.w	sl, #0
 801125c:	9700      	str	r7, [sp, #0]
 801125e:	4633      	mov	r3, r6
 8011260:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011262:	4621      	mov	r1, r4
 8011264:	4628      	mov	r0, r5
 8011266:	f000 f9d1 	bl	801160c <_printf_common>
 801126a:	3001      	adds	r0, #1
 801126c:	f040 8089 	bne.w	8011382 <_printf_float+0x1aa>
 8011270:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011274:	b00d      	add	sp, #52	@ 0x34
 8011276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801127a:	eeb4 0b40 	vcmp.f64	d0, d0
 801127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011282:	d709      	bvc.n	8011298 <_printf_float+0xc0>
 8011284:	ee10 3a90 	vmov	r3, s1
 8011288:	2b00      	cmp	r3, #0
 801128a:	bfbc      	itt	lt
 801128c:	232d      	movlt	r3, #45	@ 0x2d
 801128e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011292:	497d      	ldr	r1, [pc, #500]	@ (8011488 <_printf_float+0x2b0>)
 8011294:	4b7d      	ldr	r3, [pc, #500]	@ (801148c <_printf_float+0x2b4>)
 8011296:	e7d5      	b.n	8011244 <_printf_float+0x6c>
 8011298:	6863      	ldr	r3, [r4, #4]
 801129a:	1c59      	adds	r1, r3, #1
 801129c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80112a0:	d139      	bne.n	8011316 <_printf_float+0x13e>
 80112a2:	2306      	movs	r3, #6
 80112a4:	6063      	str	r3, [r4, #4]
 80112a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80112aa:	2300      	movs	r3, #0
 80112ac:	6022      	str	r2, [r4, #0]
 80112ae:	9303      	str	r3, [sp, #12]
 80112b0:	ab0a      	add	r3, sp, #40	@ 0x28
 80112b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80112b6:	ab09      	add	r3, sp, #36	@ 0x24
 80112b8:	9300      	str	r3, [sp, #0]
 80112ba:	6861      	ldr	r1, [r4, #4]
 80112bc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80112c0:	4628      	mov	r0, r5
 80112c2:	f7ff fefb 	bl	80110bc <__cvt>
 80112c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80112ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80112cc:	4680      	mov	r8, r0
 80112ce:	d129      	bne.n	8011324 <_printf_float+0x14c>
 80112d0:	1cc8      	adds	r0, r1, #3
 80112d2:	db02      	blt.n	80112da <_printf_float+0x102>
 80112d4:	6863      	ldr	r3, [r4, #4]
 80112d6:	4299      	cmp	r1, r3
 80112d8:	dd41      	ble.n	801135e <_printf_float+0x186>
 80112da:	f1a9 0902 	sub.w	r9, r9, #2
 80112de:	fa5f f989 	uxtb.w	r9, r9
 80112e2:	3901      	subs	r1, #1
 80112e4:	464a      	mov	r2, r9
 80112e6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80112ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80112ec:	f7ff ff3a 	bl	8011164 <__exponent>
 80112f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80112f2:	1813      	adds	r3, r2, r0
 80112f4:	2a01      	cmp	r2, #1
 80112f6:	4682      	mov	sl, r0
 80112f8:	6123      	str	r3, [r4, #16]
 80112fa:	dc02      	bgt.n	8011302 <_printf_float+0x12a>
 80112fc:	6822      	ldr	r2, [r4, #0]
 80112fe:	07d2      	lsls	r2, r2, #31
 8011300:	d501      	bpl.n	8011306 <_printf_float+0x12e>
 8011302:	3301      	adds	r3, #1
 8011304:	6123      	str	r3, [r4, #16]
 8011306:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801130a:	2b00      	cmp	r3, #0
 801130c:	d0a6      	beq.n	801125c <_printf_float+0x84>
 801130e:	232d      	movs	r3, #45	@ 0x2d
 8011310:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011314:	e7a2      	b.n	801125c <_printf_float+0x84>
 8011316:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801131a:	d1c4      	bne.n	80112a6 <_printf_float+0xce>
 801131c:	2b00      	cmp	r3, #0
 801131e:	d1c2      	bne.n	80112a6 <_printf_float+0xce>
 8011320:	2301      	movs	r3, #1
 8011322:	e7bf      	b.n	80112a4 <_printf_float+0xcc>
 8011324:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011328:	d9db      	bls.n	80112e2 <_printf_float+0x10a>
 801132a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801132e:	d118      	bne.n	8011362 <_printf_float+0x18a>
 8011330:	2900      	cmp	r1, #0
 8011332:	6863      	ldr	r3, [r4, #4]
 8011334:	dd0b      	ble.n	801134e <_printf_float+0x176>
 8011336:	6121      	str	r1, [r4, #16]
 8011338:	b913      	cbnz	r3, 8011340 <_printf_float+0x168>
 801133a:	6822      	ldr	r2, [r4, #0]
 801133c:	07d0      	lsls	r0, r2, #31
 801133e:	d502      	bpl.n	8011346 <_printf_float+0x16e>
 8011340:	3301      	adds	r3, #1
 8011342:	440b      	add	r3, r1
 8011344:	6123      	str	r3, [r4, #16]
 8011346:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011348:	f04f 0a00 	mov.w	sl, #0
 801134c:	e7db      	b.n	8011306 <_printf_float+0x12e>
 801134e:	b913      	cbnz	r3, 8011356 <_printf_float+0x17e>
 8011350:	6822      	ldr	r2, [r4, #0]
 8011352:	07d2      	lsls	r2, r2, #31
 8011354:	d501      	bpl.n	801135a <_printf_float+0x182>
 8011356:	3302      	adds	r3, #2
 8011358:	e7f4      	b.n	8011344 <_printf_float+0x16c>
 801135a:	2301      	movs	r3, #1
 801135c:	e7f2      	b.n	8011344 <_printf_float+0x16c>
 801135e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8011362:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011364:	4299      	cmp	r1, r3
 8011366:	db05      	blt.n	8011374 <_printf_float+0x19c>
 8011368:	6823      	ldr	r3, [r4, #0]
 801136a:	6121      	str	r1, [r4, #16]
 801136c:	07d8      	lsls	r0, r3, #31
 801136e:	d5ea      	bpl.n	8011346 <_printf_float+0x16e>
 8011370:	1c4b      	adds	r3, r1, #1
 8011372:	e7e7      	b.n	8011344 <_printf_float+0x16c>
 8011374:	2900      	cmp	r1, #0
 8011376:	bfd4      	ite	le
 8011378:	f1c1 0202 	rsble	r2, r1, #2
 801137c:	2201      	movgt	r2, #1
 801137e:	4413      	add	r3, r2
 8011380:	e7e0      	b.n	8011344 <_printf_float+0x16c>
 8011382:	6823      	ldr	r3, [r4, #0]
 8011384:	055a      	lsls	r2, r3, #21
 8011386:	d407      	bmi.n	8011398 <_printf_float+0x1c0>
 8011388:	6923      	ldr	r3, [r4, #16]
 801138a:	4642      	mov	r2, r8
 801138c:	4631      	mov	r1, r6
 801138e:	4628      	mov	r0, r5
 8011390:	47b8      	blx	r7
 8011392:	3001      	adds	r0, #1
 8011394:	d12a      	bne.n	80113ec <_printf_float+0x214>
 8011396:	e76b      	b.n	8011270 <_printf_float+0x98>
 8011398:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801139c:	f240 80e0 	bls.w	8011560 <_printf_float+0x388>
 80113a0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80113a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80113a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ac:	d133      	bne.n	8011416 <_printf_float+0x23e>
 80113ae:	4a38      	ldr	r2, [pc, #224]	@ (8011490 <_printf_float+0x2b8>)
 80113b0:	2301      	movs	r3, #1
 80113b2:	4631      	mov	r1, r6
 80113b4:	4628      	mov	r0, r5
 80113b6:	47b8      	blx	r7
 80113b8:	3001      	adds	r0, #1
 80113ba:	f43f af59 	beq.w	8011270 <_printf_float+0x98>
 80113be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80113c2:	4543      	cmp	r3, r8
 80113c4:	db02      	blt.n	80113cc <_printf_float+0x1f4>
 80113c6:	6823      	ldr	r3, [r4, #0]
 80113c8:	07d8      	lsls	r0, r3, #31
 80113ca:	d50f      	bpl.n	80113ec <_printf_float+0x214>
 80113cc:	9b05      	ldr	r3, [sp, #20]
 80113ce:	465a      	mov	r2, fp
 80113d0:	4631      	mov	r1, r6
 80113d2:	4628      	mov	r0, r5
 80113d4:	47b8      	blx	r7
 80113d6:	3001      	adds	r0, #1
 80113d8:	f43f af4a 	beq.w	8011270 <_printf_float+0x98>
 80113dc:	f04f 0900 	mov.w	r9, #0
 80113e0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80113e4:	f104 0a1a 	add.w	sl, r4, #26
 80113e8:	45c8      	cmp	r8, r9
 80113ea:	dc09      	bgt.n	8011400 <_printf_float+0x228>
 80113ec:	6823      	ldr	r3, [r4, #0]
 80113ee:	079b      	lsls	r3, r3, #30
 80113f0:	f100 8107 	bmi.w	8011602 <_printf_float+0x42a>
 80113f4:	68e0      	ldr	r0, [r4, #12]
 80113f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80113f8:	4298      	cmp	r0, r3
 80113fa:	bfb8      	it	lt
 80113fc:	4618      	movlt	r0, r3
 80113fe:	e739      	b.n	8011274 <_printf_float+0x9c>
 8011400:	2301      	movs	r3, #1
 8011402:	4652      	mov	r2, sl
 8011404:	4631      	mov	r1, r6
 8011406:	4628      	mov	r0, r5
 8011408:	47b8      	blx	r7
 801140a:	3001      	adds	r0, #1
 801140c:	f43f af30 	beq.w	8011270 <_printf_float+0x98>
 8011410:	f109 0901 	add.w	r9, r9, #1
 8011414:	e7e8      	b.n	80113e8 <_printf_float+0x210>
 8011416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011418:	2b00      	cmp	r3, #0
 801141a:	dc3b      	bgt.n	8011494 <_printf_float+0x2bc>
 801141c:	4a1c      	ldr	r2, [pc, #112]	@ (8011490 <_printf_float+0x2b8>)
 801141e:	2301      	movs	r3, #1
 8011420:	4631      	mov	r1, r6
 8011422:	4628      	mov	r0, r5
 8011424:	47b8      	blx	r7
 8011426:	3001      	adds	r0, #1
 8011428:	f43f af22 	beq.w	8011270 <_printf_float+0x98>
 801142c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011430:	ea59 0303 	orrs.w	r3, r9, r3
 8011434:	d102      	bne.n	801143c <_printf_float+0x264>
 8011436:	6823      	ldr	r3, [r4, #0]
 8011438:	07d9      	lsls	r1, r3, #31
 801143a:	d5d7      	bpl.n	80113ec <_printf_float+0x214>
 801143c:	9b05      	ldr	r3, [sp, #20]
 801143e:	465a      	mov	r2, fp
 8011440:	4631      	mov	r1, r6
 8011442:	4628      	mov	r0, r5
 8011444:	47b8      	blx	r7
 8011446:	3001      	adds	r0, #1
 8011448:	f43f af12 	beq.w	8011270 <_printf_float+0x98>
 801144c:	f04f 0a00 	mov.w	sl, #0
 8011450:	f104 0b1a 	add.w	fp, r4, #26
 8011454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011456:	425b      	negs	r3, r3
 8011458:	4553      	cmp	r3, sl
 801145a:	dc01      	bgt.n	8011460 <_printf_float+0x288>
 801145c:	464b      	mov	r3, r9
 801145e:	e794      	b.n	801138a <_printf_float+0x1b2>
 8011460:	2301      	movs	r3, #1
 8011462:	465a      	mov	r2, fp
 8011464:	4631      	mov	r1, r6
 8011466:	4628      	mov	r0, r5
 8011468:	47b8      	blx	r7
 801146a:	3001      	adds	r0, #1
 801146c:	f43f af00 	beq.w	8011270 <_printf_float+0x98>
 8011470:	f10a 0a01 	add.w	sl, sl, #1
 8011474:	e7ee      	b.n	8011454 <_printf_float+0x27c>
 8011476:	bf00      	nop
 8011478:	ffffffff 	.word	0xffffffff
 801147c:	7fefffff 	.word	0x7fefffff
 8011480:	080172d4 	.word	0x080172d4
 8011484:	080172d0 	.word	0x080172d0
 8011488:	080172dc 	.word	0x080172dc
 801148c:	080172d8 	.word	0x080172d8
 8011490:	08017416 	.word	0x08017416
 8011494:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011496:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801149a:	4553      	cmp	r3, sl
 801149c:	bfa8      	it	ge
 801149e:	4653      	movge	r3, sl
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	4699      	mov	r9, r3
 80114a4:	dc37      	bgt.n	8011516 <_printf_float+0x33e>
 80114a6:	2300      	movs	r3, #0
 80114a8:	9307      	str	r3, [sp, #28]
 80114aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80114ae:	f104 021a 	add.w	r2, r4, #26
 80114b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80114b4:	9907      	ldr	r1, [sp, #28]
 80114b6:	9306      	str	r3, [sp, #24]
 80114b8:	eba3 0309 	sub.w	r3, r3, r9
 80114bc:	428b      	cmp	r3, r1
 80114be:	dc31      	bgt.n	8011524 <_printf_float+0x34c>
 80114c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114c2:	459a      	cmp	sl, r3
 80114c4:	dc3b      	bgt.n	801153e <_printf_float+0x366>
 80114c6:	6823      	ldr	r3, [r4, #0]
 80114c8:	07da      	lsls	r2, r3, #31
 80114ca:	d438      	bmi.n	801153e <_printf_float+0x366>
 80114cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114ce:	ebaa 0903 	sub.w	r9, sl, r3
 80114d2:	9b06      	ldr	r3, [sp, #24]
 80114d4:	ebaa 0303 	sub.w	r3, sl, r3
 80114d8:	4599      	cmp	r9, r3
 80114da:	bfa8      	it	ge
 80114dc:	4699      	movge	r9, r3
 80114de:	f1b9 0f00 	cmp.w	r9, #0
 80114e2:	dc34      	bgt.n	801154e <_printf_float+0x376>
 80114e4:	f04f 0800 	mov.w	r8, #0
 80114e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80114ec:	f104 0b1a 	add.w	fp, r4, #26
 80114f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114f2:	ebaa 0303 	sub.w	r3, sl, r3
 80114f6:	eba3 0309 	sub.w	r3, r3, r9
 80114fa:	4543      	cmp	r3, r8
 80114fc:	f77f af76 	ble.w	80113ec <_printf_float+0x214>
 8011500:	2301      	movs	r3, #1
 8011502:	465a      	mov	r2, fp
 8011504:	4631      	mov	r1, r6
 8011506:	4628      	mov	r0, r5
 8011508:	47b8      	blx	r7
 801150a:	3001      	adds	r0, #1
 801150c:	f43f aeb0 	beq.w	8011270 <_printf_float+0x98>
 8011510:	f108 0801 	add.w	r8, r8, #1
 8011514:	e7ec      	b.n	80114f0 <_printf_float+0x318>
 8011516:	4642      	mov	r2, r8
 8011518:	4631      	mov	r1, r6
 801151a:	4628      	mov	r0, r5
 801151c:	47b8      	blx	r7
 801151e:	3001      	adds	r0, #1
 8011520:	d1c1      	bne.n	80114a6 <_printf_float+0x2ce>
 8011522:	e6a5      	b.n	8011270 <_printf_float+0x98>
 8011524:	2301      	movs	r3, #1
 8011526:	4631      	mov	r1, r6
 8011528:	4628      	mov	r0, r5
 801152a:	9206      	str	r2, [sp, #24]
 801152c:	47b8      	blx	r7
 801152e:	3001      	adds	r0, #1
 8011530:	f43f ae9e 	beq.w	8011270 <_printf_float+0x98>
 8011534:	9b07      	ldr	r3, [sp, #28]
 8011536:	9a06      	ldr	r2, [sp, #24]
 8011538:	3301      	adds	r3, #1
 801153a:	9307      	str	r3, [sp, #28]
 801153c:	e7b9      	b.n	80114b2 <_printf_float+0x2da>
 801153e:	9b05      	ldr	r3, [sp, #20]
 8011540:	465a      	mov	r2, fp
 8011542:	4631      	mov	r1, r6
 8011544:	4628      	mov	r0, r5
 8011546:	47b8      	blx	r7
 8011548:	3001      	adds	r0, #1
 801154a:	d1bf      	bne.n	80114cc <_printf_float+0x2f4>
 801154c:	e690      	b.n	8011270 <_printf_float+0x98>
 801154e:	9a06      	ldr	r2, [sp, #24]
 8011550:	464b      	mov	r3, r9
 8011552:	4442      	add	r2, r8
 8011554:	4631      	mov	r1, r6
 8011556:	4628      	mov	r0, r5
 8011558:	47b8      	blx	r7
 801155a:	3001      	adds	r0, #1
 801155c:	d1c2      	bne.n	80114e4 <_printf_float+0x30c>
 801155e:	e687      	b.n	8011270 <_printf_float+0x98>
 8011560:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8011564:	f1b9 0f01 	cmp.w	r9, #1
 8011568:	dc01      	bgt.n	801156e <_printf_float+0x396>
 801156a:	07db      	lsls	r3, r3, #31
 801156c:	d536      	bpl.n	80115dc <_printf_float+0x404>
 801156e:	2301      	movs	r3, #1
 8011570:	4642      	mov	r2, r8
 8011572:	4631      	mov	r1, r6
 8011574:	4628      	mov	r0, r5
 8011576:	47b8      	blx	r7
 8011578:	3001      	adds	r0, #1
 801157a:	f43f ae79 	beq.w	8011270 <_printf_float+0x98>
 801157e:	9b05      	ldr	r3, [sp, #20]
 8011580:	465a      	mov	r2, fp
 8011582:	4631      	mov	r1, r6
 8011584:	4628      	mov	r0, r5
 8011586:	47b8      	blx	r7
 8011588:	3001      	adds	r0, #1
 801158a:	f43f ae71 	beq.w	8011270 <_printf_float+0x98>
 801158e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011592:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801159a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 801159e:	d018      	beq.n	80115d2 <_printf_float+0x3fa>
 80115a0:	464b      	mov	r3, r9
 80115a2:	f108 0201 	add.w	r2, r8, #1
 80115a6:	4631      	mov	r1, r6
 80115a8:	4628      	mov	r0, r5
 80115aa:	47b8      	blx	r7
 80115ac:	3001      	adds	r0, #1
 80115ae:	d10c      	bne.n	80115ca <_printf_float+0x3f2>
 80115b0:	e65e      	b.n	8011270 <_printf_float+0x98>
 80115b2:	2301      	movs	r3, #1
 80115b4:	465a      	mov	r2, fp
 80115b6:	4631      	mov	r1, r6
 80115b8:	4628      	mov	r0, r5
 80115ba:	47b8      	blx	r7
 80115bc:	3001      	adds	r0, #1
 80115be:	f43f ae57 	beq.w	8011270 <_printf_float+0x98>
 80115c2:	f108 0801 	add.w	r8, r8, #1
 80115c6:	45c8      	cmp	r8, r9
 80115c8:	dbf3      	blt.n	80115b2 <_printf_float+0x3da>
 80115ca:	4653      	mov	r3, sl
 80115cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80115d0:	e6dc      	b.n	801138c <_printf_float+0x1b4>
 80115d2:	f04f 0800 	mov.w	r8, #0
 80115d6:	f104 0b1a 	add.w	fp, r4, #26
 80115da:	e7f4      	b.n	80115c6 <_printf_float+0x3ee>
 80115dc:	2301      	movs	r3, #1
 80115de:	4642      	mov	r2, r8
 80115e0:	e7e1      	b.n	80115a6 <_printf_float+0x3ce>
 80115e2:	2301      	movs	r3, #1
 80115e4:	464a      	mov	r2, r9
 80115e6:	4631      	mov	r1, r6
 80115e8:	4628      	mov	r0, r5
 80115ea:	47b8      	blx	r7
 80115ec:	3001      	adds	r0, #1
 80115ee:	f43f ae3f 	beq.w	8011270 <_printf_float+0x98>
 80115f2:	f108 0801 	add.w	r8, r8, #1
 80115f6:	68e3      	ldr	r3, [r4, #12]
 80115f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80115fa:	1a5b      	subs	r3, r3, r1
 80115fc:	4543      	cmp	r3, r8
 80115fe:	dcf0      	bgt.n	80115e2 <_printf_float+0x40a>
 8011600:	e6f8      	b.n	80113f4 <_printf_float+0x21c>
 8011602:	f04f 0800 	mov.w	r8, #0
 8011606:	f104 0919 	add.w	r9, r4, #25
 801160a:	e7f4      	b.n	80115f6 <_printf_float+0x41e>

0801160c <_printf_common>:
 801160c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011610:	4616      	mov	r6, r2
 8011612:	4698      	mov	r8, r3
 8011614:	688a      	ldr	r2, [r1, #8]
 8011616:	690b      	ldr	r3, [r1, #16]
 8011618:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801161c:	4293      	cmp	r3, r2
 801161e:	bfb8      	it	lt
 8011620:	4613      	movlt	r3, r2
 8011622:	6033      	str	r3, [r6, #0]
 8011624:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011628:	4607      	mov	r7, r0
 801162a:	460c      	mov	r4, r1
 801162c:	b10a      	cbz	r2, 8011632 <_printf_common+0x26>
 801162e:	3301      	adds	r3, #1
 8011630:	6033      	str	r3, [r6, #0]
 8011632:	6823      	ldr	r3, [r4, #0]
 8011634:	0699      	lsls	r1, r3, #26
 8011636:	bf42      	ittt	mi
 8011638:	6833      	ldrmi	r3, [r6, #0]
 801163a:	3302      	addmi	r3, #2
 801163c:	6033      	strmi	r3, [r6, #0]
 801163e:	6825      	ldr	r5, [r4, #0]
 8011640:	f015 0506 	ands.w	r5, r5, #6
 8011644:	d106      	bne.n	8011654 <_printf_common+0x48>
 8011646:	f104 0a19 	add.w	sl, r4, #25
 801164a:	68e3      	ldr	r3, [r4, #12]
 801164c:	6832      	ldr	r2, [r6, #0]
 801164e:	1a9b      	subs	r3, r3, r2
 8011650:	42ab      	cmp	r3, r5
 8011652:	dc26      	bgt.n	80116a2 <_printf_common+0x96>
 8011654:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011658:	6822      	ldr	r2, [r4, #0]
 801165a:	3b00      	subs	r3, #0
 801165c:	bf18      	it	ne
 801165e:	2301      	movne	r3, #1
 8011660:	0692      	lsls	r2, r2, #26
 8011662:	d42b      	bmi.n	80116bc <_printf_common+0xb0>
 8011664:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011668:	4641      	mov	r1, r8
 801166a:	4638      	mov	r0, r7
 801166c:	47c8      	blx	r9
 801166e:	3001      	adds	r0, #1
 8011670:	d01e      	beq.n	80116b0 <_printf_common+0xa4>
 8011672:	6823      	ldr	r3, [r4, #0]
 8011674:	6922      	ldr	r2, [r4, #16]
 8011676:	f003 0306 	and.w	r3, r3, #6
 801167a:	2b04      	cmp	r3, #4
 801167c:	bf02      	ittt	eq
 801167e:	68e5      	ldreq	r5, [r4, #12]
 8011680:	6833      	ldreq	r3, [r6, #0]
 8011682:	1aed      	subeq	r5, r5, r3
 8011684:	68a3      	ldr	r3, [r4, #8]
 8011686:	bf0c      	ite	eq
 8011688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801168c:	2500      	movne	r5, #0
 801168e:	4293      	cmp	r3, r2
 8011690:	bfc4      	itt	gt
 8011692:	1a9b      	subgt	r3, r3, r2
 8011694:	18ed      	addgt	r5, r5, r3
 8011696:	2600      	movs	r6, #0
 8011698:	341a      	adds	r4, #26
 801169a:	42b5      	cmp	r5, r6
 801169c:	d11a      	bne.n	80116d4 <_printf_common+0xc8>
 801169e:	2000      	movs	r0, #0
 80116a0:	e008      	b.n	80116b4 <_printf_common+0xa8>
 80116a2:	2301      	movs	r3, #1
 80116a4:	4652      	mov	r2, sl
 80116a6:	4641      	mov	r1, r8
 80116a8:	4638      	mov	r0, r7
 80116aa:	47c8      	blx	r9
 80116ac:	3001      	adds	r0, #1
 80116ae:	d103      	bne.n	80116b8 <_printf_common+0xac>
 80116b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80116b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116b8:	3501      	adds	r5, #1
 80116ba:	e7c6      	b.n	801164a <_printf_common+0x3e>
 80116bc:	18e1      	adds	r1, r4, r3
 80116be:	1c5a      	adds	r2, r3, #1
 80116c0:	2030      	movs	r0, #48	@ 0x30
 80116c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80116c6:	4422      	add	r2, r4
 80116c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80116cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80116d0:	3302      	adds	r3, #2
 80116d2:	e7c7      	b.n	8011664 <_printf_common+0x58>
 80116d4:	2301      	movs	r3, #1
 80116d6:	4622      	mov	r2, r4
 80116d8:	4641      	mov	r1, r8
 80116da:	4638      	mov	r0, r7
 80116dc:	47c8      	blx	r9
 80116de:	3001      	adds	r0, #1
 80116e0:	d0e6      	beq.n	80116b0 <_printf_common+0xa4>
 80116e2:	3601      	adds	r6, #1
 80116e4:	e7d9      	b.n	801169a <_printf_common+0x8e>
	...

080116e8 <_printf_i>:
 80116e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80116ec:	7e0f      	ldrb	r7, [r1, #24]
 80116ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80116f0:	2f78      	cmp	r7, #120	@ 0x78
 80116f2:	4691      	mov	r9, r2
 80116f4:	4680      	mov	r8, r0
 80116f6:	460c      	mov	r4, r1
 80116f8:	469a      	mov	sl, r3
 80116fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80116fe:	d807      	bhi.n	8011710 <_printf_i+0x28>
 8011700:	2f62      	cmp	r7, #98	@ 0x62
 8011702:	d80a      	bhi.n	801171a <_printf_i+0x32>
 8011704:	2f00      	cmp	r7, #0
 8011706:	f000 80d1 	beq.w	80118ac <_printf_i+0x1c4>
 801170a:	2f58      	cmp	r7, #88	@ 0x58
 801170c:	f000 80b8 	beq.w	8011880 <_printf_i+0x198>
 8011710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011714:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011718:	e03a      	b.n	8011790 <_printf_i+0xa8>
 801171a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801171e:	2b15      	cmp	r3, #21
 8011720:	d8f6      	bhi.n	8011710 <_printf_i+0x28>
 8011722:	a101      	add	r1, pc, #4	@ (adr r1, 8011728 <_printf_i+0x40>)
 8011724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011728:	08011781 	.word	0x08011781
 801172c:	08011795 	.word	0x08011795
 8011730:	08011711 	.word	0x08011711
 8011734:	08011711 	.word	0x08011711
 8011738:	08011711 	.word	0x08011711
 801173c:	08011711 	.word	0x08011711
 8011740:	08011795 	.word	0x08011795
 8011744:	08011711 	.word	0x08011711
 8011748:	08011711 	.word	0x08011711
 801174c:	08011711 	.word	0x08011711
 8011750:	08011711 	.word	0x08011711
 8011754:	08011893 	.word	0x08011893
 8011758:	080117bf 	.word	0x080117bf
 801175c:	0801184d 	.word	0x0801184d
 8011760:	08011711 	.word	0x08011711
 8011764:	08011711 	.word	0x08011711
 8011768:	080118b5 	.word	0x080118b5
 801176c:	08011711 	.word	0x08011711
 8011770:	080117bf 	.word	0x080117bf
 8011774:	08011711 	.word	0x08011711
 8011778:	08011711 	.word	0x08011711
 801177c:	08011855 	.word	0x08011855
 8011780:	6833      	ldr	r3, [r6, #0]
 8011782:	1d1a      	adds	r2, r3, #4
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	6032      	str	r2, [r6, #0]
 8011788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801178c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011790:	2301      	movs	r3, #1
 8011792:	e09c      	b.n	80118ce <_printf_i+0x1e6>
 8011794:	6833      	ldr	r3, [r6, #0]
 8011796:	6820      	ldr	r0, [r4, #0]
 8011798:	1d19      	adds	r1, r3, #4
 801179a:	6031      	str	r1, [r6, #0]
 801179c:	0606      	lsls	r6, r0, #24
 801179e:	d501      	bpl.n	80117a4 <_printf_i+0xbc>
 80117a0:	681d      	ldr	r5, [r3, #0]
 80117a2:	e003      	b.n	80117ac <_printf_i+0xc4>
 80117a4:	0645      	lsls	r5, r0, #25
 80117a6:	d5fb      	bpl.n	80117a0 <_printf_i+0xb8>
 80117a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80117ac:	2d00      	cmp	r5, #0
 80117ae:	da03      	bge.n	80117b8 <_printf_i+0xd0>
 80117b0:	232d      	movs	r3, #45	@ 0x2d
 80117b2:	426d      	negs	r5, r5
 80117b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80117b8:	4858      	ldr	r0, [pc, #352]	@ (801191c <_printf_i+0x234>)
 80117ba:	230a      	movs	r3, #10
 80117bc:	e011      	b.n	80117e2 <_printf_i+0xfa>
 80117be:	6821      	ldr	r1, [r4, #0]
 80117c0:	6833      	ldr	r3, [r6, #0]
 80117c2:	0608      	lsls	r0, r1, #24
 80117c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80117c8:	d402      	bmi.n	80117d0 <_printf_i+0xe8>
 80117ca:	0649      	lsls	r1, r1, #25
 80117cc:	bf48      	it	mi
 80117ce:	b2ad      	uxthmi	r5, r5
 80117d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80117d2:	4852      	ldr	r0, [pc, #328]	@ (801191c <_printf_i+0x234>)
 80117d4:	6033      	str	r3, [r6, #0]
 80117d6:	bf14      	ite	ne
 80117d8:	230a      	movne	r3, #10
 80117da:	2308      	moveq	r3, #8
 80117dc:	2100      	movs	r1, #0
 80117de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80117e2:	6866      	ldr	r6, [r4, #4]
 80117e4:	60a6      	str	r6, [r4, #8]
 80117e6:	2e00      	cmp	r6, #0
 80117e8:	db05      	blt.n	80117f6 <_printf_i+0x10e>
 80117ea:	6821      	ldr	r1, [r4, #0]
 80117ec:	432e      	orrs	r6, r5
 80117ee:	f021 0104 	bic.w	r1, r1, #4
 80117f2:	6021      	str	r1, [r4, #0]
 80117f4:	d04b      	beq.n	801188e <_printf_i+0x1a6>
 80117f6:	4616      	mov	r6, r2
 80117f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80117fc:	fb03 5711 	mls	r7, r3, r1, r5
 8011800:	5dc7      	ldrb	r7, [r0, r7]
 8011802:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011806:	462f      	mov	r7, r5
 8011808:	42bb      	cmp	r3, r7
 801180a:	460d      	mov	r5, r1
 801180c:	d9f4      	bls.n	80117f8 <_printf_i+0x110>
 801180e:	2b08      	cmp	r3, #8
 8011810:	d10b      	bne.n	801182a <_printf_i+0x142>
 8011812:	6823      	ldr	r3, [r4, #0]
 8011814:	07df      	lsls	r7, r3, #31
 8011816:	d508      	bpl.n	801182a <_printf_i+0x142>
 8011818:	6923      	ldr	r3, [r4, #16]
 801181a:	6861      	ldr	r1, [r4, #4]
 801181c:	4299      	cmp	r1, r3
 801181e:	bfde      	ittt	le
 8011820:	2330      	movle	r3, #48	@ 0x30
 8011822:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011826:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801182a:	1b92      	subs	r2, r2, r6
 801182c:	6122      	str	r2, [r4, #16]
 801182e:	f8cd a000 	str.w	sl, [sp]
 8011832:	464b      	mov	r3, r9
 8011834:	aa03      	add	r2, sp, #12
 8011836:	4621      	mov	r1, r4
 8011838:	4640      	mov	r0, r8
 801183a:	f7ff fee7 	bl	801160c <_printf_common>
 801183e:	3001      	adds	r0, #1
 8011840:	d14a      	bne.n	80118d8 <_printf_i+0x1f0>
 8011842:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011846:	b004      	add	sp, #16
 8011848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801184c:	6823      	ldr	r3, [r4, #0]
 801184e:	f043 0320 	orr.w	r3, r3, #32
 8011852:	6023      	str	r3, [r4, #0]
 8011854:	4832      	ldr	r0, [pc, #200]	@ (8011920 <_printf_i+0x238>)
 8011856:	2778      	movs	r7, #120	@ 0x78
 8011858:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801185c:	6823      	ldr	r3, [r4, #0]
 801185e:	6831      	ldr	r1, [r6, #0]
 8011860:	061f      	lsls	r7, r3, #24
 8011862:	f851 5b04 	ldr.w	r5, [r1], #4
 8011866:	d402      	bmi.n	801186e <_printf_i+0x186>
 8011868:	065f      	lsls	r7, r3, #25
 801186a:	bf48      	it	mi
 801186c:	b2ad      	uxthmi	r5, r5
 801186e:	6031      	str	r1, [r6, #0]
 8011870:	07d9      	lsls	r1, r3, #31
 8011872:	bf44      	itt	mi
 8011874:	f043 0320 	orrmi.w	r3, r3, #32
 8011878:	6023      	strmi	r3, [r4, #0]
 801187a:	b11d      	cbz	r5, 8011884 <_printf_i+0x19c>
 801187c:	2310      	movs	r3, #16
 801187e:	e7ad      	b.n	80117dc <_printf_i+0xf4>
 8011880:	4826      	ldr	r0, [pc, #152]	@ (801191c <_printf_i+0x234>)
 8011882:	e7e9      	b.n	8011858 <_printf_i+0x170>
 8011884:	6823      	ldr	r3, [r4, #0]
 8011886:	f023 0320 	bic.w	r3, r3, #32
 801188a:	6023      	str	r3, [r4, #0]
 801188c:	e7f6      	b.n	801187c <_printf_i+0x194>
 801188e:	4616      	mov	r6, r2
 8011890:	e7bd      	b.n	801180e <_printf_i+0x126>
 8011892:	6833      	ldr	r3, [r6, #0]
 8011894:	6825      	ldr	r5, [r4, #0]
 8011896:	6961      	ldr	r1, [r4, #20]
 8011898:	1d18      	adds	r0, r3, #4
 801189a:	6030      	str	r0, [r6, #0]
 801189c:	062e      	lsls	r6, r5, #24
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	d501      	bpl.n	80118a6 <_printf_i+0x1be>
 80118a2:	6019      	str	r1, [r3, #0]
 80118a4:	e002      	b.n	80118ac <_printf_i+0x1c4>
 80118a6:	0668      	lsls	r0, r5, #25
 80118a8:	d5fb      	bpl.n	80118a2 <_printf_i+0x1ba>
 80118aa:	8019      	strh	r1, [r3, #0]
 80118ac:	2300      	movs	r3, #0
 80118ae:	6123      	str	r3, [r4, #16]
 80118b0:	4616      	mov	r6, r2
 80118b2:	e7bc      	b.n	801182e <_printf_i+0x146>
 80118b4:	6833      	ldr	r3, [r6, #0]
 80118b6:	1d1a      	adds	r2, r3, #4
 80118b8:	6032      	str	r2, [r6, #0]
 80118ba:	681e      	ldr	r6, [r3, #0]
 80118bc:	6862      	ldr	r2, [r4, #4]
 80118be:	2100      	movs	r1, #0
 80118c0:	4630      	mov	r0, r6
 80118c2:	f7ee fd35 	bl	8000330 <memchr>
 80118c6:	b108      	cbz	r0, 80118cc <_printf_i+0x1e4>
 80118c8:	1b80      	subs	r0, r0, r6
 80118ca:	6060      	str	r0, [r4, #4]
 80118cc:	6863      	ldr	r3, [r4, #4]
 80118ce:	6123      	str	r3, [r4, #16]
 80118d0:	2300      	movs	r3, #0
 80118d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80118d6:	e7aa      	b.n	801182e <_printf_i+0x146>
 80118d8:	6923      	ldr	r3, [r4, #16]
 80118da:	4632      	mov	r2, r6
 80118dc:	4649      	mov	r1, r9
 80118de:	4640      	mov	r0, r8
 80118e0:	47d0      	blx	sl
 80118e2:	3001      	adds	r0, #1
 80118e4:	d0ad      	beq.n	8011842 <_printf_i+0x15a>
 80118e6:	6823      	ldr	r3, [r4, #0]
 80118e8:	079b      	lsls	r3, r3, #30
 80118ea:	d413      	bmi.n	8011914 <_printf_i+0x22c>
 80118ec:	68e0      	ldr	r0, [r4, #12]
 80118ee:	9b03      	ldr	r3, [sp, #12]
 80118f0:	4298      	cmp	r0, r3
 80118f2:	bfb8      	it	lt
 80118f4:	4618      	movlt	r0, r3
 80118f6:	e7a6      	b.n	8011846 <_printf_i+0x15e>
 80118f8:	2301      	movs	r3, #1
 80118fa:	4632      	mov	r2, r6
 80118fc:	4649      	mov	r1, r9
 80118fe:	4640      	mov	r0, r8
 8011900:	47d0      	blx	sl
 8011902:	3001      	adds	r0, #1
 8011904:	d09d      	beq.n	8011842 <_printf_i+0x15a>
 8011906:	3501      	adds	r5, #1
 8011908:	68e3      	ldr	r3, [r4, #12]
 801190a:	9903      	ldr	r1, [sp, #12]
 801190c:	1a5b      	subs	r3, r3, r1
 801190e:	42ab      	cmp	r3, r5
 8011910:	dcf2      	bgt.n	80118f8 <_printf_i+0x210>
 8011912:	e7eb      	b.n	80118ec <_printf_i+0x204>
 8011914:	2500      	movs	r5, #0
 8011916:	f104 0619 	add.w	r6, r4, #25
 801191a:	e7f5      	b.n	8011908 <_printf_i+0x220>
 801191c:	080172e0 	.word	0x080172e0
 8011920:	080172f1 	.word	0x080172f1

08011924 <_scanf_float>:
 8011924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011928:	b087      	sub	sp, #28
 801192a:	4691      	mov	r9, r2
 801192c:	9303      	str	r3, [sp, #12]
 801192e:	688b      	ldr	r3, [r1, #8]
 8011930:	1e5a      	subs	r2, r3, #1
 8011932:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011936:	bf81      	itttt	hi
 8011938:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801193c:	eb03 0b05 	addhi.w	fp, r3, r5
 8011940:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011944:	608b      	strhi	r3, [r1, #8]
 8011946:	680b      	ldr	r3, [r1, #0]
 8011948:	460a      	mov	r2, r1
 801194a:	f04f 0500 	mov.w	r5, #0
 801194e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8011952:	f842 3b1c 	str.w	r3, [r2], #28
 8011956:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801195a:	4680      	mov	r8, r0
 801195c:	460c      	mov	r4, r1
 801195e:	bf98      	it	ls
 8011960:	f04f 0b00 	movls.w	fp, #0
 8011964:	9201      	str	r2, [sp, #4]
 8011966:	4616      	mov	r6, r2
 8011968:	46aa      	mov	sl, r5
 801196a:	462f      	mov	r7, r5
 801196c:	9502      	str	r5, [sp, #8]
 801196e:	68a2      	ldr	r2, [r4, #8]
 8011970:	b15a      	cbz	r2, 801198a <_scanf_float+0x66>
 8011972:	f8d9 3000 	ldr.w	r3, [r9]
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	2b4e      	cmp	r3, #78	@ 0x4e
 801197a:	d863      	bhi.n	8011a44 <_scanf_float+0x120>
 801197c:	2b40      	cmp	r3, #64	@ 0x40
 801197e:	d83b      	bhi.n	80119f8 <_scanf_float+0xd4>
 8011980:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8011984:	b2c8      	uxtb	r0, r1
 8011986:	280e      	cmp	r0, #14
 8011988:	d939      	bls.n	80119fe <_scanf_float+0xda>
 801198a:	b11f      	cbz	r7, 8011994 <_scanf_float+0x70>
 801198c:	6823      	ldr	r3, [r4, #0]
 801198e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011992:	6023      	str	r3, [r4, #0]
 8011994:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011998:	f1ba 0f01 	cmp.w	sl, #1
 801199c:	f200 8114 	bhi.w	8011bc8 <_scanf_float+0x2a4>
 80119a0:	9b01      	ldr	r3, [sp, #4]
 80119a2:	429e      	cmp	r6, r3
 80119a4:	f200 8105 	bhi.w	8011bb2 <_scanf_float+0x28e>
 80119a8:	2001      	movs	r0, #1
 80119aa:	b007      	add	sp, #28
 80119ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119b0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80119b4:	2a0d      	cmp	r2, #13
 80119b6:	d8e8      	bhi.n	801198a <_scanf_float+0x66>
 80119b8:	a101      	add	r1, pc, #4	@ (adr r1, 80119c0 <_scanf_float+0x9c>)
 80119ba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80119be:	bf00      	nop
 80119c0:	08011b09 	.word	0x08011b09
 80119c4:	0801198b 	.word	0x0801198b
 80119c8:	0801198b 	.word	0x0801198b
 80119cc:	0801198b 	.word	0x0801198b
 80119d0:	08011b65 	.word	0x08011b65
 80119d4:	08011b3f 	.word	0x08011b3f
 80119d8:	0801198b 	.word	0x0801198b
 80119dc:	0801198b 	.word	0x0801198b
 80119e0:	08011b17 	.word	0x08011b17
 80119e4:	0801198b 	.word	0x0801198b
 80119e8:	0801198b 	.word	0x0801198b
 80119ec:	0801198b 	.word	0x0801198b
 80119f0:	0801198b 	.word	0x0801198b
 80119f4:	08011ad3 	.word	0x08011ad3
 80119f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80119fc:	e7da      	b.n	80119b4 <_scanf_float+0x90>
 80119fe:	290e      	cmp	r1, #14
 8011a00:	d8c3      	bhi.n	801198a <_scanf_float+0x66>
 8011a02:	a001      	add	r0, pc, #4	@ (adr r0, 8011a08 <_scanf_float+0xe4>)
 8011a04:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011a08:	08011ac3 	.word	0x08011ac3
 8011a0c:	0801198b 	.word	0x0801198b
 8011a10:	08011ac3 	.word	0x08011ac3
 8011a14:	08011b53 	.word	0x08011b53
 8011a18:	0801198b 	.word	0x0801198b
 8011a1c:	08011a65 	.word	0x08011a65
 8011a20:	08011aa9 	.word	0x08011aa9
 8011a24:	08011aa9 	.word	0x08011aa9
 8011a28:	08011aa9 	.word	0x08011aa9
 8011a2c:	08011aa9 	.word	0x08011aa9
 8011a30:	08011aa9 	.word	0x08011aa9
 8011a34:	08011aa9 	.word	0x08011aa9
 8011a38:	08011aa9 	.word	0x08011aa9
 8011a3c:	08011aa9 	.word	0x08011aa9
 8011a40:	08011aa9 	.word	0x08011aa9
 8011a44:	2b6e      	cmp	r3, #110	@ 0x6e
 8011a46:	d809      	bhi.n	8011a5c <_scanf_float+0x138>
 8011a48:	2b60      	cmp	r3, #96	@ 0x60
 8011a4a:	d8b1      	bhi.n	80119b0 <_scanf_float+0x8c>
 8011a4c:	2b54      	cmp	r3, #84	@ 0x54
 8011a4e:	d07b      	beq.n	8011b48 <_scanf_float+0x224>
 8011a50:	2b59      	cmp	r3, #89	@ 0x59
 8011a52:	d19a      	bne.n	801198a <_scanf_float+0x66>
 8011a54:	2d07      	cmp	r5, #7
 8011a56:	d198      	bne.n	801198a <_scanf_float+0x66>
 8011a58:	2508      	movs	r5, #8
 8011a5a:	e02f      	b.n	8011abc <_scanf_float+0x198>
 8011a5c:	2b74      	cmp	r3, #116	@ 0x74
 8011a5e:	d073      	beq.n	8011b48 <_scanf_float+0x224>
 8011a60:	2b79      	cmp	r3, #121	@ 0x79
 8011a62:	e7f6      	b.n	8011a52 <_scanf_float+0x12e>
 8011a64:	6821      	ldr	r1, [r4, #0]
 8011a66:	05c8      	lsls	r0, r1, #23
 8011a68:	d51e      	bpl.n	8011aa8 <_scanf_float+0x184>
 8011a6a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011a6e:	6021      	str	r1, [r4, #0]
 8011a70:	3701      	adds	r7, #1
 8011a72:	f1bb 0f00 	cmp.w	fp, #0
 8011a76:	d003      	beq.n	8011a80 <_scanf_float+0x15c>
 8011a78:	3201      	adds	r2, #1
 8011a7a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8011a7e:	60a2      	str	r2, [r4, #8]
 8011a80:	68a3      	ldr	r3, [r4, #8]
 8011a82:	3b01      	subs	r3, #1
 8011a84:	60a3      	str	r3, [r4, #8]
 8011a86:	6923      	ldr	r3, [r4, #16]
 8011a88:	3301      	adds	r3, #1
 8011a8a:	6123      	str	r3, [r4, #16]
 8011a8c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011a90:	3b01      	subs	r3, #1
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	f8c9 3004 	str.w	r3, [r9, #4]
 8011a98:	f340 8082 	ble.w	8011ba0 <_scanf_float+0x27c>
 8011a9c:	f8d9 3000 	ldr.w	r3, [r9]
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	f8c9 3000 	str.w	r3, [r9]
 8011aa6:	e762      	b.n	801196e <_scanf_float+0x4a>
 8011aa8:	eb1a 0105 	adds.w	r1, sl, r5
 8011aac:	f47f af6d 	bne.w	801198a <_scanf_float+0x66>
 8011ab0:	6822      	ldr	r2, [r4, #0]
 8011ab2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011ab6:	6022      	str	r2, [r4, #0]
 8011ab8:	460d      	mov	r5, r1
 8011aba:	468a      	mov	sl, r1
 8011abc:	f806 3b01 	strb.w	r3, [r6], #1
 8011ac0:	e7de      	b.n	8011a80 <_scanf_float+0x15c>
 8011ac2:	6822      	ldr	r2, [r4, #0]
 8011ac4:	0610      	lsls	r0, r2, #24
 8011ac6:	f57f af60 	bpl.w	801198a <_scanf_float+0x66>
 8011aca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011ace:	6022      	str	r2, [r4, #0]
 8011ad0:	e7f4      	b.n	8011abc <_scanf_float+0x198>
 8011ad2:	f1ba 0f00 	cmp.w	sl, #0
 8011ad6:	d10c      	bne.n	8011af2 <_scanf_float+0x1ce>
 8011ad8:	b977      	cbnz	r7, 8011af8 <_scanf_float+0x1d4>
 8011ada:	6822      	ldr	r2, [r4, #0]
 8011adc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011ae0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011ae4:	d108      	bne.n	8011af8 <_scanf_float+0x1d4>
 8011ae6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011aea:	6022      	str	r2, [r4, #0]
 8011aec:	f04f 0a01 	mov.w	sl, #1
 8011af0:	e7e4      	b.n	8011abc <_scanf_float+0x198>
 8011af2:	f1ba 0f02 	cmp.w	sl, #2
 8011af6:	d050      	beq.n	8011b9a <_scanf_float+0x276>
 8011af8:	2d01      	cmp	r5, #1
 8011afa:	d002      	beq.n	8011b02 <_scanf_float+0x1de>
 8011afc:	2d04      	cmp	r5, #4
 8011afe:	f47f af44 	bne.w	801198a <_scanf_float+0x66>
 8011b02:	3501      	adds	r5, #1
 8011b04:	b2ed      	uxtb	r5, r5
 8011b06:	e7d9      	b.n	8011abc <_scanf_float+0x198>
 8011b08:	f1ba 0f01 	cmp.w	sl, #1
 8011b0c:	f47f af3d 	bne.w	801198a <_scanf_float+0x66>
 8011b10:	f04f 0a02 	mov.w	sl, #2
 8011b14:	e7d2      	b.n	8011abc <_scanf_float+0x198>
 8011b16:	b975      	cbnz	r5, 8011b36 <_scanf_float+0x212>
 8011b18:	2f00      	cmp	r7, #0
 8011b1a:	f47f af37 	bne.w	801198c <_scanf_float+0x68>
 8011b1e:	6822      	ldr	r2, [r4, #0]
 8011b20:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011b24:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011b28:	f040 80fc 	bne.w	8011d24 <_scanf_float+0x400>
 8011b2c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011b30:	6022      	str	r2, [r4, #0]
 8011b32:	2501      	movs	r5, #1
 8011b34:	e7c2      	b.n	8011abc <_scanf_float+0x198>
 8011b36:	2d03      	cmp	r5, #3
 8011b38:	d0e3      	beq.n	8011b02 <_scanf_float+0x1de>
 8011b3a:	2d05      	cmp	r5, #5
 8011b3c:	e7df      	b.n	8011afe <_scanf_float+0x1da>
 8011b3e:	2d02      	cmp	r5, #2
 8011b40:	f47f af23 	bne.w	801198a <_scanf_float+0x66>
 8011b44:	2503      	movs	r5, #3
 8011b46:	e7b9      	b.n	8011abc <_scanf_float+0x198>
 8011b48:	2d06      	cmp	r5, #6
 8011b4a:	f47f af1e 	bne.w	801198a <_scanf_float+0x66>
 8011b4e:	2507      	movs	r5, #7
 8011b50:	e7b4      	b.n	8011abc <_scanf_float+0x198>
 8011b52:	6822      	ldr	r2, [r4, #0]
 8011b54:	0591      	lsls	r1, r2, #22
 8011b56:	f57f af18 	bpl.w	801198a <_scanf_float+0x66>
 8011b5a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011b5e:	6022      	str	r2, [r4, #0]
 8011b60:	9702      	str	r7, [sp, #8]
 8011b62:	e7ab      	b.n	8011abc <_scanf_float+0x198>
 8011b64:	6822      	ldr	r2, [r4, #0]
 8011b66:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011b6a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011b6e:	d005      	beq.n	8011b7c <_scanf_float+0x258>
 8011b70:	0550      	lsls	r0, r2, #21
 8011b72:	f57f af0a 	bpl.w	801198a <_scanf_float+0x66>
 8011b76:	2f00      	cmp	r7, #0
 8011b78:	f000 80d4 	beq.w	8011d24 <_scanf_float+0x400>
 8011b7c:	0591      	lsls	r1, r2, #22
 8011b7e:	bf58      	it	pl
 8011b80:	9902      	ldrpl	r1, [sp, #8]
 8011b82:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011b86:	bf58      	it	pl
 8011b88:	1a79      	subpl	r1, r7, r1
 8011b8a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011b8e:	bf58      	it	pl
 8011b90:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011b94:	6022      	str	r2, [r4, #0]
 8011b96:	2700      	movs	r7, #0
 8011b98:	e790      	b.n	8011abc <_scanf_float+0x198>
 8011b9a:	f04f 0a03 	mov.w	sl, #3
 8011b9e:	e78d      	b.n	8011abc <_scanf_float+0x198>
 8011ba0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011ba4:	4649      	mov	r1, r9
 8011ba6:	4640      	mov	r0, r8
 8011ba8:	4798      	blx	r3
 8011baa:	2800      	cmp	r0, #0
 8011bac:	f43f aedf 	beq.w	801196e <_scanf_float+0x4a>
 8011bb0:	e6eb      	b.n	801198a <_scanf_float+0x66>
 8011bb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011bb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011bba:	464a      	mov	r2, r9
 8011bbc:	4640      	mov	r0, r8
 8011bbe:	4798      	blx	r3
 8011bc0:	6923      	ldr	r3, [r4, #16]
 8011bc2:	3b01      	subs	r3, #1
 8011bc4:	6123      	str	r3, [r4, #16]
 8011bc6:	e6eb      	b.n	80119a0 <_scanf_float+0x7c>
 8011bc8:	1e6b      	subs	r3, r5, #1
 8011bca:	2b06      	cmp	r3, #6
 8011bcc:	d824      	bhi.n	8011c18 <_scanf_float+0x2f4>
 8011bce:	2d02      	cmp	r5, #2
 8011bd0:	d836      	bhi.n	8011c40 <_scanf_float+0x31c>
 8011bd2:	9b01      	ldr	r3, [sp, #4]
 8011bd4:	429e      	cmp	r6, r3
 8011bd6:	f67f aee7 	bls.w	80119a8 <_scanf_float+0x84>
 8011bda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011bde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011be2:	464a      	mov	r2, r9
 8011be4:	4640      	mov	r0, r8
 8011be6:	4798      	blx	r3
 8011be8:	6923      	ldr	r3, [r4, #16]
 8011bea:	3b01      	subs	r3, #1
 8011bec:	6123      	str	r3, [r4, #16]
 8011bee:	e7f0      	b.n	8011bd2 <_scanf_float+0x2ae>
 8011bf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011bf4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011bf8:	464a      	mov	r2, r9
 8011bfa:	4640      	mov	r0, r8
 8011bfc:	4798      	blx	r3
 8011bfe:	6923      	ldr	r3, [r4, #16]
 8011c00:	3b01      	subs	r3, #1
 8011c02:	6123      	str	r3, [r4, #16]
 8011c04:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011c08:	fa5f fa8a 	uxtb.w	sl, sl
 8011c0c:	f1ba 0f02 	cmp.w	sl, #2
 8011c10:	d1ee      	bne.n	8011bf0 <_scanf_float+0x2cc>
 8011c12:	3d03      	subs	r5, #3
 8011c14:	b2ed      	uxtb	r5, r5
 8011c16:	1b76      	subs	r6, r6, r5
 8011c18:	6823      	ldr	r3, [r4, #0]
 8011c1a:	05da      	lsls	r2, r3, #23
 8011c1c:	d530      	bpl.n	8011c80 <_scanf_float+0x35c>
 8011c1e:	055b      	lsls	r3, r3, #21
 8011c20:	d511      	bpl.n	8011c46 <_scanf_float+0x322>
 8011c22:	9b01      	ldr	r3, [sp, #4]
 8011c24:	429e      	cmp	r6, r3
 8011c26:	f67f aebf 	bls.w	80119a8 <_scanf_float+0x84>
 8011c2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011c2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011c32:	464a      	mov	r2, r9
 8011c34:	4640      	mov	r0, r8
 8011c36:	4798      	blx	r3
 8011c38:	6923      	ldr	r3, [r4, #16]
 8011c3a:	3b01      	subs	r3, #1
 8011c3c:	6123      	str	r3, [r4, #16]
 8011c3e:	e7f0      	b.n	8011c22 <_scanf_float+0x2fe>
 8011c40:	46aa      	mov	sl, r5
 8011c42:	46b3      	mov	fp, r6
 8011c44:	e7de      	b.n	8011c04 <_scanf_float+0x2e0>
 8011c46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011c4a:	6923      	ldr	r3, [r4, #16]
 8011c4c:	2965      	cmp	r1, #101	@ 0x65
 8011c4e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8011c52:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8011c56:	6123      	str	r3, [r4, #16]
 8011c58:	d00c      	beq.n	8011c74 <_scanf_float+0x350>
 8011c5a:	2945      	cmp	r1, #69	@ 0x45
 8011c5c:	d00a      	beq.n	8011c74 <_scanf_float+0x350>
 8011c5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011c62:	464a      	mov	r2, r9
 8011c64:	4640      	mov	r0, r8
 8011c66:	4798      	blx	r3
 8011c68:	6923      	ldr	r3, [r4, #16]
 8011c6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011c6e:	3b01      	subs	r3, #1
 8011c70:	1eb5      	subs	r5, r6, #2
 8011c72:	6123      	str	r3, [r4, #16]
 8011c74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011c78:	464a      	mov	r2, r9
 8011c7a:	4640      	mov	r0, r8
 8011c7c:	4798      	blx	r3
 8011c7e:	462e      	mov	r6, r5
 8011c80:	6822      	ldr	r2, [r4, #0]
 8011c82:	f012 0210 	ands.w	r2, r2, #16
 8011c86:	d001      	beq.n	8011c8c <_scanf_float+0x368>
 8011c88:	2000      	movs	r0, #0
 8011c8a:	e68e      	b.n	80119aa <_scanf_float+0x86>
 8011c8c:	7032      	strb	r2, [r6, #0]
 8011c8e:	6823      	ldr	r3, [r4, #0]
 8011c90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011c98:	d123      	bne.n	8011ce2 <_scanf_float+0x3be>
 8011c9a:	9b02      	ldr	r3, [sp, #8]
 8011c9c:	429f      	cmp	r7, r3
 8011c9e:	d00a      	beq.n	8011cb6 <_scanf_float+0x392>
 8011ca0:	1bda      	subs	r2, r3, r7
 8011ca2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011ca6:	429e      	cmp	r6, r3
 8011ca8:	bf28      	it	cs
 8011caa:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011cae:	491e      	ldr	r1, [pc, #120]	@ (8011d28 <_scanf_float+0x404>)
 8011cb0:	4630      	mov	r0, r6
 8011cb2:	f000 f977 	bl	8011fa4 <siprintf>
 8011cb6:	9901      	ldr	r1, [sp, #4]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	4640      	mov	r0, r8
 8011cbc:	f002 fcaa 	bl	8014614 <_strtod_r>
 8011cc0:	9b03      	ldr	r3, [sp, #12]
 8011cc2:	6821      	ldr	r1, [r4, #0]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f011 0f02 	tst.w	r1, #2
 8011cca:	f103 0204 	add.w	r2, r3, #4
 8011cce:	d015      	beq.n	8011cfc <_scanf_float+0x3d8>
 8011cd0:	9903      	ldr	r1, [sp, #12]
 8011cd2:	600a      	str	r2, [r1, #0]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	ed83 0b00 	vstr	d0, [r3]
 8011cda:	68e3      	ldr	r3, [r4, #12]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	60e3      	str	r3, [r4, #12]
 8011ce0:	e7d2      	b.n	8011c88 <_scanf_float+0x364>
 8011ce2:	9b04      	ldr	r3, [sp, #16]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d0e6      	beq.n	8011cb6 <_scanf_float+0x392>
 8011ce8:	9905      	ldr	r1, [sp, #20]
 8011cea:	230a      	movs	r3, #10
 8011cec:	3101      	adds	r1, #1
 8011cee:	4640      	mov	r0, r8
 8011cf0:	f002 fd10 	bl	8014714 <_strtol_r>
 8011cf4:	9b04      	ldr	r3, [sp, #16]
 8011cf6:	9e05      	ldr	r6, [sp, #20]
 8011cf8:	1ac2      	subs	r2, r0, r3
 8011cfa:	e7d2      	b.n	8011ca2 <_scanf_float+0x37e>
 8011cfc:	f011 0f04 	tst.w	r1, #4
 8011d00:	9903      	ldr	r1, [sp, #12]
 8011d02:	600a      	str	r2, [r1, #0]
 8011d04:	d1e6      	bne.n	8011cd4 <_scanf_float+0x3b0>
 8011d06:	eeb4 0b40 	vcmp.f64	d0, d0
 8011d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d0e:	681d      	ldr	r5, [r3, #0]
 8011d10:	d705      	bvc.n	8011d1e <_scanf_float+0x3fa>
 8011d12:	4806      	ldr	r0, [pc, #24]	@ (8011d2c <_scanf_float+0x408>)
 8011d14:	f000 fb36 	bl	8012384 <nanf>
 8011d18:	ed85 0a00 	vstr	s0, [r5]
 8011d1c:	e7dd      	b.n	8011cda <_scanf_float+0x3b6>
 8011d1e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011d22:	e7f9      	b.n	8011d18 <_scanf_float+0x3f4>
 8011d24:	2700      	movs	r7, #0
 8011d26:	e635      	b.n	8011994 <_scanf_float+0x70>
 8011d28:	08017302 	.word	0x08017302
 8011d2c:	0801745e 	.word	0x0801745e

08011d30 <std>:
 8011d30:	2300      	movs	r3, #0
 8011d32:	b510      	push	{r4, lr}
 8011d34:	4604      	mov	r4, r0
 8011d36:	e9c0 3300 	strd	r3, r3, [r0]
 8011d3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d3e:	6083      	str	r3, [r0, #8]
 8011d40:	8181      	strh	r1, [r0, #12]
 8011d42:	6643      	str	r3, [r0, #100]	@ 0x64
 8011d44:	81c2      	strh	r2, [r0, #14]
 8011d46:	6183      	str	r3, [r0, #24]
 8011d48:	4619      	mov	r1, r3
 8011d4a:	2208      	movs	r2, #8
 8011d4c:	305c      	adds	r0, #92	@ 0x5c
 8011d4e:	f000 fa6b 	bl	8012228 <memset>
 8011d52:	4b0d      	ldr	r3, [pc, #52]	@ (8011d88 <std+0x58>)
 8011d54:	6263      	str	r3, [r4, #36]	@ 0x24
 8011d56:	4b0d      	ldr	r3, [pc, #52]	@ (8011d8c <std+0x5c>)
 8011d58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8011d90 <std+0x60>)
 8011d5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8011d94 <std+0x64>)
 8011d60:	6323      	str	r3, [r4, #48]	@ 0x30
 8011d62:	4b0d      	ldr	r3, [pc, #52]	@ (8011d98 <std+0x68>)
 8011d64:	6224      	str	r4, [r4, #32]
 8011d66:	429c      	cmp	r4, r3
 8011d68:	d006      	beq.n	8011d78 <std+0x48>
 8011d6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011d6e:	4294      	cmp	r4, r2
 8011d70:	d002      	beq.n	8011d78 <std+0x48>
 8011d72:	33d0      	adds	r3, #208	@ 0xd0
 8011d74:	429c      	cmp	r4, r3
 8011d76:	d105      	bne.n	8011d84 <std+0x54>
 8011d78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d80:	f000 baee 	b.w	8012360 <__retarget_lock_init_recursive>
 8011d84:	bd10      	pop	{r4, pc}
 8011d86:	bf00      	nop
 8011d88:	08012041 	.word	0x08012041
 8011d8c:	08012067 	.word	0x08012067
 8011d90:	0801209f 	.word	0x0801209f
 8011d94:	080120c3 	.word	0x080120c3
 8011d98:	2400073c 	.word	0x2400073c

08011d9c <stdio_exit_handler>:
 8011d9c:	4a02      	ldr	r2, [pc, #8]	@ (8011da8 <stdio_exit_handler+0xc>)
 8011d9e:	4903      	ldr	r1, [pc, #12]	@ (8011dac <stdio_exit_handler+0x10>)
 8011da0:	4803      	ldr	r0, [pc, #12]	@ (8011db0 <stdio_exit_handler+0x14>)
 8011da2:	f000 b869 	b.w	8011e78 <_fwalk_sglue>
 8011da6:	bf00      	nop
 8011da8:	24000014 	.word	0x24000014
 8011dac:	08015391 	.word	0x08015391
 8011db0:	24000024 	.word	0x24000024

08011db4 <cleanup_stdio>:
 8011db4:	6841      	ldr	r1, [r0, #4]
 8011db6:	4b0c      	ldr	r3, [pc, #48]	@ (8011de8 <cleanup_stdio+0x34>)
 8011db8:	4299      	cmp	r1, r3
 8011dba:	b510      	push	{r4, lr}
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	d001      	beq.n	8011dc4 <cleanup_stdio+0x10>
 8011dc0:	f003 fae6 	bl	8015390 <_fflush_r>
 8011dc4:	68a1      	ldr	r1, [r4, #8]
 8011dc6:	4b09      	ldr	r3, [pc, #36]	@ (8011dec <cleanup_stdio+0x38>)
 8011dc8:	4299      	cmp	r1, r3
 8011dca:	d002      	beq.n	8011dd2 <cleanup_stdio+0x1e>
 8011dcc:	4620      	mov	r0, r4
 8011dce:	f003 fadf 	bl	8015390 <_fflush_r>
 8011dd2:	68e1      	ldr	r1, [r4, #12]
 8011dd4:	4b06      	ldr	r3, [pc, #24]	@ (8011df0 <cleanup_stdio+0x3c>)
 8011dd6:	4299      	cmp	r1, r3
 8011dd8:	d004      	beq.n	8011de4 <cleanup_stdio+0x30>
 8011dda:	4620      	mov	r0, r4
 8011ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011de0:	f003 bad6 	b.w	8015390 <_fflush_r>
 8011de4:	bd10      	pop	{r4, pc}
 8011de6:	bf00      	nop
 8011de8:	2400073c 	.word	0x2400073c
 8011dec:	240007a4 	.word	0x240007a4
 8011df0:	2400080c 	.word	0x2400080c

08011df4 <global_stdio_init.part.0>:
 8011df4:	b510      	push	{r4, lr}
 8011df6:	4b0b      	ldr	r3, [pc, #44]	@ (8011e24 <global_stdio_init.part.0+0x30>)
 8011df8:	4c0b      	ldr	r4, [pc, #44]	@ (8011e28 <global_stdio_init.part.0+0x34>)
 8011dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8011e2c <global_stdio_init.part.0+0x38>)
 8011dfc:	601a      	str	r2, [r3, #0]
 8011dfe:	4620      	mov	r0, r4
 8011e00:	2200      	movs	r2, #0
 8011e02:	2104      	movs	r1, #4
 8011e04:	f7ff ff94 	bl	8011d30 <std>
 8011e08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	2109      	movs	r1, #9
 8011e10:	f7ff ff8e 	bl	8011d30 <std>
 8011e14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011e18:	2202      	movs	r2, #2
 8011e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e1e:	2112      	movs	r1, #18
 8011e20:	f7ff bf86 	b.w	8011d30 <std>
 8011e24:	24000874 	.word	0x24000874
 8011e28:	2400073c 	.word	0x2400073c
 8011e2c:	08011d9d 	.word	0x08011d9d

08011e30 <__sfp_lock_acquire>:
 8011e30:	4801      	ldr	r0, [pc, #4]	@ (8011e38 <__sfp_lock_acquire+0x8>)
 8011e32:	f000 ba96 	b.w	8012362 <__retarget_lock_acquire_recursive>
 8011e36:	bf00      	nop
 8011e38:	2400087d 	.word	0x2400087d

08011e3c <__sfp_lock_release>:
 8011e3c:	4801      	ldr	r0, [pc, #4]	@ (8011e44 <__sfp_lock_release+0x8>)
 8011e3e:	f000 ba91 	b.w	8012364 <__retarget_lock_release_recursive>
 8011e42:	bf00      	nop
 8011e44:	2400087d 	.word	0x2400087d

08011e48 <__sinit>:
 8011e48:	b510      	push	{r4, lr}
 8011e4a:	4604      	mov	r4, r0
 8011e4c:	f7ff fff0 	bl	8011e30 <__sfp_lock_acquire>
 8011e50:	6a23      	ldr	r3, [r4, #32]
 8011e52:	b11b      	cbz	r3, 8011e5c <__sinit+0x14>
 8011e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e58:	f7ff bff0 	b.w	8011e3c <__sfp_lock_release>
 8011e5c:	4b04      	ldr	r3, [pc, #16]	@ (8011e70 <__sinit+0x28>)
 8011e5e:	6223      	str	r3, [r4, #32]
 8011e60:	4b04      	ldr	r3, [pc, #16]	@ (8011e74 <__sinit+0x2c>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d1f5      	bne.n	8011e54 <__sinit+0xc>
 8011e68:	f7ff ffc4 	bl	8011df4 <global_stdio_init.part.0>
 8011e6c:	e7f2      	b.n	8011e54 <__sinit+0xc>
 8011e6e:	bf00      	nop
 8011e70:	08011db5 	.word	0x08011db5
 8011e74:	24000874 	.word	0x24000874

08011e78 <_fwalk_sglue>:
 8011e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e7c:	4607      	mov	r7, r0
 8011e7e:	4688      	mov	r8, r1
 8011e80:	4614      	mov	r4, r2
 8011e82:	2600      	movs	r6, #0
 8011e84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011e88:	f1b9 0901 	subs.w	r9, r9, #1
 8011e8c:	d505      	bpl.n	8011e9a <_fwalk_sglue+0x22>
 8011e8e:	6824      	ldr	r4, [r4, #0]
 8011e90:	2c00      	cmp	r4, #0
 8011e92:	d1f7      	bne.n	8011e84 <_fwalk_sglue+0xc>
 8011e94:	4630      	mov	r0, r6
 8011e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e9a:	89ab      	ldrh	r3, [r5, #12]
 8011e9c:	2b01      	cmp	r3, #1
 8011e9e:	d907      	bls.n	8011eb0 <_fwalk_sglue+0x38>
 8011ea0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ea4:	3301      	adds	r3, #1
 8011ea6:	d003      	beq.n	8011eb0 <_fwalk_sglue+0x38>
 8011ea8:	4629      	mov	r1, r5
 8011eaa:	4638      	mov	r0, r7
 8011eac:	47c0      	blx	r8
 8011eae:	4306      	orrs	r6, r0
 8011eb0:	3568      	adds	r5, #104	@ 0x68
 8011eb2:	e7e9      	b.n	8011e88 <_fwalk_sglue+0x10>

08011eb4 <iprintf>:
 8011eb4:	b40f      	push	{r0, r1, r2, r3}
 8011eb6:	b507      	push	{r0, r1, r2, lr}
 8011eb8:	4906      	ldr	r1, [pc, #24]	@ (8011ed4 <iprintf+0x20>)
 8011eba:	ab04      	add	r3, sp, #16
 8011ebc:	6808      	ldr	r0, [r1, #0]
 8011ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ec2:	6881      	ldr	r1, [r0, #8]
 8011ec4:	9301      	str	r3, [sp, #4]
 8011ec6:	f002 ff79 	bl	8014dbc <_vfiprintf_r>
 8011eca:	b003      	add	sp, #12
 8011ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ed0:	b004      	add	sp, #16
 8011ed2:	4770      	bx	lr
 8011ed4:	24000020 	.word	0x24000020

08011ed8 <putchar>:
 8011ed8:	4b02      	ldr	r3, [pc, #8]	@ (8011ee4 <putchar+0xc>)
 8011eda:	4601      	mov	r1, r0
 8011edc:	6818      	ldr	r0, [r3, #0]
 8011ede:	6882      	ldr	r2, [r0, #8]
 8011ee0:	f003 bae0 	b.w	80154a4 <_putc_r>
 8011ee4:	24000020 	.word	0x24000020

08011ee8 <_puts_r>:
 8011ee8:	6a03      	ldr	r3, [r0, #32]
 8011eea:	b570      	push	{r4, r5, r6, lr}
 8011eec:	6884      	ldr	r4, [r0, #8]
 8011eee:	4605      	mov	r5, r0
 8011ef0:	460e      	mov	r6, r1
 8011ef2:	b90b      	cbnz	r3, 8011ef8 <_puts_r+0x10>
 8011ef4:	f7ff ffa8 	bl	8011e48 <__sinit>
 8011ef8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011efa:	07db      	lsls	r3, r3, #31
 8011efc:	d405      	bmi.n	8011f0a <_puts_r+0x22>
 8011efe:	89a3      	ldrh	r3, [r4, #12]
 8011f00:	0598      	lsls	r0, r3, #22
 8011f02:	d402      	bmi.n	8011f0a <_puts_r+0x22>
 8011f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f06:	f000 fa2c 	bl	8012362 <__retarget_lock_acquire_recursive>
 8011f0a:	89a3      	ldrh	r3, [r4, #12]
 8011f0c:	0719      	lsls	r1, r3, #28
 8011f0e:	d502      	bpl.n	8011f16 <_puts_r+0x2e>
 8011f10:	6923      	ldr	r3, [r4, #16]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d135      	bne.n	8011f82 <_puts_r+0x9a>
 8011f16:	4621      	mov	r1, r4
 8011f18:	4628      	mov	r0, r5
 8011f1a:	f000 f915 	bl	8012148 <__swsetup_r>
 8011f1e:	b380      	cbz	r0, 8011f82 <_puts_r+0x9a>
 8011f20:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8011f24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011f26:	07da      	lsls	r2, r3, #31
 8011f28:	d405      	bmi.n	8011f36 <_puts_r+0x4e>
 8011f2a:	89a3      	ldrh	r3, [r4, #12]
 8011f2c:	059b      	lsls	r3, r3, #22
 8011f2e:	d402      	bmi.n	8011f36 <_puts_r+0x4e>
 8011f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f32:	f000 fa17 	bl	8012364 <__retarget_lock_release_recursive>
 8011f36:	4628      	mov	r0, r5
 8011f38:	bd70      	pop	{r4, r5, r6, pc}
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	da04      	bge.n	8011f48 <_puts_r+0x60>
 8011f3e:	69a2      	ldr	r2, [r4, #24]
 8011f40:	429a      	cmp	r2, r3
 8011f42:	dc17      	bgt.n	8011f74 <_puts_r+0x8c>
 8011f44:	290a      	cmp	r1, #10
 8011f46:	d015      	beq.n	8011f74 <_puts_r+0x8c>
 8011f48:	6823      	ldr	r3, [r4, #0]
 8011f4a:	1c5a      	adds	r2, r3, #1
 8011f4c:	6022      	str	r2, [r4, #0]
 8011f4e:	7019      	strb	r1, [r3, #0]
 8011f50:	68a3      	ldr	r3, [r4, #8]
 8011f52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011f56:	3b01      	subs	r3, #1
 8011f58:	60a3      	str	r3, [r4, #8]
 8011f5a:	2900      	cmp	r1, #0
 8011f5c:	d1ed      	bne.n	8011f3a <_puts_r+0x52>
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	da11      	bge.n	8011f86 <_puts_r+0x9e>
 8011f62:	4622      	mov	r2, r4
 8011f64:	210a      	movs	r1, #10
 8011f66:	4628      	mov	r0, r5
 8011f68:	f000 f8af 	bl	80120ca <__swbuf_r>
 8011f6c:	3001      	adds	r0, #1
 8011f6e:	d0d7      	beq.n	8011f20 <_puts_r+0x38>
 8011f70:	250a      	movs	r5, #10
 8011f72:	e7d7      	b.n	8011f24 <_puts_r+0x3c>
 8011f74:	4622      	mov	r2, r4
 8011f76:	4628      	mov	r0, r5
 8011f78:	f000 f8a7 	bl	80120ca <__swbuf_r>
 8011f7c:	3001      	adds	r0, #1
 8011f7e:	d1e7      	bne.n	8011f50 <_puts_r+0x68>
 8011f80:	e7ce      	b.n	8011f20 <_puts_r+0x38>
 8011f82:	3e01      	subs	r6, #1
 8011f84:	e7e4      	b.n	8011f50 <_puts_r+0x68>
 8011f86:	6823      	ldr	r3, [r4, #0]
 8011f88:	1c5a      	adds	r2, r3, #1
 8011f8a:	6022      	str	r2, [r4, #0]
 8011f8c:	220a      	movs	r2, #10
 8011f8e:	701a      	strb	r2, [r3, #0]
 8011f90:	e7ee      	b.n	8011f70 <_puts_r+0x88>
	...

08011f94 <puts>:
 8011f94:	4b02      	ldr	r3, [pc, #8]	@ (8011fa0 <puts+0xc>)
 8011f96:	4601      	mov	r1, r0
 8011f98:	6818      	ldr	r0, [r3, #0]
 8011f9a:	f7ff bfa5 	b.w	8011ee8 <_puts_r>
 8011f9e:	bf00      	nop
 8011fa0:	24000020 	.word	0x24000020

08011fa4 <siprintf>:
 8011fa4:	b40e      	push	{r1, r2, r3}
 8011fa6:	b510      	push	{r4, lr}
 8011fa8:	b09d      	sub	sp, #116	@ 0x74
 8011faa:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011fac:	9002      	str	r0, [sp, #8]
 8011fae:	9006      	str	r0, [sp, #24]
 8011fb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011fb4:	480a      	ldr	r0, [pc, #40]	@ (8011fe0 <siprintf+0x3c>)
 8011fb6:	9107      	str	r1, [sp, #28]
 8011fb8:	9104      	str	r1, [sp, #16]
 8011fba:	490a      	ldr	r1, [pc, #40]	@ (8011fe4 <siprintf+0x40>)
 8011fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fc0:	9105      	str	r1, [sp, #20]
 8011fc2:	2400      	movs	r4, #0
 8011fc4:	a902      	add	r1, sp, #8
 8011fc6:	6800      	ldr	r0, [r0, #0]
 8011fc8:	9301      	str	r3, [sp, #4]
 8011fca:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011fcc:	f002 fc00 	bl	80147d0 <_svfiprintf_r>
 8011fd0:	9b02      	ldr	r3, [sp, #8]
 8011fd2:	701c      	strb	r4, [r3, #0]
 8011fd4:	b01d      	add	sp, #116	@ 0x74
 8011fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fda:	b003      	add	sp, #12
 8011fdc:	4770      	bx	lr
 8011fde:	bf00      	nop
 8011fe0:	24000020 	.word	0x24000020
 8011fe4:	ffff0208 	.word	0xffff0208

08011fe8 <siscanf>:
 8011fe8:	b40e      	push	{r1, r2, r3}
 8011fea:	b570      	push	{r4, r5, r6, lr}
 8011fec:	b09d      	sub	sp, #116	@ 0x74
 8011fee:	ac21      	add	r4, sp, #132	@ 0x84
 8011ff0:	2500      	movs	r5, #0
 8011ff2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011ff6:	f854 6b04 	ldr.w	r6, [r4], #4
 8011ffa:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011ffe:	951b      	str	r5, [sp, #108]	@ 0x6c
 8012000:	9002      	str	r0, [sp, #8]
 8012002:	9006      	str	r0, [sp, #24]
 8012004:	f7ee f9e4 	bl	80003d0 <strlen>
 8012008:	4b0b      	ldr	r3, [pc, #44]	@ (8012038 <siscanf+0x50>)
 801200a:	9003      	str	r0, [sp, #12]
 801200c:	9007      	str	r0, [sp, #28]
 801200e:	480b      	ldr	r0, [pc, #44]	@ (801203c <siscanf+0x54>)
 8012010:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012012:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012016:	f8ad 3016 	strh.w	r3, [sp, #22]
 801201a:	4632      	mov	r2, r6
 801201c:	4623      	mov	r3, r4
 801201e:	a902      	add	r1, sp, #8
 8012020:	6800      	ldr	r0, [r0, #0]
 8012022:	950f      	str	r5, [sp, #60]	@ 0x3c
 8012024:	9514      	str	r5, [sp, #80]	@ 0x50
 8012026:	9401      	str	r4, [sp, #4]
 8012028:	f002 fd28 	bl	8014a7c <__ssvfiscanf_r>
 801202c:	b01d      	add	sp, #116	@ 0x74
 801202e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012032:	b003      	add	sp, #12
 8012034:	4770      	bx	lr
 8012036:	bf00      	nop
 8012038:	08012063 	.word	0x08012063
 801203c:	24000020 	.word	0x24000020

08012040 <__sread>:
 8012040:	b510      	push	{r4, lr}
 8012042:	460c      	mov	r4, r1
 8012044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012048:	f000 f93c 	bl	80122c4 <_read_r>
 801204c:	2800      	cmp	r0, #0
 801204e:	bfab      	itete	ge
 8012050:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012052:	89a3      	ldrhlt	r3, [r4, #12]
 8012054:	181b      	addge	r3, r3, r0
 8012056:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801205a:	bfac      	ite	ge
 801205c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801205e:	81a3      	strhlt	r3, [r4, #12]
 8012060:	bd10      	pop	{r4, pc}

08012062 <__seofread>:
 8012062:	2000      	movs	r0, #0
 8012064:	4770      	bx	lr

08012066 <__swrite>:
 8012066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801206a:	461f      	mov	r7, r3
 801206c:	898b      	ldrh	r3, [r1, #12]
 801206e:	05db      	lsls	r3, r3, #23
 8012070:	4605      	mov	r5, r0
 8012072:	460c      	mov	r4, r1
 8012074:	4616      	mov	r6, r2
 8012076:	d505      	bpl.n	8012084 <__swrite+0x1e>
 8012078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801207c:	2302      	movs	r3, #2
 801207e:	2200      	movs	r2, #0
 8012080:	f000 f90e 	bl	80122a0 <_lseek_r>
 8012084:	89a3      	ldrh	r3, [r4, #12]
 8012086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801208a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801208e:	81a3      	strh	r3, [r4, #12]
 8012090:	4632      	mov	r2, r6
 8012092:	463b      	mov	r3, r7
 8012094:	4628      	mov	r0, r5
 8012096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801209a:	f000 b925 	b.w	80122e8 <_write_r>

0801209e <__sseek>:
 801209e:	b510      	push	{r4, lr}
 80120a0:	460c      	mov	r4, r1
 80120a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120a6:	f000 f8fb 	bl	80122a0 <_lseek_r>
 80120aa:	1c43      	adds	r3, r0, #1
 80120ac:	89a3      	ldrh	r3, [r4, #12]
 80120ae:	bf15      	itete	ne
 80120b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80120b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80120b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80120ba:	81a3      	strheq	r3, [r4, #12]
 80120bc:	bf18      	it	ne
 80120be:	81a3      	strhne	r3, [r4, #12]
 80120c0:	bd10      	pop	{r4, pc}

080120c2 <__sclose>:
 80120c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120c6:	f000 b8db 	b.w	8012280 <_close_r>

080120ca <__swbuf_r>:
 80120ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120cc:	460e      	mov	r6, r1
 80120ce:	4614      	mov	r4, r2
 80120d0:	4605      	mov	r5, r0
 80120d2:	b118      	cbz	r0, 80120dc <__swbuf_r+0x12>
 80120d4:	6a03      	ldr	r3, [r0, #32]
 80120d6:	b90b      	cbnz	r3, 80120dc <__swbuf_r+0x12>
 80120d8:	f7ff feb6 	bl	8011e48 <__sinit>
 80120dc:	69a3      	ldr	r3, [r4, #24]
 80120de:	60a3      	str	r3, [r4, #8]
 80120e0:	89a3      	ldrh	r3, [r4, #12]
 80120e2:	071a      	lsls	r2, r3, #28
 80120e4:	d501      	bpl.n	80120ea <__swbuf_r+0x20>
 80120e6:	6923      	ldr	r3, [r4, #16]
 80120e8:	b943      	cbnz	r3, 80120fc <__swbuf_r+0x32>
 80120ea:	4621      	mov	r1, r4
 80120ec:	4628      	mov	r0, r5
 80120ee:	f000 f82b 	bl	8012148 <__swsetup_r>
 80120f2:	b118      	cbz	r0, 80120fc <__swbuf_r+0x32>
 80120f4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80120f8:	4638      	mov	r0, r7
 80120fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120fc:	6823      	ldr	r3, [r4, #0]
 80120fe:	6922      	ldr	r2, [r4, #16]
 8012100:	1a98      	subs	r0, r3, r2
 8012102:	6963      	ldr	r3, [r4, #20]
 8012104:	b2f6      	uxtb	r6, r6
 8012106:	4283      	cmp	r3, r0
 8012108:	4637      	mov	r7, r6
 801210a:	dc05      	bgt.n	8012118 <__swbuf_r+0x4e>
 801210c:	4621      	mov	r1, r4
 801210e:	4628      	mov	r0, r5
 8012110:	f003 f93e 	bl	8015390 <_fflush_r>
 8012114:	2800      	cmp	r0, #0
 8012116:	d1ed      	bne.n	80120f4 <__swbuf_r+0x2a>
 8012118:	68a3      	ldr	r3, [r4, #8]
 801211a:	3b01      	subs	r3, #1
 801211c:	60a3      	str	r3, [r4, #8]
 801211e:	6823      	ldr	r3, [r4, #0]
 8012120:	1c5a      	adds	r2, r3, #1
 8012122:	6022      	str	r2, [r4, #0]
 8012124:	701e      	strb	r6, [r3, #0]
 8012126:	6962      	ldr	r2, [r4, #20]
 8012128:	1c43      	adds	r3, r0, #1
 801212a:	429a      	cmp	r2, r3
 801212c:	d004      	beq.n	8012138 <__swbuf_r+0x6e>
 801212e:	89a3      	ldrh	r3, [r4, #12]
 8012130:	07db      	lsls	r3, r3, #31
 8012132:	d5e1      	bpl.n	80120f8 <__swbuf_r+0x2e>
 8012134:	2e0a      	cmp	r6, #10
 8012136:	d1df      	bne.n	80120f8 <__swbuf_r+0x2e>
 8012138:	4621      	mov	r1, r4
 801213a:	4628      	mov	r0, r5
 801213c:	f003 f928 	bl	8015390 <_fflush_r>
 8012140:	2800      	cmp	r0, #0
 8012142:	d0d9      	beq.n	80120f8 <__swbuf_r+0x2e>
 8012144:	e7d6      	b.n	80120f4 <__swbuf_r+0x2a>
	...

08012148 <__swsetup_r>:
 8012148:	b538      	push	{r3, r4, r5, lr}
 801214a:	4b29      	ldr	r3, [pc, #164]	@ (80121f0 <__swsetup_r+0xa8>)
 801214c:	4605      	mov	r5, r0
 801214e:	6818      	ldr	r0, [r3, #0]
 8012150:	460c      	mov	r4, r1
 8012152:	b118      	cbz	r0, 801215c <__swsetup_r+0x14>
 8012154:	6a03      	ldr	r3, [r0, #32]
 8012156:	b90b      	cbnz	r3, 801215c <__swsetup_r+0x14>
 8012158:	f7ff fe76 	bl	8011e48 <__sinit>
 801215c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012160:	0719      	lsls	r1, r3, #28
 8012162:	d422      	bmi.n	80121aa <__swsetup_r+0x62>
 8012164:	06da      	lsls	r2, r3, #27
 8012166:	d407      	bmi.n	8012178 <__swsetup_r+0x30>
 8012168:	2209      	movs	r2, #9
 801216a:	602a      	str	r2, [r5, #0]
 801216c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012170:	81a3      	strh	r3, [r4, #12]
 8012172:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012176:	e033      	b.n	80121e0 <__swsetup_r+0x98>
 8012178:	0758      	lsls	r0, r3, #29
 801217a:	d512      	bpl.n	80121a2 <__swsetup_r+0x5a>
 801217c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801217e:	b141      	cbz	r1, 8012192 <__swsetup_r+0x4a>
 8012180:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012184:	4299      	cmp	r1, r3
 8012186:	d002      	beq.n	801218e <__swsetup_r+0x46>
 8012188:	4628      	mov	r0, r5
 801218a:	f000 fee7 	bl	8012f5c <_free_r>
 801218e:	2300      	movs	r3, #0
 8012190:	6363      	str	r3, [r4, #52]	@ 0x34
 8012192:	89a3      	ldrh	r3, [r4, #12]
 8012194:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012198:	81a3      	strh	r3, [r4, #12]
 801219a:	2300      	movs	r3, #0
 801219c:	6063      	str	r3, [r4, #4]
 801219e:	6923      	ldr	r3, [r4, #16]
 80121a0:	6023      	str	r3, [r4, #0]
 80121a2:	89a3      	ldrh	r3, [r4, #12]
 80121a4:	f043 0308 	orr.w	r3, r3, #8
 80121a8:	81a3      	strh	r3, [r4, #12]
 80121aa:	6923      	ldr	r3, [r4, #16]
 80121ac:	b94b      	cbnz	r3, 80121c2 <__swsetup_r+0x7a>
 80121ae:	89a3      	ldrh	r3, [r4, #12]
 80121b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80121b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121b8:	d003      	beq.n	80121c2 <__swsetup_r+0x7a>
 80121ba:	4621      	mov	r1, r4
 80121bc:	4628      	mov	r0, r5
 80121be:	f003 f935 	bl	801542c <__smakebuf_r>
 80121c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121c6:	f013 0201 	ands.w	r2, r3, #1
 80121ca:	d00a      	beq.n	80121e2 <__swsetup_r+0x9a>
 80121cc:	2200      	movs	r2, #0
 80121ce:	60a2      	str	r2, [r4, #8]
 80121d0:	6962      	ldr	r2, [r4, #20]
 80121d2:	4252      	negs	r2, r2
 80121d4:	61a2      	str	r2, [r4, #24]
 80121d6:	6922      	ldr	r2, [r4, #16]
 80121d8:	b942      	cbnz	r2, 80121ec <__swsetup_r+0xa4>
 80121da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80121de:	d1c5      	bne.n	801216c <__swsetup_r+0x24>
 80121e0:	bd38      	pop	{r3, r4, r5, pc}
 80121e2:	0799      	lsls	r1, r3, #30
 80121e4:	bf58      	it	pl
 80121e6:	6962      	ldrpl	r2, [r4, #20]
 80121e8:	60a2      	str	r2, [r4, #8]
 80121ea:	e7f4      	b.n	80121d6 <__swsetup_r+0x8e>
 80121ec:	2000      	movs	r0, #0
 80121ee:	e7f7      	b.n	80121e0 <__swsetup_r+0x98>
 80121f0:	24000020 	.word	0x24000020

080121f4 <memmove>:
 80121f4:	4288      	cmp	r0, r1
 80121f6:	b510      	push	{r4, lr}
 80121f8:	eb01 0402 	add.w	r4, r1, r2
 80121fc:	d902      	bls.n	8012204 <memmove+0x10>
 80121fe:	4284      	cmp	r4, r0
 8012200:	4623      	mov	r3, r4
 8012202:	d807      	bhi.n	8012214 <memmove+0x20>
 8012204:	1e43      	subs	r3, r0, #1
 8012206:	42a1      	cmp	r1, r4
 8012208:	d008      	beq.n	801221c <memmove+0x28>
 801220a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801220e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012212:	e7f8      	b.n	8012206 <memmove+0x12>
 8012214:	4402      	add	r2, r0
 8012216:	4601      	mov	r1, r0
 8012218:	428a      	cmp	r2, r1
 801221a:	d100      	bne.n	801221e <memmove+0x2a>
 801221c:	bd10      	pop	{r4, pc}
 801221e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012226:	e7f7      	b.n	8012218 <memmove+0x24>

08012228 <memset>:
 8012228:	4402      	add	r2, r0
 801222a:	4603      	mov	r3, r0
 801222c:	4293      	cmp	r3, r2
 801222e:	d100      	bne.n	8012232 <memset+0xa>
 8012230:	4770      	bx	lr
 8012232:	f803 1b01 	strb.w	r1, [r3], #1
 8012236:	e7f9      	b.n	801222c <memset+0x4>

08012238 <strchr>:
 8012238:	b2c9      	uxtb	r1, r1
 801223a:	4603      	mov	r3, r0
 801223c:	4618      	mov	r0, r3
 801223e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012242:	b112      	cbz	r2, 801224a <strchr+0x12>
 8012244:	428a      	cmp	r2, r1
 8012246:	d1f9      	bne.n	801223c <strchr+0x4>
 8012248:	4770      	bx	lr
 801224a:	2900      	cmp	r1, #0
 801224c:	bf18      	it	ne
 801224e:	2000      	movne	r0, #0
 8012250:	4770      	bx	lr

08012252 <strncmp>:
 8012252:	b510      	push	{r4, lr}
 8012254:	b16a      	cbz	r2, 8012272 <strncmp+0x20>
 8012256:	3901      	subs	r1, #1
 8012258:	1884      	adds	r4, r0, r2
 801225a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801225e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012262:	429a      	cmp	r2, r3
 8012264:	d103      	bne.n	801226e <strncmp+0x1c>
 8012266:	42a0      	cmp	r0, r4
 8012268:	d001      	beq.n	801226e <strncmp+0x1c>
 801226a:	2a00      	cmp	r2, #0
 801226c:	d1f5      	bne.n	801225a <strncmp+0x8>
 801226e:	1ad0      	subs	r0, r2, r3
 8012270:	bd10      	pop	{r4, pc}
 8012272:	4610      	mov	r0, r2
 8012274:	e7fc      	b.n	8012270 <strncmp+0x1e>
	...

08012278 <_localeconv_r>:
 8012278:	4800      	ldr	r0, [pc, #0]	@ (801227c <_localeconv_r+0x4>)
 801227a:	4770      	bx	lr
 801227c:	24000160 	.word	0x24000160

08012280 <_close_r>:
 8012280:	b538      	push	{r3, r4, r5, lr}
 8012282:	4d06      	ldr	r5, [pc, #24]	@ (801229c <_close_r+0x1c>)
 8012284:	2300      	movs	r3, #0
 8012286:	4604      	mov	r4, r0
 8012288:	4608      	mov	r0, r1
 801228a:	602b      	str	r3, [r5, #0]
 801228c:	f7f2 fafa 	bl	8004884 <_close>
 8012290:	1c43      	adds	r3, r0, #1
 8012292:	d102      	bne.n	801229a <_close_r+0x1a>
 8012294:	682b      	ldr	r3, [r5, #0]
 8012296:	b103      	cbz	r3, 801229a <_close_r+0x1a>
 8012298:	6023      	str	r3, [r4, #0]
 801229a:	bd38      	pop	{r3, r4, r5, pc}
 801229c:	24000878 	.word	0x24000878

080122a0 <_lseek_r>:
 80122a0:	b538      	push	{r3, r4, r5, lr}
 80122a2:	4d07      	ldr	r5, [pc, #28]	@ (80122c0 <_lseek_r+0x20>)
 80122a4:	4604      	mov	r4, r0
 80122a6:	4608      	mov	r0, r1
 80122a8:	4611      	mov	r1, r2
 80122aa:	2200      	movs	r2, #0
 80122ac:	602a      	str	r2, [r5, #0]
 80122ae:	461a      	mov	r2, r3
 80122b0:	f7f2 fb0f 	bl	80048d2 <_lseek>
 80122b4:	1c43      	adds	r3, r0, #1
 80122b6:	d102      	bne.n	80122be <_lseek_r+0x1e>
 80122b8:	682b      	ldr	r3, [r5, #0]
 80122ba:	b103      	cbz	r3, 80122be <_lseek_r+0x1e>
 80122bc:	6023      	str	r3, [r4, #0]
 80122be:	bd38      	pop	{r3, r4, r5, pc}
 80122c0:	24000878 	.word	0x24000878

080122c4 <_read_r>:
 80122c4:	b538      	push	{r3, r4, r5, lr}
 80122c6:	4d07      	ldr	r5, [pc, #28]	@ (80122e4 <_read_r+0x20>)
 80122c8:	4604      	mov	r4, r0
 80122ca:	4608      	mov	r0, r1
 80122cc:	4611      	mov	r1, r2
 80122ce:	2200      	movs	r2, #0
 80122d0:	602a      	str	r2, [r5, #0]
 80122d2:	461a      	mov	r2, r3
 80122d4:	f7f2 fab9 	bl	800484a <_read>
 80122d8:	1c43      	adds	r3, r0, #1
 80122da:	d102      	bne.n	80122e2 <_read_r+0x1e>
 80122dc:	682b      	ldr	r3, [r5, #0]
 80122de:	b103      	cbz	r3, 80122e2 <_read_r+0x1e>
 80122e0:	6023      	str	r3, [r4, #0]
 80122e2:	bd38      	pop	{r3, r4, r5, pc}
 80122e4:	24000878 	.word	0x24000878

080122e8 <_write_r>:
 80122e8:	b538      	push	{r3, r4, r5, lr}
 80122ea:	4d07      	ldr	r5, [pc, #28]	@ (8012308 <_write_r+0x20>)
 80122ec:	4604      	mov	r4, r0
 80122ee:	4608      	mov	r0, r1
 80122f0:	4611      	mov	r1, r2
 80122f2:	2200      	movs	r2, #0
 80122f4:	602a      	str	r2, [r5, #0]
 80122f6:	461a      	mov	r2, r3
 80122f8:	f7f0 fdb4 	bl	8002e64 <_write>
 80122fc:	1c43      	adds	r3, r0, #1
 80122fe:	d102      	bne.n	8012306 <_write_r+0x1e>
 8012300:	682b      	ldr	r3, [r5, #0]
 8012302:	b103      	cbz	r3, 8012306 <_write_r+0x1e>
 8012304:	6023      	str	r3, [r4, #0]
 8012306:	bd38      	pop	{r3, r4, r5, pc}
 8012308:	24000878 	.word	0x24000878

0801230c <__errno>:
 801230c:	4b01      	ldr	r3, [pc, #4]	@ (8012314 <__errno+0x8>)
 801230e:	6818      	ldr	r0, [r3, #0]
 8012310:	4770      	bx	lr
 8012312:	bf00      	nop
 8012314:	24000020 	.word	0x24000020

08012318 <__libc_init_array>:
 8012318:	b570      	push	{r4, r5, r6, lr}
 801231a:	4d0d      	ldr	r5, [pc, #52]	@ (8012350 <__libc_init_array+0x38>)
 801231c:	4c0d      	ldr	r4, [pc, #52]	@ (8012354 <__libc_init_array+0x3c>)
 801231e:	1b64      	subs	r4, r4, r5
 8012320:	10a4      	asrs	r4, r4, #2
 8012322:	2600      	movs	r6, #0
 8012324:	42a6      	cmp	r6, r4
 8012326:	d109      	bne.n	801233c <__libc_init_array+0x24>
 8012328:	4d0b      	ldr	r5, [pc, #44]	@ (8012358 <__libc_init_array+0x40>)
 801232a:	4c0c      	ldr	r4, [pc, #48]	@ (801235c <__libc_init_array+0x44>)
 801232c:	f003 fe50 	bl	8015fd0 <_init>
 8012330:	1b64      	subs	r4, r4, r5
 8012332:	10a4      	asrs	r4, r4, #2
 8012334:	2600      	movs	r6, #0
 8012336:	42a6      	cmp	r6, r4
 8012338:	d105      	bne.n	8012346 <__libc_init_array+0x2e>
 801233a:	bd70      	pop	{r4, r5, r6, pc}
 801233c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012340:	4798      	blx	r3
 8012342:	3601      	adds	r6, #1
 8012344:	e7ee      	b.n	8012324 <__libc_init_array+0xc>
 8012346:	f855 3b04 	ldr.w	r3, [r5], #4
 801234a:	4798      	blx	r3
 801234c:	3601      	adds	r6, #1
 801234e:	e7f2      	b.n	8012336 <__libc_init_array+0x1e>
 8012350:	0801771c 	.word	0x0801771c
 8012354:	0801771c 	.word	0x0801771c
 8012358:	0801771c 	.word	0x0801771c
 801235c:	08017720 	.word	0x08017720

08012360 <__retarget_lock_init_recursive>:
 8012360:	4770      	bx	lr

08012362 <__retarget_lock_acquire_recursive>:
 8012362:	4770      	bx	lr

08012364 <__retarget_lock_release_recursive>:
 8012364:	4770      	bx	lr

08012366 <memcpy>:
 8012366:	440a      	add	r2, r1
 8012368:	4291      	cmp	r1, r2
 801236a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801236e:	d100      	bne.n	8012372 <memcpy+0xc>
 8012370:	4770      	bx	lr
 8012372:	b510      	push	{r4, lr}
 8012374:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012378:	f803 4f01 	strb.w	r4, [r3, #1]!
 801237c:	4291      	cmp	r1, r2
 801237e:	d1f9      	bne.n	8012374 <memcpy+0xe>
 8012380:	bd10      	pop	{r4, pc}
	...

08012384 <nanf>:
 8012384:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801238c <nanf+0x8>
 8012388:	4770      	bx	lr
 801238a:	bf00      	nop
 801238c:	7fc00000 	.word	0x7fc00000

08012390 <quorem>:
 8012390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012394:	6903      	ldr	r3, [r0, #16]
 8012396:	690c      	ldr	r4, [r1, #16]
 8012398:	42a3      	cmp	r3, r4
 801239a:	4607      	mov	r7, r0
 801239c:	db7e      	blt.n	801249c <quorem+0x10c>
 801239e:	3c01      	subs	r4, #1
 80123a0:	f101 0814 	add.w	r8, r1, #20
 80123a4:	00a3      	lsls	r3, r4, #2
 80123a6:	f100 0514 	add.w	r5, r0, #20
 80123aa:	9300      	str	r3, [sp, #0]
 80123ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80123b0:	9301      	str	r3, [sp, #4]
 80123b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80123b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80123ba:	3301      	adds	r3, #1
 80123bc:	429a      	cmp	r2, r3
 80123be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80123c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80123c6:	d32e      	bcc.n	8012426 <quorem+0x96>
 80123c8:	f04f 0a00 	mov.w	sl, #0
 80123cc:	46c4      	mov	ip, r8
 80123ce:	46ae      	mov	lr, r5
 80123d0:	46d3      	mov	fp, sl
 80123d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80123d6:	b298      	uxth	r0, r3
 80123d8:	fb06 a000 	mla	r0, r6, r0, sl
 80123dc:	0c02      	lsrs	r2, r0, #16
 80123de:	0c1b      	lsrs	r3, r3, #16
 80123e0:	fb06 2303 	mla	r3, r6, r3, r2
 80123e4:	f8de 2000 	ldr.w	r2, [lr]
 80123e8:	b280      	uxth	r0, r0
 80123ea:	b292      	uxth	r2, r2
 80123ec:	1a12      	subs	r2, r2, r0
 80123ee:	445a      	add	r2, fp
 80123f0:	f8de 0000 	ldr.w	r0, [lr]
 80123f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80123f8:	b29b      	uxth	r3, r3
 80123fa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80123fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012402:	b292      	uxth	r2, r2
 8012404:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012408:	45e1      	cmp	r9, ip
 801240a:	f84e 2b04 	str.w	r2, [lr], #4
 801240e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012412:	d2de      	bcs.n	80123d2 <quorem+0x42>
 8012414:	9b00      	ldr	r3, [sp, #0]
 8012416:	58eb      	ldr	r3, [r5, r3]
 8012418:	b92b      	cbnz	r3, 8012426 <quorem+0x96>
 801241a:	9b01      	ldr	r3, [sp, #4]
 801241c:	3b04      	subs	r3, #4
 801241e:	429d      	cmp	r5, r3
 8012420:	461a      	mov	r2, r3
 8012422:	d32f      	bcc.n	8012484 <quorem+0xf4>
 8012424:	613c      	str	r4, [r7, #16]
 8012426:	4638      	mov	r0, r7
 8012428:	f001 f954 	bl	80136d4 <__mcmp>
 801242c:	2800      	cmp	r0, #0
 801242e:	db25      	blt.n	801247c <quorem+0xec>
 8012430:	4629      	mov	r1, r5
 8012432:	2000      	movs	r0, #0
 8012434:	f858 2b04 	ldr.w	r2, [r8], #4
 8012438:	f8d1 c000 	ldr.w	ip, [r1]
 801243c:	fa1f fe82 	uxth.w	lr, r2
 8012440:	fa1f f38c 	uxth.w	r3, ip
 8012444:	eba3 030e 	sub.w	r3, r3, lr
 8012448:	4403      	add	r3, r0
 801244a:	0c12      	lsrs	r2, r2, #16
 801244c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012450:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012454:	b29b      	uxth	r3, r3
 8012456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801245a:	45c1      	cmp	r9, r8
 801245c:	f841 3b04 	str.w	r3, [r1], #4
 8012460:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012464:	d2e6      	bcs.n	8012434 <quorem+0xa4>
 8012466:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801246a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801246e:	b922      	cbnz	r2, 801247a <quorem+0xea>
 8012470:	3b04      	subs	r3, #4
 8012472:	429d      	cmp	r5, r3
 8012474:	461a      	mov	r2, r3
 8012476:	d30b      	bcc.n	8012490 <quorem+0x100>
 8012478:	613c      	str	r4, [r7, #16]
 801247a:	3601      	adds	r6, #1
 801247c:	4630      	mov	r0, r6
 801247e:	b003      	add	sp, #12
 8012480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012484:	6812      	ldr	r2, [r2, #0]
 8012486:	3b04      	subs	r3, #4
 8012488:	2a00      	cmp	r2, #0
 801248a:	d1cb      	bne.n	8012424 <quorem+0x94>
 801248c:	3c01      	subs	r4, #1
 801248e:	e7c6      	b.n	801241e <quorem+0x8e>
 8012490:	6812      	ldr	r2, [r2, #0]
 8012492:	3b04      	subs	r3, #4
 8012494:	2a00      	cmp	r2, #0
 8012496:	d1ef      	bne.n	8012478 <quorem+0xe8>
 8012498:	3c01      	subs	r4, #1
 801249a:	e7ea      	b.n	8012472 <quorem+0xe2>
 801249c:	2000      	movs	r0, #0
 801249e:	e7ee      	b.n	801247e <quorem+0xee>

080124a0 <_dtoa_r>:
 80124a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124a4:	ed2d 8b02 	vpush	{d8}
 80124a8:	69c7      	ldr	r7, [r0, #28]
 80124aa:	b091      	sub	sp, #68	@ 0x44
 80124ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80124b0:	ec55 4b10 	vmov	r4, r5, d0
 80124b4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80124b6:	9107      	str	r1, [sp, #28]
 80124b8:	4681      	mov	r9, r0
 80124ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80124bc:	930d      	str	r3, [sp, #52]	@ 0x34
 80124be:	b97f      	cbnz	r7, 80124e0 <_dtoa_r+0x40>
 80124c0:	2010      	movs	r0, #16
 80124c2:	f000 fd95 	bl	8012ff0 <malloc>
 80124c6:	4602      	mov	r2, r0
 80124c8:	f8c9 001c 	str.w	r0, [r9, #28]
 80124cc:	b920      	cbnz	r0, 80124d8 <_dtoa_r+0x38>
 80124ce:	4ba0      	ldr	r3, [pc, #640]	@ (8012750 <_dtoa_r+0x2b0>)
 80124d0:	21ef      	movs	r1, #239	@ 0xef
 80124d2:	48a0      	ldr	r0, [pc, #640]	@ (8012754 <_dtoa_r+0x2b4>)
 80124d4:	f003 f8c8 	bl	8015668 <__assert_func>
 80124d8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80124dc:	6007      	str	r7, [r0, #0]
 80124de:	60c7      	str	r7, [r0, #12]
 80124e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80124e4:	6819      	ldr	r1, [r3, #0]
 80124e6:	b159      	cbz	r1, 8012500 <_dtoa_r+0x60>
 80124e8:	685a      	ldr	r2, [r3, #4]
 80124ea:	604a      	str	r2, [r1, #4]
 80124ec:	2301      	movs	r3, #1
 80124ee:	4093      	lsls	r3, r2
 80124f0:	608b      	str	r3, [r1, #8]
 80124f2:	4648      	mov	r0, r9
 80124f4:	f000 fe72 	bl	80131dc <_Bfree>
 80124f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80124fc:	2200      	movs	r2, #0
 80124fe:	601a      	str	r2, [r3, #0]
 8012500:	1e2b      	subs	r3, r5, #0
 8012502:	bfbb      	ittet	lt
 8012504:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012508:	9303      	strlt	r3, [sp, #12]
 801250a:	2300      	movge	r3, #0
 801250c:	2201      	movlt	r2, #1
 801250e:	bfac      	ite	ge
 8012510:	6033      	strge	r3, [r6, #0]
 8012512:	6032      	strlt	r2, [r6, #0]
 8012514:	4b90      	ldr	r3, [pc, #576]	@ (8012758 <_dtoa_r+0x2b8>)
 8012516:	9e03      	ldr	r6, [sp, #12]
 8012518:	43b3      	bics	r3, r6
 801251a:	d110      	bne.n	801253e <_dtoa_r+0x9e>
 801251c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801251e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012522:	6013      	str	r3, [r2, #0]
 8012524:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012528:	4323      	orrs	r3, r4
 801252a:	f000 84e6 	beq.w	8012efa <_dtoa_r+0xa5a>
 801252e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012530:	4f8a      	ldr	r7, [pc, #552]	@ (801275c <_dtoa_r+0x2bc>)
 8012532:	2b00      	cmp	r3, #0
 8012534:	f000 84e8 	beq.w	8012f08 <_dtoa_r+0xa68>
 8012538:	1cfb      	adds	r3, r7, #3
 801253a:	f000 bce3 	b.w	8012f04 <_dtoa_r+0xa64>
 801253e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012542:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801254a:	d10a      	bne.n	8012562 <_dtoa_r+0xc2>
 801254c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801254e:	2301      	movs	r3, #1
 8012550:	6013      	str	r3, [r2, #0]
 8012552:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012554:	b113      	cbz	r3, 801255c <_dtoa_r+0xbc>
 8012556:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012558:	4b81      	ldr	r3, [pc, #516]	@ (8012760 <_dtoa_r+0x2c0>)
 801255a:	6013      	str	r3, [r2, #0]
 801255c:	4f81      	ldr	r7, [pc, #516]	@ (8012764 <_dtoa_r+0x2c4>)
 801255e:	f000 bcd3 	b.w	8012f08 <_dtoa_r+0xa68>
 8012562:	aa0e      	add	r2, sp, #56	@ 0x38
 8012564:	a90f      	add	r1, sp, #60	@ 0x3c
 8012566:	4648      	mov	r0, r9
 8012568:	eeb0 0b48 	vmov.f64	d0, d8
 801256c:	f001 f9d2 	bl	8013914 <__d2b>
 8012570:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8012574:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012576:	9001      	str	r0, [sp, #4]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d045      	beq.n	8012608 <_dtoa_r+0x168>
 801257c:	eeb0 7b48 	vmov.f64	d7, d8
 8012580:	ee18 1a90 	vmov	r1, s17
 8012584:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012588:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801258c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012590:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012594:	2500      	movs	r5, #0
 8012596:	ee07 1a90 	vmov	s15, r1
 801259a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801259e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012738 <_dtoa_r+0x298>
 80125a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80125a6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012740 <_dtoa_r+0x2a0>
 80125aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80125ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012748 <_dtoa_r+0x2a8>
 80125b2:	ee07 3a90 	vmov	s15, r3
 80125b6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80125ba:	eeb0 7b46 	vmov.f64	d7, d6
 80125be:	eea4 7b05 	vfma.f64	d7, d4, d5
 80125c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80125c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80125ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ce:	ee16 8a90 	vmov	r8, s13
 80125d2:	d508      	bpl.n	80125e6 <_dtoa_r+0x146>
 80125d4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80125d8:	eeb4 6b47 	vcmp.f64	d6, d7
 80125dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e0:	bf18      	it	ne
 80125e2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 80125e6:	f1b8 0f16 	cmp.w	r8, #22
 80125ea:	d82b      	bhi.n	8012644 <_dtoa_r+0x1a4>
 80125ec:	495e      	ldr	r1, [pc, #376]	@ (8012768 <_dtoa_r+0x2c8>)
 80125ee:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80125f2:	ed91 7b00 	vldr	d7, [r1]
 80125f6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80125fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125fe:	d501      	bpl.n	8012604 <_dtoa_r+0x164>
 8012600:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012604:	2100      	movs	r1, #0
 8012606:	e01e      	b.n	8012646 <_dtoa_r+0x1a6>
 8012608:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801260a:	4413      	add	r3, r2
 801260c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012610:	2920      	cmp	r1, #32
 8012612:	bfc1      	itttt	gt
 8012614:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012618:	408e      	lslgt	r6, r1
 801261a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801261e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012622:	bfd6      	itet	le
 8012624:	f1c1 0120 	rsble	r1, r1, #32
 8012628:	4331      	orrgt	r1, r6
 801262a:	fa04 f101 	lslle.w	r1, r4, r1
 801262e:	ee07 1a90 	vmov	s15, r1
 8012632:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012636:	3b01      	subs	r3, #1
 8012638:	ee17 1a90 	vmov	r1, s15
 801263c:	2501      	movs	r5, #1
 801263e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012642:	e7a8      	b.n	8012596 <_dtoa_r+0xf6>
 8012644:	2101      	movs	r1, #1
 8012646:	1ad2      	subs	r2, r2, r3
 8012648:	1e53      	subs	r3, r2, #1
 801264a:	9306      	str	r3, [sp, #24]
 801264c:	bf45      	ittet	mi
 801264e:	f1c2 0301 	rsbmi	r3, r2, #1
 8012652:	9304      	strmi	r3, [sp, #16]
 8012654:	2300      	movpl	r3, #0
 8012656:	2300      	movmi	r3, #0
 8012658:	bf4c      	ite	mi
 801265a:	9306      	strmi	r3, [sp, #24]
 801265c:	9304      	strpl	r3, [sp, #16]
 801265e:	f1b8 0f00 	cmp.w	r8, #0
 8012662:	910c      	str	r1, [sp, #48]	@ 0x30
 8012664:	db18      	blt.n	8012698 <_dtoa_r+0x1f8>
 8012666:	9b06      	ldr	r3, [sp, #24]
 8012668:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801266c:	4443      	add	r3, r8
 801266e:	9306      	str	r3, [sp, #24]
 8012670:	2300      	movs	r3, #0
 8012672:	9a07      	ldr	r2, [sp, #28]
 8012674:	2a09      	cmp	r2, #9
 8012676:	d845      	bhi.n	8012704 <_dtoa_r+0x264>
 8012678:	2a05      	cmp	r2, #5
 801267a:	bfc4      	itt	gt
 801267c:	3a04      	subgt	r2, #4
 801267e:	9207      	strgt	r2, [sp, #28]
 8012680:	9a07      	ldr	r2, [sp, #28]
 8012682:	f1a2 0202 	sub.w	r2, r2, #2
 8012686:	bfcc      	ite	gt
 8012688:	2400      	movgt	r4, #0
 801268a:	2401      	movle	r4, #1
 801268c:	2a03      	cmp	r2, #3
 801268e:	d844      	bhi.n	801271a <_dtoa_r+0x27a>
 8012690:	e8df f002 	tbb	[pc, r2]
 8012694:	0b173634 	.word	0x0b173634
 8012698:	9b04      	ldr	r3, [sp, #16]
 801269a:	2200      	movs	r2, #0
 801269c:	eba3 0308 	sub.w	r3, r3, r8
 80126a0:	9304      	str	r3, [sp, #16]
 80126a2:	920a      	str	r2, [sp, #40]	@ 0x28
 80126a4:	f1c8 0300 	rsb	r3, r8, #0
 80126a8:	e7e3      	b.n	8012672 <_dtoa_r+0x1d2>
 80126aa:	2201      	movs	r2, #1
 80126ac:	9208      	str	r2, [sp, #32]
 80126ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80126b0:	eb08 0b02 	add.w	fp, r8, r2
 80126b4:	f10b 0a01 	add.w	sl, fp, #1
 80126b8:	4652      	mov	r2, sl
 80126ba:	2a01      	cmp	r2, #1
 80126bc:	bfb8      	it	lt
 80126be:	2201      	movlt	r2, #1
 80126c0:	e006      	b.n	80126d0 <_dtoa_r+0x230>
 80126c2:	2201      	movs	r2, #1
 80126c4:	9208      	str	r2, [sp, #32]
 80126c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80126c8:	2a00      	cmp	r2, #0
 80126ca:	dd29      	ble.n	8012720 <_dtoa_r+0x280>
 80126cc:	4693      	mov	fp, r2
 80126ce:	4692      	mov	sl, r2
 80126d0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80126d4:	2100      	movs	r1, #0
 80126d6:	2004      	movs	r0, #4
 80126d8:	f100 0614 	add.w	r6, r0, #20
 80126dc:	4296      	cmp	r6, r2
 80126de:	d926      	bls.n	801272e <_dtoa_r+0x28e>
 80126e0:	6079      	str	r1, [r7, #4]
 80126e2:	4648      	mov	r0, r9
 80126e4:	9305      	str	r3, [sp, #20]
 80126e6:	f000 fd39 	bl	801315c <_Balloc>
 80126ea:	9b05      	ldr	r3, [sp, #20]
 80126ec:	4607      	mov	r7, r0
 80126ee:	2800      	cmp	r0, #0
 80126f0:	d13e      	bne.n	8012770 <_dtoa_r+0x2d0>
 80126f2:	4b1e      	ldr	r3, [pc, #120]	@ (801276c <_dtoa_r+0x2cc>)
 80126f4:	4602      	mov	r2, r0
 80126f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80126fa:	e6ea      	b.n	80124d2 <_dtoa_r+0x32>
 80126fc:	2200      	movs	r2, #0
 80126fe:	e7e1      	b.n	80126c4 <_dtoa_r+0x224>
 8012700:	2200      	movs	r2, #0
 8012702:	e7d3      	b.n	80126ac <_dtoa_r+0x20c>
 8012704:	2401      	movs	r4, #1
 8012706:	2200      	movs	r2, #0
 8012708:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801270c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8012710:	2100      	movs	r1, #0
 8012712:	46da      	mov	sl, fp
 8012714:	2212      	movs	r2, #18
 8012716:	9109      	str	r1, [sp, #36]	@ 0x24
 8012718:	e7da      	b.n	80126d0 <_dtoa_r+0x230>
 801271a:	2201      	movs	r2, #1
 801271c:	9208      	str	r2, [sp, #32]
 801271e:	e7f5      	b.n	801270c <_dtoa_r+0x26c>
 8012720:	f04f 0b01 	mov.w	fp, #1
 8012724:	46da      	mov	sl, fp
 8012726:	465a      	mov	r2, fp
 8012728:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801272c:	e7d0      	b.n	80126d0 <_dtoa_r+0x230>
 801272e:	3101      	adds	r1, #1
 8012730:	0040      	lsls	r0, r0, #1
 8012732:	e7d1      	b.n	80126d8 <_dtoa_r+0x238>
 8012734:	f3af 8000 	nop.w
 8012738:	636f4361 	.word	0x636f4361
 801273c:	3fd287a7 	.word	0x3fd287a7
 8012740:	8b60c8b3 	.word	0x8b60c8b3
 8012744:	3fc68a28 	.word	0x3fc68a28
 8012748:	509f79fb 	.word	0x509f79fb
 801274c:	3fd34413 	.word	0x3fd34413
 8012750:	08017314 	.word	0x08017314
 8012754:	0801732b 	.word	0x0801732b
 8012758:	7ff00000 	.word	0x7ff00000
 801275c:	08017310 	.word	0x08017310
 8012760:	08017417 	.word	0x08017417
 8012764:	08017416 	.word	0x08017416
 8012768:	080174f8 	.word	0x080174f8
 801276c:	08017383 	.word	0x08017383
 8012770:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8012774:	f1ba 0f0e 	cmp.w	sl, #14
 8012778:	6010      	str	r0, [r2, #0]
 801277a:	d86e      	bhi.n	801285a <_dtoa_r+0x3ba>
 801277c:	2c00      	cmp	r4, #0
 801277e:	d06c      	beq.n	801285a <_dtoa_r+0x3ba>
 8012780:	f1b8 0f00 	cmp.w	r8, #0
 8012784:	f340 80b4 	ble.w	80128f0 <_dtoa_r+0x450>
 8012788:	4ac8      	ldr	r2, [pc, #800]	@ (8012aac <_dtoa_r+0x60c>)
 801278a:	f008 010f 	and.w	r1, r8, #15
 801278e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012792:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8012796:	ed92 7b00 	vldr	d7, [r2]
 801279a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801279e:	f000 809b 	beq.w	80128d8 <_dtoa_r+0x438>
 80127a2:	4ac3      	ldr	r2, [pc, #780]	@ (8012ab0 <_dtoa_r+0x610>)
 80127a4:	ed92 6b08 	vldr	d6, [r2, #32]
 80127a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80127ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80127b0:	f001 010f 	and.w	r1, r1, #15
 80127b4:	2203      	movs	r2, #3
 80127b6:	48be      	ldr	r0, [pc, #760]	@ (8012ab0 <_dtoa_r+0x610>)
 80127b8:	2900      	cmp	r1, #0
 80127ba:	f040 808f 	bne.w	80128dc <_dtoa_r+0x43c>
 80127be:	ed9d 6b02 	vldr	d6, [sp, #8]
 80127c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80127c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80127ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80127cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80127d0:	2900      	cmp	r1, #0
 80127d2:	f000 80b3 	beq.w	801293c <_dtoa_r+0x49c>
 80127d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80127da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80127de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127e2:	f140 80ab 	bpl.w	801293c <_dtoa_r+0x49c>
 80127e6:	f1ba 0f00 	cmp.w	sl, #0
 80127ea:	f000 80a7 	beq.w	801293c <_dtoa_r+0x49c>
 80127ee:	f1bb 0f00 	cmp.w	fp, #0
 80127f2:	dd30      	ble.n	8012856 <_dtoa_r+0x3b6>
 80127f4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80127f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80127fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012800:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8012804:	9105      	str	r1, [sp, #20]
 8012806:	3201      	adds	r2, #1
 8012808:	465c      	mov	r4, fp
 801280a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801280e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012812:	ee07 2a90 	vmov	s15, r2
 8012816:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801281a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801281e:	ee15 2a90 	vmov	r2, s11
 8012822:	ec51 0b15 	vmov	r0, r1, d5
 8012826:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801282a:	2c00      	cmp	r4, #0
 801282c:	f040 808a 	bne.w	8012944 <_dtoa_r+0x4a4>
 8012830:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012834:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012838:	ec41 0b17 	vmov	d7, r0, r1
 801283c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012844:	f300 826a 	bgt.w	8012d1c <_dtoa_r+0x87c>
 8012848:	eeb1 7b47 	vneg.f64	d7, d7
 801284c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012854:	d423      	bmi.n	801289e <_dtoa_r+0x3fe>
 8012856:	ed8d 8b02 	vstr	d8, [sp, #8]
 801285a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801285c:	2a00      	cmp	r2, #0
 801285e:	f2c0 8129 	blt.w	8012ab4 <_dtoa_r+0x614>
 8012862:	f1b8 0f0e 	cmp.w	r8, #14
 8012866:	f300 8125 	bgt.w	8012ab4 <_dtoa_r+0x614>
 801286a:	4b90      	ldr	r3, [pc, #576]	@ (8012aac <_dtoa_r+0x60c>)
 801286c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012870:	ed93 6b00 	vldr	d6, [r3]
 8012874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012876:	2b00      	cmp	r3, #0
 8012878:	f280 80c8 	bge.w	8012a0c <_dtoa_r+0x56c>
 801287c:	f1ba 0f00 	cmp.w	sl, #0
 8012880:	f300 80c4 	bgt.w	8012a0c <_dtoa_r+0x56c>
 8012884:	d10b      	bne.n	801289e <_dtoa_r+0x3fe>
 8012886:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801288a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801288e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012892:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801289a:	f2c0 823c 	blt.w	8012d16 <_dtoa_r+0x876>
 801289e:	2400      	movs	r4, #0
 80128a0:	4625      	mov	r5, r4
 80128a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128a4:	43db      	mvns	r3, r3
 80128a6:	9305      	str	r3, [sp, #20]
 80128a8:	463e      	mov	r6, r7
 80128aa:	f04f 0800 	mov.w	r8, #0
 80128ae:	4621      	mov	r1, r4
 80128b0:	4648      	mov	r0, r9
 80128b2:	f000 fc93 	bl	80131dc <_Bfree>
 80128b6:	2d00      	cmp	r5, #0
 80128b8:	f000 80a2 	beq.w	8012a00 <_dtoa_r+0x560>
 80128bc:	f1b8 0f00 	cmp.w	r8, #0
 80128c0:	d005      	beq.n	80128ce <_dtoa_r+0x42e>
 80128c2:	45a8      	cmp	r8, r5
 80128c4:	d003      	beq.n	80128ce <_dtoa_r+0x42e>
 80128c6:	4641      	mov	r1, r8
 80128c8:	4648      	mov	r0, r9
 80128ca:	f000 fc87 	bl	80131dc <_Bfree>
 80128ce:	4629      	mov	r1, r5
 80128d0:	4648      	mov	r0, r9
 80128d2:	f000 fc83 	bl	80131dc <_Bfree>
 80128d6:	e093      	b.n	8012a00 <_dtoa_r+0x560>
 80128d8:	2202      	movs	r2, #2
 80128da:	e76c      	b.n	80127b6 <_dtoa_r+0x316>
 80128dc:	07cc      	lsls	r4, r1, #31
 80128de:	d504      	bpl.n	80128ea <_dtoa_r+0x44a>
 80128e0:	ed90 6b00 	vldr	d6, [r0]
 80128e4:	3201      	adds	r2, #1
 80128e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80128ea:	1049      	asrs	r1, r1, #1
 80128ec:	3008      	adds	r0, #8
 80128ee:	e763      	b.n	80127b8 <_dtoa_r+0x318>
 80128f0:	d022      	beq.n	8012938 <_dtoa_r+0x498>
 80128f2:	f1c8 0100 	rsb	r1, r8, #0
 80128f6:	4a6d      	ldr	r2, [pc, #436]	@ (8012aac <_dtoa_r+0x60c>)
 80128f8:	f001 000f 	and.w	r0, r1, #15
 80128fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012900:	ed92 7b00 	vldr	d7, [r2]
 8012904:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012908:	ed8d 7b02 	vstr	d7, [sp, #8]
 801290c:	4868      	ldr	r0, [pc, #416]	@ (8012ab0 <_dtoa_r+0x610>)
 801290e:	1109      	asrs	r1, r1, #4
 8012910:	2400      	movs	r4, #0
 8012912:	2202      	movs	r2, #2
 8012914:	b929      	cbnz	r1, 8012922 <_dtoa_r+0x482>
 8012916:	2c00      	cmp	r4, #0
 8012918:	f43f af57 	beq.w	80127ca <_dtoa_r+0x32a>
 801291c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012920:	e753      	b.n	80127ca <_dtoa_r+0x32a>
 8012922:	07ce      	lsls	r6, r1, #31
 8012924:	d505      	bpl.n	8012932 <_dtoa_r+0x492>
 8012926:	ed90 6b00 	vldr	d6, [r0]
 801292a:	3201      	adds	r2, #1
 801292c:	2401      	movs	r4, #1
 801292e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012932:	1049      	asrs	r1, r1, #1
 8012934:	3008      	adds	r0, #8
 8012936:	e7ed      	b.n	8012914 <_dtoa_r+0x474>
 8012938:	2202      	movs	r2, #2
 801293a:	e746      	b.n	80127ca <_dtoa_r+0x32a>
 801293c:	f8cd 8014 	str.w	r8, [sp, #20]
 8012940:	4654      	mov	r4, sl
 8012942:	e762      	b.n	801280a <_dtoa_r+0x36a>
 8012944:	4a59      	ldr	r2, [pc, #356]	@ (8012aac <_dtoa_r+0x60c>)
 8012946:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801294a:	ed12 4b02 	vldr	d4, [r2, #-8]
 801294e:	9a08      	ldr	r2, [sp, #32]
 8012950:	ec41 0b17 	vmov	d7, r0, r1
 8012954:	443c      	add	r4, r7
 8012956:	b34a      	cbz	r2, 80129ac <_dtoa_r+0x50c>
 8012958:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801295c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012960:	463e      	mov	r6, r7
 8012962:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012966:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801296a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801296e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012972:	ee14 2a90 	vmov	r2, s9
 8012976:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801297a:	3230      	adds	r2, #48	@ 0x30
 801297c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012980:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012988:	f806 2b01 	strb.w	r2, [r6], #1
 801298c:	d438      	bmi.n	8012a00 <_dtoa_r+0x560>
 801298e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012992:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801299a:	d46e      	bmi.n	8012a7a <_dtoa_r+0x5da>
 801299c:	42a6      	cmp	r6, r4
 801299e:	f43f af5a 	beq.w	8012856 <_dtoa_r+0x3b6>
 80129a2:	ee27 7b03 	vmul.f64	d7, d7, d3
 80129a6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80129aa:	e7e0      	b.n	801296e <_dtoa_r+0x4ce>
 80129ac:	4621      	mov	r1, r4
 80129ae:	463e      	mov	r6, r7
 80129b0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80129b4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80129b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80129bc:	ee14 2a90 	vmov	r2, s9
 80129c0:	3230      	adds	r2, #48	@ 0x30
 80129c2:	f806 2b01 	strb.w	r2, [r6], #1
 80129c6:	42a6      	cmp	r6, r4
 80129c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80129cc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80129d0:	d119      	bne.n	8012a06 <_dtoa_r+0x566>
 80129d2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80129d6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80129da:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80129de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e2:	dc4a      	bgt.n	8012a7a <_dtoa_r+0x5da>
 80129e4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80129e8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80129ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f0:	f57f af31 	bpl.w	8012856 <_dtoa_r+0x3b6>
 80129f4:	460e      	mov	r6, r1
 80129f6:	3901      	subs	r1, #1
 80129f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80129fc:	2b30      	cmp	r3, #48	@ 0x30
 80129fe:	d0f9      	beq.n	80129f4 <_dtoa_r+0x554>
 8012a00:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012a04:	e027      	b.n	8012a56 <_dtoa_r+0x5b6>
 8012a06:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012a0a:	e7d5      	b.n	80129b8 <_dtoa_r+0x518>
 8012a0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a10:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012a14:	463e      	mov	r6, r7
 8012a16:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012a1a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012a1e:	ee15 3a10 	vmov	r3, s10
 8012a22:	3330      	adds	r3, #48	@ 0x30
 8012a24:	f806 3b01 	strb.w	r3, [r6], #1
 8012a28:	1bf3      	subs	r3, r6, r7
 8012a2a:	459a      	cmp	sl, r3
 8012a2c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012a30:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012a34:	d132      	bne.n	8012a9c <_dtoa_r+0x5fc>
 8012a36:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012a3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a42:	dc18      	bgt.n	8012a76 <_dtoa_r+0x5d6>
 8012a44:	eeb4 7b46 	vcmp.f64	d7, d6
 8012a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a4c:	d103      	bne.n	8012a56 <_dtoa_r+0x5b6>
 8012a4e:	ee15 3a10 	vmov	r3, s10
 8012a52:	07db      	lsls	r3, r3, #31
 8012a54:	d40f      	bmi.n	8012a76 <_dtoa_r+0x5d6>
 8012a56:	9901      	ldr	r1, [sp, #4]
 8012a58:	4648      	mov	r0, r9
 8012a5a:	f000 fbbf 	bl	80131dc <_Bfree>
 8012a5e:	2300      	movs	r3, #0
 8012a60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012a62:	7033      	strb	r3, [r6, #0]
 8012a64:	f108 0301 	add.w	r3, r8, #1
 8012a68:	6013      	str	r3, [r2, #0]
 8012a6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	f000 824b 	beq.w	8012f08 <_dtoa_r+0xa68>
 8012a72:	601e      	str	r6, [r3, #0]
 8012a74:	e248      	b.n	8012f08 <_dtoa_r+0xa68>
 8012a76:	f8cd 8014 	str.w	r8, [sp, #20]
 8012a7a:	4633      	mov	r3, r6
 8012a7c:	461e      	mov	r6, r3
 8012a7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a82:	2a39      	cmp	r2, #57	@ 0x39
 8012a84:	d106      	bne.n	8012a94 <_dtoa_r+0x5f4>
 8012a86:	429f      	cmp	r7, r3
 8012a88:	d1f8      	bne.n	8012a7c <_dtoa_r+0x5dc>
 8012a8a:	9a05      	ldr	r2, [sp, #20]
 8012a8c:	3201      	adds	r2, #1
 8012a8e:	9205      	str	r2, [sp, #20]
 8012a90:	2230      	movs	r2, #48	@ 0x30
 8012a92:	703a      	strb	r2, [r7, #0]
 8012a94:	781a      	ldrb	r2, [r3, #0]
 8012a96:	3201      	adds	r2, #1
 8012a98:	701a      	strb	r2, [r3, #0]
 8012a9a:	e7b1      	b.n	8012a00 <_dtoa_r+0x560>
 8012a9c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012aa0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa8:	d1b5      	bne.n	8012a16 <_dtoa_r+0x576>
 8012aaa:	e7d4      	b.n	8012a56 <_dtoa_r+0x5b6>
 8012aac:	080174f8 	.word	0x080174f8
 8012ab0:	080174d0 	.word	0x080174d0
 8012ab4:	9908      	ldr	r1, [sp, #32]
 8012ab6:	2900      	cmp	r1, #0
 8012ab8:	f000 80e9 	beq.w	8012c8e <_dtoa_r+0x7ee>
 8012abc:	9907      	ldr	r1, [sp, #28]
 8012abe:	2901      	cmp	r1, #1
 8012ac0:	f300 80cb 	bgt.w	8012c5a <_dtoa_r+0x7ba>
 8012ac4:	2d00      	cmp	r5, #0
 8012ac6:	f000 80c4 	beq.w	8012c52 <_dtoa_r+0x7b2>
 8012aca:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012ace:	9e04      	ldr	r6, [sp, #16]
 8012ad0:	461c      	mov	r4, r3
 8012ad2:	9305      	str	r3, [sp, #20]
 8012ad4:	9b04      	ldr	r3, [sp, #16]
 8012ad6:	4413      	add	r3, r2
 8012ad8:	9304      	str	r3, [sp, #16]
 8012ada:	9b06      	ldr	r3, [sp, #24]
 8012adc:	2101      	movs	r1, #1
 8012ade:	4413      	add	r3, r2
 8012ae0:	4648      	mov	r0, r9
 8012ae2:	9306      	str	r3, [sp, #24]
 8012ae4:	f000 fc78 	bl	80133d8 <__i2b>
 8012ae8:	9b05      	ldr	r3, [sp, #20]
 8012aea:	4605      	mov	r5, r0
 8012aec:	b166      	cbz	r6, 8012b08 <_dtoa_r+0x668>
 8012aee:	9a06      	ldr	r2, [sp, #24]
 8012af0:	2a00      	cmp	r2, #0
 8012af2:	dd09      	ble.n	8012b08 <_dtoa_r+0x668>
 8012af4:	42b2      	cmp	r2, r6
 8012af6:	9904      	ldr	r1, [sp, #16]
 8012af8:	bfa8      	it	ge
 8012afa:	4632      	movge	r2, r6
 8012afc:	1a89      	subs	r1, r1, r2
 8012afe:	9104      	str	r1, [sp, #16]
 8012b00:	9906      	ldr	r1, [sp, #24]
 8012b02:	1ab6      	subs	r6, r6, r2
 8012b04:	1a8a      	subs	r2, r1, r2
 8012b06:	9206      	str	r2, [sp, #24]
 8012b08:	b30b      	cbz	r3, 8012b4e <_dtoa_r+0x6ae>
 8012b0a:	9a08      	ldr	r2, [sp, #32]
 8012b0c:	2a00      	cmp	r2, #0
 8012b0e:	f000 80c5 	beq.w	8012c9c <_dtoa_r+0x7fc>
 8012b12:	2c00      	cmp	r4, #0
 8012b14:	f000 80bf 	beq.w	8012c96 <_dtoa_r+0x7f6>
 8012b18:	4629      	mov	r1, r5
 8012b1a:	4622      	mov	r2, r4
 8012b1c:	4648      	mov	r0, r9
 8012b1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b20:	f000 fd12 	bl	8013548 <__pow5mult>
 8012b24:	9a01      	ldr	r2, [sp, #4]
 8012b26:	4601      	mov	r1, r0
 8012b28:	4605      	mov	r5, r0
 8012b2a:	4648      	mov	r0, r9
 8012b2c:	f000 fc6a 	bl	8013404 <__multiply>
 8012b30:	9901      	ldr	r1, [sp, #4]
 8012b32:	9005      	str	r0, [sp, #20]
 8012b34:	4648      	mov	r0, r9
 8012b36:	f000 fb51 	bl	80131dc <_Bfree>
 8012b3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b3c:	1b1b      	subs	r3, r3, r4
 8012b3e:	f000 80b0 	beq.w	8012ca2 <_dtoa_r+0x802>
 8012b42:	9905      	ldr	r1, [sp, #20]
 8012b44:	461a      	mov	r2, r3
 8012b46:	4648      	mov	r0, r9
 8012b48:	f000 fcfe 	bl	8013548 <__pow5mult>
 8012b4c:	9001      	str	r0, [sp, #4]
 8012b4e:	2101      	movs	r1, #1
 8012b50:	4648      	mov	r0, r9
 8012b52:	f000 fc41 	bl	80133d8 <__i2b>
 8012b56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b58:	4604      	mov	r4, r0
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	f000 81da 	beq.w	8012f14 <_dtoa_r+0xa74>
 8012b60:	461a      	mov	r2, r3
 8012b62:	4601      	mov	r1, r0
 8012b64:	4648      	mov	r0, r9
 8012b66:	f000 fcef 	bl	8013548 <__pow5mult>
 8012b6a:	9b07      	ldr	r3, [sp, #28]
 8012b6c:	2b01      	cmp	r3, #1
 8012b6e:	4604      	mov	r4, r0
 8012b70:	f300 80a0 	bgt.w	8012cb4 <_dtoa_r+0x814>
 8012b74:	9b02      	ldr	r3, [sp, #8]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	f040 8096 	bne.w	8012ca8 <_dtoa_r+0x808>
 8012b7c:	9b03      	ldr	r3, [sp, #12]
 8012b7e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012b82:	2a00      	cmp	r2, #0
 8012b84:	f040 8092 	bne.w	8012cac <_dtoa_r+0x80c>
 8012b88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012b8c:	0d12      	lsrs	r2, r2, #20
 8012b8e:	0512      	lsls	r2, r2, #20
 8012b90:	2a00      	cmp	r2, #0
 8012b92:	f000 808d 	beq.w	8012cb0 <_dtoa_r+0x810>
 8012b96:	9b04      	ldr	r3, [sp, #16]
 8012b98:	3301      	adds	r3, #1
 8012b9a:	9304      	str	r3, [sp, #16]
 8012b9c:	9b06      	ldr	r3, [sp, #24]
 8012b9e:	3301      	adds	r3, #1
 8012ba0:	9306      	str	r3, [sp, #24]
 8012ba2:	2301      	movs	r3, #1
 8012ba4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ba6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	f000 81b9 	beq.w	8012f20 <_dtoa_r+0xa80>
 8012bae:	6922      	ldr	r2, [r4, #16]
 8012bb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012bb4:	6910      	ldr	r0, [r2, #16]
 8012bb6:	f000 fbc3 	bl	8013340 <__hi0bits>
 8012bba:	f1c0 0020 	rsb	r0, r0, #32
 8012bbe:	9b06      	ldr	r3, [sp, #24]
 8012bc0:	4418      	add	r0, r3
 8012bc2:	f010 001f 	ands.w	r0, r0, #31
 8012bc6:	f000 8081 	beq.w	8012ccc <_dtoa_r+0x82c>
 8012bca:	f1c0 0220 	rsb	r2, r0, #32
 8012bce:	2a04      	cmp	r2, #4
 8012bd0:	dd73      	ble.n	8012cba <_dtoa_r+0x81a>
 8012bd2:	9b04      	ldr	r3, [sp, #16]
 8012bd4:	f1c0 001c 	rsb	r0, r0, #28
 8012bd8:	4403      	add	r3, r0
 8012bda:	9304      	str	r3, [sp, #16]
 8012bdc:	9b06      	ldr	r3, [sp, #24]
 8012bde:	4406      	add	r6, r0
 8012be0:	4403      	add	r3, r0
 8012be2:	9306      	str	r3, [sp, #24]
 8012be4:	9b04      	ldr	r3, [sp, #16]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	dd05      	ble.n	8012bf6 <_dtoa_r+0x756>
 8012bea:	9901      	ldr	r1, [sp, #4]
 8012bec:	461a      	mov	r2, r3
 8012bee:	4648      	mov	r0, r9
 8012bf0:	f000 fd04 	bl	80135fc <__lshift>
 8012bf4:	9001      	str	r0, [sp, #4]
 8012bf6:	9b06      	ldr	r3, [sp, #24]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	dd05      	ble.n	8012c08 <_dtoa_r+0x768>
 8012bfc:	4621      	mov	r1, r4
 8012bfe:	461a      	mov	r2, r3
 8012c00:	4648      	mov	r0, r9
 8012c02:	f000 fcfb 	bl	80135fc <__lshift>
 8012c06:	4604      	mov	r4, r0
 8012c08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d060      	beq.n	8012cd0 <_dtoa_r+0x830>
 8012c0e:	9801      	ldr	r0, [sp, #4]
 8012c10:	4621      	mov	r1, r4
 8012c12:	f000 fd5f 	bl	80136d4 <__mcmp>
 8012c16:	2800      	cmp	r0, #0
 8012c18:	da5a      	bge.n	8012cd0 <_dtoa_r+0x830>
 8012c1a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8012c1e:	9305      	str	r3, [sp, #20]
 8012c20:	9901      	ldr	r1, [sp, #4]
 8012c22:	2300      	movs	r3, #0
 8012c24:	220a      	movs	r2, #10
 8012c26:	4648      	mov	r0, r9
 8012c28:	f000 fafa 	bl	8013220 <__multadd>
 8012c2c:	9b08      	ldr	r3, [sp, #32]
 8012c2e:	9001      	str	r0, [sp, #4]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	f000 8177 	beq.w	8012f24 <_dtoa_r+0xa84>
 8012c36:	4629      	mov	r1, r5
 8012c38:	2300      	movs	r3, #0
 8012c3a:	220a      	movs	r2, #10
 8012c3c:	4648      	mov	r0, r9
 8012c3e:	f000 faef 	bl	8013220 <__multadd>
 8012c42:	f1bb 0f00 	cmp.w	fp, #0
 8012c46:	4605      	mov	r5, r0
 8012c48:	dc6e      	bgt.n	8012d28 <_dtoa_r+0x888>
 8012c4a:	9b07      	ldr	r3, [sp, #28]
 8012c4c:	2b02      	cmp	r3, #2
 8012c4e:	dc48      	bgt.n	8012ce2 <_dtoa_r+0x842>
 8012c50:	e06a      	b.n	8012d28 <_dtoa_r+0x888>
 8012c52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012c54:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012c58:	e739      	b.n	8012ace <_dtoa_r+0x62e>
 8012c5a:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8012c5e:	42a3      	cmp	r3, r4
 8012c60:	db07      	blt.n	8012c72 <_dtoa_r+0x7d2>
 8012c62:	f1ba 0f00 	cmp.w	sl, #0
 8012c66:	eba3 0404 	sub.w	r4, r3, r4
 8012c6a:	db0b      	blt.n	8012c84 <_dtoa_r+0x7e4>
 8012c6c:	9e04      	ldr	r6, [sp, #16]
 8012c6e:	4652      	mov	r2, sl
 8012c70:	e72f      	b.n	8012ad2 <_dtoa_r+0x632>
 8012c72:	1ae2      	subs	r2, r4, r3
 8012c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c76:	9e04      	ldr	r6, [sp, #16]
 8012c78:	4413      	add	r3, r2
 8012c7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c7c:	4652      	mov	r2, sl
 8012c7e:	4623      	mov	r3, r4
 8012c80:	2400      	movs	r4, #0
 8012c82:	e726      	b.n	8012ad2 <_dtoa_r+0x632>
 8012c84:	9a04      	ldr	r2, [sp, #16]
 8012c86:	eba2 060a 	sub.w	r6, r2, sl
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	e721      	b.n	8012ad2 <_dtoa_r+0x632>
 8012c8e:	9e04      	ldr	r6, [sp, #16]
 8012c90:	9d08      	ldr	r5, [sp, #32]
 8012c92:	461c      	mov	r4, r3
 8012c94:	e72a      	b.n	8012aec <_dtoa_r+0x64c>
 8012c96:	9a01      	ldr	r2, [sp, #4]
 8012c98:	9205      	str	r2, [sp, #20]
 8012c9a:	e752      	b.n	8012b42 <_dtoa_r+0x6a2>
 8012c9c:	9901      	ldr	r1, [sp, #4]
 8012c9e:	461a      	mov	r2, r3
 8012ca0:	e751      	b.n	8012b46 <_dtoa_r+0x6a6>
 8012ca2:	9b05      	ldr	r3, [sp, #20]
 8012ca4:	9301      	str	r3, [sp, #4]
 8012ca6:	e752      	b.n	8012b4e <_dtoa_r+0x6ae>
 8012ca8:	2300      	movs	r3, #0
 8012caa:	e77b      	b.n	8012ba4 <_dtoa_r+0x704>
 8012cac:	9b02      	ldr	r3, [sp, #8]
 8012cae:	e779      	b.n	8012ba4 <_dtoa_r+0x704>
 8012cb0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012cb2:	e778      	b.n	8012ba6 <_dtoa_r+0x706>
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012cb8:	e779      	b.n	8012bae <_dtoa_r+0x70e>
 8012cba:	d093      	beq.n	8012be4 <_dtoa_r+0x744>
 8012cbc:	9b04      	ldr	r3, [sp, #16]
 8012cbe:	321c      	adds	r2, #28
 8012cc0:	4413      	add	r3, r2
 8012cc2:	9304      	str	r3, [sp, #16]
 8012cc4:	9b06      	ldr	r3, [sp, #24]
 8012cc6:	4416      	add	r6, r2
 8012cc8:	4413      	add	r3, r2
 8012cca:	e78a      	b.n	8012be2 <_dtoa_r+0x742>
 8012ccc:	4602      	mov	r2, r0
 8012cce:	e7f5      	b.n	8012cbc <_dtoa_r+0x81c>
 8012cd0:	f1ba 0f00 	cmp.w	sl, #0
 8012cd4:	f8cd 8014 	str.w	r8, [sp, #20]
 8012cd8:	46d3      	mov	fp, sl
 8012cda:	dc21      	bgt.n	8012d20 <_dtoa_r+0x880>
 8012cdc:	9b07      	ldr	r3, [sp, #28]
 8012cde:	2b02      	cmp	r3, #2
 8012ce0:	dd1e      	ble.n	8012d20 <_dtoa_r+0x880>
 8012ce2:	f1bb 0f00 	cmp.w	fp, #0
 8012ce6:	f47f addc 	bne.w	80128a2 <_dtoa_r+0x402>
 8012cea:	4621      	mov	r1, r4
 8012cec:	465b      	mov	r3, fp
 8012cee:	2205      	movs	r2, #5
 8012cf0:	4648      	mov	r0, r9
 8012cf2:	f000 fa95 	bl	8013220 <__multadd>
 8012cf6:	4601      	mov	r1, r0
 8012cf8:	4604      	mov	r4, r0
 8012cfa:	9801      	ldr	r0, [sp, #4]
 8012cfc:	f000 fcea 	bl	80136d4 <__mcmp>
 8012d00:	2800      	cmp	r0, #0
 8012d02:	f77f adce 	ble.w	80128a2 <_dtoa_r+0x402>
 8012d06:	463e      	mov	r6, r7
 8012d08:	2331      	movs	r3, #49	@ 0x31
 8012d0a:	f806 3b01 	strb.w	r3, [r6], #1
 8012d0e:	9b05      	ldr	r3, [sp, #20]
 8012d10:	3301      	adds	r3, #1
 8012d12:	9305      	str	r3, [sp, #20]
 8012d14:	e5c9      	b.n	80128aa <_dtoa_r+0x40a>
 8012d16:	f8cd 8014 	str.w	r8, [sp, #20]
 8012d1a:	4654      	mov	r4, sl
 8012d1c:	4625      	mov	r5, r4
 8012d1e:	e7f2      	b.n	8012d06 <_dtoa_r+0x866>
 8012d20:	9b08      	ldr	r3, [sp, #32]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	f000 8102 	beq.w	8012f2c <_dtoa_r+0xa8c>
 8012d28:	2e00      	cmp	r6, #0
 8012d2a:	dd05      	ble.n	8012d38 <_dtoa_r+0x898>
 8012d2c:	4629      	mov	r1, r5
 8012d2e:	4632      	mov	r2, r6
 8012d30:	4648      	mov	r0, r9
 8012d32:	f000 fc63 	bl	80135fc <__lshift>
 8012d36:	4605      	mov	r5, r0
 8012d38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d058      	beq.n	8012df0 <_dtoa_r+0x950>
 8012d3e:	6869      	ldr	r1, [r5, #4]
 8012d40:	4648      	mov	r0, r9
 8012d42:	f000 fa0b 	bl	801315c <_Balloc>
 8012d46:	4606      	mov	r6, r0
 8012d48:	b928      	cbnz	r0, 8012d56 <_dtoa_r+0x8b6>
 8012d4a:	4b82      	ldr	r3, [pc, #520]	@ (8012f54 <_dtoa_r+0xab4>)
 8012d4c:	4602      	mov	r2, r0
 8012d4e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012d52:	f7ff bbbe 	b.w	80124d2 <_dtoa_r+0x32>
 8012d56:	692a      	ldr	r2, [r5, #16]
 8012d58:	3202      	adds	r2, #2
 8012d5a:	0092      	lsls	r2, r2, #2
 8012d5c:	f105 010c 	add.w	r1, r5, #12
 8012d60:	300c      	adds	r0, #12
 8012d62:	f7ff fb00 	bl	8012366 <memcpy>
 8012d66:	2201      	movs	r2, #1
 8012d68:	4631      	mov	r1, r6
 8012d6a:	4648      	mov	r0, r9
 8012d6c:	f000 fc46 	bl	80135fc <__lshift>
 8012d70:	1c7b      	adds	r3, r7, #1
 8012d72:	9304      	str	r3, [sp, #16]
 8012d74:	eb07 030b 	add.w	r3, r7, fp
 8012d78:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d7a:	9b02      	ldr	r3, [sp, #8]
 8012d7c:	f003 0301 	and.w	r3, r3, #1
 8012d80:	46a8      	mov	r8, r5
 8012d82:	9308      	str	r3, [sp, #32]
 8012d84:	4605      	mov	r5, r0
 8012d86:	9b04      	ldr	r3, [sp, #16]
 8012d88:	9801      	ldr	r0, [sp, #4]
 8012d8a:	4621      	mov	r1, r4
 8012d8c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8012d90:	f7ff fafe 	bl	8012390 <quorem>
 8012d94:	4641      	mov	r1, r8
 8012d96:	9002      	str	r0, [sp, #8]
 8012d98:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012d9c:	9801      	ldr	r0, [sp, #4]
 8012d9e:	f000 fc99 	bl	80136d4 <__mcmp>
 8012da2:	462a      	mov	r2, r5
 8012da4:	9006      	str	r0, [sp, #24]
 8012da6:	4621      	mov	r1, r4
 8012da8:	4648      	mov	r0, r9
 8012daa:	f000 fcaf 	bl	801370c <__mdiff>
 8012dae:	68c2      	ldr	r2, [r0, #12]
 8012db0:	4606      	mov	r6, r0
 8012db2:	b9fa      	cbnz	r2, 8012df4 <_dtoa_r+0x954>
 8012db4:	4601      	mov	r1, r0
 8012db6:	9801      	ldr	r0, [sp, #4]
 8012db8:	f000 fc8c 	bl	80136d4 <__mcmp>
 8012dbc:	4602      	mov	r2, r0
 8012dbe:	4631      	mov	r1, r6
 8012dc0:	4648      	mov	r0, r9
 8012dc2:	920a      	str	r2, [sp, #40]	@ 0x28
 8012dc4:	f000 fa0a 	bl	80131dc <_Bfree>
 8012dc8:	9b07      	ldr	r3, [sp, #28]
 8012dca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012dcc:	9e04      	ldr	r6, [sp, #16]
 8012dce:	ea42 0103 	orr.w	r1, r2, r3
 8012dd2:	9b08      	ldr	r3, [sp, #32]
 8012dd4:	4319      	orrs	r1, r3
 8012dd6:	d10f      	bne.n	8012df8 <_dtoa_r+0x958>
 8012dd8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012ddc:	d028      	beq.n	8012e30 <_dtoa_r+0x990>
 8012dde:	9b06      	ldr	r3, [sp, #24]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	dd02      	ble.n	8012dea <_dtoa_r+0x94a>
 8012de4:	9b02      	ldr	r3, [sp, #8]
 8012de6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012dea:	f88b a000 	strb.w	sl, [fp]
 8012dee:	e55e      	b.n	80128ae <_dtoa_r+0x40e>
 8012df0:	4628      	mov	r0, r5
 8012df2:	e7bd      	b.n	8012d70 <_dtoa_r+0x8d0>
 8012df4:	2201      	movs	r2, #1
 8012df6:	e7e2      	b.n	8012dbe <_dtoa_r+0x91e>
 8012df8:	9b06      	ldr	r3, [sp, #24]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	db04      	blt.n	8012e08 <_dtoa_r+0x968>
 8012dfe:	9907      	ldr	r1, [sp, #28]
 8012e00:	430b      	orrs	r3, r1
 8012e02:	9908      	ldr	r1, [sp, #32]
 8012e04:	430b      	orrs	r3, r1
 8012e06:	d120      	bne.n	8012e4a <_dtoa_r+0x9aa>
 8012e08:	2a00      	cmp	r2, #0
 8012e0a:	ddee      	ble.n	8012dea <_dtoa_r+0x94a>
 8012e0c:	9901      	ldr	r1, [sp, #4]
 8012e0e:	2201      	movs	r2, #1
 8012e10:	4648      	mov	r0, r9
 8012e12:	f000 fbf3 	bl	80135fc <__lshift>
 8012e16:	4621      	mov	r1, r4
 8012e18:	9001      	str	r0, [sp, #4]
 8012e1a:	f000 fc5b 	bl	80136d4 <__mcmp>
 8012e1e:	2800      	cmp	r0, #0
 8012e20:	dc03      	bgt.n	8012e2a <_dtoa_r+0x98a>
 8012e22:	d1e2      	bne.n	8012dea <_dtoa_r+0x94a>
 8012e24:	f01a 0f01 	tst.w	sl, #1
 8012e28:	d0df      	beq.n	8012dea <_dtoa_r+0x94a>
 8012e2a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012e2e:	d1d9      	bne.n	8012de4 <_dtoa_r+0x944>
 8012e30:	2339      	movs	r3, #57	@ 0x39
 8012e32:	f88b 3000 	strb.w	r3, [fp]
 8012e36:	4633      	mov	r3, r6
 8012e38:	461e      	mov	r6, r3
 8012e3a:	3b01      	subs	r3, #1
 8012e3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012e40:	2a39      	cmp	r2, #57	@ 0x39
 8012e42:	d052      	beq.n	8012eea <_dtoa_r+0xa4a>
 8012e44:	3201      	adds	r2, #1
 8012e46:	701a      	strb	r2, [r3, #0]
 8012e48:	e531      	b.n	80128ae <_dtoa_r+0x40e>
 8012e4a:	2a00      	cmp	r2, #0
 8012e4c:	dd07      	ble.n	8012e5e <_dtoa_r+0x9be>
 8012e4e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012e52:	d0ed      	beq.n	8012e30 <_dtoa_r+0x990>
 8012e54:	f10a 0301 	add.w	r3, sl, #1
 8012e58:	f88b 3000 	strb.w	r3, [fp]
 8012e5c:	e527      	b.n	80128ae <_dtoa_r+0x40e>
 8012e5e:	9b04      	ldr	r3, [sp, #16]
 8012e60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e62:	f803 ac01 	strb.w	sl, [r3, #-1]
 8012e66:	4293      	cmp	r3, r2
 8012e68:	d029      	beq.n	8012ebe <_dtoa_r+0xa1e>
 8012e6a:	9901      	ldr	r1, [sp, #4]
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	220a      	movs	r2, #10
 8012e70:	4648      	mov	r0, r9
 8012e72:	f000 f9d5 	bl	8013220 <__multadd>
 8012e76:	45a8      	cmp	r8, r5
 8012e78:	9001      	str	r0, [sp, #4]
 8012e7a:	f04f 0300 	mov.w	r3, #0
 8012e7e:	f04f 020a 	mov.w	r2, #10
 8012e82:	4641      	mov	r1, r8
 8012e84:	4648      	mov	r0, r9
 8012e86:	d107      	bne.n	8012e98 <_dtoa_r+0x9f8>
 8012e88:	f000 f9ca 	bl	8013220 <__multadd>
 8012e8c:	4680      	mov	r8, r0
 8012e8e:	4605      	mov	r5, r0
 8012e90:	9b04      	ldr	r3, [sp, #16]
 8012e92:	3301      	adds	r3, #1
 8012e94:	9304      	str	r3, [sp, #16]
 8012e96:	e776      	b.n	8012d86 <_dtoa_r+0x8e6>
 8012e98:	f000 f9c2 	bl	8013220 <__multadd>
 8012e9c:	4629      	mov	r1, r5
 8012e9e:	4680      	mov	r8, r0
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	220a      	movs	r2, #10
 8012ea4:	4648      	mov	r0, r9
 8012ea6:	f000 f9bb 	bl	8013220 <__multadd>
 8012eaa:	4605      	mov	r5, r0
 8012eac:	e7f0      	b.n	8012e90 <_dtoa_r+0x9f0>
 8012eae:	f1bb 0f00 	cmp.w	fp, #0
 8012eb2:	bfcc      	ite	gt
 8012eb4:	465e      	movgt	r6, fp
 8012eb6:	2601      	movle	r6, #1
 8012eb8:	443e      	add	r6, r7
 8012eba:	f04f 0800 	mov.w	r8, #0
 8012ebe:	9901      	ldr	r1, [sp, #4]
 8012ec0:	2201      	movs	r2, #1
 8012ec2:	4648      	mov	r0, r9
 8012ec4:	f000 fb9a 	bl	80135fc <__lshift>
 8012ec8:	4621      	mov	r1, r4
 8012eca:	9001      	str	r0, [sp, #4]
 8012ecc:	f000 fc02 	bl	80136d4 <__mcmp>
 8012ed0:	2800      	cmp	r0, #0
 8012ed2:	dcb0      	bgt.n	8012e36 <_dtoa_r+0x996>
 8012ed4:	d102      	bne.n	8012edc <_dtoa_r+0xa3c>
 8012ed6:	f01a 0f01 	tst.w	sl, #1
 8012eda:	d1ac      	bne.n	8012e36 <_dtoa_r+0x996>
 8012edc:	4633      	mov	r3, r6
 8012ede:	461e      	mov	r6, r3
 8012ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012ee4:	2a30      	cmp	r2, #48	@ 0x30
 8012ee6:	d0fa      	beq.n	8012ede <_dtoa_r+0xa3e>
 8012ee8:	e4e1      	b.n	80128ae <_dtoa_r+0x40e>
 8012eea:	429f      	cmp	r7, r3
 8012eec:	d1a4      	bne.n	8012e38 <_dtoa_r+0x998>
 8012eee:	9b05      	ldr	r3, [sp, #20]
 8012ef0:	3301      	adds	r3, #1
 8012ef2:	9305      	str	r3, [sp, #20]
 8012ef4:	2331      	movs	r3, #49	@ 0x31
 8012ef6:	703b      	strb	r3, [r7, #0]
 8012ef8:	e4d9      	b.n	80128ae <_dtoa_r+0x40e>
 8012efa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012efc:	4f16      	ldr	r7, [pc, #88]	@ (8012f58 <_dtoa_r+0xab8>)
 8012efe:	b11b      	cbz	r3, 8012f08 <_dtoa_r+0xa68>
 8012f00:	f107 0308 	add.w	r3, r7, #8
 8012f04:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012f06:	6013      	str	r3, [r2, #0]
 8012f08:	4638      	mov	r0, r7
 8012f0a:	b011      	add	sp, #68	@ 0x44
 8012f0c:	ecbd 8b02 	vpop	{d8}
 8012f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f14:	9b07      	ldr	r3, [sp, #28]
 8012f16:	2b01      	cmp	r3, #1
 8012f18:	f77f ae2c 	ble.w	8012b74 <_dtoa_r+0x6d4>
 8012f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f20:	2001      	movs	r0, #1
 8012f22:	e64c      	b.n	8012bbe <_dtoa_r+0x71e>
 8012f24:	f1bb 0f00 	cmp.w	fp, #0
 8012f28:	f77f aed8 	ble.w	8012cdc <_dtoa_r+0x83c>
 8012f2c:	463e      	mov	r6, r7
 8012f2e:	9801      	ldr	r0, [sp, #4]
 8012f30:	4621      	mov	r1, r4
 8012f32:	f7ff fa2d 	bl	8012390 <quorem>
 8012f36:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012f3a:	f806 ab01 	strb.w	sl, [r6], #1
 8012f3e:	1bf2      	subs	r2, r6, r7
 8012f40:	4593      	cmp	fp, r2
 8012f42:	ddb4      	ble.n	8012eae <_dtoa_r+0xa0e>
 8012f44:	9901      	ldr	r1, [sp, #4]
 8012f46:	2300      	movs	r3, #0
 8012f48:	220a      	movs	r2, #10
 8012f4a:	4648      	mov	r0, r9
 8012f4c:	f000 f968 	bl	8013220 <__multadd>
 8012f50:	9001      	str	r0, [sp, #4]
 8012f52:	e7ec      	b.n	8012f2e <_dtoa_r+0xa8e>
 8012f54:	08017383 	.word	0x08017383
 8012f58:	08017307 	.word	0x08017307

08012f5c <_free_r>:
 8012f5c:	b538      	push	{r3, r4, r5, lr}
 8012f5e:	4605      	mov	r5, r0
 8012f60:	2900      	cmp	r1, #0
 8012f62:	d041      	beq.n	8012fe8 <_free_r+0x8c>
 8012f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f68:	1f0c      	subs	r4, r1, #4
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	bfb8      	it	lt
 8012f6e:	18e4      	addlt	r4, r4, r3
 8012f70:	f000 f8e8 	bl	8013144 <__malloc_lock>
 8012f74:	4a1d      	ldr	r2, [pc, #116]	@ (8012fec <_free_r+0x90>)
 8012f76:	6813      	ldr	r3, [r2, #0]
 8012f78:	b933      	cbnz	r3, 8012f88 <_free_r+0x2c>
 8012f7a:	6063      	str	r3, [r4, #4]
 8012f7c:	6014      	str	r4, [r2, #0]
 8012f7e:	4628      	mov	r0, r5
 8012f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f84:	f000 b8e4 	b.w	8013150 <__malloc_unlock>
 8012f88:	42a3      	cmp	r3, r4
 8012f8a:	d908      	bls.n	8012f9e <_free_r+0x42>
 8012f8c:	6820      	ldr	r0, [r4, #0]
 8012f8e:	1821      	adds	r1, r4, r0
 8012f90:	428b      	cmp	r3, r1
 8012f92:	bf01      	itttt	eq
 8012f94:	6819      	ldreq	r1, [r3, #0]
 8012f96:	685b      	ldreq	r3, [r3, #4]
 8012f98:	1809      	addeq	r1, r1, r0
 8012f9a:	6021      	streq	r1, [r4, #0]
 8012f9c:	e7ed      	b.n	8012f7a <_free_r+0x1e>
 8012f9e:	461a      	mov	r2, r3
 8012fa0:	685b      	ldr	r3, [r3, #4]
 8012fa2:	b10b      	cbz	r3, 8012fa8 <_free_r+0x4c>
 8012fa4:	42a3      	cmp	r3, r4
 8012fa6:	d9fa      	bls.n	8012f9e <_free_r+0x42>
 8012fa8:	6811      	ldr	r1, [r2, #0]
 8012faa:	1850      	adds	r0, r2, r1
 8012fac:	42a0      	cmp	r0, r4
 8012fae:	d10b      	bne.n	8012fc8 <_free_r+0x6c>
 8012fb0:	6820      	ldr	r0, [r4, #0]
 8012fb2:	4401      	add	r1, r0
 8012fb4:	1850      	adds	r0, r2, r1
 8012fb6:	4283      	cmp	r3, r0
 8012fb8:	6011      	str	r1, [r2, #0]
 8012fba:	d1e0      	bne.n	8012f7e <_free_r+0x22>
 8012fbc:	6818      	ldr	r0, [r3, #0]
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	6053      	str	r3, [r2, #4]
 8012fc2:	4408      	add	r0, r1
 8012fc4:	6010      	str	r0, [r2, #0]
 8012fc6:	e7da      	b.n	8012f7e <_free_r+0x22>
 8012fc8:	d902      	bls.n	8012fd0 <_free_r+0x74>
 8012fca:	230c      	movs	r3, #12
 8012fcc:	602b      	str	r3, [r5, #0]
 8012fce:	e7d6      	b.n	8012f7e <_free_r+0x22>
 8012fd0:	6820      	ldr	r0, [r4, #0]
 8012fd2:	1821      	adds	r1, r4, r0
 8012fd4:	428b      	cmp	r3, r1
 8012fd6:	bf04      	itt	eq
 8012fd8:	6819      	ldreq	r1, [r3, #0]
 8012fda:	685b      	ldreq	r3, [r3, #4]
 8012fdc:	6063      	str	r3, [r4, #4]
 8012fde:	bf04      	itt	eq
 8012fe0:	1809      	addeq	r1, r1, r0
 8012fe2:	6021      	streq	r1, [r4, #0]
 8012fe4:	6054      	str	r4, [r2, #4]
 8012fe6:	e7ca      	b.n	8012f7e <_free_r+0x22>
 8012fe8:	bd38      	pop	{r3, r4, r5, pc}
 8012fea:	bf00      	nop
 8012fec:	24000884 	.word	0x24000884

08012ff0 <malloc>:
 8012ff0:	4b02      	ldr	r3, [pc, #8]	@ (8012ffc <malloc+0xc>)
 8012ff2:	4601      	mov	r1, r0
 8012ff4:	6818      	ldr	r0, [r3, #0]
 8012ff6:	f000 b825 	b.w	8013044 <_malloc_r>
 8012ffa:	bf00      	nop
 8012ffc:	24000020 	.word	0x24000020

08013000 <sbrk_aligned>:
 8013000:	b570      	push	{r4, r5, r6, lr}
 8013002:	4e0f      	ldr	r6, [pc, #60]	@ (8013040 <sbrk_aligned+0x40>)
 8013004:	460c      	mov	r4, r1
 8013006:	6831      	ldr	r1, [r6, #0]
 8013008:	4605      	mov	r5, r0
 801300a:	b911      	cbnz	r1, 8013012 <sbrk_aligned+0x12>
 801300c:	f002 fb14 	bl	8015638 <_sbrk_r>
 8013010:	6030      	str	r0, [r6, #0]
 8013012:	4621      	mov	r1, r4
 8013014:	4628      	mov	r0, r5
 8013016:	f002 fb0f 	bl	8015638 <_sbrk_r>
 801301a:	1c43      	adds	r3, r0, #1
 801301c:	d103      	bne.n	8013026 <sbrk_aligned+0x26>
 801301e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8013022:	4620      	mov	r0, r4
 8013024:	bd70      	pop	{r4, r5, r6, pc}
 8013026:	1cc4      	adds	r4, r0, #3
 8013028:	f024 0403 	bic.w	r4, r4, #3
 801302c:	42a0      	cmp	r0, r4
 801302e:	d0f8      	beq.n	8013022 <sbrk_aligned+0x22>
 8013030:	1a21      	subs	r1, r4, r0
 8013032:	4628      	mov	r0, r5
 8013034:	f002 fb00 	bl	8015638 <_sbrk_r>
 8013038:	3001      	adds	r0, #1
 801303a:	d1f2      	bne.n	8013022 <sbrk_aligned+0x22>
 801303c:	e7ef      	b.n	801301e <sbrk_aligned+0x1e>
 801303e:	bf00      	nop
 8013040:	24000880 	.word	0x24000880

08013044 <_malloc_r>:
 8013044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013048:	1ccd      	adds	r5, r1, #3
 801304a:	f025 0503 	bic.w	r5, r5, #3
 801304e:	3508      	adds	r5, #8
 8013050:	2d0c      	cmp	r5, #12
 8013052:	bf38      	it	cc
 8013054:	250c      	movcc	r5, #12
 8013056:	2d00      	cmp	r5, #0
 8013058:	4606      	mov	r6, r0
 801305a:	db01      	blt.n	8013060 <_malloc_r+0x1c>
 801305c:	42a9      	cmp	r1, r5
 801305e:	d904      	bls.n	801306a <_malloc_r+0x26>
 8013060:	230c      	movs	r3, #12
 8013062:	6033      	str	r3, [r6, #0]
 8013064:	2000      	movs	r0, #0
 8013066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801306a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013140 <_malloc_r+0xfc>
 801306e:	f000 f869 	bl	8013144 <__malloc_lock>
 8013072:	f8d8 3000 	ldr.w	r3, [r8]
 8013076:	461c      	mov	r4, r3
 8013078:	bb44      	cbnz	r4, 80130cc <_malloc_r+0x88>
 801307a:	4629      	mov	r1, r5
 801307c:	4630      	mov	r0, r6
 801307e:	f7ff ffbf 	bl	8013000 <sbrk_aligned>
 8013082:	1c43      	adds	r3, r0, #1
 8013084:	4604      	mov	r4, r0
 8013086:	d158      	bne.n	801313a <_malloc_r+0xf6>
 8013088:	f8d8 4000 	ldr.w	r4, [r8]
 801308c:	4627      	mov	r7, r4
 801308e:	2f00      	cmp	r7, #0
 8013090:	d143      	bne.n	801311a <_malloc_r+0xd6>
 8013092:	2c00      	cmp	r4, #0
 8013094:	d04b      	beq.n	801312e <_malloc_r+0xea>
 8013096:	6823      	ldr	r3, [r4, #0]
 8013098:	4639      	mov	r1, r7
 801309a:	4630      	mov	r0, r6
 801309c:	eb04 0903 	add.w	r9, r4, r3
 80130a0:	f002 faca 	bl	8015638 <_sbrk_r>
 80130a4:	4581      	cmp	r9, r0
 80130a6:	d142      	bne.n	801312e <_malloc_r+0xea>
 80130a8:	6821      	ldr	r1, [r4, #0]
 80130aa:	1a6d      	subs	r5, r5, r1
 80130ac:	4629      	mov	r1, r5
 80130ae:	4630      	mov	r0, r6
 80130b0:	f7ff ffa6 	bl	8013000 <sbrk_aligned>
 80130b4:	3001      	adds	r0, #1
 80130b6:	d03a      	beq.n	801312e <_malloc_r+0xea>
 80130b8:	6823      	ldr	r3, [r4, #0]
 80130ba:	442b      	add	r3, r5
 80130bc:	6023      	str	r3, [r4, #0]
 80130be:	f8d8 3000 	ldr.w	r3, [r8]
 80130c2:	685a      	ldr	r2, [r3, #4]
 80130c4:	bb62      	cbnz	r2, 8013120 <_malloc_r+0xdc>
 80130c6:	f8c8 7000 	str.w	r7, [r8]
 80130ca:	e00f      	b.n	80130ec <_malloc_r+0xa8>
 80130cc:	6822      	ldr	r2, [r4, #0]
 80130ce:	1b52      	subs	r2, r2, r5
 80130d0:	d420      	bmi.n	8013114 <_malloc_r+0xd0>
 80130d2:	2a0b      	cmp	r2, #11
 80130d4:	d917      	bls.n	8013106 <_malloc_r+0xc2>
 80130d6:	1961      	adds	r1, r4, r5
 80130d8:	42a3      	cmp	r3, r4
 80130da:	6025      	str	r5, [r4, #0]
 80130dc:	bf18      	it	ne
 80130de:	6059      	strne	r1, [r3, #4]
 80130e0:	6863      	ldr	r3, [r4, #4]
 80130e2:	bf08      	it	eq
 80130e4:	f8c8 1000 	streq.w	r1, [r8]
 80130e8:	5162      	str	r2, [r4, r5]
 80130ea:	604b      	str	r3, [r1, #4]
 80130ec:	4630      	mov	r0, r6
 80130ee:	f000 f82f 	bl	8013150 <__malloc_unlock>
 80130f2:	f104 000b 	add.w	r0, r4, #11
 80130f6:	1d23      	adds	r3, r4, #4
 80130f8:	f020 0007 	bic.w	r0, r0, #7
 80130fc:	1ac2      	subs	r2, r0, r3
 80130fe:	bf1c      	itt	ne
 8013100:	1a1b      	subne	r3, r3, r0
 8013102:	50a3      	strne	r3, [r4, r2]
 8013104:	e7af      	b.n	8013066 <_malloc_r+0x22>
 8013106:	6862      	ldr	r2, [r4, #4]
 8013108:	42a3      	cmp	r3, r4
 801310a:	bf0c      	ite	eq
 801310c:	f8c8 2000 	streq.w	r2, [r8]
 8013110:	605a      	strne	r2, [r3, #4]
 8013112:	e7eb      	b.n	80130ec <_malloc_r+0xa8>
 8013114:	4623      	mov	r3, r4
 8013116:	6864      	ldr	r4, [r4, #4]
 8013118:	e7ae      	b.n	8013078 <_malloc_r+0x34>
 801311a:	463c      	mov	r4, r7
 801311c:	687f      	ldr	r7, [r7, #4]
 801311e:	e7b6      	b.n	801308e <_malloc_r+0x4a>
 8013120:	461a      	mov	r2, r3
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	42a3      	cmp	r3, r4
 8013126:	d1fb      	bne.n	8013120 <_malloc_r+0xdc>
 8013128:	2300      	movs	r3, #0
 801312a:	6053      	str	r3, [r2, #4]
 801312c:	e7de      	b.n	80130ec <_malloc_r+0xa8>
 801312e:	230c      	movs	r3, #12
 8013130:	6033      	str	r3, [r6, #0]
 8013132:	4630      	mov	r0, r6
 8013134:	f000 f80c 	bl	8013150 <__malloc_unlock>
 8013138:	e794      	b.n	8013064 <_malloc_r+0x20>
 801313a:	6005      	str	r5, [r0, #0]
 801313c:	e7d6      	b.n	80130ec <_malloc_r+0xa8>
 801313e:	bf00      	nop
 8013140:	24000884 	.word	0x24000884

08013144 <__malloc_lock>:
 8013144:	4801      	ldr	r0, [pc, #4]	@ (801314c <__malloc_lock+0x8>)
 8013146:	f7ff b90c 	b.w	8012362 <__retarget_lock_acquire_recursive>
 801314a:	bf00      	nop
 801314c:	2400087c 	.word	0x2400087c

08013150 <__malloc_unlock>:
 8013150:	4801      	ldr	r0, [pc, #4]	@ (8013158 <__malloc_unlock+0x8>)
 8013152:	f7ff b907 	b.w	8012364 <__retarget_lock_release_recursive>
 8013156:	bf00      	nop
 8013158:	2400087c 	.word	0x2400087c

0801315c <_Balloc>:
 801315c:	b570      	push	{r4, r5, r6, lr}
 801315e:	69c6      	ldr	r6, [r0, #28]
 8013160:	4604      	mov	r4, r0
 8013162:	460d      	mov	r5, r1
 8013164:	b976      	cbnz	r6, 8013184 <_Balloc+0x28>
 8013166:	2010      	movs	r0, #16
 8013168:	f7ff ff42 	bl	8012ff0 <malloc>
 801316c:	4602      	mov	r2, r0
 801316e:	61e0      	str	r0, [r4, #28]
 8013170:	b920      	cbnz	r0, 801317c <_Balloc+0x20>
 8013172:	4b18      	ldr	r3, [pc, #96]	@ (80131d4 <_Balloc+0x78>)
 8013174:	4818      	ldr	r0, [pc, #96]	@ (80131d8 <_Balloc+0x7c>)
 8013176:	216b      	movs	r1, #107	@ 0x6b
 8013178:	f002 fa76 	bl	8015668 <__assert_func>
 801317c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013180:	6006      	str	r6, [r0, #0]
 8013182:	60c6      	str	r6, [r0, #12]
 8013184:	69e6      	ldr	r6, [r4, #28]
 8013186:	68f3      	ldr	r3, [r6, #12]
 8013188:	b183      	cbz	r3, 80131ac <_Balloc+0x50>
 801318a:	69e3      	ldr	r3, [r4, #28]
 801318c:	68db      	ldr	r3, [r3, #12]
 801318e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013192:	b9b8      	cbnz	r0, 80131c4 <_Balloc+0x68>
 8013194:	2101      	movs	r1, #1
 8013196:	fa01 f605 	lsl.w	r6, r1, r5
 801319a:	1d72      	adds	r2, r6, #5
 801319c:	0092      	lsls	r2, r2, #2
 801319e:	4620      	mov	r0, r4
 80131a0:	f002 fa80 	bl	80156a4 <_calloc_r>
 80131a4:	b160      	cbz	r0, 80131c0 <_Balloc+0x64>
 80131a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80131aa:	e00e      	b.n	80131ca <_Balloc+0x6e>
 80131ac:	2221      	movs	r2, #33	@ 0x21
 80131ae:	2104      	movs	r1, #4
 80131b0:	4620      	mov	r0, r4
 80131b2:	f002 fa77 	bl	80156a4 <_calloc_r>
 80131b6:	69e3      	ldr	r3, [r4, #28]
 80131b8:	60f0      	str	r0, [r6, #12]
 80131ba:	68db      	ldr	r3, [r3, #12]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d1e4      	bne.n	801318a <_Balloc+0x2e>
 80131c0:	2000      	movs	r0, #0
 80131c2:	bd70      	pop	{r4, r5, r6, pc}
 80131c4:	6802      	ldr	r2, [r0, #0]
 80131c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80131ca:	2300      	movs	r3, #0
 80131cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80131d0:	e7f7      	b.n	80131c2 <_Balloc+0x66>
 80131d2:	bf00      	nop
 80131d4:	08017314 	.word	0x08017314
 80131d8:	08017394 	.word	0x08017394

080131dc <_Bfree>:
 80131dc:	b570      	push	{r4, r5, r6, lr}
 80131de:	69c6      	ldr	r6, [r0, #28]
 80131e0:	4605      	mov	r5, r0
 80131e2:	460c      	mov	r4, r1
 80131e4:	b976      	cbnz	r6, 8013204 <_Bfree+0x28>
 80131e6:	2010      	movs	r0, #16
 80131e8:	f7ff ff02 	bl	8012ff0 <malloc>
 80131ec:	4602      	mov	r2, r0
 80131ee:	61e8      	str	r0, [r5, #28]
 80131f0:	b920      	cbnz	r0, 80131fc <_Bfree+0x20>
 80131f2:	4b09      	ldr	r3, [pc, #36]	@ (8013218 <_Bfree+0x3c>)
 80131f4:	4809      	ldr	r0, [pc, #36]	@ (801321c <_Bfree+0x40>)
 80131f6:	218f      	movs	r1, #143	@ 0x8f
 80131f8:	f002 fa36 	bl	8015668 <__assert_func>
 80131fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013200:	6006      	str	r6, [r0, #0]
 8013202:	60c6      	str	r6, [r0, #12]
 8013204:	b13c      	cbz	r4, 8013216 <_Bfree+0x3a>
 8013206:	69eb      	ldr	r3, [r5, #28]
 8013208:	6862      	ldr	r2, [r4, #4]
 801320a:	68db      	ldr	r3, [r3, #12]
 801320c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013210:	6021      	str	r1, [r4, #0]
 8013212:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013216:	bd70      	pop	{r4, r5, r6, pc}
 8013218:	08017314 	.word	0x08017314
 801321c:	08017394 	.word	0x08017394

08013220 <__multadd>:
 8013220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013224:	690d      	ldr	r5, [r1, #16]
 8013226:	4607      	mov	r7, r0
 8013228:	460c      	mov	r4, r1
 801322a:	461e      	mov	r6, r3
 801322c:	f101 0c14 	add.w	ip, r1, #20
 8013230:	2000      	movs	r0, #0
 8013232:	f8dc 3000 	ldr.w	r3, [ip]
 8013236:	b299      	uxth	r1, r3
 8013238:	fb02 6101 	mla	r1, r2, r1, r6
 801323c:	0c1e      	lsrs	r6, r3, #16
 801323e:	0c0b      	lsrs	r3, r1, #16
 8013240:	fb02 3306 	mla	r3, r2, r6, r3
 8013244:	b289      	uxth	r1, r1
 8013246:	3001      	adds	r0, #1
 8013248:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801324c:	4285      	cmp	r5, r0
 801324e:	f84c 1b04 	str.w	r1, [ip], #4
 8013252:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013256:	dcec      	bgt.n	8013232 <__multadd+0x12>
 8013258:	b30e      	cbz	r6, 801329e <__multadd+0x7e>
 801325a:	68a3      	ldr	r3, [r4, #8]
 801325c:	42ab      	cmp	r3, r5
 801325e:	dc19      	bgt.n	8013294 <__multadd+0x74>
 8013260:	6861      	ldr	r1, [r4, #4]
 8013262:	4638      	mov	r0, r7
 8013264:	3101      	adds	r1, #1
 8013266:	f7ff ff79 	bl	801315c <_Balloc>
 801326a:	4680      	mov	r8, r0
 801326c:	b928      	cbnz	r0, 801327a <__multadd+0x5a>
 801326e:	4602      	mov	r2, r0
 8013270:	4b0c      	ldr	r3, [pc, #48]	@ (80132a4 <__multadd+0x84>)
 8013272:	480d      	ldr	r0, [pc, #52]	@ (80132a8 <__multadd+0x88>)
 8013274:	21ba      	movs	r1, #186	@ 0xba
 8013276:	f002 f9f7 	bl	8015668 <__assert_func>
 801327a:	6922      	ldr	r2, [r4, #16]
 801327c:	3202      	adds	r2, #2
 801327e:	f104 010c 	add.w	r1, r4, #12
 8013282:	0092      	lsls	r2, r2, #2
 8013284:	300c      	adds	r0, #12
 8013286:	f7ff f86e 	bl	8012366 <memcpy>
 801328a:	4621      	mov	r1, r4
 801328c:	4638      	mov	r0, r7
 801328e:	f7ff ffa5 	bl	80131dc <_Bfree>
 8013292:	4644      	mov	r4, r8
 8013294:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013298:	3501      	adds	r5, #1
 801329a:	615e      	str	r6, [r3, #20]
 801329c:	6125      	str	r5, [r4, #16]
 801329e:	4620      	mov	r0, r4
 80132a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132a4:	08017383 	.word	0x08017383
 80132a8:	08017394 	.word	0x08017394

080132ac <__s2b>:
 80132ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132b0:	460c      	mov	r4, r1
 80132b2:	4615      	mov	r5, r2
 80132b4:	461f      	mov	r7, r3
 80132b6:	2209      	movs	r2, #9
 80132b8:	3308      	adds	r3, #8
 80132ba:	4606      	mov	r6, r0
 80132bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80132c0:	2100      	movs	r1, #0
 80132c2:	2201      	movs	r2, #1
 80132c4:	429a      	cmp	r2, r3
 80132c6:	db09      	blt.n	80132dc <__s2b+0x30>
 80132c8:	4630      	mov	r0, r6
 80132ca:	f7ff ff47 	bl	801315c <_Balloc>
 80132ce:	b940      	cbnz	r0, 80132e2 <__s2b+0x36>
 80132d0:	4602      	mov	r2, r0
 80132d2:	4b19      	ldr	r3, [pc, #100]	@ (8013338 <__s2b+0x8c>)
 80132d4:	4819      	ldr	r0, [pc, #100]	@ (801333c <__s2b+0x90>)
 80132d6:	21d3      	movs	r1, #211	@ 0xd3
 80132d8:	f002 f9c6 	bl	8015668 <__assert_func>
 80132dc:	0052      	lsls	r2, r2, #1
 80132de:	3101      	adds	r1, #1
 80132e0:	e7f0      	b.n	80132c4 <__s2b+0x18>
 80132e2:	9b08      	ldr	r3, [sp, #32]
 80132e4:	6143      	str	r3, [r0, #20]
 80132e6:	2d09      	cmp	r5, #9
 80132e8:	f04f 0301 	mov.w	r3, #1
 80132ec:	6103      	str	r3, [r0, #16]
 80132ee:	dd16      	ble.n	801331e <__s2b+0x72>
 80132f0:	f104 0909 	add.w	r9, r4, #9
 80132f4:	46c8      	mov	r8, r9
 80132f6:	442c      	add	r4, r5
 80132f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80132fc:	4601      	mov	r1, r0
 80132fe:	3b30      	subs	r3, #48	@ 0x30
 8013300:	220a      	movs	r2, #10
 8013302:	4630      	mov	r0, r6
 8013304:	f7ff ff8c 	bl	8013220 <__multadd>
 8013308:	45a0      	cmp	r8, r4
 801330a:	d1f5      	bne.n	80132f8 <__s2b+0x4c>
 801330c:	f1a5 0408 	sub.w	r4, r5, #8
 8013310:	444c      	add	r4, r9
 8013312:	1b2d      	subs	r5, r5, r4
 8013314:	1963      	adds	r3, r4, r5
 8013316:	42bb      	cmp	r3, r7
 8013318:	db04      	blt.n	8013324 <__s2b+0x78>
 801331a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801331e:	340a      	adds	r4, #10
 8013320:	2509      	movs	r5, #9
 8013322:	e7f6      	b.n	8013312 <__s2b+0x66>
 8013324:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013328:	4601      	mov	r1, r0
 801332a:	3b30      	subs	r3, #48	@ 0x30
 801332c:	220a      	movs	r2, #10
 801332e:	4630      	mov	r0, r6
 8013330:	f7ff ff76 	bl	8013220 <__multadd>
 8013334:	e7ee      	b.n	8013314 <__s2b+0x68>
 8013336:	bf00      	nop
 8013338:	08017383 	.word	0x08017383
 801333c:	08017394 	.word	0x08017394

08013340 <__hi0bits>:
 8013340:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013344:	4603      	mov	r3, r0
 8013346:	bf36      	itet	cc
 8013348:	0403      	lslcc	r3, r0, #16
 801334a:	2000      	movcs	r0, #0
 801334c:	2010      	movcc	r0, #16
 801334e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013352:	bf3c      	itt	cc
 8013354:	021b      	lslcc	r3, r3, #8
 8013356:	3008      	addcc	r0, #8
 8013358:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801335c:	bf3c      	itt	cc
 801335e:	011b      	lslcc	r3, r3, #4
 8013360:	3004      	addcc	r0, #4
 8013362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013366:	bf3c      	itt	cc
 8013368:	009b      	lslcc	r3, r3, #2
 801336a:	3002      	addcc	r0, #2
 801336c:	2b00      	cmp	r3, #0
 801336e:	db05      	blt.n	801337c <__hi0bits+0x3c>
 8013370:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013374:	f100 0001 	add.w	r0, r0, #1
 8013378:	bf08      	it	eq
 801337a:	2020      	moveq	r0, #32
 801337c:	4770      	bx	lr

0801337e <__lo0bits>:
 801337e:	6803      	ldr	r3, [r0, #0]
 8013380:	4602      	mov	r2, r0
 8013382:	f013 0007 	ands.w	r0, r3, #7
 8013386:	d00b      	beq.n	80133a0 <__lo0bits+0x22>
 8013388:	07d9      	lsls	r1, r3, #31
 801338a:	d421      	bmi.n	80133d0 <__lo0bits+0x52>
 801338c:	0798      	lsls	r0, r3, #30
 801338e:	bf49      	itett	mi
 8013390:	085b      	lsrmi	r3, r3, #1
 8013392:	089b      	lsrpl	r3, r3, #2
 8013394:	2001      	movmi	r0, #1
 8013396:	6013      	strmi	r3, [r2, #0]
 8013398:	bf5c      	itt	pl
 801339a:	6013      	strpl	r3, [r2, #0]
 801339c:	2002      	movpl	r0, #2
 801339e:	4770      	bx	lr
 80133a0:	b299      	uxth	r1, r3
 80133a2:	b909      	cbnz	r1, 80133a8 <__lo0bits+0x2a>
 80133a4:	0c1b      	lsrs	r3, r3, #16
 80133a6:	2010      	movs	r0, #16
 80133a8:	b2d9      	uxtb	r1, r3
 80133aa:	b909      	cbnz	r1, 80133b0 <__lo0bits+0x32>
 80133ac:	3008      	adds	r0, #8
 80133ae:	0a1b      	lsrs	r3, r3, #8
 80133b0:	0719      	lsls	r1, r3, #28
 80133b2:	bf04      	itt	eq
 80133b4:	091b      	lsreq	r3, r3, #4
 80133b6:	3004      	addeq	r0, #4
 80133b8:	0799      	lsls	r1, r3, #30
 80133ba:	bf04      	itt	eq
 80133bc:	089b      	lsreq	r3, r3, #2
 80133be:	3002      	addeq	r0, #2
 80133c0:	07d9      	lsls	r1, r3, #31
 80133c2:	d403      	bmi.n	80133cc <__lo0bits+0x4e>
 80133c4:	085b      	lsrs	r3, r3, #1
 80133c6:	f100 0001 	add.w	r0, r0, #1
 80133ca:	d003      	beq.n	80133d4 <__lo0bits+0x56>
 80133cc:	6013      	str	r3, [r2, #0]
 80133ce:	4770      	bx	lr
 80133d0:	2000      	movs	r0, #0
 80133d2:	4770      	bx	lr
 80133d4:	2020      	movs	r0, #32
 80133d6:	4770      	bx	lr

080133d8 <__i2b>:
 80133d8:	b510      	push	{r4, lr}
 80133da:	460c      	mov	r4, r1
 80133dc:	2101      	movs	r1, #1
 80133de:	f7ff febd 	bl	801315c <_Balloc>
 80133e2:	4602      	mov	r2, r0
 80133e4:	b928      	cbnz	r0, 80133f2 <__i2b+0x1a>
 80133e6:	4b05      	ldr	r3, [pc, #20]	@ (80133fc <__i2b+0x24>)
 80133e8:	4805      	ldr	r0, [pc, #20]	@ (8013400 <__i2b+0x28>)
 80133ea:	f240 1145 	movw	r1, #325	@ 0x145
 80133ee:	f002 f93b 	bl	8015668 <__assert_func>
 80133f2:	2301      	movs	r3, #1
 80133f4:	6144      	str	r4, [r0, #20]
 80133f6:	6103      	str	r3, [r0, #16]
 80133f8:	bd10      	pop	{r4, pc}
 80133fa:	bf00      	nop
 80133fc:	08017383 	.word	0x08017383
 8013400:	08017394 	.word	0x08017394

08013404 <__multiply>:
 8013404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013408:	4617      	mov	r7, r2
 801340a:	690a      	ldr	r2, [r1, #16]
 801340c:	693b      	ldr	r3, [r7, #16]
 801340e:	429a      	cmp	r2, r3
 8013410:	bfa8      	it	ge
 8013412:	463b      	movge	r3, r7
 8013414:	4689      	mov	r9, r1
 8013416:	bfa4      	itt	ge
 8013418:	460f      	movge	r7, r1
 801341a:	4699      	movge	r9, r3
 801341c:	693d      	ldr	r5, [r7, #16]
 801341e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013422:	68bb      	ldr	r3, [r7, #8]
 8013424:	6879      	ldr	r1, [r7, #4]
 8013426:	eb05 060a 	add.w	r6, r5, sl
 801342a:	42b3      	cmp	r3, r6
 801342c:	b085      	sub	sp, #20
 801342e:	bfb8      	it	lt
 8013430:	3101      	addlt	r1, #1
 8013432:	f7ff fe93 	bl	801315c <_Balloc>
 8013436:	b930      	cbnz	r0, 8013446 <__multiply+0x42>
 8013438:	4602      	mov	r2, r0
 801343a:	4b41      	ldr	r3, [pc, #260]	@ (8013540 <__multiply+0x13c>)
 801343c:	4841      	ldr	r0, [pc, #260]	@ (8013544 <__multiply+0x140>)
 801343e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013442:	f002 f911 	bl	8015668 <__assert_func>
 8013446:	f100 0414 	add.w	r4, r0, #20
 801344a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801344e:	4623      	mov	r3, r4
 8013450:	2200      	movs	r2, #0
 8013452:	4573      	cmp	r3, lr
 8013454:	d320      	bcc.n	8013498 <__multiply+0x94>
 8013456:	f107 0814 	add.w	r8, r7, #20
 801345a:	f109 0114 	add.w	r1, r9, #20
 801345e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8013462:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8013466:	9302      	str	r3, [sp, #8]
 8013468:	1beb      	subs	r3, r5, r7
 801346a:	3b15      	subs	r3, #21
 801346c:	f023 0303 	bic.w	r3, r3, #3
 8013470:	3304      	adds	r3, #4
 8013472:	3715      	adds	r7, #21
 8013474:	42bd      	cmp	r5, r7
 8013476:	bf38      	it	cc
 8013478:	2304      	movcc	r3, #4
 801347a:	9301      	str	r3, [sp, #4]
 801347c:	9b02      	ldr	r3, [sp, #8]
 801347e:	9103      	str	r1, [sp, #12]
 8013480:	428b      	cmp	r3, r1
 8013482:	d80c      	bhi.n	801349e <__multiply+0x9a>
 8013484:	2e00      	cmp	r6, #0
 8013486:	dd03      	ble.n	8013490 <__multiply+0x8c>
 8013488:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801348c:	2b00      	cmp	r3, #0
 801348e:	d055      	beq.n	801353c <__multiply+0x138>
 8013490:	6106      	str	r6, [r0, #16]
 8013492:	b005      	add	sp, #20
 8013494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013498:	f843 2b04 	str.w	r2, [r3], #4
 801349c:	e7d9      	b.n	8013452 <__multiply+0x4e>
 801349e:	f8b1 a000 	ldrh.w	sl, [r1]
 80134a2:	f1ba 0f00 	cmp.w	sl, #0
 80134a6:	d01f      	beq.n	80134e8 <__multiply+0xe4>
 80134a8:	46c4      	mov	ip, r8
 80134aa:	46a1      	mov	r9, r4
 80134ac:	2700      	movs	r7, #0
 80134ae:	f85c 2b04 	ldr.w	r2, [ip], #4
 80134b2:	f8d9 3000 	ldr.w	r3, [r9]
 80134b6:	fa1f fb82 	uxth.w	fp, r2
 80134ba:	b29b      	uxth	r3, r3
 80134bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80134c0:	443b      	add	r3, r7
 80134c2:	f8d9 7000 	ldr.w	r7, [r9]
 80134c6:	0c12      	lsrs	r2, r2, #16
 80134c8:	0c3f      	lsrs	r7, r7, #16
 80134ca:	fb0a 7202 	mla	r2, sl, r2, r7
 80134ce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80134d2:	b29b      	uxth	r3, r3
 80134d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80134d8:	4565      	cmp	r5, ip
 80134da:	f849 3b04 	str.w	r3, [r9], #4
 80134de:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80134e2:	d8e4      	bhi.n	80134ae <__multiply+0xaa>
 80134e4:	9b01      	ldr	r3, [sp, #4]
 80134e6:	50e7      	str	r7, [r4, r3]
 80134e8:	9b03      	ldr	r3, [sp, #12]
 80134ea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80134ee:	3104      	adds	r1, #4
 80134f0:	f1b9 0f00 	cmp.w	r9, #0
 80134f4:	d020      	beq.n	8013538 <__multiply+0x134>
 80134f6:	6823      	ldr	r3, [r4, #0]
 80134f8:	4647      	mov	r7, r8
 80134fa:	46a4      	mov	ip, r4
 80134fc:	f04f 0a00 	mov.w	sl, #0
 8013500:	f8b7 b000 	ldrh.w	fp, [r7]
 8013504:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8013508:	fb09 220b 	mla	r2, r9, fp, r2
 801350c:	4452      	add	r2, sl
 801350e:	b29b      	uxth	r3, r3
 8013510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013514:	f84c 3b04 	str.w	r3, [ip], #4
 8013518:	f857 3b04 	ldr.w	r3, [r7], #4
 801351c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013520:	f8bc 3000 	ldrh.w	r3, [ip]
 8013524:	fb09 330a 	mla	r3, r9, sl, r3
 8013528:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801352c:	42bd      	cmp	r5, r7
 801352e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013532:	d8e5      	bhi.n	8013500 <__multiply+0xfc>
 8013534:	9a01      	ldr	r2, [sp, #4]
 8013536:	50a3      	str	r3, [r4, r2]
 8013538:	3404      	adds	r4, #4
 801353a:	e79f      	b.n	801347c <__multiply+0x78>
 801353c:	3e01      	subs	r6, #1
 801353e:	e7a1      	b.n	8013484 <__multiply+0x80>
 8013540:	08017383 	.word	0x08017383
 8013544:	08017394 	.word	0x08017394

08013548 <__pow5mult>:
 8013548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801354c:	4615      	mov	r5, r2
 801354e:	f012 0203 	ands.w	r2, r2, #3
 8013552:	4607      	mov	r7, r0
 8013554:	460e      	mov	r6, r1
 8013556:	d007      	beq.n	8013568 <__pow5mult+0x20>
 8013558:	4c25      	ldr	r4, [pc, #148]	@ (80135f0 <__pow5mult+0xa8>)
 801355a:	3a01      	subs	r2, #1
 801355c:	2300      	movs	r3, #0
 801355e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013562:	f7ff fe5d 	bl	8013220 <__multadd>
 8013566:	4606      	mov	r6, r0
 8013568:	10ad      	asrs	r5, r5, #2
 801356a:	d03d      	beq.n	80135e8 <__pow5mult+0xa0>
 801356c:	69fc      	ldr	r4, [r7, #28]
 801356e:	b97c      	cbnz	r4, 8013590 <__pow5mult+0x48>
 8013570:	2010      	movs	r0, #16
 8013572:	f7ff fd3d 	bl	8012ff0 <malloc>
 8013576:	4602      	mov	r2, r0
 8013578:	61f8      	str	r0, [r7, #28]
 801357a:	b928      	cbnz	r0, 8013588 <__pow5mult+0x40>
 801357c:	4b1d      	ldr	r3, [pc, #116]	@ (80135f4 <__pow5mult+0xac>)
 801357e:	481e      	ldr	r0, [pc, #120]	@ (80135f8 <__pow5mult+0xb0>)
 8013580:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013584:	f002 f870 	bl	8015668 <__assert_func>
 8013588:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801358c:	6004      	str	r4, [r0, #0]
 801358e:	60c4      	str	r4, [r0, #12]
 8013590:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013594:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013598:	b94c      	cbnz	r4, 80135ae <__pow5mult+0x66>
 801359a:	f240 2171 	movw	r1, #625	@ 0x271
 801359e:	4638      	mov	r0, r7
 80135a0:	f7ff ff1a 	bl	80133d8 <__i2b>
 80135a4:	2300      	movs	r3, #0
 80135a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80135aa:	4604      	mov	r4, r0
 80135ac:	6003      	str	r3, [r0, #0]
 80135ae:	f04f 0900 	mov.w	r9, #0
 80135b2:	07eb      	lsls	r3, r5, #31
 80135b4:	d50a      	bpl.n	80135cc <__pow5mult+0x84>
 80135b6:	4631      	mov	r1, r6
 80135b8:	4622      	mov	r2, r4
 80135ba:	4638      	mov	r0, r7
 80135bc:	f7ff ff22 	bl	8013404 <__multiply>
 80135c0:	4631      	mov	r1, r6
 80135c2:	4680      	mov	r8, r0
 80135c4:	4638      	mov	r0, r7
 80135c6:	f7ff fe09 	bl	80131dc <_Bfree>
 80135ca:	4646      	mov	r6, r8
 80135cc:	106d      	asrs	r5, r5, #1
 80135ce:	d00b      	beq.n	80135e8 <__pow5mult+0xa0>
 80135d0:	6820      	ldr	r0, [r4, #0]
 80135d2:	b938      	cbnz	r0, 80135e4 <__pow5mult+0x9c>
 80135d4:	4622      	mov	r2, r4
 80135d6:	4621      	mov	r1, r4
 80135d8:	4638      	mov	r0, r7
 80135da:	f7ff ff13 	bl	8013404 <__multiply>
 80135de:	6020      	str	r0, [r4, #0]
 80135e0:	f8c0 9000 	str.w	r9, [r0]
 80135e4:	4604      	mov	r4, r0
 80135e6:	e7e4      	b.n	80135b2 <__pow5mult+0x6a>
 80135e8:	4630      	mov	r0, r6
 80135ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135ee:	bf00      	nop
 80135f0:	080174c0 	.word	0x080174c0
 80135f4:	08017314 	.word	0x08017314
 80135f8:	08017394 	.word	0x08017394

080135fc <__lshift>:
 80135fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013600:	460c      	mov	r4, r1
 8013602:	6849      	ldr	r1, [r1, #4]
 8013604:	6923      	ldr	r3, [r4, #16]
 8013606:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801360a:	68a3      	ldr	r3, [r4, #8]
 801360c:	4607      	mov	r7, r0
 801360e:	4691      	mov	r9, r2
 8013610:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013614:	f108 0601 	add.w	r6, r8, #1
 8013618:	42b3      	cmp	r3, r6
 801361a:	db0b      	blt.n	8013634 <__lshift+0x38>
 801361c:	4638      	mov	r0, r7
 801361e:	f7ff fd9d 	bl	801315c <_Balloc>
 8013622:	4605      	mov	r5, r0
 8013624:	b948      	cbnz	r0, 801363a <__lshift+0x3e>
 8013626:	4602      	mov	r2, r0
 8013628:	4b28      	ldr	r3, [pc, #160]	@ (80136cc <__lshift+0xd0>)
 801362a:	4829      	ldr	r0, [pc, #164]	@ (80136d0 <__lshift+0xd4>)
 801362c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013630:	f002 f81a 	bl	8015668 <__assert_func>
 8013634:	3101      	adds	r1, #1
 8013636:	005b      	lsls	r3, r3, #1
 8013638:	e7ee      	b.n	8013618 <__lshift+0x1c>
 801363a:	2300      	movs	r3, #0
 801363c:	f100 0114 	add.w	r1, r0, #20
 8013640:	f100 0210 	add.w	r2, r0, #16
 8013644:	4618      	mov	r0, r3
 8013646:	4553      	cmp	r3, sl
 8013648:	db33      	blt.n	80136b2 <__lshift+0xb6>
 801364a:	6920      	ldr	r0, [r4, #16]
 801364c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013650:	f104 0314 	add.w	r3, r4, #20
 8013654:	f019 091f 	ands.w	r9, r9, #31
 8013658:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801365c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013660:	d02b      	beq.n	80136ba <__lshift+0xbe>
 8013662:	f1c9 0e20 	rsb	lr, r9, #32
 8013666:	468a      	mov	sl, r1
 8013668:	2200      	movs	r2, #0
 801366a:	6818      	ldr	r0, [r3, #0]
 801366c:	fa00 f009 	lsl.w	r0, r0, r9
 8013670:	4310      	orrs	r0, r2
 8013672:	f84a 0b04 	str.w	r0, [sl], #4
 8013676:	f853 2b04 	ldr.w	r2, [r3], #4
 801367a:	459c      	cmp	ip, r3
 801367c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013680:	d8f3      	bhi.n	801366a <__lshift+0x6e>
 8013682:	ebac 0304 	sub.w	r3, ip, r4
 8013686:	3b15      	subs	r3, #21
 8013688:	f023 0303 	bic.w	r3, r3, #3
 801368c:	3304      	adds	r3, #4
 801368e:	f104 0015 	add.w	r0, r4, #21
 8013692:	4560      	cmp	r0, ip
 8013694:	bf88      	it	hi
 8013696:	2304      	movhi	r3, #4
 8013698:	50ca      	str	r2, [r1, r3]
 801369a:	b10a      	cbz	r2, 80136a0 <__lshift+0xa4>
 801369c:	f108 0602 	add.w	r6, r8, #2
 80136a0:	3e01      	subs	r6, #1
 80136a2:	4638      	mov	r0, r7
 80136a4:	612e      	str	r6, [r5, #16]
 80136a6:	4621      	mov	r1, r4
 80136a8:	f7ff fd98 	bl	80131dc <_Bfree>
 80136ac:	4628      	mov	r0, r5
 80136ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80136b6:	3301      	adds	r3, #1
 80136b8:	e7c5      	b.n	8013646 <__lshift+0x4a>
 80136ba:	3904      	subs	r1, #4
 80136bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80136c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80136c4:	459c      	cmp	ip, r3
 80136c6:	d8f9      	bhi.n	80136bc <__lshift+0xc0>
 80136c8:	e7ea      	b.n	80136a0 <__lshift+0xa4>
 80136ca:	bf00      	nop
 80136cc:	08017383 	.word	0x08017383
 80136d0:	08017394 	.word	0x08017394

080136d4 <__mcmp>:
 80136d4:	690a      	ldr	r2, [r1, #16]
 80136d6:	4603      	mov	r3, r0
 80136d8:	6900      	ldr	r0, [r0, #16]
 80136da:	1a80      	subs	r0, r0, r2
 80136dc:	b530      	push	{r4, r5, lr}
 80136de:	d10e      	bne.n	80136fe <__mcmp+0x2a>
 80136e0:	3314      	adds	r3, #20
 80136e2:	3114      	adds	r1, #20
 80136e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80136e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80136ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80136f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80136f4:	4295      	cmp	r5, r2
 80136f6:	d003      	beq.n	8013700 <__mcmp+0x2c>
 80136f8:	d205      	bcs.n	8013706 <__mcmp+0x32>
 80136fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80136fe:	bd30      	pop	{r4, r5, pc}
 8013700:	42a3      	cmp	r3, r4
 8013702:	d3f3      	bcc.n	80136ec <__mcmp+0x18>
 8013704:	e7fb      	b.n	80136fe <__mcmp+0x2a>
 8013706:	2001      	movs	r0, #1
 8013708:	e7f9      	b.n	80136fe <__mcmp+0x2a>
	...

0801370c <__mdiff>:
 801370c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013710:	4689      	mov	r9, r1
 8013712:	4606      	mov	r6, r0
 8013714:	4611      	mov	r1, r2
 8013716:	4648      	mov	r0, r9
 8013718:	4614      	mov	r4, r2
 801371a:	f7ff ffdb 	bl	80136d4 <__mcmp>
 801371e:	1e05      	subs	r5, r0, #0
 8013720:	d112      	bne.n	8013748 <__mdiff+0x3c>
 8013722:	4629      	mov	r1, r5
 8013724:	4630      	mov	r0, r6
 8013726:	f7ff fd19 	bl	801315c <_Balloc>
 801372a:	4602      	mov	r2, r0
 801372c:	b928      	cbnz	r0, 801373a <__mdiff+0x2e>
 801372e:	4b3f      	ldr	r3, [pc, #252]	@ (801382c <__mdiff+0x120>)
 8013730:	f240 2137 	movw	r1, #567	@ 0x237
 8013734:	483e      	ldr	r0, [pc, #248]	@ (8013830 <__mdiff+0x124>)
 8013736:	f001 ff97 	bl	8015668 <__assert_func>
 801373a:	2301      	movs	r3, #1
 801373c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013740:	4610      	mov	r0, r2
 8013742:	b003      	add	sp, #12
 8013744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013748:	bfbc      	itt	lt
 801374a:	464b      	movlt	r3, r9
 801374c:	46a1      	movlt	r9, r4
 801374e:	4630      	mov	r0, r6
 8013750:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013754:	bfba      	itte	lt
 8013756:	461c      	movlt	r4, r3
 8013758:	2501      	movlt	r5, #1
 801375a:	2500      	movge	r5, #0
 801375c:	f7ff fcfe 	bl	801315c <_Balloc>
 8013760:	4602      	mov	r2, r0
 8013762:	b918      	cbnz	r0, 801376c <__mdiff+0x60>
 8013764:	4b31      	ldr	r3, [pc, #196]	@ (801382c <__mdiff+0x120>)
 8013766:	f240 2145 	movw	r1, #581	@ 0x245
 801376a:	e7e3      	b.n	8013734 <__mdiff+0x28>
 801376c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013770:	6926      	ldr	r6, [r4, #16]
 8013772:	60c5      	str	r5, [r0, #12]
 8013774:	f109 0310 	add.w	r3, r9, #16
 8013778:	f109 0514 	add.w	r5, r9, #20
 801377c:	f104 0e14 	add.w	lr, r4, #20
 8013780:	f100 0b14 	add.w	fp, r0, #20
 8013784:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013788:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801378c:	9301      	str	r3, [sp, #4]
 801378e:	46d9      	mov	r9, fp
 8013790:	f04f 0c00 	mov.w	ip, #0
 8013794:	9b01      	ldr	r3, [sp, #4]
 8013796:	f85e 0b04 	ldr.w	r0, [lr], #4
 801379a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801379e:	9301      	str	r3, [sp, #4]
 80137a0:	fa1f f38a 	uxth.w	r3, sl
 80137a4:	4619      	mov	r1, r3
 80137a6:	b283      	uxth	r3, r0
 80137a8:	1acb      	subs	r3, r1, r3
 80137aa:	0c00      	lsrs	r0, r0, #16
 80137ac:	4463      	add	r3, ip
 80137ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80137b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80137bc:	4576      	cmp	r6, lr
 80137be:	f849 3b04 	str.w	r3, [r9], #4
 80137c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80137c6:	d8e5      	bhi.n	8013794 <__mdiff+0x88>
 80137c8:	1b33      	subs	r3, r6, r4
 80137ca:	3b15      	subs	r3, #21
 80137cc:	f023 0303 	bic.w	r3, r3, #3
 80137d0:	3415      	adds	r4, #21
 80137d2:	3304      	adds	r3, #4
 80137d4:	42a6      	cmp	r6, r4
 80137d6:	bf38      	it	cc
 80137d8:	2304      	movcc	r3, #4
 80137da:	441d      	add	r5, r3
 80137dc:	445b      	add	r3, fp
 80137de:	461e      	mov	r6, r3
 80137e0:	462c      	mov	r4, r5
 80137e2:	4544      	cmp	r4, r8
 80137e4:	d30e      	bcc.n	8013804 <__mdiff+0xf8>
 80137e6:	f108 0103 	add.w	r1, r8, #3
 80137ea:	1b49      	subs	r1, r1, r5
 80137ec:	f021 0103 	bic.w	r1, r1, #3
 80137f0:	3d03      	subs	r5, #3
 80137f2:	45a8      	cmp	r8, r5
 80137f4:	bf38      	it	cc
 80137f6:	2100      	movcc	r1, #0
 80137f8:	440b      	add	r3, r1
 80137fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80137fe:	b191      	cbz	r1, 8013826 <__mdiff+0x11a>
 8013800:	6117      	str	r7, [r2, #16]
 8013802:	e79d      	b.n	8013740 <__mdiff+0x34>
 8013804:	f854 1b04 	ldr.w	r1, [r4], #4
 8013808:	46e6      	mov	lr, ip
 801380a:	0c08      	lsrs	r0, r1, #16
 801380c:	fa1c fc81 	uxtah	ip, ip, r1
 8013810:	4471      	add	r1, lr
 8013812:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013816:	b289      	uxth	r1, r1
 8013818:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801381c:	f846 1b04 	str.w	r1, [r6], #4
 8013820:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013824:	e7dd      	b.n	80137e2 <__mdiff+0xd6>
 8013826:	3f01      	subs	r7, #1
 8013828:	e7e7      	b.n	80137fa <__mdiff+0xee>
 801382a:	bf00      	nop
 801382c:	08017383 	.word	0x08017383
 8013830:	08017394 	.word	0x08017394

08013834 <__ulp>:
 8013834:	b082      	sub	sp, #8
 8013836:	ed8d 0b00 	vstr	d0, [sp]
 801383a:	9a01      	ldr	r2, [sp, #4]
 801383c:	4b0f      	ldr	r3, [pc, #60]	@ (801387c <__ulp+0x48>)
 801383e:	4013      	ands	r3, r2
 8013840:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013844:	2b00      	cmp	r3, #0
 8013846:	dc08      	bgt.n	801385a <__ulp+0x26>
 8013848:	425b      	negs	r3, r3
 801384a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801384e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013852:	da04      	bge.n	801385e <__ulp+0x2a>
 8013854:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013858:	4113      	asrs	r3, r2
 801385a:	2200      	movs	r2, #0
 801385c:	e008      	b.n	8013870 <__ulp+0x3c>
 801385e:	f1a2 0314 	sub.w	r3, r2, #20
 8013862:	2b1e      	cmp	r3, #30
 8013864:	bfda      	itte	le
 8013866:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801386a:	40da      	lsrle	r2, r3
 801386c:	2201      	movgt	r2, #1
 801386e:	2300      	movs	r3, #0
 8013870:	4619      	mov	r1, r3
 8013872:	4610      	mov	r0, r2
 8013874:	ec41 0b10 	vmov	d0, r0, r1
 8013878:	b002      	add	sp, #8
 801387a:	4770      	bx	lr
 801387c:	7ff00000 	.word	0x7ff00000

08013880 <__b2d>:
 8013880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013884:	6906      	ldr	r6, [r0, #16]
 8013886:	f100 0814 	add.w	r8, r0, #20
 801388a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801388e:	1f37      	subs	r7, r6, #4
 8013890:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013894:	4610      	mov	r0, r2
 8013896:	f7ff fd53 	bl	8013340 <__hi0bits>
 801389a:	f1c0 0320 	rsb	r3, r0, #32
 801389e:	280a      	cmp	r0, #10
 80138a0:	600b      	str	r3, [r1, #0]
 80138a2:	491b      	ldr	r1, [pc, #108]	@ (8013910 <__b2d+0x90>)
 80138a4:	dc15      	bgt.n	80138d2 <__b2d+0x52>
 80138a6:	f1c0 0c0b 	rsb	ip, r0, #11
 80138aa:	fa22 f30c 	lsr.w	r3, r2, ip
 80138ae:	45b8      	cmp	r8, r7
 80138b0:	ea43 0501 	orr.w	r5, r3, r1
 80138b4:	bf34      	ite	cc
 80138b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80138ba:	2300      	movcs	r3, #0
 80138bc:	3015      	adds	r0, #21
 80138be:	fa02 f000 	lsl.w	r0, r2, r0
 80138c2:	fa23 f30c 	lsr.w	r3, r3, ip
 80138c6:	4303      	orrs	r3, r0
 80138c8:	461c      	mov	r4, r3
 80138ca:	ec45 4b10 	vmov	d0, r4, r5
 80138ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138d2:	45b8      	cmp	r8, r7
 80138d4:	bf3a      	itte	cc
 80138d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80138da:	f1a6 0708 	subcc.w	r7, r6, #8
 80138de:	2300      	movcs	r3, #0
 80138e0:	380b      	subs	r0, #11
 80138e2:	d012      	beq.n	801390a <__b2d+0x8a>
 80138e4:	f1c0 0120 	rsb	r1, r0, #32
 80138e8:	fa23 f401 	lsr.w	r4, r3, r1
 80138ec:	4082      	lsls	r2, r0
 80138ee:	4322      	orrs	r2, r4
 80138f0:	4547      	cmp	r7, r8
 80138f2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80138f6:	bf8c      	ite	hi
 80138f8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80138fc:	2200      	movls	r2, #0
 80138fe:	4083      	lsls	r3, r0
 8013900:	40ca      	lsrs	r2, r1
 8013902:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013906:	4313      	orrs	r3, r2
 8013908:	e7de      	b.n	80138c8 <__b2d+0x48>
 801390a:	ea42 0501 	orr.w	r5, r2, r1
 801390e:	e7db      	b.n	80138c8 <__b2d+0x48>
 8013910:	3ff00000 	.word	0x3ff00000

08013914 <__d2b>:
 8013914:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013918:	460f      	mov	r7, r1
 801391a:	2101      	movs	r1, #1
 801391c:	ec59 8b10 	vmov	r8, r9, d0
 8013920:	4616      	mov	r6, r2
 8013922:	f7ff fc1b 	bl	801315c <_Balloc>
 8013926:	4604      	mov	r4, r0
 8013928:	b930      	cbnz	r0, 8013938 <__d2b+0x24>
 801392a:	4602      	mov	r2, r0
 801392c:	4b23      	ldr	r3, [pc, #140]	@ (80139bc <__d2b+0xa8>)
 801392e:	4824      	ldr	r0, [pc, #144]	@ (80139c0 <__d2b+0xac>)
 8013930:	f240 310f 	movw	r1, #783	@ 0x30f
 8013934:	f001 fe98 	bl	8015668 <__assert_func>
 8013938:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801393c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013940:	b10d      	cbz	r5, 8013946 <__d2b+0x32>
 8013942:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013946:	9301      	str	r3, [sp, #4]
 8013948:	f1b8 0300 	subs.w	r3, r8, #0
 801394c:	d023      	beq.n	8013996 <__d2b+0x82>
 801394e:	4668      	mov	r0, sp
 8013950:	9300      	str	r3, [sp, #0]
 8013952:	f7ff fd14 	bl	801337e <__lo0bits>
 8013956:	e9dd 1200 	ldrd	r1, r2, [sp]
 801395a:	b1d0      	cbz	r0, 8013992 <__d2b+0x7e>
 801395c:	f1c0 0320 	rsb	r3, r0, #32
 8013960:	fa02 f303 	lsl.w	r3, r2, r3
 8013964:	430b      	orrs	r3, r1
 8013966:	40c2      	lsrs	r2, r0
 8013968:	6163      	str	r3, [r4, #20]
 801396a:	9201      	str	r2, [sp, #4]
 801396c:	9b01      	ldr	r3, [sp, #4]
 801396e:	61a3      	str	r3, [r4, #24]
 8013970:	2b00      	cmp	r3, #0
 8013972:	bf0c      	ite	eq
 8013974:	2201      	moveq	r2, #1
 8013976:	2202      	movne	r2, #2
 8013978:	6122      	str	r2, [r4, #16]
 801397a:	b1a5      	cbz	r5, 80139a6 <__d2b+0x92>
 801397c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013980:	4405      	add	r5, r0
 8013982:	603d      	str	r5, [r7, #0]
 8013984:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013988:	6030      	str	r0, [r6, #0]
 801398a:	4620      	mov	r0, r4
 801398c:	b003      	add	sp, #12
 801398e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013992:	6161      	str	r1, [r4, #20]
 8013994:	e7ea      	b.n	801396c <__d2b+0x58>
 8013996:	a801      	add	r0, sp, #4
 8013998:	f7ff fcf1 	bl	801337e <__lo0bits>
 801399c:	9b01      	ldr	r3, [sp, #4]
 801399e:	6163      	str	r3, [r4, #20]
 80139a0:	3020      	adds	r0, #32
 80139a2:	2201      	movs	r2, #1
 80139a4:	e7e8      	b.n	8013978 <__d2b+0x64>
 80139a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80139aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80139ae:	6038      	str	r0, [r7, #0]
 80139b0:	6918      	ldr	r0, [r3, #16]
 80139b2:	f7ff fcc5 	bl	8013340 <__hi0bits>
 80139b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80139ba:	e7e5      	b.n	8013988 <__d2b+0x74>
 80139bc:	08017383 	.word	0x08017383
 80139c0:	08017394 	.word	0x08017394

080139c4 <__ratio>:
 80139c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139c8:	4688      	mov	r8, r1
 80139ca:	4669      	mov	r1, sp
 80139cc:	4681      	mov	r9, r0
 80139ce:	f7ff ff57 	bl	8013880 <__b2d>
 80139d2:	a901      	add	r1, sp, #4
 80139d4:	4640      	mov	r0, r8
 80139d6:	ec55 4b10 	vmov	r4, r5, d0
 80139da:	f7ff ff51 	bl	8013880 <__b2d>
 80139de:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80139e2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80139e6:	1ad2      	subs	r2, r2, r3
 80139e8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80139ec:	1a5b      	subs	r3, r3, r1
 80139ee:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80139f2:	ec57 6b10 	vmov	r6, r7, d0
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	bfd6      	itet	le
 80139fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80139fe:	462a      	movgt	r2, r5
 8013a00:	463a      	movle	r2, r7
 8013a02:	46ab      	mov	fp, r5
 8013a04:	46a2      	mov	sl, r4
 8013a06:	bfce      	itee	gt
 8013a08:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8013a0c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8013a10:	ee00 3a90 	vmovle	s1, r3
 8013a14:	ec4b ab17 	vmov	d7, sl, fp
 8013a18:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8013a1c:	b003      	add	sp, #12
 8013a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a22 <__copybits>:
 8013a22:	3901      	subs	r1, #1
 8013a24:	b570      	push	{r4, r5, r6, lr}
 8013a26:	1149      	asrs	r1, r1, #5
 8013a28:	6914      	ldr	r4, [r2, #16]
 8013a2a:	3101      	adds	r1, #1
 8013a2c:	f102 0314 	add.w	r3, r2, #20
 8013a30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013a34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013a38:	1f05      	subs	r5, r0, #4
 8013a3a:	42a3      	cmp	r3, r4
 8013a3c:	d30c      	bcc.n	8013a58 <__copybits+0x36>
 8013a3e:	1aa3      	subs	r3, r4, r2
 8013a40:	3b11      	subs	r3, #17
 8013a42:	f023 0303 	bic.w	r3, r3, #3
 8013a46:	3211      	adds	r2, #17
 8013a48:	42a2      	cmp	r2, r4
 8013a4a:	bf88      	it	hi
 8013a4c:	2300      	movhi	r3, #0
 8013a4e:	4418      	add	r0, r3
 8013a50:	2300      	movs	r3, #0
 8013a52:	4288      	cmp	r0, r1
 8013a54:	d305      	bcc.n	8013a62 <__copybits+0x40>
 8013a56:	bd70      	pop	{r4, r5, r6, pc}
 8013a58:	f853 6b04 	ldr.w	r6, [r3], #4
 8013a5c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013a60:	e7eb      	b.n	8013a3a <__copybits+0x18>
 8013a62:	f840 3b04 	str.w	r3, [r0], #4
 8013a66:	e7f4      	b.n	8013a52 <__copybits+0x30>

08013a68 <__any_on>:
 8013a68:	f100 0214 	add.w	r2, r0, #20
 8013a6c:	6900      	ldr	r0, [r0, #16]
 8013a6e:	114b      	asrs	r3, r1, #5
 8013a70:	4298      	cmp	r0, r3
 8013a72:	b510      	push	{r4, lr}
 8013a74:	db11      	blt.n	8013a9a <__any_on+0x32>
 8013a76:	dd0a      	ble.n	8013a8e <__any_on+0x26>
 8013a78:	f011 011f 	ands.w	r1, r1, #31
 8013a7c:	d007      	beq.n	8013a8e <__any_on+0x26>
 8013a7e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013a82:	fa24 f001 	lsr.w	r0, r4, r1
 8013a86:	fa00 f101 	lsl.w	r1, r0, r1
 8013a8a:	428c      	cmp	r4, r1
 8013a8c:	d10b      	bne.n	8013aa6 <__any_on+0x3e>
 8013a8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013a92:	4293      	cmp	r3, r2
 8013a94:	d803      	bhi.n	8013a9e <__any_on+0x36>
 8013a96:	2000      	movs	r0, #0
 8013a98:	bd10      	pop	{r4, pc}
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	e7f7      	b.n	8013a8e <__any_on+0x26>
 8013a9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013aa2:	2900      	cmp	r1, #0
 8013aa4:	d0f5      	beq.n	8013a92 <__any_on+0x2a>
 8013aa6:	2001      	movs	r0, #1
 8013aa8:	e7f6      	b.n	8013a98 <__any_on+0x30>

08013aaa <sulp>:
 8013aaa:	b570      	push	{r4, r5, r6, lr}
 8013aac:	4604      	mov	r4, r0
 8013aae:	460d      	mov	r5, r1
 8013ab0:	4616      	mov	r6, r2
 8013ab2:	ec45 4b10 	vmov	d0, r4, r5
 8013ab6:	f7ff febd 	bl	8013834 <__ulp>
 8013aba:	b17e      	cbz	r6, 8013adc <sulp+0x32>
 8013abc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013ac0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	dd09      	ble.n	8013adc <sulp+0x32>
 8013ac8:	051b      	lsls	r3, r3, #20
 8013aca:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8013ace:	2000      	movs	r0, #0
 8013ad0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8013ad4:	ec41 0b17 	vmov	d7, r0, r1
 8013ad8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013adc:	bd70      	pop	{r4, r5, r6, pc}
	...

08013ae0 <_strtod_l>:
 8013ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae4:	ed2d 8b0a 	vpush	{d8-d12}
 8013ae8:	b097      	sub	sp, #92	@ 0x5c
 8013aea:	4688      	mov	r8, r1
 8013aec:	920e      	str	r2, [sp, #56]	@ 0x38
 8013aee:	2200      	movs	r2, #0
 8013af0:	9212      	str	r2, [sp, #72]	@ 0x48
 8013af2:	9005      	str	r0, [sp, #20]
 8013af4:	f04f 0a00 	mov.w	sl, #0
 8013af8:	f04f 0b00 	mov.w	fp, #0
 8013afc:	460a      	mov	r2, r1
 8013afe:	9211      	str	r2, [sp, #68]	@ 0x44
 8013b00:	7811      	ldrb	r1, [r2, #0]
 8013b02:	292b      	cmp	r1, #43	@ 0x2b
 8013b04:	d04c      	beq.n	8013ba0 <_strtod_l+0xc0>
 8013b06:	d839      	bhi.n	8013b7c <_strtod_l+0x9c>
 8013b08:	290d      	cmp	r1, #13
 8013b0a:	d833      	bhi.n	8013b74 <_strtod_l+0x94>
 8013b0c:	2908      	cmp	r1, #8
 8013b0e:	d833      	bhi.n	8013b78 <_strtod_l+0x98>
 8013b10:	2900      	cmp	r1, #0
 8013b12:	d03c      	beq.n	8013b8e <_strtod_l+0xae>
 8013b14:	2200      	movs	r2, #0
 8013b16:	9208      	str	r2, [sp, #32]
 8013b18:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8013b1a:	782a      	ldrb	r2, [r5, #0]
 8013b1c:	2a30      	cmp	r2, #48	@ 0x30
 8013b1e:	f040 80b7 	bne.w	8013c90 <_strtod_l+0x1b0>
 8013b22:	786a      	ldrb	r2, [r5, #1]
 8013b24:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013b28:	2a58      	cmp	r2, #88	@ 0x58
 8013b2a:	d170      	bne.n	8013c0e <_strtod_l+0x12e>
 8013b2c:	9302      	str	r3, [sp, #8]
 8013b2e:	9b08      	ldr	r3, [sp, #32]
 8013b30:	9301      	str	r3, [sp, #4]
 8013b32:	ab12      	add	r3, sp, #72	@ 0x48
 8013b34:	9300      	str	r3, [sp, #0]
 8013b36:	4a90      	ldr	r2, [pc, #576]	@ (8013d78 <_strtod_l+0x298>)
 8013b38:	9805      	ldr	r0, [sp, #20]
 8013b3a:	ab13      	add	r3, sp, #76	@ 0x4c
 8013b3c:	a911      	add	r1, sp, #68	@ 0x44
 8013b3e:	f001 fe2d 	bl	801579c <__gethex>
 8013b42:	f010 060f 	ands.w	r6, r0, #15
 8013b46:	4604      	mov	r4, r0
 8013b48:	d005      	beq.n	8013b56 <_strtod_l+0x76>
 8013b4a:	2e06      	cmp	r6, #6
 8013b4c:	d12a      	bne.n	8013ba4 <_strtod_l+0xc4>
 8013b4e:	3501      	adds	r5, #1
 8013b50:	2300      	movs	r3, #0
 8013b52:	9511      	str	r5, [sp, #68]	@ 0x44
 8013b54:	9308      	str	r3, [sp, #32]
 8013b56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	f040 8537 	bne.w	80145cc <_strtod_l+0xaec>
 8013b5e:	9b08      	ldr	r3, [sp, #32]
 8013b60:	ec4b ab10 	vmov	d0, sl, fp
 8013b64:	b1cb      	cbz	r3, 8013b9a <_strtod_l+0xba>
 8013b66:	eeb1 0b40 	vneg.f64	d0, d0
 8013b6a:	b017      	add	sp, #92	@ 0x5c
 8013b6c:	ecbd 8b0a 	vpop	{d8-d12}
 8013b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b74:	2920      	cmp	r1, #32
 8013b76:	d1cd      	bne.n	8013b14 <_strtod_l+0x34>
 8013b78:	3201      	adds	r2, #1
 8013b7a:	e7c0      	b.n	8013afe <_strtod_l+0x1e>
 8013b7c:	292d      	cmp	r1, #45	@ 0x2d
 8013b7e:	d1c9      	bne.n	8013b14 <_strtod_l+0x34>
 8013b80:	2101      	movs	r1, #1
 8013b82:	9108      	str	r1, [sp, #32]
 8013b84:	1c51      	adds	r1, r2, #1
 8013b86:	9111      	str	r1, [sp, #68]	@ 0x44
 8013b88:	7852      	ldrb	r2, [r2, #1]
 8013b8a:	2a00      	cmp	r2, #0
 8013b8c:	d1c4      	bne.n	8013b18 <_strtod_l+0x38>
 8013b8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b90:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	f040 8517 	bne.w	80145c8 <_strtod_l+0xae8>
 8013b9a:	ec4b ab10 	vmov	d0, sl, fp
 8013b9e:	e7e4      	b.n	8013b6a <_strtod_l+0x8a>
 8013ba0:	2100      	movs	r1, #0
 8013ba2:	e7ee      	b.n	8013b82 <_strtod_l+0xa2>
 8013ba4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013ba6:	b13a      	cbz	r2, 8013bb8 <_strtod_l+0xd8>
 8013ba8:	2135      	movs	r1, #53	@ 0x35
 8013baa:	a814      	add	r0, sp, #80	@ 0x50
 8013bac:	f7ff ff39 	bl	8013a22 <__copybits>
 8013bb0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013bb2:	9805      	ldr	r0, [sp, #20]
 8013bb4:	f7ff fb12 	bl	80131dc <_Bfree>
 8013bb8:	1e73      	subs	r3, r6, #1
 8013bba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013bbc:	2b04      	cmp	r3, #4
 8013bbe:	d806      	bhi.n	8013bce <_strtod_l+0xee>
 8013bc0:	e8df f003 	tbb	[pc, r3]
 8013bc4:	201d0314 	.word	0x201d0314
 8013bc8:	14          	.byte	0x14
 8013bc9:	00          	.byte	0x00
 8013bca:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8013bce:	05e3      	lsls	r3, r4, #23
 8013bd0:	bf48      	it	mi
 8013bd2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013bd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013bda:	0d1b      	lsrs	r3, r3, #20
 8013bdc:	051b      	lsls	r3, r3, #20
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d1b9      	bne.n	8013b56 <_strtod_l+0x76>
 8013be2:	f7fe fb93 	bl	801230c <__errno>
 8013be6:	2322      	movs	r3, #34	@ 0x22
 8013be8:	6003      	str	r3, [r0, #0]
 8013bea:	e7b4      	b.n	8013b56 <_strtod_l+0x76>
 8013bec:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8013bf0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013bf4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013bf8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013bfc:	e7e7      	b.n	8013bce <_strtod_l+0xee>
 8013bfe:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013d80 <_strtod_l+0x2a0>
 8013c02:	e7e4      	b.n	8013bce <_strtod_l+0xee>
 8013c04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013c08:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013c0c:	e7df      	b.n	8013bce <_strtod_l+0xee>
 8013c0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c10:	1c5a      	adds	r2, r3, #1
 8013c12:	9211      	str	r2, [sp, #68]	@ 0x44
 8013c14:	785b      	ldrb	r3, [r3, #1]
 8013c16:	2b30      	cmp	r3, #48	@ 0x30
 8013c18:	d0f9      	beq.n	8013c0e <_strtod_l+0x12e>
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d09b      	beq.n	8013b56 <_strtod_l+0x76>
 8013c1e:	2301      	movs	r3, #1
 8013c20:	9307      	str	r3, [sp, #28]
 8013c22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c24:	930a      	str	r3, [sp, #40]	@ 0x28
 8013c26:	2300      	movs	r3, #0
 8013c28:	9306      	str	r3, [sp, #24]
 8013c2a:	4699      	mov	r9, r3
 8013c2c:	461d      	mov	r5, r3
 8013c2e:	220a      	movs	r2, #10
 8013c30:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8013c32:	7804      	ldrb	r4, [r0, #0]
 8013c34:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8013c38:	b2d9      	uxtb	r1, r3
 8013c3a:	2909      	cmp	r1, #9
 8013c3c:	d92a      	bls.n	8013c94 <_strtod_l+0x1b4>
 8013c3e:	494f      	ldr	r1, [pc, #316]	@ (8013d7c <_strtod_l+0x29c>)
 8013c40:	2201      	movs	r2, #1
 8013c42:	f7fe fb06 	bl	8012252 <strncmp>
 8013c46:	b398      	cbz	r0, 8013cb0 <_strtod_l+0x1d0>
 8013c48:	2000      	movs	r0, #0
 8013c4a:	4622      	mov	r2, r4
 8013c4c:	462b      	mov	r3, r5
 8013c4e:	4607      	mov	r7, r0
 8013c50:	4601      	mov	r1, r0
 8013c52:	2a65      	cmp	r2, #101	@ 0x65
 8013c54:	d001      	beq.n	8013c5a <_strtod_l+0x17a>
 8013c56:	2a45      	cmp	r2, #69	@ 0x45
 8013c58:	d118      	bne.n	8013c8c <_strtod_l+0x1ac>
 8013c5a:	b91b      	cbnz	r3, 8013c64 <_strtod_l+0x184>
 8013c5c:	9b07      	ldr	r3, [sp, #28]
 8013c5e:	4303      	orrs	r3, r0
 8013c60:	d095      	beq.n	8013b8e <_strtod_l+0xae>
 8013c62:	2300      	movs	r3, #0
 8013c64:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8013c68:	f108 0201 	add.w	r2, r8, #1
 8013c6c:	9211      	str	r2, [sp, #68]	@ 0x44
 8013c6e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013c72:	2a2b      	cmp	r2, #43	@ 0x2b
 8013c74:	d074      	beq.n	8013d60 <_strtod_l+0x280>
 8013c76:	2a2d      	cmp	r2, #45	@ 0x2d
 8013c78:	d07a      	beq.n	8013d70 <_strtod_l+0x290>
 8013c7a:	f04f 0e00 	mov.w	lr, #0
 8013c7e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8013c82:	2c09      	cmp	r4, #9
 8013c84:	f240 8082 	bls.w	8013d8c <_strtod_l+0x2ac>
 8013c88:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013c8c:	2400      	movs	r4, #0
 8013c8e:	e09d      	b.n	8013dcc <_strtod_l+0x2ec>
 8013c90:	2300      	movs	r3, #0
 8013c92:	e7c5      	b.n	8013c20 <_strtod_l+0x140>
 8013c94:	2d08      	cmp	r5, #8
 8013c96:	bfc8      	it	gt
 8013c98:	9906      	ldrgt	r1, [sp, #24]
 8013c9a:	f100 0001 	add.w	r0, r0, #1
 8013c9e:	bfca      	itet	gt
 8013ca0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013ca4:	fb02 3909 	mlale	r9, r2, r9, r3
 8013ca8:	9306      	strgt	r3, [sp, #24]
 8013caa:	3501      	adds	r5, #1
 8013cac:	9011      	str	r0, [sp, #68]	@ 0x44
 8013cae:	e7bf      	b.n	8013c30 <_strtod_l+0x150>
 8013cb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013cb2:	1c5a      	adds	r2, r3, #1
 8013cb4:	9211      	str	r2, [sp, #68]	@ 0x44
 8013cb6:	785a      	ldrb	r2, [r3, #1]
 8013cb8:	b3bd      	cbz	r5, 8013d2a <_strtod_l+0x24a>
 8013cba:	4607      	mov	r7, r0
 8013cbc:	462b      	mov	r3, r5
 8013cbe:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013cc2:	2909      	cmp	r1, #9
 8013cc4:	d912      	bls.n	8013cec <_strtod_l+0x20c>
 8013cc6:	2101      	movs	r1, #1
 8013cc8:	e7c3      	b.n	8013c52 <_strtod_l+0x172>
 8013cca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013ccc:	1c5a      	adds	r2, r3, #1
 8013cce:	9211      	str	r2, [sp, #68]	@ 0x44
 8013cd0:	785a      	ldrb	r2, [r3, #1]
 8013cd2:	3001      	adds	r0, #1
 8013cd4:	2a30      	cmp	r2, #48	@ 0x30
 8013cd6:	d0f8      	beq.n	8013cca <_strtod_l+0x1ea>
 8013cd8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013cdc:	2b08      	cmp	r3, #8
 8013cde:	f200 847a 	bhi.w	80145d6 <_strtod_l+0xaf6>
 8013ce2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013ce4:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ce6:	4607      	mov	r7, r0
 8013ce8:	2000      	movs	r0, #0
 8013cea:	4603      	mov	r3, r0
 8013cec:	3a30      	subs	r2, #48	@ 0x30
 8013cee:	f100 0101 	add.w	r1, r0, #1
 8013cf2:	d014      	beq.n	8013d1e <_strtod_l+0x23e>
 8013cf4:	440f      	add	r7, r1
 8013cf6:	469c      	mov	ip, r3
 8013cf8:	f04f 0e0a 	mov.w	lr, #10
 8013cfc:	f10c 0401 	add.w	r4, ip, #1
 8013d00:	1ae6      	subs	r6, r4, r3
 8013d02:	42b1      	cmp	r1, r6
 8013d04:	dc13      	bgt.n	8013d2e <_strtod_l+0x24e>
 8013d06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013d0a:	1819      	adds	r1, r3, r0
 8013d0c:	2908      	cmp	r1, #8
 8013d0e:	f103 0301 	add.w	r3, r3, #1
 8013d12:	4403      	add	r3, r0
 8013d14:	dc19      	bgt.n	8013d4a <_strtod_l+0x26a>
 8013d16:	210a      	movs	r1, #10
 8013d18:	fb01 2909 	mla	r9, r1, r9, r2
 8013d1c:	2100      	movs	r1, #0
 8013d1e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013d20:	1c50      	adds	r0, r2, #1
 8013d22:	9011      	str	r0, [sp, #68]	@ 0x44
 8013d24:	7852      	ldrb	r2, [r2, #1]
 8013d26:	4608      	mov	r0, r1
 8013d28:	e7c9      	b.n	8013cbe <_strtod_l+0x1de>
 8013d2a:	4628      	mov	r0, r5
 8013d2c:	e7d2      	b.n	8013cd4 <_strtod_l+0x1f4>
 8013d2e:	f1bc 0f08 	cmp.w	ip, #8
 8013d32:	dc03      	bgt.n	8013d3c <_strtod_l+0x25c>
 8013d34:	fb0e f909 	mul.w	r9, lr, r9
 8013d38:	46a4      	mov	ip, r4
 8013d3a:	e7df      	b.n	8013cfc <_strtod_l+0x21c>
 8013d3c:	2c10      	cmp	r4, #16
 8013d3e:	bfde      	ittt	le
 8013d40:	9e06      	ldrle	r6, [sp, #24]
 8013d42:	fb0e f606 	mulle.w	r6, lr, r6
 8013d46:	9606      	strle	r6, [sp, #24]
 8013d48:	e7f6      	b.n	8013d38 <_strtod_l+0x258>
 8013d4a:	290f      	cmp	r1, #15
 8013d4c:	bfdf      	itttt	le
 8013d4e:	9806      	ldrle	r0, [sp, #24]
 8013d50:	210a      	movle	r1, #10
 8013d52:	fb01 2200 	mlale	r2, r1, r0, r2
 8013d56:	9206      	strle	r2, [sp, #24]
 8013d58:	e7e0      	b.n	8013d1c <_strtod_l+0x23c>
 8013d5a:	2700      	movs	r7, #0
 8013d5c:	2101      	movs	r1, #1
 8013d5e:	e77d      	b.n	8013c5c <_strtod_l+0x17c>
 8013d60:	f04f 0e00 	mov.w	lr, #0
 8013d64:	f108 0202 	add.w	r2, r8, #2
 8013d68:	9211      	str	r2, [sp, #68]	@ 0x44
 8013d6a:	f898 2002 	ldrb.w	r2, [r8, #2]
 8013d6e:	e786      	b.n	8013c7e <_strtod_l+0x19e>
 8013d70:	f04f 0e01 	mov.w	lr, #1
 8013d74:	e7f6      	b.n	8013d64 <_strtod_l+0x284>
 8013d76:	bf00      	nop
 8013d78:	080175d4 	.word	0x080175d4
 8013d7c:	080173ed 	.word	0x080173ed
 8013d80:	7ff00000 	.word	0x7ff00000
 8013d84:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013d86:	1c54      	adds	r4, r2, #1
 8013d88:	9411      	str	r4, [sp, #68]	@ 0x44
 8013d8a:	7852      	ldrb	r2, [r2, #1]
 8013d8c:	2a30      	cmp	r2, #48	@ 0x30
 8013d8e:	d0f9      	beq.n	8013d84 <_strtod_l+0x2a4>
 8013d90:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8013d94:	2c08      	cmp	r4, #8
 8013d96:	f63f af79 	bhi.w	8013c8c <_strtod_l+0x1ac>
 8013d9a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8013d9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013da0:	9209      	str	r2, [sp, #36]	@ 0x24
 8013da2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013da4:	1c54      	adds	r4, r2, #1
 8013da6:	9411      	str	r4, [sp, #68]	@ 0x44
 8013da8:	7852      	ldrb	r2, [r2, #1]
 8013daa:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8013dae:	2e09      	cmp	r6, #9
 8013db0:	d937      	bls.n	8013e22 <_strtod_l+0x342>
 8013db2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8013db4:	1ba4      	subs	r4, r4, r6
 8013db6:	2c08      	cmp	r4, #8
 8013db8:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8013dbc:	dc02      	bgt.n	8013dc4 <_strtod_l+0x2e4>
 8013dbe:	4564      	cmp	r4, ip
 8013dc0:	bfa8      	it	ge
 8013dc2:	4664      	movge	r4, ip
 8013dc4:	f1be 0f00 	cmp.w	lr, #0
 8013dc8:	d000      	beq.n	8013dcc <_strtod_l+0x2ec>
 8013dca:	4264      	negs	r4, r4
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d14d      	bne.n	8013e6c <_strtod_l+0x38c>
 8013dd0:	9b07      	ldr	r3, [sp, #28]
 8013dd2:	4318      	orrs	r0, r3
 8013dd4:	f47f aebf 	bne.w	8013b56 <_strtod_l+0x76>
 8013dd8:	2900      	cmp	r1, #0
 8013dda:	f47f aed8 	bne.w	8013b8e <_strtod_l+0xae>
 8013dde:	2a69      	cmp	r2, #105	@ 0x69
 8013de0:	d027      	beq.n	8013e32 <_strtod_l+0x352>
 8013de2:	dc24      	bgt.n	8013e2e <_strtod_l+0x34e>
 8013de4:	2a49      	cmp	r2, #73	@ 0x49
 8013de6:	d024      	beq.n	8013e32 <_strtod_l+0x352>
 8013de8:	2a4e      	cmp	r2, #78	@ 0x4e
 8013dea:	f47f aed0 	bne.w	8013b8e <_strtod_l+0xae>
 8013dee:	4997      	ldr	r1, [pc, #604]	@ (801404c <_strtod_l+0x56c>)
 8013df0:	a811      	add	r0, sp, #68	@ 0x44
 8013df2:	f001 fef5 	bl	8015be0 <__match>
 8013df6:	2800      	cmp	r0, #0
 8013df8:	f43f aec9 	beq.w	8013b8e <_strtod_l+0xae>
 8013dfc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013dfe:	781b      	ldrb	r3, [r3, #0]
 8013e00:	2b28      	cmp	r3, #40	@ 0x28
 8013e02:	d12d      	bne.n	8013e60 <_strtod_l+0x380>
 8013e04:	4992      	ldr	r1, [pc, #584]	@ (8014050 <_strtod_l+0x570>)
 8013e06:	aa14      	add	r2, sp, #80	@ 0x50
 8013e08:	a811      	add	r0, sp, #68	@ 0x44
 8013e0a:	f001 fefd 	bl	8015c08 <__hexnan>
 8013e0e:	2805      	cmp	r0, #5
 8013e10:	d126      	bne.n	8013e60 <_strtod_l+0x380>
 8013e12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013e14:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8013e18:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013e1c:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013e20:	e699      	b.n	8013b56 <_strtod_l+0x76>
 8013e22:	240a      	movs	r4, #10
 8013e24:	fb04 2c0c 	mla	ip, r4, ip, r2
 8013e28:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8013e2c:	e7b9      	b.n	8013da2 <_strtod_l+0x2c2>
 8013e2e:	2a6e      	cmp	r2, #110	@ 0x6e
 8013e30:	e7db      	b.n	8013dea <_strtod_l+0x30a>
 8013e32:	4988      	ldr	r1, [pc, #544]	@ (8014054 <_strtod_l+0x574>)
 8013e34:	a811      	add	r0, sp, #68	@ 0x44
 8013e36:	f001 fed3 	bl	8015be0 <__match>
 8013e3a:	2800      	cmp	r0, #0
 8013e3c:	f43f aea7 	beq.w	8013b8e <_strtod_l+0xae>
 8013e40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013e42:	4985      	ldr	r1, [pc, #532]	@ (8014058 <_strtod_l+0x578>)
 8013e44:	3b01      	subs	r3, #1
 8013e46:	a811      	add	r0, sp, #68	@ 0x44
 8013e48:	9311      	str	r3, [sp, #68]	@ 0x44
 8013e4a:	f001 fec9 	bl	8015be0 <__match>
 8013e4e:	b910      	cbnz	r0, 8013e56 <_strtod_l+0x376>
 8013e50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013e52:	3301      	adds	r3, #1
 8013e54:	9311      	str	r3, [sp, #68]	@ 0x44
 8013e56:	f8df b214 	ldr.w	fp, [pc, #532]	@ 801406c <_strtod_l+0x58c>
 8013e5a:	f04f 0a00 	mov.w	sl, #0
 8013e5e:	e67a      	b.n	8013b56 <_strtod_l+0x76>
 8013e60:	487e      	ldr	r0, [pc, #504]	@ (801405c <_strtod_l+0x57c>)
 8013e62:	f001 fbf9 	bl	8015658 <nan>
 8013e66:	ec5b ab10 	vmov	sl, fp, d0
 8013e6a:	e674      	b.n	8013b56 <_strtod_l+0x76>
 8013e6c:	ee07 9a90 	vmov	s15, r9
 8013e70:	1be2      	subs	r2, r4, r7
 8013e72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013e76:	2d00      	cmp	r5, #0
 8013e78:	bf08      	it	eq
 8013e7a:	461d      	moveq	r5, r3
 8013e7c:	2b10      	cmp	r3, #16
 8013e7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e80:	461a      	mov	r2, r3
 8013e82:	bfa8      	it	ge
 8013e84:	2210      	movge	r2, #16
 8013e86:	2b09      	cmp	r3, #9
 8013e88:	ec5b ab17 	vmov	sl, fp, d7
 8013e8c:	dc15      	bgt.n	8013eba <_strtod_l+0x3da>
 8013e8e:	1be1      	subs	r1, r4, r7
 8013e90:	2900      	cmp	r1, #0
 8013e92:	f43f ae60 	beq.w	8013b56 <_strtod_l+0x76>
 8013e96:	eba4 0107 	sub.w	r1, r4, r7
 8013e9a:	dd72      	ble.n	8013f82 <_strtod_l+0x4a2>
 8013e9c:	2916      	cmp	r1, #22
 8013e9e:	dc59      	bgt.n	8013f54 <_strtod_l+0x474>
 8013ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8014060 <_strtod_l+0x580>)
 8013ea2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013ea8:	ed93 7b00 	vldr	d7, [r3]
 8013eac:	ec4b ab16 	vmov	d6, sl, fp
 8013eb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013eb4:	ec5b ab17 	vmov	sl, fp, d7
 8013eb8:	e64d      	b.n	8013b56 <_strtod_l+0x76>
 8013eba:	4969      	ldr	r1, [pc, #420]	@ (8014060 <_strtod_l+0x580>)
 8013ebc:	eddd 6a06 	vldr	s13, [sp, #24]
 8013ec0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013ec4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8013ec8:	2b0f      	cmp	r3, #15
 8013eca:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8013ece:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013ed2:	ec5b ab16 	vmov	sl, fp, d6
 8013ed6:	ddda      	ble.n	8013e8e <_strtod_l+0x3ae>
 8013ed8:	1a9a      	subs	r2, r3, r2
 8013eda:	1be1      	subs	r1, r4, r7
 8013edc:	440a      	add	r2, r1
 8013ede:	2a00      	cmp	r2, #0
 8013ee0:	f340 8094 	ble.w	801400c <_strtod_l+0x52c>
 8013ee4:	f012 000f 	ands.w	r0, r2, #15
 8013ee8:	d00a      	beq.n	8013f00 <_strtod_l+0x420>
 8013eea:	495d      	ldr	r1, [pc, #372]	@ (8014060 <_strtod_l+0x580>)
 8013eec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013ef0:	ed91 7b00 	vldr	d7, [r1]
 8013ef4:	ec4b ab16 	vmov	d6, sl, fp
 8013ef8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013efc:	ec5b ab17 	vmov	sl, fp, d7
 8013f00:	f032 020f 	bics.w	r2, r2, #15
 8013f04:	d073      	beq.n	8013fee <_strtod_l+0x50e>
 8013f06:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8013f0a:	dd47      	ble.n	8013f9c <_strtod_l+0x4bc>
 8013f0c:	2400      	movs	r4, #0
 8013f0e:	4625      	mov	r5, r4
 8013f10:	9407      	str	r4, [sp, #28]
 8013f12:	4626      	mov	r6, r4
 8013f14:	9a05      	ldr	r2, [sp, #20]
 8013f16:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801406c <_strtod_l+0x58c>
 8013f1a:	2322      	movs	r3, #34	@ 0x22
 8013f1c:	6013      	str	r3, [r2, #0]
 8013f1e:	f04f 0a00 	mov.w	sl, #0
 8013f22:	9b07      	ldr	r3, [sp, #28]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	f43f ae16 	beq.w	8013b56 <_strtod_l+0x76>
 8013f2a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013f2c:	9805      	ldr	r0, [sp, #20]
 8013f2e:	f7ff f955 	bl	80131dc <_Bfree>
 8013f32:	9805      	ldr	r0, [sp, #20]
 8013f34:	4631      	mov	r1, r6
 8013f36:	f7ff f951 	bl	80131dc <_Bfree>
 8013f3a:	9805      	ldr	r0, [sp, #20]
 8013f3c:	4629      	mov	r1, r5
 8013f3e:	f7ff f94d 	bl	80131dc <_Bfree>
 8013f42:	9907      	ldr	r1, [sp, #28]
 8013f44:	9805      	ldr	r0, [sp, #20]
 8013f46:	f7ff f949 	bl	80131dc <_Bfree>
 8013f4a:	9805      	ldr	r0, [sp, #20]
 8013f4c:	4621      	mov	r1, r4
 8013f4e:	f7ff f945 	bl	80131dc <_Bfree>
 8013f52:	e600      	b.n	8013b56 <_strtod_l+0x76>
 8013f54:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8013f58:	1be0      	subs	r0, r4, r7
 8013f5a:	4281      	cmp	r1, r0
 8013f5c:	dbbc      	blt.n	8013ed8 <_strtod_l+0x3f8>
 8013f5e:	4a40      	ldr	r2, [pc, #256]	@ (8014060 <_strtod_l+0x580>)
 8013f60:	f1c3 030f 	rsb	r3, r3, #15
 8013f64:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013f68:	ed91 7b00 	vldr	d7, [r1]
 8013f6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013f6e:	ec4b ab16 	vmov	d6, sl, fp
 8013f72:	1acb      	subs	r3, r1, r3
 8013f74:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013f78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013f7c:	ed92 6b00 	vldr	d6, [r2]
 8013f80:	e796      	b.n	8013eb0 <_strtod_l+0x3d0>
 8013f82:	3116      	adds	r1, #22
 8013f84:	dba8      	blt.n	8013ed8 <_strtod_l+0x3f8>
 8013f86:	4b36      	ldr	r3, [pc, #216]	@ (8014060 <_strtod_l+0x580>)
 8013f88:	1b3c      	subs	r4, r7, r4
 8013f8a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013f8e:	ed94 7b00 	vldr	d7, [r4]
 8013f92:	ec4b ab16 	vmov	d6, sl, fp
 8013f96:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013f9a:	e78b      	b.n	8013eb4 <_strtod_l+0x3d4>
 8013f9c:	2000      	movs	r0, #0
 8013f9e:	ec4b ab17 	vmov	d7, sl, fp
 8013fa2:	4e30      	ldr	r6, [pc, #192]	@ (8014064 <_strtod_l+0x584>)
 8013fa4:	1112      	asrs	r2, r2, #4
 8013fa6:	4601      	mov	r1, r0
 8013fa8:	2a01      	cmp	r2, #1
 8013faa:	dc23      	bgt.n	8013ff4 <_strtod_l+0x514>
 8013fac:	b108      	cbz	r0, 8013fb2 <_strtod_l+0x4d2>
 8013fae:	ec5b ab17 	vmov	sl, fp, d7
 8013fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8014064 <_strtod_l+0x584>)
 8013fb4:	482c      	ldr	r0, [pc, #176]	@ (8014068 <_strtod_l+0x588>)
 8013fb6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013fba:	ed92 7b00 	vldr	d7, [r2]
 8013fbe:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013fc2:	ec4b ab16 	vmov	d6, sl, fp
 8013fc6:	4a29      	ldr	r2, [pc, #164]	@ (801406c <_strtod_l+0x58c>)
 8013fc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013fcc:	ee17 1a90 	vmov	r1, s15
 8013fd0:	400a      	ands	r2, r1
 8013fd2:	4282      	cmp	r2, r0
 8013fd4:	ec5b ab17 	vmov	sl, fp, d7
 8013fd8:	d898      	bhi.n	8013f0c <_strtod_l+0x42c>
 8013fda:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8013fde:	4282      	cmp	r2, r0
 8013fe0:	bf86      	itte	hi
 8013fe2:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8014070 <_strtod_l+0x590>
 8013fe6:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8013fea:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8013fee:	2200      	movs	r2, #0
 8013ff0:	9206      	str	r2, [sp, #24]
 8013ff2:	e076      	b.n	80140e2 <_strtod_l+0x602>
 8013ff4:	f012 0f01 	tst.w	r2, #1
 8013ff8:	d004      	beq.n	8014004 <_strtod_l+0x524>
 8013ffa:	ed96 6b00 	vldr	d6, [r6]
 8013ffe:	2001      	movs	r0, #1
 8014000:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014004:	3101      	adds	r1, #1
 8014006:	1052      	asrs	r2, r2, #1
 8014008:	3608      	adds	r6, #8
 801400a:	e7cd      	b.n	8013fa8 <_strtod_l+0x4c8>
 801400c:	d0ef      	beq.n	8013fee <_strtod_l+0x50e>
 801400e:	4252      	negs	r2, r2
 8014010:	f012 000f 	ands.w	r0, r2, #15
 8014014:	d00a      	beq.n	801402c <_strtod_l+0x54c>
 8014016:	4912      	ldr	r1, [pc, #72]	@ (8014060 <_strtod_l+0x580>)
 8014018:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801401c:	ed91 7b00 	vldr	d7, [r1]
 8014020:	ec4b ab16 	vmov	d6, sl, fp
 8014024:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014028:	ec5b ab17 	vmov	sl, fp, d7
 801402c:	1112      	asrs	r2, r2, #4
 801402e:	d0de      	beq.n	8013fee <_strtod_l+0x50e>
 8014030:	2a1f      	cmp	r2, #31
 8014032:	dd1f      	ble.n	8014074 <_strtod_l+0x594>
 8014034:	2400      	movs	r4, #0
 8014036:	4625      	mov	r5, r4
 8014038:	9407      	str	r4, [sp, #28]
 801403a:	4626      	mov	r6, r4
 801403c:	9a05      	ldr	r2, [sp, #20]
 801403e:	2322      	movs	r3, #34	@ 0x22
 8014040:	f04f 0a00 	mov.w	sl, #0
 8014044:	f04f 0b00 	mov.w	fp, #0
 8014048:	6013      	str	r3, [r2, #0]
 801404a:	e76a      	b.n	8013f22 <_strtod_l+0x442>
 801404c:	080172dd 	.word	0x080172dd
 8014050:	080175c0 	.word	0x080175c0
 8014054:	080172d5 	.word	0x080172d5
 8014058:	0801730a 	.word	0x0801730a
 801405c:	0801745e 	.word	0x0801745e
 8014060:	080174f8 	.word	0x080174f8
 8014064:	080174d0 	.word	0x080174d0
 8014068:	7ca00000 	.word	0x7ca00000
 801406c:	7ff00000 	.word	0x7ff00000
 8014070:	7fefffff 	.word	0x7fefffff
 8014074:	f012 0110 	ands.w	r1, r2, #16
 8014078:	bf18      	it	ne
 801407a:	216a      	movne	r1, #106	@ 0x6a
 801407c:	9106      	str	r1, [sp, #24]
 801407e:	ec4b ab17 	vmov	d7, sl, fp
 8014082:	49af      	ldr	r1, [pc, #700]	@ (8014340 <_strtod_l+0x860>)
 8014084:	2000      	movs	r0, #0
 8014086:	07d6      	lsls	r6, r2, #31
 8014088:	d504      	bpl.n	8014094 <_strtod_l+0x5b4>
 801408a:	ed91 6b00 	vldr	d6, [r1]
 801408e:	2001      	movs	r0, #1
 8014090:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014094:	1052      	asrs	r2, r2, #1
 8014096:	f101 0108 	add.w	r1, r1, #8
 801409a:	d1f4      	bne.n	8014086 <_strtod_l+0x5a6>
 801409c:	b108      	cbz	r0, 80140a2 <_strtod_l+0x5c2>
 801409e:	ec5b ab17 	vmov	sl, fp, d7
 80140a2:	9a06      	ldr	r2, [sp, #24]
 80140a4:	b1b2      	cbz	r2, 80140d4 <_strtod_l+0x5f4>
 80140a6:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80140aa:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80140ae:	2a00      	cmp	r2, #0
 80140b0:	4658      	mov	r0, fp
 80140b2:	dd0f      	ble.n	80140d4 <_strtod_l+0x5f4>
 80140b4:	2a1f      	cmp	r2, #31
 80140b6:	dd55      	ble.n	8014164 <_strtod_l+0x684>
 80140b8:	2a34      	cmp	r2, #52	@ 0x34
 80140ba:	bfde      	ittt	le
 80140bc:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 80140c0:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80140c4:	408a      	lslle	r2, r1
 80140c6:	f04f 0a00 	mov.w	sl, #0
 80140ca:	bfcc      	ite	gt
 80140cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80140d0:	ea02 0b00 	andle.w	fp, r2, r0
 80140d4:	ec4b ab17 	vmov	d7, sl, fp
 80140d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80140dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e0:	d0a8      	beq.n	8014034 <_strtod_l+0x554>
 80140e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80140e4:	9805      	ldr	r0, [sp, #20]
 80140e6:	f8cd 9000 	str.w	r9, [sp]
 80140ea:	462a      	mov	r2, r5
 80140ec:	f7ff f8de 	bl	80132ac <__s2b>
 80140f0:	9007      	str	r0, [sp, #28]
 80140f2:	2800      	cmp	r0, #0
 80140f4:	f43f af0a 	beq.w	8013f0c <_strtod_l+0x42c>
 80140f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140fa:	1b3f      	subs	r7, r7, r4
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	bfb4      	ite	lt
 8014100:	463b      	movlt	r3, r7
 8014102:	2300      	movge	r3, #0
 8014104:	930a      	str	r3, [sp, #40]	@ 0x28
 8014106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014108:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8014330 <_strtod_l+0x850>
 801410c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014110:	2400      	movs	r4, #0
 8014112:	930d      	str	r3, [sp, #52]	@ 0x34
 8014114:	4625      	mov	r5, r4
 8014116:	9b07      	ldr	r3, [sp, #28]
 8014118:	9805      	ldr	r0, [sp, #20]
 801411a:	6859      	ldr	r1, [r3, #4]
 801411c:	f7ff f81e 	bl	801315c <_Balloc>
 8014120:	4606      	mov	r6, r0
 8014122:	2800      	cmp	r0, #0
 8014124:	f43f aef6 	beq.w	8013f14 <_strtod_l+0x434>
 8014128:	9b07      	ldr	r3, [sp, #28]
 801412a:	691a      	ldr	r2, [r3, #16]
 801412c:	ec4b ab19 	vmov	d9, sl, fp
 8014130:	3202      	adds	r2, #2
 8014132:	f103 010c 	add.w	r1, r3, #12
 8014136:	0092      	lsls	r2, r2, #2
 8014138:	300c      	adds	r0, #12
 801413a:	f7fe f914 	bl	8012366 <memcpy>
 801413e:	eeb0 0b49 	vmov.f64	d0, d9
 8014142:	9805      	ldr	r0, [sp, #20]
 8014144:	aa14      	add	r2, sp, #80	@ 0x50
 8014146:	a913      	add	r1, sp, #76	@ 0x4c
 8014148:	f7ff fbe4 	bl	8013914 <__d2b>
 801414c:	9012      	str	r0, [sp, #72]	@ 0x48
 801414e:	2800      	cmp	r0, #0
 8014150:	f43f aee0 	beq.w	8013f14 <_strtod_l+0x434>
 8014154:	9805      	ldr	r0, [sp, #20]
 8014156:	2101      	movs	r1, #1
 8014158:	f7ff f93e 	bl	80133d8 <__i2b>
 801415c:	4605      	mov	r5, r0
 801415e:	b940      	cbnz	r0, 8014172 <_strtod_l+0x692>
 8014160:	2500      	movs	r5, #0
 8014162:	e6d7      	b.n	8013f14 <_strtod_l+0x434>
 8014164:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8014168:	fa01 f202 	lsl.w	r2, r1, r2
 801416c:	ea02 0a0a 	and.w	sl, r2, sl
 8014170:	e7b0      	b.n	80140d4 <_strtod_l+0x5f4>
 8014172:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8014174:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014176:	2f00      	cmp	r7, #0
 8014178:	bfab      	itete	ge
 801417a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 801417c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801417e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8014182:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8014186:	bfac      	ite	ge
 8014188:	eb07 0903 	addge.w	r9, r7, r3
 801418c:	eba3 0807 	sublt.w	r8, r3, r7
 8014190:	9b06      	ldr	r3, [sp, #24]
 8014192:	1aff      	subs	r7, r7, r3
 8014194:	4417      	add	r7, r2
 8014196:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801419a:	4a6a      	ldr	r2, [pc, #424]	@ (8014344 <_strtod_l+0x864>)
 801419c:	3f01      	subs	r7, #1
 801419e:	4297      	cmp	r7, r2
 80141a0:	da51      	bge.n	8014246 <_strtod_l+0x766>
 80141a2:	1bd1      	subs	r1, r2, r7
 80141a4:	291f      	cmp	r1, #31
 80141a6:	eba3 0301 	sub.w	r3, r3, r1
 80141aa:	f04f 0201 	mov.w	r2, #1
 80141ae:	dc3e      	bgt.n	801422e <_strtod_l+0x74e>
 80141b0:	408a      	lsls	r2, r1
 80141b2:	920c      	str	r2, [sp, #48]	@ 0x30
 80141b4:	2200      	movs	r2, #0
 80141b6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80141b8:	eb09 0703 	add.w	r7, r9, r3
 80141bc:	4498      	add	r8, r3
 80141be:	9b06      	ldr	r3, [sp, #24]
 80141c0:	45b9      	cmp	r9, r7
 80141c2:	4498      	add	r8, r3
 80141c4:	464b      	mov	r3, r9
 80141c6:	bfa8      	it	ge
 80141c8:	463b      	movge	r3, r7
 80141ca:	4543      	cmp	r3, r8
 80141cc:	bfa8      	it	ge
 80141ce:	4643      	movge	r3, r8
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	bfc2      	ittt	gt
 80141d4:	1aff      	subgt	r7, r7, r3
 80141d6:	eba8 0803 	subgt.w	r8, r8, r3
 80141da:	eba9 0903 	subgt.w	r9, r9, r3
 80141de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	dd16      	ble.n	8014212 <_strtod_l+0x732>
 80141e4:	4629      	mov	r1, r5
 80141e6:	9805      	ldr	r0, [sp, #20]
 80141e8:	461a      	mov	r2, r3
 80141ea:	f7ff f9ad 	bl	8013548 <__pow5mult>
 80141ee:	4605      	mov	r5, r0
 80141f0:	2800      	cmp	r0, #0
 80141f2:	d0b5      	beq.n	8014160 <_strtod_l+0x680>
 80141f4:	4601      	mov	r1, r0
 80141f6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80141f8:	9805      	ldr	r0, [sp, #20]
 80141fa:	f7ff f903 	bl	8013404 <__multiply>
 80141fe:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014200:	2800      	cmp	r0, #0
 8014202:	f43f ae87 	beq.w	8013f14 <_strtod_l+0x434>
 8014206:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014208:	9805      	ldr	r0, [sp, #20]
 801420a:	f7fe ffe7 	bl	80131dc <_Bfree>
 801420e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014210:	9312      	str	r3, [sp, #72]	@ 0x48
 8014212:	2f00      	cmp	r7, #0
 8014214:	dc1b      	bgt.n	801424e <_strtod_l+0x76e>
 8014216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014218:	2b00      	cmp	r3, #0
 801421a:	dd21      	ble.n	8014260 <_strtod_l+0x780>
 801421c:	4631      	mov	r1, r6
 801421e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014220:	9805      	ldr	r0, [sp, #20]
 8014222:	f7ff f991 	bl	8013548 <__pow5mult>
 8014226:	4606      	mov	r6, r0
 8014228:	b9d0      	cbnz	r0, 8014260 <_strtod_l+0x780>
 801422a:	2600      	movs	r6, #0
 801422c:	e672      	b.n	8013f14 <_strtod_l+0x434>
 801422e:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8014232:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8014236:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 801423a:	37e2      	adds	r7, #226	@ 0xe2
 801423c:	fa02 f107 	lsl.w	r1, r2, r7
 8014240:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014242:	920c      	str	r2, [sp, #48]	@ 0x30
 8014244:	e7b8      	b.n	80141b8 <_strtod_l+0x6d8>
 8014246:	2200      	movs	r2, #0
 8014248:	920b      	str	r2, [sp, #44]	@ 0x2c
 801424a:	2201      	movs	r2, #1
 801424c:	e7f9      	b.n	8014242 <_strtod_l+0x762>
 801424e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014250:	9805      	ldr	r0, [sp, #20]
 8014252:	463a      	mov	r2, r7
 8014254:	f7ff f9d2 	bl	80135fc <__lshift>
 8014258:	9012      	str	r0, [sp, #72]	@ 0x48
 801425a:	2800      	cmp	r0, #0
 801425c:	d1db      	bne.n	8014216 <_strtod_l+0x736>
 801425e:	e659      	b.n	8013f14 <_strtod_l+0x434>
 8014260:	f1b8 0f00 	cmp.w	r8, #0
 8014264:	dd07      	ble.n	8014276 <_strtod_l+0x796>
 8014266:	4631      	mov	r1, r6
 8014268:	9805      	ldr	r0, [sp, #20]
 801426a:	4642      	mov	r2, r8
 801426c:	f7ff f9c6 	bl	80135fc <__lshift>
 8014270:	4606      	mov	r6, r0
 8014272:	2800      	cmp	r0, #0
 8014274:	d0d9      	beq.n	801422a <_strtod_l+0x74a>
 8014276:	f1b9 0f00 	cmp.w	r9, #0
 801427a:	dd08      	ble.n	801428e <_strtod_l+0x7ae>
 801427c:	4629      	mov	r1, r5
 801427e:	9805      	ldr	r0, [sp, #20]
 8014280:	464a      	mov	r2, r9
 8014282:	f7ff f9bb 	bl	80135fc <__lshift>
 8014286:	4605      	mov	r5, r0
 8014288:	2800      	cmp	r0, #0
 801428a:	f43f ae43 	beq.w	8013f14 <_strtod_l+0x434>
 801428e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014290:	9805      	ldr	r0, [sp, #20]
 8014292:	4632      	mov	r2, r6
 8014294:	f7ff fa3a 	bl	801370c <__mdiff>
 8014298:	4604      	mov	r4, r0
 801429a:	2800      	cmp	r0, #0
 801429c:	f43f ae3a 	beq.w	8013f14 <_strtod_l+0x434>
 80142a0:	2300      	movs	r3, #0
 80142a2:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80142a6:	60c3      	str	r3, [r0, #12]
 80142a8:	4629      	mov	r1, r5
 80142aa:	f7ff fa13 	bl	80136d4 <__mcmp>
 80142ae:	2800      	cmp	r0, #0
 80142b0:	da4c      	bge.n	801434c <_strtod_l+0x86c>
 80142b2:	ea58 080a 	orrs.w	r8, r8, sl
 80142b6:	d172      	bne.n	801439e <_strtod_l+0x8be>
 80142b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d16e      	bne.n	801439e <_strtod_l+0x8be>
 80142c0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80142c4:	0d1b      	lsrs	r3, r3, #20
 80142c6:	051b      	lsls	r3, r3, #20
 80142c8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80142cc:	d967      	bls.n	801439e <_strtod_l+0x8be>
 80142ce:	6963      	ldr	r3, [r4, #20]
 80142d0:	b913      	cbnz	r3, 80142d8 <_strtod_l+0x7f8>
 80142d2:	6923      	ldr	r3, [r4, #16]
 80142d4:	2b01      	cmp	r3, #1
 80142d6:	dd62      	ble.n	801439e <_strtod_l+0x8be>
 80142d8:	4621      	mov	r1, r4
 80142da:	2201      	movs	r2, #1
 80142dc:	9805      	ldr	r0, [sp, #20]
 80142de:	f7ff f98d 	bl	80135fc <__lshift>
 80142e2:	4629      	mov	r1, r5
 80142e4:	4604      	mov	r4, r0
 80142e6:	f7ff f9f5 	bl	80136d4 <__mcmp>
 80142ea:	2800      	cmp	r0, #0
 80142ec:	dd57      	ble.n	801439e <_strtod_l+0x8be>
 80142ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80142f2:	9a06      	ldr	r2, [sp, #24]
 80142f4:	0d1b      	lsrs	r3, r3, #20
 80142f6:	051b      	lsls	r3, r3, #20
 80142f8:	2a00      	cmp	r2, #0
 80142fa:	d06e      	beq.n	80143da <_strtod_l+0x8fa>
 80142fc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014300:	d86b      	bhi.n	80143da <_strtod_l+0x8fa>
 8014302:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8014306:	f67f ae99 	bls.w	801403c <_strtod_l+0x55c>
 801430a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8014338 <_strtod_l+0x858>
 801430e:	ec4b ab16 	vmov	d6, sl, fp
 8014312:	4b0d      	ldr	r3, [pc, #52]	@ (8014348 <_strtod_l+0x868>)
 8014314:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014318:	ee17 2a90 	vmov	r2, s15
 801431c:	4013      	ands	r3, r2
 801431e:	ec5b ab17 	vmov	sl, fp, d7
 8014322:	2b00      	cmp	r3, #0
 8014324:	f47f ae01 	bne.w	8013f2a <_strtod_l+0x44a>
 8014328:	9a05      	ldr	r2, [sp, #20]
 801432a:	2322      	movs	r3, #34	@ 0x22
 801432c:	6013      	str	r3, [r2, #0]
 801432e:	e5fc      	b.n	8013f2a <_strtod_l+0x44a>
 8014330:	ffc00000 	.word	0xffc00000
 8014334:	41dfffff 	.word	0x41dfffff
 8014338:	00000000 	.word	0x00000000
 801433c:	39500000 	.word	0x39500000
 8014340:	080175e8 	.word	0x080175e8
 8014344:	fffffc02 	.word	0xfffffc02
 8014348:	7ff00000 	.word	0x7ff00000
 801434c:	46d9      	mov	r9, fp
 801434e:	d15d      	bne.n	801440c <_strtod_l+0x92c>
 8014350:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014354:	f1b8 0f00 	cmp.w	r8, #0
 8014358:	d02a      	beq.n	80143b0 <_strtod_l+0x8d0>
 801435a:	4aa9      	ldr	r2, [pc, #676]	@ (8014600 <_strtod_l+0xb20>)
 801435c:	4293      	cmp	r3, r2
 801435e:	d12a      	bne.n	80143b6 <_strtod_l+0x8d6>
 8014360:	9b06      	ldr	r3, [sp, #24]
 8014362:	4652      	mov	r2, sl
 8014364:	b1fb      	cbz	r3, 80143a6 <_strtod_l+0x8c6>
 8014366:	4ba7      	ldr	r3, [pc, #668]	@ (8014604 <_strtod_l+0xb24>)
 8014368:	ea0b 0303 	and.w	r3, fp, r3
 801436c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8014370:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8014374:	d81a      	bhi.n	80143ac <_strtod_l+0x8cc>
 8014376:	0d1b      	lsrs	r3, r3, #20
 8014378:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801437c:	fa01 f303 	lsl.w	r3, r1, r3
 8014380:	429a      	cmp	r2, r3
 8014382:	d118      	bne.n	80143b6 <_strtod_l+0x8d6>
 8014384:	4ba0      	ldr	r3, [pc, #640]	@ (8014608 <_strtod_l+0xb28>)
 8014386:	4599      	cmp	r9, r3
 8014388:	d102      	bne.n	8014390 <_strtod_l+0x8b0>
 801438a:	3201      	adds	r2, #1
 801438c:	f43f adc2 	beq.w	8013f14 <_strtod_l+0x434>
 8014390:	4b9c      	ldr	r3, [pc, #624]	@ (8014604 <_strtod_l+0xb24>)
 8014392:	ea09 0303 	and.w	r3, r9, r3
 8014396:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801439a:	f04f 0a00 	mov.w	sl, #0
 801439e:	9b06      	ldr	r3, [sp, #24]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d1b2      	bne.n	801430a <_strtod_l+0x82a>
 80143a4:	e5c1      	b.n	8013f2a <_strtod_l+0x44a>
 80143a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80143aa:	e7e9      	b.n	8014380 <_strtod_l+0x8a0>
 80143ac:	460b      	mov	r3, r1
 80143ae:	e7e7      	b.n	8014380 <_strtod_l+0x8a0>
 80143b0:	ea53 030a 	orrs.w	r3, r3, sl
 80143b4:	d09b      	beq.n	80142ee <_strtod_l+0x80e>
 80143b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80143b8:	b1c3      	cbz	r3, 80143ec <_strtod_l+0x90c>
 80143ba:	ea13 0f09 	tst.w	r3, r9
 80143be:	d0ee      	beq.n	801439e <_strtod_l+0x8be>
 80143c0:	9a06      	ldr	r2, [sp, #24]
 80143c2:	4650      	mov	r0, sl
 80143c4:	4659      	mov	r1, fp
 80143c6:	f1b8 0f00 	cmp.w	r8, #0
 80143ca:	d013      	beq.n	80143f4 <_strtod_l+0x914>
 80143cc:	f7ff fb6d 	bl	8013aaa <sulp>
 80143d0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80143d4:	ec5b ab17 	vmov	sl, fp, d7
 80143d8:	e7e1      	b.n	801439e <_strtod_l+0x8be>
 80143da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80143de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80143e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80143e6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80143ea:	e7d8      	b.n	801439e <_strtod_l+0x8be>
 80143ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80143ee:	ea13 0f0a 	tst.w	r3, sl
 80143f2:	e7e4      	b.n	80143be <_strtod_l+0x8de>
 80143f4:	f7ff fb59 	bl	8013aaa <sulp>
 80143f8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80143fc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8014400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014404:	ec5b ab10 	vmov	sl, fp, d0
 8014408:	d1c9      	bne.n	801439e <_strtod_l+0x8be>
 801440a:	e617      	b.n	801403c <_strtod_l+0x55c>
 801440c:	4629      	mov	r1, r5
 801440e:	4620      	mov	r0, r4
 8014410:	f7ff fad8 	bl	80139c4 <__ratio>
 8014414:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8014418:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801441c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014420:	d85d      	bhi.n	80144de <_strtod_l+0x9fe>
 8014422:	f1b8 0f00 	cmp.w	r8, #0
 8014426:	d164      	bne.n	80144f2 <_strtod_l+0xa12>
 8014428:	f1ba 0f00 	cmp.w	sl, #0
 801442c:	d14b      	bne.n	80144c6 <_strtod_l+0x9e6>
 801442e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014432:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8014436:	2b00      	cmp	r3, #0
 8014438:	d160      	bne.n	80144fc <_strtod_l+0xa1c>
 801443a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801443e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8014442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014446:	d401      	bmi.n	801444c <_strtod_l+0x96c>
 8014448:	ee20 8b08 	vmul.f64	d8, d0, d8
 801444c:	eeb1 ab48 	vneg.f64	d10, d8
 8014450:	486c      	ldr	r0, [pc, #432]	@ (8014604 <_strtod_l+0xb24>)
 8014452:	496e      	ldr	r1, [pc, #440]	@ (801460c <_strtod_l+0xb2c>)
 8014454:	ea09 0700 	and.w	r7, r9, r0
 8014458:	428f      	cmp	r7, r1
 801445a:	ec53 2b1a 	vmov	r2, r3, d10
 801445e:	d17d      	bne.n	801455c <_strtod_l+0xa7c>
 8014460:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8014464:	ec4b ab1c 	vmov	d12, sl, fp
 8014468:	eeb0 0b4c 	vmov.f64	d0, d12
 801446c:	f7ff f9e2 	bl	8013834 <__ulp>
 8014470:	4864      	ldr	r0, [pc, #400]	@ (8014604 <_strtod_l+0xb24>)
 8014472:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8014476:	ee1c 3a90 	vmov	r3, s25
 801447a:	4a65      	ldr	r2, [pc, #404]	@ (8014610 <_strtod_l+0xb30>)
 801447c:	ea03 0100 	and.w	r1, r3, r0
 8014480:	4291      	cmp	r1, r2
 8014482:	ec5b ab1c 	vmov	sl, fp, d12
 8014486:	d93c      	bls.n	8014502 <_strtod_l+0xa22>
 8014488:	ee19 2a90 	vmov	r2, s19
 801448c:	4b5e      	ldr	r3, [pc, #376]	@ (8014608 <_strtod_l+0xb28>)
 801448e:	429a      	cmp	r2, r3
 8014490:	d104      	bne.n	801449c <_strtod_l+0x9bc>
 8014492:	ee19 3a10 	vmov	r3, s18
 8014496:	3301      	adds	r3, #1
 8014498:	f43f ad3c 	beq.w	8013f14 <_strtod_l+0x434>
 801449c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8014608 <_strtod_l+0xb28>
 80144a0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80144a4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80144a6:	9805      	ldr	r0, [sp, #20]
 80144a8:	f7fe fe98 	bl	80131dc <_Bfree>
 80144ac:	9805      	ldr	r0, [sp, #20]
 80144ae:	4631      	mov	r1, r6
 80144b0:	f7fe fe94 	bl	80131dc <_Bfree>
 80144b4:	9805      	ldr	r0, [sp, #20]
 80144b6:	4629      	mov	r1, r5
 80144b8:	f7fe fe90 	bl	80131dc <_Bfree>
 80144bc:	9805      	ldr	r0, [sp, #20]
 80144be:	4621      	mov	r1, r4
 80144c0:	f7fe fe8c 	bl	80131dc <_Bfree>
 80144c4:	e627      	b.n	8014116 <_strtod_l+0x636>
 80144c6:	f1ba 0f01 	cmp.w	sl, #1
 80144ca:	d103      	bne.n	80144d4 <_strtod_l+0x9f4>
 80144cc:	f1bb 0f00 	cmp.w	fp, #0
 80144d0:	f43f adb4 	beq.w	801403c <_strtod_l+0x55c>
 80144d4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80144d8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80144dc:	e7b8      	b.n	8014450 <_strtod_l+0x970>
 80144de:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80144e2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80144e6:	f1b8 0f00 	cmp.w	r8, #0
 80144ea:	d0af      	beq.n	801444c <_strtod_l+0x96c>
 80144ec:	eeb0 ab48 	vmov.f64	d10, d8
 80144f0:	e7ae      	b.n	8014450 <_strtod_l+0x970>
 80144f2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80144f6:	eeb0 8b4a 	vmov.f64	d8, d10
 80144fa:	e7a9      	b.n	8014450 <_strtod_l+0x970>
 80144fc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8014500:	e7a6      	b.n	8014450 <_strtod_l+0x970>
 8014502:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8014506:	9b06      	ldr	r3, [sp, #24]
 8014508:	46d9      	mov	r9, fp
 801450a:	2b00      	cmp	r3, #0
 801450c:	d1ca      	bne.n	80144a4 <_strtod_l+0x9c4>
 801450e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014512:	0d1b      	lsrs	r3, r3, #20
 8014514:	051b      	lsls	r3, r3, #20
 8014516:	429f      	cmp	r7, r3
 8014518:	d1c4      	bne.n	80144a4 <_strtod_l+0x9c4>
 801451a:	ec51 0b18 	vmov	r0, r1, d8
 801451e:	f7ec f91b 	bl	8000758 <__aeabi_d2lz>
 8014522:	f7ec f8eb 	bl	80006fc <__aeabi_l2d>
 8014526:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801452a:	ec41 0b17 	vmov	d7, r0, r1
 801452e:	ea49 090a 	orr.w	r9, r9, sl
 8014532:	ea59 0908 	orrs.w	r9, r9, r8
 8014536:	ee38 8b47 	vsub.f64	d8, d8, d7
 801453a:	d03c      	beq.n	80145b6 <_strtod_l+0xad6>
 801453c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80145e8 <_strtod_l+0xb08>
 8014540:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014548:	f53f acef 	bmi.w	8013f2a <_strtod_l+0x44a>
 801454c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 80145f0 <_strtod_l+0xb10>
 8014550:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014558:	dda4      	ble.n	80144a4 <_strtod_l+0x9c4>
 801455a:	e4e6      	b.n	8013f2a <_strtod_l+0x44a>
 801455c:	9906      	ldr	r1, [sp, #24]
 801455e:	b1e1      	cbz	r1, 801459a <_strtod_l+0xaba>
 8014560:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8014564:	d819      	bhi.n	801459a <_strtod_l+0xaba>
 8014566:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801456a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801456e:	d811      	bhi.n	8014594 <_strtod_l+0xab4>
 8014570:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8014574:	ee18 3a10 	vmov	r3, s16
 8014578:	2b01      	cmp	r3, #1
 801457a:	bf38      	it	cc
 801457c:	2301      	movcc	r3, #1
 801457e:	ee08 3a10 	vmov	s16, r3
 8014582:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8014586:	f1b8 0f00 	cmp.w	r8, #0
 801458a:	d111      	bne.n	80145b0 <_strtod_l+0xad0>
 801458c:	eeb1 7b48 	vneg.f64	d7, d8
 8014590:	ec53 2b17 	vmov	r2, r3, d7
 8014594:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8014598:	1bcb      	subs	r3, r1, r7
 801459a:	eeb0 0b49 	vmov.f64	d0, d9
 801459e:	ec43 2b1a 	vmov	d10, r2, r3
 80145a2:	f7ff f947 	bl	8013834 <__ulp>
 80145a6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80145aa:	ec5b ab19 	vmov	sl, fp, d9
 80145ae:	e7aa      	b.n	8014506 <_strtod_l+0xa26>
 80145b0:	eeb0 7b48 	vmov.f64	d7, d8
 80145b4:	e7ec      	b.n	8014590 <_strtod_l+0xab0>
 80145b6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80145f8 <_strtod_l+0xb18>
 80145ba:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80145be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145c2:	f57f af6f 	bpl.w	80144a4 <_strtod_l+0x9c4>
 80145c6:	e4b0      	b.n	8013f2a <_strtod_l+0x44a>
 80145c8:	2300      	movs	r3, #0
 80145ca:	9308      	str	r3, [sp, #32]
 80145cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80145ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80145d0:	6013      	str	r3, [r2, #0]
 80145d2:	f7ff bac4 	b.w	8013b5e <_strtod_l+0x7e>
 80145d6:	2a65      	cmp	r2, #101	@ 0x65
 80145d8:	f43f abbf 	beq.w	8013d5a <_strtod_l+0x27a>
 80145dc:	2a45      	cmp	r2, #69	@ 0x45
 80145de:	f43f abbc 	beq.w	8013d5a <_strtod_l+0x27a>
 80145e2:	2101      	movs	r1, #1
 80145e4:	f7ff bbf4 	b.w	8013dd0 <_strtod_l+0x2f0>
 80145e8:	94a03595 	.word	0x94a03595
 80145ec:	3fdfffff 	.word	0x3fdfffff
 80145f0:	35afe535 	.word	0x35afe535
 80145f4:	3fe00000 	.word	0x3fe00000
 80145f8:	94a03595 	.word	0x94a03595
 80145fc:	3fcfffff 	.word	0x3fcfffff
 8014600:	000fffff 	.word	0x000fffff
 8014604:	7ff00000 	.word	0x7ff00000
 8014608:	7fefffff 	.word	0x7fefffff
 801460c:	7fe00000 	.word	0x7fe00000
 8014610:	7c9fffff 	.word	0x7c9fffff

08014614 <_strtod_r>:
 8014614:	4b01      	ldr	r3, [pc, #4]	@ (801461c <_strtod_r+0x8>)
 8014616:	f7ff ba63 	b.w	8013ae0 <_strtod_l>
 801461a:	bf00      	nop
 801461c:	24000070 	.word	0x24000070

08014620 <_strtol_l.isra.0>:
 8014620:	2b24      	cmp	r3, #36	@ 0x24
 8014622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014626:	4686      	mov	lr, r0
 8014628:	4690      	mov	r8, r2
 801462a:	d801      	bhi.n	8014630 <_strtol_l.isra.0+0x10>
 801462c:	2b01      	cmp	r3, #1
 801462e:	d106      	bne.n	801463e <_strtol_l.isra.0+0x1e>
 8014630:	f7fd fe6c 	bl	801230c <__errno>
 8014634:	2316      	movs	r3, #22
 8014636:	6003      	str	r3, [r0, #0]
 8014638:	2000      	movs	r0, #0
 801463a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801463e:	4834      	ldr	r0, [pc, #208]	@ (8014710 <_strtol_l.isra.0+0xf0>)
 8014640:	460d      	mov	r5, r1
 8014642:	462a      	mov	r2, r5
 8014644:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014648:	5d06      	ldrb	r6, [r0, r4]
 801464a:	f016 0608 	ands.w	r6, r6, #8
 801464e:	d1f8      	bne.n	8014642 <_strtol_l.isra.0+0x22>
 8014650:	2c2d      	cmp	r4, #45	@ 0x2d
 8014652:	d110      	bne.n	8014676 <_strtol_l.isra.0+0x56>
 8014654:	782c      	ldrb	r4, [r5, #0]
 8014656:	2601      	movs	r6, #1
 8014658:	1c95      	adds	r5, r2, #2
 801465a:	f033 0210 	bics.w	r2, r3, #16
 801465e:	d115      	bne.n	801468c <_strtol_l.isra.0+0x6c>
 8014660:	2c30      	cmp	r4, #48	@ 0x30
 8014662:	d10d      	bne.n	8014680 <_strtol_l.isra.0+0x60>
 8014664:	782a      	ldrb	r2, [r5, #0]
 8014666:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801466a:	2a58      	cmp	r2, #88	@ 0x58
 801466c:	d108      	bne.n	8014680 <_strtol_l.isra.0+0x60>
 801466e:	786c      	ldrb	r4, [r5, #1]
 8014670:	3502      	adds	r5, #2
 8014672:	2310      	movs	r3, #16
 8014674:	e00a      	b.n	801468c <_strtol_l.isra.0+0x6c>
 8014676:	2c2b      	cmp	r4, #43	@ 0x2b
 8014678:	bf04      	itt	eq
 801467a:	782c      	ldrbeq	r4, [r5, #0]
 801467c:	1c95      	addeq	r5, r2, #2
 801467e:	e7ec      	b.n	801465a <_strtol_l.isra.0+0x3a>
 8014680:	2b00      	cmp	r3, #0
 8014682:	d1f6      	bne.n	8014672 <_strtol_l.isra.0+0x52>
 8014684:	2c30      	cmp	r4, #48	@ 0x30
 8014686:	bf14      	ite	ne
 8014688:	230a      	movne	r3, #10
 801468a:	2308      	moveq	r3, #8
 801468c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014690:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8014694:	2200      	movs	r2, #0
 8014696:	fbbc f9f3 	udiv	r9, ip, r3
 801469a:	4610      	mov	r0, r2
 801469c:	fb03 ca19 	mls	sl, r3, r9, ip
 80146a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80146a4:	2f09      	cmp	r7, #9
 80146a6:	d80f      	bhi.n	80146c8 <_strtol_l.isra.0+0xa8>
 80146a8:	463c      	mov	r4, r7
 80146aa:	42a3      	cmp	r3, r4
 80146ac:	dd1b      	ble.n	80146e6 <_strtol_l.isra.0+0xc6>
 80146ae:	1c57      	adds	r7, r2, #1
 80146b0:	d007      	beq.n	80146c2 <_strtol_l.isra.0+0xa2>
 80146b2:	4581      	cmp	r9, r0
 80146b4:	d314      	bcc.n	80146e0 <_strtol_l.isra.0+0xc0>
 80146b6:	d101      	bne.n	80146bc <_strtol_l.isra.0+0x9c>
 80146b8:	45a2      	cmp	sl, r4
 80146ba:	db11      	blt.n	80146e0 <_strtol_l.isra.0+0xc0>
 80146bc:	fb00 4003 	mla	r0, r0, r3, r4
 80146c0:	2201      	movs	r2, #1
 80146c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80146c6:	e7eb      	b.n	80146a0 <_strtol_l.isra.0+0x80>
 80146c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80146cc:	2f19      	cmp	r7, #25
 80146ce:	d801      	bhi.n	80146d4 <_strtol_l.isra.0+0xb4>
 80146d0:	3c37      	subs	r4, #55	@ 0x37
 80146d2:	e7ea      	b.n	80146aa <_strtol_l.isra.0+0x8a>
 80146d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80146d8:	2f19      	cmp	r7, #25
 80146da:	d804      	bhi.n	80146e6 <_strtol_l.isra.0+0xc6>
 80146dc:	3c57      	subs	r4, #87	@ 0x57
 80146de:	e7e4      	b.n	80146aa <_strtol_l.isra.0+0x8a>
 80146e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80146e4:	e7ed      	b.n	80146c2 <_strtol_l.isra.0+0xa2>
 80146e6:	1c53      	adds	r3, r2, #1
 80146e8:	d108      	bne.n	80146fc <_strtol_l.isra.0+0xdc>
 80146ea:	2322      	movs	r3, #34	@ 0x22
 80146ec:	f8ce 3000 	str.w	r3, [lr]
 80146f0:	4660      	mov	r0, ip
 80146f2:	f1b8 0f00 	cmp.w	r8, #0
 80146f6:	d0a0      	beq.n	801463a <_strtol_l.isra.0+0x1a>
 80146f8:	1e69      	subs	r1, r5, #1
 80146fa:	e006      	b.n	801470a <_strtol_l.isra.0+0xea>
 80146fc:	b106      	cbz	r6, 8014700 <_strtol_l.isra.0+0xe0>
 80146fe:	4240      	negs	r0, r0
 8014700:	f1b8 0f00 	cmp.w	r8, #0
 8014704:	d099      	beq.n	801463a <_strtol_l.isra.0+0x1a>
 8014706:	2a00      	cmp	r2, #0
 8014708:	d1f6      	bne.n	80146f8 <_strtol_l.isra.0+0xd8>
 801470a:	f8c8 1000 	str.w	r1, [r8]
 801470e:	e794      	b.n	801463a <_strtol_l.isra.0+0x1a>
 8014710:	08017611 	.word	0x08017611

08014714 <_strtol_r>:
 8014714:	f7ff bf84 	b.w	8014620 <_strtol_l.isra.0>

08014718 <__ssputs_r>:
 8014718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801471c:	688e      	ldr	r6, [r1, #8]
 801471e:	461f      	mov	r7, r3
 8014720:	42be      	cmp	r6, r7
 8014722:	680b      	ldr	r3, [r1, #0]
 8014724:	4682      	mov	sl, r0
 8014726:	460c      	mov	r4, r1
 8014728:	4690      	mov	r8, r2
 801472a:	d82d      	bhi.n	8014788 <__ssputs_r+0x70>
 801472c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014730:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014734:	d026      	beq.n	8014784 <__ssputs_r+0x6c>
 8014736:	6965      	ldr	r5, [r4, #20]
 8014738:	6909      	ldr	r1, [r1, #16]
 801473a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801473e:	eba3 0901 	sub.w	r9, r3, r1
 8014742:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014746:	1c7b      	adds	r3, r7, #1
 8014748:	444b      	add	r3, r9
 801474a:	106d      	asrs	r5, r5, #1
 801474c:	429d      	cmp	r5, r3
 801474e:	bf38      	it	cc
 8014750:	461d      	movcc	r5, r3
 8014752:	0553      	lsls	r3, r2, #21
 8014754:	d527      	bpl.n	80147a6 <__ssputs_r+0x8e>
 8014756:	4629      	mov	r1, r5
 8014758:	f7fe fc74 	bl	8013044 <_malloc_r>
 801475c:	4606      	mov	r6, r0
 801475e:	b360      	cbz	r0, 80147ba <__ssputs_r+0xa2>
 8014760:	6921      	ldr	r1, [r4, #16]
 8014762:	464a      	mov	r2, r9
 8014764:	f7fd fdff 	bl	8012366 <memcpy>
 8014768:	89a3      	ldrh	r3, [r4, #12]
 801476a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801476e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014772:	81a3      	strh	r3, [r4, #12]
 8014774:	6126      	str	r6, [r4, #16]
 8014776:	6165      	str	r5, [r4, #20]
 8014778:	444e      	add	r6, r9
 801477a:	eba5 0509 	sub.w	r5, r5, r9
 801477e:	6026      	str	r6, [r4, #0]
 8014780:	60a5      	str	r5, [r4, #8]
 8014782:	463e      	mov	r6, r7
 8014784:	42be      	cmp	r6, r7
 8014786:	d900      	bls.n	801478a <__ssputs_r+0x72>
 8014788:	463e      	mov	r6, r7
 801478a:	6820      	ldr	r0, [r4, #0]
 801478c:	4632      	mov	r2, r6
 801478e:	4641      	mov	r1, r8
 8014790:	f7fd fd30 	bl	80121f4 <memmove>
 8014794:	68a3      	ldr	r3, [r4, #8]
 8014796:	1b9b      	subs	r3, r3, r6
 8014798:	60a3      	str	r3, [r4, #8]
 801479a:	6823      	ldr	r3, [r4, #0]
 801479c:	4433      	add	r3, r6
 801479e:	6023      	str	r3, [r4, #0]
 80147a0:	2000      	movs	r0, #0
 80147a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147a6:	462a      	mov	r2, r5
 80147a8:	f001 fadb 	bl	8015d62 <_realloc_r>
 80147ac:	4606      	mov	r6, r0
 80147ae:	2800      	cmp	r0, #0
 80147b0:	d1e0      	bne.n	8014774 <__ssputs_r+0x5c>
 80147b2:	6921      	ldr	r1, [r4, #16]
 80147b4:	4650      	mov	r0, sl
 80147b6:	f7fe fbd1 	bl	8012f5c <_free_r>
 80147ba:	230c      	movs	r3, #12
 80147bc:	f8ca 3000 	str.w	r3, [sl]
 80147c0:	89a3      	ldrh	r3, [r4, #12]
 80147c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147c6:	81a3      	strh	r3, [r4, #12]
 80147c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80147cc:	e7e9      	b.n	80147a2 <__ssputs_r+0x8a>
	...

080147d0 <_svfiprintf_r>:
 80147d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147d4:	4698      	mov	r8, r3
 80147d6:	898b      	ldrh	r3, [r1, #12]
 80147d8:	061b      	lsls	r3, r3, #24
 80147da:	b09d      	sub	sp, #116	@ 0x74
 80147dc:	4607      	mov	r7, r0
 80147de:	460d      	mov	r5, r1
 80147e0:	4614      	mov	r4, r2
 80147e2:	d510      	bpl.n	8014806 <_svfiprintf_r+0x36>
 80147e4:	690b      	ldr	r3, [r1, #16]
 80147e6:	b973      	cbnz	r3, 8014806 <_svfiprintf_r+0x36>
 80147e8:	2140      	movs	r1, #64	@ 0x40
 80147ea:	f7fe fc2b 	bl	8013044 <_malloc_r>
 80147ee:	6028      	str	r0, [r5, #0]
 80147f0:	6128      	str	r0, [r5, #16]
 80147f2:	b930      	cbnz	r0, 8014802 <_svfiprintf_r+0x32>
 80147f4:	230c      	movs	r3, #12
 80147f6:	603b      	str	r3, [r7, #0]
 80147f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80147fc:	b01d      	add	sp, #116	@ 0x74
 80147fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014802:	2340      	movs	r3, #64	@ 0x40
 8014804:	616b      	str	r3, [r5, #20]
 8014806:	2300      	movs	r3, #0
 8014808:	9309      	str	r3, [sp, #36]	@ 0x24
 801480a:	2320      	movs	r3, #32
 801480c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014810:	f8cd 800c 	str.w	r8, [sp, #12]
 8014814:	2330      	movs	r3, #48	@ 0x30
 8014816:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80149b4 <_svfiprintf_r+0x1e4>
 801481a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801481e:	f04f 0901 	mov.w	r9, #1
 8014822:	4623      	mov	r3, r4
 8014824:	469a      	mov	sl, r3
 8014826:	f813 2b01 	ldrb.w	r2, [r3], #1
 801482a:	b10a      	cbz	r2, 8014830 <_svfiprintf_r+0x60>
 801482c:	2a25      	cmp	r2, #37	@ 0x25
 801482e:	d1f9      	bne.n	8014824 <_svfiprintf_r+0x54>
 8014830:	ebba 0b04 	subs.w	fp, sl, r4
 8014834:	d00b      	beq.n	801484e <_svfiprintf_r+0x7e>
 8014836:	465b      	mov	r3, fp
 8014838:	4622      	mov	r2, r4
 801483a:	4629      	mov	r1, r5
 801483c:	4638      	mov	r0, r7
 801483e:	f7ff ff6b 	bl	8014718 <__ssputs_r>
 8014842:	3001      	adds	r0, #1
 8014844:	f000 80a7 	beq.w	8014996 <_svfiprintf_r+0x1c6>
 8014848:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801484a:	445a      	add	r2, fp
 801484c:	9209      	str	r2, [sp, #36]	@ 0x24
 801484e:	f89a 3000 	ldrb.w	r3, [sl]
 8014852:	2b00      	cmp	r3, #0
 8014854:	f000 809f 	beq.w	8014996 <_svfiprintf_r+0x1c6>
 8014858:	2300      	movs	r3, #0
 801485a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801485e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014862:	f10a 0a01 	add.w	sl, sl, #1
 8014866:	9304      	str	r3, [sp, #16]
 8014868:	9307      	str	r3, [sp, #28]
 801486a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801486e:	931a      	str	r3, [sp, #104]	@ 0x68
 8014870:	4654      	mov	r4, sl
 8014872:	2205      	movs	r2, #5
 8014874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014878:	484e      	ldr	r0, [pc, #312]	@ (80149b4 <_svfiprintf_r+0x1e4>)
 801487a:	f7eb fd59 	bl	8000330 <memchr>
 801487e:	9a04      	ldr	r2, [sp, #16]
 8014880:	b9d8      	cbnz	r0, 80148ba <_svfiprintf_r+0xea>
 8014882:	06d0      	lsls	r0, r2, #27
 8014884:	bf44      	itt	mi
 8014886:	2320      	movmi	r3, #32
 8014888:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801488c:	0711      	lsls	r1, r2, #28
 801488e:	bf44      	itt	mi
 8014890:	232b      	movmi	r3, #43	@ 0x2b
 8014892:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014896:	f89a 3000 	ldrb.w	r3, [sl]
 801489a:	2b2a      	cmp	r3, #42	@ 0x2a
 801489c:	d015      	beq.n	80148ca <_svfiprintf_r+0xfa>
 801489e:	9a07      	ldr	r2, [sp, #28]
 80148a0:	4654      	mov	r4, sl
 80148a2:	2000      	movs	r0, #0
 80148a4:	f04f 0c0a 	mov.w	ip, #10
 80148a8:	4621      	mov	r1, r4
 80148aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80148ae:	3b30      	subs	r3, #48	@ 0x30
 80148b0:	2b09      	cmp	r3, #9
 80148b2:	d94b      	bls.n	801494c <_svfiprintf_r+0x17c>
 80148b4:	b1b0      	cbz	r0, 80148e4 <_svfiprintf_r+0x114>
 80148b6:	9207      	str	r2, [sp, #28]
 80148b8:	e014      	b.n	80148e4 <_svfiprintf_r+0x114>
 80148ba:	eba0 0308 	sub.w	r3, r0, r8
 80148be:	fa09 f303 	lsl.w	r3, r9, r3
 80148c2:	4313      	orrs	r3, r2
 80148c4:	9304      	str	r3, [sp, #16]
 80148c6:	46a2      	mov	sl, r4
 80148c8:	e7d2      	b.n	8014870 <_svfiprintf_r+0xa0>
 80148ca:	9b03      	ldr	r3, [sp, #12]
 80148cc:	1d19      	adds	r1, r3, #4
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	9103      	str	r1, [sp, #12]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	bfbb      	ittet	lt
 80148d6:	425b      	neglt	r3, r3
 80148d8:	f042 0202 	orrlt.w	r2, r2, #2
 80148dc:	9307      	strge	r3, [sp, #28]
 80148de:	9307      	strlt	r3, [sp, #28]
 80148e0:	bfb8      	it	lt
 80148e2:	9204      	strlt	r2, [sp, #16]
 80148e4:	7823      	ldrb	r3, [r4, #0]
 80148e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80148e8:	d10a      	bne.n	8014900 <_svfiprintf_r+0x130>
 80148ea:	7863      	ldrb	r3, [r4, #1]
 80148ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80148ee:	d132      	bne.n	8014956 <_svfiprintf_r+0x186>
 80148f0:	9b03      	ldr	r3, [sp, #12]
 80148f2:	1d1a      	adds	r2, r3, #4
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	9203      	str	r2, [sp, #12]
 80148f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80148fc:	3402      	adds	r4, #2
 80148fe:	9305      	str	r3, [sp, #20]
 8014900:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80149c4 <_svfiprintf_r+0x1f4>
 8014904:	7821      	ldrb	r1, [r4, #0]
 8014906:	2203      	movs	r2, #3
 8014908:	4650      	mov	r0, sl
 801490a:	f7eb fd11 	bl	8000330 <memchr>
 801490e:	b138      	cbz	r0, 8014920 <_svfiprintf_r+0x150>
 8014910:	9b04      	ldr	r3, [sp, #16]
 8014912:	eba0 000a 	sub.w	r0, r0, sl
 8014916:	2240      	movs	r2, #64	@ 0x40
 8014918:	4082      	lsls	r2, r0
 801491a:	4313      	orrs	r3, r2
 801491c:	3401      	adds	r4, #1
 801491e:	9304      	str	r3, [sp, #16]
 8014920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014924:	4824      	ldr	r0, [pc, #144]	@ (80149b8 <_svfiprintf_r+0x1e8>)
 8014926:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801492a:	2206      	movs	r2, #6
 801492c:	f7eb fd00 	bl	8000330 <memchr>
 8014930:	2800      	cmp	r0, #0
 8014932:	d036      	beq.n	80149a2 <_svfiprintf_r+0x1d2>
 8014934:	4b21      	ldr	r3, [pc, #132]	@ (80149bc <_svfiprintf_r+0x1ec>)
 8014936:	bb1b      	cbnz	r3, 8014980 <_svfiprintf_r+0x1b0>
 8014938:	9b03      	ldr	r3, [sp, #12]
 801493a:	3307      	adds	r3, #7
 801493c:	f023 0307 	bic.w	r3, r3, #7
 8014940:	3308      	adds	r3, #8
 8014942:	9303      	str	r3, [sp, #12]
 8014944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014946:	4433      	add	r3, r6
 8014948:	9309      	str	r3, [sp, #36]	@ 0x24
 801494a:	e76a      	b.n	8014822 <_svfiprintf_r+0x52>
 801494c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014950:	460c      	mov	r4, r1
 8014952:	2001      	movs	r0, #1
 8014954:	e7a8      	b.n	80148a8 <_svfiprintf_r+0xd8>
 8014956:	2300      	movs	r3, #0
 8014958:	3401      	adds	r4, #1
 801495a:	9305      	str	r3, [sp, #20]
 801495c:	4619      	mov	r1, r3
 801495e:	f04f 0c0a 	mov.w	ip, #10
 8014962:	4620      	mov	r0, r4
 8014964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014968:	3a30      	subs	r2, #48	@ 0x30
 801496a:	2a09      	cmp	r2, #9
 801496c:	d903      	bls.n	8014976 <_svfiprintf_r+0x1a6>
 801496e:	2b00      	cmp	r3, #0
 8014970:	d0c6      	beq.n	8014900 <_svfiprintf_r+0x130>
 8014972:	9105      	str	r1, [sp, #20]
 8014974:	e7c4      	b.n	8014900 <_svfiprintf_r+0x130>
 8014976:	fb0c 2101 	mla	r1, ip, r1, r2
 801497a:	4604      	mov	r4, r0
 801497c:	2301      	movs	r3, #1
 801497e:	e7f0      	b.n	8014962 <_svfiprintf_r+0x192>
 8014980:	ab03      	add	r3, sp, #12
 8014982:	9300      	str	r3, [sp, #0]
 8014984:	462a      	mov	r2, r5
 8014986:	4b0e      	ldr	r3, [pc, #56]	@ (80149c0 <_svfiprintf_r+0x1f0>)
 8014988:	a904      	add	r1, sp, #16
 801498a:	4638      	mov	r0, r7
 801498c:	f7fc fc24 	bl	80111d8 <_printf_float>
 8014990:	1c42      	adds	r2, r0, #1
 8014992:	4606      	mov	r6, r0
 8014994:	d1d6      	bne.n	8014944 <_svfiprintf_r+0x174>
 8014996:	89ab      	ldrh	r3, [r5, #12]
 8014998:	065b      	lsls	r3, r3, #25
 801499a:	f53f af2d 	bmi.w	80147f8 <_svfiprintf_r+0x28>
 801499e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80149a0:	e72c      	b.n	80147fc <_svfiprintf_r+0x2c>
 80149a2:	ab03      	add	r3, sp, #12
 80149a4:	9300      	str	r3, [sp, #0]
 80149a6:	462a      	mov	r2, r5
 80149a8:	4b05      	ldr	r3, [pc, #20]	@ (80149c0 <_svfiprintf_r+0x1f0>)
 80149aa:	a904      	add	r1, sp, #16
 80149ac:	4638      	mov	r0, r7
 80149ae:	f7fc fe9b 	bl	80116e8 <_printf_i>
 80149b2:	e7ed      	b.n	8014990 <_svfiprintf_r+0x1c0>
 80149b4:	080173ef 	.word	0x080173ef
 80149b8:	080173f9 	.word	0x080173f9
 80149bc:	080111d9 	.word	0x080111d9
 80149c0:	08014719 	.word	0x08014719
 80149c4:	080173f5 	.word	0x080173f5

080149c8 <_sungetc_r>:
 80149c8:	b538      	push	{r3, r4, r5, lr}
 80149ca:	1c4b      	adds	r3, r1, #1
 80149cc:	4614      	mov	r4, r2
 80149ce:	d103      	bne.n	80149d8 <_sungetc_r+0x10>
 80149d0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80149d4:	4628      	mov	r0, r5
 80149d6:	bd38      	pop	{r3, r4, r5, pc}
 80149d8:	8993      	ldrh	r3, [r2, #12]
 80149da:	f023 0320 	bic.w	r3, r3, #32
 80149de:	8193      	strh	r3, [r2, #12]
 80149e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80149e2:	6852      	ldr	r2, [r2, #4]
 80149e4:	b2cd      	uxtb	r5, r1
 80149e6:	b18b      	cbz	r3, 8014a0c <_sungetc_r+0x44>
 80149e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80149ea:	4293      	cmp	r3, r2
 80149ec:	dd08      	ble.n	8014a00 <_sungetc_r+0x38>
 80149ee:	6823      	ldr	r3, [r4, #0]
 80149f0:	1e5a      	subs	r2, r3, #1
 80149f2:	6022      	str	r2, [r4, #0]
 80149f4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80149f8:	6863      	ldr	r3, [r4, #4]
 80149fa:	3301      	adds	r3, #1
 80149fc:	6063      	str	r3, [r4, #4]
 80149fe:	e7e9      	b.n	80149d4 <_sungetc_r+0xc>
 8014a00:	4621      	mov	r1, r4
 8014a02:	f000 fdbc 	bl	801557e <__submore>
 8014a06:	2800      	cmp	r0, #0
 8014a08:	d0f1      	beq.n	80149ee <_sungetc_r+0x26>
 8014a0a:	e7e1      	b.n	80149d0 <_sungetc_r+0x8>
 8014a0c:	6921      	ldr	r1, [r4, #16]
 8014a0e:	6823      	ldr	r3, [r4, #0]
 8014a10:	b151      	cbz	r1, 8014a28 <_sungetc_r+0x60>
 8014a12:	4299      	cmp	r1, r3
 8014a14:	d208      	bcs.n	8014a28 <_sungetc_r+0x60>
 8014a16:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8014a1a:	42a9      	cmp	r1, r5
 8014a1c:	d104      	bne.n	8014a28 <_sungetc_r+0x60>
 8014a1e:	3b01      	subs	r3, #1
 8014a20:	3201      	adds	r2, #1
 8014a22:	6023      	str	r3, [r4, #0]
 8014a24:	6062      	str	r2, [r4, #4]
 8014a26:	e7d5      	b.n	80149d4 <_sungetc_r+0xc>
 8014a28:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8014a2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014a30:	6363      	str	r3, [r4, #52]	@ 0x34
 8014a32:	2303      	movs	r3, #3
 8014a34:	63a3      	str	r3, [r4, #56]	@ 0x38
 8014a36:	4623      	mov	r3, r4
 8014a38:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014a3c:	6023      	str	r3, [r4, #0]
 8014a3e:	2301      	movs	r3, #1
 8014a40:	e7dc      	b.n	80149fc <_sungetc_r+0x34>

08014a42 <__ssrefill_r>:
 8014a42:	b510      	push	{r4, lr}
 8014a44:	460c      	mov	r4, r1
 8014a46:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014a48:	b169      	cbz	r1, 8014a66 <__ssrefill_r+0x24>
 8014a4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014a4e:	4299      	cmp	r1, r3
 8014a50:	d001      	beq.n	8014a56 <__ssrefill_r+0x14>
 8014a52:	f7fe fa83 	bl	8012f5c <_free_r>
 8014a56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014a58:	6063      	str	r3, [r4, #4]
 8014a5a:	2000      	movs	r0, #0
 8014a5c:	6360      	str	r0, [r4, #52]	@ 0x34
 8014a5e:	b113      	cbz	r3, 8014a66 <__ssrefill_r+0x24>
 8014a60:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8014a62:	6023      	str	r3, [r4, #0]
 8014a64:	bd10      	pop	{r4, pc}
 8014a66:	6923      	ldr	r3, [r4, #16]
 8014a68:	6023      	str	r3, [r4, #0]
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	6063      	str	r3, [r4, #4]
 8014a6e:	89a3      	ldrh	r3, [r4, #12]
 8014a70:	f043 0320 	orr.w	r3, r3, #32
 8014a74:	81a3      	strh	r3, [r4, #12]
 8014a76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014a7a:	e7f3      	b.n	8014a64 <__ssrefill_r+0x22>

08014a7c <__ssvfiscanf_r>:
 8014a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a80:	460c      	mov	r4, r1
 8014a82:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8014a86:	2100      	movs	r1, #0
 8014a88:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8014a8c:	49a6      	ldr	r1, [pc, #664]	@ (8014d28 <__ssvfiscanf_r+0x2ac>)
 8014a8e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8014a90:	f10d 0804 	add.w	r8, sp, #4
 8014a94:	49a5      	ldr	r1, [pc, #660]	@ (8014d2c <__ssvfiscanf_r+0x2b0>)
 8014a96:	4fa6      	ldr	r7, [pc, #664]	@ (8014d30 <__ssvfiscanf_r+0x2b4>)
 8014a98:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8014a9c:	4606      	mov	r6, r0
 8014a9e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8014aa0:	9300      	str	r3, [sp, #0]
 8014aa2:	f892 9000 	ldrb.w	r9, [r2]
 8014aa6:	f1b9 0f00 	cmp.w	r9, #0
 8014aaa:	f000 8158 	beq.w	8014d5e <__ssvfiscanf_r+0x2e2>
 8014aae:	f817 3009 	ldrb.w	r3, [r7, r9]
 8014ab2:	f013 0308 	ands.w	r3, r3, #8
 8014ab6:	f102 0501 	add.w	r5, r2, #1
 8014aba:	d019      	beq.n	8014af0 <__ssvfiscanf_r+0x74>
 8014abc:	6863      	ldr	r3, [r4, #4]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	dd0f      	ble.n	8014ae2 <__ssvfiscanf_r+0x66>
 8014ac2:	6823      	ldr	r3, [r4, #0]
 8014ac4:	781a      	ldrb	r2, [r3, #0]
 8014ac6:	5cba      	ldrb	r2, [r7, r2]
 8014ac8:	0712      	lsls	r2, r2, #28
 8014aca:	d401      	bmi.n	8014ad0 <__ssvfiscanf_r+0x54>
 8014acc:	462a      	mov	r2, r5
 8014ace:	e7e8      	b.n	8014aa2 <__ssvfiscanf_r+0x26>
 8014ad0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8014ad2:	3201      	adds	r2, #1
 8014ad4:	9245      	str	r2, [sp, #276]	@ 0x114
 8014ad6:	6862      	ldr	r2, [r4, #4]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	3a01      	subs	r2, #1
 8014adc:	6062      	str	r2, [r4, #4]
 8014ade:	6023      	str	r3, [r4, #0]
 8014ae0:	e7ec      	b.n	8014abc <__ssvfiscanf_r+0x40>
 8014ae2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014ae4:	4621      	mov	r1, r4
 8014ae6:	4630      	mov	r0, r6
 8014ae8:	4798      	blx	r3
 8014aea:	2800      	cmp	r0, #0
 8014aec:	d0e9      	beq.n	8014ac2 <__ssvfiscanf_r+0x46>
 8014aee:	e7ed      	b.n	8014acc <__ssvfiscanf_r+0x50>
 8014af0:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8014af4:	f040 8085 	bne.w	8014c02 <__ssvfiscanf_r+0x186>
 8014af8:	9341      	str	r3, [sp, #260]	@ 0x104
 8014afa:	9343      	str	r3, [sp, #268]	@ 0x10c
 8014afc:	7853      	ldrb	r3, [r2, #1]
 8014afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b00:	bf02      	ittt	eq
 8014b02:	2310      	moveq	r3, #16
 8014b04:	1c95      	addeq	r5, r2, #2
 8014b06:	9341      	streq	r3, [sp, #260]	@ 0x104
 8014b08:	220a      	movs	r2, #10
 8014b0a:	46aa      	mov	sl, r5
 8014b0c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8014b10:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8014b14:	2b09      	cmp	r3, #9
 8014b16:	d91e      	bls.n	8014b56 <__ssvfiscanf_r+0xda>
 8014b18:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8014d34 <__ssvfiscanf_r+0x2b8>
 8014b1c:	2203      	movs	r2, #3
 8014b1e:	4658      	mov	r0, fp
 8014b20:	f7eb fc06 	bl	8000330 <memchr>
 8014b24:	b138      	cbz	r0, 8014b36 <__ssvfiscanf_r+0xba>
 8014b26:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014b28:	eba0 000b 	sub.w	r0, r0, fp
 8014b2c:	2301      	movs	r3, #1
 8014b2e:	4083      	lsls	r3, r0
 8014b30:	4313      	orrs	r3, r2
 8014b32:	9341      	str	r3, [sp, #260]	@ 0x104
 8014b34:	4655      	mov	r5, sl
 8014b36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014b3a:	2b78      	cmp	r3, #120	@ 0x78
 8014b3c:	d806      	bhi.n	8014b4c <__ssvfiscanf_r+0xd0>
 8014b3e:	2b57      	cmp	r3, #87	@ 0x57
 8014b40:	d810      	bhi.n	8014b64 <__ssvfiscanf_r+0xe8>
 8014b42:	2b25      	cmp	r3, #37	@ 0x25
 8014b44:	d05d      	beq.n	8014c02 <__ssvfiscanf_r+0x186>
 8014b46:	d857      	bhi.n	8014bf8 <__ssvfiscanf_r+0x17c>
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d075      	beq.n	8014c38 <__ssvfiscanf_r+0x1bc>
 8014b4c:	2303      	movs	r3, #3
 8014b4e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8014b50:	230a      	movs	r3, #10
 8014b52:	9342      	str	r3, [sp, #264]	@ 0x108
 8014b54:	e088      	b.n	8014c68 <__ssvfiscanf_r+0x1ec>
 8014b56:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8014b58:	fb02 1103 	mla	r1, r2, r3, r1
 8014b5c:	3930      	subs	r1, #48	@ 0x30
 8014b5e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014b60:	4655      	mov	r5, sl
 8014b62:	e7d2      	b.n	8014b0a <__ssvfiscanf_r+0x8e>
 8014b64:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8014b68:	2a20      	cmp	r2, #32
 8014b6a:	d8ef      	bhi.n	8014b4c <__ssvfiscanf_r+0xd0>
 8014b6c:	a101      	add	r1, pc, #4	@ (adr r1, 8014b74 <__ssvfiscanf_r+0xf8>)
 8014b6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014b72:	bf00      	nop
 8014b74:	08014c47 	.word	0x08014c47
 8014b78:	08014b4d 	.word	0x08014b4d
 8014b7c:	08014b4d 	.word	0x08014b4d
 8014b80:	08014ca1 	.word	0x08014ca1
 8014b84:	08014b4d 	.word	0x08014b4d
 8014b88:	08014b4d 	.word	0x08014b4d
 8014b8c:	08014b4d 	.word	0x08014b4d
 8014b90:	08014b4d 	.word	0x08014b4d
 8014b94:	08014b4d 	.word	0x08014b4d
 8014b98:	08014b4d 	.word	0x08014b4d
 8014b9c:	08014b4d 	.word	0x08014b4d
 8014ba0:	08014cb7 	.word	0x08014cb7
 8014ba4:	08014c9d 	.word	0x08014c9d
 8014ba8:	08014bff 	.word	0x08014bff
 8014bac:	08014bff 	.word	0x08014bff
 8014bb0:	08014bff 	.word	0x08014bff
 8014bb4:	08014b4d 	.word	0x08014b4d
 8014bb8:	08014c59 	.word	0x08014c59
 8014bbc:	08014b4d 	.word	0x08014b4d
 8014bc0:	08014b4d 	.word	0x08014b4d
 8014bc4:	08014b4d 	.word	0x08014b4d
 8014bc8:	08014b4d 	.word	0x08014b4d
 8014bcc:	08014cc7 	.word	0x08014cc7
 8014bd0:	08014c61 	.word	0x08014c61
 8014bd4:	08014c3f 	.word	0x08014c3f
 8014bd8:	08014b4d 	.word	0x08014b4d
 8014bdc:	08014b4d 	.word	0x08014b4d
 8014be0:	08014cc3 	.word	0x08014cc3
 8014be4:	08014b4d 	.word	0x08014b4d
 8014be8:	08014c9d 	.word	0x08014c9d
 8014bec:	08014b4d 	.word	0x08014b4d
 8014bf0:	08014b4d 	.word	0x08014b4d
 8014bf4:	08014c47 	.word	0x08014c47
 8014bf8:	3b45      	subs	r3, #69	@ 0x45
 8014bfa:	2b02      	cmp	r3, #2
 8014bfc:	d8a6      	bhi.n	8014b4c <__ssvfiscanf_r+0xd0>
 8014bfe:	2305      	movs	r3, #5
 8014c00:	e031      	b.n	8014c66 <__ssvfiscanf_r+0x1ea>
 8014c02:	6863      	ldr	r3, [r4, #4]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	dd0d      	ble.n	8014c24 <__ssvfiscanf_r+0x1a8>
 8014c08:	6823      	ldr	r3, [r4, #0]
 8014c0a:	781a      	ldrb	r2, [r3, #0]
 8014c0c:	454a      	cmp	r2, r9
 8014c0e:	f040 80a6 	bne.w	8014d5e <__ssvfiscanf_r+0x2e2>
 8014c12:	3301      	adds	r3, #1
 8014c14:	6862      	ldr	r2, [r4, #4]
 8014c16:	6023      	str	r3, [r4, #0]
 8014c18:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8014c1a:	3a01      	subs	r2, #1
 8014c1c:	3301      	adds	r3, #1
 8014c1e:	6062      	str	r2, [r4, #4]
 8014c20:	9345      	str	r3, [sp, #276]	@ 0x114
 8014c22:	e753      	b.n	8014acc <__ssvfiscanf_r+0x50>
 8014c24:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014c26:	4621      	mov	r1, r4
 8014c28:	4630      	mov	r0, r6
 8014c2a:	4798      	blx	r3
 8014c2c:	2800      	cmp	r0, #0
 8014c2e:	d0eb      	beq.n	8014c08 <__ssvfiscanf_r+0x18c>
 8014c30:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014c32:	2800      	cmp	r0, #0
 8014c34:	f040 808b 	bne.w	8014d4e <__ssvfiscanf_r+0x2d2>
 8014c38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c3c:	e08b      	b.n	8014d56 <__ssvfiscanf_r+0x2da>
 8014c3e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014c40:	f042 0220 	orr.w	r2, r2, #32
 8014c44:	9241      	str	r2, [sp, #260]	@ 0x104
 8014c46:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014c48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014c4c:	9241      	str	r2, [sp, #260]	@ 0x104
 8014c4e:	2210      	movs	r2, #16
 8014c50:	2b6e      	cmp	r3, #110	@ 0x6e
 8014c52:	9242      	str	r2, [sp, #264]	@ 0x108
 8014c54:	d902      	bls.n	8014c5c <__ssvfiscanf_r+0x1e0>
 8014c56:	e005      	b.n	8014c64 <__ssvfiscanf_r+0x1e8>
 8014c58:	2300      	movs	r3, #0
 8014c5a:	9342      	str	r3, [sp, #264]	@ 0x108
 8014c5c:	2303      	movs	r3, #3
 8014c5e:	e002      	b.n	8014c66 <__ssvfiscanf_r+0x1ea>
 8014c60:	2308      	movs	r3, #8
 8014c62:	9342      	str	r3, [sp, #264]	@ 0x108
 8014c64:	2304      	movs	r3, #4
 8014c66:	9347      	str	r3, [sp, #284]	@ 0x11c
 8014c68:	6863      	ldr	r3, [r4, #4]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	dd39      	ble.n	8014ce2 <__ssvfiscanf_r+0x266>
 8014c6e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014c70:	0659      	lsls	r1, r3, #25
 8014c72:	d404      	bmi.n	8014c7e <__ssvfiscanf_r+0x202>
 8014c74:	6823      	ldr	r3, [r4, #0]
 8014c76:	781a      	ldrb	r2, [r3, #0]
 8014c78:	5cba      	ldrb	r2, [r7, r2]
 8014c7a:	0712      	lsls	r2, r2, #28
 8014c7c:	d438      	bmi.n	8014cf0 <__ssvfiscanf_r+0x274>
 8014c7e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8014c80:	2b02      	cmp	r3, #2
 8014c82:	dc47      	bgt.n	8014d14 <__ssvfiscanf_r+0x298>
 8014c84:	466b      	mov	r3, sp
 8014c86:	4622      	mov	r2, r4
 8014c88:	a941      	add	r1, sp, #260	@ 0x104
 8014c8a:	4630      	mov	r0, r6
 8014c8c:	f000 f9ae 	bl	8014fec <_scanf_chars>
 8014c90:	2801      	cmp	r0, #1
 8014c92:	d064      	beq.n	8014d5e <__ssvfiscanf_r+0x2e2>
 8014c94:	2802      	cmp	r0, #2
 8014c96:	f47f af19 	bne.w	8014acc <__ssvfiscanf_r+0x50>
 8014c9a:	e7c9      	b.n	8014c30 <__ssvfiscanf_r+0x1b4>
 8014c9c:	220a      	movs	r2, #10
 8014c9e:	e7d7      	b.n	8014c50 <__ssvfiscanf_r+0x1d4>
 8014ca0:	4629      	mov	r1, r5
 8014ca2:	4640      	mov	r0, r8
 8014ca4:	f000 fc32 	bl	801550c <__sccl>
 8014ca8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014cae:	9341      	str	r3, [sp, #260]	@ 0x104
 8014cb0:	4605      	mov	r5, r0
 8014cb2:	2301      	movs	r3, #1
 8014cb4:	e7d7      	b.n	8014c66 <__ssvfiscanf_r+0x1ea>
 8014cb6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014cbc:	9341      	str	r3, [sp, #260]	@ 0x104
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	e7d1      	b.n	8014c66 <__ssvfiscanf_r+0x1ea>
 8014cc2:	2302      	movs	r3, #2
 8014cc4:	e7cf      	b.n	8014c66 <__ssvfiscanf_r+0x1ea>
 8014cc6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8014cc8:	06c3      	lsls	r3, r0, #27
 8014cca:	f53f aeff 	bmi.w	8014acc <__ssvfiscanf_r+0x50>
 8014cce:	9b00      	ldr	r3, [sp, #0]
 8014cd0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8014cd2:	1d19      	adds	r1, r3, #4
 8014cd4:	9100      	str	r1, [sp, #0]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	07c0      	lsls	r0, r0, #31
 8014cda:	bf4c      	ite	mi
 8014cdc:	801a      	strhmi	r2, [r3, #0]
 8014cde:	601a      	strpl	r2, [r3, #0]
 8014ce0:	e6f4      	b.n	8014acc <__ssvfiscanf_r+0x50>
 8014ce2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014ce4:	4621      	mov	r1, r4
 8014ce6:	4630      	mov	r0, r6
 8014ce8:	4798      	blx	r3
 8014cea:	2800      	cmp	r0, #0
 8014cec:	d0bf      	beq.n	8014c6e <__ssvfiscanf_r+0x1f2>
 8014cee:	e79f      	b.n	8014c30 <__ssvfiscanf_r+0x1b4>
 8014cf0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8014cf2:	3201      	adds	r2, #1
 8014cf4:	9245      	str	r2, [sp, #276]	@ 0x114
 8014cf6:	6862      	ldr	r2, [r4, #4]
 8014cf8:	3a01      	subs	r2, #1
 8014cfa:	2a00      	cmp	r2, #0
 8014cfc:	6062      	str	r2, [r4, #4]
 8014cfe:	dd02      	ble.n	8014d06 <__ssvfiscanf_r+0x28a>
 8014d00:	3301      	adds	r3, #1
 8014d02:	6023      	str	r3, [r4, #0]
 8014d04:	e7b6      	b.n	8014c74 <__ssvfiscanf_r+0x1f8>
 8014d06:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014d08:	4621      	mov	r1, r4
 8014d0a:	4630      	mov	r0, r6
 8014d0c:	4798      	blx	r3
 8014d0e:	2800      	cmp	r0, #0
 8014d10:	d0b0      	beq.n	8014c74 <__ssvfiscanf_r+0x1f8>
 8014d12:	e78d      	b.n	8014c30 <__ssvfiscanf_r+0x1b4>
 8014d14:	2b04      	cmp	r3, #4
 8014d16:	dc0f      	bgt.n	8014d38 <__ssvfiscanf_r+0x2bc>
 8014d18:	466b      	mov	r3, sp
 8014d1a:	4622      	mov	r2, r4
 8014d1c:	a941      	add	r1, sp, #260	@ 0x104
 8014d1e:	4630      	mov	r0, r6
 8014d20:	f000 f9be 	bl	80150a0 <_scanf_i>
 8014d24:	e7b4      	b.n	8014c90 <__ssvfiscanf_r+0x214>
 8014d26:	bf00      	nop
 8014d28:	080149c9 	.word	0x080149c9
 8014d2c:	08014a43 	.word	0x08014a43
 8014d30:	08017611 	.word	0x08017611
 8014d34:	080173f5 	.word	0x080173f5
 8014d38:	4b0a      	ldr	r3, [pc, #40]	@ (8014d64 <__ssvfiscanf_r+0x2e8>)
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	f43f aec6 	beq.w	8014acc <__ssvfiscanf_r+0x50>
 8014d40:	466b      	mov	r3, sp
 8014d42:	4622      	mov	r2, r4
 8014d44:	a941      	add	r1, sp, #260	@ 0x104
 8014d46:	4630      	mov	r0, r6
 8014d48:	f7fc fdec 	bl	8011924 <_scanf_float>
 8014d4c:	e7a0      	b.n	8014c90 <__ssvfiscanf_r+0x214>
 8014d4e:	89a3      	ldrh	r3, [r4, #12]
 8014d50:	065b      	lsls	r3, r3, #25
 8014d52:	f53f af71 	bmi.w	8014c38 <__ssvfiscanf_r+0x1bc>
 8014d56:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8014d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d5e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014d60:	e7f9      	b.n	8014d56 <__ssvfiscanf_r+0x2da>
 8014d62:	bf00      	nop
 8014d64:	08011925 	.word	0x08011925

08014d68 <__sfputc_r>:
 8014d68:	6893      	ldr	r3, [r2, #8]
 8014d6a:	3b01      	subs	r3, #1
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	b410      	push	{r4}
 8014d70:	6093      	str	r3, [r2, #8]
 8014d72:	da08      	bge.n	8014d86 <__sfputc_r+0x1e>
 8014d74:	6994      	ldr	r4, [r2, #24]
 8014d76:	42a3      	cmp	r3, r4
 8014d78:	db01      	blt.n	8014d7e <__sfputc_r+0x16>
 8014d7a:	290a      	cmp	r1, #10
 8014d7c:	d103      	bne.n	8014d86 <__sfputc_r+0x1e>
 8014d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d82:	f7fd b9a2 	b.w	80120ca <__swbuf_r>
 8014d86:	6813      	ldr	r3, [r2, #0]
 8014d88:	1c58      	adds	r0, r3, #1
 8014d8a:	6010      	str	r0, [r2, #0]
 8014d8c:	7019      	strb	r1, [r3, #0]
 8014d8e:	4608      	mov	r0, r1
 8014d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d94:	4770      	bx	lr

08014d96 <__sfputs_r>:
 8014d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d98:	4606      	mov	r6, r0
 8014d9a:	460f      	mov	r7, r1
 8014d9c:	4614      	mov	r4, r2
 8014d9e:	18d5      	adds	r5, r2, r3
 8014da0:	42ac      	cmp	r4, r5
 8014da2:	d101      	bne.n	8014da8 <__sfputs_r+0x12>
 8014da4:	2000      	movs	r0, #0
 8014da6:	e007      	b.n	8014db8 <__sfputs_r+0x22>
 8014da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dac:	463a      	mov	r2, r7
 8014dae:	4630      	mov	r0, r6
 8014db0:	f7ff ffda 	bl	8014d68 <__sfputc_r>
 8014db4:	1c43      	adds	r3, r0, #1
 8014db6:	d1f3      	bne.n	8014da0 <__sfputs_r+0xa>
 8014db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014dbc <_vfiprintf_r>:
 8014dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dc0:	460d      	mov	r5, r1
 8014dc2:	b09d      	sub	sp, #116	@ 0x74
 8014dc4:	4614      	mov	r4, r2
 8014dc6:	4698      	mov	r8, r3
 8014dc8:	4606      	mov	r6, r0
 8014dca:	b118      	cbz	r0, 8014dd4 <_vfiprintf_r+0x18>
 8014dcc:	6a03      	ldr	r3, [r0, #32]
 8014dce:	b90b      	cbnz	r3, 8014dd4 <_vfiprintf_r+0x18>
 8014dd0:	f7fd f83a 	bl	8011e48 <__sinit>
 8014dd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014dd6:	07d9      	lsls	r1, r3, #31
 8014dd8:	d405      	bmi.n	8014de6 <_vfiprintf_r+0x2a>
 8014dda:	89ab      	ldrh	r3, [r5, #12]
 8014ddc:	059a      	lsls	r2, r3, #22
 8014dde:	d402      	bmi.n	8014de6 <_vfiprintf_r+0x2a>
 8014de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014de2:	f7fd fabe 	bl	8012362 <__retarget_lock_acquire_recursive>
 8014de6:	89ab      	ldrh	r3, [r5, #12]
 8014de8:	071b      	lsls	r3, r3, #28
 8014dea:	d501      	bpl.n	8014df0 <_vfiprintf_r+0x34>
 8014dec:	692b      	ldr	r3, [r5, #16]
 8014dee:	b99b      	cbnz	r3, 8014e18 <_vfiprintf_r+0x5c>
 8014df0:	4629      	mov	r1, r5
 8014df2:	4630      	mov	r0, r6
 8014df4:	f7fd f9a8 	bl	8012148 <__swsetup_r>
 8014df8:	b170      	cbz	r0, 8014e18 <_vfiprintf_r+0x5c>
 8014dfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014dfc:	07dc      	lsls	r4, r3, #31
 8014dfe:	d504      	bpl.n	8014e0a <_vfiprintf_r+0x4e>
 8014e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014e04:	b01d      	add	sp, #116	@ 0x74
 8014e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e0a:	89ab      	ldrh	r3, [r5, #12]
 8014e0c:	0598      	lsls	r0, r3, #22
 8014e0e:	d4f7      	bmi.n	8014e00 <_vfiprintf_r+0x44>
 8014e10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014e12:	f7fd faa7 	bl	8012364 <__retarget_lock_release_recursive>
 8014e16:	e7f3      	b.n	8014e00 <_vfiprintf_r+0x44>
 8014e18:	2300      	movs	r3, #0
 8014e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e1c:	2320      	movs	r3, #32
 8014e1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e26:	2330      	movs	r3, #48	@ 0x30
 8014e28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014fd8 <_vfiprintf_r+0x21c>
 8014e2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014e30:	f04f 0901 	mov.w	r9, #1
 8014e34:	4623      	mov	r3, r4
 8014e36:	469a      	mov	sl, r3
 8014e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e3c:	b10a      	cbz	r2, 8014e42 <_vfiprintf_r+0x86>
 8014e3e:	2a25      	cmp	r2, #37	@ 0x25
 8014e40:	d1f9      	bne.n	8014e36 <_vfiprintf_r+0x7a>
 8014e42:	ebba 0b04 	subs.w	fp, sl, r4
 8014e46:	d00b      	beq.n	8014e60 <_vfiprintf_r+0xa4>
 8014e48:	465b      	mov	r3, fp
 8014e4a:	4622      	mov	r2, r4
 8014e4c:	4629      	mov	r1, r5
 8014e4e:	4630      	mov	r0, r6
 8014e50:	f7ff ffa1 	bl	8014d96 <__sfputs_r>
 8014e54:	3001      	adds	r0, #1
 8014e56:	f000 80a7 	beq.w	8014fa8 <_vfiprintf_r+0x1ec>
 8014e5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014e5c:	445a      	add	r2, fp
 8014e5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e60:	f89a 3000 	ldrb.w	r3, [sl]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	f000 809f 	beq.w	8014fa8 <_vfiprintf_r+0x1ec>
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e74:	f10a 0a01 	add.w	sl, sl, #1
 8014e78:	9304      	str	r3, [sp, #16]
 8014e7a:	9307      	str	r3, [sp, #28]
 8014e7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014e80:	931a      	str	r3, [sp, #104]	@ 0x68
 8014e82:	4654      	mov	r4, sl
 8014e84:	2205      	movs	r2, #5
 8014e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e8a:	4853      	ldr	r0, [pc, #332]	@ (8014fd8 <_vfiprintf_r+0x21c>)
 8014e8c:	f7eb fa50 	bl	8000330 <memchr>
 8014e90:	9a04      	ldr	r2, [sp, #16]
 8014e92:	b9d8      	cbnz	r0, 8014ecc <_vfiprintf_r+0x110>
 8014e94:	06d1      	lsls	r1, r2, #27
 8014e96:	bf44      	itt	mi
 8014e98:	2320      	movmi	r3, #32
 8014e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e9e:	0713      	lsls	r3, r2, #28
 8014ea0:	bf44      	itt	mi
 8014ea2:	232b      	movmi	r3, #43	@ 0x2b
 8014ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8014eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8014eae:	d015      	beq.n	8014edc <_vfiprintf_r+0x120>
 8014eb0:	9a07      	ldr	r2, [sp, #28]
 8014eb2:	4654      	mov	r4, sl
 8014eb4:	2000      	movs	r0, #0
 8014eb6:	f04f 0c0a 	mov.w	ip, #10
 8014eba:	4621      	mov	r1, r4
 8014ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ec0:	3b30      	subs	r3, #48	@ 0x30
 8014ec2:	2b09      	cmp	r3, #9
 8014ec4:	d94b      	bls.n	8014f5e <_vfiprintf_r+0x1a2>
 8014ec6:	b1b0      	cbz	r0, 8014ef6 <_vfiprintf_r+0x13a>
 8014ec8:	9207      	str	r2, [sp, #28]
 8014eca:	e014      	b.n	8014ef6 <_vfiprintf_r+0x13a>
 8014ecc:	eba0 0308 	sub.w	r3, r0, r8
 8014ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8014ed4:	4313      	orrs	r3, r2
 8014ed6:	9304      	str	r3, [sp, #16]
 8014ed8:	46a2      	mov	sl, r4
 8014eda:	e7d2      	b.n	8014e82 <_vfiprintf_r+0xc6>
 8014edc:	9b03      	ldr	r3, [sp, #12]
 8014ede:	1d19      	adds	r1, r3, #4
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	9103      	str	r1, [sp, #12]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	bfbb      	ittet	lt
 8014ee8:	425b      	neglt	r3, r3
 8014eea:	f042 0202 	orrlt.w	r2, r2, #2
 8014eee:	9307      	strge	r3, [sp, #28]
 8014ef0:	9307      	strlt	r3, [sp, #28]
 8014ef2:	bfb8      	it	lt
 8014ef4:	9204      	strlt	r2, [sp, #16]
 8014ef6:	7823      	ldrb	r3, [r4, #0]
 8014ef8:	2b2e      	cmp	r3, #46	@ 0x2e
 8014efa:	d10a      	bne.n	8014f12 <_vfiprintf_r+0x156>
 8014efc:	7863      	ldrb	r3, [r4, #1]
 8014efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8014f00:	d132      	bne.n	8014f68 <_vfiprintf_r+0x1ac>
 8014f02:	9b03      	ldr	r3, [sp, #12]
 8014f04:	1d1a      	adds	r2, r3, #4
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	9203      	str	r2, [sp, #12]
 8014f0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014f0e:	3402      	adds	r4, #2
 8014f10:	9305      	str	r3, [sp, #20]
 8014f12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014fe8 <_vfiprintf_r+0x22c>
 8014f16:	7821      	ldrb	r1, [r4, #0]
 8014f18:	2203      	movs	r2, #3
 8014f1a:	4650      	mov	r0, sl
 8014f1c:	f7eb fa08 	bl	8000330 <memchr>
 8014f20:	b138      	cbz	r0, 8014f32 <_vfiprintf_r+0x176>
 8014f22:	9b04      	ldr	r3, [sp, #16]
 8014f24:	eba0 000a 	sub.w	r0, r0, sl
 8014f28:	2240      	movs	r2, #64	@ 0x40
 8014f2a:	4082      	lsls	r2, r0
 8014f2c:	4313      	orrs	r3, r2
 8014f2e:	3401      	adds	r4, #1
 8014f30:	9304      	str	r3, [sp, #16]
 8014f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f36:	4829      	ldr	r0, [pc, #164]	@ (8014fdc <_vfiprintf_r+0x220>)
 8014f38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014f3c:	2206      	movs	r2, #6
 8014f3e:	f7eb f9f7 	bl	8000330 <memchr>
 8014f42:	2800      	cmp	r0, #0
 8014f44:	d03f      	beq.n	8014fc6 <_vfiprintf_r+0x20a>
 8014f46:	4b26      	ldr	r3, [pc, #152]	@ (8014fe0 <_vfiprintf_r+0x224>)
 8014f48:	bb1b      	cbnz	r3, 8014f92 <_vfiprintf_r+0x1d6>
 8014f4a:	9b03      	ldr	r3, [sp, #12]
 8014f4c:	3307      	adds	r3, #7
 8014f4e:	f023 0307 	bic.w	r3, r3, #7
 8014f52:	3308      	adds	r3, #8
 8014f54:	9303      	str	r3, [sp, #12]
 8014f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f58:	443b      	add	r3, r7
 8014f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f5c:	e76a      	b.n	8014e34 <_vfiprintf_r+0x78>
 8014f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f62:	460c      	mov	r4, r1
 8014f64:	2001      	movs	r0, #1
 8014f66:	e7a8      	b.n	8014eba <_vfiprintf_r+0xfe>
 8014f68:	2300      	movs	r3, #0
 8014f6a:	3401      	adds	r4, #1
 8014f6c:	9305      	str	r3, [sp, #20]
 8014f6e:	4619      	mov	r1, r3
 8014f70:	f04f 0c0a 	mov.w	ip, #10
 8014f74:	4620      	mov	r0, r4
 8014f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f7a:	3a30      	subs	r2, #48	@ 0x30
 8014f7c:	2a09      	cmp	r2, #9
 8014f7e:	d903      	bls.n	8014f88 <_vfiprintf_r+0x1cc>
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d0c6      	beq.n	8014f12 <_vfiprintf_r+0x156>
 8014f84:	9105      	str	r1, [sp, #20]
 8014f86:	e7c4      	b.n	8014f12 <_vfiprintf_r+0x156>
 8014f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f8c:	4604      	mov	r4, r0
 8014f8e:	2301      	movs	r3, #1
 8014f90:	e7f0      	b.n	8014f74 <_vfiprintf_r+0x1b8>
 8014f92:	ab03      	add	r3, sp, #12
 8014f94:	9300      	str	r3, [sp, #0]
 8014f96:	462a      	mov	r2, r5
 8014f98:	4b12      	ldr	r3, [pc, #72]	@ (8014fe4 <_vfiprintf_r+0x228>)
 8014f9a:	a904      	add	r1, sp, #16
 8014f9c:	4630      	mov	r0, r6
 8014f9e:	f7fc f91b 	bl	80111d8 <_printf_float>
 8014fa2:	4607      	mov	r7, r0
 8014fa4:	1c78      	adds	r0, r7, #1
 8014fa6:	d1d6      	bne.n	8014f56 <_vfiprintf_r+0x19a>
 8014fa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014faa:	07d9      	lsls	r1, r3, #31
 8014fac:	d405      	bmi.n	8014fba <_vfiprintf_r+0x1fe>
 8014fae:	89ab      	ldrh	r3, [r5, #12]
 8014fb0:	059a      	lsls	r2, r3, #22
 8014fb2:	d402      	bmi.n	8014fba <_vfiprintf_r+0x1fe>
 8014fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014fb6:	f7fd f9d5 	bl	8012364 <__retarget_lock_release_recursive>
 8014fba:	89ab      	ldrh	r3, [r5, #12]
 8014fbc:	065b      	lsls	r3, r3, #25
 8014fbe:	f53f af1f 	bmi.w	8014e00 <_vfiprintf_r+0x44>
 8014fc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014fc4:	e71e      	b.n	8014e04 <_vfiprintf_r+0x48>
 8014fc6:	ab03      	add	r3, sp, #12
 8014fc8:	9300      	str	r3, [sp, #0]
 8014fca:	462a      	mov	r2, r5
 8014fcc:	4b05      	ldr	r3, [pc, #20]	@ (8014fe4 <_vfiprintf_r+0x228>)
 8014fce:	a904      	add	r1, sp, #16
 8014fd0:	4630      	mov	r0, r6
 8014fd2:	f7fc fb89 	bl	80116e8 <_printf_i>
 8014fd6:	e7e4      	b.n	8014fa2 <_vfiprintf_r+0x1e6>
 8014fd8:	080173ef 	.word	0x080173ef
 8014fdc:	080173f9 	.word	0x080173f9
 8014fe0:	080111d9 	.word	0x080111d9
 8014fe4:	08014d97 	.word	0x08014d97
 8014fe8:	080173f5 	.word	0x080173f5

08014fec <_scanf_chars>:
 8014fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ff0:	4615      	mov	r5, r2
 8014ff2:	688a      	ldr	r2, [r1, #8]
 8014ff4:	4680      	mov	r8, r0
 8014ff6:	460c      	mov	r4, r1
 8014ff8:	b932      	cbnz	r2, 8015008 <_scanf_chars+0x1c>
 8014ffa:	698a      	ldr	r2, [r1, #24]
 8014ffc:	2a00      	cmp	r2, #0
 8014ffe:	bf14      	ite	ne
 8015000:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8015004:	2201      	moveq	r2, #1
 8015006:	608a      	str	r2, [r1, #8]
 8015008:	6822      	ldr	r2, [r4, #0]
 801500a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801509c <_scanf_chars+0xb0>
 801500e:	06d1      	lsls	r1, r2, #27
 8015010:	bf5f      	itttt	pl
 8015012:	681a      	ldrpl	r2, [r3, #0]
 8015014:	1d11      	addpl	r1, r2, #4
 8015016:	6019      	strpl	r1, [r3, #0]
 8015018:	6816      	ldrpl	r6, [r2, #0]
 801501a:	2700      	movs	r7, #0
 801501c:	69a0      	ldr	r0, [r4, #24]
 801501e:	b188      	cbz	r0, 8015044 <_scanf_chars+0x58>
 8015020:	2801      	cmp	r0, #1
 8015022:	d107      	bne.n	8015034 <_scanf_chars+0x48>
 8015024:	682b      	ldr	r3, [r5, #0]
 8015026:	781a      	ldrb	r2, [r3, #0]
 8015028:	6963      	ldr	r3, [r4, #20]
 801502a:	5c9b      	ldrb	r3, [r3, r2]
 801502c:	b953      	cbnz	r3, 8015044 <_scanf_chars+0x58>
 801502e:	2f00      	cmp	r7, #0
 8015030:	d031      	beq.n	8015096 <_scanf_chars+0xaa>
 8015032:	e022      	b.n	801507a <_scanf_chars+0x8e>
 8015034:	2802      	cmp	r0, #2
 8015036:	d120      	bne.n	801507a <_scanf_chars+0x8e>
 8015038:	682b      	ldr	r3, [r5, #0]
 801503a:	781b      	ldrb	r3, [r3, #0]
 801503c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8015040:	071b      	lsls	r3, r3, #28
 8015042:	d41a      	bmi.n	801507a <_scanf_chars+0x8e>
 8015044:	6823      	ldr	r3, [r4, #0]
 8015046:	06da      	lsls	r2, r3, #27
 8015048:	bf5e      	ittt	pl
 801504a:	682b      	ldrpl	r3, [r5, #0]
 801504c:	781b      	ldrbpl	r3, [r3, #0]
 801504e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8015052:	682a      	ldr	r2, [r5, #0]
 8015054:	686b      	ldr	r3, [r5, #4]
 8015056:	3201      	adds	r2, #1
 8015058:	602a      	str	r2, [r5, #0]
 801505a:	68a2      	ldr	r2, [r4, #8]
 801505c:	3b01      	subs	r3, #1
 801505e:	3a01      	subs	r2, #1
 8015060:	606b      	str	r3, [r5, #4]
 8015062:	3701      	adds	r7, #1
 8015064:	60a2      	str	r2, [r4, #8]
 8015066:	b142      	cbz	r2, 801507a <_scanf_chars+0x8e>
 8015068:	2b00      	cmp	r3, #0
 801506a:	dcd7      	bgt.n	801501c <_scanf_chars+0x30>
 801506c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8015070:	4629      	mov	r1, r5
 8015072:	4640      	mov	r0, r8
 8015074:	4798      	blx	r3
 8015076:	2800      	cmp	r0, #0
 8015078:	d0d0      	beq.n	801501c <_scanf_chars+0x30>
 801507a:	6823      	ldr	r3, [r4, #0]
 801507c:	f013 0310 	ands.w	r3, r3, #16
 8015080:	d105      	bne.n	801508e <_scanf_chars+0xa2>
 8015082:	68e2      	ldr	r2, [r4, #12]
 8015084:	3201      	adds	r2, #1
 8015086:	60e2      	str	r2, [r4, #12]
 8015088:	69a2      	ldr	r2, [r4, #24]
 801508a:	b102      	cbz	r2, 801508e <_scanf_chars+0xa2>
 801508c:	7033      	strb	r3, [r6, #0]
 801508e:	6923      	ldr	r3, [r4, #16]
 8015090:	443b      	add	r3, r7
 8015092:	6123      	str	r3, [r4, #16]
 8015094:	2000      	movs	r0, #0
 8015096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801509a:	bf00      	nop
 801509c:	08017611 	.word	0x08017611

080150a0 <_scanf_i>:
 80150a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150a4:	4698      	mov	r8, r3
 80150a6:	4b74      	ldr	r3, [pc, #464]	@ (8015278 <_scanf_i+0x1d8>)
 80150a8:	460c      	mov	r4, r1
 80150aa:	4682      	mov	sl, r0
 80150ac:	4616      	mov	r6, r2
 80150ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80150b2:	b087      	sub	sp, #28
 80150b4:	ab03      	add	r3, sp, #12
 80150b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80150ba:	4b70      	ldr	r3, [pc, #448]	@ (801527c <_scanf_i+0x1dc>)
 80150bc:	69a1      	ldr	r1, [r4, #24]
 80150be:	4a70      	ldr	r2, [pc, #448]	@ (8015280 <_scanf_i+0x1e0>)
 80150c0:	2903      	cmp	r1, #3
 80150c2:	bf08      	it	eq
 80150c4:	461a      	moveq	r2, r3
 80150c6:	68a3      	ldr	r3, [r4, #8]
 80150c8:	9201      	str	r2, [sp, #4]
 80150ca:	1e5a      	subs	r2, r3, #1
 80150cc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80150d0:	bf88      	it	hi
 80150d2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80150d6:	4627      	mov	r7, r4
 80150d8:	bf82      	ittt	hi
 80150da:	eb03 0905 	addhi.w	r9, r3, r5
 80150de:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80150e2:	60a3      	strhi	r3, [r4, #8]
 80150e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80150e8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80150ec:	bf98      	it	ls
 80150ee:	f04f 0900 	movls.w	r9, #0
 80150f2:	6023      	str	r3, [r4, #0]
 80150f4:	463d      	mov	r5, r7
 80150f6:	f04f 0b00 	mov.w	fp, #0
 80150fa:	6831      	ldr	r1, [r6, #0]
 80150fc:	ab03      	add	r3, sp, #12
 80150fe:	7809      	ldrb	r1, [r1, #0]
 8015100:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8015104:	2202      	movs	r2, #2
 8015106:	f7eb f913 	bl	8000330 <memchr>
 801510a:	b328      	cbz	r0, 8015158 <_scanf_i+0xb8>
 801510c:	f1bb 0f01 	cmp.w	fp, #1
 8015110:	d159      	bne.n	80151c6 <_scanf_i+0x126>
 8015112:	6862      	ldr	r2, [r4, #4]
 8015114:	b92a      	cbnz	r2, 8015122 <_scanf_i+0x82>
 8015116:	6822      	ldr	r2, [r4, #0]
 8015118:	2108      	movs	r1, #8
 801511a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801511e:	6061      	str	r1, [r4, #4]
 8015120:	6022      	str	r2, [r4, #0]
 8015122:	6822      	ldr	r2, [r4, #0]
 8015124:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8015128:	6022      	str	r2, [r4, #0]
 801512a:	68a2      	ldr	r2, [r4, #8]
 801512c:	1e51      	subs	r1, r2, #1
 801512e:	60a1      	str	r1, [r4, #8]
 8015130:	b192      	cbz	r2, 8015158 <_scanf_i+0xb8>
 8015132:	6832      	ldr	r2, [r6, #0]
 8015134:	1c51      	adds	r1, r2, #1
 8015136:	6031      	str	r1, [r6, #0]
 8015138:	7812      	ldrb	r2, [r2, #0]
 801513a:	f805 2b01 	strb.w	r2, [r5], #1
 801513e:	6872      	ldr	r2, [r6, #4]
 8015140:	3a01      	subs	r2, #1
 8015142:	2a00      	cmp	r2, #0
 8015144:	6072      	str	r2, [r6, #4]
 8015146:	dc07      	bgt.n	8015158 <_scanf_i+0xb8>
 8015148:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801514c:	4631      	mov	r1, r6
 801514e:	4650      	mov	r0, sl
 8015150:	4790      	blx	r2
 8015152:	2800      	cmp	r0, #0
 8015154:	f040 8085 	bne.w	8015262 <_scanf_i+0x1c2>
 8015158:	f10b 0b01 	add.w	fp, fp, #1
 801515c:	f1bb 0f03 	cmp.w	fp, #3
 8015160:	d1cb      	bne.n	80150fa <_scanf_i+0x5a>
 8015162:	6863      	ldr	r3, [r4, #4]
 8015164:	b90b      	cbnz	r3, 801516a <_scanf_i+0xca>
 8015166:	230a      	movs	r3, #10
 8015168:	6063      	str	r3, [r4, #4]
 801516a:	6863      	ldr	r3, [r4, #4]
 801516c:	4945      	ldr	r1, [pc, #276]	@ (8015284 <_scanf_i+0x1e4>)
 801516e:	6960      	ldr	r0, [r4, #20]
 8015170:	1ac9      	subs	r1, r1, r3
 8015172:	f000 f9cb 	bl	801550c <__sccl>
 8015176:	f04f 0b00 	mov.w	fp, #0
 801517a:	68a3      	ldr	r3, [r4, #8]
 801517c:	6822      	ldr	r2, [r4, #0]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d03d      	beq.n	80151fe <_scanf_i+0x15e>
 8015182:	6831      	ldr	r1, [r6, #0]
 8015184:	6960      	ldr	r0, [r4, #20]
 8015186:	f891 c000 	ldrb.w	ip, [r1]
 801518a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801518e:	2800      	cmp	r0, #0
 8015190:	d035      	beq.n	80151fe <_scanf_i+0x15e>
 8015192:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8015196:	d124      	bne.n	80151e2 <_scanf_i+0x142>
 8015198:	0510      	lsls	r0, r2, #20
 801519a:	d522      	bpl.n	80151e2 <_scanf_i+0x142>
 801519c:	f10b 0b01 	add.w	fp, fp, #1
 80151a0:	f1b9 0f00 	cmp.w	r9, #0
 80151a4:	d003      	beq.n	80151ae <_scanf_i+0x10e>
 80151a6:	3301      	adds	r3, #1
 80151a8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80151ac:	60a3      	str	r3, [r4, #8]
 80151ae:	6873      	ldr	r3, [r6, #4]
 80151b0:	3b01      	subs	r3, #1
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	6073      	str	r3, [r6, #4]
 80151b6:	dd1b      	ble.n	80151f0 <_scanf_i+0x150>
 80151b8:	6833      	ldr	r3, [r6, #0]
 80151ba:	3301      	adds	r3, #1
 80151bc:	6033      	str	r3, [r6, #0]
 80151be:	68a3      	ldr	r3, [r4, #8]
 80151c0:	3b01      	subs	r3, #1
 80151c2:	60a3      	str	r3, [r4, #8]
 80151c4:	e7d9      	b.n	801517a <_scanf_i+0xda>
 80151c6:	f1bb 0f02 	cmp.w	fp, #2
 80151ca:	d1ae      	bne.n	801512a <_scanf_i+0x8a>
 80151cc:	6822      	ldr	r2, [r4, #0]
 80151ce:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80151d2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80151d6:	d1c4      	bne.n	8015162 <_scanf_i+0xc2>
 80151d8:	2110      	movs	r1, #16
 80151da:	6061      	str	r1, [r4, #4]
 80151dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80151e0:	e7a2      	b.n	8015128 <_scanf_i+0x88>
 80151e2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80151e6:	6022      	str	r2, [r4, #0]
 80151e8:	780b      	ldrb	r3, [r1, #0]
 80151ea:	f805 3b01 	strb.w	r3, [r5], #1
 80151ee:	e7de      	b.n	80151ae <_scanf_i+0x10e>
 80151f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80151f4:	4631      	mov	r1, r6
 80151f6:	4650      	mov	r0, sl
 80151f8:	4798      	blx	r3
 80151fa:	2800      	cmp	r0, #0
 80151fc:	d0df      	beq.n	80151be <_scanf_i+0x11e>
 80151fe:	6823      	ldr	r3, [r4, #0]
 8015200:	05d9      	lsls	r1, r3, #23
 8015202:	d50d      	bpl.n	8015220 <_scanf_i+0x180>
 8015204:	42bd      	cmp	r5, r7
 8015206:	d909      	bls.n	801521c <_scanf_i+0x17c>
 8015208:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801520c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015210:	4632      	mov	r2, r6
 8015212:	4650      	mov	r0, sl
 8015214:	4798      	blx	r3
 8015216:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 801521a:	464d      	mov	r5, r9
 801521c:	42bd      	cmp	r5, r7
 801521e:	d028      	beq.n	8015272 <_scanf_i+0x1d2>
 8015220:	6822      	ldr	r2, [r4, #0]
 8015222:	f012 0210 	ands.w	r2, r2, #16
 8015226:	d113      	bne.n	8015250 <_scanf_i+0x1b0>
 8015228:	702a      	strb	r2, [r5, #0]
 801522a:	6863      	ldr	r3, [r4, #4]
 801522c:	9e01      	ldr	r6, [sp, #4]
 801522e:	4639      	mov	r1, r7
 8015230:	4650      	mov	r0, sl
 8015232:	47b0      	blx	r6
 8015234:	f8d8 3000 	ldr.w	r3, [r8]
 8015238:	6821      	ldr	r1, [r4, #0]
 801523a:	1d1a      	adds	r2, r3, #4
 801523c:	f8c8 2000 	str.w	r2, [r8]
 8015240:	f011 0f20 	tst.w	r1, #32
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	d00f      	beq.n	8015268 <_scanf_i+0x1c8>
 8015248:	6018      	str	r0, [r3, #0]
 801524a:	68e3      	ldr	r3, [r4, #12]
 801524c:	3301      	adds	r3, #1
 801524e:	60e3      	str	r3, [r4, #12]
 8015250:	6923      	ldr	r3, [r4, #16]
 8015252:	1bed      	subs	r5, r5, r7
 8015254:	445d      	add	r5, fp
 8015256:	442b      	add	r3, r5
 8015258:	6123      	str	r3, [r4, #16]
 801525a:	2000      	movs	r0, #0
 801525c:	b007      	add	sp, #28
 801525e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015262:	f04f 0b00 	mov.w	fp, #0
 8015266:	e7ca      	b.n	80151fe <_scanf_i+0x15e>
 8015268:	07ca      	lsls	r2, r1, #31
 801526a:	bf4c      	ite	mi
 801526c:	8018      	strhmi	r0, [r3, #0]
 801526e:	6018      	strpl	r0, [r3, #0]
 8015270:	e7eb      	b.n	801524a <_scanf_i+0x1aa>
 8015272:	2001      	movs	r0, #1
 8015274:	e7f2      	b.n	801525c <_scanf_i+0x1bc>
 8015276:	bf00      	nop
 8015278:	0801724c 	.word	0x0801724c
 801527c:	08014715 	.word	0x08014715
 8015280:	08015e9d 	.word	0x08015e9d
 8015284:	08017410 	.word	0x08017410

08015288 <__sflush_r>:
 8015288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801528c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015290:	0716      	lsls	r6, r2, #28
 8015292:	4605      	mov	r5, r0
 8015294:	460c      	mov	r4, r1
 8015296:	d454      	bmi.n	8015342 <__sflush_r+0xba>
 8015298:	684b      	ldr	r3, [r1, #4]
 801529a:	2b00      	cmp	r3, #0
 801529c:	dc02      	bgt.n	80152a4 <__sflush_r+0x1c>
 801529e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	dd48      	ble.n	8015336 <__sflush_r+0xae>
 80152a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80152a6:	2e00      	cmp	r6, #0
 80152a8:	d045      	beq.n	8015336 <__sflush_r+0xae>
 80152aa:	2300      	movs	r3, #0
 80152ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80152b0:	682f      	ldr	r7, [r5, #0]
 80152b2:	6a21      	ldr	r1, [r4, #32]
 80152b4:	602b      	str	r3, [r5, #0]
 80152b6:	d030      	beq.n	801531a <__sflush_r+0x92>
 80152b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80152ba:	89a3      	ldrh	r3, [r4, #12]
 80152bc:	0759      	lsls	r1, r3, #29
 80152be:	d505      	bpl.n	80152cc <__sflush_r+0x44>
 80152c0:	6863      	ldr	r3, [r4, #4]
 80152c2:	1ad2      	subs	r2, r2, r3
 80152c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80152c6:	b10b      	cbz	r3, 80152cc <__sflush_r+0x44>
 80152c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80152ca:	1ad2      	subs	r2, r2, r3
 80152cc:	2300      	movs	r3, #0
 80152ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80152d0:	6a21      	ldr	r1, [r4, #32]
 80152d2:	4628      	mov	r0, r5
 80152d4:	47b0      	blx	r6
 80152d6:	1c43      	adds	r3, r0, #1
 80152d8:	89a3      	ldrh	r3, [r4, #12]
 80152da:	d106      	bne.n	80152ea <__sflush_r+0x62>
 80152dc:	6829      	ldr	r1, [r5, #0]
 80152de:	291d      	cmp	r1, #29
 80152e0:	d82b      	bhi.n	801533a <__sflush_r+0xb2>
 80152e2:	4a2a      	ldr	r2, [pc, #168]	@ (801538c <__sflush_r+0x104>)
 80152e4:	40ca      	lsrs	r2, r1
 80152e6:	07d6      	lsls	r6, r2, #31
 80152e8:	d527      	bpl.n	801533a <__sflush_r+0xb2>
 80152ea:	2200      	movs	r2, #0
 80152ec:	6062      	str	r2, [r4, #4]
 80152ee:	04d9      	lsls	r1, r3, #19
 80152f0:	6922      	ldr	r2, [r4, #16]
 80152f2:	6022      	str	r2, [r4, #0]
 80152f4:	d504      	bpl.n	8015300 <__sflush_r+0x78>
 80152f6:	1c42      	adds	r2, r0, #1
 80152f8:	d101      	bne.n	80152fe <__sflush_r+0x76>
 80152fa:	682b      	ldr	r3, [r5, #0]
 80152fc:	b903      	cbnz	r3, 8015300 <__sflush_r+0x78>
 80152fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8015300:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015302:	602f      	str	r7, [r5, #0]
 8015304:	b1b9      	cbz	r1, 8015336 <__sflush_r+0xae>
 8015306:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801530a:	4299      	cmp	r1, r3
 801530c:	d002      	beq.n	8015314 <__sflush_r+0x8c>
 801530e:	4628      	mov	r0, r5
 8015310:	f7fd fe24 	bl	8012f5c <_free_r>
 8015314:	2300      	movs	r3, #0
 8015316:	6363      	str	r3, [r4, #52]	@ 0x34
 8015318:	e00d      	b.n	8015336 <__sflush_r+0xae>
 801531a:	2301      	movs	r3, #1
 801531c:	4628      	mov	r0, r5
 801531e:	47b0      	blx	r6
 8015320:	4602      	mov	r2, r0
 8015322:	1c50      	adds	r0, r2, #1
 8015324:	d1c9      	bne.n	80152ba <__sflush_r+0x32>
 8015326:	682b      	ldr	r3, [r5, #0]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d0c6      	beq.n	80152ba <__sflush_r+0x32>
 801532c:	2b1d      	cmp	r3, #29
 801532e:	d001      	beq.n	8015334 <__sflush_r+0xac>
 8015330:	2b16      	cmp	r3, #22
 8015332:	d11e      	bne.n	8015372 <__sflush_r+0xea>
 8015334:	602f      	str	r7, [r5, #0]
 8015336:	2000      	movs	r0, #0
 8015338:	e022      	b.n	8015380 <__sflush_r+0xf8>
 801533a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801533e:	b21b      	sxth	r3, r3
 8015340:	e01b      	b.n	801537a <__sflush_r+0xf2>
 8015342:	690f      	ldr	r7, [r1, #16]
 8015344:	2f00      	cmp	r7, #0
 8015346:	d0f6      	beq.n	8015336 <__sflush_r+0xae>
 8015348:	0793      	lsls	r3, r2, #30
 801534a:	680e      	ldr	r6, [r1, #0]
 801534c:	bf08      	it	eq
 801534e:	694b      	ldreq	r3, [r1, #20]
 8015350:	600f      	str	r7, [r1, #0]
 8015352:	bf18      	it	ne
 8015354:	2300      	movne	r3, #0
 8015356:	eba6 0807 	sub.w	r8, r6, r7
 801535a:	608b      	str	r3, [r1, #8]
 801535c:	f1b8 0f00 	cmp.w	r8, #0
 8015360:	dde9      	ble.n	8015336 <__sflush_r+0xae>
 8015362:	6a21      	ldr	r1, [r4, #32]
 8015364:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015366:	4643      	mov	r3, r8
 8015368:	463a      	mov	r2, r7
 801536a:	4628      	mov	r0, r5
 801536c:	47b0      	blx	r6
 801536e:	2800      	cmp	r0, #0
 8015370:	dc08      	bgt.n	8015384 <__sflush_r+0xfc>
 8015372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801537a:	81a3      	strh	r3, [r4, #12]
 801537c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015384:	4407      	add	r7, r0
 8015386:	eba8 0800 	sub.w	r8, r8, r0
 801538a:	e7e7      	b.n	801535c <__sflush_r+0xd4>
 801538c:	20400001 	.word	0x20400001

08015390 <_fflush_r>:
 8015390:	b538      	push	{r3, r4, r5, lr}
 8015392:	690b      	ldr	r3, [r1, #16]
 8015394:	4605      	mov	r5, r0
 8015396:	460c      	mov	r4, r1
 8015398:	b913      	cbnz	r3, 80153a0 <_fflush_r+0x10>
 801539a:	2500      	movs	r5, #0
 801539c:	4628      	mov	r0, r5
 801539e:	bd38      	pop	{r3, r4, r5, pc}
 80153a0:	b118      	cbz	r0, 80153aa <_fflush_r+0x1a>
 80153a2:	6a03      	ldr	r3, [r0, #32]
 80153a4:	b90b      	cbnz	r3, 80153aa <_fflush_r+0x1a>
 80153a6:	f7fc fd4f 	bl	8011e48 <__sinit>
 80153aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d0f3      	beq.n	801539a <_fflush_r+0xa>
 80153b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80153b4:	07d0      	lsls	r0, r2, #31
 80153b6:	d404      	bmi.n	80153c2 <_fflush_r+0x32>
 80153b8:	0599      	lsls	r1, r3, #22
 80153ba:	d402      	bmi.n	80153c2 <_fflush_r+0x32>
 80153bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80153be:	f7fc ffd0 	bl	8012362 <__retarget_lock_acquire_recursive>
 80153c2:	4628      	mov	r0, r5
 80153c4:	4621      	mov	r1, r4
 80153c6:	f7ff ff5f 	bl	8015288 <__sflush_r>
 80153ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80153cc:	07da      	lsls	r2, r3, #31
 80153ce:	4605      	mov	r5, r0
 80153d0:	d4e4      	bmi.n	801539c <_fflush_r+0xc>
 80153d2:	89a3      	ldrh	r3, [r4, #12]
 80153d4:	059b      	lsls	r3, r3, #22
 80153d6:	d4e1      	bmi.n	801539c <_fflush_r+0xc>
 80153d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80153da:	f7fc ffc3 	bl	8012364 <__retarget_lock_release_recursive>
 80153de:	e7dd      	b.n	801539c <_fflush_r+0xc>

080153e0 <__swhatbuf_r>:
 80153e0:	b570      	push	{r4, r5, r6, lr}
 80153e2:	460c      	mov	r4, r1
 80153e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153e8:	2900      	cmp	r1, #0
 80153ea:	b096      	sub	sp, #88	@ 0x58
 80153ec:	4615      	mov	r5, r2
 80153ee:	461e      	mov	r6, r3
 80153f0:	da0d      	bge.n	801540e <__swhatbuf_r+0x2e>
 80153f2:	89a3      	ldrh	r3, [r4, #12]
 80153f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80153f8:	f04f 0100 	mov.w	r1, #0
 80153fc:	bf14      	ite	ne
 80153fe:	2340      	movne	r3, #64	@ 0x40
 8015400:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015404:	2000      	movs	r0, #0
 8015406:	6031      	str	r1, [r6, #0]
 8015408:	602b      	str	r3, [r5, #0]
 801540a:	b016      	add	sp, #88	@ 0x58
 801540c:	bd70      	pop	{r4, r5, r6, pc}
 801540e:	466a      	mov	r2, sp
 8015410:	f000 f8f0 	bl	80155f4 <_fstat_r>
 8015414:	2800      	cmp	r0, #0
 8015416:	dbec      	blt.n	80153f2 <__swhatbuf_r+0x12>
 8015418:	9901      	ldr	r1, [sp, #4]
 801541a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801541e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015422:	4259      	negs	r1, r3
 8015424:	4159      	adcs	r1, r3
 8015426:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801542a:	e7eb      	b.n	8015404 <__swhatbuf_r+0x24>

0801542c <__smakebuf_r>:
 801542c:	898b      	ldrh	r3, [r1, #12]
 801542e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015430:	079d      	lsls	r5, r3, #30
 8015432:	4606      	mov	r6, r0
 8015434:	460c      	mov	r4, r1
 8015436:	d507      	bpl.n	8015448 <__smakebuf_r+0x1c>
 8015438:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801543c:	6023      	str	r3, [r4, #0]
 801543e:	6123      	str	r3, [r4, #16]
 8015440:	2301      	movs	r3, #1
 8015442:	6163      	str	r3, [r4, #20]
 8015444:	b003      	add	sp, #12
 8015446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015448:	ab01      	add	r3, sp, #4
 801544a:	466a      	mov	r2, sp
 801544c:	f7ff ffc8 	bl	80153e0 <__swhatbuf_r>
 8015450:	9f00      	ldr	r7, [sp, #0]
 8015452:	4605      	mov	r5, r0
 8015454:	4639      	mov	r1, r7
 8015456:	4630      	mov	r0, r6
 8015458:	f7fd fdf4 	bl	8013044 <_malloc_r>
 801545c:	b948      	cbnz	r0, 8015472 <__smakebuf_r+0x46>
 801545e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015462:	059a      	lsls	r2, r3, #22
 8015464:	d4ee      	bmi.n	8015444 <__smakebuf_r+0x18>
 8015466:	f023 0303 	bic.w	r3, r3, #3
 801546a:	f043 0302 	orr.w	r3, r3, #2
 801546e:	81a3      	strh	r3, [r4, #12]
 8015470:	e7e2      	b.n	8015438 <__smakebuf_r+0xc>
 8015472:	89a3      	ldrh	r3, [r4, #12]
 8015474:	6020      	str	r0, [r4, #0]
 8015476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801547a:	81a3      	strh	r3, [r4, #12]
 801547c:	9b01      	ldr	r3, [sp, #4]
 801547e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015482:	b15b      	cbz	r3, 801549c <__smakebuf_r+0x70>
 8015484:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015488:	4630      	mov	r0, r6
 801548a:	f000 f8c5 	bl	8015618 <_isatty_r>
 801548e:	b128      	cbz	r0, 801549c <__smakebuf_r+0x70>
 8015490:	89a3      	ldrh	r3, [r4, #12]
 8015492:	f023 0303 	bic.w	r3, r3, #3
 8015496:	f043 0301 	orr.w	r3, r3, #1
 801549a:	81a3      	strh	r3, [r4, #12]
 801549c:	89a3      	ldrh	r3, [r4, #12]
 801549e:	431d      	orrs	r5, r3
 80154a0:	81a5      	strh	r5, [r4, #12]
 80154a2:	e7cf      	b.n	8015444 <__smakebuf_r+0x18>

080154a4 <_putc_r>:
 80154a4:	b570      	push	{r4, r5, r6, lr}
 80154a6:	460d      	mov	r5, r1
 80154a8:	4614      	mov	r4, r2
 80154aa:	4606      	mov	r6, r0
 80154ac:	b118      	cbz	r0, 80154b6 <_putc_r+0x12>
 80154ae:	6a03      	ldr	r3, [r0, #32]
 80154b0:	b90b      	cbnz	r3, 80154b6 <_putc_r+0x12>
 80154b2:	f7fc fcc9 	bl	8011e48 <__sinit>
 80154b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80154b8:	07d8      	lsls	r0, r3, #31
 80154ba:	d405      	bmi.n	80154c8 <_putc_r+0x24>
 80154bc:	89a3      	ldrh	r3, [r4, #12]
 80154be:	0599      	lsls	r1, r3, #22
 80154c0:	d402      	bmi.n	80154c8 <_putc_r+0x24>
 80154c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80154c4:	f7fc ff4d 	bl	8012362 <__retarget_lock_acquire_recursive>
 80154c8:	68a3      	ldr	r3, [r4, #8]
 80154ca:	3b01      	subs	r3, #1
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	60a3      	str	r3, [r4, #8]
 80154d0:	da05      	bge.n	80154de <_putc_r+0x3a>
 80154d2:	69a2      	ldr	r2, [r4, #24]
 80154d4:	4293      	cmp	r3, r2
 80154d6:	db12      	blt.n	80154fe <_putc_r+0x5a>
 80154d8:	b2eb      	uxtb	r3, r5
 80154da:	2b0a      	cmp	r3, #10
 80154dc:	d00f      	beq.n	80154fe <_putc_r+0x5a>
 80154de:	6823      	ldr	r3, [r4, #0]
 80154e0:	1c5a      	adds	r2, r3, #1
 80154e2:	6022      	str	r2, [r4, #0]
 80154e4:	701d      	strb	r5, [r3, #0]
 80154e6:	b2ed      	uxtb	r5, r5
 80154e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80154ea:	07da      	lsls	r2, r3, #31
 80154ec:	d405      	bmi.n	80154fa <_putc_r+0x56>
 80154ee:	89a3      	ldrh	r3, [r4, #12]
 80154f0:	059b      	lsls	r3, r3, #22
 80154f2:	d402      	bmi.n	80154fa <_putc_r+0x56>
 80154f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80154f6:	f7fc ff35 	bl	8012364 <__retarget_lock_release_recursive>
 80154fa:	4628      	mov	r0, r5
 80154fc:	bd70      	pop	{r4, r5, r6, pc}
 80154fe:	4629      	mov	r1, r5
 8015500:	4622      	mov	r2, r4
 8015502:	4630      	mov	r0, r6
 8015504:	f7fc fde1 	bl	80120ca <__swbuf_r>
 8015508:	4605      	mov	r5, r0
 801550a:	e7ed      	b.n	80154e8 <_putc_r+0x44>

0801550c <__sccl>:
 801550c:	b570      	push	{r4, r5, r6, lr}
 801550e:	780b      	ldrb	r3, [r1, #0]
 8015510:	4604      	mov	r4, r0
 8015512:	2b5e      	cmp	r3, #94	@ 0x5e
 8015514:	bf0b      	itete	eq
 8015516:	784b      	ldrbeq	r3, [r1, #1]
 8015518:	1c4a      	addne	r2, r1, #1
 801551a:	1c8a      	addeq	r2, r1, #2
 801551c:	2100      	movne	r1, #0
 801551e:	bf08      	it	eq
 8015520:	2101      	moveq	r1, #1
 8015522:	3801      	subs	r0, #1
 8015524:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8015528:	f800 1f01 	strb.w	r1, [r0, #1]!
 801552c:	42a8      	cmp	r0, r5
 801552e:	d1fb      	bne.n	8015528 <__sccl+0x1c>
 8015530:	b90b      	cbnz	r3, 8015536 <__sccl+0x2a>
 8015532:	1e50      	subs	r0, r2, #1
 8015534:	bd70      	pop	{r4, r5, r6, pc}
 8015536:	f081 0101 	eor.w	r1, r1, #1
 801553a:	54e1      	strb	r1, [r4, r3]
 801553c:	4610      	mov	r0, r2
 801553e:	4602      	mov	r2, r0
 8015540:	f812 5b01 	ldrb.w	r5, [r2], #1
 8015544:	2d2d      	cmp	r5, #45	@ 0x2d
 8015546:	d005      	beq.n	8015554 <__sccl+0x48>
 8015548:	2d5d      	cmp	r5, #93	@ 0x5d
 801554a:	d016      	beq.n	801557a <__sccl+0x6e>
 801554c:	2d00      	cmp	r5, #0
 801554e:	d0f1      	beq.n	8015534 <__sccl+0x28>
 8015550:	462b      	mov	r3, r5
 8015552:	e7f2      	b.n	801553a <__sccl+0x2e>
 8015554:	7846      	ldrb	r6, [r0, #1]
 8015556:	2e5d      	cmp	r6, #93	@ 0x5d
 8015558:	d0fa      	beq.n	8015550 <__sccl+0x44>
 801555a:	42b3      	cmp	r3, r6
 801555c:	dcf8      	bgt.n	8015550 <__sccl+0x44>
 801555e:	3002      	adds	r0, #2
 8015560:	461a      	mov	r2, r3
 8015562:	3201      	adds	r2, #1
 8015564:	4296      	cmp	r6, r2
 8015566:	54a1      	strb	r1, [r4, r2]
 8015568:	dcfb      	bgt.n	8015562 <__sccl+0x56>
 801556a:	1af2      	subs	r2, r6, r3
 801556c:	3a01      	subs	r2, #1
 801556e:	1c5d      	adds	r5, r3, #1
 8015570:	42b3      	cmp	r3, r6
 8015572:	bfa8      	it	ge
 8015574:	2200      	movge	r2, #0
 8015576:	18ab      	adds	r3, r5, r2
 8015578:	e7e1      	b.n	801553e <__sccl+0x32>
 801557a:	4610      	mov	r0, r2
 801557c:	e7da      	b.n	8015534 <__sccl+0x28>

0801557e <__submore>:
 801557e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015582:	460c      	mov	r4, r1
 8015584:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8015586:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801558a:	4299      	cmp	r1, r3
 801558c:	d11d      	bne.n	80155ca <__submore+0x4c>
 801558e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8015592:	f7fd fd57 	bl	8013044 <_malloc_r>
 8015596:	b918      	cbnz	r0, 80155a0 <__submore+0x22>
 8015598:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80155a4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80155a6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80155aa:	6360      	str	r0, [r4, #52]	@ 0x34
 80155ac:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80155b0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80155b4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80155b8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80155bc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80155c0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80155c4:	6020      	str	r0, [r4, #0]
 80155c6:	2000      	movs	r0, #0
 80155c8:	e7e8      	b.n	801559c <__submore+0x1e>
 80155ca:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80155cc:	0077      	lsls	r7, r6, #1
 80155ce:	463a      	mov	r2, r7
 80155d0:	f000 fbc7 	bl	8015d62 <_realloc_r>
 80155d4:	4605      	mov	r5, r0
 80155d6:	2800      	cmp	r0, #0
 80155d8:	d0de      	beq.n	8015598 <__submore+0x1a>
 80155da:	eb00 0806 	add.w	r8, r0, r6
 80155de:	4601      	mov	r1, r0
 80155e0:	4632      	mov	r2, r6
 80155e2:	4640      	mov	r0, r8
 80155e4:	f7fc febf 	bl	8012366 <memcpy>
 80155e8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80155ec:	f8c4 8000 	str.w	r8, [r4]
 80155f0:	e7e9      	b.n	80155c6 <__submore+0x48>
	...

080155f4 <_fstat_r>:
 80155f4:	b538      	push	{r3, r4, r5, lr}
 80155f6:	4d07      	ldr	r5, [pc, #28]	@ (8015614 <_fstat_r+0x20>)
 80155f8:	2300      	movs	r3, #0
 80155fa:	4604      	mov	r4, r0
 80155fc:	4608      	mov	r0, r1
 80155fe:	4611      	mov	r1, r2
 8015600:	602b      	str	r3, [r5, #0]
 8015602:	f7ef f94b 	bl	800489c <_fstat>
 8015606:	1c43      	adds	r3, r0, #1
 8015608:	d102      	bne.n	8015610 <_fstat_r+0x1c>
 801560a:	682b      	ldr	r3, [r5, #0]
 801560c:	b103      	cbz	r3, 8015610 <_fstat_r+0x1c>
 801560e:	6023      	str	r3, [r4, #0]
 8015610:	bd38      	pop	{r3, r4, r5, pc}
 8015612:	bf00      	nop
 8015614:	24000878 	.word	0x24000878

08015618 <_isatty_r>:
 8015618:	b538      	push	{r3, r4, r5, lr}
 801561a:	4d06      	ldr	r5, [pc, #24]	@ (8015634 <_isatty_r+0x1c>)
 801561c:	2300      	movs	r3, #0
 801561e:	4604      	mov	r4, r0
 8015620:	4608      	mov	r0, r1
 8015622:	602b      	str	r3, [r5, #0]
 8015624:	f7ef f94a 	bl	80048bc <_isatty>
 8015628:	1c43      	adds	r3, r0, #1
 801562a:	d102      	bne.n	8015632 <_isatty_r+0x1a>
 801562c:	682b      	ldr	r3, [r5, #0]
 801562e:	b103      	cbz	r3, 8015632 <_isatty_r+0x1a>
 8015630:	6023      	str	r3, [r4, #0]
 8015632:	bd38      	pop	{r3, r4, r5, pc}
 8015634:	24000878 	.word	0x24000878

08015638 <_sbrk_r>:
 8015638:	b538      	push	{r3, r4, r5, lr}
 801563a:	4d06      	ldr	r5, [pc, #24]	@ (8015654 <_sbrk_r+0x1c>)
 801563c:	2300      	movs	r3, #0
 801563e:	4604      	mov	r4, r0
 8015640:	4608      	mov	r0, r1
 8015642:	602b      	str	r3, [r5, #0]
 8015644:	f7ef f952 	bl	80048ec <_sbrk>
 8015648:	1c43      	adds	r3, r0, #1
 801564a:	d102      	bne.n	8015652 <_sbrk_r+0x1a>
 801564c:	682b      	ldr	r3, [r5, #0]
 801564e:	b103      	cbz	r3, 8015652 <_sbrk_r+0x1a>
 8015650:	6023      	str	r3, [r4, #0]
 8015652:	bd38      	pop	{r3, r4, r5, pc}
 8015654:	24000878 	.word	0x24000878

08015658 <nan>:
 8015658:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015660 <nan+0x8>
 801565c:	4770      	bx	lr
 801565e:	bf00      	nop
 8015660:	00000000 	.word	0x00000000
 8015664:	7ff80000 	.word	0x7ff80000

08015668 <__assert_func>:
 8015668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801566a:	4614      	mov	r4, r2
 801566c:	461a      	mov	r2, r3
 801566e:	4b09      	ldr	r3, [pc, #36]	@ (8015694 <__assert_func+0x2c>)
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	4605      	mov	r5, r0
 8015674:	68d8      	ldr	r0, [r3, #12]
 8015676:	b14c      	cbz	r4, 801568c <__assert_func+0x24>
 8015678:	4b07      	ldr	r3, [pc, #28]	@ (8015698 <__assert_func+0x30>)
 801567a:	9100      	str	r1, [sp, #0]
 801567c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015680:	4906      	ldr	r1, [pc, #24]	@ (801569c <__assert_func+0x34>)
 8015682:	462b      	mov	r3, r5
 8015684:	f000 fc1a 	bl	8015ebc <fiprintf>
 8015688:	f000 fc2a 	bl	8015ee0 <abort>
 801568c:	4b04      	ldr	r3, [pc, #16]	@ (80156a0 <__assert_func+0x38>)
 801568e:	461c      	mov	r4, r3
 8015690:	e7f3      	b.n	801567a <__assert_func+0x12>
 8015692:	bf00      	nop
 8015694:	24000020 	.word	0x24000020
 8015698:	08017423 	.word	0x08017423
 801569c:	08017430 	.word	0x08017430
 80156a0:	0801745e 	.word	0x0801745e

080156a4 <_calloc_r>:
 80156a4:	b570      	push	{r4, r5, r6, lr}
 80156a6:	fba1 5402 	umull	r5, r4, r1, r2
 80156aa:	b934      	cbnz	r4, 80156ba <_calloc_r+0x16>
 80156ac:	4629      	mov	r1, r5
 80156ae:	f7fd fcc9 	bl	8013044 <_malloc_r>
 80156b2:	4606      	mov	r6, r0
 80156b4:	b928      	cbnz	r0, 80156c2 <_calloc_r+0x1e>
 80156b6:	4630      	mov	r0, r6
 80156b8:	bd70      	pop	{r4, r5, r6, pc}
 80156ba:	220c      	movs	r2, #12
 80156bc:	6002      	str	r2, [r0, #0]
 80156be:	2600      	movs	r6, #0
 80156c0:	e7f9      	b.n	80156b6 <_calloc_r+0x12>
 80156c2:	462a      	mov	r2, r5
 80156c4:	4621      	mov	r1, r4
 80156c6:	f7fc fdaf 	bl	8012228 <memset>
 80156ca:	e7f4      	b.n	80156b6 <_calloc_r+0x12>

080156cc <rshift>:
 80156cc:	6903      	ldr	r3, [r0, #16]
 80156ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80156d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80156da:	f100 0414 	add.w	r4, r0, #20
 80156de:	dd45      	ble.n	801576c <rshift+0xa0>
 80156e0:	f011 011f 	ands.w	r1, r1, #31
 80156e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80156e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80156ec:	d10c      	bne.n	8015708 <rshift+0x3c>
 80156ee:	f100 0710 	add.w	r7, r0, #16
 80156f2:	4629      	mov	r1, r5
 80156f4:	42b1      	cmp	r1, r6
 80156f6:	d334      	bcc.n	8015762 <rshift+0x96>
 80156f8:	1a9b      	subs	r3, r3, r2
 80156fa:	009b      	lsls	r3, r3, #2
 80156fc:	1eea      	subs	r2, r5, #3
 80156fe:	4296      	cmp	r6, r2
 8015700:	bf38      	it	cc
 8015702:	2300      	movcc	r3, #0
 8015704:	4423      	add	r3, r4
 8015706:	e015      	b.n	8015734 <rshift+0x68>
 8015708:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801570c:	f1c1 0820 	rsb	r8, r1, #32
 8015710:	40cf      	lsrs	r7, r1
 8015712:	f105 0e04 	add.w	lr, r5, #4
 8015716:	46a1      	mov	r9, r4
 8015718:	4576      	cmp	r6, lr
 801571a:	46f4      	mov	ip, lr
 801571c:	d815      	bhi.n	801574a <rshift+0x7e>
 801571e:	1a9a      	subs	r2, r3, r2
 8015720:	0092      	lsls	r2, r2, #2
 8015722:	3a04      	subs	r2, #4
 8015724:	3501      	adds	r5, #1
 8015726:	42ae      	cmp	r6, r5
 8015728:	bf38      	it	cc
 801572a:	2200      	movcc	r2, #0
 801572c:	18a3      	adds	r3, r4, r2
 801572e:	50a7      	str	r7, [r4, r2]
 8015730:	b107      	cbz	r7, 8015734 <rshift+0x68>
 8015732:	3304      	adds	r3, #4
 8015734:	1b1a      	subs	r2, r3, r4
 8015736:	42a3      	cmp	r3, r4
 8015738:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801573c:	bf08      	it	eq
 801573e:	2300      	moveq	r3, #0
 8015740:	6102      	str	r2, [r0, #16]
 8015742:	bf08      	it	eq
 8015744:	6143      	streq	r3, [r0, #20]
 8015746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801574a:	f8dc c000 	ldr.w	ip, [ip]
 801574e:	fa0c fc08 	lsl.w	ip, ip, r8
 8015752:	ea4c 0707 	orr.w	r7, ip, r7
 8015756:	f849 7b04 	str.w	r7, [r9], #4
 801575a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801575e:	40cf      	lsrs	r7, r1
 8015760:	e7da      	b.n	8015718 <rshift+0x4c>
 8015762:	f851 cb04 	ldr.w	ip, [r1], #4
 8015766:	f847 cf04 	str.w	ip, [r7, #4]!
 801576a:	e7c3      	b.n	80156f4 <rshift+0x28>
 801576c:	4623      	mov	r3, r4
 801576e:	e7e1      	b.n	8015734 <rshift+0x68>

08015770 <__hexdig_fun>:
 8015770:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015774:	2b09      	cmp	r3, #9
 8015776:	d802      	bhi.n	801577e <__hexdig_fun+0xe>
 8015778:	3820      	subs	r0, #32
 801577a:	b2c0      	uxtb	r0, r0
 801577c:	4770      	bx	lr
 801577e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015782:	2b05      	cmp	r3, #5
 8015784:	d801      	bhi.n	801578a <__hexdig_fun+0x1a>
 8015786:	3847      	subs	r0, #71	@ 0x47
 8015788:	e7f7      	b.n	801577a <__hexdig_fun+0xa>
 801578a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801578e:	2b05      	cmp	r3, #5
 8015790:	d801      	bhi.n	8015796 <__hexdig_fun+0x26>
 8015792:	3827      	subs	r0, #39	@ 0x27
 8015794:	e7f1      	b.n	801577a <__hexdig_fun+0xa>
 8015796:	2000      	movs	r0, #0
 8015798:	4770      	bx	lr
	...

0801579c <__gethex>:
 801579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157a0:	b085      	sub	sp, #20
 80157a2:	468a      	mov	sl, r1
 80157a4:	9302      	str	r3, [sp, #8]
 80157a6:	680b      	ldr	r3, [r1, #0]
 80157a8:	9001      	str	r0, [sp, #4]
 80157aa:	4690      	mov	r8, r2
 80157ac:	1c9c      	adds	r4, r3, #2
 80157ae:	46a1      	mov	r9, r4
 80157b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80157b4:	2830      	cmp	r0, #48	@ 0x30
 80157b6:	d0fa      	beq.n	80157ae <__gethex+0x12>
 80157b8:	eba9 0303 	sub.w	r3, r9, r3
 80157bc:	f1a3 0b02 	sub.w	fp, r3, #2
 80157c0:	f7ff ffd6 	bl	8015770 <__hexdig_fun>
 80157c4:	4605      	mov	r5, r0
 80157c6:	2800      	cmp	r0, #0
 80157c8:	d168      	bne.n	801589c <__gethex+0x100>
 80157ca:	49a0      	ldr	r1, [pc, #640]	@ (8015a4c <__gethex+0x2b0>)
 80157cc:	2201      	movs	r2, #1
 80157ce:	4648      	mov	r0, r9
 80157d0:	f7fc fd3f 	bl	8012252 <strncmp>
 80157d4:	4607      	mov	r7, r0
 80157d6:	2800      	cmp	r0, #0
 80157d8:	d167      	bne.n	80158aa <__gethex+0x10e>
 80157da:	f899 0001 	ldrb.w	r0, [r9, #1]
 80157de:	4626      	mov	r6, r4
 80157e0:	f7ff ffc6 	bl	8015770 <__hexdig_fun>
 80157e4:	2800      	cmp	r0, #0
 80157e6:	d062      	beq.n	80158ae <__gethex+0x112>
 80157e8:	4623      	mov	r3, r4
 80157ea:	7818      	ldrb	r0, [r3, #0]
 80157ec:	2830      	cmp	r0, #48	@ 0x30
 80157ee:	4699      	mov	r9, r3
 80157f0:	f103 0301 	add.w	r3, r3, #1
 80157f4:	d0f9      	beq.n	80157ea <__gethex+0x4e>
 80157f6:	f7ff ffbb 	bl	8015770 <__hexdig_fun>
 80157fa:	fab0 f580 	clz	r5, r0
 80157fe:	096d      	lsrs	r5, r5, #5
 8015800:	f04f 0b01 	mov.w	fp, #1
 8015804:	464a      	mov	r2, r9
 8015806:	4616      	mov	r6, r2
 8015808:	3201      	adds	r2, #1
 801580a:	7830      	ldrb	r0, [r6, #0]
 801580c:	f7ff ffb0 	bl	8015770 <__hexdig_fun>
 8015810:	2800      	cmp	r0, #0
 8015812:	d1f8      	bne.n	8015806 <__gethex+0x6a>
 8015814:	498d      	ldr	r1, [pc, #564]	@ (8015a4c <__gethex+0x2b0>)
 8015816:	2201      	movs	r2, #1
 8015818:	4630      	mov	r0, r6
 801581a:	f7fc fd1a 	bl	8012252 <strncmp>
 801581e:	2800      	cmp	r0, #0
 8015820:	d13f      	bne.n	80158a2 <__gethex+0x106>
 8015822:	b944      	cbnz	r4, 8015836 <__gethex+0x9a>
 8015824:	1c74      	adds	r4, r6, #1
 8015826:	4622      	mov	r2, r4
 8015828:	4616      	mov	r6, r2
 801582a:	3201      	adds	r2, #1
 801582c:	7830      	ldrb	r0, [r6, #0]
 801582e:	f7ff ff9f 	bl	8015770 <__hexdig_fun>
 8015832:	2800      	cmp	r0, #0
 8015834:	d1f8      	bne.n	8015828 <__gethex+0x8c>
 8015836:	1ba4      	subs	r4, r4, r6
 8015838:	00a7      	lsls	r7, r4, #2
 801583a:	7833      	ldrb	r3, [r6, #0]
 801583c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015840:	2b50      	cmp	r3, #80	@ 0x50
 8015842:	d13e      	bne.n	80158c2 <__gethex+0x126>
 8015844:	7873      	ldrb	r3, [r6, #1]
 8015846:	2b2b      	cmp	r3, #43	@ 0x2b
 8015848:	d033      	beq.n	80158b2 <__gethex+0x116>
 801584a:	2b2d      	cmp	r3, #45	@ 0x2d
 801584c:	d034      	beq.n	80158b8 <__gethex+0x11c>
 801584e:	1c71      	adds	r1, r6, #1
 8015850:	2400      	movs	r4, #0
 8015852:	7808      	ldrb	r0, [r1, #0]
 8015854:	f7ff ff8c 	bl	8015770 <__hexdig_fun>
 8015858:	1e43      	subs	r3, r0, #1
 801585a:	b2db      	uxtb	r3, r3
 801585c:	2b18      	cmp	r3, #24
 801585e:	d830      	bhi.n	80158c2 <__gethex+0x126>
 8015860:	f1a0 0210 	sub.w	r2, r0, #16
 8015864:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015868:	f7ff ff82 	bl	8015770 <__hexdig_fun>
 801586c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8015870:	fa5f fc8c 	uxtb.w	ip, ip
 8015874:	f1bc 0f18 	cmp.w	ip, #24
 8015878:	f04f 030a 	mov.w	r3, #10
 801587c:	d91e      	bls.n	80158bc <__gethex+0x120>
 801587e:	b104      	cbz	r4, 8015882 <__gethex+0xe6>
 8015880:	4252      	negs	r2, r2
 8015882:	4417      	add	r7, r2
 8015884:	f8ca 1000 	str.w	r1, [sl]
 8015888:	b1ed      	cbz	r5, 80158c6 <__gethex+0x12a>
 801588a:	f1bb 0f00 	cmp.w	fp, #0
 801588e:	bf0c      	ite	eq
 8015890:	2506      	moveq	r5, #6
 8015892:	2500      	movne	r5, #0
 8015894:	4628      	mov	r0, r5
 8015896:	b005      	add	sp, #20
 8015898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801589c:	2500      	movs	r5, #0
 801589e:	462c      	mov	r4, r5
 80158a0:	e7b0      	b.n	8015804 <__gethex+0x68>
 80158a2:	2c00      	cmp	r4, #0
 80158a4:	d1c7      	bne.n	8015836 <__gethex+0x9a>
 80158a6:	4627      	mov	r7, r4
 80158a8:	e7c7      	b.n	801583a <__gethex+0x9e>
 80158aa:	464e      	mov	r6, r9
 80158ac:	462f      	mov	r7, r5
 80158ae:	2501      	movs	r5, #1
 80158b0:	e7c3      	b.n	801583a <__gethex+0x9e>
 80158b2:	2400      	movs	r4, #0
 80158b4:	1cb1      	adds	r1, r6, #2
 80158b6:	e7cc      	b.n	8015852 <__gethex+0xb6>
 80158b8:	2401      	movs	r4, #1
 80158ba:	e7fb      	b.n	80158b4 <__gethex+0x118>
 80158bc:	fb03 0002 	mla	r0, r3, r2, r0
 80158c0:	e7ce      	b.n	8015860 <__gethex+0xc4>
 80158c2:	4631      	mov	r1, r6
 80158c4:	e7de      	b.n	8015884 <__gethex+0xe8>
 80158c6:	eba6 0309 	sub.w	r3, r6, r9
 80158ca:	3b01      	subs	r3, #1
 80158cc:	4629      	mov	r1, r5
 80158ce:	2b07      	cmp	r3, #7
 80158d0:	dc0a      	bgt.n	80158e8 <__gethex+0x14c>
 80158d2:	9801      	ldr	r0, [sp, #4]
 80158d4:	f7fd fc42 	bl	801315c <_Balloc>
 80158d8:	4604      	mov	r4, r0
 80158da:	b940      	cbnz	r0, 80158ee <__gethex+0x152>
 80158dc:	4b5c      	ldr	r3, [pc, #368]	@ (8015a50 <__gethex+0x2b4>)
 80158de:	4602      	mov	r2, r0
 80158e0:	21e4      	movs	r1, #228	@ 0xe4
 80158e2:	485c      	ldr	r0, [pc, #368]	@ (8015a54 <__gethex+0x2b8>)
 80158e4:	f7ff fec0 	bl	8015668 <__assert_func>
 80158e8:	3101      	adds	r1, #1
 80158ea:	105b      	asrs	r3, r3, #1
 80158ec:	e7ef      	b.n	80158ce <__gethex+0x132>
 80158ee:	f100 0a14 	add.w	sl, r0, #20
 80158f2:	2300      	movs	r3, #0
 80158f4:	4655      	mov	r5, sl
 80158f6:	469b      	mov	fp, r3
 80158f8:	45b1      	cmp	r9, r6
 80158fa:	d337      	bcc.n	801596c <__gethex+0x1d0>
 80158fc:	f845 bb04 	str.w	fp, [r5], #4
 8015900:	eba5 050a 	sub.w	r5, r5, sl
 8015904:	10ad      	asrs	r5, r5, #2
 8015906:	6125      	str	r5, [r4, #16]
 8015908:	4658      	mov	r0, fp
 801590a:	f7fd fd19 	bl	8013340 <__hi0bits>
 801590e:	016d      	lsls	r5, r5, #5
 8015910:	f8d8 6000 	ldr.w	r6, [r8]
 8015914:	1a2d      	subs	r5, r5, r0
 8015916:	42b5      	cmp	r5, r6
 8015918:	dd54      	ble.n	80159c4 <__gethex+0x228>
 801591a:	1bad      	subs	r5, r5, r6
 801591c:	4629      	mov	r1, r5
 801591e:	4620      	mov	r0, r4
 8015920:	f7fe f8a2 	bl	8013a68 <__any_on>
 8015924:	4681      	mov	r9, r0
 8015926:	b178      	cbz	r0, 8015948 <__gethex+0x1ac>
 8015928:	1e6b      	subs	r3, r5, #1
 801592a:	1159      	asrs	r1, r3, #5
 801592c:	f003 021f 	and.w	r2, r3, #31
 8015930:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015934:	f04f 0901 	mov.w	r9, #1
 8015938:	fa09 f202 	lsl.w	r2, r9, r2
 801593c:	420a      	tst	r2, r1
 801593e:	d003      	beq.n	8015948 <__gethex+0x1ac>
 8015940:	454b      	cmp	r3, r9
 8015942:	dc36      	bgt.n	80159b2 <__gethex+0x216>
 8015944:	f04f 0902 	mov.w	r9, #2
 8015948:	4629      	mov	r1, r5
 801594a:	4620      	mov	r0, r4
 801594c:	f7ff febe 	bl	80156cc <rshift>
 8015950:	442f      	add	r7, r5
 8015952:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015956:	42bb      	cmp	r3, r7
 8015958:	da42      	bge.n	80159e0 <__gethex+0x244>
 801595a:	9801      	ldr	r0, [sp, #4]
 801595c:	4621      	mov	r1, r4
 801595e:	f7fd fc3d 	bl	80131dc <_Bfree>
 8015962:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015964:	2300      	movs	r3, #0
 8015966:	6013      	str	r3, [r2, #0]
 8015968:	25a3      	movs	r5, #163	@ 0xa3
 801596a:	e793      	b.n	8015894 <__gethex+0xf8>
 801596c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015970:	2a2e      	cmp	r2, #46	@ 0x2e
 8015972:	d012      	beq.n	801599a <__gethex+0x1fe>
 8015974:	2b20      	cmp	r3, #32
 8015976:	d104      	bne.n	8015982 <__gethex+0x1e6>
 8015978:	f845 bb04 	str.w	fp, [r5], #4
 801597c:	f04f 0b00 	mov.w	fp, #0
 8015980:	465b      	mov	r3, fp
 8015982:	7830      	ldrb	r0, [r6, #0]
 8015984:	9303      	str	r3, [sp, #12]
 8015986:	f7ff fef3 	bl	8015770 <__hexdig_fun>
 801598a:	9b03      	ldr	r3, [sp, #12]
 801598c:	f000 000f 	and.w	r0, r0, #15
 8015990:	4098      	lsls	r0, r3
 8015992:	ea4b 0b00 	orr.w	fp, fp, r0
 8015996:	3304      	adds	r3, #4
 8015998:	e7ae      	b.n	80158f8 <__gethex+0x15c>
 801599a:	45b1      	cmp	r9, r6
 801599c:	d8ea      	bhi.n	8015974 <__gethex+0x1d8>
 801599e:	492b      	ldr	r1, [pc, #172]	@ (8015a4c <__gethex+0x2b0>)
 80159a0:	9303      	str	r3, [sp, #12]
 80159a2:	2201      	movs	r2, #1
 80159a4:	4630      	mov	r0, r6
 80159a6:	f7fc fc54 	bl	8012252 <strncmp>
 80159aa:	9b03      	ldr	r3, [sp, #12]
 80159ac:	2800      	cmp	r0, #0
 80159ae:	d1e1      	bne.n	8015974 <__gethex+0x1d8>
 80159b0:	e7a2      	b.n	80158f8 <__gethex+0x15c>
 80159b2:	1ea9      	subs	r1, r5, #2
 80159b4:	4620      	mov	r0, r4
 80159b6:	f7fe f857 	bl	8013a68 <__any_on>
 80159ba:	2800      	cmp	r0, #0
 80159bc:	d0c2      	beq.n	8015944 <__gethex+0x1a8>
 80159be:	f04f 0903 	mov.w	r9, #3
 80159c2:	e7c1      	b.n	8015948 <__gethex+0x1ac>
 80159c4:	da09      	bge.n	80159da <__gethex+0x23e>
 80159c6:	1b75      	subs	r5, r6, r5
 80159c8:	4621      	mov	r1, r4
 80159ca:	9801      	ldr	r0, [sp, #4]
 80159cc:	462a      	mov	r2, r5
 80159ce:	f7fd fe15 	bl	80135fc <__lshift>
 80159d2:	1b7f      	subs	r7, r7, r5
 80159d4:	4604      	mov	r4, r0
 80159d6:	f100 0a14 	add.w	sl, r0, #20
 80159da:	f04f 0900 	mov.w	r9, #0
 80159de:	e7b8      	b.n	8015952 <__gethex+0x1b6>
 80159e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80159e4:	42bd      	cmp	r5, r7
 80159e6:	dd6f      	ble.n	8015ac8 <__gethex+0x32c>
 80159e8:	1bed      	subs	r5, r5, r7
 80159ea:	42ae      	cmp	r6, r5
 80159ec:	dc34      	bgt.n	8015a58 <__gethex+0x2bc>
 80159ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80159f2:	2b02      	cmp	r3, #2
 80159f4:	d022      	beq.n	8015a3c <__gethex+0x2a0>
 80159f6:	2b03      	cmp	r3, #3
 80159f8:	d024      	beq.n	8015a44 <__gethex+0x2a8>
 80159fa:	2b01      	cmp	r3, #1
 80159fc:	d115      	bne.n	8015a2a <__gethex+0x28e>
 80159fe:	42ae      	cmp	r6, r5
 8015a00:	d113      	bne.n	8015a2a <__gethex+0x28e>
 8015a02:	2e01      	cmp	r6, #1
 8015a04:	d10b      	bne.n	8015a1e <__gethex+0x282>
 8015a06:	9a02      	ldr	r2, [sp, #8]
 8015a08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015a0c:	6013      	str	r3, [r2, #0]
 8015a0e:	2301      	movs	r3, #1
 8015a10:	6123      	str	r3, [r4, #16]
 8015a12:	f8ca 3000 	str.w	r3, [sl]
 8015a16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a18:	2562      	movs	r5, #98	@ 0x62
 8015a1a:	601c      	str	r4, [r3, #0]
 8015a1c:	e73a      	b.n	8015894 <__gethex+0xf8>
 8015a1e:	1e71      	subs	r1, r6, #1
 8015a20:	4620      	mov	r0, r4
 8015a22:	f7fe f821 	bl	8013a68 <__any_on>
 8015a26:	2800      	cmp	r0, #0
 8015a28:	d1ed      	bne.n	8015a06 <__gethex+0x26a>
 8015a2a:	9801      	ldr	r0, [sp, #4]
 8015a2c:	4621      	mov	r1, r4
 8015a2e:	f7fd fbd5 	bl	80131dc <_Bfree>
 8015a32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015a34:	2300      	movs	r3, #0
 8015a36:	6013      	str	r3, [r2, #0]
 8015a38:	2550      	movs	r5, #80	@ 0x50
 8015a3a:	e72b      	b.n	8015894 <__gethex+0xf8>
 8015a3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d1f3      	bne.n	8015a2a <__gethex+0x28e>
 8015a42:	e7e0      	b.n	8015a06 <__gethex+0x26a>
 8015a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d1dd      	bne.n	8015a06 <__gethex+0x26a>
 8015a4a:	e7ee      	b.n	8015a2a <__gethex+0x28e>
 8015a4c:	080173ed 	.word	0x080173ed
 8015a50:	08017383 	.word	0x08017383
 8015a54:	0801745f 	.word	0x0801745f
 8015a58:	1e6f      	subs	r7, r5, #1
 8015a5a:	f1b9 0f00 	cmp.w	r9, #0
 8015a5e:	d130      	bne.n	8015ac2 <__gethex+0x326>
 8015a60:	b127      	cbz	r7, 8015a6c <__gethex+0x2d0>
 8015a62:	4639      	mov	r1, r7
 8015a64:	4620      	mov	r0, r4
 8015a66:	f7fd ffff 	bl	8013a68 <__any_on>
 8015a6a:	4681      	mov	r9, r0
 8015a6c:	117a      	asrs	r2, r7, #5
 8015a6e:	2301      	movs	r3, #1
 8015a70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015a74:	f007 071f 	and.w	r7, r7, #31
 8015a78:	40bb      	lsls	r3, r7
 8015a7a:	4213      	tst	r3, r2
 8015a7c:	4629      	mov	r1, r5
 8015a7e:	4620      	mov	r0, r4
 8015a80:	bf18      	it	ne
 8015a82:	f049 0902 	orrne.w	r9, r9, #2
 8015a86:	f7ff fe21 	bl	80156cc <rshift>
 8015a8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015a8e:	1b76      	subs	r6, r6, r5
 8015a90:	2502      	movs	r5, #2
 8015a92:	f1b9 0f00 	cmp.w	r9, #0
 8015a96:	d047      	beq.n	8015b28 <__gethex+0x38c>
 8015a98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015a9c:	2b02      	cmp	r3, #2
 8015a9e:	d015      	beq.n	8015acc <__gethex+0x330>
 8015aa0:	2b03      	cmp	r3, #3
 8015aa2:	d017      	beq.n	8015ad4 <__gethex+0x338>
 8015aa4:	2b01      	cmp	r3, #1
 8015aa6:	d109      	bne.n	8015abc <__gethex+0x320>
 8015aa8:	f019 0f02 	tst.w	r9, #2
 8015aac:	d006      	beq.n	8015abc <__gethex+0x320>
 8015aae:	f8da 3000 	ldr.w	r3, [sl]
 8015ab2:	ea49 0903 	orr.w	r9, r9, r3
 8015ab6:	f019 0f01 	tst.w	r9, #1
 8015aba:	d10e      	bne.n	8015ada <__gethex+0x33e>
 8015abc:	f045 0510 	orr.w	r5, r5, #16
 8015ac0:	e032      	b.n	8015b28 <__gethex+0x38c>
 8015ac2:	f04f 0901 	mov.w	r9, #1
 8015ac6:	e7d1      	b.n	8015a6c <__gethex+0x2d0>
 8015ac8:	2501      	movs	r5, #1
 8015aca:	e7e2      	b.n	8015a92 <__gethex+0x2f6>
 8015acc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015ace:	f1c3 0301 	rsb	r3, r3, #1
 8015ad2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015ad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d0f0      	beq.n	8015abc <__gethex+0x320>
 8015ada:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015ade:	f104 0314 	add.w	r3, r4, #20
 8015ae2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015ae6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015aea:	f04f 0c00 	mov.w	ip, #0
 8015aee:	4618      	mov	r0, r3
 8015af0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015af4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8015af8:	d01b      	beq.n	8015b32 <__gethex+0x396>
 8015afa:	3201      	adds	r2, #1
 8015afc:	6002      	str	r2, [r0, #0]
 8015afe:	2d02      	cmp	r5, #2
 8015b00:	f104 0314 	add.w	r3, r4, #20
 8015b04:	d13c      	bne.n	8015b80 <__gethex+0x3e4>
 8015b06:	f8d8 2000 	ldr.w	r2, [r8]
 8015b0a:	3a01      	subs	r2, #1
 8015b0c:	42b2      	cmp	r2, r6
 8015b0e:	d109      	bne.n	8015b24 <__gethex+0x388>
 8015b10:	1171      	asrs	r1, r6, #5
 8015b12:	2201      	movs	r2, #1
 8015b14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015b18:	f006 061f 	and.w	r6, r6, #31
 8015b1c:	fa02 f606 	lsl.w	r6, r2, r6
 8015b20:	421e      	tst	r6, r3
 8015b22:	d13a      	bne.n	8015b9a <__gethex+0x3fe>
 8015b24:	f045 0520 	orr.w	r5, r5, #32
 8015b28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b2a:	601c      	str	r4, [r3, #0]
 8015b2c:	9b02      	ldr	r3, [sp, #8]
 8015b2e:	601f      	str	r7, [r3, #0]
 8015b30:	e6b0      	b.n	8015894 <__gethex+0xf8>
 8015b32:	4299      	cmp	r1, r3
 8015b34:	f843 cc04 	str.w	ip, [r3, #-4]
 8015b38:	d8d9      	bhi.n	8015aee <__gethex+0x352>
 8015b3a:	68a3      	ldr	r3, [r4, #8]
 8015b3c:	459b      	cmp	fp, r3
 8015b3e:	db17      	blt.n	8015b70 <__gethex+0x3d4>
 8015b40:	6861      	ldr	r1, [r4, #4]
 8015b42:	9801      	ldr	r0, [sp, #4]
 8015b44:	3101      	adds	r1, #1
 8015b46:	f7fd fb09 	bl	801315c <_Balloc>
 8015b4a:	4681      	mov	r9, r0
 8015b4c:	b918      	cbnz	r0, 8015b56 <__gethex+0x3ba>
 8015b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8015bb8 <__gethex+0x41c>)
 8015b50:	4602      	mov	r2, r0
 8015b52:	2184      	movs	r1, #132	@ 0x84
 8015b54:	e6c5      	b.n	80158e2 <__gethex+0x146>
 8015b56:	6922      	ldr	r2, [r4, #16]
 8015b58:	3202      	adds	r2, #2
 8015b5a:	f104 010c 	add.w	r1, r4, #12
 8015b5e:	0092      	lsls	r2, r2, #2
 8015b60:	300c      	adds	r0, #12
 8015b62:	f7fc fc00 	bl	8012366 <memcpy>
 8015b66:	4621      	mov	r1, r4
 8015b68:	9801      	ldr	r0, [sp, #4]
 8015b6a:	f7fd fb37 	bl	80131dc <_Bfree>
 8015b6e:	464c      	mov	r4, r9
 8015b70:	6923      	ldr	r3, [r4, #16]
 8015b72:	1c5a      	adds	r2, r3, #1
 8015b74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015b78:	6122      	str	r2, [r4, #16]
 8015b7a:	2201      	movs	r2, #1
 8015b7c:	615a      	str	r2, [r3, #20]
 8015b7e:	e7be      	b.n	8015afe <__gethex+0x362>
 8015b80:	6922      	ldr	r2, [r4, #16]
 8015b82:	455a      	cmp	r2, fp
 8015b84:	dd0b      	ble.n	8015b9e <__gethex+0x402>
 8015b86:	2101      	movs	r1, #1
 8015b88:	4620      	mov	r0, r4
 8015b8a:	f7ff fd9f 	bl	80156cc <rshift>
 8015b8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015b92:	3701      	adds	r7, #1
 8015b94:	42bb      	cmp	r3, r7
 8015b96:	f6ff aee0 	blt.w	801595a <__gethex+0x1be>
 8015b9a:	2501      	movs	r5, #1
 8015b9c:	e7c2      	b.n	8015b24 <__gethex+0x388>
 8015b9e:	f016 061f 	ands.w	r6, r6, #31
 8015ba2:	d0fa      	beq.n	8015b9a <__gethex+0x3fe>
 8015ba4:	4453      	add	r3, sl
 8015ba6:	f1c6 0620 	rsb	r6, r6, #32
 8015baa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015bae:	f7fd fbc7 	bl	8013340 <__hi0bits>
 8015bb2:	42b0      	cmp	r0, r6
 8015bb4:	dbe7      	blt.n	8015b86 <__gethex+0x3ea>
 8015bb6:	e7f0      	b.n	8015b9a <__gethex+0x3fe>
 8015bb8:	08017383 	.word	0x08017383

08015bbc <L_shift>:
 8015bbc:	f1c2 0208 	rsb	r2, r2, #8
 8015bc0:	0092      	lsls	r2, r2, #2
 8015bc2:	b570      	push	{r4, r5, r6, lr}
 8015bc4:	f1c2 0620 	rsb	r6, r2, #32
 8015bc8:	6843      	ldr	r3, [r0, #4]
 8015bca:	6804      	ldr	r4, [r0, #0]
 8015bcc:	fa03 f506 	lsl.w	r5, r3, r6
 8015bd0:	432c      	orrs	r4, r5
 8015bd2:	40d3      	lsrs	r3, r2
 8015bd4:	6004      	str	r4, [r0, #0]
 8015bd6:	f840 3f04 	str.w	r3, [r0, #4]!
 8015bda:	4288      	cmp	r0, r1
 8015bdc:	d3f4      	bcc.n	8015bc8 <L_shift+0xc>
 8015bde:	bd70      	pop	{r4, r5, r6, pc}

08015be0 <__match>:
 8015be0:	b530      	push	{r4, r5, lr}
 8015be2:	6803      	ldr	r3, [r0, #0]
 8015be4:	3301      	adds	r3, #1
 8015be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015bea:	b914      	cbnz	r4, 8015bf2 <__match+0x12>
 8015bec:	6003      	str	r3, [r0, #0]
 8015bee:	2001      	movs	r0, #1
 8015bf0:	bd30      	pop	{r4, r5, pc}
 8015bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bf6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015bfa:	2d19      	cmp	r5, #25
 8015bfc:	bf98      	it	ls
 8015bfe:	3220      	addls	r2, #32
 8015c00:	42a2      	cmp	r2, r4
 8015c02:	d0f0      	beq.n	8015be6 <__match+0x6>
 8015c04:	2000      	movs	r0, #0
 8015c06:	e7f3      	b.n	8015bf0 <__match+0x10>

08015c08 <__hexnan>:
 8015c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c0c:	680b      	ldr	r3, [r1, #0]
 8015c0e:	6801      	ldr	r1, [r0, #0]
 8015c10:	115e      	asrs	r6, r3, #5
 8015c12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015c16:	f013 031f 	ands.w	r3, r3, #31
 8015c1a:	b087      	sub	sp, #28
 8015c1c:	bf18      	it	ne
 8015c1e:	3604      	addne	r6, #4
 8015c20:	2500      	movs	r5, #0
 8015c22:	1f37      	subs	r7, r6, #4
 8015c24:	4682      	mov	sl, r0
 8015c26:	4690      	mov	r8, r2
 8015c28:	9301      	str	r3, [sp, #4]
 8015c2a:	f846 5c04 	str.w	r5, [r6, #-4]
 8015c2e:	46b9      	mov	r9, r7
 8015c30:	463c      	mov	r4, r7
 8015c32:	9502      	str	r5, [sp, #8]
 8015c34:	46ab      	mov	fp, r5
 8015c36:	784a      	ldrb	r2, [r1, #1]
 8015c38:	1c4b      	adds	r3, r1, #1
 8015c3a:	9303      	str	r3, [sp, #12]
 8015c3c:	b342      	cbz	r2, 8015c90 <__hexnan+0x88>
 8015c3e:	4610      	mov	r0, r2
 8015c40:	9105      	str	r1, [sp, #20]
 8015c42:	9204      	str	r2, [sp, #16]
 8015c44:	f7ff fd94 	bl	8015770 <__hexdig_fun>
 8015c48:	2800      	cmp	r0, #0
 8015c4a:	d151      	bne.n	8015cf0 <__hexnan+0xe8>
 8015c4c:	9a04      	ldr	r2, [sp, #16]
 8015c4e:	9905      	ldr	r1, [sp, #20]
 8015c50:	2a20      	cmp	r2, #32
 8015c52:	d818      	bhi.n	8015c86 <__hexnan+0x7e>
 8015c54:	9b02      	ldr	r3, [sp, #8]
 8015c56:	459b      	cmp	fp, r3
 8015c58:	dd13      	ble.n	8015c82 <__hexnan+0x7a>
 8015c5a:	454c      	cmp	r4, r9
 8015c5c:	d206      	bcs.n	8015c6c <__hexnan+0x64>
 8015c5e:	2d07      	cmp	r5, #7
 8015c60:	dc04      	bgt.n	8015c6c <__hexnan+0x64>
 8015c62:	462a      	mov	r2, r5
 8015c64:	4649      	mov	r1, r9
 8015c66:	4620      	mov	r0, r4
 8015c68:	f7ff ffa8 	bl	8015bbc <L_shift>
 8015c6c:	4544      	cmp	r4, r8
 8015c6e:	d952      	bls.n	8015d16 <__hexnan+0x10e>
 8015c70:	2300      	movs	r3, #0
 8015c72:	f1a4 0904 	sub.w	r9, r4, #4
 8015c76:	f844 3c04 	str.w	r3, [r4, #-4]
 8015c7a:	f8cd b008 	str.w	fp, [sp, #8]
 8015c7e:	464c      	mov	r4, r9
 8015c80:	461d      	mov	r5, r3
 8015c82:	9903      	ldr	r1, [sp, #12]
 8015c84:	e7d7      	b.n	8015c36 <__hexnan+0x2e>
 8015c86:	2a29      	cmp	r2, #41	@ 0x29
 8015c88:	d157      	bne.n	8015d3a <__hexnan+0x132>
 8015c8a:	3102      	adds	r1, #2
 8015c8c:	f8ca 1000 	str.w	r1, [sl]
 8015c90:	f1bb 0f00 	cmp.w	fp, #0
 8015c94:	d051      	beq.n	8015d3a <__hexnan+0x132>
 8015c96:	454c      	cmp	r4, r9
 8015c98:	d206      	bcs.n	8015ca8 <__hexnan+0xa0>
 8015c9a:	2d07      	cmp	r5, #7
 8015c9c:	dc04      	bgt.n	8015ca8 <__hexnan+0xa0>
 8015c9e:	462a      	mov	r2, r5
 8015ca0:	4649      	mov	r1, r9
 8015ca2:	4620      	mov	r0, r4
 8015ca4:	f7ff ff8a 	bl	8015bbc <L_shift>
 8015ca8:	4544      	cmp	r4, r8
 8015caa:	d936      	bls.n	8015d1a <__hexnan+0x112>
 8015cac:	f1a8 0204 	sub.w	r2, r8, #4
 8015cb0:	4623      	mov	r3, r4
 8015cb2:	f853 1b04 	ldr.w	r1, [r3], #4
 8015cb6:	f842 1f04 	str.w	r1, [r2, #4]!
 8015cba:	429f      	cmp	r7, r3
 8015cbc:	d2f9      	bcs.n	8015cb2 <__hexnan+0xaa>
 8015cbe:	1b3b      	subs	r3, r7, r4
 8015cc0:	f023 0303 	bic.w	r3, r3, #3
 8015cc4:	3304      	adds	r3, #4
 8015cc6:	3401      	adds	r4, #1
 8015cc8:	3e03      	subs	r6, #3
 8015cca:	42b4      	cmp	r4, r6
 8015ccc:	bf88      	it	hi
 8015cce:	2304      	movhi	r3, #4
 8015cd0:	4443      	add	r3, r8
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	f843 2b04 	str.w	r2, [r3], #4
 8015cd8:	429f      	cmp	r7, r3
 8015cda:	d2fb      	bcs.n	8015cd4 <__hexnan+0xcc>
 8015cdc:	683b      	ldr	r3, [r7, #0]
 8015cde:	b91b      	cbnz	r3, 8015ce8 <__hexnan+0xe0>
 8015ce0:	4547      	cmp	r7, r8
 8015ce2:	d128      	bne.n	8015d36 <__hexnan+0x12e>
 8015ce4:	2301      	movs	r3, #1
 8015ce6:	603b      	str	r3, [r7, #0]
 8015ce8:	2005      	movs	r0, #5
 8015cea:	b007      	add	sp, #28
 8015cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cf0:	3501      	adds	r5, #1
 8015cf2:	2d08      	cmp	r5, #8
 8015cf4:	f10b 0b01 	add.w	fp, fp, #1
 8015cf8:	dd06      	ble.n	8015d08 <__hexnan+0x100>
 8015cfa:	4544      	cmp	r4, r8
 8015cfc:	d9c1      	bls.n	8015c82 <__hexnan+0x7a>
 8015cfe:	2300      	movs	r3, #0
 8015d00:	f844 3c04 	str.w	r3, [r4, #-4]
 8015d04:	2501      	movs	r5, #1
 8015d06:	3c04      	subs	r4, #4
 8015d08:	6822      	ldr	r2, [r4, #0]
 8015d0a:	f000 000f 	and.w	r0, r0, #15
 8015d0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015d12:	6020      	str	r0, [r4, #0]
 8015d14:	e7b5      	b.n	8015c82 <__hexnan+0x7a>
 8015d16:	2508      	movs	r5, #8
 8015d18:	e7b3      	b.n	8015c82 <__hexnan+0x7a>
 8015d1a:	9b01      	ldr	r3, [sp, #4]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d0dd      	beq.n	8015cdc <__hexnan+0xd4>
 8015d20:	f1c3 0320 	rsb	r3, r3, #32
 8015d24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015d28:	40da      	lsrs	r2, r3
 8015d2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015d2e:	4013      	ands	r3, r2
 8015d30:	f846 3c04 	str.w	r3, [r6, #-4]
 8015d34:	e7d2      	b.n	8015cdc <__hexnan+0xd4>
 8015d36:	3f04      	subs	r7, #4
 8015d38:	e7d0      	b.n	8015cdc <__hexnan+0xd4>
 8015d3a:	2004      	movs	r0, #4
 8015d3c:	e7d5      	b.n	8015cea <__hexnan+0xe2>

08015d3e <__ascii_mbtowc>:
 8015d3e:	b082      	sub	sp, #8
 8015d40:	b901      	cbnz	r1, 8015d44 <__ascii_mbtowc+0x6>
 8015d42:	a901      	add	r1, sp, #4
 8015d44:	b142      	cbz	r2, 8015d58 <__ascii_mbtowc+0x1a>
 8015d46:	b14b      	cbz	r3, 8015d5c <__ascii_mbtowc+0x1e>
 8015d48:	7813      	ldrb	r3, [r2, #0]
 8015d4a:	600b      	str	r3, [r1, #0]
 8015d4c:	7812      	ldrb	r2, [r2, #0]
 8015d4e:	1e10      	subs	r0, r2, #0
 8015d50:	bf18      	it	ne
 8015d52:	2001      	movne	r0, #1
 8015d54:	b002      	add	sp, #8
 8015d56:	4770      	bx	lr
 8015d58:	4610      	mov	r0, r2
 8015d5a:	e7fb      	b.n	8015d54 <__ascii_mbtowc+0x16>
 8015d5c:	f06f 0001 	mvn.w	r0, #1
 8015d60:	e7f8      	b.n	8015d54 <__ascii_mbtowc+0x16>

08015d62 <_realloc_r>:
 8015d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d66:	4607      	mov	r7, r0
 8015d68:	4614      	mov	r4, r2
 8015d6a:	460d      	mov	r5, r1
 8015d6c:	b921      	cbnz	r1, 8015d78 <_realloc_r+0x16>
 8015d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d72:	4611      	mov	r1, r2
 8015d74:	f7fd b966 	b.w	8013044 <_malloc_r>
 8015d78:	b92a      	cbnz	r2, 8015d86 <_realloc_r+0x24>
 8015d7a:	f7fd f8ef 	bl	8012f5c <_free_r>
 8015d7e:	4625      	mov	r5, r4
 8015d80:	4628      	mov	r0, r5
 8015d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d86:	f000 f8b2 	bl	8015eee <_malloc_usable_size_r>
 8015d8a:	4284      	cmp	r4, r0
 8015d8c:	4606      	mov	r6, r0
 8015d8e:	d802      	bhi.n	8015d96 <_realloc_r+0x34>
 8015d90:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015d94:	d8f4      	bhi.n	8015d80 <_realloc_r+0x1e>
 8015d96:	4621      	mov	r1, r4
 8015d98:	4638      	mov	r0, r7
 8015d9a:	f7fd f953 	bl	8013044 <_malloc_r>
 8015d9e:	4680      	mov	r8, r0
 8015da0:	b908      	cbnz	r0, 8015da6 <_realloc_r+0x44>
 8015da2:	4645      	mov	r5, r8
 8015da4:	e7ec      	b.n	8015d80 <_realloc_r+0x1e>
 8015da6:	42b4      	cmp	r4, r6
 8015da8:	4622      	mov	r2, r4
 8015daa:	4629      	mov	r1, r5
 8015dac:	bf28      	it	cs
 8015dae:	4632      	movcs	r2, r6
 8015db0:	f7fc fad9 	bl	8012366 <memcpy>
 8015db4:	4629      	mov	r1, r5
 8015db6:	4638      	mov	r0, r7
 8015db8:	f7fd f8d0 	bl	8012f5c <_free_r>
 8015dbc:	e7f1      	b.n	8015da2 <_realloc_r+0x40>
	...

08015dc0 <_strtoul_l.isra.0>:
 8015dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015dc4:	4e34      	ldr	r6, [pc, #208]	@ (8015e98 <_strtoul_l.isra.0+0xd8>)
 8015dc6:	4686      	mov	lr, r0
 8015dc8:	460d      	mov	r5, r1
 8015dca:	4628      	mov	r0, r5
 8015dcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015dd0:	5d37      	ldrb	r7, [r6, r4]
 8015dd2:	f017 0708 	ands.w	r7, r7, #8
 8015dd6:	d1f8      	bne.n	8015dca <_strtoul_l.isra.0+0xa>
 8015dd8:	2c2d      	cmp	r4, #45	@ 0x2d
 8015dda:	d110      	bne.n	8015dfe <_strtoul_l.isra.0+0x3e>
 8015ddc:	782c      	ldrb	r4, [r5, #0]
 8015dde:	2701      	movs	r7, #1
 8015de0:	1c85      	adds	r5, r0, #2
 8015de2:	f033 0010 	bics.w	r0, r3, #16
 8015de6:	d115      	bne.n	8015e14 <_strtoul_l.isra.0+0x54>
 8015de8:	2c30      	cmp	r4, #48	@ 0x30
 8015dea:	d10d      	bne.n	8015e08 <_strtoul_l.isra.0+0x48>
 8015dec:	7828      	ldrb	r0, [r5, #0]
 8015dee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8015df2:	2858      	cmp	r0, #88	@ 0x58
 8015df4:	d108      	bne.n	8015e08 <_strtoul_l.isra.0+0x48>
 8015df6:	786c      	ldrb	r4, [r5, #1]
 8015df8:	3502      	adds	r5, #2
 8015dfa:	2310      	movs	r3, #16
 8015dfc:	e00a      	b.n	8015e14 <_strtoul_l.isra.0+0x54>
 8015dfe:	2c2b      	cmp	r4, #43	@ 0x2b
 8015e00:	bf04      	itt	eq
 8015e02:	782c      	ldrbeq	r4, [r5, #0]
 8015e04:	1c85      	addeq	r5, r0, #2
 8015e06:	e7ec      	b.n	8015de2 <_strtoul_l.isra.0+0x22>
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d1f6      	bne.n	8015dfa <_strtoul_l.isra.0+0x3a>
 8015e0c:	2c30      	cmp	r4, #48	@ 0x30
 8015e0e:	bf14      	ite	ne
 8015e10:	230a      	movne	r3, #10
 8015e12:	2308      	moveq	r3, #8
 8015e14:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015e18:	2600      	movs	r6, #0
 8015e1a:	fbb8 f8f3 	udiv	r8, r8, r3
 8015e1e:	fb03 f908 	mul.w	r9, r3, r8
 8015e22:	ea6f 0909 	mvn.w	r9, r9
 8015e26:	4630      	mov	r0, r6
 8015e28:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8015e2c:	f1bc 0f09 	cmp.w	ip, #9
 8015e30:	d810      	bhi.n	8015e54 <_strtoul_l.isra.0+0x94>
 8015e32:	4664      	mov	r4, ip
 8015e34:	42a3      	cmp	r3, r4
 8015e36:	dd1e      	ble.n	8015e76 <_strtoul_l.isra.0+0xb6>
 8015e38:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8015e3c:	d007      	beq.n	8015e4e <_strtoul_l.isra.0+0x8e>
 8015e3e:	4580      	cmp	r8, r0
 8015e40:	d316      	bcc.n	8015e70 <_strtoul_l.isra.0+0xb0>
 8015e42:	d101      	bne.n	8015e48 <_strtoul_l.isra.0+0x88>
 8015e44:	45a1      	cmp	r9, r4
 8015e46:	db13      	blt.n	8015e70 <_strtoul_l.isra.0+0xb0>
 8015e48:	fb00 4003 	mla	r0, r0, r3, r4
 8015e4c:	2601      	movs	r6, #1
 8015e4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015e52:	e7e9      	b.n	8015e28 <_strtoul_l.isra.0+0x68>
 8015e54:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015e58:	f1bc 0f19 	cmp.w	ip, #25
 8015e5c:	d801      	bhi.n	8015e62 <_strtoul_l.isra.0+0xa2>
 8015e5e:	3c37      	subs	r4, #55	@ 0x37
 8015e60:	e7e8      	b.n	8015e34 <_strtoul_l.isra.0+0x74>
 8015e62:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8015e66:	f1bc 0f19 	cmp.w	ip, #25
 8015e6a:	d804      	bhi.n	8015e76 <_strtoul_l.isra.0+0xb6>
 8015e6c:	3c57      	subs	r4, #87	@ 0x57
 8015e6e:	e7e1      	b.n	8015e34 <_strtoul_l.isra.0+0x74>
 8015e70:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8015e74:	e7eb      	b.n	8015e4e <_strtoul_l.isra.0+0x8e>
 8015e76:	1c73      	adds	r3, r6, #1
 8015e78:	d106      	bne.n	8015e88 <_strtoul_l.isra.0+0xc8>
 8015e7a:	2322      	movs	r3, #34	@ 0x22
 8015e7c:	f8ce 3000 	str.w	r3, [lr]
 8015e80:	4630      	mov	r0, r6
 8015e82:	b932      	cbnz	r2, 8015e92 <_strtoul_l.isra.0+0xd2>
 8015e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e88:	b107      	cbz	r7, 8015e8c <_strtoul_l.isra.0+0xcc>
 8015e8a:	4240      	negs	r0, r0
 8015e8c:	2a00      	cmp	r2, #0
 8015e8e:	d0f9      	beq.n	8015e84 <_strtoul_l.isra.0+0xc4>
 8015e90:	b106      	cbz	r6, 8015e94 <_strtoul_l.isra.0+0xd4>
 8015e92:	1e69      	subs	r1, r5, #1
 8015e94:	6011      	str	r1, [r2, #0]
 8015e96:	e7f5      	b.n	8015e84 <_strtoul_l.isra.0+0xc4>
 8015e98:	08017611 	.word	0x08017611

08015e9c <_strtoul_r>:
 8015e9c:	f7ff bf90 	b.w	8015dc0 <_strtoul_l.isra.0>

08015ea0 <__ascii_wctomb>:
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	4608      	mov	r0, r1
 8015ea4:	b141      	cbz	r1, 8015eb8 <__ascii_wctomb+0x18>
 8015ea6:	2aff      	cmp	r2, #255	@ 0xff
 8015ea8:	d904      	bls.n	8015eb4 <__ascii_wctomb+0x14>
 8015eaa:	228a      	movs	r2, #138	@ 0x8a
 8015eac:	601a      	str	r2, [r3, #0]
 8015eae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015eb2:	4770      	bx	lr
 8015eb4:	700a      	strb	r2, [r1, #0]
 8015eb6:	2001      	movs	r0, #1
 8015eb8:	4770      	bx	lr
	...

08015ebc <fiprintf>:
 8015ebc:	b40e      	push	{r1, r2, r3}
 8015ebe:	b503      	push	{r0, r1, lr}
 8015ec0:	4601      	mov	r1, r0
 8015ec2:	ab03      	add	r3, sp, #12
 8015ec4:	4805      	ldr	r0, [pc, #20]	@ (8015edc <fiprintf+0x20>)
 8015ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015eca:	6800      	ldr	r0, [r0, #0]
 8015ecc:	9301      	str	r3, [sp, #4]
 8015ece:	f7fe ff75 	bl	8014dbc <_vfiprintf_r>
 8015ed2:	b002      	add	sp, #8
 8015ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ed8:	b003      	add	sp, #12
 8015eda:	4770      	bx	lr
 8015edc:	24000020 	.word	0x24000020

08015ee0 <abort>:
 8015ee0:	b508      	push	{r3, lr}
 8015ee2:	2006      	movs	r0, #6
 8015ee4:	f000 f834 	bl	8015f50 <raise>
 8015ee8:	2001      	movs	r0, #1
 8015eea:	f7ee fca3 	bl	8004834 <_exit>

08015eee <_malloc_usable_size_r>:
 8015eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ef2:	1f18      	subs	r0, r3, #4
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	bfbc      	itt	lt
 8015ef8:	580b      	ldrlt	r3, [r1, r0]
 8015efa:	18c0      	addlt	r0, r0, r3
 8015efc:	4770      	bx	lr

08015efe <_raise_r>:
 8015efe:	291f      	cmp	r1, #31
 8015f00:	b538      	push	{r3, r4, r5, lr}
 8015f02:	4605      	mov	r5, r0
 8015f04:	460c      	mov	r4, r1
 8015f06:	d904      	bls.n	8015f12 <_raise_r+0x14>
 8015f08:	2316      	movs	r3, #22
 8015f0a:	6003      	str	r3, [r0, #0]
 8015f0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015f10:	bd38      	pop	{r3, r4, r5, pc}
 8015f12:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015f14:	b112      	cbz	r2, 8015f1c <_raise_r+0x1e>
 8015f16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015f1a:	b94b      	cbnz	r3, 8015f30 <_raise_r+0x32>
 8015f1c:	4628      	mov	r0, r5
 8015f1e:	f000 f831 	bl	8015f84 <_getpid_r>
 8015f22:	4622      	mov	r2, r4
 8015f24:	4601      	mov	r1, r0
 8015f26:	4628      	mov	r0, r5
 8015f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f2c:	f000 b818 	b.w	8015f60 <_kill_r>
 8015f30:	2b01      	cmp	r3, #1
 8015f32:	d00a      	beq.n	8015f4a <_raise_r+0x4c>
 8015f34:	1c59      	adds	r1, r3, #1
 8015f36:	d103      	bne.n	8015f40 <_raise_r+0x42>
 8015f38:	2316      	movs	r3, #22
 8015f3a:	6003      	str	r3, [r0, #0]
 8015f3c:	2001      	movs	r0, #1
 8015f3e:	e7e7      	b.n	8015f10 <_raise_r+0x12>
 8015f40:	2100      	movs	r1, #0
 8015f42:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015f46:	4620      	mov	r0, r4
 8015f48:	4798      	blx	r3
 8015f4a:	2000      	movs	r0, #0
 8015f4c:	e7e0      	b.n	8015f10 <_raise_r+0x12>
	...

08015f50 <raise>:
 8015f50:	4b02      	ldr	r3, [pc, #8]	@ (8015f5c <raise+0xc>)
 8015f52:	4601      	mov	r1, r0
 8015f54:	6818      	ldr	r0, [r3, #0]
 8015f56:	f7ff bfd2 	b.w	8015efe <_raise_r>
 8015f5a:	bf00      	nop
 8015f5c:	24000020 	.word	0x24000020

08015f60 <_kill_r>:
 8015f60:	b538      	push	{r3, r4, r5, lr}
 8015f62:	4d07      	ldr	r5, [pc, #28]	@ (8015f80 <_kill_r+0x20>)
 8015f64:	2300      	movs	r3, #0
 8015f66:	4604      	mov	r4, r0
 8015f68:	4608      	mov	r0, r1
 8015f6a:	4611      	mov	r1, r2
 8015f6c:	602b      	str	r3, [r5, #0]
 8015f6e:	f7ee fc51 	bl	8004814 <_kill>
 8015f72:	1c43      	adds	r3, r0, #1
 8015f74:	d102      	bne.n	8015f7c <_kill_r+0x1c>
 8015f76:	682b      	ldr	r3, [r5, #0]
 8015f78:	b103      	cbz	r3, 8015f7c <_kill_r+0x1c>
 8015f7a:	6023      	str	r3, [r4, #0]
 8015f7c:	bd38      	pop	{r3, r4, r5, pc}
 8015f7e:	bf00      	nop
 8015f80:	24000878 	.word	0x24000878

08015f84 <_getpid_r>:
 8015f84:	f7ee bc3e 	b.w	8004804 <_getpid>

08015f88 <roundf>:
 8015f88:	ee10 0a10 	vmov	r0, s0
 8015f8c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8015f90:	3a7f      	subs	r2, #127	@ 0x7f
 8015f92:	2a16      	cmp	r2, #22
 8015f94:	dc15      	bgt.n	8015fc2 <roundf+0x3a>
 8015f96:	2a00      	cmp	r2, #0
 8015f98:	da08      	bge.n	8015fac <roundf+0x24>
 8015f9a:	3201      	adds	r2, #1
 8015f9c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8015fa0:	d101      	bne.n	8015fa6 <roundf+0x1e>
 8015fa2:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8015fa6:	ee00 3a10 	vmov	s0, r3
 8015faa:	4770      	bx	lr
 8015fac:	4907      	ldr	r1, [pc, #28]	@ (8015fcc <roundf+0x44>)
 8015fae:	4111      	asrs	r1, r2
 8015fb0:	4201      	tst	r1, r0
 8015fb2:	d0fa      	beq.n	8015faa <roundf+0x22>
 8015fb4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8015fb8:	4113      	asrs	r3, r2
 8015fba:	4403      	add	r3, r0
 8015fbc:	ea23 0301 	bic.w	r3, r3, r1
 8015fc0:	e7f1      	b.n	8015fa6 <roundf+0x1e>
 8015fc2:	2a80      	cmp	r2, #128	@ 0x80
 8015fc4:	d1f1      	bne.n	8015faa <roundf+0x22>
 8015fc6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015fca:	4770      	bx	lr
 8015fcc:	007fffff 	.word	0x007fffff

08015fd0 <_init>:
 8015fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fd2:	bf00      	nop
 8015fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fd6:	bc08      	pop	{r3}
 8015fd8:	469e      	mov	lr, r3
 8015fda:	4770      	bx	lr

08015fdc <_fini>:
 8015fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fde:	bf00      	nop
 8015fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fe2:	bc08      	pop	{r3}
 8015fe4:	469e      	mov	lr, r3
 8015fe6:	4770      	bx	lr
