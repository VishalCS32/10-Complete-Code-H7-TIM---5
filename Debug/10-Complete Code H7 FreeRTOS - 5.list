
10-Complete Code H7 FreeRTOS - 5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015738  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015ac  08015a08  08015a08  00016a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016fb4  08016fb4  00017fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016fbc  08016fbc  00017fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08016fc0  08016fc0  00017fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  08016fc4  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006a0  240001dc  080171a0  000181dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400087c  080171a0  0001887c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000181dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002655d  00000000  00000000  0001820a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005156  00000000  00000000  0003e767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f68  00000000  00000000  000438c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001825  00000000  00000000  00045828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000a0a0  00000000  00000000  0004704d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002696a  00000000  00000000  000510ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016fcec  00000000  00000000  00077a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e7743  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009b5c  00000000  00000000  001e7788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  001f12e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080159f0 	.word	0x080159f0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e0 	.word	0x240001e0
 800030c:	080159f0 	.word	0x080159f0

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007cc:	f3bf 8f4f 	dsb	sy
}
 80007d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <__NVIC_SystemReset+0x24>)
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80007da:	4904      	ldr	r1, [pc, #16]	@ (80007ec <__NVIC_SystemReset+0x24>)
 80007dc:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <__NVIC_SystemReset+0x28>)
 80007de:	4313      	orrs	r3, r2
 80007e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80007e2:	f3bf 8f4f 	dsb	sy
}
 80007e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <__NVIC_SystemReset+0x20>
 80007ec:	e000ed00 	.word	0xe000ed00
 80007f0:	05fa0004 	.word	0x05fa0004

080007f4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000804:	2b40      	cmp	r3, #64	@ 0x40
 8000806:	d101      	bne.n	800080c <LL_USART_IsActiveFlag_TC+0x18>
 8000808:	2301      	movs	r3, #1
 800080a:	e000      	b.n	800080e <LL_USART_IsActiveFlag_TC+0x1a>
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <strip_brackets>:

uint8_t is_cmd_mode(void) {
    return cmd_mode;
}

void strip_brackets(char *str) {
 800081a:	b590      	push	{r4, r7, lr}
 800081c:	b085      	sub	sp, #20
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
    if (str[0] == '[') {
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b5b      	cmp	r3, #91	@ 0x5b
 8000828:	d10a      	bne.n	8000840 <strip_brackets+0x26>
        memmove(str, str + 1, strlen(str));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	1c5c      	adds	r4, r3, #1
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff fdce 	bl	80003d0 <strlen>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	4621      	mov	r1, r4
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f011 fa0e 	bl	8011c5c <memmove>
    }
    char *end = strchr(str, ']');
 8000840:	215d      	movs	r1, #93	@ 0x5d
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f011 fa2c 	bl	8011ca0 <strchr>
 8000848:	60f8      	str	r0, [r7, #12]
    if (end) *end = '\0';
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <strip_brackets+0x3c>
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
}
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	bd90      	pop	{r4, r7, pc}
	...

08000860 <process_command>:

void process_command(char *cmd) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b0c4      	sub	sp, #272	@ 0x110
 8000864:	af0a      	add	r7, sp, #40	@ 0x28
 8000866:	6078      	str	r0, [r7, #4]
    strip_brackets(cmd);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ffd6 	bl	800081a <strip_brackets>

    if (strcmp(cmd, "CMD") == 0) {
 800086e:	49bc      	ldr	r1, [pc, #752]	@ (8000b60 <process_command+0x300>)
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff fd4d 	bl	8000310 <strcmp>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d10e      	bne.n	800089a <process_command+0x3a>
        cmd_mode = 1;
 800087c:	4bb9      	ldr	r3, [pc, #740]	@ (8000b64 <process_command+0x304>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
        printf("\r\n\r\nEntered command mode\r\n\r\n");
 8000882:	48b9      	ldr	r0, [pc, #740]	@ (8000b68 <process_command+0x308>)
 8000884:	f011 f8ba 	bl	80119fc <puts>
        main_led(0, 255, 0, 255, 1);
 8000888:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800088c:	23ff      	movs	r3, #255	@ 0xff
 800088e:	2200      	movs	r2, #0
 8000890:	21ff      	movs	r1, #255	@ 0xff
 8000892:	2000      	movs	r0, #0
 8000894:	f001 fc0e 	bl	80020b4 <main_led>
        return;
 8000898:	e315      	b.n	8000ec6 <process_command+0x666>
    }

    if (!cmd_mode) {
 800089a:	4bb2      	ldr	r3, [pc, #712]	@ (8000b64 <process_command+0x304>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d103      	bne.n	80008ac <process_command+0x4c>
        printf("Not in command mode\n");
 80008a4:	48b1      	ldr	r0, [pc, #708]	@ (8000b6c <process_command+0x30c>)
 80008a6:	f011 f8a9 	bl	80119fc <puts>
        return;
 80008aa:	e30c      	b.n	8000ec6 <process_command+0x666>
    }

    if (strcmp(cmd, "exit") == 0) {
 80008ac:	49b0      	ldr	r1, [pc, #704]	@ (8000b70 <process_command+0x310>)
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff fd2e 	bl	8000310 <strcmp>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d138      	bne.n	800092c <process_command+0xcc>
        cmd_mode = 0;
 80008ba:	4baa      	ldr	r3, [pc, #680]	@ (8000b64 <process_command+0x304>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
        printf("\r\nExiting command mode, rebooting...\r\n\r\n");
 80008c0:	48ac      	ldr	r0, [pc, #688]	@ (8000b74 <process_command+0x314>)
 80008c2:	f011 f89b 	bl	80119fc <puts>
        // Wait for UART transmission to complete
        while (!LL_USART_IsActiveFlag_TC(USART6)); // Ensure transmission complete
 80008c6:	bf00      	nop
 80008c8:	48ab      	ldr	r0, [pc, #684]	@ (8000b78 <process_command+0x318>)
 80008ca:	f7ff ff93 	bl	80007f4 <LL_USART_IsActiveFlag_TC>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d0f9      	beq.n	80008c8 <process_command+0x68>
        // Busy-wait instead of HAL_Delay
        for (volatile uint32_t i = 0; i < 1000000; i++); // ~200ms at 480MHz
 80008d4:	2300      	movs	r3, #0
 80008d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80008da:	e004      	b.n	80008e6 <process_command+0x86>
 80008dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80008e0:	3301      	adds	r3, #1
 80008e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80008e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80008ea:	4aa4      	ldr	r2, [pc, #656]	@ (8000b7c <process_command+0x31c>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d9f5      	bls.n	80008dc <process_command+0x7c>
        // Check for pending faults
        if (SCB->HFSR) {
 80008f0:	4ba3      	ldr	r3, [pc, #652]	@ (8000b80 <process_command+0x320>)
 80008f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d005      	beq.n	8000904 <process_command+0xa4>
            printf("Hard Fault pending: HFSR=0x%08lX\r\n", SCB->HFSR);
 80008f8:	4ba1      	ldr	r3, [pc, #644]	@ (8000b80 <process_command+0x320>)
 80008fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008fc:	4619      	mov	r1, r3
 80008fe:	48a1      	ldr	r0, [pc, #644]	@ (8000b84 <process_command+0x324>)
 8000900:	f011 f80c 	bl	801191c <iprintf>
        }
        if (SCB->CFSR) {
 8000904:	4b9e      	ldr	r3, [pc, #632]	@ (8000b80 <process_command+0x320>)
 8000906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000908:	2b00      	cmp	r3, #0
 800090a:	d005      	beq.n	8000918 <process_command+0xb8>
            printf("Configurable Fault pending: CFSR=0x%08lX\r\n", SCB->CFSR);
 800090c:	4b9c      	ldr	r3, [pc, #624]	@ (8000b80 <process_command+0x320>)
 800090e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000910:	4619      	mov	r1, r3
 8000912:	489d      	ldr	r0, [pc, #628]	@ (8000b88 <process_command+0x328>)
 8000914:	f011 f802 	bl	801191c <iprintf>
        }
        printf("Disabling interrupts\r\n"); // Debug
 8000918:	489c      	ldr	r0, [pc, #624]	@ (8000b8c <process_command+0x32c>)
 800091a:	f011 f86f 	bl	80119fc <puts>
  __ASM volatile ("cpsid i" : : : "memory");
 800091e:	b672      	cpsid	i
}
 8000920:	bf00      	nop
        __disable_irq(); // Disable all interrupts
        printf("Triggering NVIC_SystemReset\r\n"); // Debug
 8000922:	489b      	ldr	r0, [pc, #620]	@ (8000b90 <process_command+0x330>)
 8000924:	f011 f86a 	bl	80119fc <puts>
        NVIC_SystemReset(); // Primary reset
 8000928:	f7ff ff4e 	bl	80007c8 <__NVIC_SystemReset>
        printf("NVIC_SystemReset failed, trying SCB reset\r\n"); // Debug (should not reach)
        SCB->AIRCR = (0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk;
        printf("SCB reset triggered\r\n"); // Debug (should not reach)
        while (true); // Trap if reset fails
    }
    else if (strcmp(cmd, "cal_accel_gyro") == 0) {
 800092c:	4999      	ldr	r1, [pc, #612]	@ (8000b94 <process_command+0x334>)
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff fcee 	bl	8000310 <strcmp>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	f000 82c5 	beq.w	8000ec6 <process_command+0x666>
//        start_accel_and_gyro_calibration(&filter_state);
    }
    else if (strcmp(cmd, "cal_mag") == 0) {
 800093c:	4996      	ldr	r1, [pc, #600]	@ (8000b98 <process_command+0x338>)
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff fce6 	bl	8000310 <strcmp>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	f000 82bd 	beq.w	8000ec6 <process_command+0x666>
//        start_mag_calibration(&filter_state);
    }
    else if (strcmp(cmd, "cal_all") == 0) {
 800094c:	4993      	ldr	r1, [pc, #588]	@ (8000b9c <process_command+0x33c>)
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff fcde 	bl	8000310 <strcmp>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	f000 82b5 	beq.w	8000ec6 <process_command+0x666>
//        start_full_calibration(&filter_state);
    }
    else if (strcmp(cmd, "cancel_cal") == 0) {
 800095c:	4990      	ldr	r1, [pc, #576]	@ (8000ba0 <process_command+0x340>)
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff fcd6 	bl	8000310 <strcmp>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	f000 82ad 	beq.w	8000ec6 <process_command+0x666>
//        cancel_calibration();
    }
    else if (strcmp(cmd, "status") == 0) {
 800096c:	498d      	ldr	r1, [pc, #564]	@ (8000ba4 <process_command+0x344>)
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff fcce 	bl	8000310 <strcmp>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d103      	bne.n	8000982 <process_command+0x122>
        printf("Status OK\n");
 800097a:	488b      	ldr	r0, [pc, #556]	@ (8000ba8 <process_command+0x348>)
 800097c:	f011 f83e 	bl	80119fc <puts>
 8000980:	e2a1      	b.n	8000ec6 <process_command+0x666>
    }
    else if (strcmp(cmd, "main_led_ON") == 0) {
 8000982:	498a      	ldr	r1, [pc, #552]	@ (8000bac <process_command+0x34c>)
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff fcc3 	bl	8000310 <strcmp>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d10e      	bne.n	80009ae <process_command+0x14e>
        printf("CMD: Executing main_led_ON command\n");
 8000990:	4887      	ldr	r0, [pc, #540]	@ (8000bb0 <process_command+0x350>)
 8000992:	f011 f833 	bl	80119fc <puts>
        main_led(0, 255, 0, 255, 1);
 8000996:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800099a:	23ff      	movs	r3, #255	@ 0xff
 800099c:	2200      	movs	r2, #0
 800099e:	21ff      	movs	r1, #255	@ 0xff
 80009a0:	2000      	movs	r0, #0
 80009a2:	f001 fb87 	bl	80020b4 <main_led>
        printf("Main LED ON\n");
 80009a6:	4883      	ldr	r0, [pc, #524]	@ (8000bb4 <process_command+0x354>)
 80009a8:	f011 f828 	bl	80119fc <puts>
 80009ac:	e28b      	b.n	8000ec6 <process_command+0x666>
    }
    else if (strcmp(cmd, "main_led_OFF") == 0) {
 80009ae:	4982      	ldr	r1, [pc, #520]	@ (8000bb8 <process_command+0x358>)
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff fcad 	bl	8000310 <strcmp>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d10e      	bne.n	80009da <process_command+0x17a>
        printf("CMD: Executing main_led_OFF command\n");
 80009bc:	487f      	ldr	r0, [pc, #508]	@ (8000bbc <process_command+0x35c>)
 80009be:	f011 f81d 	bl	80119fc <puts>
        main_led(0, 0, 0, 0, 0);
 80009c2:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8000bc0 <process_command+0x360>
 80009c6:	2300      	movs	r3, #0
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2000      	movs	r0, #0
 80009ce:	f001 fb71 	bl	80020b4 <main_led>
        printf("Main LED OFF\n");
 80009d2:	487c      	ldr	r0, [pc, #496]	@ (8000bc4 <process_command+0x364>)
 80009d4:	f011 f812 	bl	80119fc <puts>
 80009d8:	e275      	b.n	8000ec6 <process_command+0x666>
    }
    else if (strncmp(cmd, "set_main_led", 12) == 0) {
 80009da:	220c      	movs	r2, #12
 80009dc:	497a      	ldr	r1, [pc, #488]	@ (8000bc8 <process_command+0x368>)
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f011 f96b 	bl	8011cba <strncmp>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d13a      	bne.n	8000a60 <process_command+0x200>
        int index, r, g, b;
        float brightness;
        char *params_start = strchr(cmd, '(');
 80009ea:	2128      	movs	r1, #40	@ 0x28
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f011 f957 	bl	8011ca0 <strchr>
 80009f2:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        if (params_start) {
 80009f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 8263 	beq.w	8000ec6 <process_command+0x666>
            if (sscanf(params_start, "(%d,%d,%d,%d,%f)", &index, &r, &g, &b, &brightness) == 5) {
 8000a00:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8000a04:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8000a08:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000a0c:	9302      	str	r3, [sp, #8]
 8000a0e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	496b      	ldr	r1, [pc, #428]	@ (8000bcc <process_command+0x36c>)
 8000a1e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8000a22:	f011 f815 	bl	8011a50 <siscanf>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b05      	cmp	r3, #5
 8000a2a:	d115      	bne.n	8000a58 <process_command+0x1f8>
                main_led(index, r, g, b, brightness);
 8000a2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a36:	b2d9      	uxtb	r1, r3
 8000a38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8000a48:	eeb0 0a67 	vmov.f32	s0, s15
 8000a4c:	f001 fb32 	bl	80020b4 <main_led>
                printf("Main LED Set\n");
 8000a50:	485f      	ldr	r0, [pc, #380]	@ (8000bd0 <process_command+0x370>)
 8000a52:	f010 ffd3 	bl	80119fc <puts>
 8000a56:	e236      	b.n	8000ec6 <process_command+0x666>
            } else {
                printf("Invalid Parameters\n");
 8000a58:	485e      	ldr	r0, [pc, #376]	@ (8000bd4 <process_command+0x374>)
 8000a5a:	f010 ffcf 	bl	80119fc <puts>
 8000a5e:	e232      	b.n	8000ec6 <process_command+0x666>
            }
        }
    }
    else if (strncmp(cmd, "SetRollPID", 10) == 0) {
 8000a60:	220a      	movs	r2, #10
 8000a62:	495d      	ldr	r1, [pc, #372]	@ (8000bd8 <process_command+0x378>)
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f011 f928 	bl	8011cba <strncmp>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	f040 80bf 	bne.w	8000bf0 <process_command+0x390>
        float outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd;
        char *params_start = strchr(cmd, '(');
 8000a72:	2128      	movs	r1, #40	@ 0x28
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f011 f913 	bl	8011ca0 <strchr>
 8000a7a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (params_start) {
 8000a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d068      	beq.n	8000b58 <process_command+0x2f8>
            if (sscanf(params_start, "({%f,%f,%f},{%f,%f,%f})",
 8000a86:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8000a8a:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 8000a8e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000a92:	9303      	str	r3, [sp, #12]
 8000a94:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	494c      	ldr	r1, [pc, #304]	@ (8000bdc <process_command+0x37c>)
 8000aaa:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000aae:	f010 ffcf 	bl	8011a50 <siscanf>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b06      	cmp	r3, #6
 8000ab6:	d14b      	bne.n	8000b50 <process_command+0x2f0>
                       &outer_kp, &outer_ki, &outer_kd, &inner_kp, &inner_ki, &inner_kd) == 6) {
                DualPID_t roll_pid = {
 8000ab8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000abc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000ac0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000ac4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000ac8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000acc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000ad0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000ad4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000adc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000ae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                    .out = {outer_kp, outer_ki, outer_kd},
                    .in = {inner_kp, inner_ki, inner_kd}
                };
                if (EEPROM_SetRollPID(&roll_pid) == W25Qxx_OK) {
 8000ae8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 fc0b 	bl	8001308 <EEPROM_SetRollPID>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d127      	bne.n	8000b48 <process_command+0x2e8>
                    printf("Roll PID Set: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000af8:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8000afc:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8000b00:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8000b04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b08:	edd7 6a2d 	vldr	s13, [r7, #180]	@ 0xb4
 8000b0c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000b10:	edd7 5a2c 	vldr	s11, [r7, #176]	@ 0xb0
 8000b14:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000b18:	edd7 4a2b 	vldr	s9, [r7, #172]	@ 0xac
 8000b1c:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000b20:	edd7 3a2a 	vldr	s7, [r7, #168]	@ 0xa8
 8000b24:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000b28:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000b2c:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000b30:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000b34:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000b38:	ed8d 7b00 	vstr	d7, [sp]
 8000b3c:	ec53 2b12 	vmov	r2, r3, d2
 8000b40:	4827      	ldr	r0, [pc, #156]	@ (8000be0 <process_command+0x380>)
 8000b42:	f010 feeb 	bl	801191c <iprintf>
 8000b46:	e1be      	b.n	8000ec6 <process_command+0x666>
                           outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd);
                } else {
                    printf("Failed to set Roll PID\n");
 8000b48:	4826      	ldr	r0, [pc, #152]	@ (8000be4 <process_command+0x384>)
 8000b4a:	f010 ff57 	bl	80119fc <puts>
 8000b4e:	e1ba      	b.n	8000ec6 <process_command+0x666>
                }
            } else {
                printf("Invalid Roll PID Parameters\n");
 8000b50:	4825      	ldr	r0, [pc, #148]	@ (8000be8 <process_command+0x388>)
 8000b52:	f010 ff53 	bl	80119fc <puts>
 8000b56:	e1b6      	b.n	8000ec6 <process_command+0x666>
            }
        } else {
            printf("Invalid Roll PID Command Format\n");
 8000b58:	4824      	ldr	r0, [pc, #144]	@ (8000bec <process_command+0x38c>)
 8000b5a:	f010 ff4f 	bl	80119fc <puts>
 8000b5e:	e1b2      	b.n	8000ec6 <process_command+0x666>
 8000b60:	08015a08 	.word	0x08015a08
 8000b64:	240001f8 	.word	0x240001f8
 8000b68:	08015a0c 	.word	0x08015a0c
 8000b6c:	08015a28 	.word	0x08015a28
 8000b70:	08015a3c 	.word	0x08015a3c
 8000b74:	08015a44 	.word	0x08015a44
 8000b78:	40011400 	.word	0x40011400
 8000b7c:	000f423f 	.word	0x000f423f
 8000b80:	e000ed00 	.word	0xe000ed00
 8000b84:	08015a6c 	.word	0x08015a6c
 8000b88:	08015a90 	.word	0x08015a90
 8000b8c:	08015abc 	.word	0x08015abc
 8000b90:	08015ad4 	.word	0x08015ad4
 8000b94:	08015af4 	.word	0x08015af4
 8000b98:	08015b04 	.word	0x08015b04
 8000b9c:	08015b0c 	.word	0x08015b0c
 8000ba0:	08015b14 	.word	0x08015b14
 8000ba4:	08015b20 	.word	0x08015b20
 8000ba8:	08015b28 	.word	0x08015b28
 8000bac:	08015b34 	.word	0x08015b34
 8000bb0:	08015b40 	.word	0x08015b40
 8000bb4:	08015b64 	.word	0x08015b64
 8000bb8:	08015b70 	.word	0x08015b70
 8000bbc:	08015b80 	.word	0x08015b80
 8000bc0:	00000000 	.word	0x00000000
 8000bc4:	08015ba4 	.word	0x08015ba4
 8000bc8:	08015bb4 	.word	0x08015bb4
 8000bcc:	08015bc4 	.word	0x08015bc4
 8000bd0:	08015bd8 	.word	0x08015bd8
 8000bd4:	08015be8 	.word	0x08015be8
 8000bd8:	08015bfc 	.word	0x08015bfc
 8000bdc:	08015c08 	.word	0x08015c08
 8000be0:	08015c20 	.word	0x08015c20
 8000be4:	08015c6c 	.word	0x08015c6c
 8000be8:	08015c84 	.word	0x08015c84
 8000bec:	08015ca0 	.word	0x08015ca0
        }
    }
    else if (strncmp(cmd, "SetPitchPID", 11) == 0) {
 8000bf0:	220b      	movs	r2, #11
 8000bf2:	49b6      	ldr	r1, [pc, #728]	@ (8000ecc <process_command+0x66c>)
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f011 f860 	bl	8011cba <strncmp>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d16e      	bne.n	8000cde <process_command+0x47e>
        float outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd;
        char *params_start = strchr(cmd, '(');
 8000c00:	2128      	movs	r1, #40	@ 0x28
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f011 f84c 	bl	8011ca0 <strchr>
 8000c08:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
        if (params_start) {
 8000c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d060      	beq.n	8000cd6 <process_command+0x476>
            if (sscanf(params_start, "({%f,%f,%f},{%f,%f,%f})",
 8000c14:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8000c18:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8000c1c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000c20:	9303      	str	r3, [sp, #12]
 8000c22:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000c26:	9302      	str	r3, [sp, #8]
 8000c28:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	460b      	mov	r3, r1
 8000c36:	49a6      	ldr	r1, [pc, #664]	@ (8000ed0 <process_command+0x670>)
 8000c38:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8000c3c:	f010 ff08 	bl	8011a50 <siscanf>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d143      	bne.n	8000cce <process_command+0x46e>
                       &outer_kp, &outer_ki, &outer_kd, &inner_kp, &inner_ki, &inner_kd) == 6) {
                DualPID_t pitch_pid = {
 8000c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8000c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c50:	667b      	str	r3, [r7, #100]	@ 0x64
 8000c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000c56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000c58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000c5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c60:	673b      	str	r3, [r7, #112]	@ 0x70
 8000c62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000c64:	677b      	str	r3, [r7, #116]	@ 0x74
                    .out = {outer_kp, outer_ki, outer_kd},
                    .in = {inner_kp, inner_ki, inner_kd}
                };
                if (EEPROM_SetPitchPID(&pitch_pid) == W25Qxx_OK) {
 8000c66:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fb9e 	bl	80013ac <EEPROM_SetPitchPID>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d127      	bne.n	8000cc6 <process_command+0x466>
                    printf("Pitch PID Set: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000c76:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000c7a:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8000c7e:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000c82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c86:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8000c8a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c8e:	edd7 5a20 	vldr	s11, [r7, #128]	@ 0x80
 8000c92:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000c96:	edd7 4a1f 	vldr	s9, [r7, #124]	@ 0x7c
 8000c9a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000c9e:	edd7 3a1e 	vldr	s7, [r7, #120]	@ 0x78
 8000ca2:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000ca6:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000caa:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000cae:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000cb2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000cb6:	ed8d 7b00 	vstr	d7, [sp]
 8000cba:	ec53 2b12 	vmov	r2, r3, d2
 8000cbe:	4885      	ldr	r0, [pc, #532]	@ (8000ed4 <process_command+0x674>)
 8000cc0:	f010 fe2c 	bl	801191c <iprintf>
 8000cc4:	e0ff      	b.n	8000ec6 <process_command+0x666>
                           outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd);
                } else {
                    printf("Failed to set Pitch PID\n");
 8000cc6:	4884      	ldr	r0, [pc, #528]	@ (8000ed8 <process_command+0x678>)
 8000cc8:	f010 fe98 	bl	80119fc <puts>
 8000ccc:	e0fb      	b.n	8000ec6 <process_command+0x666>
                }
            } else {
                printf("Invalid Pitch PID Parameters\n");
 8000cce:	4883      	ldr	r0, [pc, #524]	@ (8000edc <process_command+0x67c>)
 8000cd0:	f010 fe94 	bl	80119fc <puts>
 8000cd4:	e0f7      	b.n	8000ec6 <process_command+0x666>
            }
        } else {
            printf("Invalid Pitch PID Command Format\n");
 8000cd6:	4882      	ldr	r0, [pc, #520]	@ (8000ee0 <process_command+0x680>)
 8000cd8:	f010 fe90 	bl	80119fc <puts>
 8000cdc:	e0f3      	b.n	8000ec6 <process_command+0x666>
        }
    }
    else if (strncmp(cmd, "SetYawRatePID", 13) == 0) {
 8000cde:	220d      	movs	r2, #13
 8000ce0:	4980      	ldr	r1, [pc, #512]	@ (8000ee4 <process_command+0x684>)
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f010 ffe9 	bl	8011cba <strncmp>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d149      	bne.n	8000d82 <process_command+0x522>
        float kp, ki, kd;
        char *params_start = strchr(cmd, '(');
 8000cee:	2128      	movs	r1, #40	@ 0x28
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f010 ffd5 	bl	8011ca0 <strchr>
 8000cf6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        if (params_start) {
 8000cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d03b      	beq.n	8000d7a <process_command+0x51a>
            if (sscanf(params_start, "({%f,%f,%f})", &kp, &ki, &kd) == 3) {
 8000d02:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000d06:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8000d0a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	460b      	mov	r3, r1
 8000d12:	4975      	ldr	r1, [pc, #468]	@ (8000ee8 <process_command+0x688>)
 8000d14:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8000d18:	f010 fe9a 	bl	8011a50 <siscanf>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d127      	bne.n	8000d72 <process_command+0x512>
                PID_t yaw_rate_pid = {kp, ki, kd};
 8000d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d2c:	653b      	str	r3, [r7, #80]	@ 0x50
                if (EEPROM_SetYawRatePID(&yaw_rate_pid) == W25Qxx_OK) {
 8000d2e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fb8c 	bl	8001450 <EEPROM_SetYawRatePID>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d115      	bne.n	8000d6a <process_command+0x50a>
                    printf("Yaw Rate PID Set: Kp=%.3f, Ki=%.3f, Kd=%.3f\n", kp, ki, kd);
 8000d3e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000d42:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d46:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000d4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d4e:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8000d52:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000d56:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000d5a:	ed8d 7b00 	vstr	d7, [sp]
 8000d5e:	ec53 2b15 	vmov	r2, r3, d5
 8000d62:	4862      	ldr	r0, [pc, #392]	@ (8000eec <process_command+0x68c>)
 8000d64:	f010 fdda 	bl	801191c <iprintf>
 8000d68:	e0ad      	b.n	8000ec6 <process_command+0x666>
                } else {
                    printf("Failed to set Yaw Rate PID\n");
 8000d6a:	4861      	ldr	r0, [pc, #388]	@ (8000ef0 <process_command+0x690>)
 8000d6c:	f010 fe46 	bl	80119fc <puts>
 8000d70:	e0a9      	b.n	8000ec6 <process_command+0x666>
                }
            } else {
                printf("Invalid Yaw Rate PID Parameters\n");
 8000d72:	4860      	ldr	r0, [pc, #384]	@ (8000ef4 <process_command+0x694>)
 8000d74:	f010 fe42 	bl	80119fc <puts>
 8000d78:	e0a5      	b.n	8000ec6 <process_command+0x666>
            }
        } else {
            printf("Invalid Yaw Rate PID Command Format\n");
 8000d7a:	485f      	ldr	r0, [pc, #380]	@ (8000ef8 <process_command+0x698>)
 8000d7c:	f010 fe3e 	bl	80119fc <puts>
 8000d80:	e0a1      	b.n	8000ec6 <process_command+0x666>
        }
    }
    else if (strcmp(cmd, "get_roll_pid") == 0) {
 8000d82:	495e      	ldr	r1, [pc, #376]	@ (8000efc <process_command+0x69c>)
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fac3 	bl	8000310 <strcmp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d133      	bne.n	8000df8 <process_command+0x598>
        DualPID_t roll_pid;
        if (EEPROM_GetRollPID(&roll_pid) == W25Qxx_OK) {
 8000d90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 fa95 	bl	80012c4 <EEPROM_GetRollPID>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d127      	bne.n	8000df0 <process_command+0x590>
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8000da0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000da4:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8000da8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000dac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8000db0:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000db4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8000db8:	edd7 5a0f 	vldr	s11, [r7, #60]	@ 0x3c
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000dbc:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8000dc0:	edd7 4a10 	vldr	s9, [r7, #64]	@ 0x40
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000dc4:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8000dc8:	edd7 3a11 	vldr	s7, [r7, #68]	@ 0x44
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000dcc:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000dd0:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000dd4:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000dd8:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000ddc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000de0:	ed8d 7b00 	vstr	d7, [sp]
 8000de4:	ec53 2b12 	vmov	r2, r3, d2
 8000de8:	4845      	ldr	r0, [pc, #276]	@ (8000f00 <process_command+0x6a0>)
 8000dea:	f010 fd97 	bl	801191c <iprintf>
 8000dee:	e06a      	b.n	8000ec6 <process_command+0x666>
        } else {
            printf("Failed to get Roll PID\n");
 8000df0:	4844      	ldr	r0, [pc, #272]	@ (8000f04 <process_command+0x6a4>)
 8000df2:	f010 fe03 	bl	80119fc <puts>
 8000df6:	e066      	b.n	8000ec6 <process_command+0x666>
        }
    }
    else if (strcmp(cmd, "get_pitch_pid") == 0) {
 8000df8:	4943      	ldr	r1, [pc, #268]	@ (8000f08 <process_command+0x6a8>)
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fa88 	bl	8000310 <strcmp>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d133      	bne.n	8000e6e <process_command+0x60e>
        DualPID_t pitch_pid;
        if (EEPROM_GetPitchPID(&pitch_pid) == W25Qxx_OK) {
 8000e06:	f107 0318 	add.w	r3, r7, #24
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 faac 	bl	8001368 <EEPROM_GetPitchPID>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d127      	bne.n	8000e66 <process_command+0x606>
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 8000e16:	edd7 7a06 	vldr	s15, [r7, #24]
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e1a:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 8000e1e:	edd7 7a07 	vldr	s15, [r7, #28]
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 8000e26:	edd7 6a08 	vldr	s13, [r7, #32]
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e2a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 8000e2e:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e32:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 8000e36:	edd7 4a0a 	vldr	s9, [r7, #40]	@ 0x28
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e3a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 8000e3e:	edd7 3a0b 	vldr	s7, [r7, #44]	@ 0x2c
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e42:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000e46:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000e4a:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000e4e:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000e52:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000e56:	ed8d 7b00 	vstr	d7, [sp]
 8000e5a:	ec53 2b12 	vmov	r2, r3, d2
 8000e5e:	482b      	ldr	r0, [pc, #172]	@ (8000f0c <process_command+0x6ac>)
 8000e60:	f010 fd5c 	bl	801191c <iprintf>
 8000e64:	e02f      	b.n	8000ec6 <process_command+0x666>
        } else {
            printf("Failed to get Pitch PID\n");
 8000e66:	482a      	ldr	r0, [pc, #168]	@ (8000f10 <process_command+0x6b0>)
 8000e68:	f010 fdc8 	bl	80119fc <puts>
 8000e6c:	e02b      	b.n	8000ec6 <process_command+0x666>
        }
    }
    else if (strcmp(cmd, "get_yaw_rate_pid") == 0) {
 8000e6e:	4929      	ldr	r1, [pc, #164]	@ (8000f14 <process_command+0x6b4>)
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff fa4d 	bl	8000310 <strcmp>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d121      	bne.n	8000ec0 <process_command+0x660>
        PID_t yaw_rate_pid;
        if (EEPROM_GetYawRatePID(&yaw_rate_pid) == W25Qxx_OK) {
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fac3 	bl	800140c <EEPROM_GetYawRatePID>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d115      	bne.n	8000eb8 <process_command+0x658>
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8000e8c:	edd7 7a03 	vldr	s15, [r7, #12]
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e90:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8000e94:	edd7 7a04 	vldr	s15, [r7, #16]
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8000e9c:	edd7 6a05 	vldr	s13, [r7, #20]
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000ea0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ea4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000ea8:	ed8d 7b00 	vstr	d7, [sp]
 8000eac:	ec53 2b15 	vmov	r2, r3, d5
 8000eb0:	4819      	ldr	r0, [pc, #100]	@ (8000f18 <process_command+0x6b8>)
 8000eb2:	f010 fd33 	bl	801191c <iprintf>
 8000eb6:	e006      	b.n	8000ec6 <process_command+0x666>
        } else {
            printf("Failed to get Yaw Rate PID\n");
 8000eb8:	4818      	ldr	r0, [pc, #96]	@ (8000f1c <process_command+0x6bc>)
 8000eba:	f010 fd9f 	bl	80119fc <puts>
 8000ebe:	e002      	b.n	8000ec6 <process_command+0x666>
        }
    }
    else {
        printf("Unknown Command\n");
 8000ec0:	4817      	ldr	r0, [pc, #92]	@ (8000f20 <process_command+0x6c0>)
 8000ec2:	f010 fd9b 	bl	80119fc <puts>
    }
}
 8000ec6:	37e8      	adds	r7, #232	@ 0xe8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	08015cc0 	.word	0x08015cc0
 8000ed0:	08015c08 	.word	0x08015c08
 8000ed4:	08015ccc 	.word	0x08015ccc
 8000ed8:	08015d18 	.word	0x08015d18
 8000edc:	08015d30 	.word	0x08015d30
 8000ee0:	08015d50 	.word	0x08015d50
 8000ee4:	08015d74 	.word	0x08015d74
 8000ee8:	08015d84 	.word	0x08015d84
 8000eec:	08015d94 	.word	0x08015d94
 8000ef0:	08015dc4 	.word	0x08015dc4
 8000ef4:	08015de0 	.word	0x08015de0
 8000ef8:	08015e00 	.word	0x08015e00
 8000efc:	08015e24 	.word	0x08015e24
 8000f00:	08015e34 	.word	0x08015e34
 8000f04:	08015e7c 	.word	0x08015e7c
 8000f08:	08015e94 	.word	0x08015e94
 8000f0c:	08015ea4 	.word	0x08015ea4
 8000f10:	08015eec 	.word	0x08015eec
 8000f14:	08015f04 	.word	0x08015f04
 8000f18:	08015f18 	.word	0x08015f18
 8000f1c:	08015f44 	.word	0x08015f44
 8000f20:	08015f60 	.word	0x08015f60

08000f24 <EEPROM_Init>:

/**
  * @brief Initialize the W25Qxx flash memory
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_Init(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b096      	sub	sp, #88	@ 0x58
 8000f28:	af00      	add	r7, sp, #0
    uint8_t jedec_id[3];
    OSPI_RegularCmdTypeDef cmd = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2250      	movs	r2, #80	@ 0x50
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f010 fead 	bl	8011c90 <memset>

    /* Configure command to read JEDEC ID */
    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
    cmd.Instruction = W25Qxx_CMD_JEDEC_ID;
 8000f3a:	239f      	movs	r3, #159	@ 0x9f
 8000f3c:	60fb      	str	r3, [r7, #12]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	613b      	str	r3, [r7, #16]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8000f4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    cmd.NbData = 3;
 8000f54:	2303      	movs	r3, #3
 8000f56:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.DummyCycles = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f66:	4619      	mov	r1, r3
 8000f68:	4815      	ldr	r0, [pc, #84]	@ (8000fc0 <EEPROM_Init+0x9c>)
 8000f6a:	f008 feb9 	bl	8009ce0 <HAL_OSPI_Command>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d005      	beq.n	8000f80 <EEPROM_Init+0x5c>
        printf("Failed to configure JEDEC ID command\r\n");
 8000f74:	4813      	ldr	r0, [pc, #76]	@ (8000fc4 <EEPROM_Init+0xa0>)
 8000f76:	f010 fd41 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f7e:	e01b      	b.n	8000fb8 <EEPROM_Init+0x94>
    }

    if (HAL_OSPI_Receive(&hospi1, jedec_id, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	@ (8000fc0 <EEPROM_Init+0x9c>)
 8000f8c:	f008 ffa8 	bl	8009ee0 <HAL_OSPI_Receive>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <EEPROM_Init+0x7e>
        printf("Failed to read JEDEC ID\r\n");
 8000f96:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <EEPROM_Init+0xa4>)
 8000f98:	f010 fd30 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fa0:	e00a      	b.n	8000fb8 <EEPROM_Init+0x94>
    }

    /* Check for valid JEDEC ID (example: Winbond W25Q series) */
    if (jedec_id[0] != 0xEF) { // Manufacturer ID for Winbond
 8000fa2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000fa6:	2bef      	cmp	r3, #239	@ 0xef
 8000fa8:	d005      	beq.n	8000fb6 <EEPROM_Init+0x92>
        printf("Invalid JEDEC ID\r\n");
 8000faa:	4808      	ldr	r0, [pc, #32]	@ (8000fcc <EEPROM_Init+0xa8>)
 8000fac:	f010 fd26 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fb4:	e000      	b.n	8000fb8 <EEPROM_Init+0x94>
    }

    return W25Qxx_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3758      	adds	r7, #88	@ 0x58
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	24000530 	.word	0x24000530
 8000fc4:	08015f70 	.word	0x08015f70
 8000fc8:	08015f98 	.word	0x08015f98
 8000fcc:	08015fb4 	.word	0x08015fb4

08000fd0 <EEPROM_ReadConfig>:
/**
  * @brief Read configuration from EEPROM
  * @param config Pointer to DroneConfig_t structure
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_ReadConfig(DroneConfig_t *config) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0a8      	sub	sp, #160	@ 0xa0
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    uint8_t buffer[sizeof(DroneConfig_t)];
    if (W25Qxx_Read(W25Qxx_CONFIG_ADDRESS, buffer, sizeof(DroneConfig_t)) != W25Qxx_OK) {
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2290      	movs	r2, #144	@ 0x90
 8000fde:	4619      	mov	r1, r3
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 fad9 	bl	8001598 <W25Qxx_Read>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <EEPROM_ReadConfig+0x28>
        printf("Failed to read data from flash\r\n");
 8000fec:	4812      	ldr	r0, [pc, #72]	@ (8001038 <EEPROM_ReadConfig+0x68>)
 8000fee:	f010 fd05 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ff6:	e01b      	b.n	8001030 <EEPROM_ReadConfig+0x60>
    }

    memcpy(config, buffer, sizeof(DroneConfig_t));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2290      	movs	r2, #144	@ 0x90
 8001002:	4619      	mov	r1, r3
 8001004:	f010 fee3 	bl	8011dce <memcpy>
    uint32_t calculated_crc = CalculateCRC32((uint8_t*)config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8001008:	218c      	movs	r1, #140	@ 0x8c
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f83c 	bl	8001088 <CalculateCRC32>
 8001010:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (calculated_crc != config->crc) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800101a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800101e:	429a      	cmp	r2, r3
 8001020:	d005      	beq.n	800102e <EEPROM_ReadConfig+0x5e>
        printf("EEPROM config CRC mismatch\r\n");
 8001022:	4806      	ldr	r0, [pc, #24]	@ (800103c <EEPROM_ReadConfig+0x6c>)
 8001024:	f010 fcea 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 8001028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800102c:	e000      	b.n	8001030 <EEPROM_ReadConfig+0x60>
    }

    return W25Qxx_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	37a0      	adds	r7, #160	@ 0xa0
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	08015fc8 	.word	0x08015fc8
 800103c:	08015fe8 	.word	0x08015fe8

08001040 <EEPROM_WriteConfig>:
/**
  * @brief Write configuration to EEPROM
  * @param config Pointer to DroneConfig_t structure
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_WriteConfig(DroneConfig_t *config) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b0a6      	sub	sp, #152	@ 0x98
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    uint8_t buffer[sizeof(DroneConfig_t)];
    memcpy(buffer, config, sizeof(DroneConfig_t));
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	4611      	mov	r1, r2
 8001050:	2290      	movs	r2, #144	@ 0x90
 8001052:	4618      	mov	r0, r3
 8001054:	f010 febb 	bl	8011dce <memcpy>

    if (W25Qxx_Write(W25Qxx_CONFIG_ADDRESS, buffer, sizeof(DroneConfig_t)) != W25Qxx_OK) {
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	2290      	movs	r2, #144	@ 0x90
 800105e:	4619      	mov	r1, r3
 8001060:	2000      	movs	r0, #0
 8001062:	f000 faed 	bl	8001640 <W25Qxx_Write>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <EEPROM_WriteConfig+0x38>
        printf("Failed to write data to flash\r\n");
 800106c:	4805      	ldr	r0, [pc, #20]	@ (8001084 <EEPROM_WriteConfig+0x44>)
 800106e:	f010 fcc5 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001076:	e000      	b.n	800107a <EEPROM_WriteConfig+0x3a>
    }

    return W25Qxx_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3798      	adds	r7, #152	@ 0x98
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	08016004 	.word	0x08016004

08001088 <CalculateCRC32>:
  * @brief Calculate CRC32 for data integrity
  * @param data Pointer to data
  * @param length Length of data
  * @retval uint32_t CRC value
  */
uint32_t CalculateCRC32(const uint8_t *data, uint32_t length) {
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001096:	617b      	str	r3, [r7, #20]
    const uint32_t polynomial = 0x04C11DB7;
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <CalculateCRC32+0x70>)
 800109a:	60bb      	str	r3, [r7, #8]

    for (uint32_t i = 0; i < length; i++) {
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	e01f      	b.n	80010e2 <CalculateCRC32+0x5a>
        crc ^= (uint32_t)data[i] << 24;
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	061b      	lsls	r3, r3, #24
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	4053      	eors	r3, r2
 80010b0:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	e00e      	b.n	80010d6 <CalculateCRC32+0x4e>
            if (crc & 0x80000000) {
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da05      	bge.n	80010ca <CalculateCRC32+0x42>
                crc = (crc << 1) ^ polynomial;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	4053      	eors	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	e002      	b.n	80010d0 <CalculateCRC32+0x48>
            } else {
                crc <<= 1;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	3301      	adds	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	d9ed      	bls.n	80010b8 <CalculateCRC32+0x30>
    for (uint32_t i = 0; i < length; i++) {
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	3301      	adds	r3, #1
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d3db      	bcc.n	80010a2 <CalculateCRC32+0x1a>
            }
        }
    }
    return crc;
 80010ea:	697b      	ldr	r3, [r7, #20]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	04c11db7 	.word	0x04c11db7

080010fc <EEPROM_GetAccelCalibration>:
/**
  * @brief Get accelerometer calibration data
  * @param accel_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetAccelCalibration(float accel_cal[3]) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0aa      	sub	sp, #168	@ 0xa8
 8001100:	af04      	add	r7, sp, #16
 8001102:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff61 	bl	8000fd0 <EEPROM_ReadConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d012      	beq.n	800113a <EEPROM_GetAccelCalibration+0x3e>
        printf("Failed to read config during GetAccelCalibration\r\n");
 8001114:	481c      	ldr	r0, [pc, #112]	@ (8001188 <EEPROM_GetAccelCalibration+0x8c>)
 8001116:	f010 fc71 	bl	80119fc <puts>
        accel_cal[0] = accel_cal[1] = accel_cal[2] = 0.0f; // Initialize on error
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f103 0208 	add.w	r2, r3, #8
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3304      	adds	r3, #4
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 8001134:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001138:	e021      	b.n	800117e <EEPROM_GetAccelCalibration+0x82>
    }
    memcpy(accel_cal, config.accel_cal, 3 * sizeof(float));
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	220c      	movs	r2, #12
 8001140:	4619      	mov	r1, r3
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f010 fe43 	bl	8011dce <memcpy>
    printf("Retrieved accel_cal: X=%f, Y=%f, Z=%f\r\n", accel_cal[0], accel_cal[1], accel_cal[2]);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3304      	adds	r3, #4
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3308      	adds	r3, #8
 8001162:	edd3 6a00 	vldr	s13, [r3]
 8001166:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800116a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800116e:	ed8d 7b00 	vstr	d7, [sp]
 8001172:	ec53 2b15 	vmov	r2, r3, d5
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <EEPROM_GetAccelCalibration+0x90>)
 8001178:	f010 fbd0 	bl	801191c <iprintf>
    return W25Qxx_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3798      	adds	r7, #152	@ 0x98
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	08016024 	.word	0x08016024
 800118c:	08016058 	.word	0x08016058

08001190 <EEPROM_GetGyroCalibration>:
/**
  * @brief Get gyroscope calibration data
  * @param gyro_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetGyroCalibration(float gyro_cal[3]) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b0aa      	sub	sp, #168	@ 0xa8
 8001194:	af04      	add	r7, sp, #16
 8001196:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff17 	bl	8000fd0 <EEPROM_ReadConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d012      	beq.n	80011ce <EEPROM_GetGyroCalibration+0x3e>
        printf("Failed to read config during GetGyroCalibration\r\n");
 80011a8:	481c      	ldr	r0, [pc, #112]	@ (800121c <EEPROM_GetGyroCalibration+0x8c>)
 80011aa:	f010 fc27 	bl	80119fc <puts>
        gyro_cal[0] = gyro_cal[1] = gyro_cal[2] = 0.0f; // Initialize on error
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f103 0208 	add.w	r2, r3, #8
 80011b4:	f04f 0300 	mov.w	r3, #0
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3304      	adds	r3, #4
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011cc:	e022      	b.n	8001214 <EEPROM_GetGyroCalibration+0x84>
    }
    memcpy(gyro_cal, config.gyro_cal, 3 * sizeof(float));
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	330c      	adds	r3, #12
 80011d4:	220c      	movs	r2, #12
 80011d6:	4619      	mov	r1, r3
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f010 fdf8 	bl	8011dce <memcpy>
    printf("Retrieved gyro_cal: X=%f, Y=%f, Z=%f\r\n", gyro_cal[0], gyro_cal[1], gyro_cal[2]);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3304      	adds	r3, #4
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3308      	adds	r3, #8
 80011f8:	edd3 6a00 	vldr	s13, [r3]
 80011fc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001200:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001204:	ed8d 7b00 	vstr	d7, [sp]
 8001208:	ec53 2b15 	vmov	r2, r3, d5
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <EEPROM_GetGyroCalibration+0x90>)
 800120e:	f010 fb85 	bl	801191c <iprintf>
    return W25Qxx_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3798      	adds	r7, #152	@ 0x98
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	080160b4 	.word	0x080160b4
 8001220:	080160e8 	.word	0x080160e8

08001224 <EEPROM_GetMagCalibration>:
/**
  * @brief Get magnetometer calibration data
  * @param mag_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetMagCalibration(float mag_cal[3]) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b0a6      	sub	sp, #152	@ 0x98
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fecd 	bl	8000fd0 <EEPROM_ReadConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d012      	beq.n	8001262 <EEPROM_GetMagCalibration+0x3e>
        printf("Failed to read config during GetMagCalibration\r\n");
 800123c:	480f      	ldr	r0, [pc, #60]	@ (800127c <EEPROM_GetMagCalibration+0x58>)
 800123e:	f010 fbdd 	bl	80119fc <puts>
        mag_cal[0] = mag_cal[1] = mag_cal[2] = 0.0f; // Initialize on error
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f103 0208 	add.w	r2, r3, #8
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3304      	adds	r3, #4
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001260:	e008      	b.n	8001274 <EEPROM_GetMagCalibration+0x50>
    }
    memcpy(mag_cal, config.mag_cal, 3 * sizeof(float));
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	3318      	adds	r3, #24
 8001268:	220c      	movs	r2, #12
 800126a:	4619      	mov	r1, r3
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f010 fdae 	bl	8011dce <memcpy>
    return W25Qxx_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3798      	adds	r7, #152	@ 0x98
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	08016144 	.word	0x08016144

08001280 <EEPROM_GetPID>:
/**
  * @brief Get legacy PID values
  * @param pid Array to store PID values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetPID(float pid[3]) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b0a6      	sub	sp, #152	@ 0x98
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fe9f 	bl	8000fd0 <EEPROM_ReadConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <EEPROM_GetPID+0x24>
        printf("Failed to read config during GetPID\r\n");
 8001298:	4809      	ldr	r0, [pc, #36]	@ (80012c0 <EEPROM_GetPID+0x40>)
 800129a:	f010 fbaf 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012a2:	e008      	b.n	80012b6 <EEPROM_GetPID+0x36>
    }
    memcpy(pid, config.pid, 3 * sizeof(float));
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	3324      	adds	r3, #36	@ 0x24
 80012aa:	220c      	movs	r2, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f010 fd8d 	bl	8011dce <memcpy>
    return W25Qxx_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3798      	adds	r7, #152	@ 0x98
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	080161a4 	.word	0x080161a4

080012c4 <EEPROM_GetRollPID>:
/**
  * @brief Get roll PID values
  * @param roll_pid Pointer to store roll PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetRollPID(DualPID_t *roll_pid) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0a6      	sub	sp, #152	@ 0x98
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fe7d 	bl	8000fd0 <EEPROM_ReadConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <EEPROM_GetRollPID+0x24>
        printf("Failed to read config during GetRollPID\r\n");
 80012dc:	4809      	ldr	r0, [pc, #36]	@ (8001304 <EEPROM_GetRollPID+0x40>)
 80012de:	f010 fb8d 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012e6:	e008      	b.n	80012fa <EEPROM_GetRollPID+0x36>
    }
    memcpy(roll_pid, &config.roll_pid, sizeof(DualPID_t));
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	3340      	adds	r3, #64	@ 0x40
 80012ee:	2218      	movs	r2, #24
 80012f0:	4619      	mov	r1, r3
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f010 fd6b 	bl	8011dce <memcpy>
    return W25Qxx_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3798      	adds	r7, #152	@ 0x98
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	0801629c 	.word	0x0801629c

08001308 <EEPROM_SetRollPID>:
/**
  * @brief Set roll PID values
  * @param roll_pid Pointer to roll PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetRollPID(const DualPID_t *roll_pid) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b0a6      	sub	sp, #152	@ 0x98
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fe5b 	bl	8000fd0 <EEPROM_ReadConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <EEPROM_SetRollPID+0x24>
        printf("Failed to read config during SetRollPID\r\n");
 8001320:	4810      	ldr	r0, [pc, #64]	@ (8001364 <EEPROM_SetRollPID+0x5c>)
 8001322:	f010 fb6b 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800132a:	e016      	b.n	800135a <EEPROM_SetRollPID+0x52>
    }
    memcpy(&config.roll_pid, roll_pid, sizeof(DualPID_t));
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	3340      	adds	r3, #64	@ 0x40
 8001332:	2218      	movs	r2, #24
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4618      	mov	r0, r3
 8001338:	f010 fd49 	bl	8011dce <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	218c      	movs	r1, #140	@ 0x8c
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fea0 	bl	8001088 <CalculateCRC32>
 8001348:	4603      	mov	r3, r0
 800134a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fe74 	bl	8001040 <EEPROM_WriteConfig>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3798      	adds	r7, #152	@ 0x98
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	080162c8 	.word	0x080162c8

08001368 <EEPROM_GetPitchPID>:
/**
  * @brief Get pitch PID values
  * @param pitch_pid Pointer to store pitch PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetPitchPID(DualPID_t *pitch_pid) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b0a6      	sub	sp, #152	@ 0x98
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fe2b 	bl	8000fd0 <EEPROM_ReadConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <EEPROM_GetPitchPID+0x24>
        printf("Failed to read config during GetPitchPID\r\n");
 8001380:	4809      	ldr	r0, [pc, #36]	@ (80013a8 <EEPROM_GetPitchPID+0x40>)
 8001382:	f010 fb3b 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800138a:	e008      	b.n	800139e <EEPROM_GetPitchPID+0x36>
    }
    memcpy(pitch_pid, &config.pitch_pid, sizeof(DualPID_t));
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	3358      	adds	r3, #88	@ 0x58
 8001392:	2218      	movs	r2, #24
 8001394:	4619      	mov	r1, r3
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f010 fd19 	bl	8011dce <memcpy>
    return W25Qxx_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3798      	adds	r7, #152	@ 0x98
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	080162f4 	.word	0x080162f4

080013ac <EEPROM_SetPitchPID>:
/**
  * @brief Set pitch PID values
  * @param pitch_pid Pointer to pitch PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetPitchPID(const DualPID_t *pitch_pid) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0a6      	sub	sp, #152	@ 0x98
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fe09 	bl	8000fd0 <EEPROM_ReadConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <EEPROM_SetPitchPID+0x24>
        printf("Failed to read config during SetPitchPID\r\n");
 80013c4:	4810      	ldr	r0, [pc, #64]	@ (8001408 <EEPROM_SetPitchPID+0x5c>)
 80013c6:	f010 fb19 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013ce:	e016      	b.n	80013fe <EEPROM_SetPitchPID+0x52>
    }
    memcpy(&config.pitch_pid, pitch_pid, sizeof(DualPID_t));
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	3358      	adds	r3, #88	@ 0x58
 80013d6:	2218      	movs	r2, #24
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	f010 fcf7 	bl	8011dce <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	218c      	movs	r1, #140	@ 0x8c
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fe4e 	bl	8001088 <CalculateCRC32>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fe22 	bl	8001040 <EEPROM_WriteConfig>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3798      	adds	r7, #152	@ 0x98
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	08016320 	.word	0x08016320

0800140c <EEPROM_GetYawRatePID>:
/**
  * @brief Get yaw rate PID values
  * @param yaw_rate_pid Pointer to store yaw rate PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetYawRatePID(PID_t *yaw_rate_pid) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b0a6      	sub	sp, #152	@ 0x98
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fdd9 	bl	8000fd0 <EEPROM_ReadConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <EEPROM_GetYawRatePID+0x24>
        printf("Failed to read config during GetYawRatePID\r\n");
 8001424:	4809      	ldr	r0, [pc, #36]	@ (800144c <EEPROM_GetYawRatePID+0x40>)
 8001426:	f010 fae9 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800142e:	e008      	b.n	8001442 <EEPROM_GetYawRatePID+0x36>
    }
    memcpy(yaw_rate_pid, &config.yaw_rate_pid, sizeof(PID_t));
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	3370      	adds	r3, #112	@ 0x70
 8001436:	220c      	movs	r2, #12
 8001438:	4619      	mov	r1, r3
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f010 fcc7 	bl	8011dce <memcpy>
    return W25Qxx_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3798      	adds	r7, #152	@ 0x98
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	0801634c 	.word	0x0801634c

08001450 <EEPROM_SetYawRatePID>:
/**
  * @brief Set yaw rate PID values
  * @param yaw_rate_pid Pointer to yaw rate PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetYawRatePID(const PID_t *yaw_rate_pid) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b0a6      	sub	sp, #152	@ 0x98
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fdb7 	bl	8000fd0 <EEPROM_ReadConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <EEPROM_SetYawRatePID+0x24>
        printf("Failed to read config during SetYawRatePID\r\n");
 8001468:	4810      	ldr	r0, [pc, #64]	@ (80014ac <EEPROM_SetYawRatePID+0x5c>)
 800146a:	f010 fac7 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001472:	e016      	b.n	80014a2 <EEPROM_SetYawRatePID+0x52>
    }
    memcpy(&config.yaw_rate_pid, yaw_rate_pid, sizeof(PID_t));
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	3370      	adds	r3, #112	@ 0x70
 800147a:	220c      	movs	r2, #12
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4618      	mov	r0, r3
 8001480:	f010 fca5 	bl	8011dce <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	218c      	movs	r1, #140	@ 0x8c
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fdfc 	bl	8001088 <CalculateCRC32>
 8001490:	4603      	mov	r3, r0
 8001492:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fdd0 	bl	8001040 <EEPROM_WriteConfig>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3798      	adds	r7, #152	@ 0x98
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	08016378 	.word	0x08016378

080014b0 <EEPROM_GetAircraftLights>:
/**
  * @brief Get aircraft lights configuration
  * @param lights Pointer to store lights configuration
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetAircraftLights(AircraftLights_t *lights) {
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b0a7      	sub	sp, #156	@ 0x9c
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fd87 	bl	8000fd0 <EEPROM_ReadConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <EEPROM_GetAircraftLights+0x24>
        printf("Failed to read config during GetAircraftLights\r\n");
 80014c8:	480a      	ldr	r0, [pc, #40]	@ (80014f4 <EEPROM_GetAircraftLights+0x44>)
 80014ca:	f010 fa97 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014d2:	e00a      	b.n	80014ea <EEPROM_GetAircraftLights+0x3a>
    }
    memcpy(lights, &config.lights, sizeof(AircraftLights_t));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	461c      	mov	r4, r3
 80014d8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80014dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014de:	6020      	str	r0, [r4, #0]
 80014e0:	6061      	str	r1, [r4, #4]
 80014e2:	60a2      	str	r2, [r4, #8]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	7323      	strb	r3, [r4, #12]
    return W25Qxx_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	379c      	adds	r7, #156	@ 0x9c
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	080163a4 	.word	0x080163a4

080014f8 <W25Qxx_WaitForWriteEnd>:

/**
  * @brief Wait for write operation to complete
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_WaitForWriteEnd(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b096      	sub	sp, #88	@ 0x58
 80014fc:	af00      	add	r7, sp, #0
    OSPI_RegularCmdTypeDef cmd = {0};
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	2250      	movs	r2, #80	@ 0x50
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f010 fbc2 	bl	8011c90 <memset>
    uint8_t status;

    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
    cmd.Instruction = W25Qxx_CMD_READ_STATUS1;
 8001510:	2305      	movs	r3, #5
 8001512:	613b      	str	r3, [r7, #16]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8001514:	2301      	movs	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	@ 0x34
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8001524:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001528:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.NbData = 1;
 800152a:	2301      	movs	r3, #1
 800152c:	647b      	str	r3, [r7, #68]	@ 0x44
    cmd.DummyCycles = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	653b      	str	r3, [r7, #80]	@ 0x50

    do {
        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153e:	4619      	mov	r1, r3
 8001540:	4812      	ldr	r0, [pc, #72]	@ (800158c <W25Qxx_WaitForWriteEnd+0x94>)
 8001542:	f008 fbcd 	bl	8009ce0 <HAL_OSPI_Command>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <W25Qxx_WaitForWriteEnd+0x60>
            printf("Failed to configure read status command\r\n");
 800154c:	4810      	ldr	r0, [pc, #64]	@ (8001590 <W25Qxx_WaitForWriteEnd+0x98>)
 800154e:	f010 fa55 	bl	80119fc <puts>
            return W25Qxx_ERROR;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001556:	e015      	b.n	8001584 <W25Qxx_WaitForWriteEnd+0x8c>
        }
        if (HAL_OSPI_Receive(&hospi1, &status, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001558:	1dfb      	adds	r3, r7, #7
 800155a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155e:	4619      	mov	r1, r3
 8001560:	480a      	ldr	r0, [pc, #40]	@ (800158c <W25Qxx_WaitForWriteEnd+0x94>)
 8001562:	f008 fcbd 	bl	8009ee0 <HAL_OSPI_Receive>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <W25Qxx_WaitForWriteEnd+0x80>
            printf("Failed to read status\r\n");
 800156c:	4809      	ldr	r0, [pc, #36]	@ (8001594 <W25Qxx_WaitForWriteEnd+0x9c>)
 800156e:	f010 fa45 	bl	80119fc <puts>
            return W25Qxx_ERROR;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001576:	e005      	b.n	8001584 <W25Qxx_WaitForWriteEnd+0x8c>
        }
    } while (status & 0x01); // Busy bit
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1d9      	bne.n	8001536 <W25Qxx_WaitForWriteEnd+0x3e>

    return W25Qxx_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3758      	adds	r7, #88	@ 0x58
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	24000530 	.word	0x24000530
 8001590:	08016404 	.word	0x08016404
 8001594:	08016430 	.word	0x08016430

08001598 <W25Qxx_Read>:
  * @param address Start address
  * @param buffer Buffer to store data
  * @param length Length of data to read
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_Read(uint32_t address, uint8_t *buffer, uint32_t length) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b098      	sub	sp, #96	@ 0x60
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
    OSPI_RegularCmdTypeDef cmd = {0};
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	2250      	movs	r2, #80	@ 0x50
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f010 fb6f 	bl	8011c90 <memset>

    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
    cmd.Instruction = W25Qxx_CMD_READ_DATA;
 80015b6:	2303      	movs	r3, #3
 80015b8:	61bb      	str	r3, [r7, #24]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
    cmd.Address = address;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80015c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 80015cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015d0:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 80015d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015da:	64bb      	str	r3, [r7, #72]	@ 0x48
    cmd.NbData = length;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DummyCycles = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	657b      	str	r3, [r7, #84]	@ 0x54
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f0:	4619      	mov	r1, r3
 80015f2:	4810      	ldr	r0, [pc, #64]	@ (8001634 <W25Qxx_Read+0x9c>)
 80015f4:	f008 fb74 	bl	8009ce0 <HAL_OSPI_Command>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <W25Qxx_Read+0x72>
        printf("Failed to configure read command\r\n");
 80015fe:	480e      	ldr	r0, [pc, #56]	@ (8001638 <W25Qxx_Read+0xa0>)
 8001600:	f010 f9fc 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001608:	e00f      	b.n	800162a <W25Qxx_Read+0x92>
    }

    if (HAL_OSPI_Receive(&hospi1, buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800160a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	4808      	ldr	r0, [pc, #32]	@ (8001634 <W25Qxx_Read+0x9c>)
 8001612:	f008 fc65 	bl	8009ee0 <HAL_OSPI_Receive>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <W25Qxx_Read+0x90>
        printf("Failed to read data\r\n");
 800161c:	4807      	ldr	r0, [pc, #28]	@ (800163c <W25Qxx_Read+0xa4>)
 800161e:	f010 f9ed 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001626:	e000      	b.n	800162a <W25Qxx_Read+0x92>
    }

    return W25Qxx_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3760      	adds	r7, #96	@ 0x60
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	24000530 	.word	0x24000530
 8001638:	08016448 	.word	0x08016448
 800163c:	0801646c 	.word	0x0801646c

08001640 <W25Qxx_Write>:
  * @param address Start address
  * @param buffer Pointer to data
  * @param length Length of data to write
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_Write(uint32_t address, uint8_t *buffer, uint32_t length) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b09e      	sub	sp, #120	@ 0x78
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
    OSPI_RegularCmdTypeDef cmd = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2250      	movs	r2, #80	@ 0x50
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f010 fb1b 	bl	8011c90 <memset>
    uint32_t remaining = length;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	677b      	str	r3, [r7, #116]	@ 0x74
    uint32_t current_address = address;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	673b      	str	r3, [r7, #112]	@ 0x70
    uint8_t *current_buffer = buffer;
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* Erase sector if necessary */
    uint32_t sector = address / W25Qxx_SECTOR_SIZE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	0b1b      	lsrs	r3, r3, #12
 800166a:	66bb      	str	r3, [r7, #104]	@ 0x68
    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
    cmd.Instruction = W25Qxx_CMD_WRITE_ENABLE;
 8001670:	2306      	movs	r3, #6
 8001672:	61fb      	str	r3, [r7, #28]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8001674:	2301      	movs	r3, #1
 8001676:	623b      	str	r3, [r7, #32]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 800167c:	2300      	movs	r3, #0
 800167e:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001680:	2300      	movs	r3, #0
 8001682:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.DataMode = HAL_OSPI_DATA_NONE;
 8001684:	2300      	movs	r3, #0
 8001686:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DummyCycles = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	65bb      	str	r3, [r7, #88]	@ 0x58
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001698:	4619      	mov	r1, r3
 800169a:	484f      	ldr	r0, [pc, #316]	@ (80017d8 <W25Qxx_Write+0x198>)
 800169c:	f008 fb20 	bl	8009ce0 <HAL_OSPI_Command>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <W25Qxx_Write+0x72>
        printf("Failed to enable write for sector erase\r\n");
 80016a6:	484d      	ldr	r0, [pc, #308]	@ (80017dc <W25Qxx_Write+0x19c>)
 80016a8:	f010 f9a8 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016b0:	e08e      	b.n	80017d0 <W25Qxx_Write+0x190>
    }

    cmd.Instruction = W25Qxx_CMD_SECTOR_ERASE;
 80016b2:	2320      	movs	r3, #32
 80016b4:	61fb      	str	r3, [r7, #28]
    cmd.Address = sector * W25Qxx_SECTOR_SIZE;
 80016b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016b8:	031b      	lsls	r3, r3, #12
 80016ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80016bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016c0:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 80016c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c6:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d0:	4619      	mov	r1, r3
 80016d2:	4841      	ldr	r0, [pc, #260]	@ (80017d8 <W25Qxx_Write+0x198>)
 80016d4:	f008 fb04 	bl	8009ce0 <HAL_OSPI_Command>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <W25Qxx_Write+0xaa>
        printf("Failed to erase sector\r\n");
 80016de:	4840      	ldr	r0, [pc, #256]	@ (80017e0 <W25Qxx_Write+0x1a0>)
 80016e0:	f010 f98c 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016e8:	e072      	b.n	80017d0 <W25Qxx_Write+0x190>
    }

    if (W25Qxx_WaitForWriteEnd() != W25Qxx_OK) {
 80016ea:	f7ff ff05 	bl	80014f8 <W25Qxx_WaitForWriteEnd>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d069      	beq.n	80017c8 <W25Qxx_Write+0x188>
        printf("Timeout waiting for sector erase\r\n");
 80016f4:	483b      	ldr	r0, [pc, #236]	@ (80017e4 <W25Qxx_Write+0x1a4>)
 80016f6:	f010 f981 	bl	80119fc <puts>
        return W25Qxx_ERROR;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016fe:	e067      	b.n	80017d0 <W25Qxx_Write+0x190>
    }

    /* Write data in pages */
    while (remaining > 0) {
        uint32_t page_size = (remaining > W25Qxx_PAGE_SIZE) ? W25Qxx_PAGE_SIZE : remaining;
 8001700:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001706:	bf28      	it	cs
 8001708:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800170c:	667b      	str	r3, [r7, #100]	@ 0x64

        cmd.Instruction = W25Qxx_CMD_WRITE_ENABLE;
 800170e:	2306      	movs	r3, #6
 8001710:	61fb      	str	r3, [r7, #28]
        cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8001712:	2300      	movs	r3, #0
 8001714:	633b      	str	r3, [r7, #48]	@ 0x30
        cmd.DataMode = HAL_OSPI_DATA_NONE;
 8001716:	2300      	movs	r3, #0
 8001718:	64fb      	str	r3, [r7, #76]	@ 0x4c

        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001722:	4619      	mov	r1, r3
 8001724:	482c      	ldr	r0, [pc, #176]	@ (80017d8 <W25Qxx_Write+0x198>)
 8001726:	f008 fadb 	bl	8009ce0 <HAL_OSPI_Command>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <W25Qxx_Write+0xfc>
            printf("Failed to enable write for page program\r\n");
 8001730:	482d      	ldr	r0, [pc, #180]	@ (80017e8 <W25Qxx_Write+0x1a8>)
 8001732:	f010 f963 	bl	80119fc <puts>
            return W25Qxx_ERROR;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800173a:	e049      	b.n	80017d0 <W25Qxx_Write+0x190>
        }

        cmd.Instruction = W25Qxx_CMD_PAGE_PROGRAM;
 800173c:	2302      	movs	r3, #2
 800173e:	61fb      	str	r3, [r7, #28]
        cmd.Address = current_address;
 8001740:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
        cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8001744:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001748:	633b      	str	r3, [r7, #48]	@ 0x30
        cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 800174a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800174e:	637b      	str	r3, [r7, #52]	@ 0x34
        cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8001750:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001754:	64fb      	str	r3, [r7, #76]	@ 0x4c
        cmd.NbData = page_size;
 8001756:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001758:	653b      	str	r3, [r7, #80]	@ 0x50

        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001762:	4619      	mov	r1, r3
 8001764:	481c      	ldr	r0, [pc, #112]	@ (80017d8 <W25Qxx_Write+0x198>)
 8001766:	f008 fabb 	bl	8009ce0 <HAL_OSPI_Command>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <W25Qxx_Write+0x13c>
            printf("Failed to configure page program command\r\n");
 8001770:	481e      	ldr	r0, [pc, #120]	@ (80017ec <W25Qxx_Write+0x1ac>)
 8001772:	f010 f943 	bl	80119fc <puts>
            return W25Qxx_ERROR;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800177a:	e029      	b.n	80017d0 <W25Qxx_Write+0x190>
        }

        if (HAL_OSPI_Transmit(&hospi1, current_buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800177c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001780:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001782:	4815      	ldr	r0, [pc, #84]	@ (80017d8 <W25Qxx_Write+0x198>)
 8001784:	f008 fb39 	bl	8009dfa <HAL_OSPI_Transmit>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <W25Qxx_Write+0x15a>
            printf("Failed to write page data\r\n");
 800178e:	4818      	ldr	r0, [pc, #96]	@ (80017f0 <W25Qxx_Write+0x1b0>)
 8001790:	f010 f934 	bl	80119fc <puts>
            return W25Qxx_ERROR;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001798:	e01a      	b.n	80017d0 <W25Qxx_Write+0x190>
        }

        if (W25Qxx_WaitForWriteEnd() != W25Qxx_OK) {
 800179a:	f7ff fead 	bl	80014f8 <W25Qxx_WaitForWriteEnd>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <W25Qxx_Write+0x170>
            printf("Timeout waiting for page write\r\n");
 80017a4:	4813      	ldr	r0, [pc, #76]	@ (80017f4 <W25Qxx_Write+0x1b4>)
 80017a6:	f010 f929 	bl	80119fc <puts>
            return W25Qxx_ERROR;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ae:	e00f      	b.n	80017d0 <W25Qxx_Write+0x190>
        }

        remaining -= page_size;
 80017b0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80017b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	677b      	str	r3, [r7, #116]	@ 0x74
        current_address += page_size;
 80017b8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80017ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017bc:	4413      	add	r3, r2
 80017be:	673b      	str	r3, [r7, #112]	@ 0x70
        current_buffer += page_size;
 80017c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80017c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017c4:	4413      	add	r3, r2
 80017c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    while (remaining > 0) {
 80017c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d198      	bne.n	8001700 <W25Qxx_Write+0xc0>
    }

    return W25Qxx_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3778      	adds	r7, #120	@ 0x78
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	24000530 	.word	0x24000530
 80017dc:	08016484 	.word	0x08016484
 80017e0:	080164b0 	.word	0x080164b0
 80017e4:	080164c8 	.word	0x080164c8
 80017e8:	080164ec 	.word	0x080164ec
 80017ec:	08016518 	.word	0x08016518
 80017f0:	08016544 	.word	0x08016544
 80017f4:	08016560 	.word	0x08016560

080017f8 <HMC5883L_WriteReg>:
static volatile uint8_t i2c_error = 0;
static uint32_t last_reset_time = 0;
static uint8_t reset_attempts = 0;
static const uint8_t max_reset_attempts = 5;

static void HMC5883L_WriteReg(uint8_t reg, uint8_t value) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	4603      	mov	r3, r0
 8001800:	460a      	mov	r2, r1
 8001802:	71fb      	strb	r3, [r7, #7]
 8001804:	4613      	mov	r3, r2
 8001806:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, value};
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	733b      	strb	r3, [r7, #12]
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, tx_data, 2, 100);
 8001810:	f107 020c 	add.w	r2, r7, #12
 8001814:	2364      	movs	r3, #100	@ 0x64
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2302      	movs	r3, #2
 800181a:	213c      	movs	r1, #60	@ 0x3c
 800181c:	4803      	ldr	r0, [pc, #12]	@ (800182c <HMC5883L_WriteReg+0x34>)
 800181e:	f006 fd7d 	bl	800831c <HAL_I2C_Master_Transmit>
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	24000370 	.word	0x24000370

08001830 <HMC5883L_ReadReg>:

uint8_t HMC5883L_ReadReg(uint8_t reg) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af02      	add	r7, sp, #8
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, &reg, 1, 100);
 800183a:	1dfa      	adds	r2, r7, #7
 800183c:	2364      	movs	r3, #100	@ 0x64
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2301      	movs	r3, #1
 8001842:	213c      	movs	r1, #60	@ 0x3c
 8001844:	4808      	ldr	r0, [pc, #32]	@ (8001868 <HMC5883L_ReadReg+0x38>)
 8001846:	f006 fd69 	bl	800831c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, HMC5883L_ADDR, &rx_data, 1, 100);
 800184a:	f107 020f 	add.w	r2, r7, #15
 800184e:	2364      	movs	r3, #100	@ 0x64
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2301      	movs	r3, #1
 8001854:	213c      	movs	r1, #60	@ 0x3c
 8001856:	4804      	ldr	r0, [pc, #16]	@ (8001868 <HMC5883L_ReadReg+0x38>)
 8001858:	f006 fe78 	bl	800854c <HAL_I2C_Master_Receive>
    return rx_data;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	24000370 	.word	0x24000370

0800186c <HMC5883L_Init>:

void HMC5883L_Init(void) {
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x80); // Soft reset
 8001870:	2180      	movs	r1, #128	@ 0x80
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff ffc0 	bl	80017f8 <HMC5883L_WriteReg>
    HAL_Delay(100);
 8001878:	2064      	movs	r0, #100	@ 0x64
 800187a:	f003 fe03 	bl	8005484 <HAL_Delay>
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x78); // 8-avg, 75 Hz, normal mode
 800187e:	2178      	movs	r1, #120	@ 0x78
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff ffb9 	bl	80017f8 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_CONFIG_B, 0x20); // ±1.3 Gauss
 8001886:	2120      	movs	r1, #32
 8001888:	2001      	movs	r0, #1
 800188a:	f7ff ffb5 	bl	80017f8 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_MODE, 0x00);     // Continuous mode
 800188e:	2100      	movs	r1, #0
 8001890:	2002      	movs	r0, #2
 8001892:	f7ff ffb1 	bl	80017f8 <HMC5883L_WriteReg>
    HAL_Delay(10);
 8001896:	200a      	movs	r0, #10
 8001898:	f003 fdf4 	bl	8005484 <HAL_Delay>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	601a      	str	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60da      	str	r2, [r3, #12]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_SPI_IsActiveFlag_RXP>:
  * @rmtoll SR           RXP           LL_SPI_IsActiveFlag_RXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXP(const SPI_TypeDef *SPIx)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <LL_SPI_IsActiveFlag_RXP+0x18>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <LL_SPI_IsActiveFlag_RXP+0x1a>
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_SPI_IsActiveFlag_TXP>:
  * @rmtoll SR           TXP           LL_SPI_IsActiveFlag_TXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXP(const SPI_TypeDef *SPIx)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b02      	cmp	r3, #2
 800191e:	d101      	bne.n	8001924 <LL_SPI_IsActiveFlag_TXP+0x18>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <LL_SPI_IsActiveFlag_TXP+0x1a>
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_SPI_ReceiveData8>:
  * @rmtoll RXDR         .       LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval 0..0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3330      	adds	r3, #48	@ 0x30
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b2db      	uxtb	r3, r3
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3320      	adds	r3, #32
 800195e:	78fa      	ldrb	r2, [r7, #3]
 8001960:	701a      	strb	r2, [r3, #0]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8001978:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <LL_AHB4_GRP1_EnableClock+0x34>)
 800197a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800197e:	4909      	ldr	r1, [pc, #36]	@ (80019a4 <LL_AHB4_GRP1_EnableClock+0x34>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4313      	orrs	r3, r2
 8001984:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <LL_AHB4_GRP1_EnableClock+0x34>)
 800198a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4013      	ands	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001994:	68fb      	ldr	r3, [r7, #12]
}
 8001996:	bf00      	nop
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	58024400 	.word	0x58024400

080019a8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 80019b0:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <LL_APB1_GRP1_EnableClock+0x34>)
 80019b2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80019b6:	4909      	ldr	r1, [pc, #36]	@ (80019dc <LL_APB1_GRP1_EnableClock+0x34>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <LL_APB1_GRP1_EnableClock+0x34>)
 80019c2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019cc:	68fb      	ldr	r3, [r7, #12]
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	58024400 	.word	0x58024400

080019e0 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(const GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691a      	ldr	r2, [r3, #16]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	4013      	ands	r3, r2
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d101      	bne.n	80019fc <LL_GPIO_IsInputPinSet+0x1c>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <LL_GPIO_IsInputPinSet+0x1e>
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	619a      	str	r2, [r3, #24]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	041a      	lsls	r2, r3, #16
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	619a      	str	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <ICM42688P_GPIO_SPI_Initialization>:
static uint8_t dma_rx_buffer[ICM42688P_DMA_BUFFER_SIZE];
static volatile uint8_t dma_transfer_complete = 0;
static volatile uint8_t dma_transfer_error = 0;

void ICM42688P_GPIO_SPI_Initialization(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b090      	sub	sp, #64	@ 0x40
 8001a48:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001a4a:	f107 0318 	add.w	r3, r7, #24
 8001a4e:	2228      	movs	r2, #40	@ 0x28
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f010 f91c 	bl	8011c90 <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable for STM32H7 */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001a68:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001a6c:	f7ff ff9c 	bl	80019a8 <LL_APB1_GRP1_EnableClock>

	/* GPIO clock enable for STM32H7 */
	LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f7ff ff7d 	bl	8001970 <LL_AHB4_GRP1_EnableClock>
	LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8001a76:	2004      	movs	r0, #4
 8001a78:	f7ff ff7a 	bl	8001970 <LL_AHB4_GRP1_EnableClock>
	/**SPI3 GPIO Configuration for STM32H7
	 * PC10  ------> SPI3_SCK
	 * PC11  ------> SPI3_MISO
	 * PC12  ------> SPI3_MOSI
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001a7c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001a80:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a82:	2302      	movs	r3, #2
 8001a84:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6; // SPI3 alternate function for STM32H7
 8001a92:	2306      	movs	r3, #6
 8001a94:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a96:	463b      	mov	r3, r7
 8001a98:	4619      	mov	r1, r3
 8001a9a:	482a      	ldr	r0, [pc, #168]	@ (8001b44 <ICM42688P_GPIO_SPI_Initialization+0x100>)
 8001a9c:	f00d fac6 	bl	800f02c <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001aa4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001aa8:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001aaa:	2307      	movs	r3, #7
 8001aac:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001aae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001ab4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001aba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001ac0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ac4:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001ace:	230a      	movs	r3, #10
 8001ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM42688P_SPI_CHANNEL, &SPI_InitStruct);
 8001ad2:	f107 0318 	add.w	r3, r7, #24
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	481b      	ldr	r0, [pc, #108]	@ (8001b48 <ICM42688P_GPIO_SPI_Initialization+0x104>)
 8001ada:	f00e f9f9 	bl	800fed0 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM42688P_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4819      	ldr	r0, [pc, #100]	@ (8001b48 <ICM42688P_GPIO_SPI_Initialization+0x104>)
 8001ae2:	f7ff feed 	bl	80018c0 <LL_SPI_SetStandard>
	 */

	/* Chip Select Pin */
//	LL_GPIO_SetOutputPin(ICM42688P_SPI_CS_PORT, ICM42688P_SPI_CS_PIN); // Start with CS high

	LL_GPIO_ResetOutputPin(ICM42688P_SPI_CS_PORT, ICM42688P_SPI_CS_PIN); // Start with CS high
 8001ae6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aea:	4818      	ldr	r0, [pc, #96]	@ (8001b4c <ICM42688P_GPIO_SPI_Initialization+0x108>)
 8001aec:	f7ff ff9b 	bl	8001a26 <LL_GPIO_ResetOutputPin>

	GPIO_InitStruct.Pin = ICM42688P_SPI_CS_PIN;
 8001af0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001af4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001af6:	2301      	movs	r3, #1
 8001af8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688P_SPI_CS_PORT, &GPIO_InitStruct);
 8001b06:	463b      	mov	r3, r7
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4810      	ldr	r0, [pc, #64]	@ (8001b4c <ICM42688P_GPIO_SPI_Initialization+0x108>)
 8001b0c:	f00d fa8e 	bl	800f02c <LL_GPIO_Init>

	/* Interrupt Pin */
	GPIO_InitStruct.Pin = ICM42688P_INT1_PIN;
 8001b10:	2310      	movs	r3, #16
 8001b12:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688P_INT1_PORT, &GPIO_InitStruct);
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480b      	ldr	r0, [pc, #44]	@ (8001b50 <ICM42688P_GPIO_SPI_Initialization+0x10c>)
 8001b22:	f00d fa83 	bl	800f02c <LL_GPIO_Init>

	LL_SPI_Enable(ICM42688P_SPI_CHANNEL);
 8001b26:	4808      	ldr	r0, [pc, #32]	@ (8001b48 <ICM42688P_GPIO_SPI_Initialization+0x104>)
 8001b28:	f7ff feba 	bl	80018a0 <LL_SPI_Enable>

	CHIP_DESELECT(ICM42688P);
 8001b2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b30:	4806      	ldr	r0, [pc, #24]	@ (8001b4c <ICM42688P_GPIO_SPI_Initialization+0x108>)
 8001b32:	f7ff ff6a 	bl	8001a0a <LL_GPIO_SetOutputPin>

	printf("SPI3 initialized for STM32H7\n");
 8001b36:	4807      	ldr	r0, [pc, #28]	@ (8001b54 <ICM42688P_GPIO_SPI_Initialization+0x110>)
 8001b38:	f00f ff60 	bl	80119fc <puts>
}
 8001b3c:	bf00      	nop
 8001b3e:	3740      	adds	r7, #64	@ 0x40
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	58020800 	.word	0x58020800
 8001b48:	40003c00 	.word	0x40003c00
 8001b4c:	58020000 	.word	0x58020000
 8001b50:	58021000 	.word	0x58021000
 8001b54:	08016580 	.word	0x08016580

08001b58 <ICM42688P_SelectBank>:

// ====== BANK SELECT ======
void ICM42688P_SelectBank(uint8_t bank)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
	printf("Selecting bank %d\n", bank);
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	4619      	mov	r1, r3
 8001b66:	4807      	ldr	r0, [pc, #28]	@ (8001b84 <ICM42688P_SelectBank+0x2c>)
 8001b68:	f00f fed8 	bl	801191c <iprintf>
	ICM42688P_WriteByte(ICM42688P_REG_BANK_SEL, bank);
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	2076      	movs	r0, #118	@ 0x76
 8001b72:	f000 f87d 	bl	8001c70 <ICM42688P_WriteByte>
	HAL_Delay(1); // Small delay after bank selection
 8001b76:	2001      	movs	r0, #1
 8001b78:	f003 fc84 	bl	8005484 <HAL_Delay>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	080165a0 	.word	0x080165a0

08001b88 <SPI3_SendByte>:

uint8_t SPI3_SendByte(uint8_t data)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXP(ICM42688P_SPI_CHANNEL)==RESET);
 8001b92:	bf00      	nop
 8001b94:	480c      	ldr	r0, [pc, #48]	@ (8001bc8 <SPI3_SendByte+0x40>)
 8001b96:	f7ff feb9 	bl	800190c <LL_SPI_IsActiveFlag_TXP>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f9      	beq.n	8001b94 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(ICM42688P_SPI_CHANNEL, data);
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4808      	ldr	r0, [pc, #32]	@ (8001bc8 <SPI3_SendByte+0x40>)
 8001ba6:	f7ff fed2 	bl	800194e <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXP(ICM42688P_SPI_CHANNEL)==RESET);
 8001baa:	bf00      	nop
 8001bac:	4806      	ldr	r0, [pc, #24]	@ (8001bc8 <SPI3_SendByte+0x40>)
 8001bae:	f7ff fe9a 	bl	80018e6 <LL_SPI_IsActiveFlag_RXP>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f9      	beq.n	8001bac <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM42688P_SPI_CHANNEL);
 8001bb8:	4803      	ldr	r0, [pc, #12]	@ (8001bc8 <SPI3_SendByte+0x40>)
 8001bba:	f7ff feba 	bl	8001932 <LL_SPI_ReceiveData8>
 8001bbe:	4603      	mov	r3, r0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40003c00 	.word	0x40003c00

08001bcc <ICM42688P_ReadByte>:
//	ICM42688P_WriteByte(ICM42688P_REG_BANK_SEL, bank);
//	HAL_Delay(1); // Small delay after bank selection
//}

uint8_t ICM42688P_ReadByte(uint8_t reg_addr)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM42688P);
 8001bd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bda:	480c      	ldr	r0, [pc, #48]	@ (8001c0c <ICM42688P_ReadByte+0x40>)
 8001bdc:	f7ff ff23 	bl	8001a26 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ffcd 	bl	8001b88 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY to read data
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff ffca 	bl	8001b88 <SPI3_SendByte>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM42688P);
 8001bf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bfc:	4803      	ldr	r0, [pc, #12]	@ (8001c0c <ICM42688P_ReadByte+0x40>)
 8001bfe:	f7ff ff04 	bl	8001a0a <LL_GPIO_SetOutputPin>

//	printf("0x%02x\n", val);
	return val;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	58020000 	.word	0x58020000

08001c10 <ICM42688P_ReadBytes>:

void ICM42688P_ReadBytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	603a      	str	r2, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM42688P);
 8001c24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c28:	4810      	ldr	r0, [pc, #64]	@ (8001c6c <ICM42688P_ReadBytes+0x5c>)
 8001c2a:	f7ff fefc 	bl	8001a26 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ffa6 	bl	8001b88 <SPI3_SendByte>
	while(i < len)
 8001c3c:	e009      	b.n	8001c52 <ICM42688P_ReadBytes+0x42>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY to read data
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	60fa      	str	r2, [r7, #12]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	18d4      	adds	r4, r2, r3
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff ff9d 	bl	8001b88 <SPI3_SendByte>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8001c52:	79bb      	ldrb	r3, [r7, #6]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d3f1      	bcc.n	8001c3e <ICM42688P_ReadBytes+0x2e>
	}
	CHIP_DESELECT(ICM42688P);
 8001c5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c5e:	4803      	ldr	r0, [pc, #12]	@ (8001c6c <ICM42688P_ReadBytes+0x5c>)
 8001c60:	f7ff fed3 	bl	8001a0a <LL_GPIO_SetOutputPin>
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd90      	pop	{r4, r7, pc}
 8001c6c:	58020000 	.word	0x58020000

08001c70 <ICM42688P_WriteByte>:

void ICM42688P_WriteByte(uint8_t reg_addr, uint8_t val)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	460a      	mov	r2, r1
 8001c7a:	71fb      	strb	r3, [r7, #7]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM42688P);
 8001c80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c84:	480b      	ldr	r0, [pc, #44]	@ (8001cb4 <ICM42688P_WriteByte+0x44>)
 8001c86:	f7ff fece 	bl	8001a26 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ff78 	bl	8001b88 <SPI3_SendByte>
	SPI3_SendByte(val); //Send Data to write
 8001c98:	79bb      	ldrb	r3, [r7, #6]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ff74 	bl	8001b88 <SPI3_SendByte>
	CHIP_DESELECT(ICM42688P);
 8001ca0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ca4:	4803      	ldr	r0, [pc, #12]	@ (8001cb4 <ICM42688P_WriteByte+0x44>)
 8001ca6:	f7ff feb0 	bl	8001a0a <LL_GPIO_SetOutputPin>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	58020000 	.word	0x58020000

08001cb8 <ICM42688P_Initialization>:
	}
	CHIP_DESELECT(ICM42688P);
}

int ICM42688P_Initialization(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
	uint8_t who_am_i = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001cc2:	f107 0308 	add.w	r3, r7, #8
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001ccc:	463b      	mov	r3, r7
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	809a      	strh	r2, [r3, #4]

	ICM42688P_GPIO_SPI_Initialization();
 8001cd4:	f7ff feb6 	bl	8001a44 <ICM42688P_GPIO_SPI_Initialization>

	printf("Checking ICM42688P...\n");
 8001cd8:	483f      	ldr	r0, [pc, #252]	@ (8001dd8 <ICM42688P_Initialization+0x120>)
 8001cda:	f00f fe8f 	bl	80119fc <puts>

	// check WHO_AM_I (0x75)
	who_am_i = ICM42688P_ReadByte(ICM42688P_WHO_AM_I);
 8001cde:	2075      	movs	r0, #117	@ 0x75
 8001ce0:	f7ff ff74 	bl	8001bcc <ICM42688P_ReadByte>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x47
	if(who_am_i == 0x47)
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	2b47      	cmp	r3, #71	@ 0x47
 8001cec:	d105      	bne.n	8001cfa <ICM42688P_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	483a      	ldr	r0, [pc, #232]	@ (8001ddc <ICM42688P_Initialization+0x124>)
 8001cf4:	f00f fe12 	bl	801191c <iprintf>
 8001cf8:	e012      	b.n	8001d20 <ICM42688P_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x47)
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	2b47      	cmp	r3, #71	@ 0x47
 8001cfe:	d00f      	beq.n	8001d20 <ICM42688P_Initialization+0x68>
	{
		who_am_i = ICM42688P_ReadByte(ICM42688P_WHO_AM_I); // check again WHO_AM_I (0x75)
 8001d00:	2075      	movs	r0, #117	@ 0x75
 8001d02:	f7ff ff63 	bl	8001bcc <ICM42688P_ReadByte>
 8001d06:	4603      	mov	r3, r0
 8001d08:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x47){
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	2b47      	cmp	r3, #71	@ 0x47
 8001d0e:	d007      	beq.n	8001d20 <ICM42688P_Initialization+0x68>
			printf( "ICM42688P Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x47);
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	2247      	movs	r2, #71	@ 0x47
 8001d14:	4619      	mov	r1, r3
 8001d16:	4832      	ldr	r0, [pc, #200]	@ (8001de0 <ICM42688P_Initialization+0x128>)
 8001d18:	f00f fe00 	bl	801191c <iprintf>
			return 1; //ERROR
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e056      	b.n	8001dce <ICM42688P_Initialization+0x116>
		}
	}

	// Reset ICM42688P
	// DEVICE_CONFIG 0x11
	ICM42688P_WriteByte(ICM42688P_DEVICE_CONFIG, 0x01); // Software reset
 8001d20:	2101      	movs	r1, #1
 8001d22:	2011      	movs	r0, #17
 8001d24:	f7ff ffa4 	bl	8001c70 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001d28:	2032      	movs	r0, #50	@ 0x32
 8001d2a:	f003 fbab 	bl	8005484 <HAL_Delay>

	// Wait for reset to complete and switch to user bank 0
	ICM42688P_SelectBank(ICM42688P_BANK_SEL_0); // Select user bank 0
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff ff12 	bl	8001b58 <ICM42688P_SelectBank>
	HAL_Delay(10);
 8001d34:	200a      	movs	r0, #10
 8001d36:	f003 fba5 	bl	8005484 <HAL_Delay>

	// PWR_MGMT0 0x4E - Main power management
	// Enable Gyro and Accel in Low Noise mode, keep temperature sensor enabled
	ICM42688P_WriteByte(ICM42688P_PWR_MGMT0, ICM42688P_PWR_MGMT0_GYRO_MODE_LN | ICM42688P_PWR_MGMT0_ACCEL_MODE_LN);
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	204e      	movs	r0, #78	@ 0x4e
 8001d3e:	f7ff ff97 	bl	8001c70 <ICM42688P_WriteByte>
	// 온도센서 끄면 자이로 값 이상하게 출력됨 (same as original comment)
	HAL_Delay(50);
 8001d42:	2032      	movs	r0, #50	@ 0x32
 8001d44:	f003 fb9e 	bl	8005484 <HAL_Delay>

	// GYRO_CONFIG0 0x4F - Gyro configuration
	// Set Gyro to ±2000dps and 1kHz ODR (equivalent to original 2000dps setting)
	ICM42688P_WriteByte(ICM42688P_GYRO_CONFIG0, (ICM42688P_GYRO_FS_SEL_2000DPS << 5) | ICM42688P_ODR_1KHZ);
 8001d48:	2106      	movs	r1, #6
 8001d4a:	204f      	movs	r0, #79	@ 0x4f
 8001d4c:	f7ff ff90 	bl	8001c70 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001d50:	2032      	movs	r0, #50	@ 0x32
 8001d52:	f003 fb97 	bl	8005484 <HAL_Delay>

	// ACCEL_CONFIG0 0x50 - Accelerometer configuration
	// Set Accel to ±16g and 1kHz ODR (equivalent to original 16g setting)
	ICM42688P_WriteByte(ICM42688P_ACCEL_CONFIG0, (ICM42688P_ACCEL_FS_SEL_16G << 5) | ICM42688P_ODR_1KHZ);
 8001d56:	2106      	movs	r1, #6
 8001d58:	2050      	movs	r0, #80	@ 0x50
 8001d5a:	f7ff ff89 	bl	8001c70 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001d5e:	2032      	movs	r0, #50	@ 0x32
 8001d60:	f003 fb90 	bl	8005484 <HAL_Delay>

	// GYRO_CONFIG1 0x51 - Gyro filter configuration
	// Enable gyro DLPF with low-pass filter (equivalent to original 20Hz filter)
	ICM42688P_WriteByte(ICM42688P_GYRO_CONFIG1, 0x16); // DLPF enabled, ~53Hz bandwidth at 1kHz ODR
 8001d64:	2116      	movs	r1, #22
 8001d66:	2051      	movs	r0, #81	@ 0x51
 8001d68:	f7ff ff82 	bl	8001c70 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001d6c:	2032      	movs	r0, #50	@ 0x32
 8001d6e:	f003 fb89 	bl	8005484 <HAL_Delay>

	// ACCEL_CONFIG1 0x53 - Accel filter configuration
	// Enable accel DLPF with low-pass filter (equivalent to original 44.8Hz filter)
	ICM42688P_WriteByte(ICM42688P_ACCEL_CONFIG1, 0x15); // DLPF enabled, ~53Hz bandwidth at 1kHz ODR
 8001d72:	2115      	movs	r1, #21
 8001d74:	2053      	movs	r0, #83	@ 0x53
 8001d76:	f7ff ff7b 	bl	8001c70 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001d7a:	2032      	movs	r0, #50	@ 0x32
 8001d7c:	f003 fb82 	bl	8005484 <HAL_Delay>

	// TMST_CONFIG 0x54 - Timestamp configuration (optional)
	ICM42688P_WriteByte(ICM42688P_TMST_CONFIG, 0x23); // Enable timestamp, 1kHz resolution
 8001d80:	2123      	movs	r1, #35	@ 0x23
 8001d82:	2054      	movs	r0, #84	@ 0x54
 8001d84:	f7ff ff74 	bl	8001c70 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001d88:	2032      	movs	r0, #50	@ 0x32
 8001d8a:	f003 fb7b 	bl	8005484 <HAL_Delay>

	// FIFO_CONFIG 0x16 - FIFO configuration (disable for this setup, equivalent to original)
	ICM42688P_WriteByte(ICM42688P_FIFO_CONFIG, 0x00); // FIFO bypass mode
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2016      	movs	r0, #22
 8001d92:	f7ff ff6d 	bl	8001c70 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001d96:	2032      	movs	r0, #50	@ 0x32
 8001d98:	f003 fb74 	bl	8005484 <HAL_Delay>

	// INT_CONFIG 0x14 - Interrupt configuration
	ICM42688P_WriteByte(ICM42688P_INT_CONFIG, 0x12); // INT1 push-pull, active high, pulse mode
 8001d9c:	2112      	movs	r1, #18
 8001d9e:	2014      	movs	r0, #20
 8001da0:	f7ff ff66 	bl	8001c70 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001da4:	2032      	movs	r0, #50	@ 0x32
 8001da6:	f003 fb6d 	bl	8005484 <HAL_Delay>

	// INT_CONFIG1 0x64 - Additional interrupt configuration
	ICM42688P_WriteByte(ICM42688P_INT_CONFIG1, 0x00); // Default settings
 8001daa:	2100      	movs	r1, #0
 8001dac:	2064      	movs	r0, #100	@ 0x64
 8001dae:	f7ff ff5f 	bl	8001c70 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001db2:	2032      	movs	r0, #50	@ 0x32
 8001db4:	f003 fb66 	bl	8005484 <HAL_Delay>

	// INT_SOURCE0 0x65 - Enable data ready interrupt (equivalent to original INT_ENABLE)
	ICM42688P_WriteByte(ICM42688P_INT_SOURCE0, 0x18); // Enable UI data ready interrupt for INT1
 8001db8:	2118      	movs	r1, #24
 8001dba:	2065      	movs	r0, #101	@ 0x65
 8001dbc:	f7ff ff58 	bl	8001c70 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001dc0:	2032      	movs	r0, #50	@ 0x32
 8001dc2:	f003 fb5f 	bl	8005484 <HAL_Delay>

	printf("ICM42688P initialized successfully!\n");
 8001dc6:	4807      	ldr	r0, [pc, #28]	@ (8001de4 <ICM42688P_Initialization+0x12c>)
 8001dc8:	f00f fe18 	bl	80119fc <puts>

	return 0; //OK
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	080165b4 	.word	0x080165b4
 8001ddc:	080165cc 	.word	0x080165cc
 8001de0:	080165f0 	.word	0x080165f0
 8001de4:	0801661c 	.word	0x0801661c

08001de8 <ICM42688P_Get3AxisGyroRawData>:
	gyro[1] = ((data[8] << 8) | data[9]);
	gyro[2] = ((data[10] << 8) | data[11]);
}

void ICM42688P_Get3AxisGyroRawData(short* gyro)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM42688P_ReadBytes(ICM42688P_GYRO_DATA_X1, 6, data);
 8001df0:	f107 0308 	add.w	r3, r7, #8
 8001df4:	461a      	mov	r2, r3
 8001df6:	2106      	movs	r1, #6
 8001df8:	2025      	movs	r0, #37	@ 0x25
 8001dfa:	f7ff ff09 	bl	8001c10 <ICM42688P_ReadBytes>

	gyro[0] = ((data[0] << 8) | data[1]);
 8001dfe:	7a3b      	ldrb	r3, [r7, #8]
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	b21a      	sxth	r2, r3
 8001e06:	7a7b      	ldrb	r3, [r7, #9]
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	b21a      	sxth	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 8001e12:	7abb      	ldrb	r3, [r7, #10]
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	b219      	sxth	r1, r3
 8001e1a:	7afb      	ldrb	r3, [r7, #11]
 8001e1c:	b21a      	sxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3302      	adds	r3, #2
 8001e22:	430a      	orrs	r2, r1
 8001e24:	b212      	sxth	r2, r2
 8001e26:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 8001e28:	7b3b      	ldrb	r3, [r7, #12]
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	b219      	sxth	r1, r3
 8001e30:	7b7b      	ldrb	r3, [r7, #13]
 8001e32:	b21a      	sxth	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3304      	adds	r3, #4
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	b212      	sxth	r2, r2
 8001e3c:	801a      	strh	r2, [r3, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <ICM42688P_Get3AxisAccRawData>:

void ICM42688P_Get3AxisAccRawData(short* gyro)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM42688P_ReadBytes(ICM42688P_ACCEL_DATA_X1, 6, data);
 8001e4e:	f107 0308 	add.w	r3, r7, #8
 8001e52:	461a      	mov	r2, r3
 8001e54:	2106      	movs	r1, #6
 8001e56:	201f      	movs	r0, #31
 8001e58:	f7ff feda 	bl	8001c10 <ICM42688P_ReadBytes>

	gyro[0] = ((data[0] << 8) | data[1]);
 8001e5c:	7a3b      	ldrb	r3, [r7, #8]
 8001e5e:	b21b      	sxth	r3, r3
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	b21a      	sxth	r2, r3
 8001e64:	7a7b      	ldrb	r3, [r7, #9]
 8001e66:	b21b      	sxth	r3, r3
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	b21a      	sxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 8001e70:	7abb      	ldrb	r3, [r7, #10]
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	b219      	sxth	r1, r3
 8001e78:	7afb      	ldrb	r3, [r7, #11]
 8001e7a:	b21a      	sxth	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3302      	adds	r3, #2
 8001e80:	430a      	orrs	r2, r1
 8001e82:	b212      	sxth	r2, r2
 8001e84:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 8001e86:	7b3b      	ldrb	r3, [r7, #12]
 8001e88:	b21b      	sxth	r3, r3
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	b219      	sxth	r1, r3
 8001e8e:	7b7b      	ldrb	r3, [r7, #13]
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3304      	adds	r3, #4
 8001e96:	430a      	orrs	r2, r1
 8001e98:	b212      	sxth	r2, r2
 8001e9a:	801a      	strh	r2, [r3, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <ICM42688P_DataReady>:

int ICM42688P_DataReady(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM42688P_INT1_PORT, ICM42688P_INT1_PIN);
 8001ea8:	2110      	movs	r1, #16
 8001eaa:	4803      	ldr	r0, [pc, #12]	@ (8001eb8 <ICM42688P_DataReady+0x14>)
 8001eac:	f7ff fd98 	bl	80019e0 <LL_GPIO_IsInputPinSet>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	58021000 	.word	0x58021000

08001ebc <WS2812_SetColor>:
    if (brightness < 0.0) brightness = 0.0;
    if (brightness > 1.0) brightness = 1.0;
    global_brightness = brightness;
}

void WS2812_SetColor(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	4608      	mov	r0, r1
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	461a      	mov	r2, r3
 8001eca:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ece:	4603      	mov	r3, r0
 8001ed0:	72fb      	strb	r3, [r7, #11]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	72bb      	strb	r3, [r7, #10]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	727b      	strb	r3, [r7, #9]
    if (led_index < LED_COUNT) {
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d165      	bne.n	8001fac <WS2812_SetColor+0xf0>
        // Clamp brightness between 0.0 and 1.0
        if (brightness < 0.0) brightness = 0.0;
 8001ee0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ee4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eec:	d502      	bpl.n	8001ef4 <WS2812_SetColor+0x38>
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
        if (brightness > 1.0) brightness = 1.0;
 8001ef4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ef8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	dd02      	ble.n	8001f0c <WS2812_SetColor+0x50>
 8001f06:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f0a:	607b      	str	r3, [r7, #4]
        // Apply brightness scaling (combine with global brightness)
        float total_brightness = brightness * global_brightness;
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <WS2812_SetColor+0xfc>)
 8001f0e:	edd3 7a00 	vldr	s15, [r3]
 8001f12:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1a:	edc7 7a05 	vstr	s15, [r7, #20]
        led_data[led_index][0] = (uint8_t)(green * total_brightness); // GRB order
 8001f1e:	7abb      	ldrb	r3, [r7, #10]
 8001f20:	ee07 3a90 	vmov	s15, r3
 8001f24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f28:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f34:	edc7 7a00 	vstr	s15, [r7]
 8001f38:	783b      	ldrb	r3, [r7, #0]
 8001f3a:	b2d8      	uxtb	r0, r3
 8001f3c:	491f      	ldr	r1, [pc, #124]	@ (8001fbc <WS2812_SetColor+0x100>)
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	4602      	mov	r2, r0
 8001f4a:	701a      	strb	r2, [r3, #0]
        led_data[led_index][1] = (uint8_t)(red * total_brightness);
 8001f4c:	7afb      	ldrb	r3, [r7, #11]
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f56:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f62:	edc7 7a00 	vstr	s15, [r7]
 8001f66:	783b      	ldrb	r3, [r7, #0]
 8001f68:	b2d8      	uxtb	r0, r3
 8001f6a:	4914      	ldr	r1, [pc, #80]	@ (8001fbc <WS2812_SetColor+0x100>)
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	3301      	adds	r3, #1
 8001f78:	4602      	mov	r2, r0
 8001f7a:	701a      	strb	r2, [r3, #0]
        led_data[led_index][2] = (uint8_t)(blue * total_brightness);
 8001f7c:	7a7b      	ldrb	r3, [r7, #9]
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f86:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f92:	edc7 7a00 	vstr	s15, [r7]
 8001f96:	783b      	ldrb	r3, [r7, #0]
 8001f98:	b2d8      	uxtb	r0, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	@ (8001fbc <WS2812_SetColor+0x100>)
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	4602      	mov	r2, r0
 8001faa:	701a      	strb	r2, [r3, #0]
//        printf("WS2812 SetColor: LED %lu, R=%d, G=%d, B=%d, Brightness=%.2f\n",
//               led_index, led_data[led_index][1], led_data[led_index][0], led_data[led_index][2], brightness);
    }
}
 8001fac:	bf00      	nop
 8001fae:	371c      	adds	r7, #28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	24000000 	.word	0x24000000
 8001fbc:	24000360 	.word	0x24000360

08001fc0 <WS2812_Send>:

void WS2812_Send(void) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
    uint32_t buffer_index = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]

    // Clear buffer to ensure no stale data
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	e007      	b.n	8001fe0 <WS2812_Send+0x20>
        pwm_buffer[i] = DUTY_RESET;
 8001fd0:	4a34      	ldr	r2, [pc, #208]	@ (80020a4 <WS2812_Send+0xe4>)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b49      	cmp	r3, #73	@ 0x49
 8001fe4:	d9f4      	bls.n	8001fd0 <WS2812_Send+0x10>
    }

    // Convert LED data to PWM duty cycles
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	e039      	b.n	8002060 <WS2812_Send+0xa0>
        for (uint32_t color = 0; color < 3; color++) { // GRB
 8001fec:	2300      	movs	r3, #0
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	e030      	b.n	8002054 <WS2812_Send+0x94>
            for (int8_t bit = 7; bit >= 0; bit--) {
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	71fb      	strb	r3, [r7, #7]
 8001ff6:	e026      	b.n	8002046 <WS2812_Send+0x86>
                if (led_data[led][color] & (1 << bit)) {
 8001ff8:	492b      	ldr	r1, [pc, #172]	@ (80020a8 <WS2812_Send+0xe8>)
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	18ca      	adds	r2, r1, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4413      	add	r3, r2
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	fa42 f303 	asr.w	r3, r2, r3
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d007      	beq.n	800202c <WS2812_Send+0x6c>
                    pwm_buffer[buffer_index++] = DUTY_1; // Logical 1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	617a      	str	r2, [r7, #20]
 8002022:	4a20      	ldr	r2, [pc, #128]	@ (80020a4 <WS2812_Send+0xe4>)
 8002024:	21a0      	movs	r1, #160	@ 0xa0
 8002026:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800202a:	e006      	b.n	800203a <WS2812_Send+0x7a>
                } else {
                    pwm_buffer[buffer_index++] = DUTY_0; // Logical 0
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	617a      	str	r2, [r7, #20]
 8002032:	4a1c      	ldr	r2, [pc, #112]	@ (80020a4 <WS2812_Send+0xe4>)
 8002034:	2150      	movs	r1, #80	@ 0x50
 8002036:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            for (int8_t bit = 7; bit >= 0; bit--) {
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	71fb      	strb	r3, [r7, #7]
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	2b00      	cmp	r3, #0
 800204c:	dad4      	bge.n	8001ff8 <WS2812_Send+0x38>
        for (uint32_t color = 0; color < 3; color++) { // GRB
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	3301      	adds	r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d9cb      	bls.n	8001ff2 <WS2812_Send+0x32>
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3301      	adds	r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0c2      	beq.n	8001fec <WS2812_Send+0x2c>
            }
        }
    }

    // Stop previous DMA and timer
    HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 8002066:	2104      	movs	r1, #4
 8002068:	4810      	ldr	r0, [pc, #64]	@ (80020ac <WS2812_Send+0xec>)
 800206a:	f00b fe39 	bl	800dce0 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_Base_Stop(&WS2812_TIMER);
 800206e:	480f      	ldr	r0, [pc, #60]	@ (80020ac <WS2812_Send+0xec>)
 8002070:	f00b fa5e 	bl	800d530 <HAL_TIM_Base_Stop>

    // Ensure DMA interrupt is enabled
    HAL_NVIC_SetPriority(WS2812_DMA_IRQn, 0, 0);
 8002074:	2200      	movs	r2, #0
 8002076:	2100      	movs	r1, #0
 8002078:	200f      	movs	r0, #15
 800207a:	f003 fb02 	bl	8005682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WS2812_DMA_IRQn);
 800207e:	200f      	movs	r0, #15
 8002080:	f003 fb19 	bl	80056b6 <HAL_NVIC_EnableIRQ>

    // Reset flag and start new DMA transfer
    data_sent_flag = 0;
 8002084:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <WS2812_Send+0xf0>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start(&WS2812_TIMER);
 800208a:	4808      	ldr	r0, [pc, #32]	@ (80020ac <WS2812_Send+0xec>)
 800208c:	f00b f9d2 	bl	800d434 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL, pwm_buffer, BUFFER_SIZE);
 8002090:	234a      	movs	r3, #74	@ 0x4a
 8002092:	4a04      	ldr	r2, [pc, #16]	@ (80020a4 <WS2812_Send+0xe4>)
 8002094:	2104      	movs	r1, #4
 8002096:	4805      	ldr	r0, [pc, #20]	@ (80020ac <WS2812_Send+0xec>)
 8002098:	f00b fbee 	bl	800d878 <HAL_TIM_PWM_Start_DMA>
//    printf("WS2812 Send Started\n");
}
 800209c:	bf00      	nop
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	24000238 	.word	0x24000238
 80020a8:	24000360 	.word	0x24000360
 80020ac:	2400061c 	.word	0x2400061c
 80020b0:	24000234 	.word	0x24000234

080020b4 <main_led>:

void main_led(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80020c6:	4603      	mov	r3, r0
 80020c8:	72fb      	strb	r3, [r7, #11]
 80020ca:	460b      	mov	r3, r1
 80020cc:	72bb      	strb	r3, [r7, #10]
 80020ce:	4613      	mov	r3, r2
 80020d0:	727b      	strb	r3, [r7, #9]
    WS2812_SetColor(led_index, red, green, blue, brightness);
 80020d2:	7a7b      	ldrb	r3, [r7, #9]
 80020d4:	7aba      	ldrb	r2, [r7, #10]
 80020d6:	7af9      	ldrb	r1, [r7, #11]
 80020d8:	ed97 0a01 	vldr	s0, [r7, #4]
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f7ff feed 	bl	8001ebc <WS2812_SetColor>
    WS2812_Send();
 80020e2:	f7ff ff6d 	bl	8001fc0 <WS2812_Send>
    led_active = true;
 80020e6:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <main_led+0x50>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
    led_start_time = HAL_GetTick();
 80020ec:	f003 f9be 	bl	800546c <HAL_GetTick>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4a05      	ldr	r2, [pc, #20]	@ (8002108 <main_led+0x54>)
 80020f4:	6013      	str	r3, [r2, #0]
    led_on_time = 100; // Default duration (100ms)
 80020f6:	4b05      	ldr	r3, [pc, #20]	@ (800210c <main_led+0x58>)
 80020f8:	2264      	movs	r2, #100	@ 0x64
 80020fa:	601a      	str	r2, [r3, #0]
//    printf("main_led: LED %lu set, duration=%lu ms\n", led_index, led_on_time);
}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	2400036c 	.word	0x2400036c
 8002108:	24000368 	.word	0x24000368
 800210c:	24000364 	.word	0x24000364

08002110 <HAL_TIM_PWM_PulseFinishedCallback>:
//            printf("WS2812 LED turned off\n");
        }
    }
}

__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a08      	ldr	r2, [pc, #32]	@ (8002140 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d109      	bne.n	8002136 <HAL_TIM_PWM_PulseFinishedCallback+0x26>
        HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 8002122:	2104      	movs	r1, #4
 8002124:	4807      	ldr	r0, [pc, #28]	@ (8002144 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8002126:	f00b fddb 	bl	800dce0 <HAL_TIM_PWM_Stop_DMA>
        HAL_TIM_Base_Stop(&WS2812_TIMER);
 800212a:	4806      	ldr	r0, [pc, #24]	@ (8002144 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 800212c:	f00b fa00 	bl	800d530 <HAL_TIM_Base_Stop>
        data_sent_flag = 1;
 8002130:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
//        printf("WS2812 DMA Transfer Complete\n");
    }
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40000400 	.word	0x40000400
 8002144:	2400061c 	.word	0x2400061c
 8002148:	24000234 	.word	0x24000234

0800214c <__NVIC_GetPriorityGrouping>:
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002150:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <__NVIC_GetPriorityGrouping+0x18>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	f003 0307 	and.w	r3, r3, #7
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_EnableIRQ>:
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002176:	2b00      	cmp	r3, #0
 8002178:	db0b      	blt.n	8002192 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	f003 021f 	and.w	r2, r3, #31
 8002180:	4907      	ldr	r1, [pc, #28]	@ (80021a0 <__NVIC_EnableIRQ+0x38>)
 8002182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	2001      	movs	r0, #1
 800218a:	fa00 f202 	lsl.w	r2, r0, r2
 800218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000e100 	.word	0xe000e100

080021a4 <__NVIC_SetPriority>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	db0a      	blt.n	80021ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	490c      	ldr	r1, [pc, #48]	@ (80021f0 <__NVIC_SetPriority+0x4c>)
 80021be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c2:	0112      	lsls	r2, r2, #4
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	440b      	add	r3, r1
 80021c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80021cc:	e00a      	b.n	80021e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4908      	ldr	r1, [pc, #32]	@ (80021f4 <__NVIC_SetPriority+0x50>)
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	3b04      	subs	r3, #4
 80021dc:	0112      	lsls	r2, r2, #4
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	440b      	add	r3, r1
 80021e2:	761a      	strb	r2, [r3, #24]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000e100 	.word	0xe000e100
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <NVIC_EncodePriority>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	@ 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f1c3 0307 	rsb	r3, r3, #7
 8002212:	2b04      	cmp	r3, #4
 8002214:	bf28      	it	cs
 8002216:	2304      	movcs	r3, #4
 8002218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3304      	adds	r3, #4
 800221e:	2b06      	cmp	r3, #6
 8002220:	d902      	bls.n	8002228 <NVIC_EncodePriority+0x30>
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3b03      	subs	r3, #3
 8002226:	e000      	b.n	800222a <NVIC_EncodePriority+0x32>
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	401a      	ands	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002240:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	43d9      	mvns	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	4313      	orrs	r3, r2
}
 8002252:	4618      	mov	r0, r3
 8002254:	3724      	adds	r7, #36	@ 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002266:	4b35      	ldr	r3, [pc, #212]	@ (800233c <MX_DMA_Init+0xdc>)
 8002268:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800226c:	4a33      	ldr	r2, [pc, #204]	@ (800233c <MX_DMA_Init+0xdc>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002276:	4b31      	ldr	r3, [pc, #196]	@ (800233c <MX_DMA_Init+0xdc>)
 8002278:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002284:	2200      	movs	r2, #0
 8002286:	2100      	movs	r1, #0
 8002288:	200b      	movs	r0, #11
 800228a:	f003 f9fa 	bl	8005682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800228e:	200b      	movs	r0, #11
 8002290:	f003 fa11 	bl	80056b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002294:	2200      	movs	r2, #0
 8002296:	2100      	movs	r1, #0
 8002298:	200c      	movs	r0, #12
 800229a:	f003 f9f2 	bl	8005682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800229e:	200c      	movs	r0, #12
 80022a0:	f003 fa09 	bl	80056b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2100      	movs	r1, #0
 80022a8:	200d      	movs	r0, #13
 80022aa:	f003 f9ea 	bl	8005682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80022ae:	200d      	movs	r0, #13
 80022b0:	f003 fa01 	bl	80056b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80022b4:	f7ff ff4a 	bl	800214c <__NVIC_GetPriorityGrouping>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff9a 	bl	80021f8 <NVIC_EncodePriority>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4619      	mov	r1, r3
 80022c8:	200e      	movs	r0, #14
 80022ca:	f7ff ff6b 	bl	80021a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80022ce:	200e      	movs	r0, #14
 80022d0:	f7ff ff4a 	bl	8002168 <__NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80022d4:	f7ff ff3a 	bl	800214c <__NVIC_GetPriorityGrouping>
 80022d8:	4603      	mov	r3, r0
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff8a 	bl	80021f8 <NVIC_EncodePriority>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4619      	mov	r1, r3
 80022e8:	200f      	movs	r0, #15
 80022ea:	f7ff ff5b 	bl	80021a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80022ee:	200f      	movs	r0, #15
 80022f0:	f7ff ff3a 	bl	8002168 <__NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80022f4:	f7ff ff2a 	bl	800214c <__NVIC_GetPriorityGrouping>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ff7a 	bl	80021f8 <NVIC_EncodePriority>
 8002304:	4603      	mov	r3, r0
 8002306:	4619      	mov	r1, r3
 8002308:	2010      	movs	r0, #16
 800230a:	f7ff ff4b 	bl	80021a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800230e:	2010      	movs	r0, #16
 8002310:	f7ff ff2a 	bl	8002168 <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002314:	f7ff ff1a 	bl	800214c <__NVIC_GetPriorityGrouping>
 8002318:	4603      	mov	r3, r0
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ff6a 	bl	80021f8 <NVIC_EncodePriority>
 8002324:	4603      	mov	r3, r0
 8002326:	4619      	mov	r1, r3
 8002328:	2011      	movs	r0, #17
 800232a:	f7ff ff3b 	bl	80021a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800232e:	2011      	movs	r0, #17
 8002330:	f7ff ff1a 	bl	8002168 <__NVIC_EnableIRQ>

}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	58024400 	.word	0x58024400

08002340 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08c      	sub	sp, #48	@ 0x30
 8002344:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002346:	f107 031c 	add.w	r3, r7, #28
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	60da      	str	r2, [r3, #12]
 8002354:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002356:	4b50      	ldr	r3, [pc, #320]	@ (8002498 <MX_GPIO_Init+0x158>)
 8002358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235c:	4a4e      	ldr	r2, [pc, #312]	@ (8002498 <MX_GPIO_Init+0x158>)
 800235e:	f043 0310 	orr.w	r3, r3, #16
 8002362:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002366:	4b4c      	ldr	r3, [pc, #304]	@ (8002498 <MX_GPIO_Init+0x158>)
 8002368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002374:	4b48      	ldr	r3, [pc, #288]	@ (8002498 <MX_GPIO_Init+0x158>)
 8002376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800237a:	4a47      	ldr	r2, [pc, #284]	@ (8002498 <MX_GPIO_Init+0x158>)
 800237c:	f043 0304 	orr.w	r3, r3, #4
 8002380:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002384:	4b44      	ldr	r3, [pc, #272]	@ (8002498 <MX_GPIO_Init+0x158>)
 8002386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002392:	4b41      	ldr	r3, [pc, #260]	@ (8002498 <MX_GPIO_Init+0x158>)
 8002394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002398:	4a3f      	ldr	r2, [pc, #252]	@ (8002498 <MX_GPIO_Init+0x158>)
 800239a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800239e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002498 <MX_GPIO_Init+0x158>)
 80023a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b0:	4b39      	ldr	r3, [pc, #228]	@ (8002498 <MX_GPIO_Init+0x158>)
 80023b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b6:	4a38      	ldr	r2, [pc, #224]	@ (8002498 <MX_GPIO_Init+0x158>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023c0:	4b35      	ldr	r3, [pc, #212]	@ (8002498 <MX_GPIO_Init+0x158>)
 80023c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ce:	4b32      	ldr	r3, [pc, #200]	@ (8002498 <MX_GPIO_Init+0x158>)
 80023d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d4:	4a30      	ldr	r2, [pc, #192]	@ (8002498 <MX_GPIO_Init+0x158>)
 80023d6:	f043 0302 	orr.w	r3, r3, #2
 80023da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023de:	4b2e      	ldr	r3, [pc, #184]	@ (8002498 <MX_GPIO_Init+0x158>)
 80023e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002498 <MX_GPIO_Init+0x158>)
 80023ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023f2:	4a29      	ldr	r2, [pc, #164]	@ (8002498 <MX_GPIO_Init+0x158>)
 80023f4:	f043 0308 	orr.w	r3, r3, #8
 80023f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023fc:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <MX_GPIO_Init+0x158>)
 80023fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_1_Pin|LED_2_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 800240a:	2200      	movs	r2, #0
 800240c:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8002410:	4822      	ldr	r0, [pc, #136]	@ (800249c <MX_GPIO_Init+0x15c>)
 8002412:	f005 feb3 	bl	800817c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800241c:	4820      	ldr	r0, [pc, #128]	@ (80024a0 <MX_GPIO_Init+0x160>)
 800241e:	f005 fead 	bl	800817c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|SPI2_CS_Pin;
 8002422:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8002426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002428:	2301      	movs	r3, #1
 800242a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002430:	2300      	movs	r3, #0
 8002432:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	4619      	mov	r1, r3
 800243a:	4818      	ldr	r0, [pc, #96]	@ (800249c <MX_GPIO_Init+0x15c>)
 800243c:	f005 fcf6 	bl	8007e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002440:	2310      	movs	r3, #16
 8002442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800244c:	f107 031c 	add.w	r3, r7, #28
 8002450:	4619      	mov	r1, r3
 8002452:	4812      	ldr	r0, [pc, #72]	@ (800249c <MX_GPIO_Init+0x15c>)
 8002454:	f005 fcea 	bl	8007e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_INT_Pin */
  GPIO_InitStruct.Pin = SPI2_INT_Pin;
 8002458:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800245c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245e:	2300      	movs	r3, #0
 8002460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI2_INT_GPIO_Port, &GPIO_InitStruct);
 8002466:	f107 031c 	add.w	r3, r7, #28
 800246a:	4619      	mov	r1, r3
 800246c:	480d      	ldr	r0, [pc, #52]	@ (80024a4 <MX_GPIO_Init+0x164>)
 800246e:	f005 fcdd 	bl	8007e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002478:	2301      	movs	r3, #1
 800247a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	2300      	movs	r3, #0
 8002482:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002484:	f107 031c 	add.w	r3, r7, #28
 8002488:	4619      	mov	r1, r3
 800248a:	4805      	ldr	r0, [pc, #20]	@ (80024a0 <MX_GPIO_Init+0x160>)
 800248c:	f005 fcce 	bl	8007e2c <HAL_GPIO_Init>

}
 8002490:	bf00      	nop
 8002492:	3730      	adds	r7, #48	@ 0x30
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	58024400 	.word	0x58024400
 800249c:	58021000 	.word	0x58021000
 80024a0:	58020000 	.word	0x58020000
 80024a4:	58020800 	.word	0x58020800

080024a8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024ac:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <MX_I2C1_Init+0x74>)
 80024ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002520 <MX_I2C1_Init+0x78>)
 80024b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00D049FB;
 80024b2:	4b1a      	ldr	r3, [pc, #104]	@ (800251c <MX_I2C1_Init+0x74>)
 80024b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002524 <MX_I2C1_Init+0x7c>)
 80024b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80024b8:	4b18      	ldr	r3, [pc, #96]	@ (800251c <MX_I2C1_Init+0x74>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024be:	4b17      	ldr	r3, [pc, #92]	@ (800251c <MX_I2C1_Init+0x74>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024c4:	4b15      	ldr	r3, [pc, #84]	@ (800251c <MX_I2C1_Init+0x74>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80024ca:	4b14      	ldr	r3, [pc, #80]	@ (800251c <MX_I2C1_Init+0x74>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024d0:	4b12      	ldr	r3, [pc, #72]	@ (800251c <MX_I2C1_Init+0x74>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024d6:	4b11      	ldr	r3, [pc, #68]	@ (800251c <MX_I2C1_Init+0x74>)
 80024d8:	2200      	movs	r2, #0
 80024da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <MX_I2C1_Init+0x74>)
 80024de:	2200      	movs	r2, #0
 80024e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024e2:	480e      	ldr	r0, [pc, #56]	@ (800251c <MX_I2C1_Init+0x74>)
 80024e4:	f005 fe7e 	bl	80081e4 <HAL_I2C_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80024ee:	f000 fe53 	bl	8003198 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024f2:	2100      	movs	r1, #0
 80024f4:	4809      	ldr	r0, [pc, #36]	@ (800251c <MX_I2C1_Init+0x74>)
 80024f6:	f007 fa9f 	bl	8009a38 <HAL_I2CEx_ConfigAnalogFilter>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002500:	f000 fe4a 	bl	8003198 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002504:	2100      	movs	r1, #0
 8002506:	4805      	ldr	r0, [pc, #20]	@ (800251c <MX_I2C1_Init+0x74>)
 8002508:	f007 fae1 	bl	8009ace <HAL_I2CEx_ConfigDigitalFilter>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002512:	f000 fe41 	bl	8003198 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	24000370 	.word	0x24000370
 8002520:	40005400 	.word	0x40005400
 8002524:	00d049fb 	.word	0x00d049fb

08002528 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b0b8      	sub	sp, #224	@ 0xe0
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	22b8      	movs	r2, #184	@ 0xb8
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f00f fba1 	bl	8011c90 <memset>
  if(i2cHandle->Instance==I2C1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a5c      	ldr	r2, [pc, #368]	@ (80026c4 <HAL_I2C_MspInit+0x19c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	f040 80b1 	bne.w	80026bc <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800255a:	f04f 0208 	mov.w	r2, #8
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800256c:	f107 0310 	add.w	r3, r7, #16
 8002570:	4618      	mov	r0, r3
 8002572:	f009 fc03 	bl	800bd7c <HAL_RCCEx_PeriphCLKConfig>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 800257c:	f000 fe0c 	bl	8003198 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002580:	4b51      	ldr	r3, [pc, #324]	@ (80026c8 <HAL_I2C_MspInit+0x1a0>)
 8002582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002586:	4a50      	ldr	r2, [pc, #320]	@ (80026c8 <HAL_I2C_MspInit+0x1a0>)
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002590:	4b4d      	ldr	r3, [pc, #308]	@ (80026c8 <HAL_I2C_MspInit+0x1a0>)
 8002592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800259e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80025a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a6:	2312      	movs	r3, #18
 80025a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025b8:	2304      	movs	r3, #4
 80025ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025be:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025c2:	4619      	mov	r1, r3
 80025c4:	4841      	ldr	r0, [pc, #260]	@ (80026cc <HAL_I2C_MspInit+0x1a4>)
 80025c6:	f005 fc31 	bl	8007e2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025ca:	4b3f      	ldr	r3, [pc, #252]	@ (80026c8 <HAL_I2C_MspInit+0x1a0>)
 80025cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025d0:	4a3d      	ldr	r2, [pc, #244]	@ (80026c8 <HAL_I2C_MspInit+0x1a0>)
 80025d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025da:	4b3b      	ldr	r3, [pc, #236]	@ (80026c8 <HAL_I2C_MspInit+0x1a0>)
 80025dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80025e8:	4b39      	ldr	r3, [pc, #228]	@ (80026d0 <HAL_I2C_MspInit+0x1a8>)
 80025ea:	4a3a      	ldr	r2, [pc, #232]	@ (80026d4 <HAL_I2C_MspInit+0x1ac>)
 80025ec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80025ee:	4b38      	ldr	r3, [pc, #224]	@ (80026d0 <HAL_I2C_MspInit+0x1a8>)
 80025f0:	2221      	movs	r2, #33	@ 0x21
 80025f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025f4:	4b36      	ldr	r3, [pc, #216]	@ (80026d0 <HAL_I2C_MspInit+0x1a8>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025fa:	4b35      	ldr	r3, [pc, #212]	@ (80026d0 <HAL_I2C_MspInit+0x1a8>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002600:	4b33      	ldr	r3, [pc, #204]	@ (80026d0 <HAL_I2C_MspInit+0x1a8>)
 8002602:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002606:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002608:	4b31      	ldr	r3, [pc, #196]	@ (80026d0 <HAL_I2C_MspInit+0x1a8>)
 800260a:	2200      	movs	r2, #0
 800260c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800260e:	4b30      	ldr	r3, [pc, #192]	@ (80026d0 <HAL_I2C_MspInit+0x1a8>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002614:	4b2e      	ldr	r3, [pc, #184]	@ (80026d0 <HAL_I2C_MspInit+0x1a8>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800261a:	4b2d      	ldr	r3, [pc, #180]	@ (80026d0 <HAL_I2C_MspInit+0x1a8>)
 800261c:	2200      	movs	r2, #0
 800261e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002620:	4b2b      	ldr	r3, [pc, #172]	@ (80026d0 <HAL_I2C_MspInit+0x1a8>)
 8002622:	2200      	movs	r2, #0
 8002624:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002626:	482a      	ldr	r0, [pc, #168]	@ (80026d0 <HAL_I2C_MspInit+0x1a8>)
 8002628:	f003 f8d8 	bl	80057dc <HAL_DMA_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8002632:	f000 fdb1 	bl	8003198 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a25      	ldr	r2, [pc, #148]	@ (80026d0 <HAL_I2C_MspInit+0x1a8>)
 800263a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800263c:	4a24      	ldr	r2, [pc, #144]	@ (80026d0 <HAL_I2C_MspInit+0x1a8>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002642:	4b25      	ldr	r3, [pc, #148]	@ (80026d8 <HAL_I2C_MspInit+0x1b0>)
 8002644:	4a25      	ldr	r2, [pc, #148]	@ (80026dc <HAL_I2C_MspInit+0x1b4>)
 8002646:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002648:	4b23      	ldr	r3, [pc, #140]	@ (80026d8 <HAL_I2C_MspInit+0x1b0>)
 800264a:	2222      	movs	r2, #34	@ 0x22
 800264c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800264e:	4b22      	ldr	r3, [pc, #136]	@ (80026d8 <HAL_I2C_MspInit+0x1b0>)
 8002650:	2240      	movs	r2, #64	@ 0x40
 8002652:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002654:	4b20      	ldr	r3, [pc, #128]	@ (80026d8 <HAL_I2C_MspInit+0x1b0>)
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800265a:	4b1f      	ldr	r3, [pc, #124]	@ (80026d8 <HAL_I2C_MspInit+0x1b0>)
 800265c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002660:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002662:	4b1d      	ldr	r3, [pc, #116]	@ (80026d8 <HAL_I2C_MspInit+0x1b0>)
 8002664:	2200      	movs	r2, #0
 8002666:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002668:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <HAL_I2C_MspInit+0x1b0>)
 800266a:	2200      	movs	r2, #0
 800266c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800266e:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <HAL_I2C_MspInit+0x1b0>)
 8002670:	2200      	movs	r2, #0
 8002672:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002674:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <HAL_I2C_MspInit+0x1b0>)
 8002676:	2200      	movs	r2, #0
 8002678:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800267a:	4b17      	ldr	r3, [pc, #92]	@ (80026d8 <HAL_I2C_MspInit+0x1b0>)
 800267c:	2200      	movs	r2, #0
 800267e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002680:	4815      	ldr	r0, [pc, #84]	@ (80026d8 <HAL_I2C_MspInit+0x1b0>)
 8002682:	f003 f8ab 	bl	80057dc <HAL_DMA_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 800268c:	f000 fd84 	bl	8003198 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a11      	ldr	r2, [pc, #68]	@ (80026d8 <HAL_I2C_MspInit+0x1b0>)
 8002694:	639a      	str	r2, [r3, #56]	@ 0x38
 8002696:	4a10      	ldr	r2, [pc, #64]	@ (80026d8 <HAL_I2C_MspInit+0x1b0>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800269c:	2200      	movs	r2, #0
 800269e:	2100      	movs	r1, #0
 80026a0:	201f      	movs	r0, #31
 80026a2:	f002 ffee 	bl	8005682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80026a6:	201f      	movs	r0, #31
 80026a8:	f003 f805 	bl	80056b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2100      	movs	r1, #0
 80026b0:	2020      	movs	r0, #32
 80026b2:	f002 ffe6 	bl	8005682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80026b6:	2020      	movs	r0, #32
 80026b8:	f002 fffd 	bl	80056b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80026bc:	bf00      	nop
 80026be:	37e0      	adds	r7, #224	@ 0xe0
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40005400 	.word	0x40005400
 80026c8:	58024400 	.word	0x58024400
 80026cc:	58020400 	.word	0x58020400
 80026d0:	240003c4 	.word	0x240003c4
 80026d4:	40020010 	.word	0x40020010
 80026d8:	2400043c 	.word	0x2400043c
 80026dc:	40020028 	.word	0x40020028

080026e0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f043 0201 	orr.w	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	601a      	str	r2, [r3, #0]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	60da      	str	r2, [r3, #12]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_USART_IsActiveFlag_FE>:
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	d101      	bne.n	8002738 <LL_USART_IsActiveFlag_FE+0x18>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <LL_USART_IsActiveFlag_FE+0x1a>
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_USART_IsActiveFlag_ORE>:
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b08      	cmp	r3, #8
 8002758:	d101      	bne.n	800275e <LL_USART_IsActiveFlag_ORE+0x18>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <LL_USART_IsActiveFlag_ORE+0x1a>
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_USART_IsActiveFlag_TC>:
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800277c:	2b40      	cmp	r3, #64	@ 0x40
 800277e:	d101      	bne.n	8002784 <LL_USART_IsActiveFlag_TC+0x18>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <LL_USART_IsActiveFlag_TC+0x1a>
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a2:	2b80      	cmp	r3, #128	@ 0x80
 80027a4:	d101      	bne.n	80027aa <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	621a      	str	r2, [r3, #32]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2208      	movs	r2, #8
 80027de:	621a      	str	r2, [r3, #32]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	@ 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	e853 3f00 	ldrex	r3, [r3]
 80027fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f043 0320 	orr.w	r3, r3, #32
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	61ba      	str	r2, [r7, #24]
 800280e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002810:	6979      	ldr	r1, [r7, #20]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	e841 2300 	strex	r3, r2, [r1]
 8002818:	613b      	str	r3, [r7, #16]
   return(result);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1e9      	bne.n	80027f4 <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3724      	adds	r7, #36	@ 0x24
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	4013      	ands	r3, r2
 8002862:	041a      	lsls	r2, r3, #16
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	43d9      	mvns	r1, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	400b      	ands	r3, r1
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	619a      	str	r2, [r3, #24]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <_write>:
/* USER CODE BEGIN PTD */

/* *********** USART6 printf function code ************ */

int _write(int file, char* p, int len)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	e025      	b.n	80028de <_write+0x5e>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
            if (LL_USART_IsActiveFlag_ORE(USART6) || LL_USART_IsActiveFlag_FE(USART6)) {
 8002892:	481b      	ldr	r0, [pc, #108]	@ (8002900 <_write+0x80>)
 8002894:	f7ff ff57 	bl	8002746 <LL_USART_IsActiveFlag_ORE>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d105      	bne.n	80028aa <_write+0x2a>
 800289e:	4818      	ldr	r0, [pc, #96]	@ (8002900 <_write+0x80>)
 80028a0:	f7ff ff3e 	bl	8002720 <LL_USART_IsActiveFlag_FE>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <_write+0x3c>
                LL_USART_ClearFlag_ORE(USART6);
 80028aa:	4815      	ldr	r0, [pc, #84]	@ (8002900 <_write+0x80>)
 80028ac:	f7ff ff91 	bl	80027d2 <LL_USART_ClearFlag_ORE>
                LL_USART_ClearFlag_FE(USART6);
 80028b0:	4813      	ldr	r0, [pc, #76]	@ (8002900 <_write+0x80>)
 80028b2:	f7ff ff81 	bl	80027b8 <LL_USART_ClearFlag_FE>
                return -1; // Indicate error
 80028b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028ba:	e01c      	b.n	80028f6 <_write+0x76>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
 80028bc:	4810      	ldr	r0, [pc, #64]	@ (8002900 <_write+0x80>)
 80028be:	f7ff ff68 	bl	8002792 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0e4      	beq.n	8002892 <_write+0x12>
            }
        }
        LL_USART_TransmitData8(USART6, *(p + i));
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	4413      	add	r3, r2
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	4619      	mov	r1, r3
 80028d2:	480b      	ldr	r0, [pc, #44]	@ (8002900 <_write+0x80>)
 80028d4:	f7ff ffab 	bl	800282e <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	3301      	adds	r3, #1
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	dbea      	blt.n	80028bc <_write+0x3c>
    }
    while (!LL_USART_IsActiveFlag_TC(USART6)) {}
 80028e6:	bf00      	nop
 80028e8:	4805      	ldr	r0, [pc, #20]	@ (8002900 <_write+0x80>)
 80028ea:	f7ff ff3f 	bl	800276c <LL_USART_IsActiveFlag_TC>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f9      	beq.n	80028e8 <_write+0x68>
    return len;
 80028f4:	687b      	ldr	r3, [r7, #4]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40011400 	.word	0x40011400

08002904 <HAL_I2C_ErrorCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
    HMC5883L_DMA_Complete_Callback(hi2c);
}

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
    printf("I2C Error: %lu\n", hi2c->ErrorCode);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002910:	4619      	mov	r1, r3
 8002912:	4803      	ldr	r0, [pc, #12]	@ (8002920 <HAL_I2C_ErrorCallback+0x1c>)
 8002914:	f00f f802 	bl	801191c <iprintf>
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	08016640 	.word	0x08016640

08002924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002928:	b0d8      	sub	sp, #352	@ 0x160
 800292a:	af0a      	add	r7, sp, #40	@ 0x28

  /* USER CODE BEGIN 1 */
	unsigned char motor_arming_flag = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
	unsigned short iBus_SwA_Prev = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	unsigned char iBus_rx_cnt = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
	unsigned short ccr1, ccr2, ccr3, ccr4;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800293e:	f000 fbff 	bl	8003140 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002942:	f002 fd0d 	bl	8005360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002946:	f000 fb8d 	bl	8003064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800294a:	f7ff fcf9 	bl	8002340 <MX_GPIO_Init>
  MX_DMA_Init();
 800294e:	f7ff fc87 	bl	8002260 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8002952:	f002 fc3b 	bl	80051cc <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8002956:	f002 f90f 	bl	8004b78 <MX_TIM7_Init>
  MX_SPI3_Init();
 800295a:	f001 f8c1 	bl	8003ae0 <MX_SPI3_Init>
  MX_TIM2_Init();
 800295e:	f001 ff83 	bl	8004868 <MX_TIM2_Init>
  MX_OCTOSPI1_Init();
 8002962:	f000 fc1f 	bl	80031a4 <MX_OCTOSPI1_Init>
  MX_TIM3_Init();
 8002966:	f001 fff5 	bl	8004954 <MX_TIM3_Init>
  MX_I2C1_Init();
 800296a:	f7ff fd9d 	bl	80024a8 <MX_I2C1_Init>
  MX_UART4_Init();
 800296e:	f002 fb93 	bl	8005098 <MX_UART4_Init>
  MX_TIM5_Init();
 8002972:	f002 f867 	bl	8004a44 <MX_TIM5_Init>
  MX_SPI2_Init();
 8002976:	f000 ffa3 	bl	80038c0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  LL_USART_EnableIT_RXNE(USART6);
 800297a:	48b2      	ldr	r0, [pc, #712]	@ (8002c44 <main+0x320>)
 800297c:	f7ff ff36 	bl	80027ec <LL_USART_EnableIT_RXNE_RXFNE>
//  StartupTone();
  LL_USART_EnableIT_RXNE_RXFNE(UART4);
 8002980:	48b1      	ldr	r0, [pc, #708]	@ (8002c48 <main+0x324>)
 8002982:	f7ff ff33 	bl	80027ec <LL_USART_EnableIT_RXNE_RXFNE>


  if (EEPROM_Init() != W25Qxx_OK) {
 8002986:	f7fe facd 	bl	8000f24 <EEPROM_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <main+0x76>
	  printf("EEPROM Init Failed\r\n");
 8002990:	48ae      	ldr	r0, [pc, #696]	@ (8002c4c <main+0x328>)
 8002992:	f00f f833 	bl	80119fc <puts>
	  Error_Handler();
 8002996:	f000 fbff 	bl	8003198 <Error_Handler>
  }

  DroneConfig_t config;
  if (EEPROM_ReadConfig(&config) == W25Qxx_OK) {
 800299a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe fb16 	bl	8000fd0 <EEPROM_ReadConfig>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10c      	bne.n	80029c4 <main+0xa0>
	  printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
			  config.flight_mode, config.pid[0]);
 80029aa:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
	  printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
 80029ae:	4619      	mov	r1, r3
			  config.flight_mode, config.pid[0]);
 80029b0:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
	  printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
 80029b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029b8:	ec53 2b17 	vmov	r2, r3, d7
 80029bc:	48a4      	ldr	r0, [pc, #656]	@ (8002c50 <main+0x32c>)
 80029be:	f00e ffad 	bl	801191c <iprintf>
 80029c2:	e02a      	b.n	8002a1a <main+0xf6>
  } else {
	  printf("No valid config found, loading defaults\r\n");
 80029c4:	48a3      	ldr	r0, [pc, #652]	@ (8002c54 <main+0x330>)
 80029c6:	f00f f819 	bl	80119fc <puts>
	  DroneConfig_t default_config = {
 80029ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80029ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80029d2:	4aa1      	ldr	r2, [pc, #644]	@ (8002c58 <main+0x334>)
 80029d4:	4618      	mov	r0, r3
 80029d6:	4611      	mov	r1, r2
 80029d8:	2390      	movs	r3, #144	@ 0x90
 80029da:	461a      	mov	r2, r3
 80029dc:	f00f f9f7 	bl	8011dce <memcpy>
					  .rgb = {{255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}},
					  .mode = 0
			  },
			  .crc = 0
	  };
	  default_config.crc = CalculateCRC32((uint8_t*)&default_config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 80029e0:	f107 0310 	add.w	r3, r7, #16
 80029e4:	218c      	movs	r1, #140	@ 0x8c
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe fb4e 	bl	8001088 <CalculateCRC32>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80029f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80029f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	  if (EEPROM_WriteConfig(&default_config) != W25Qxx_OK) {
 80029fa:	f107 0310 	add.w	r3, r7, #16
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe fb1e 	bl	8001040 <EEPROM_WriteConfig>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <main+0xf0>
		  printf("Failed to write default config\r\n");
 8002a0a:	4894      	ldr	r0, [pc, #592]	@ (8002c5c <main+0x338>)
 8002a0c:	f00e fff6 	bl	80119fc <puts>
		  Error_Handler();
 8002a10:	f000 fbc2 	bl	8003198 <Error_Handler>
	  }
	  printf("Default config written and verified\r\n");
 8002a14:	4892      	ldr	r0, [pc, #584]	@ (8002c60 <main+0x33c>)
 8002a16:	f00e fff1 	bl	80119fc <puts>
  }

  if (EEPROM_GetPID(eeprom_pid_read) == W25Qxx_OK) {
 8002a1a:	4892      	ldr	r0, [pc, #584]	@ (8002c64 <main+0x340>)
 8002a1c:	f7fe fc30 	bl	8001280 <EEPROM_GetPID>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d118      	bne.n	8002a58 <main+0x134>
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
			  eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 8002a26:	4b8f      	ldr	r3, [pc, #572]	@ (8002c64 <main+0x340>)
 8002a28:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 8002a2c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 8002a30:	4b8c      	ldr	r3, [pc, #560]	@ (8002c64 <main+0x340>)
 8002a32:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 8002a36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 8002a3a:	4b8a      	ldr	r3, [pc, #552]	@ (8002c64 <main+0x340>)
 8002a3c:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 8002a40:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002a44:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002a48:	ed8d 7b00 	vstr	d7, [sp]
 8002a4c:	ec53 2b15 	vmov	r2, r3, d5
 8002a50:	4885      	ldr	r0, [pc, #532]	@ (8002c68 <main+0x344>)
 8002a52:	f00e ff63 	bl	801191c <iprintf>
 8002a56:	e002      	b.n	8002a5e <main+0x13a>
  } else {
	  printf("Failed to read PID\r\n");
 8002a58:	4884      	ldr	r0, [pc, #528]	@ (8002c6c <main+0x348>)
 8002a5a:	f00e ffcf 	bl	80119fc <puts>
  }

  if (EEPROM_GetGyroCalibration(eeprom_gyro_read) == W25Qxx_OK) {
 8002a5e:	4884      	ldr	r0, [pc, #528]	@ (8002c70 <main+0x34c>)
 8002a60:	f7fe fb96 	bl	8001190 <EEPROM_GetGyroCalibration>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d118      	bne.n	8002a9c <main+0x178>
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
			  eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8002a6a:	4b81      	ldr	r3, [pc, #516]	@ (8002c70 <main+0x34c>)
 8002a6c:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002a70:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8002a74:	4b7e      	ldr	r3, [pc, #504]	@ (8002c70 <main+0x34c>)
 8002a76:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002a7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8002a7e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c70 <main+0x34c>)
 8002a80:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002a84:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002a88:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002a8c:	ed8d 7b00 	vstr	d7, [sp]
 8002a90:	ec53 2b15 	vmov	r2, r3, d5
 8002a94:	4877      	ldr	r0, [pc, #476]	@ (8002c74 <main+0x350>)
 8002a96:	f00e ff41 	bl	801191c <iprintf>
 8002a9a:	e002      	b.n	8002aa2 <main+0x17e>
  } else {
	  printf("Failed to read EEPROM Gyro Data\r\n");
 8002a9c:	4876      	ldr	r0, [pc, #472]	@ (8002c78 <main+0x354>)
 8002a9e:	f00e ffad 	bl	80119fc <puts>
  }

  if (EEPROM_GetAccelCalibration(eeprom_accel_read) == W25Qxx_OK) {
 8002aa2:	4876      	ldr	r0, [pc, #472]	@ (8002c7c <main+0x358>)
 8002aa4:	f7fe fb2a 	bl	80010fc <EEPROM_GetAccelCalibration>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d118      	bne.n	8002ae0 <main+0x1bc>
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
			  eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8002aae:	4b73      	ldr	r3, [pc, #460]	@ (8002c7c <main+0x358>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002ab4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8002ab8:	4b70      	ldr	r3, [pc, #448]	@ (8002c7c <main+0x358>)
 8002aba:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002abe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8002ac2:	4b6e      	ldr	r3, [pc, #440]	@ (8002c7c <main+0x358>)
 8002ac4:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002ac8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002acc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002ad0:	ed8d 7b00 	vstr	d7, [sp]
 8002ad4:	ec53 2b15 	vmov	r2, r3, d5
 8002ad8:	4869      	ldr	r0, [pc, #420]	@ (8002c80 <main+0x35c>)
 8002ada:	f00e ff1f 	bl	801191c <iprintf>
 8002ade:	e002      	b.n	8002ae6 <main+0x1c2>
  } else {
	  printf("Failed to read EEPROM Accel Data\r\n");
 8002ae0:	4868      	ldr	r0, [pc, #416]	@ (8002c84 <main+0x360>)
 8002ae2:	f00e ff8b 	bl	80119fc <puts>
  }

  if (EEPROM_GetMagCalibration(eeprom_mag_read) == W25Qxx_OK) {
 8002ae6:	4868      	ldr	r0, [pc, #416]	@ (8002c88 <main+0x364>)
 8002ae8:	f7fe fb9c 	bl	8001224 <EEPROM_GetMagCalibration>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d118      	bne.n	8002b24 <main+0x200>
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
			  eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8002af2:	4b65      	ldr	r3, [pc, #404]	@ (8002c88 <main+0x364>)
 8002af4:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002af8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8002afc:	4b62      	ldr	r3, [pc, #392]	@ (8002c88 <main+0x364>)
 8002afe:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002b02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8002b06:	4b60      	ldr	r3, [pc, #384]	@ (8002c88 <main+0x364>)
 8002b08:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002b0c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002b10:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002b14:	ed8d 7b00 	vstr	d7, [sp]
 8002b18:	ec53 2b15 	vmov	r2, r3, d5
 8002b1c:	485b      	ldr	r0, [pc, #364]	@ (8002c8c <main+0x368>)
 8002b1e:	f00e fefd 	bl	801191c <iprintf>
 8002b22:	e002      	b.n	8002b2a <main+0x206>
  } else {
	  printf("Failed to read EEPROM Mag Data\r\n");
 8002b24:	485a      	ldr	r0, [pc, #360]	@ (8002c90 <main+0x36c>)
 8002b26:	f00e ff69 	bl	80119fc <puts>
  }

  if (EEPROM_GetRollPID(&eeprom_roll_pid_read) == W25Qxx_OK) {
 8002b2a:	485a      	ldr	r0, [pc, #360]	@ (8002c94 <main+0x370>)
 8002b2c:	f7fe fbca 	bl	80012c4 <EEPROM_GetRollPID>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d12d      	bne.n	8002b92 <main+0x26e>
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
			  eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8002b36:	4b57      	ldr	r3, [pc, #348]	@ (8002c94 <main+0x370>)
 8002b38:	edd3 7a00 	vldr	s15, [r3]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002b3c:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
			  eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8002b40:	4b54      	ldr	r3, [pc, #336]	@ (8002c94 <main+0x370>)
 8002b42:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002b46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8002b4a:	4b52      	ldr	r3, [pc, #328]	@ (8002c94 <main+0x370>)
 8002b4c:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002b50:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			  eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8002b54:	4b4f      	ldr	r3, [pc, #316]	@ (8002c94 <main+0x370>)
 8002b56:	edd3 5a03 	vldr	s11, [r3, #12]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002b5a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			  eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8002b5e:	4b4d      	ldr	r3, [pc, #308]	@ (8002c94 <main+0x370>)
 8002b60:	edd3 4a04 	vldr	s9, [r3, #16]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002b64:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			  eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8002b68:	4b4a      	ldr	r3, [pc, #296]	@ (8002c94 <main+0x370>)
 8002b6a:	edd3 3a05 	vldr	s7, [r3, #20]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002b6e:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8002b72:	ed8d 3b08 	vstr	d3, [sp, #32]
 8002b76:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002b7a:	ed8d 5b04 	vstr	d5, [sp, #16]
 8002b7e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002b82:	ed8d 7b00 	vstr	d7, [sp]
 8002b86:	ec53 2b12 	vmov	r2, r3, d2
 8002b8a:	4843      	ldr	r0, [pc, #268]	@ (8002c98 <main+0x374>)
 8002b8c:	f00e fec6 	bl	801191c <iprintf>
 8002b90:	e002      	b.n	8002b98 <main+0x274>
  } else {
	  printf("Failed to read Roll PID\r\n");
 8002b92:	4842      	ldr	r0, [pc, #264]	@ (8002c9c <main+0x378>)
 8002b94:	f00e ff32 	bl	80119fc <puts>
  }

  if (EEPROM_GetPitchPID(&eeprom_pitch_pid_read) == W25Qxx_OK) {
 8002b98:	4841      	ldr	r0, [pc, #260]	@ (8002ca0 <main+0x37c>)
 8002b9a:	f7fe fbe5 	bl	8001368 <EEPROM_GetPitchPID>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12d      	bne.n	8002c00 <main+0x2dc>
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
			  eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8002ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca0 <main+0x37c>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002baa:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
			  eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8002bae:	4b3c      	ldr	r3, [pc, #240]	@ (8002ca0 <main+0x37c>)
 8002bb0:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002bb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8002bb8:	4b39      	ldr	r3, [pc, #228]	@ (8002ca0 <main+0x37c>)
 8002bba:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002bbe:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			  eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 8002bc2:	4b37      	ldr	r3, [pc, #220]	@ (8002ca0 <main+0x37c>)
 8002bc4:	edd3 5a03 	vldr	s11, [r3, #12]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002bc8:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			  eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 8002bcc:	4b34      	ldr	r3, [pc, #208]	@ (8002ca0 <main+0x37c>)
 8002bce:	edd3 4a04 	vldr	s9, [r3, #16]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002bd2:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			  eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 8002bd6:	4b32      	ldr	r3, [pc, #200]	@ (8002ca0 <main+0x37c>)
 8002bd8:	edd3 3a05 	vldr	s7, [r3, #20]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002bdc:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8002be0:	ed8d 3b08 	vstr	d3, [sp, #32]
 8002be4:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002be8:	ed8d 5b04 	vstr	d5, [sp, #16]
 8002bec:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002bf0:	ed8d 7b00 	vstr	d7, [sp]
 8002bf4:	ec53 2b12 	vmov	r2, r3, d2
 8002bf8:	482a      	ldr	r0, [pc, #168]	@ (8002ca4 <main+0x380>)
 8002bfa:	f00e fe8f 	bl	801191c <iprintf>
 8002bfe:	e002      	b.n	8002c06 <main+0x2e2>
  } else {
	  printf("Failed to read Pitch PID\r\n");
 8002c00:	4829      	ldr	r0, [pc, #164]	@ (8002ca8 <main+0x384>)
 8002c02:	f00e fefb 	bl	80119fc <puts>
  }

  if (EEPROM_GetYawRatePID(&eeprom_yaw_rate_pid_read) == W25Qxx_OK) {
 8002c06:	4829      	ldr	r0, [pc, #164]	@ (8002cac <main+0x388>)
 8002c08:	f7fe fc00 	bl	800140c <EEPROM_GetYawRatePID>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d150      	bne.n	8002cb4 <main+0x390>
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
			  eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8002c12:	4b26      	ldr	r3, [pc, #152]	@ (8002cac <main+0x388>)
 8002c14:	edd3 7a00 	vldr	s15, [r3]
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8002c18:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8002c1c:	4b23      	ldr	r3, [pc, #140]	@ (8002cac <main+0x388>)
 8002c1e:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8002c22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8002c26:	4b21      	ldr	r3, [pc, #132]	@ (8002cac <main+0x388>)
 8002c28:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8002c2c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002c30:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002c34:	ed8d 7b00 	vstr	d7, [sp]
 8002c38:	ec53 2b15 	vmov	r2, r3, d5
 8002c3c:	481c      	ldr	r0, [pc, #112]	@ (8002cb0 <main+0x38c>)
 8002c3e:	f00e fe6d 	bl	801191c <iprintf>
 8002c42:	e03a      	b.n	8002cba <main+0x396>
 8002c44:	40011400 	.word	0x40011400
 8002c48:	40004c00 	.word	0x40004c00
 8002c4c:	08016650 	.word	0x08016650
 8002c50:	08016664 	.word	0x08016664
 8002c54:	08016694 	.word	0x08016694
 8002c58:	08016a38 	.word	0x08016a38
 8002c5c:	080166c0 	.word	0x080166c0
 8002c60:	080166e0 	.word	0x080166e0
 8002c64:	240004b4 	.word	0x240004b4
 8002c68:	08016708 	.word	0x08016708
 8002c6c:	08016734 	.word	0x08016734
 8002c70:	240004c0 	.word	0x240004c0
 8002c74:	08016748 	.word	0x08016748
 8002c78:	08016774 	.word	0x08016774
 8002c7c:	240004cc 	.word	0x240004cc
 8002c80:	08016798 	.word	0x08016798
 8002c84:	080167c4 	.word	0x080167c4
 8002c88:	240004d8 	.word	0x240004d8
 8002c8c:	080167e8 	.word	0x080167e8
 8002c90:	08016814 	.word	0x08016814
 8002c94:	240004e4 	.word	0x240004e4
 8002c98:	08016834 	.word	0x08016834
 8002c9c:	08016878 	.word	0x08016878
 8002ca0:	240004fc 	.word	0x240004fc
 8002ca4:	08016894 	.word	0x08016894
 8002ca8:	080168d8 	.word	0x080168d8
 8002cac:	24000514 	.word	0x24000514
 8002cb0:	080168f4 	.word	0x080168f4
  } else {
	  printf("Failed to read Yaw Rate PID\r\n");
 8002cb4:	4821      	ldr	r0, [pc, #132]	@ (8002d3c <main+0x418>)
 8002cb6:	f00e fea1 	bl	80119fc <puts>
  }

  if (EEPROM_GetAircraftLights(&aircraft_lights) == W25Qxx_OK) {
 8002cba:	4821      	ldr	r0, [pc, #132]	@ (8002d40 <main+0x41c>)
 8002cbc:	f7fe fbf8 	bl	80014b0 <EEPROM_GetAircraftLights>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d140      	bne.n	8002d48 <main+0x424>
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
			  aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d40 <main+0x41c>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002cca:	469c      	mov	ip, r3
			  aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8002d40 <main+0x41c>)
 8002cce:	785b      	ldrb	r3, [r3, #1]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002cd0:	469e      	mov	lr, r3
			  aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d40 <main+0x41c>)
 8002cd4:	789b      	ldrb	r3, [r3, #2]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002cd6:	4698      	mov	r8, r3
			  aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8002cd8:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <main+0x41c>)
 8002cda:	78db      	ldrb	r3, [r3, #3]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002cdc:	461a      	mov	r2, r3
			  aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8002cde:	4b18      	ldr	r3, [pc, #96]	@ (8002d40 <main+0x41c>)
 8002ce0:	791b      	ldrb	r3, [r3, #4]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002ce2:	4619      	mov	r1, r3
			  aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8002ce4:	4b16      	ldr	r3, [pc, #88]	@ (8002d40 <main+0x41c>)
 8002ce6:	795b      	ldrb	r3, [r3, #5]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002ce8:	4618      	mov	r0, r3
			  aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 8002cea:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <main+0x41c>)
 8002cec:	799b      	ldrb	r3, [r3, #6]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002cee:	461c      	mov	r4, r3
			  aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 8002cf0:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <main+0x41c>)
 8002cf2:	79db      	ldrb	r3, [r3, #7]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002cf4:	461d      	mov	r5, r3
			  aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 8002cf6:	4b12      	ldr	r3, [pc, #72]	@ (8002d40 <main+0x41c>)
 8002cf8:	7a1b      	ldrb	r3, [r3, #8]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002cfa:	461e      	mov	r6, r3
			  aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 8002cfc:	4b10      	ldr	r3, [pc, #64]	@ (8002d40 <main+0x41c>)
 8002cfe:	7a5b      	ldrb	r3, [r3, #9]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002d00:	60fb      	str	r3, [r7, #12]
			  aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 8002d02:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <main+0x41c>)
 8002d04:	7a9b      	ldrb	r3, [r3, #10]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002d06:	60bb      	str	r3, [r7, #8]
			  aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 8002d08:	4b0d      	ldr	r3, [pc, #52]	@ (8002d40 <main+0x41c>)
 8002d0a:	7adb      	ldrb	r3, [r3, #11]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002d0c:	607b      	str	r3, [r7, #4]
			  aircraft_lights.mode);
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d40 <main+0x41c>)
 8002d10:	7b1b      	ldrb	r3, [r3, #12]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002d12:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	9308      	str	r3, [sp, #32]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	9307      	str	r3, [sp, #28]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	9306      	str	r3, [sp, #24]
 8002d20:	9605      	str	r6, [sp, #20]
 8002d22:	9504      	str	r5, [sp, #16]
 8002d24:	9403      	str	r4, [sp, #12]
 8002d26:	9002      	str	r0, [sp, #8]
 8002d28:	9101      	str	r1, [sp, #4]
 8002d2a:	9200      	str	r2, [sp, #0]
 8002d2c:	4643      	mov	r3, r8
 8002d2e:	4672      	mov	r2, lr
 8002d30:	4661      	mov	r1, ip
 8002d32:	4804      	ldr	r0, [pc, #16]	@ (8002d44 <main+0x420>)
 8002d34:	f00e fdf2 	bl	801191c <iprintf>
 8002d38:	e009      	b.n	8002d4e <main+0x42a>
 8002d3a:	bf00      	nop
 8002d3c:	0801691c 	.word	0x0801691c
 8002d40:	24000520 	.word	0x24000520
 8002d44:	0801693c 	.word	0x0801693c
  } else {
	  printf("Failed to read Aircraft Lights\r\n");
 8002d48:	48b3      	ldr	r0, [pc, #716]	@ (8003018 <main+0x6f4>)
 8002d4a:	f00e fe57 	bl	80119fc <puts>
  //
  //          yaw_rate_pid.kp = eeprom_yaw_rate_pid_read.kp;
  //          yaw_rate_pid.ki = eeprom_yaw_rate_pid_read.ki;
  //          yaw_rate_pid.kd = eeprom_yaw_rate_pid_read.kd;

  printf("\n");
 8002d4e:	200a      	movs	r0, #10
 8002d50:	f00e fdf6 	bl	8011940 <putchar>

  /* *********** ESC Startup Calibration ************ */
  HAL_Delay(3000);
 8002d54:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002d58:	f002 fb94 	bl	8005484 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	48af      	ldr	r0, [pc, #700]	@ (800301c <main+0x6f8>)
 8002d60:	f00a fc6e 	bl	800d640 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002d64:	2104      	movs	r1, #4
 8002d66:	48ad      	ldr	r0, [pc, #692]	@ (800301c <main+0x6f8>)
 8002d68:	f00a fc6a 	bl	800d640 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8002d6c:	2108      	movs	r1, #8
 8002d6e:	48ab      	ldr	r0, [pc, #684]	@ (800301c <main+0x6f8>)
 8002d70:	f00a fc66 	bl	800d640 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8002d74:	210c      	movs	r1, #12
 8002d76:	48a9      	ldr	r0, [pc, #676]	@ (800301c <main+0x6f8>)
 8002d78:	f00a fc62 	bl	800d640 <HAL_TIM_PWM_Start>
//  Buzzer_On(292);
//  HAL_Delay(100);
//  Buzzer_Off();
  /* *********** iBus Throttle Check END ************ */

  LL_TIM_EnableCounter(TIM7);
 8002d7c:	48a8      	ldr	r0, [pc, #672]	@ (8003020 <main+0x6fc>)
 8002d7e:	f7ff fcaf 	bl	80026e0 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 8002d82:	48a7      	ldr	r0, [pc, #668]	@ (8003020 <main+0x6fc>)
 8002d84:	f7ff fcbc 	bl	8002700 <LL_TIM_EnableIT_UPDATE>

  if(ICM42688P_Initialization() == 0)
 8002d88:	f7fe ff96 	bl	8001cb8 <ICM42688P_Initialization>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d102      	bne.n	8002d98 <main+0x474>
  {
	  printf("=== Sensor Ready ===\n\n");
 8002d92:	48a4      	ldr	r0, [pc, #656]	@ (8003024 <main+0x700>)
 8002d94:	f00e fe32 	bl	80119fc <puts>
  }

  HMC5883L_Init();
 8002d98:	f7fe fd68 	bl	800186c <HMC5883L_Init>
  uint8_t hmc_id = HMC5883L_ReadReg(HMC5883L_ID_A);
 8002d9c:	200a      	movs	r0, #10
 8002d9e:	f7fe fd47 	bl	8001830 <HMC5883L_ReadReg>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
  printf("HMC5883L ID: %c\n", hmc_id);
 8002da8:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 8002dac:	4619      	mov	r1, r3
 8002dae:	489e      	ldr	r0, [pc, #632]	@ (8003028 <main+0x704>)
 8002db0:	f00e fdb4 	bl	801191c <iprintf>
  printf("\n");
 8002db4:	200a      	movs	r0, #10
 8002db6:	f00e fdc3 	bl	8011940 <putchar>

  main_led(0, 0, 0, 255, 1);
 8002dba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002dbe:	23ff      	movs	r3, #255	@ 0xff
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7ff f975 	bl	80020b4 <main_led>
  HAL_Delay(500);
 8002dca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002dce:	f002 fb59 	bl	8005484 <HAL_Delay>
  main_led(0, 0, 0, 255, 0);
 8002dd2:	ed9f 0a96 	vldr	s0, [pc, #600]	@ 800302c <main+0x708>
 8002dd6:	23ff      	movs	r3, #255	@ 0xff
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2100      	movs	r1, #0
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7ff f969 	bl	80020b4 <main_led>
  HAL_Delay(500);
 8002de2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002de6:	f002 fb4d 	bl	8005484 <HAL_Delay>
  main_led(0, 0, 0, 255, 1);
 8002dea:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002dee:	23ff      	movs	r3, #255	@ 0xff
 8002df0:	2200      	movs	r2, #0
 8002df2:	2100      	movs	r1, #0
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7ff f95d 	bl	80020b4 <main_led>
  HAL_Delay(500);
 8002dfa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002dfe:	f002 fb41 	bl	8005484 <HAL_Delay>
  main_led(0, 0, 0, 255, 0);
 8002e02:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 800302c <main+0x708>
 8002e06:	23ff      	movs	r3, #255	@ 0xff
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7ff f951 	bl	80020b4 <main_led>
  HAL_Delay(500);
 8002e12:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e16:	f002 fb35 	bl	8005484 <HAL_Delay>
  main_led(0, 0, 255, 0, 1);
 8002e1a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002e1e:	2300      	movs	r3, #0
 8002e20:	22ff      	movs	r2, #255	@ 0xff
 8002e22:	2100      	movs	r1, #0
 8002e24:	2000      	movs	r0, #0
 8002e26:	f7ff f945 	bl	80020b4 <main_led>
  HAL_Delay(500);
 8002e2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e2e:	f002 fb29 	bl	8005484 <HAL_Delay>
  main_led(0, 0, 255, 0, 0);
 8002e32:	ed9f 0a7e 	vldr	s0, [pc, #504]	@ 800302c <main+0x708>
 8002e36:	2300      	movs	r3, #0
 8002e38:	22ff      	movs	r2, #255	@ 0xff
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f7ff f939 	bl	80020b4 <main_led>
  HAL_Delay(500);
 8002e42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e46:	f002 fb1d 	bl	8005484 <HAL_Delay>

  main_led(0, 0, 255, 0, 1);
 8002e4a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002e4e:	2300      	movs	r3, #0
 8002e50:	22ff      	movs	r2, #255	@ 0xff
 8002e52:	2100      	movs	r1, #0
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7ff f92d 	bl	80020b4 <main_led>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(tim7_1ms_flag == 1)
 8002e5a:	4b75      	ldr	r3, [pc, #468]	@ (8003030 <main+0x70c>)
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d12f      	bne.n	8002ec2 <main+0x59e>
	  {
		  tim7_1ms_flag = 0;
 8002e62:	4b73      	ldr	r3, [pc, #460]	@ (8003030 <main+0x70c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	801a      	strh	r2, [r3, #0]
//					  ICM42688P.acc_z);

//==============================================================================
//
		  printf("Gyro X: %.6f, Y: %.6f, Z: %.6f || Accel X: %.6f, Y: %.6f, Z: %.6f\n",
				  ICM42688P.gyro_x,
 8002e68:	4b72      	ldr	r3, [pc, #456]	@ (8003034 <main+0x710>)
 8002e6a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
		  printf("Gyro X: %.6f, Y: %.6f, Z: %.6f || Accel X: %.6f, Y: %.6f, Z: %.6f\n",
 8002e6e:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
				  ICM42688P.gyro_y,
 8002e72:	4b70      	ldr	r3, [pc, #448]	@ (8003034 <main+0x710>)
 8002e74:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
		  printf("Gyro X: %.6f, Y: %.6f, Z: %.6f || Accel X: %.6f, Y: %.6f, Z: %.6f\n",
 8002e78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				  ICM42688P.gyro_z,
 8002e7c:	4b6d      	ldr	r3, [pc, #436]	@ (8003034 <main+0x710>)
 8002e7e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
		  printf("Gyro X: %.6f, Y: %.6f, Z: %.6f || Accel X: %.6f, Y: %.6f, Z: %.6f\n",
 8002e82:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
				  ICM42688P.acc_x,
 8002e86:	4b6b      	ldr	r3, [pc, #428]	@ (8003034 <main+0x710>)
 8002e88:	edd3 5a07 	vldr	s11, [r3, #28]
		  printf("Gyro X: %.6f, Y: %.6f, Z: %.6f || Accel X: %.6f, Y: %.6f, Z: %.6f\n",
 8002e8c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
				  ICM42688P.acc_y,
 8002e90:	4b68      	ldr	r3, [pc, #416]	@ (8003034 <main+0x710>)
 8002e92:	edd3 4a08 	vldr	s9, [r3, #32]
		  printf("Gyro X: %.6f, Y: %.6f, Z: %.6f || Accel X: %.6f, Y: %.6f, Z: %.6f\n",
 8002e96:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
				  ICM42688P.acc_z);
 8002e9a:	4b66      	ldr	r3, [pc, #408]	@ (8003034 <main+0x710>)
 8002e9c:	edd3 3a09 	vldr	s7, [r3, #36]	@ 0x24
		  printf("Gyro X: %.6f, Y: %.6f, Z: %.6f || Accel X: %.6f, Y: %.6f, Z: %.6f\n",
 8002ea0:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8002ea4:	ed8d 3b08 	vstr	d3, [sp, #32]
 8002ea8:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002eac:	ed8d 5b04 	vstr	d5, [sp, #16]
 8002eb0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002eb4:	ed8d 7b00 	vstr	d7, [sp]
 8002eb8:	ec53 2b12 	vmov	r2, r3, d2
 8002ebc:	485e      	ldr	r0, [pc, #376]	@ (8003038 <main+0x714>)
 8002ebe:	f00e fd2d 	bl	801191c <iprintf>

//		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
	  }

	  if(tim7_20ms_flag == 1)
 8002ec2:	4b5e      	ldr	r3, [pc, #376]	@ (800303c <main+0x718>)
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d102      	bne.n	8002ed0 <main+0x5ac>
	  {
		  tim7_20ms_flag = 0;
 8002eca:	4b5c      	ldr	r3, [pc, #368]	@ (800303c <main+0x718>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	801a      	strh	r2, [r3, #0]


	  }

	  if(tim7_50ms_flag == 1)
 8002ed0:	4b5b      	ldr	r3, [pc, #364]	@ (8003040 <main+0x71c>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d102      	bne.n	8002ede <main+0x5ba>
	  {
		  tim7_50ms_flag = 0;
 8002ed8:	4b59      	ldr	r3, [pc, #356]	@ (8003040 <main+0x71c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	801a      	strh	r2, [r3, #0]

//		  main_led(0, 0, 255, 0, 0);

	  }

	  if(tim7_100ms_flag == 1)
 8002ede:	4b59      	ldr	r3, [pc, #356]	@ (8003044 <main+0x720>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d106      	bne.n	8002ef4 <main+0x5d0>
	  {
		  tim7_100ms_flag = 0;
 8002ee6:	4b57      	ldr	r3, [pc, #348]	@ (8003044 <main+0x720>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	801a      	strh	r2, [r3, #0]

		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8002eec:	2120      	movs	r1, #32
 8002eee:	4856      	ldr	r0, [pc, #344]	@ (8003048 <main+0x724>)
 8002ef0:	f005 f95d 	bl	80081ae <HAL_GPIO_TogglePin>


	  }

	  if(tim7_200ms_flag == 1)
 8002ef4:	4b55      	ldr	r3, [pc, #340]	@ (800304c <main+0x728>)
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d102      	bne.n	8002f02 <main+0x5de>
	  {
		  tim7_200ms_flag = 0;
 8002efc:	4b53      	ldr	r3, [pc, #332]	@ (800304c <main+0x728>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	801a      	strh	r2, [r3, #0]

//		  main_led(0, 0, 255, 0, 1);
	  }

	  if(tim7_1000ms_flag == 1)
 8002f02:	4b53      	ldr	r3, [pc, #332]	@ (8003050 <main+0x72c>)
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d102      	bne.n	8002f10 <main+0x5ec>
	  {
		  tim7_1000ms_flag = 0;
 8002f0a:	4b51      	ldr	r3, [pc, #324]	@ (8003050 <main+0x72c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	801a      	strh	r2, [r3, #0]
//		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);

	  }


	  if(ICM42688P_DataReady() == 1)
 8002f10:	f7fe ffc8 	bl	8001ea4 <ICM42688P_DataReady>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d19f      	bne.n	8002e5a <main+0x536>
	  {

		  LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_4);
 8002f1a:	2110      	movs	r1, #16
 8002f1c:	484a      	ldr	r0, [pc, #296]	@ (8003048 <main+0x724>)
 8002f1e:	f7ff fc95 	bl	800284c <LL_GPIO_TogglePin>

		  ICM42688P_Get3AxisGyroRawData(&ICM42688P.gyro_x_raw);
 8002f22:	484c      	ldr	r0, [pc, #304]	@ (8003054 <main+0x730>)
 8002f24:	f7fe ff60 	bl	8001de8 <ICM42688P_Get3AxisGyroRawData>
		  ICM42688P_Get3AxisAccRawData(&ICM42688P.acc_x_raw);
 8002f28:	4842      	ldr	r0, [pc, #264]	@ (8003034 <main+0x710>)
 8002f2a:	f7fe ff8c 	bl	8001e46 <ICM42688P_Get3AxisAccRawData>

		  ICM42688P.gyro_x = ICM42688P.gyro_x_raw * 2000.f / 32768.f;
 8002f2e:	4b41      	ldr	r3, [pc, #260]	@ (8003034 <main+0x710>)
 8002f30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f34:	ee07 3a90 	vmov	s15, r3
 8002f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f3c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8003058 <main+0x734>
 8002f40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f44:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800305c <main+0x738>
 8002f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f4c:	4b39      	ldr	r3, [pc, #228]	@ (8003034 <main+0x710>)
 8002f4e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		  ICM42688P.gyro_y = ICM42688P.gyro_y_raw * 2000.f / 32768.f;
 8002f52:	4b38      	ldr	r3, [pc, #224]	@ (8003034 <main+0x710>)
 8002f54:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002f58:	ee07 3a90 	vmov	s15, r3
 8002f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f60:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8003058 <main+0x734>
 8002f64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f68:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 800305c <main+0x738>
 8002f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f70:	4b30      	ldr	r3, [pc, #192]	@ (8003034 <main+0x710>)
 8002f72:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		  ICM42688P.gyro_z = ICM42688P.gyro_z_raw * 2000.f / 32768.f;
 8002f76:	4b2f      	ldr	r3, [pc, #188]	@ (8003034 <main+0x710>)
 8002f78:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f84:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8003058 <main+0x734>
 8002f88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f8c:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800305c <main+0x738>
 8002f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f94:	4b27      	ldr	r3, [pc, #156]	@ (8003034 <main+0x710>)
 8002f96:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		  ICM42688P.gyro_x = -ICM42688P.gyro_x;
 8002f9a:	4b26      	ldr	r3, [pc, #152]	@ (8003034 <main+0x710>)
 8002f9c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002fa0:	eef1 7a67 	vneg.f32	s15, s15
 8002fa4:	4b23      	ldr	r3, [pc, #140]	@ (8003034 <main+0x710>)
 8002fa6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		  ICM42688P.gyro_z = -ICM42688P.gyro_z;
 8002faa:	4b22      	ldr	r3, [pc, #136]	@ (8003034 <main+0x710>)
 8002fac:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002fb0:	eef1 7a67 	vneg.f32	s15, s15
 8002fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8003034 <main+0x710>)
 8002fb6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		  ICM42688P.acc_x = ICM42688P.acc_x_raw * 0.0004883f;
 8002fba:	4b1e      	ldr	r3, [pc, #120]	@ (8003034 <main+0x710>)
 8002fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fc8:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8003060 <main+0x73c>
 8002fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fd0:	4b18      	ldr	r3, [pc, #96]	@ (8003034 <main+0x710>)
 8002fd2:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM42688P.acc_y = ICM42688P.acc_y_raw * 0.0004883f;
 8002fd6:	4b17      	ldr	r3, [pc, #92]	@ (8003034 <main+0x710>)
 8002fd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fdc:	ee07 3a90 	vmov	s15, r3
 8002fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe4:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8003060 <main+0x73c>
 8002fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fec:	4b11      	ldr	r3, [pc, #68]	@ (8003034 <main+0x710>)
 8002fee:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM42688P.acc_z = ICM42688P.acc_z_raw * 0.0004883f;
 8002ff2:	4b10      	ldr	r3, [pc, #64]	@ (8003034 <main+0x710>)
 8002ff4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ff8:	ee07 3a90 	vmov	s15, r3
 8002ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003000:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003060 <main+0x73c>
 8003004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003008:	4b0a      	ldr	r3, [pc, #40]	@ (8003034 <main+0x710>)
 800300a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24


		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 800300e:	2108      	movs	r1, #8
 8003010:	480d      	ldr	r0, [pc, #52]	@ (8003048 <main+0x724>)
 8003012:	f005 f8cc 	bl	80081ae <HAL_GPIO_TogglePin>
	  if(tim7_1ms_flag == 1)
 8003016:	e720      	b.n	8002e5a <main+0x536>
 8003018:	080169a8 	.word	0x080169a8
 800301c:	24000668 	.word	0x24000668
 8003020:	40001400 	.word	0x40001400
 8003024:	080169c8 	.word	0x080169c8
 8003028:	080169e0 	.word	0x080169e0
 800302c:	00000000 	.word	0x00000000
 8003030:	240005b2 	.word	0x240005b2
 8003034:	240001fc 	.word	0x240001fc
 8003038:	080169f4 	.word	0x080169f4
 800303c:	240005b6 	.word	0x240005b6
 8003040:	240005b8 	.word	0x240005b8
 8003044:	240005ba 	.word	0x240005ba
 8003048:	58021000 	.word	0x58021000
 800304c:	240005bc 	.word	0x240005bc
 8003050:	240005be 	.word	0x240005be
 8003054:	24000204 	.word	0x24000204
 8003058:	44fa0000 	.word	0x44fa0000
 800305c:	47000000 	.word	0x47000000
 8003060:	3a000142 	.word	0x3a000142

08003064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b09c      	sub	sp, #112	@ 0x70
 8003068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800306a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800306e:	224c      	movs	r2, #76	@ 0x4c
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f00e fe0c 	bl	8011c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	2220      	movs	r2, #32
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f00e fe06 	bl	8011c90 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003084:	2002      	movs	r0, #2
 8003086:	f007 ff35 	bl	800aef4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800308a:	2300      	movs	r3, #0
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	4b2b      	ldr	r3, [pc, #172]	@ (800313c <SystemClock_Config+0xd8>)
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	4a2a      	ldr	r2, [pc, #168]	@ (800313c <SystemClock_Config+0xd8>)
 8003094:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003098:	6193      	str	r3, [r2, #24]
 800309a:	4b28      	ldr	r3, [pc, #160]	@ (800313c <SystemClock_Config+0xd8>)
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80030a6:	bf00      	nop
 80030a8:	4b24      	ldr	r3, [pc, #144]	@ (800313c <SystemClock_Config+0xd8>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030b4:	d1f8      	bne.n	80030a8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030b6:	2301      	movs	r3, #1
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030c0:	2302      	movs	r3, #2
 80030c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030c4:	2302      	movs	r3, #2
 80030c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80030c8:	2302      	movs	r3, #2
 80030ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80030cc:	232c      	movs	r3, #44	@ 0x2c
 80030ce:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80030d0:	2301      	movs	r3, #1
 80030d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80030d4:	2303      	movs	r3, #3
 80030d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80030d8:	2302      	movs	r3, #2
 80030da:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80030dc:	230c      	movs	r3, #12
 80030de:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030ec:	4618      	mov	r0, r3
 80030ee:	f007 ff3b 	bl	800af68 <HAL_RCC_OscConfig>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80030f8:	f000 f84e 	bl	8003198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030fc:	233f      	movs	r3, #63	@ 0x3f
 80030fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003100:	2303      	movs	r3, #3
 8003102:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003108:	2308      	movs	r3, #8
 800310a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800310c:	2340      	movs	r3, #64	@ 0x40
 800310e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003110:	2340      	movs	r3, #64	@ 0x40
 8003112:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003114:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003118:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800311a:	2340      	movs	r3, #64	@ 0x40
 800311c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	2103      	movs	r1, #3
 8003122:	4618      	mov	r0, r3
 8003124:	f008 fafa 	bl	800b71c <HAL_RCC_ClockConfig>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800312e:	f000 f833 	bl	8003198 <Error_Handler>
  }
}
 8003132:	bf00      	nop
 8003134:	3770      	adds	r7, #112	@ 0x70
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	58024800 	.word	0x58024800

08003140 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003146:	463b      	mov	r3, r7
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003152:	f002 facb 	bl	80056ec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003156:	2301      	movs	r3, #1
 8003158:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800315a:	2300      	movs	r3, #0
 800315c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003162:	231f      	movs	r3, #31
 8003164:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003166:	2387      	movs	r3, #135	@ 0x87
 8003168:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800316a:	2300      	movs	r3, #0
 800316c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800316e:	2300      	movs	r3, #0
 8003170:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003172:	2301      	movs	r3, #1
 8003174:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003176:	2301      	movs	r3, #1
 8003178:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003182:	463b      	mov	r3, r7
 8003184:	4618      	mov	r0, r3
 8003186:	f002 fae9 	bl	800575c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800318a:	2004      	movs	r0, #4
 800318c:	f002 fac6 	bl	800571c <HAL_MPU_Enable>

}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800319c:	b672      	cpsid	i
}
 800319e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031a0:	bf00      	nop
 80031a2:	e7fd      	b.n	80031a0 <Error_Handler+0x8>

080031a4 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80031aa:	463b      	mov	r3, r7
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	60da      	str	r2, [r3, #12]
 80031b6:	611a      	str	r2, [r3, #16]
 80031b8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 80031ba:	4b28      	ldr	r3, [pc, #160]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 80031bc:	4a28      	ldr	r2, [pc, #160]	@ (8003260 <MX_OCTOSPI1_Init+0xbc>)
 80031be:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80031c0:	4b26      	ldr	r3, [pc, #152]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80031c6:	4b25      	ldr	r3, [pc, #148]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80031cc:	4b23      	ldr	r3, [pc, #140]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 80031d2:	4b22      	ldr	r3, [pc, #136]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 80031d4:	2217      	movs	r2, #23
 80031d6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80031d8:	4b20      	ldr	r3, [pc, #128]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 80031da:	2202      	movs	r2, #2
 80031dc:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80031de:	4b1f      	ldr	r3, [pc, #124]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_3;
 80031e4:	4b1d      	ldr	r3, [pc, #116]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80031ea:	4b1c      	ldr	r3, [pc, #112]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3-1;
 80031f0:	4b1a      	ldr	r3, [pc, #104]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 80031f2:	2202      	movs	r2, #2
 80031f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80031f6:	4b19      	ldr	r3, [pc, #100]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 80031f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80031fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80031fe:	4b17      	ldr	r3, [pc, #92]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 8003200:	2200      	movs	r2, #0
 8003202:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8003204:	4b15      	ldr	r3, [pc, #84]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800320a:	4b14      	ldr	r3, [pc, #80]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 800320c:	2208      	movs	r2, #8
 800320e:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8003210:	4b12      	ldr	r3, [pc, #72]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 8003212:	2200      	movs	r2, #0
 8003214:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8003216:	4b11      	ldr	r3, [pc, #68]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 8003218:	2200      	movs	r2, #0
 800321a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800321c:	480f      	ldr	r0, [pc, #60]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 800321e:	f006 fca3 	bl	8009b68 <HAL_OSPI_Init>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8003228:	f7ff ffb6 	bl	8003198 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800322c:	2301      	movs	r3, #1
 800322e:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8003230:	2301      	movs	r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8003234:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003238:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800323a:	463b      	mov	r3, r7
 800323c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003240:	4619      	mov	r1, r3
 8003242:	4806      	ldr	r0, [pc, #24]	@ (800325c <MX_OCTOSPI1_Init+0xb8>)
 8003244:	f006 fefe 	bl	800a044 <HAL_OSPIM_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 800324e:	f7ff ffa3 	bl	8003198 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8003252:	bf00      	nop
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	24000530 	.word	0x24000530
 8003260:	52005000 	.word	0x52005000

08003264 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b0bc      	sub	sp, #240	@ 0xf0
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800327c:	f107 0320 	add.w	r3, r7, #32
 8003280:	22b8      	movs	r2, #184	@ 0xb8
 8003282:	2100      	movs	r1, #0
 8003284:	4618      	mov	r0, r3
 8003286:	f00e fd03 	bl	8011c90 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a5d      	ldr	r2, [pc, #372]	@ (8003404 <HAL_OSPI_MspInit+0x1a0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	f040 80b2 	bne.w	80033fa <HAL_OSPI_MspInit+0x196>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003296:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032a6:	f107 0320 	add.w	r3, r7, #32
 80032aa:	4618      	mov	r0, r3
 80032ac:	f008 fd66 	bl	800bd7c <HAL_RCCEx_PeriphCLKConfig>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 80032b6:	f7ff ff6f 	bl	8003198 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80032ba:	4b53      	ldr	r3, [pc, #332]	@ (8003408 <HAL_OSPI_MspInit+0x1a4>)
 80032bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80032c0:	4a51      	ldr	r2, [pc, #324]	@ (8003408 <HAL_OSPI_MspInit+0x1a4>)
 80032c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80032c6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80032ca:	4b4f      	ldr	r3, [pc, #316]	@ (8003408 <HAL_OSPI_MspInit+0x1a4>)
 80032cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80032d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80032d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003408 <HAL_OSPI_MspInit+0x1a4>)
 80032da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80032de:	4a4a      	ldr	r2, [pc, #296]	@ (8003408 <HAL_OSPI_MspInit+0x1a4>)
 80032e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80032e8:	4b47      	ldr	r3, [pc, #284]	@ (8003408 <HAL_OSPI_MspInit+0x1a4>)
 80032ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80032ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032f6:	4b44      	ldr	r3, [pc, #272]	@ (8003408 <HAL_OSPI_MspInit+0x1a4>)
 80032f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032fc:	4a42      	ldr	r2, [pc, #264]	@ (8003408 <HAL_OSPI_MspInit+0x1a4>)
 80032fe:	f043 0310 	orr.w	r3, r3, #16
 8003302:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003306:	4b40      	ldr	r3, [pc, #256]	@ (8003408 <HAL_OSPI_MspInit+0x1a4>)
 8003308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003314:	4b3c      	ldr	r3, [pc, #240]	@ (8003408 <HAL_OSPI_MspInit+0x1a4>)
 8003316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800331a:	4a3b      	ldr	r2, [pc, #236]	@ (8003408 <HAL_OSPI_MspInit+0x1a4>)
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003324:	4b38      	ldr	r3, [pc, #224]	@ (8003408 <HAL_OSPI_MspInit+0x1a4>)
 8003326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003332:	4b35      	ldr	r3, [pc, #212]	@ (8003408 <HAL_OSPI_MspInit+0x1a4>)
 8003334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003338:	4a33      	ldr	r2, [pc, #204]	@ (8003408 <HAL_OSPI_MspInit+0x1a4>)
 800333a:	f043 0308 	orr.w	r3, r3, #8
 800333e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003342:	4b31      	ldr	r3, [pc, #196]	@ (8003408 <HAL_OSPI_MspInit+0x1a4>)
 8003344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PD13     ------> OCTOSPIM_P1_IO3
    PB6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003350:	2304      	movs	r3, #4
 8003352:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003356:	2302      	movs	r3, #2
 8003358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003362:	2303      	movs	r3, #3
 8003364:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8003368:	2309      	movs	r3, #9
 800336a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800336e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003372:	4619      	mov	r1, r3
 8003374:	4825      	ldr	r0, [pc, #148]	@ (800340c <HAL_OSPI_MspInit+0x1a8>)
 8003376:	f004 fd59 	bl	8007e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800337a:	2304      	movs	r3, #4
 800337c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338c:	2303      	movs	r3, #3
 800338e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8003392:	2309      	movs	r3, #9
 8003394:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003398:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800339c:	4619      	mov	r1, r3
 800339e:	481c      	ldr	r0, [pc, #112]	@ (8003410 <HAL_OSPI_MspInit+0x1ac>)
 80033a0:	f004 fd44 	bl	8007e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80033a4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80033a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b8:	2303      	movs	r3, #3
 80033ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80033be:	2309      	movs	r3, #9
 80033c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80033c8:	4619      	mov	r1, r3
 80033ca:	4812      	ldr	r0, [pc, #72]	@ (8003414 <HAL_OSPI_MspInit+0x1b0>)
 80033cc:	f004 fd2e 	bl	8007e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80033d0:	2340      	movs	r3, #64	@ 0x40
 80033d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e2:	2303      	movs	r3, #3
 80033e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80033e8:	230a      	movs	r3, #10
 80033ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ee:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80033f2:	4619      	mov	r1, r3
 80033f4:	4806      	ldr	r0, [pc, #24]	@ (8003410 <HAL_OSPI_MspInit+0x1ac>)
 80033f6:	f004 fd19 	bl	8007e2c <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 80033fa:	bf00      	nop
 80033fc:	37f0      	adds	r7, #240	@ 0xf0
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	52005000 	.word	0x52005000
 8003408:	58024400 	.word	0x58024400
 800340c:	58021000 	.word	0x58021000
 8003410:	58020400 	.word	0x58020400
 8003414:	58020c00 	.word	0x58020c00

08003418 <__NVIC_GetPriorityGrouping>:
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800341c:	4b04      	ldr	r3, [pc, #16]	@ (8003430 <__NVIC_GetPriorityGrouping+0x18>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	f003 0307 	and.w	r3, r3, #7
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_EnableIRQ>:
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800343e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003442:	2b00      	cmp	r3, #0
 8003444:	db0b      	blt.n	800345e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	4907      	ldr	r1, [pc, #28]	@ (800346c <__NVIC_EnableIRQ+0x38>)
 800344e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2001      	movs	r0, #1
 8003456:	fa00 f202 	lsl.w	r2, r0, r2
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_SetPriority>:
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800347c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003480:	2b00      	cmp	r3, #0
 8003482:	db0a      	blt.n	800349a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	490c      	ldr	r1, [pc, #48]	@ (80034bc <__NVIC_SetPriority+0x4c>)
 800348a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800348e:	0112      	lsls	r2, r2, #4
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	440b      	add	r3, r1
 8003494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003498:	e00a      	b.n	80034b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4908      	ldr	r1, [pc, #32]	@ (80034c0 <__NVIC_SetPriority+0x50>)
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	3b04      	subs	r3, #4
 80034a8:	0112      	lsls	r2, r2, #4
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	440b      	add	r3, r1
 80034ae:	761a      	strb	r2, [r3, #24]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000e100 	.word	0xe000e100
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <NVIC_EncodePriority>:
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	@ 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f1c3 0307 	rsb	r3, r3, #7
 80034de:	2b04      	cmp	r3, #4
 80034e0:	bf28      	it	cs
 80034e2:	2304      	movcs	r3, #4
 80034e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d902      	bls.n	80034f4 <NVIC_EncodePriority+0x30>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3b03      	subs	r3, #3
 80034f2:	e000      	b.n	80034f6 <NVIC_EncodePriority+0x32>
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800350c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	43d9      	mvns	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	4313      	orrs	r3, r2
}
 800351e:	4618      	mov	r0, r3
 8003520:	3724      	adds	r7, #36	@ 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <LL_SPI_SetStandard>:
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	60da      	str	r2, [r3, #12]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_SPI_SetFIFOThreshold>:
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	609a      	str	r2, [r3, #8]
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <LL_SPI_EnableNSSPulseMgt>:
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	60da      	str	r2, [r3, #12]
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <LL_AHB4_GRP1_EnableClock>:
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 80035a0:	4b0a      	ldr	r3, [pc, #40]	@ (80035cc <LL_AHB4_GRP1_EnableClock+0x34>)
 80035a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80035a6:	4909      	ldr	r1, [pc, #36]	@ (80035cc <LL_AHB4_GRP1_EnableClock+0x34>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80035b0:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <LL_AHB4_GRP1_EnableClock+0x34>)
 80035b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4013      	ands	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035bc:	68fb      	ldr	r3, [r7, #12]
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	58024400 	.word	0x58024400

080035d0 <LL_APB1_GRP1_EnableClock>:
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 80035d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003604 <LL_APB1_GRP1_EnableClock+0x34>)
 80035da:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80035de:	4909      	ldr	r1, [pc, #36]	@ (8003604 <LL_APB1_GRP1_EnableClock+0x34>)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 80035e8:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <LL_APB1_GRP1_EnableClock+0x34>)
 80035ea:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4013      	ands	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035f4:	68fb      	ldr	r3, [r7, #12]
}
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	58024400 	.word	0x58024400

08003608 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 8003618:	4a0d      	ldr	r2, [pc, #52]	@ (8003650 <LL_DMA_SetDataTransferDirection+0x48>)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4413      	add	r3, r2
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	4413      	add	r3, r2
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800362c:	4908      	ldr	r1, [pc, #32]	@ (8003650 <LL_DMA_SetDataTransferDirection+0x48>)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	440b      	add	r3, r1
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	4619      	mov	r1, r3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	440b      	add	r3, r1
 800363a:	4619      	mov	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
}
 8003642:	bf00      	nop
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	08016af8 	.word	0x08016af8

08003654 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8003664:	4a0d      	ldr	r2, [pc, #52]	@ (800369c <LL_DMA_SetMode+0x48>)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	4413      	add	r3, r2
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	4413      	add	r3, r2
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8003678:	4908      	ldr	r1, [pc, #32]	@ (800369c <LL_DMA_SetMode+0x48>)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	440b      	add	r3, r1
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	4619      	mov	r1, r3
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	440b      	add	r3, r1
 8003686:	4619      	mov	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	08016af8 	.word	0x08016af8

080036a0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 80036b0:	4a0d      	ldr	r2, [pc, #52]	@ (80036e8 <LL_DMA_SetPeriphIncMode+0x48>)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4413      	add	r3, r2
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	4413      	add	r3, r2
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80036c4:	4908      	ldr	r1, [pc, #32]	@ (80036e8 <LL_DMA_SetPeriphIncMode+0x48>)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	440b      	add	r3, r1
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	4619      	mov	r1, r3
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	440b      	add	r3, r1
 80036d2:	4619      	mov	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	08016af8 	.word	0x08016af8

080036ec <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 80036fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003734 <LL_DMA_SetMemoryIncMode+0x48>)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4413      	add	r3, r2
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	4413      	add	r3, r2
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003710:	4908      	ldr	r1, [pc, #32]	@ (8003734 <LL_DMA_SetMemoryIncMode+0x48>)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	440b      	add	r3, r1
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	4619      	mov	r1, r3
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	440b      	add	r3, r1
 800371e:	4619      	mov	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]
}
 8003726:	bf00      	nop
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	08016af8 	.word	0x08016af8

08003738 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 8003748:	4a0d      	ldr	r2, [pc, #52]	@ (8003780 <LL_DMA_SetPeriphSize+0x48>)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4413      	add	r3, r2
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	4413      	add	r3, r2
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800375c:	4908      	ldr	r1, [pc, #32]	@ (8003780 <LL_DMA_SetPeriphSize+0x48>)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	440b      	add	r3, r1
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	4619      	mov	r1, r3
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	440b      	add	r3, r1
 800376a:	4619      	mov	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4313      	orrs	r3, r2
 8003770:	600b      	str	r3, [r1, #0]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	08016af8 	.word	0x08016af8

08003784 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 8003794:	4a0d      	ldr	r2, [pc, #52]	@ (80037cc <LL_DMA_SetMemorySize+0x48>)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4413      	add	r3, r2
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	4413      	add	r3, r2
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80037a8:	4908      	ldr	r1, [pc, #32]	@ (80037cc <LL_DMA_SetMemorySize+0x48>)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	440b      	add	r3, r1
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	4619      	mov	r1, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	440b      	add	r3, r1
 80037b6:	4619      	mov	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	08016af8 	.word	0x08016af8

080037d0 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 80037e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003818 <LL_DMA_SetStreamPriorityLevel+0x48>)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4413      	add	r3, r2
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	4413      	add	r3, r2
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037f4:	4908      	ldr	r1, [pc, #32]	@ (8003818 <LL_DMA_SetStreamPriorityLevel+0x48>)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	440b      	add	r3, r1
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	4619      	mov	r1, r3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	440b      	add	r3, r1
 8003802:	4619      	mov	r1, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	08016af8 	.word	0x08016af8

0800381c <LL_DMA_SetPeriphRequest>:
  *
  * @note   (*) Availability depends on devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Request)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	4b12      	ldr	r3, [pc, #72]	@ (8003874 <LL_DMA_SetPeriphRequest+0x58>)
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4911      	ldr	r1, [pc, #68]	@ (8003878 <LL_DMA_SetPeriphRequest+0x5c>)
 8003834:	428a      	cmp	r2, r1
 8003836:	d101      	bne.n	800383c <LL_DMA_SetPeriphRequest+0x20>
 8003838:	2200      	movs	r2, #0
 800383a:	e000      	b.n	800383e <LL_DMA_SetPeriphRequest+0x22>
 800383c:	2220      	movs	r2, #32
 800383e:	4413      	add	r3, r2
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	4b0a      	ldr	r3, [pc, #40]	@ (8003874 <LL_DMA_SetPeriphRequest+0x58>)
 800384a:	440b      	add	r3, r1
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	68f9      	ldr	r1, [r7, #12]
 8003850:	4809      	ldr	r0, [pc, #36]	@ (8003878 <LL_DMA_SetPeriphRequest+0x5c>)
 8003852:	4281      	cmp	r1, r0
 8003854:	d101      	bne.n	800385a <LL_DMA_SetPeriphRequest+0x3e>
 8003856:	2100      	movs	r1, #0
 8003858:	e000      	b.n	800385c <LL_DMA_SetPeriphRequest+0x40>
 800385a:	2120      	movs	r1, #32
 800385c:	440b      	add	r3, r1
 800385e:	4619      	mov	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
}
 8003866:	bf00      	nop
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	10008200 	.word	0x10008200
 8003878:	40020000 	.word	0x40020000

0800387c <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 800388a:	4a0c      	ldr	r2, [pc, #48]	@ (80038bc <LL_DMA_DisableFifoMode+0x40>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4413      	add	r3, r2
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	4908      	ldr	r1, [pc, #32]	@ (80038bc <LL_DMA_DisableFifoMode+0x40>)
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	440a      	add	r2, r1
 80038a0:	7812      	ldrb	r2, [r2, #0]
 80038a2:	4611      	mov	r1, r2
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	440a      	add	r2, r1
 80038a8:	f023 0304 	bic.w	r3, r3, #4
 80038ac:	6153      	str	r3, [r2, #20]
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	08016af8 	.word	0x08016af8

080038c0 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b0be      	sub	sp, #248	@ 0xf8
 80038c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80038c6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80038ca:	2228      	movs	r2, #40	@ 0x28
 80038cc:	2100      	movs	r1, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f00e f9de 	bl	8011c90 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
 80038e4:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038e6:	463b      	mov	r3, r7
 80038e8:	22b8      	movs	r2, #184	@ 0xb8
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f00e f9cf 	bl	8011c90 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80038f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80038fe:	2300      	movs	r3, #0
 8003900:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003902:	463b      	mov	r3, r7
 8003904:	4618      	mov	r0, r3
 8003906:	f008 fa39 	bl	800bd7c <HAL_RCCEx_PeriphCLKConfig>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_SPI2_Init+0x54>
  {
    Error_Handler();
 8003910:	f7ff fc42 	bl	8003198 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8003914:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003918:	f7ff fe5a 	bl	80035d0 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 800391c:	2004      	movs	r0, #4
 800391e:	f7ff fe3b 	bl	8003598 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 8003922:	2002      	movs	r0, #2
 8003924:	f7ff fe38 	bl	8003598 <LL_AHB4_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC1   ------> SPI2_MOSI
  PC2_C   ------> SPI2_MISO
  PB13   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8003928:	2306      	movs	r3, #6
 800392a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800392e:	2302      	movs	r3, #2
 8003930:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003934:	2300      	movs	r3, #0
 8003936:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800393a:	2300      	movs	r3, #0
 800393c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003946:	2305      	movs	r3, #5
 8003948:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800394c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003950:	4619      	mov	r1, r3
 8003952:	485f      	ldr	r0, [pc, #380]	@ (8003ad0 <MX_SPI2_Init+0x210>)
 8003954:	f00b fb6a 	bl	800f02c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8003958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800395c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003960:	2302      	movs	r3, #2
 8003962:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003966:	2300      	movs	r3, #0
 8003968:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003972:	2300      	movs	r3, #0
 8003974:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003978:	2305      	movs	r3, #5
 800397a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003982:	4619      	mov	r1, r3
 8003984:	4853      	ldr	r0, [pc, #332]	@ (8003ad4 <MX_SPI2_Init+0x214>)
 8003986:	f00b fb51 	bl	800f02c <LL_GPIO_Init>

  /* SPI2 DMA Init */

  /* SPI2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_5, LL_DMAMUX1_REQ_SPI2_RX);
 800398a:	2227      	movs	r2, #39	@ 0x27
 800398c:	2105      	movs	r1, #5
 800398e:	4852      	ldr	r0, [pc, #328]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 8003990:	f7ff ff44 	bl	800381c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003994:	2200      	movs	r2, #0
 8003996:	2105      	movs	r1, #5
 8003998:	484f      	ldr	r0, [pc, #316]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 800399a:	f7ff fe35 	bl	8003608 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 800399e:	2200      	movs	r2, #0
 80039a0:	2105      	movs	r1, #5
 80039a2:	484d      	ldr	r0, [pc, #308]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 80039a4:	f7ff ff14 	bl	80037d0 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 80039a8:	2200      	movs	r2, #0
 80039aa:	2105      	movs	r1, #5
 80039ac:	484a      	ldr	r0, [pc, #296]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 80039ae:	f7ff fe51 	bl	8003654 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 80039b2:	2200      	movs	r2, #0
 80039b4:	2105      	movs	r1, #5
 80039b6:	4848      	ldr	r0, [pc, #288]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 80039b8:	f7ff fe72 	bl	80036a0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 80039bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039c0:	2105      	movs	r1, #5
 80039c2:	4845      	ldr	r0, [pc, #276]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 80039c4:	f7ff fe92 	bl	80036ec <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 80039c8:	2200      	movs	r2, #0
 80039ca:	2105      	movs	r1, #5
 80039cc:	4842      	ldr	r0, [pc, #264]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 80039ce:	f7ff feb3 	bl	8003738 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 80039d2:	2200      	movs	r2, #0
 80039d4:	2105      	movs	r1, #5
 80039d6:	4840      	ldr	r0, [pc, #256]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 80039d8:	f7ff fed4 	bl	8003784 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 80039dc:	2105      	movs	r1, #5
 80039de:	483e      	ldr	r0, [pc, #248]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 80039e0:	f7ff ff4c 	bl	800387c <LL_DMA_DisableFifoMode>

  /* SPI2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_6, LL_DMAMUX1_REQ_SPI2_TX);
 80039e4:	2228      	movs	r2, #40	@ 0x28
 80039e6:	2106      	movs	r1, #6
 80039e8:	483b      	ldr	r0, [pc, #236]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 80039ea:	f7ff ff17 	bl	800381c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80039ee:	2240      	movs	r2, #64	@ 0x40
 80039f0:	2106      	movs	r1, #6
 80039f2:	4839      	ldr	r0, [pc, #228]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 80039f4:	f7ff fe08 	bl	8003608 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 80039f8:	2200      	movs	r2, #0
 80039fa:	2106      	movs	r1, #6
 80039fc:	4836      	ldr	r0, [pc, #216]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 80039fe:	f7ff fee7 	bl	80037d0 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8003a02:	2200      	movs	r2, #0
 8003a04:	2106      	movs	r1, #6
 8003a06:	4834      	ldr	r0, [pc, #208]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 8003a08:	f7ff fe24 	bl	8003654 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2106      	movs	r1, #6
 8003a10:	4831      	ldr	r0, [pc, #196]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 8003a12:	f7ff fe45 	bl	80036a0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8003a16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a1a:	2106      	movs	r1, #6
 8003a1c:	482e      	ldr	r0, [pc, #184]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 8003a1e:	f7ff fe65 	bl	80036ec <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8003a22:	2200      	movs	r2, #0
 8003a24:	2106      	movs	r1, #6
 8003a26:	482c      	ldr	r0, [pc, #176]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 8003a28:	f7ff fe86 	bl	8003738 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2106      	movs	r1, #6
 8003a30:	4829      	ldr	r0, [pc, #164]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 8003a32:	f7ff fea7 	bl	8003784 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 8003a36:	2106      	movs	r1, #6
 8003a38:	4827      	ldr	r0, [pc, #156]	@ (8003ad8 <MX_SPI2_Init+0x218>)
 8003a3a:	f7ff ff1f 	bl	800387c <LL_DMA_DisableFifoMode>

  /* SPI2 interrupt Init */
  NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003a3e:	f7ff fceb 	bl	8003418 <__NVIC_GetPriorityGrouping>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2200      	movs	r2, #0
 8003a46:	2100      	movs	r1, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff fd3b 	bl	80034c4 <NVIC_EncodePriority>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4619      	mov	r1, r3
 8003a52:	2024      	movs	r0, #36	@ 0x24
 8003a54:	f7ff fd0c 	bl	8003470 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI2_IRQn);
 8003a58:	2024      	movs	r0, #36	@ 0x24
 8003a5a:	f7ff fceb 	bl	8003434 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003a64:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003a6c:	2307      	movs	r3, #7
 8003a6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003a72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003a7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003a82:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8003a8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  SPI_InitStruct.CRCPoly = 0x0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003aa4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	480c      	ldr	r0, [pc, #48]	@ (8003adc <MX_SPI2_Init+0x21c>)
 8003aac:	f00c fa10 	bl	800fed0 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	480a      	ldr	r0, [pc, #40]	@ (8003adc <MX_SPI2_Init+0x21c>)
 8003ab4:	f7ff fd39 	bl	800352a <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI2, LL_SPI_FIFO_TH_01DATA);
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4808      	ldr	r0, [pc, #32]	@ (8003adc <MX_SPI2_Init+0x21c>)
 8003abc:	f7ff fd48 	bl	8003550 <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI2);
 8003ac0:	4806      	ldr	r0, [pc, #24]	@ (8003adc <MX_SPI2_Init+0x21c>)
 8003ac2:	f7ff fd58 	bl	8003576 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003ac6:	bf00      	nop
 8003ac8:	37f8      	adds	r7, #248	@ 0xf8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	58020800 	.word	0x58020800
 8003ad4:	58020400 	.word	0x58020400
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	40003800 	.word	0x40003800

08003ae0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b0be      	sub	sp, #248	@ 0xf8
 8003ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003ae6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8003aea:	2228      	movs	r2, #40	@ 0x28
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f00e f8ce 	bl	8011c90 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	611a      	str	r2, [r3, #16]
 8003b04:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b06:	463b      	mov	r3, r7
 8003b08:	22b8      	movs	r2, #184	@ 0xb8
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f00e f8bf 	bl	8011c90 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003b12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b22:	463b      	mov	r3, r7
 8003b24:	4618      	mov	r0, r3
 8003b26:	f008 f929 	bl	800bd7c <HAL_RCCEx_PeriphCLKConfig>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <MX_SPI3_Init+0x54>
  {
    Error_Handler();
 8003b30:	f7ff fb32 	bl	8003198 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8003b34:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003b38:	f7ff fd4a 	bl	80035d0 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8003b3c:	2004      	movs	r0, #4
 8003b3e:	f7ff fd2b 	bl	8003598 <LL_AHB4_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8003b42:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003b46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003b62:	2306      	movs	r3, #6
 8003b64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b68:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4852      	ldr	r0, [pc, #328]	@ (8003cb8 <MX_SPI3_Init+0x1d8>)
 8003b70:	f00b fa5c 	bl	800f02c <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_4, LL_DMAMUX1_REQ_SPI3_RX);
 8003b74:	223d      	movs	r2, #61	@ 0x3d
 8003b76:	2104      	movs	r1, #4
 8003b78:	4850      	ldr	r0, [pc, #320]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003b7a:	f7ff fe4f 	bl	800381c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2104      	movs	r1, #4
 8003b82:	484e      	ldr	r0, [pc, #312]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003b84:	f7ff fd40 	bl	8003608 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2104      	movs	r1, #4
 8003b8c:	484b      	ldr	r0, [pc, #300]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003b8e:	f7ff fe1f 	bl	80037d0 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 8003b92:	2200      	movs	r2, #0
 8003b94:	2104      	movs	r1, #4
 8003b96:	4849      	ldr	r0, [pc, #292]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003b98:	f7ff fd5c 	bl	8003654 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2104      	movs	r1, #4
 8003ba0:	4846      	ldr	r0, [pc, #280]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003ba2:	f7ff fd7d 	bl	80036a0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 8003ba6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003baa:	2104      	movs	r1, #4
 8003bac:	4843      	ldr	r0, [pc, #268]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003bae:	f7ff fd9d 	bl	80036ec <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2104      	movs	r1, #4
 8003bb6:	4841      	ldr	r0, [pc, #260]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003bb8:	f7ff fdbe 	bl	8003738 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2104      	movs	r1, #4
 8003bc0:	483e      	ldr	r0, [pc, #248]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003bc2:	f7ff fddf 	bl	8003784 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_4);
 8003bc6:	2104      	movs	r1, #4
 8003bc8:	483c      	ldr	r0, [pc, #240]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003bca:	f7ff fe57 	bl	800387c <LL_DMA_DisableFifoMode>

  /* SPI3_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_3, LL_DMAMUX1_REQ_SPI3_TX);
 8003bce:	223e      	movs	r2, #62	@ 0x3e
 8003bd0:	2103      	movs	r1, #3
 8003bd2:	483a      	ldr	r0, [pc, #232]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003bd4:	f7ff fe22 	bl	800381c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003bd8:	2240      	movs	r2, #64	@ 0x40
 8003bda:	2103      	movs	r1, #3
 8003bdc:	4837      	ldr	r0, [pc, #220]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003bde:	f7ff fd13 	bl	8003608 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_3, LL_DMA_PRIORITY_LOW);
 8003be2:	2200      	movs	r2, #0
 8003be4:	2103      	movs	r1, #3
 8003be6:	4835      	ldr	r0, [pc, #212]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003be8:	f7ff fdf2 	bl	80037d0 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MODE_NORMAL);
 8003bec:	2200      	movs	r2, #0
 8003bee:	2103      	movs	r1, #3
 8003bf0:	4832      	ldr	r0, [pc, #200]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003bf2:	f7ff fd2f 	bl	8003654 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_PERIPH_NOINCREMENT);
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2103      	movs	r1, #3
 8003bfa:	4830      	ldr	r0, [pc, #192]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003bfc:	f7ff fd50 	bl	80036a0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MEMORY_INCREMENT);
 8003c00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c04:	2103      	movs	r1, #3
 8003c06:	482d      	ldr	r0, [pc, #180]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003c08:	f7ff fd70 	bl	80036ec <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_3, LL_DMA_PDATAALIGN_BYTE);
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2103      	movs	r1, #3
 8003c10:	482a      	ldr	r0, [pc, #168]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003c12:	f7ff fd91 	bl	8003738 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_3, LL_DMA_MDATAALIGN_BYTE);
 8003c16:	2200      	movs	r2, #0
 8003c18:	2103      	movs	r1, #3
 8003c1a:	4828      	ldr	r0, [pc, #160]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003c1c:	f7ff fdb2 	bl	8003784 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_3);
 8003c20:	2103      	movs	r1, #3
 8003c22:	4826      	ldr	r0, [pc, #152]	@ (8003cbc <MX_SPI3_Init+0x1dc>)
 8003c24:	f7ff fe2a 	bl	800387c <LL_DMA_DisableFifoMode>

  /* SPI3 interrupt Init */
  NVIC_SetPriority(SPI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003c28:	f7ff fbf6 	bl	8003418 <__NVIC_GetPriorityGrouping>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2100      	movs	r1, #0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fc46 	bl	80034c4 <NVIC_EncodePriority>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	2033      	movs	r0, #51	@ 0x33
 8003c3e:	f7ff fc17 	bl	8003470 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI3_IRQn);
 8003c42:	2033      	movs	r0, #51	@ 0x33
 8003c44:	f7ff fbf6 	bl	8003434 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003c4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003c52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003c56:	2307      	movs	r3, #7
 8003c58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003c5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003c64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003c6c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003c70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8003c74:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003c78:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  SPI_InitStruct.CRCPoly = 0x0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8003c8e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8003c92:	4619      	mov	r1, r3
 8003c94:	480a      	ldr	r0, [pc, #40]	@ (8003cc0 <MX_SPI3_Init+0x1e0>)
 8003c96:	f00c f91b 	bl	800fed0 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4808      	ldr	r0, [pc, #32]	@ (8003cc0 <MX_SPI3_Init+0x1e0>)
 8003c9e:	f7ff fc44 	bl	800352a <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI3, LL_SPI_FIFO_TH_01DATA);
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4806      	ldr	r0, [pc, #24]	@ (8003cc0 <MX_SPI3_Init+0x1e0>)
 8003ca6:	f7ff fc53 	bl	8003550 <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI3);
 8003caa:	4805      	ldr	r0, [pc, #20]	@ (8003cc0 <MX_SPI3_Init+0x1e0>)
 8003cac:	f7ff fc63 	bl	8003576 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003cb0:	bf00      	nop
 8003cb2:	37f8      	adds	r7, #248	@ 0xf8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	58020800 	.word	0x58020800
 8003cbc:	40020000 	.word	0x40020000
 8003cc0:	40003c00 	.word	0x40003c00

08003cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cca:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf4 <HAL_MspInit+0x30>)
 8003ccc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003cd0:	4a08      	ldr	r2, [pc, #32]	@ (8003cf4 <HAL_MspInit+0x30>)
 8003cd2:	f043 0302 	orr.w	r3, r3, #2
 8003cd6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003cda:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <HAL_MspInit+0x30>)
 8003cdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	58024400 	.word	0x58024400

08003cf8 <LL_TIM_ClearFlag_UPDATE>:
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f06f 0201 	mvn.w	r2, #1
 8003d06:	611a      	str	r2, [r3, #16]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <LL_USART_IsActiveFlag_FE>:
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d101      	bne.n	8003d52 <LL_USART_IsActiveFlag_FE+0x18>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <LL_USART_IsActiveFlag_FE+0x1a>
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <LL_USART_IsActiveFlag_NE>:
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d101      	bne.n	8003d78 <LL_USART_IsActiveFlag_NE+0x18>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <LL_USART_IsActiveFlag_NE+0x1a>
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <LL_USART_IsActiveFlag_ORE>:
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d101      	bne.n	8003d9e <LL_USART_IsActiveFlag_ORE+0x18>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <LL_USART_IsActiveFlag_ORE+0x1a>
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d101      	bne.n	8003dc4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_USART_ClearFlag_FE>:
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	621a      	str	r2, [r3, #32]
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <LL_USART_ClearFlag_NE>:
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2204      	movs	r2, #4
 8003df8:	621a      	str	r2, [r3, #32]
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <LL_USART_ClearFlag_ORE>:
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2208      	movs	r2, #8
 8003e12:	621a      	str	r2, [r3, #32]
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <LL_USART_ReceiveData8>:
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	b2db      	uxtb	r3, r3
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e3e:	bf00      	nop
 8003e40:	e7fd      	b.n	8003e3e <NMI_Handler+0x4>

08003e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e42:	b480      	push	{r7}
 8003e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e46:	bf00      	nop
 8003e48:	e7fd      	b.n	8003e46 <HardFault_Handler+0x4>

08003e4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e4e:	bf00      	nop
 8003e50:	e7fd      	b.n	8003e4e <MemManage_Handler+0x4>

08003e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e52:	b480      	push	{r7}
 8003e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e56:	bf00      	nop
 8003e58:	e7fd      	b.n	8003e56 <BusFault_Handler+0x4>

08003e5a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e5e:	bf00      	nop
 8003e60:	e7fd      	b.n	8003e5e <UsageFault_Handler+0x4>

08003e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e62:	b480      	push	{r7}
 8003e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e66:	bf00      	nop
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e82:	bf00      	nop
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e90:	f001 fad8 	bl	8005444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e94:	bf00      	nop
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003e9c:	4802      	ldr	r0, [pc, #8]	@ (8003ea8 <DMA1_Stream0_IRQHandler+0x10>)
 8003e9e:	f002 fca5 	bl	80067ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	240003c4 	.word	0x240003c4

08003eac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003eb0:	4802      	ldr	r0, [pc, #8]	@ (8003ebc <DMA1_Stream1_IRQHandler+0x10>)
 8003eb2:	f002 fc9b 	bl	80067ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003eb6:	bf00      	nop
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	2400043c 	.word	0x2400043c

08003ec0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003ec4:	4802      	ldr	r0, [pc, #8]	@ (8003ed0 <DMA1_Stream2_IRQHandler+0x10>)
 8003ec6:	f002 fc91 	bl	80067ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	240006b4 	.word	0x240006b4

08003ed4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003ef4:	bf00      	nop
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003efe:	b480      	push	{r7}
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003f10:	4802      	ldr	r0, [pc, #8]	@ (8003f1c <I2C1_EV_IRQHandler+0x10>)
 8003f12:	f004 fc11 	bl	8008738 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	24000370 	.word	0x24000370

08003f20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003f24:	4802      	ldr	r0, [pc, #8]	@ (8003f30 <I2C1_ER_IRQHandler+0x10>)
 8003f26:	f004 fc21 	bl	800876c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	24000370 	.word	0x24000370

08003f34 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0

  /* USER CODE END SPI2_IRQn 0 */
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003f42:	b480      	push	{r7}
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE END SPI3_IRQn 0 */
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

	static unsigned char cnt = 0;
	//    static uint8_t ibus_rx_buf[32];

	if (LL_USART_IsActiveFlag_RXNE(UART4)) {
 8003f54:	483f      	ldr	r0, [pc, #252]	@ (8004054 <UART4_IRQHandler+0x104>)
 8003f56:	f7ff ff29 	bl	8003dac <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d059      	beq.n	8004014 <UART4_IRQHandler+0xc4>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8003f60:	483c      	ldr	r0, [pc, #240]	@ (8004054 <UART4_IRQHandler+0x104>)
 8003f62:	f7ff ff5d 	bl	8003e20 <LL_USART_ReceiveData8>
 8003f66:	4603      	mov	r3, r0
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8004058 <UART4_IRQHandler+0x108>)
 8003f6c:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 8003f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800405c <UART4_IRQHandler+0x10c>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]

		switch (cnt) {
 8003f74:	4b3a      	ldr	r3, [pc, #232]	@ (8004060 <UART4_IRQHandler+0x110>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b1f      	cmp	r3, #31
 8003f7a:	d02e      	beq.n	8003fda <UART4_IRQHandler+0x8a>
 8003f7c:	2b1f      	cmp	r3, #31
 8003f7e:	dc3a      	bgt.n	8003ff6 <UART4_IRQHandler+0xa6>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <UART4_IRQHandler+0x3a>
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d012      	beq.n	8003fae <UART4_IRQHandler+0x5e>
 8003f88:	e035      	b.n	8003ff6 <UART4_IRQHandler+0xa6>
		case 0:
			if (uart4_rx_data == 0x20) {
 8003f8a:	4b33      	ldr	r3, [pc, #204]	@ (8004058 <UART4_IRQHandler+0x108>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d13f      	bne.n	8004012 <UART4_IRQHandler+0xc2>
				ibus_rx_buf[cnt] = uart4_rx_data;
 8003f92:	4b33      	ldr	r3, [pc, #204]	@ (8004060 <UART4_IRQHandler+0x110>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	4b2f      	ldr	r3, [pc, #188]	@ (8004058 <UART4_IRQHandler+0x108>)
 8003f9a:	7819      	ldrb	r1, [r3, #0]
 8003f9c:	4b31      	ldr	r3, [pc, #196]	@ (8004064 <UART4_IRQHandler+0x114>)
 8003f9e:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8004060 <UART4_IRQHandler+0x110>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8004060 <UART4_IRQHandler+0x110>)
 8003faa:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003fac:	e031      	b.n	8004012 <UART4_IRQHandler+0xc2>
		case 1:
			if (uart4_rx_data == 0x40) {
 8003fae:	4b2a      	ldr	r3, [pc, #168]	@ (8004058 <UART4_IRQHandler+0x108>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b40      	cmp	r3, #64	@ 0x40
 8003fb4:	d10d      	bne.n	8003fd2 <UART4_IRQHandler+0x82>
				ibus_rx_buf[cnt] = uart4_rx_data;
 8003fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8004060 <UART4_IRQHandler+0x110>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4b26      	ldr	r3, [pc, #152]	@ (8004058 <UART4_IRQHandler+0x108>)
 8003fbe:	7819      	ldrb	r1, [r3, #0]
 8003fc0:	4b28      	ldr	r3, [pc, #160]	@ (8004064 <UART4_IRQHandler+0x114>)
 8003fc2:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003fc4:	4b26      	ldr	r3, [pc, #152]	@ (8004060 <UART4_IRQHandler+0x110>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	4b24      	ldr	r3, [pc, #144]	@ (8004060 <UART4_IRQHandler+0x110>)
 8003fce:	701a      	strb	r2, [r3, #0]
			} else {
				cnt = 0; // Reset if invalid header
			}
			break;
 8003fd0:	e020      	b.n	8004014 <UART4_IRQHandler+0xc4>
				cnt = 0; // Reset if invalid header
 8003fd2:	4b23      	ldr	r3, [pc, #140]	@ (8004060 <UART4_IRQHandler+0x110>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]
			break;
 8003fd8:	e01c      	b.n	8004014 <UART4_IRQHandler+0xc4>
		case 31:
			ibus_rx_buf[cnt] = uart4_rx_data;
 8003fda:	4b21      	ldr	r3, [pc, #132]	@ (8004060 <UART4_IRQHandler+0x110>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8004058 <UART4_IRQHandler+0x108>)
 8003fe2:	7819      	ldrb	r1, [r3, #0]
 8003fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8004064 <UART4_IRQHandler+0x114>)
 8003fe6:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8004060 <UART4_IRQHandler+0x110>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8003fee:	4b1e      	ldr	r3, [pc, #120]	@ (8004068 <UART4_IRQHandler+0x118>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	701a      	strb	r2, [r3, #0]
			//	                for (uint8_t i = 0; i < len; i++) {
			//	                    while (!LL_USART_IsActiveFlag_TXE(USART6)) {}
			//	//                    LL_USART_TransmitData8(USART6, buffer[i]);
			//	                }
			//	                while (!LL_USART_IsActiveFlag_TC(USART6)) {}
			break;
 8003ff4:	e00e      	b.n	8004014 <UART4_IRQHandler+0xc4>
		default:
			ibus_rx_buf[cnt] = uart4_rx_data;
 8003ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8004060 <UART4_IRQHandler+0x110>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4b16      	ldr	r3, [pc, #88]	@ (8004058 <UART4_IRQHandler+0x108>)
 8003ffe:	7819      	ldrb	r1, [r3, #0]
 8004000:	4b18      	ldr	r3, [pc, #96]	@ (8004064 <UART4_IRQHandler+0x114>)
 8004002:	5499      	strb	r1, [r3, r2]
			cnt++;
 8004004:	4b16      	ldr	r3, [pc, #88]	@ (8004060 <UART4_IRQHandler+0x110>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	3301      	adds	r3, #1
 800400a:	b2da      	uxtb	r2, r3
 800400c:	4b14      	ldr	r3, [pc, #80]	@ (8004060 <UART4_IRQHandler+0x110>)
 800400e:	701a      	strb	r2, [r3, #0]
			break;
 8004010:	e000      	b.n	8004014 <UART4_IRQHandler+0xc4>
			break;
 8004012:	bf00      	nop
		}
	}

	// Handle UART errors
	if (LL_USART_IsActiveFlag_ORE(UART4) || LL_USART_IsActiveFlag_FE(UART4) || LL_USART_IsActiveFlag_NE(UART4)) {
 8004014:	480f      	ldr	r0, [pc, #60]	@ (8004054 <UART4_IRQHandler+0x104>)
 8004016:	f7ff feb6 	bl	8003d86 <LL_USART_IsActiveFlag_ORE>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10b      	bne.n	8004038 <UART4_IRQHandler+0xe8>
 8004020:	480c      	ldr	r0, [pc, #48]	@ (8004054 <UART4_IRQHandler+0x104>)
 8004022:	f7ff fe8a 	bl	8003d3a <LL_USART_IsActiveFlag_FE>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d105      	bne.n	8004038 <UART4_IRQHandler+0xe8>
 800402c:	4809      	ldr	r0, [pc, #36]	@ (8004054 <UART4_IRQHandler+0x104>)
 800402e:	f7ff fe97 	bl	8003d60 <LL_USART_IsActiveFlag_NE>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00b      	beq.n	8004050 <UART4_IRQHandler+0x100>
		LL_USART_ClearFlag_ORE(UART4);
 8004038:	4806      	ldr	r0, [pc, #24]	@ (8004054 <UART4_IRQHandler+0x104>)
 800403a:	f7ff fee4 	bl	8003e06 <LL_USART_ClearFlag_ORE>
		LL_USART_ClearFlag_FE(UART4);
 800403e:	4805      	ldr	r0, [pc, #20]	@ (8004054 <UART4_IRQHandler+0x104>)
 8004040:	f7ff fec7 	bl	8003dd2 <LL_USART_ClearFlag_FE>
		LL_USART_ClearFlag_NE(UART4);
 8004044:	4803      	ldr	r0, [pc, #12]	@ (8004054 <UART4_IRQHandler+0x104>)
 8004046:	f7ff fed1 	bl	8003dec <LL_USART_ClearFlag_NE>
		cnt = 0; // Reset buffer on error
 800404a:	4b05      	ldr	r3, [pc, #20]	@ (8004060 <UART4_IRQHandler+0x110>)
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004050:	bf00      	nop
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40004c00 	.word	0x40004c00
 8004058:	2400058d 	.word	0x2400058d
 800405c:	2400058c 	.word	0x2400058c
 8004060:	24000608 	.word	0x24000608
 8004064:	24000590 	.word	0x24000590
 8004068:	240005b0 	.word	0x240005b0

0800406c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
	static uint16_t tim7_50ms_count   = 0;
	static uint16_t tim7_100ms_count  = 0;
	static uint16_t tim7_200ms_count  = 0;
	static uint16_t tim7_1000ms_count = 0;

	if (LL_TIM_IsActiveFlag_UPDATE(TIM7))
 8004070:	483d      	ldr	r0, [pc, #244]	@ (8004168 <TIM7_IRQHandler+0xfc>)
 8004072:	f7ff fe4f 	bl	8003d14 <LL_TIM_IsActiveFlag_UPDATE>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d073      	beq.n	8004164 <TIM7_IRQHandler+0xf8>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 800407c:	483a      	ldr	r0, [pc, #232]	@ (8004168 <TIM7_IRQHandler+0xfc>)
 800407e:	f7ff fe3b 	bl	8003cf8 <LL_TIM_ClearFlag_UPDATE>

		if (++tim7_1ms_count >= 1) {
 8004082:	4b3a      	ldr	r3, [pc, #232]	@ (800416c <TIM7_IRQHandler+0x100>)
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	3301      	adds	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	4b38      	ldr	r3, [pc, #224]	@ (800416c <TIM7_IRQHandler+0x100>)
 800408c:	801a      	strh	r2, [r3, #0]
 800408e:	4b37      	ldr	r3, [pc, #220]	@ (800416c <TIM7_IRQHandler+0x100>)
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <TIM7_IRQHandler+0x36>
			tim7_1ms_count = 0;
 8004096:	4b35      	ldr	r3, [pc, #212]	@ (800416c <TIM7_IRQHandler+0x100>)
 8004098:	2200      	movs	r2, #0
 800409a:	801a      	strh	r2, [r3, #0]
			tim7_1ms_flag = 1;
 800409c:	4b34      	ldr	r3, [pc, #208]	@ (8004170 <TIM7_IRQHandler+0x104>)
 800409e:	2201      	movs	r2, #1
 80040a0:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_2ms_count >= 2) {
 80040a2:	4b34      	ldr	r3, [pc, #208]	@ (8004174 <TIM7_IRQHandler+0x108>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	3301      	adds	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	4b32      	ldr	r3, [pc, #200]	@ (8004174 <TIM7_IRQHandler+0x108>)
 80040ac:	801a      	strh	r2, [r3, #0]
 80040ae:	4b31      	ldr	r3, [pc, #196]	@ (8004174 <TIM7_IRQHandler+0x108>)
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d905      	bls.n	80040c2 <TIM7_IRQHandler+0x56>
			tim7_2ms_count = 0;
 80040b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004174 <TIM7_IRQHandler+0x108>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	801a      	strh	r2, [r3, #0]
			tim7_2ms_flag = 1;
 80040bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004178 <TIM7_IRQHandler+0x10c>)
 80040be:	2201      	movs	r2, #1
 80040c0:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_20ms_count >= 20) {
 80040c2:	4b2e      	ldr	r3, [pc, #184]	@ (800417c <TIM7_IRQHandler+0x110>)
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	3301      	adds	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	4b2c      	ldr	r3, [pc, #176]	@ (800417c <TIM7_IRQHandler+0x110>)
 80040cc:	801a      	strh	r2, [r3, #0]
 80040ce:	4b2b      	ldr	r3, [pc, #172]	@ (800417c <TIM7_IRQHandler+0x110>)
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	2b13      	cmp	r3, #19
 80040d4:	d905      	bls.n	80040e2 <TIM7_IRQHandler+0x76>
			tim7_20ms_count = 0;
 80040d6:	4b29      	ldr	r3, [pc, #164]	@ (800417c <TIM7_IRQHandler+0x110>)
 80040d8:	2200      	movs	r2, #0
 80040da:	801a      	strh	r2, [r3, #0]
			tim7_20ms_flag = 1;
 80040dc:	4b28      	ldr	r3, [pc, #160]	@ (8004180 <TIM7_IRQHandler+0x114>)
 80040de:	2201      	movs	r2, #1
 80040e0:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_50ms_count >= 50) {
 80040e2:	4b28      	ldr	r3, [pc, #160]	@ (8004184 <TIM7_IRQHandler+0x118>)
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	3301      	adds	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	4b26      	ldr	r3, [pc, #152]	@ (8004184 <TIM7_IRQHandler+0x118>)
 80040ec:	801a      	strh	r2, [r3, #0]
 80040ee:	4b25      	ldr	r3, [pc, #148]	@ (8004184 <TIM7_IRQHandler+0x118>)
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	2b31      	cmp	r3, #49	@ 0x31
 80040f4:	d905      	bls.n	8004102 <TIM7_IRQHandler+0x96>
			tim7_50ms_count = 0;
 80040f6:	4b23      	ldr	r3, [pc, #140]	@ (8004184 <TIM7_IRQHandler+0x118>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	801a      	strh	r2, [r3, #0]
			tim7_50ms_flag = 1;
 80040fc:	4b22      	ldr	r3, [pc, #136]	@ (8004188 <TIM7_IRQHandler+0x11c>)
 80040fe:	2201      	movs	r2, #1
 8004100:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_100ms_count >= 100) {
 8004102:	4b22      	ldr	r3, [pc, #136]	@ (800418c <TIM7_IRQHandler+0x120>)
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	4b20      	ldr	r3, [pc, #128]	@ (800418c <TIM7_IRQHandler+0x120>)
 800410c:	801a      	strh	r2, [r3, #0]
 800410e:	4b1f      	ldr	r3, [pc, #124]	@ (800418c <TIM7_IRQHandler+0x120>)
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	2b63      	cmp	r3, #99	@ 0x63
 8004114:	d905      	bls.n	8004122 <TIM7_IRQHandler+0xb6>
			tim7_100ms_count = 0;
 8004116:	4b1d      	ldr	r3, [pc, #116]	@ (800418c <TIM7_IRQHandler+0x120>)
 8004118:	2200      	movs	r2, #0
 800411a:	801a      	strh	r2, [r3, #0]
			tim7_100ms_flag = 1;
 800411c:	4b1c      	ldr	r3, [pc, #112]	@ (8004190 <TIM7_IRQHandler+0x124>)
 800411e:	2201      	movs	r2, #1
 8004120:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_200ms_count >= 200) {
 8004122:	4b1c      	ldr	r3, [pc, #112]	@ (8004194 <TIM7_IRQHandler+0x128>)
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	3301      	adds	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	4b1a      	ldr	r3, [pc, #104]	@ (8004194 <TIM7_IRQHandler+0x128>)
 800412c:	801a      	strh	r2, [r3, #0]
 800412e:	4b19      	ldr	r3, [pc, #100]	@ (8004194 <TIM7_IRQHandler+0x128>)
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	2bc7      	cmp	r3, #199	@ 0xc7
 8004134:	d905      	bls.n	8004142 <TIM7_IRQHandler+0xd6>
			tim7_200ms_count = 0;
 8004136:	4b17      	ldr	r3, [pc, #92]	@ (8004194 <TIM7_IRQHandler+0x128>)
 8004138:	2200      	movs	r2, #0
 800413a:	801a      	strh	r2, [r3, #0]
			tim7_200ms_flag = 1;
 800413c:	4b16      	ldr	r3, [pc, #88]	@ (8004198 <TIM7_IRQHandler+0x12c>)
 800413e:	2201      	movs	r2, #1
 8004140:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_1000ms_count >= 1000) {
 8004142:	4b16      	ldr	r3, [pc, #88]	@ (800419c <TIM7_IRQHandler+0x130>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	3301      	adds	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	4b14      	ldr	r3, [pc, #80]	@ (800419c <TIM7_IRQHandler+0x130>)
 800414c:	801a      	strh	r2, [r3, #0]
 800414e:	4b13      	ldr	r3, [pc, #76]	@ (800419c <TIM7_IRQHandler+0x130>)
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004156:	d305      	bcc.n	8004164 <TIM7_IRQHandler+0xf8>
			tim7_1000ms_count = 0;
 8004158:	4b10      	ldr	r3, [pc, #64]	@ (800419c <TIM7_IRQHandler+0x130>)
 800415a:	2200      	movs	r2, #0
 800415c:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag = 1;
 800415e:	4b10      	ldr	r3, [pc, #64]	@ (80041a0 <TIM7_IRQHandler+0x134>)
 8004160:	2201      	movs	r2, #1
 8004162:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004164:	bf00      	nop
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40001400 	.word	0x40001400
 800416c:	2400060a 	.word	0x2400060a
 8004170:	240005b2 	.word	0x240005b2
 8004174:	2400060c 	.word	0x2400060c
 8004178:	240005b4 	.word	0x240005b4
 800417c:	2400060e 	.word	0x2400060e
 8004180:	240005b6 	.word	0x240005b6
 8004184:	24000610 	.word	0x24000610
 8004188:	240005b8 	.word	0x240005b8
 800418c:	24000612 	.word	0x24000612
 8004190:	240005ba 	.word	0x240005ba
 8004194:	24000614 	.word	0x24000614
 8004198:	240005bc 	.word	0x240005bc
 800419c:	24000616 	.word	0x24000616
 80041a0:	240005be 	.word	0x240005be

080041a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

	if (LL_USART_IsActiveFlag_RXNE(USART6)) {
 80041aa:	482b      	ldr	r0, [pc, #172]	@ (8004258 <USART6_IRQHandler+0xb4>)
 80041ac:	f7ff fdfe 	bl	8003dac <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d04b      	beq.n	800424e <USART6_IRQHandler+0xaa>
		char c = LL_USART_ReceiveData8(USART6);
 80041b6:	4828      	ldr	r0, [pc, #160]	@ (8004258 <USART6_IRQHandler+0xb4>)
 80041b8:	f7ff fe32 	bl	8003e20 <LL_USART_ReceiveData8>
 80041bc:	4603      	mov	r3, r0
 80041be:	71fb      	strb	r3, [r7, #7]
		last_char_time = HAL_GetTick();  // update timestamp
 80041c0:	f001 f954 	bl	800546c <HAL_GetTick>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4a25      	ldr	r2, [pc, #148]	@ (800425c <USART6_IRQHandler+0xb8>)
 80041c8:	6013      	str	r3, [r2, #0]

		if (!cmd_receiving) {
 80041ca:	4b25      	ldr	r3, [pc, #148]	@ (8004260 <USART6_IRQHandler+0xbc>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f083 0301 	eor.w	r3, r3, #1
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <USART6_IRQHandler+0x4a>
			if (c == '[') {
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	2b5b      	cmp	r3, #91	@ 0x5b
 80041de:	d136      	bne.n	800424e <USART6_IRQHandler+0xaa>
				cmd_receiving = true;
 80041e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004260 <USART6_IRQHandler+0xbc>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 80041e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004264 <USART6_IRQHandler+0xc0>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80041ec:	e02f      	b.n	800424e <USART6_IRQHandler+0xaa>
			if (c == ']') {
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	2b5d      	cmp	r3, #93	@ 0x5d
 80041f2:	d115      	bne.n	8004220 <USART6_IRQHandler+0x7c>
				if (cmd_index < CMD_BUFFER_SIZE) {
 80041f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004264 <USART6_IRQHandler+0xc0>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80041fc:	d809      	bhi.n	8004212 <USART6_IRQHandler+0x6e>
					cmd_buffer[cmd_index] = '\0';  // null-terminate
 80041fe:	4b19      	ldr	r3, [pc, #100]	@ (8004264 <USART6_IRQHandler+0xc0>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	461a      	mov	r2, r3
 8004206:	4b18      	ldr	r3, [pc, #96]	@ (8004268 <USART6_IRQHandler+0xc4>)
 8004208:	2100      	movs	r1, #0
 800420a:	5499      	strb	r1, [r3, r2]
					process_command((char*)cmd_buffer);  // parse the command
 800420c:	4816      	ldr	r0, [pc, #88]	@ (8004268 <USART6_IRQHandler+0xc4>)
 800420e:	f7fc fb27 	bl	8000860 <process_command>
				cmd_receiving = false;
 8004212:	4b13      	ldr	r3, [pc, #76]	@ (8004260 <USART6_IRQHandler+0xbc>)
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 8004218:	4b12      	ldr	r3, [pc, #72]	@ (8004264 <USART6_IRQHandler+0xc0>)
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
}
 800421e:	e016      	b.n	800424e <USART6_IRQHandler+0xaa>
				if (cmd_index < CMD_BUFFER_SIZE - 1) {
 8004220:	4b10      	ldr	r3, [pc, #64]	@ (8004264 <USART6_IRQHandler+0xc0>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b3e      	cmp	r3, #62	@ 0x3e
 8004228:	d80b      	bhi.n	8004242 <USART6_IRQHandler+0x9e>
					cmd_buffer[cmd_index++] = c;
 800422a:	4b0e      	ldr	r3, [pc, #56]	@ (8004264 <USART6_IRQHandler+0xc0>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	b2d1      	uxtb	r1, r2
 8004234:	4a0b      	ldr	r2, [pc, #44]	@ (8004264 <USART6_IRQHandler+0xc0>)
 8004236:	7011      	strb	r1, [r2, #0]
 8004238:	4619      	mov	r1, r3
 800423a:	4a0b      	ldr	r2, [pc, #44]	@ (8004268 <USART6_IRQHandler+0xc4>)
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	5453      	strb	r3, [r2, r1]
}
 8004240:	e005      	b.n	800424e <USART6_IRQHandler+0xaa>
					cmd_receiving = false;
 8004242:	4b07      	ldr	r3, [pc, #28]	@ (8004260 <USART6_IRQHandler+0xbc>)
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
					cmd_index = 0;
 8004248:	4b06      	ldr	r3, [pc, #24]	@ (8004264 <USART6_IRQHandler+0xc0>)
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40011400 	.word	0x40011400
 800425c:	24000604 	.word	0x24000604
 8004260:	24000601 	.word	0x24000601
 8004264:	24000600 	.word	0x24000600
 8004268:	240005c0 	.word	0x240005c0

0800426c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  return 1;
 8004270:	2301      	movs	r3, #1
}
 8004272:	4618      	mov	r0, r3
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <_kill>:

int _kill(int pid, int sig)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004286:	f00d fd75 	bl	8011d74 <__errno>
 800428a:	4603      	mov	r3, r0
 800428c:	2216      	movs	r2, #22
 800428e:	601a      	str	r2, [r3, #0]
  return -1;
 8004290:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <_exit>:

void _exit (int status)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80042a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ffe7 	bl	800427c <_kill>
  while (1) {}    /* Make sure we hang here */
 80042ae:	bf00      	nop
 80042b0:	e7fd      	b.n	80042ae <_exit+0x12>

080042b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b086      	sub	sp, #24
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e00a      	b.n	80042da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80042c4:	f3af 8000 	nop.w
 80042c8:	4601      	mov	r1, r0
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	60ba      	str	r2, [r7, #8]
 80042d0:	b2ca      	uxtb	r2, r1
 80042d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3301      	adds	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	429a      	cmp	r2, r3
 80042e0:	dbf0      	blt.n	80042c4 <_read+0x12>
  }

  return len;
 80042e2:	687b      	ldr	r3, [r7, #4]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <_close>:
  }
  return len;
}

int _close(int file)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004314:	605a      	str	r2, [r3, #4]
  return 0;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <_isatty>:

int _isatty(int file)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800432c:	2301      	movs	r3, #1
}
 800432e:	4618      	mov	r0, r3
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800435c:	4a14      	ldr	r2, [pc, #80]	@ (80043b0 <_sbrk+0x5c>)
 800435e:	4b15      	ldr	r3, [pc, #84]	@ (80043b4 <_sbrk+0x60>)
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004368:	4b13      	ldr	r3, [pc, #76]	@ (80043b8 <_sbrk+0x64>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004370:	4b11      	ldr	r3, [pc, #68]	@ (80043b8 <_sbrk+0x64>)
 8004372:	4a12      	ldr	r2, [pc, #72]	@ (80043bc <_sbrk+0x68>)
 8004374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004376:	4b10      	ldr	r3, [pc, #64]	@ (80043b8 <_sbrk+0x64>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4413      	add	r3, r2
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	429a      	cmp	r2, r3
 8004382:	d207      	bcs.n	8004394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004384:	f00d fcf6 	bl	8011d74 <__errno>
 8004388:	4603      	mov	r3, r0
 800438a:	220c      	movs	r2, #12
 800438c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800438e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004392:	e009      	b.n	80043a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004394:	4b08      	ldr	r3, [pc, #32]	@ (80043b8 <_sbrk+0x64>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800439a:	4b07      	ldr	r3, [pc, #28]	@ (80043b8 <_sbrk+0x64>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4413      	add	r3, r2
 80043a2:	4a05      	ldr	r2, [pc, #20]	@ (80043b8 <_sbrk+0x64>)
 80043a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043a6:	68fb      	ldr	r3, [r7, #12]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	24050000 	.word	0x24050000
 80043b4:	00000400 	.word	0x00000400
 80043b8:	24000618 	.word	0x24000618
 80043bc:	24000880 	.word	0x24000880

080043c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043c4:	4b3e      	ldr	r3, [pc, #248]	@ (80044c0 <SystemInit+0x100>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ca:	4a3d      	ldr	r2, [pc, #244]	@ (80044c0 <SystemInit+0x100>)
 80043cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80043d4:	4b3b      	ldr	r3, [pc, #236]	@ (80044c4 <SystemInit+0x104>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	2b06      	cmp	r3, #6
 80043de:	d807      	bhi.n	80043f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80043e0:	4b38      	ldr	r3, [pc, #224]	@ (80044c4 <SystemInit+0x104>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f023 030f 	bic.w	r3, r3, #15
 80043e8:	4a36      	ldr	r2, [pc, #216]	@ (80044c4 <SystemInit+0x104>)
 80043ea:	f043 0307 	orr.w	r3, r3, #7
 80043ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80043f0:	4b35      	ldr	r3, [pc, #212]	@ (80044c8 <SystemInit+0x108>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a34      	ldr	r2, [pc, #208]	@ (80044c8 <SystemInit+0x108>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80043fc:	4b32      	ldr	r3, [pc, #200]	@ (80044c8 <SystemInit+0x108>)
 80043fe:	2200      	movs	r2, #0
 8004400:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004402:	4b31      	ldr	r3, [pc, #196]	@ (80044c8 <SystemInit+0x108>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4930      	ldr	r1, [pc, #192]	@ (80044c8 <SystemInit+0x108>)
 8004408:	4b30      	ldr	r3, [pc, #192]	@ (80044cc <SystemInit+0x10c>)
 800440a:	4013      	ands	r3, r2
 800440c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800440e:	4b2d      	ldr	r3, [pc, #180]	@ (80044c4 <SystemInit+0x104>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800441a:	4b2a      	ldr	r3, [pc, #168]	@ (80044c4 <SystemInit+0x104>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 030f 	bic.w	r3, r3, #15
 8004422:	4a28      	ldr	r2, [pc, #160]	@ (80044c4 <SystemInit+0x104>)
 8004424:	f043 0307 	orr.w	r3, r3, #7
 8004428:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800442a:	4b27      	ldr	r3, [pc, #156]	@ (80044c8 <SystemInit+0x108>)
 800442c:	2200      	movs	r2, #0
 800442e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004430:	4b25      	ldr	r3, [pc, #148]	@ (80044c8 <SystemInit+0x108>)
 8004432:	2200      	movs	r2, #0
 8004434:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004436:	4b24      	ldr	r3, [pc, #144]	@ (80044c8 <SystemInit+0x108>)
 8004438:	2200      	movs	r2, #0
 800443a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800443c:	4b22      	ldr	r3, [pc, #136]	@ (80044c8 <SystemInit+0x108>)
 800443e:	4a24      	ldr	r2, [pc, #144]	@ (80044d0 <SystemInit+0x110>)
 8004440:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004442:	4b21      	ldr	r3, [pc, #132]	@ (80044c8 <SystemInit+0x108>)
 8004444:	4a23      	ldr	r2, [pc, #140]	@ (80044d4 <SystemInit+0x114>)
 8004446:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004448:	4b1f      	ldr	r3, [pc, #124]	@ (80044c8 <SystemInit+0x108>)
 800444a:	4a23      	ldr	r2, [pc, #140]	@ (80044d8 <SystemInit+0x118>)
 800444c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800444e:	4b1e      	ldr	r3, [pc, #120]	@ (80044c8 <SystemInit+0x108>)
 8004450:	2200      	movs	r2, #0
 8004452:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004454:	4b1c      	ldr	r3, [pc, #112]	@ (80044c8 <SystemInit+0x108>)
 8004456:	4a20      	ldr	r2, [pc, #128]	@ (80044d8 <SystemInit+0x118>)
 8004458:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800445a:	4b1b      	ldr	r3, [pc, #108]	@ (80044c8 <SystemInit+0x108>)
 800445c:	2200      	movs	r2, #0
 800445e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004460:	4b19      	ldr	r3, [pc, #100]	@ (80044c8 <SystemInit+0x108>)
 8004462:	4a1d      	ldr	r2, [pc, #116]	@ (80044d8 <SystemInit+0x118>)
 8004464:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004466:	4b18      	ldr	r3, [pc, #96]	@ (80044c8 <SystemInit+0x108>)
 8004468:	2200      	movs	r2, #0
 800446a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800446c:	4b16      	ldr	r3, [pc, #88]	@ (80044c8 <SystemInit+0x108>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a15      	ldr	r2, [pc, #84]	@ (80044c8 <SystemInit+0x108>)
 8004472:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004476:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004478:	4b13      	ldr	r3, [pc, #76]	@ (80044c8 <SystemInit+0x108>)
 800447a:	2200      	movs	r2, #0
 800447c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800447e:	4b12      	ldr	r3, [pc, #72]	@ (80044c8 <SystemInit+0x108>)
 8004480:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004484:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d113      	bne.n	80044b4 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800448c:	4b0e      	ldr	r3, [pc, #56]	@ (80044c8 <SystemInit+0x108>)
 800448e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004492:	4a0d      	ldr	r2, [pc, #52]	@ (80044c8 <SystemInit+0x108>)
 8004494:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004498:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800449c:	4b0f      	ldr	r3, [pc, #60]	@ (80044dc <SystemInit+0x11c>)
 800449e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80044a2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80044a4:	4b08      	ldr	r3, [pc, #32]	@ (80044c8 <SystemInit+0x108>)
 80044a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80044aa:	4a07      	ldr	r2, [pc, #28]	@ (80044c8 <SystemInit+0x108>)
 80044ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	e000ed00 	.word	0xe000ed00
 80044c4:	52002000 	.word	0x52002000
 80044c8:	58024400 	.word	0x58024400
 80044cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80044d0:	02020200 	.word	0x02020200
 80044d4:	01ff0000 	.word	0x01ff0000
 80044d8:	01010280 	.word	0x01010280
 80044dc:	52004000 	.word	0x52004000

080044e0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80044e4:	4b09      	ldr	r3, [pc, #36]	@ (800450c <ExitRun0Mode+0x2c>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4a08      	ldr	r2, [pc, #32]	@ (800450c <ExitRun0Mode+0x2c>)
 80044ea:	f043 0302 	orr.w	r3, r3, #2
 80044ee:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80044f0:	bf00      	nop
 80044f2:	4b06      	ldr	r3, [pc, #24]	@ (800450c <ExitRun0Mode+0x2c>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f9      	beq.n	80044f2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80044fe:	bf00      	nop
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	58024800 	.word	0x58024800

08004510 <__NVIC_GetPriorityGrouping>:
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004514:	4b04      	ldr	r3, [pc, #16]	@ (8004528 <__NVIC_GetPriorityGrouping+0x18>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	0a1b      	lsrs	r3, r3, #8
 800451a:	f003 0307 	and.w	r3, r3, #7
}
 800451e:	4618      	mov	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	e000ed00 	.word	0xe000ed00

0800452c <__NVIC_EnableIRQ>:
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800453a:	2b00      	cmp	r3, #0
 800453c:	db0b      	blt.n	8004556 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	f003 021f 	and.w	r2, r3, #31
 8004544:	4907      	ldr	r1, [pc, #28]	@ (8004564 <__NVIC_EnableIRQ+0x38>)
 8004546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2001      	movs	r0, #1
 800454e:	fa00 f202 	lsl.w	r2, r0, r2
 8004552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	e000e100 	.word	0xe000e100

08004568 <__NVIC_SetPriority>:
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004574:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004578:	2b00      	cmp	r3, #0
 800457a:	db0a      	blt.n	8004592 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	b2da      	uxtb	r2, r3
 8004580:	490c      	ldr	r1, [pc, #48]	@ (80045b4 <__NVIC_SetPriority+0x4c>)
 8004582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004586:	0112      	lsls	r2, r2, #4
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	440b      	add	r3, r1
 800458c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004590:	e00a      	b.n	80045a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	4908      	ldr	r1, [pc, #32]	@ (80045b8 <__NVIC_SetPriority+0x50>)
 8004598:	88fb      	ldrh	r3, [r7, #6]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	3b04      	subs	r3, #4
 80045a0:	0112      	lsls	r2, r2, #4
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	440b      	add	r3, r1
 80045a6:	761a      	strb	r2, [r3, #24]
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	e000e100 	.word	0xe000e100
 80045b8:	e000ed00 	.word	0xe000ed00

080045bc <NVIC_EncodePriority>:
{
 80045bc:	b480      	push	{r7}
 80045be:	b089      	sub	sp, #36	@ 0x24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f1c3 0307 	rsb	r3, r3, #7
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	bf28      	it	cs
 80045da:	2304      	movcs	r3, #4
 80045dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3304      	adds	r3, #4
 80045e2:	2b06      	cmp	r3, #6
 80045e4:	d902      	bls.n	80045ec <NVIC_EncodePriority+0x30>
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	3b03      	subs	r3, #3
 80045ea:	e000      	b.n	80045ee <NVIC_EncodePriority+0x32>
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43da      	mvns	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	401a      	ands	r2, r3
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004604:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	fa01 f303 	lsl.w	r3, r1, r3
 800460e:	43d9      	mvns	r1, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004614:	4313      	orrs	r3, r2
}
 8004616:	4618      	mov	r0, r3
 8004618:	3724      	adds	r7, #36	@ 0x24
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <LL_TIM_EnableARRPreload>:
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	601a      	str	r2, [r3, #0]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <LL_TIM_OC_EnableFast>:
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d028      	beq.n	80046a6 <LL_TIM_OC_EnableFast+0x62>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b04      	cmp	r3, #4
 8004658:	d023      	beq.n	80046a2 <LL_TIM_OC_EnableFast+0x5e>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b10      	cmp	r3, #16
 800465e:	d01e      	beq.n	800469e <LL_TIM_OC_EnableFast+0x5a>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b40      	cmp	r3, #64	@ 0x40
 8004664:	d019      	beq.n	800469a <LL_TIM_OC_EnableFast+0x56>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800466c:	d013      	beq.n	8004696 <LL_TIM_OC_EnableFast+0x52>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004674:	d00d      	beq.n	8004692 <LL_TIM_OC_EnableFast+0x4e>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467c:	d007      	beq.n	800468e <LL_TIM_OC_EnableFast+0x4a>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004684:	d101      	bne.n	800468a <LL_TIM_OC_EnableFast+0x46>
 8004686:	2307      	movs	r3, #7
 8004688:	e00e      	b.n	80046a8 <LL_TIM_OC_EnableFast+0x64>
 800468a:	2308      	movs	r3, #8
 800468c:	e00c      	b.n	80046a8 <LL_TIM_OC_EnableFast+0x64>
 800468e:	2306      	movs	r3, #6
 8004690:	e00a      	b.n	80046a8 <LL_TIM_OC_EnableFast+0x64>
 8004692:	2305      	movs	r3, #5
 8004694:	e008      	b.n	80046a8 <LL_TIM_OC_EnableFast+0x64>
 8004696:	2304      	movs	r3, #4
 8004698:	e006      	b.n	80046a8 <LL_TIM_OC_EnableFast+0x64>
 800469a:	2303      	movs	r3, #3
 800469c:	e004      	b.n	80046a8 <LL_TIM_OC_EnableFast+0x64>
 800469e:	2302      	movs	r3, #2
 80046a0:	e002      	b.n	80046a8 <LL_TIM_OC_EnableFast+0x64>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <LL_TIM_OC_EnableFast+0x64>
 80046a6:	2300      	movs	r3, #0
 80046a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3318      	adds	r3, #24
 80046ae:	4619      	mov	r1, r3
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	4a0a      	ldr	r2, [pc, #40]	@ (80046dc <LL_TIM_OC_EnableFast+0x98>)
 80046b4:	5cd3      	ldrb	r3, [r2, r3]
 80046b6:	440b      	add	r3, r1
 80046b8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	4907      	ldr	r1, [pc, #28]	@ (80046e0 <LL_TIM_OC_EnableFast+0x9c>)
 80046c2:	5ccb      	ldrb	r3, [r1, r3]
 80046c4:	4619      	mov	r1, r3
 80046c6:	2304      	movs	r3, #4
 80046c8:	408b      	lsls	r3, r1
 80046ca:	431a      	orrs	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	601a      	str	r2, [r3, #0]
}
 80046d0:	bf00      	nop
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	08016b10 	.word	0x08016b10
 80046e0:	08016b1c 	.word	0x08016b1c

080046e4 <LL_TIM_OC_EnablePreload>:
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d028      	beq.n	8004746 <LL_TIM_OC_EnablePreload+0x62>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d023      	beq.n	8004742 <LL_TIM_OC_EnablePreload+0x5e>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d01e      	beq.n	800473e <LL_TIM_OC_EnablePreload+0x5a>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b40      	cmp	r3, #64	@ 0x40
 8004704:	d019      	beq.n	800473a <LL_TIM_OC_EnablePreload+0x56>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800470c:	d013      	beq.n	8004736 <LL_TIM_OC_EnablePreload+0x52>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004714:	d00d      	beq.n	8004732 <LL_TIM_OC_EnablePreload+0x4e>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800471c:	d007      	beq.n	800472e <LL_TIM_OC_EnablePreload+0x4a>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004724:	d101      	bne.n	800472a <LL_TIM_OC_EnablePreload+0x46>
 8004726:	2307      	movs	r3, #7
 8004728:	e00e      	b.n	8004748 <LL_TIM_OC_EnablePreload+0x64>
 800472a:	2308      	movs	r3, #8
 800472c:	e00c      	b.n	8004748 <LL_TIM_OC_EnablePreload+0x64>
 800472e:	2306      	movs	r3, #6
 8004730:	e00a      	b.n	8004748 <LL_TIM_OC_EnablePreload+0x64>
 8004732:	2305      	movs	r3, #5
 8004734:	e008      	b.n	8004748 <LL_TIM_OC_EnablePreload+0x64>
 8004736:	2304      	movs	r3, #4
 8004738:	e006      	b.n	8004748 <LL_TIM_OC_EnablePreload+0x64>
 800473a:	2303      	movs	r3, #3
 800473c:	e004      	b.n	8004748 <LL_TIM_OC_EnablePreload+0x64>
 800473e:	2302      	movs	r3, #2
 8004740:	e002      	b.n	8004748 <LL_TIM_OC_EnablePreload+0x64>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <LL_TIM_OC_EnablePreload+0x64>
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3318      	adds	r3, #24
 800474e:	4619      	mov	r1, r3
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	4a0a      	ldr	r2, [pc, #40]	@ (800477c <LL_TIM_OC_EnablePreload+0x98>)
 8004754:	5cd3      	ldrb	r3, [r2, r3]
 8004756:	440b      	add	r3, r1
 8004758:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	4907      	ldr	r1, [pc, #28]	@ (8004780 <LL_TIM_OC_EnablePreload+0x9c>)
 8004762:	5ccb      	ldrb	r3, [r1, r3]
 8004764:	4619      	mov	r1, r3
 8004766:	2308      	movs	r3, #8
 8004768:	408b      	lsls	r3, r1
 800476a:	431a      	orrs	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	601a      	str	r2, [r3, #0]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	08016b10 	.word	0x08016b10
 8004780:	08016b1c 	.word	0x08016b1c

08004784 <LL_TIM_SetClockSource>:
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	4b06      	ldr	r3, [pc, #24]	@ (80047ac <LL_TIM_SetClockSource+0x28>)
 8004794:	4013      	ands	r3, r2
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	609a      	str	r2, [r3, #8]
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	fffebff8 	.word	0xfffebff8

080047b0 <LL_TIM_SetTriggerOutput>:
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	605a      	str	r2, [r3, #4]
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <LL_TIM_DisableMasterSlaveMode>:
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	609a      	str	r2, [r3, #8]
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
	...

080047f8 <LL_AHB4_GRP1_EnableClock>:
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8004800:	4b0a      	ldr	r3, [pc, #40]	@ (800482c <LL_AHB4_GRP1_EnableClock+0x34>)
 8004802:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004806:	4909      	ldr	r1, [pc, #36]	@ (800482c <LL_AHB4_GRP1_EnableClock+0x34>)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8004810:	4b06      	ldr	r3, [pc, #24]	@ (800482c <LL_AHB4_GRP1_EnableClock+0x34>)
 8004812:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4013      	ands	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800481c:	68fb      	ldr	r3, [r7, #12]
}
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	58024400 	.word	0x58024400

08004830 <LL_APB1_GRP1_EnableClock>:
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8004838:	4b0a      	ldr	r3, [pc, #40]	@ (8004864 <LL_APB1_GRP1_EnableClock+0x34>)
 800483a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800483e:	4909      	ldr	r1, [pc, #36]	@ (8004864 <LL_APB1_GRP1_EnableClock+0x34>)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8004848:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <LL_APB1_GRP1_EnableClock+0x34>)
 800484a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4013      	ands	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004854:	68fb      	ldr	r3, [r7, #12]
}
 8004856:	bf00      	nop
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	58024400 	.word	0x58024400

08004868 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
DMA_HandleTypeDef hdma_tim3_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b094      	sub	sp, #80	@ 0x50
 800486c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800486e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	605a      	str	r2, [r3, #4]
 8004878:	609a      	str	r2, [r3, #8]
 800487a:	60da      	str	r2, [r3, #12]
 800487c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800487e:	f107 031c 	add.w	r3, r7, #28
 8004882:	2220      	movs	r2, #32
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f00d fa02 	bl	8011c90 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800488c:	1d3b      	adds	r3, r7, #4
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	605a      	str	r2, [r3, #4]
 8004894:	609a      	str	r2, [r3, #8]
 8004896:	60da      	str	r2, [r3, #12]
 8004898:	611a      	str	r2, [r3, #16]
 800489a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800489c:	2001      	movs	r0, #1
 800489e:	f7ff ffc7 	bl	8004830 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 546;
 80048a2:	f240 2322 	movw	r3, #546	@ 0x222
 80048a6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80048a8:	2300      	movs	r3, #0
 80048aa:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 249;
 80048ac:	23f9      	movs	r3, #249	@ 0xf9
 80048ae:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80048b0:	2300      	movs	r3, #0
 80048b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80048b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80048b8:	4619      	mov	r1, r3
 80048ba:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80048be:	f00b fc15 	bl	80100ec <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 80048c2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80048c6:	f7ff feac 	bl	8004622 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80048ca:	2100      	movs	r1, #0
 80048cc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80048d0:	f7ff ff58 	bl	8004784 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80048d4:	2101      	movs	r1, #1
 80048d6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80048da:	f7ff ff03 	bl	80046e4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80048de:	2360      	movs	r3, #96	@ 0x60
 80048e0:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80048e6:	2300      	movs	r3, #0
 80048e8:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 125;
 80048ea:	237d      	movs	r3, #125	@ 0x7d
 80048ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80048ee:	2300      	movs	r3, #0
 80048f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80048f2:	f107 031c 	add.w	r3, r7, #28
 80048f6:	461a      	mov	r2, r3
 80048f8:	2101      	movs	r1, #1
 80048fa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80048fe:	f00b fc95 	bl	801022c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8004902:	2101      	movs	r1, #1
 8004904:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004908:	f7ff fe9c 	bl	8004644 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800490c:	2100      	movs	r1, #0
 800490e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004912:	f7ff ff4d 	bl	80047b0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8004916:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800491a:	f7ff ff5c 	bl	80047d6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 800491e:	2001      	movs	r0, #1
 8004920:	f7ff ff6a 	bl	80047f8 <LL_AHB4_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8004924:	2320      	movs	r3, #32
 8004926:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004928:	2302      	movs	r3, #2
 800492a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004930:	2300      	movs	r3, #0
 8004932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8004938:	2301      	movs	r3, #1
 800493a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800493c:	1d3b      	adds	r3, r7, #4
 800493e:	4619      	mov	r1, r3
 8004940:	4803      	ldr	r0, [pc, #12]	@ (8004950 <MX_TIM2_Init+0xe8>)
 8004942:	f00a fb73 	bl	800f02c <LL_GPIO_Init>

}
 8004946:	bf00      	nop
 8004948:	3750      	adds	r7, #80	@ 0x50
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	58020000 	.word	0x58020000

08004954 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08e      	sub	sp, #56	@ 0x38
 8004958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800495a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	605a      	str	r2, [r3, #4]
 8004964:	609a      	str	r2, [r3, #8]
 8004966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004968:	f107 031c 	add.w	r3, r7, #28
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004974:	463b      	mov	r3, r7
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	605a      	str	r2, [r3, #4]
 800497c:	609a      	str	r2, [r3, #8]
 800497e:	60da      	str	r2, [r3, #12]
 8004980:	611a      	str	r2, [r3, #16]
 8004982:	615a      	str	r2, [r3, #20]
 8004984:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004986:	4b2d      	ldr	r3, [pc, #180]	@ (8004a3c <MX_TIM3_Init+0xe8>)
 8004988:	4a2d      	ldr	r2, [pc, #180]	@ (8004a40 <MX_TIM3_Init+0xec>)
 800498a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800498c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a3c <MX_TIM3_Init+0xe8>)
 800498e:	2200      	movs	r2, #0
 8004990:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004992:	4b2a      	ldr	r3, [pc, #168]	@ (8004a3c <MX_TIM3_Init+0xe8>)
 8004994:	2200      	movs	r2, #0
 8004996:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 343;
 8004998:	4b28      	ldr	r3, [pc, #160]	@ (8004a3c <MX_TIM3_Init+0xe8>)
 800499a:	f240 1257 	movw	r2, #343	@ 0x157
 800499e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049a0:	4b26      	ldr	r3, [pc, #152]	@ (8004a3c <MX_TIM3_Init+0xe8>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049a6:	4b25      	ldr	r3, [pc, #148]	@ (8004a3c <MX_TIM3_Init+0xe8>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80049ac:	4823      	ldr	r0, [pc, #140]	@ (8004a3c <MX_TIM3_Init+0xe8>)
 80049ae:	f008 fce9 	bl	800d384 <HAL_TIM_Base_Init>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80049b8:	f7fe fbee 	bl	8003198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80049c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80049c6:	4619      	mov	r1, r3
 80049c8:	481c      	ldr	r0, [pc, #112]	@ (8004a3c <MX_TIM3_Init+0xe8>)
 80049ca:	f009 fb95 	bl	800e0f8 <HAL_TIM_ConfigClockSource>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80049d4:	f7fe fbe0 	bl	8003198 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80049d8:	4818      	ldr	r0, [pc, #96]	@ (8004a3c <MX_TIM3_Init+0xe8>)
 80049da:	f008 fdd0 	bl	800d57e <HAL_TIM_PWM_Init>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80049e4:	f7fe fbd8 	bl	8003198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049e8:	2300      	movs	r3, #0
 80049ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80049f0:	f107 031c 	add.w	r3, r7, #28
 80049f4:	4619      	mov	r1, r3
 80049f6:	4811      	ldr	r0, [pc, #68]	@ (8004a3c <MX_TIM3_Init+0xe8>)
 80049f8:	f00a f9a2 	bl	800ed40 <HAL_TIMEx_MasterConfigSynchronization>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004a02:	f7fe fbc9 	bl	8003198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a06:	2360      	movs	r3, #96	@ 0x60
 8004a08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a16:	463b      	mov	r3, r7
 8004a18:	2204      	movs	r2, #4
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4807      	ldr	r0, [pc, #28]	@ (8004a3c <MX_TIM3_Init+0xe8>)
 8004a1e:	f009 fa57 	bl	800ded0 <HAL_TIM_PWM_ConfigChannel>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004a28:	f7fe fbb6 	bl	8003198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004a2c:	4803      	ldr	r0, [pc, #12]	@ (8004a3c <MX_TIM3_Init+0xe8>)
 8004a2e:	f000 f947 	bl	8004cc0 <HAL_TIM_MspPostInit>

}
 8004a32:	bf00      	nop
 8004a34:	3738      	adds	r7, #56	@ 0x38
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	2400061c 	.word	0x2400061c
 8004a40:	40000400 	.word	0x40000400

08004a44 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08e      	sub	sp, #56	@ 0x38
 8004a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	605a      	str	r2, [r3, #4]
 8004a54:	609a      	str	r2, [r3, #8]
 8004a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a58:	f107 031c 	add.w	r3, r7, #28
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a64:	463b      	mov	r3, r7
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	605a      	str	r2, [r3, #4]
 8004a6c:	609a      	str	r2, [r3, #8]
 8004a6e:	60da      	str	r2, [r3, #12]
 8004a70:	611a      	str	r2, [r3, #16]
 8004a72:	615a      	str	r2, [r3, #20]
 8004a74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004a76:	4b3e      	ldr	r3, [pc, #248]	@ (8004b70 <MX_TIM5_Init+0x12c>)
 8004a78:	4a3e      	ldr	r2, [pc, #248]	@ (8004b74 <MX_TIM5_Init+0x130>)
 8004a7a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 275-1;
 8004a7c:	4b3c      	ldr	r3, [pc, #240]	@ (8004b70 <MX_TIM5_Init+0x12c>)
 8004a7e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8004a82:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a84:	4b3a      	ldr	r3, [pc, #232]	@ (8004b70 <MX_TIM5_Init+0x12c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2500-1;
 8004a8a:	4b39      	ldr	r3, [pc, #228]	@ (8004b70 <MX_TIM5_Init+0x12c>)
 8004a8c:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8004a90:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a92:	4b37      	ldr	r3, [pc, #220]	@ (8004b70 <MX_TIM5_Init+0x12c>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a98:	4b35      	ldr	r3, [pc, #212]	@ (8004b70 <MX_TIM5_Init+0x12c>)
 8004a9a:	2280      	movs	r2, #128	@ 0x80
 8004a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004a9e:	4834      	ldr	r0, [pc, #208]	@ (8004b70 <MX_TIM5_Init+0x12c>)
 8004aa0:	f008 fc70 	bl	800d384 <HAL_TIM_Base_Init>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 8004aaa:	f7fe fb75 	bl	8003198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004aae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004ab4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ab8:	4619      	mov	r1, r3
 8004aba:	482d      	ldr	r0, [pc, #180]	@ (8004b70 <MX_TIM5_Init+0x12c>)
 8004abc:	f009 fb1c 	bl	800e0f8 <HAL_TIM_ConfigClockSource>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 8004ac6:	f7fe fb67 	bl	8003198 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004aca:	4829      	ldr	r0, [pc, #164]	@ (8004b70 <MX_TIM5_Init+0x12c>)
 8004acc:	f008 fd57 	bl	800d57e <HAL_TIM_PWM_Init>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8004ad6:	f7fe fb5f 	bl	8003198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004ae2:	f107 031c 	add.w	r3, r7, #28
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4821      	ldr	r0, [pc, #132]	@ (8004b70 <MX_TIM5_Init+0x12c>)
 8004aea:	f00a f929 	bl	800ed40 <HAL_TIMEx_MasterConfigSynchronization>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8004af4:	f7fe fb50 	bl	8003198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004af8:	2360      	movs	r3, #96	@ 0x60
 8004afa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8004afc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b0a:	463b      	mov	r3, r7
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4817      	ldr	r0, [pc, #92]	@ (8004b70 <MX_TIM5_Init+0x12c>)
 8004b12:	f009 f9dd 	bl	800ded0 <HAL_TIM_PWM_ConfigChannel>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8004b1c:	f7fe fb3c 	bl	8003198 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004b20:	463b      	mov	r3, r7
 8004b22:	2204      	movs	r2, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4812      	ldr	r0, [pc, #72]	@ (8004b70 <MX_TIM5_Init+0x12c>)
 8004b28:	f009 f9d2 	bl	800ded0 <HAL_TIM_PWM_ConfigChannel>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8004b32:	f7fe fb31 	bl	8003198 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b36:	463b      	mov	r3, r7
 8004b38:	2208      	movs	r2, #8
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	480c      	ldr	r0, [pc, #48]	@ (8004b70 <MX_TIM5_Init+0x12c>)
 8004b3e:	f009 f9c7 	bl	800ded0 <HAL_TIM_PWM_ConfigChannel>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 8004b48:	f7fe fb26 	bl	8003198 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004b4c:	463b      	mov	r3, r7
 8004b4e:	220c      	movs	r2, #12
 8004b50:	4619      	mov	r1, r3
 8004b52:	4807      	ldr	r0, [pc, #28]	@ (8004b70 <MX_TIM5_Init+0x12c>)
 8004b54:	f009 f9bc 	bl	800ded0 <HAL_TIM_PWM_ConfigChannel>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <MX_TIM5_Init+0x11e>
  {
    Error_Handler();
 8004b5e:	f7fe fb1b 	bl	8003198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8004b62:	4803      	ldr	r0, [pc, #12]	@ (8004b70 <MX_TIM5_Init+0x12c>)
 8004b64:	f000 f8ac 	bl	8004cc0 <HAL_TIM_MspPostInit>

}
 8004b68:	bf00      	nop
 8004b6a:	3738      	adds	r7, #56	@ 0x38
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	24000668 	.word	0x24000668
 8004b74:	40000c00 	.word	0x40000c00

08004b78 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004b7e:	1d3b      	adds	r3, r7, #4
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	609a      	str	r2, [r3, #8]
 8004b88:	60da      	str	r2, [r3, #12]
 8004b8a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8004b8c:	2020      	movs	r0, #32
 8004b8e:	f7ff fe4f 	bl	8004830 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004b92:	f7ff fcbd 	bl	8004510 <__NVIC_GetPriorityGrouping>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fd0d 	bl	80045bc <NVIC_EncodePriority>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	2037      	movs	r0, #55	@ 0x37
 8004ba8:	f7ff fcde 	bl	8004568 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8004bac:	2037      	movs	r0, #55	@ 0x37
 8004bae:	f7ff fcbd 	bl	800452c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8004bb2:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8004bb6:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 274;
 8004bbc:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8004bc0:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8004bc2:	1d3b      	adds	r3, r7, #4
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4808      	ldr	r0, [pc, #32]	@ (8004be8 <MX_TIM7_Init+0x70>)
 8004bc8:	f00b fa90 	bl	80100ec <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 8004bcc:	4806      	ldr	r0, [pc, #24]	@ (8004be8 <MX_TIM7_Init+0x70>)
 8004bce:	f7ff fd28 	bl	8004622 <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4804      	ldr	r0, [pc, #16]	@ (8004be8 <MX_TIM7_Init+0x70>)
 8004bd6:	f7ff fdeb 	bl	80047b0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8004bda:	4803      	ldr	r0, [pc, #12]	@ (8004be8 <MX_TIM7_Init+0x70>)
 8004bdc:	f7ff fdfb 	bl	80047d6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004be0:	bf00      	nop
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40001400 	.word	0x40001400

08004bec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a2c      	ldr	r2, [pc, #176]	@ (8004cac <HAL_TIM_Base_MspInit+0xc0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d13e      	bne.n	8004c7c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8004cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8004c00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c04:	4a2a      	ldr	r2, [pc, #168]	@ (8004cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8004c06:	f043 0302 	orr.w	r3, r3, #2
 8004c0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004c0e:	4b28      	ldr	r3, [pc, #160]	@ (8004cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8004c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream2;
 8004c1c:	4b25      	ldr	r3, [pc, #148]	@ (8004cb4 <HAL_TIM_Base_MspInit+0xc8>)
 8004c1e:	4a26      	ldr	r2, [pc, #152]	@ (8004cb8 <HAL_TIM_Base_MspInit+0xcc>)
 8004c20:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8004c22:	4b24      	ldr	r3, [pc, #144]	@ (8004cb4 <HAL_TIM_Base_MspInit+0xc8>)
 8004c24:	2218      	movs	r2, #24
 8004c26:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c28:	4b22      	ldr	r3, [pc, #136]	@ (8004cb4 <HAL_TIM_Base_MspInit+0xc8>)
 8004c2a:	2240      	movs	r2, #64	@ 0x40
 8004c2c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c2e:	4b21      	ldr	r3, [pc, #132]	@ (8004cb4 <HAL_TIM_Base_MspInit+0xc8>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004c34:	4b1f      	ldr	r3, [pc, #124]	@ (8004cb4 <HAL_TIM_Base_MspInit+0xc8>)
 8004c36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c3a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb4 <HAL_TIM_Base_MspInit+0xc8>)
 8004c3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004c42:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004c44:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb4 <HAL_TIM_Base_MspInit+0xc8>)
 8004c46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004c4a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8004c4c:	4b19      	ldr	r3, [pc, #100]	@ (8004cb4 <HAL_TIM_Base_MspInit+0xc8>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004c52:	4b18      	ldr	r3, [pc, #96]	@ (8004cb4 <HAL_TIM_Base_MspInit+0xc8>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c58:	4b16      	ldr	r3, [pc, #88]	@ (8004cb4 <HAL_TIM_Base_MspInit+0xc8>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8004c5e:	4815      	ldr	r0, [pc, #84]	@ (8004cb4 <HAL_TIM_Base_MspInit+0xc8>)
 8004c60:	f000 fdbc 	bl	80057dc <HAL_DMA_Init>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8004c6a:	f7fe fa95 	bl	8003198 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a10      	ldr	r2, [pc, #64]	@ (8004cb4 <HAL_TIM_Base_MspInit+0xc8>)
 8004c72:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c74:	4a0f      	ldr	r2, [pc, #60]	@ (8004cb4 <HAL_TIM_Base_MspInit+0xc8>)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004c7a:	e013      	b.n	8004ca4 <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM5)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a0e      	ldr	r2, [pc, #56]	@ (8004cbc <HAL_TIM_Base_MspInit+0xd0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d10e      	bne.n	8004ca4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004c86:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8004c88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c8c:	4a08      	ldr	r2, [pc, #32]	@ (8004cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8004c8e:	f043 0308 	orr.w	r3, r3, #8
 8004c92:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004c96:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8004c98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40000400 	.word	0x40000400
 8004cb0:	58024400 	.word	0x58024400
 8004cb4:	240006b4 	.word	0x240006b4
 8004cb8:	40020040 	.word	0x40020040
 8004cbc:	40000c00 	.word	0x40000c00

08004cc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	@ 0x28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc8:	f107 0314 	add.w	r3, r7, #20
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	609a      	str	r2, [r3, #8]
 8004cd4:	60da      	str	r2, [r3, #12]
 8004cd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a25      	ldr	r2, [pc, #148]	@ (8004d74 <HAL_TIM_MspPostInit+0xb4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d11f      	bne.n	8004d22 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ce2:	4b25      	ldr	r3, [pc, #148]	@ (8004d78 <HAL_TIM_MspPostInit+0xb8>)
 8004ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ce8:	4a23      	ldr	r2, [pc, #140]	@ (8004d78 <HAL_TIM_MspPostInit+0xb8>)
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004cf2:	4b21      	ldr	r3, [pc, #132]	@ (8004d78 <HAL_TIM_MspPostInit+0xb8>)
 8004cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004d00:	2380      	movs	r3, #128	@ 0x80
 8004d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d04:	2302      	movs	r3, #2
 8004d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004d10:	2302      	movs	r3, #2
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d14:	f107 0314 	add.w	r3, r7, #20
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4818      	ldr	r0, [pc, #96]	@ (8004d7c <HAL_TIM_MspPostInit+0xbc>)
 8004d1c:	f003 f886 	bl	8007e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8004d20:	e023      	b.n	8004d6a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a16      	ldr	r2, [pc, #88]	@ (8004d80 <HAL_TIM_MspPostInit+0xc0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d11e      	bne.n	8004d6a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d2c:	4b12      	ldr	r3, [pc, #72]	@ (8004d78 <HAL_TIM_MspPostInit+0xb8>)
 8004d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d32:	4a11      	ldr	r2, [pc, #68]	@ (8004d78 <HAL_TIM_MspPostInit+0xb8>)
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d78 <HAL_TIM_MspPostInit+0xb8>)
 8004d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004d4a:	230f      	movs	r3, #15
 8004d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d4e:	2302      	movs	r3, #2
 8004d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d56:	2300      	movs	r3, #0
 8004d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d5e:	f107 0314 	add.w	r3, r7, #20
 8004d62:	4619      	mov	r1, r3
 8004d64:	4805      	ldr	r0, [pc, #20]	@ (8004d7c <HAL_TIM_MspPostInit+0xbc>)
 8004d66:	f003 f861 	bl	8007e2c <HAL_GPIO_Init>
}
 8004d6a:	bf00      	nop
 8004d6c:	3728      	adds	r7, #40	@ 0x28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40000400 	.word	0x40000400
 8004d78:	58024400 	.word	0x58024400
 8004d7c:	58020000 	.word	0x58020000
 8004d80:	40000c00 	.word	0x40000c00

08004d84 <__NVIC_GetPriorityGrouping>:
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d88:	4b04      	ldr	r3, [pc, #16]	@ (8004d9c <__NVIC_GetPriorityGrouping+0x18>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	0a1b      	lsrs	r3, r3, #8
 8004d8e:	f003 0307 	and.w	r3, r3, #7
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	e000ed00 	.word	0xe000ed00

08004da0 <__NVIC_EnableIRQ>:
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	db0b      	blt.n	8004dca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	f003 021f 	and.w	r2, r3, #31
 8004db8:	4907      	ldr	r1, [pc, #28]	@ (8004dd8 <__NVIC_EnableIRQ+0x38>)
 8004dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	e000e100 	.word	0xe000e100

08004ddc <__NVIC_SetPriority>:
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	6039      	str	r1, [r7, #0]
 8004de6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	db0a      	blt.n	8004e06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	490c      	ldr	r1, [pc, #48]	@ (8004e28 <__NVIC_SetPriority+0x4c>)
 8004df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dfa:	0112      	lsls	r2, r2, #4
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	440b      	add	r3, r1
 8004e00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004e04:	e00a      	b.n	8004e1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	4908      	ldr	r1, [pc, #32]	@ (8004e2c <__NVIC_SetPriority+0x50>)
 8004e0c:	88fb      	ldrh	r3, [r7, #6]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	3b04      	subs	r3, #4
 8004e14:	0112      	lsls	r2, r2, #4
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	440b      	add	r3, r1
 8004e1a:	761a      	strb	r2, [r3, #24]
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	e000e100 	.word	0xe000e100
 8004e2c:	e000ed00 	.word	0xe000ed00

08004e30 <NVIC_EncodePriority>:
{
 8004e30:	b480      	push	{r7}
 8004e32:	b089      	sub	sp, #36	@ 0x24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f1c3 0307 	rsb	r3, r3, #7
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	bf28      	it	cs
 8004e4e:	2304      	movcs	r3, #4
 8004e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3304      	adds	r3, #4
 8004e56:	2b06      	cmp	r3, #6
 8004e58:	d902      	bls.n	8004e60 <NVIC_EncodePriority+0x30>
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	3b03      	subs	r3, #3
 8004e5e:	e000      	b.n	8004e62 <NVIC_EncodePriority+0x32>
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	43da      	mvns	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	401a      	ands	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e82:	43d9      	mvns	r1, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e88:	4313      	orrs	r3, r2
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3724      	adds	r7, #36	@ 0x24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <LL_USART_Enable>:
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f043 0201 	orr.w	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	601a      	str	r2, [r3, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <LL_USART_DisableFIFO>:
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	601a      	str	r2, [r3, #0]
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <LL_USART_SetTXFIFOThreshold>:
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b089      	sub	sp, #36	@ 0x24
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	075b      	lsls	r3, r3, #29
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3308      	adds	r3, #8
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	61ba      	str	r2, [r7, #24]
 8004f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6979      	ldr	r1, [r7, #20]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e4      	bne.n	8004ee0 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	3724      	adds	r7, #36	@ 0x24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <LL_USART_SetRXFIFOThreshold>:
{
 8004f24:	b480      	push	{r7}
 8004f26:	b089      	sub	sp, #36	@ 0x24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3308      	adds	r3, #8
 8004f32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	e853 3f00 	ldrex	r3, [r3]
 8004f3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	065b      	lsls	r3, r3, #25
 8004f46:	4313      	orrs	r3, r2
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	61ba      	str	r2, [r7, #24]
 8004f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	6979      	ldr	r1, [r7, #20]
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	e841 2300 	strex	r3, r2, [r1]
 8004f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e4      	bne.n	8004f2e <LL_USART_SetRXFIFOThreshold+0xa>
}
 8004f64:	bf00      	nop
 8004f66:	bf00      	nop
 8004f68:	3724      	adds	r7, #36	@ 0x24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <LL_USART_ConfigAsyncMode>:
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	609a      	str	r2, [r3, #8]
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <LL_USART_IsActiveFlag_TEACK>:
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fb2:	d101      	bne.n	8004fb8 <LL_USART_IsActiveFlag_TEACK+0x1a>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <LL_USART_IsActiveFlag_TEACK+0x1c>
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <LL_USART_IsActiveFlag_REACK>:
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fda:	d101      	bne.n	8004fe0 <LL_USART_IsActiveFlag_REACK+0x1a>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <LL_USART_IsActiveFlag_REACK+0x1c>
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <LL_AHB4_GRP1_EnableClock>:
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8004ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8005024 <LL_AHB4_GRP1_EnableClock+0x34>)
 8004ffa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004ffe:	4909      	ldr	r1, [pc, #36]	@ (8005024 <LL_AHB4_GRP1_EnableClock+0x34>)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8005008:	4b06      	ldr	r3, [pc, #24]	@ (8005024 <LL_AHB4_GRP1_EnableClock+0x34>)
 800500a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4013      	ands	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005014:	68fb      	ldr	r3, [r7, #12]
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	58024400 	.word	0x58024400

08005028 <LL_APB1_GRP1_EnableClock>:
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8005030:	4b0a      	ldr	r3, [pc, #40]	@ (800505c <LL_APB1_GRP1_EnableClock+0x34>)
 8005032:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8005036:	4909      	ldr	r1, [pc, #36]	@ (800505c <LL_APB1_GRP1_EnableClock+0x34>)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8005040:	4b06      	ldr	r3, [pc, #24]	@ (800505c <LL_APB1_GRP1_EnableClock+0x34>)
 8005042:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4013      	ands	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800504c:	68fb      	ldr	r3, [r7, #12]
}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	58024400 	.word	0x58024400

08005060 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005068:	4b0a      	ldr	r3, [pc, #40]	@ (8005094 <LL_APB2_GRP1_EnableClock+0x34>)
 800506a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800506e:	4909      	ldr	r1, [pc, #36]	@ (8005094 <LL_APB2_GRP1_EnableClock+0x34>)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005078:	4b06      	ldr	r3, [pc, #24]	@ (8005094 <LL_APB2_GRP1_EnableClock+0x34>)
 800507a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4013      	ands	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005084:	68fb      	ldr	r3, [r7, #12]
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	58024400 	.word	0x58024400

08005098 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b0bc      	sub	sp, #240	@ 0xf0
 800509c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 800509e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80050a2:	2220      	movs	r2, #32
 80050a4:	2100      	movs	r1, #0
 80050a6:	4618      	mov	r0, r3
 80050a8:	f00c fdf2 	bl	8011c90 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ac:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	605a      	str	r2, [r3, #4]
 80050b6:	609a      	str	r2, [r3, #8]
 80050b8:	60da      	str	r2, [r3, #12]
 80050ba:	611a      	str	r2, [r3, #16]
 80050bc:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80050be:	463b      	mov	r3, r7
 80050c0:	22b8      	movs	r2, #184	@ 0xb8
 80050c2:	2100      	movs	r1, #0
 80050c4:	4618      	mov	r0, r3
 80050c6:	f00c fde3 	bl	8011c90 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80050ca:	f04f 0202 	mov.w	r2, #2
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80050d6:	2300      	movs	r3, #0
 80050d8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050da:	463b      	mov	r3, r7
 80050dc:	4618      	mov	r0, r3
 80050de:	f006 fe4d 	bl	800bd7c <HAL_RCCEx_PeriphCLKConfig>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <MX_UART4_Init+0x54>
  {
    Error_Handler();
 80050e8:	f7fe f856 	bl	8003198 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80050ec:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80050f0:	f7ff ff9a 	bl	8005028 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 80050f4:	2008      	movs	r0, #8
 80050f6:	f7ff ff7b 	bl	8004ff0 <LL_AHB4_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PD0   ------> UART4_RX
  PD1   ------> UART4_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80050fa:	2303      	movs	r3, #3
 80050fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005100:	2302      	movs	r3, #2
 8005102:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005106:	2300      	movs	r3, #0
 8005108:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800510c:	2300      	movs	r3, #0
 800510e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005112:	2300      	movs	r3, #0
 8005114:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8005118:	2308      	movs	r3, #8
 800511a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800511e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8005122:	4619      	mov	r1, r3
 8005124:	4827      	ldr	r0, [pc, #156]	@ (80051c4 <MX_UART4_Init+0x12c>)
 8005126:	f009 ff81 	bl	800f02c <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800512a:	f7ff fe2b 	bl	8004d84 <__NVIC_GetPriorityGrouping>
 800512e:	4603      	mov	r3, r0
 8005130:	2200      	movs	r2, #0
 8005132:	2100      	movs	r1, #0
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff fe7b 	bl	8004e30 <NVIC_EncodePriority>
 800513a:	4603      	mov	r3, r0
 800513c:	4619      	mov	r1, r3
 800513e:	2034      	movs	r0, #52	@ 0x34
 8005140:	f7ff fe4c 	bl	8004ddc <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8005144:	2034      	movs	r0, #52	@ 0x34
 8005146:	f7ff fe2b 	bl	8004da0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800514a:	2300      	movs	r3, #0
 800514c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  UART_InitStruct.BaudRate = 115200;
 8005150:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8005154:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005158:	2300      	movs	r3, #0
 800515a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800515e:	2300      	movs	r3, #0
 8005160:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005164:	2300      	movs	r3, #0
 8005166:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800516a:	2304      	movs	r3, #4
 800516c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005170:	2300      	movs	r3, #0
 8005172:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005176:	2300      	movs	r3, #0
 8005178:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  LL_USART_Init(UART4, &UART_InitStruct);
 800517c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8005180:	4619      	mov	r1, r3
 8005182:	4811      	ldr	r0, [pc, #68]	@ (80051c8 <MX_UART4_Init+0x130>)
 8005184:	f00b fc0c 	bl	80109a0 <LL_USART_Init>
  LL_USART_DisableFIFO(UART4);
 8005188:	480f      	ldr	r0, [pc, #60]	@ (80051c8 <MX_UART4_Init+0x130>)
 800518a:	f7ff fe94 	bl	8004eb6 <LL_USART_DisableFIFO>
  LL_USART_SetTXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 800518e:	2100      	movs	r1, #0
 8005190:	480d      	ldr	r0, [pc, #52]	@ (80051c8 <MX_UART4_Init+0x130>)
 8005192:	f7ff fea0 	bl	8004ed6 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 8005196:	2100      	movs	r1, #0
 8005198:	480b      	ldr	r0, [pc, #44]	@ (80051c8 <MX_UART4_Init+0x130>)
 800519a:	f7ff fec3 	bl	8004f24 <LL_USART_SetRXFIFOThreshold>
  LL_USART_ConfigAsyncMode(UART4);
 800519e:	480a      	ldr	r0, [pc, #40]	@ (80051c8 <MX_UART4_Init+0x130>)
 80051a0:	f7ff fee7 	bl	8004f72 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType UART4 */

  /* USER CODE END WKUPType UART4 */

  LL_USART_Enable(UART4);
 80051a4:	4808      	ldr	r0, [pc, #32]	@ (80051c8 <MX_UART4_Init+0x130>)
 80051a6:	f7ff fe76 	bl	8004e96 <LL_USART_Enable>

  /* Polling UART4 initialisation */
  while(!(LL_USART_IsActiveFlag_REACK(UART4)))
 80051aa:	bf00      	nop
 80051ac:	4806      	ldr	r0, [pc, #24]	@ (80051c8 <MX_UART4_Init+0x130>)
 80051ae:	f7ff ff0a 	bl	8004fc6 <LL_USART_IsActiveFlag_REACK>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f9      	beq.n	80051ac <MX_UART4_Init+0x114>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	37f0      	adds	r7, #240	@ 0xf0
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	58020c00 	.word	0x58020c00
 80051c8:	40004c00 	.word	0x40004c00

080051cc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b0bc      	sub	sp, #240	@ 0xf0
 80051d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80051d2:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80051d6:	2220      	movs	r2, #32
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f00c fd58 	bl	8011c90 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051e0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	60da      	str	r2, [r3, #12]
 80051ee:	611a      	str	r2, [r3, #16]
 80051f0:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80051f2:	463b      	mov	r3, r7
 80051f4:	22b8      	movs	r2, #184	@ 0xb8
 80051f6:	2100      	movs	r1, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f00c fd49 	bl	8011c90 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80051fe:	f04f 0201 	mov.w	r2, #1
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800520a:	2300      	movs	r3, #0
 800520c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800520e:	463b      	mov	r3, r7
 8005210:	4618      	mov	r0, r3
 8005212:	f006 fdb3 	bl	800bd7c <HAL_RCCEx_PeriphCLKConfig>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
 800521c:	f7fd ffbc 	bl	8003198 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8005220:	2020      	movs	r0, #32
 8005222:	f7ff ff1d 	bl	8005060 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8005226:	2004      	movs	r0, #4
 8005228:	f7ff fee2 	bl	8004ff0 <LL_AHB4_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800522c:	23c0      	movs	r3, #192	@ 0xc0
 800522e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005232:	2302      	movs	r3, #2
 8005234:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005238:	2300      	movs	r3, #0
 800523a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800523e:	2300      	movs	r3, #0
 8005240:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005244:	2300      	movs	r3, #0
 8005246:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800524a:	2307      	movs	r3, #7
 800524c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005250:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8005254:	4619      	mov	r1, r3
 8005256:	482a      	ldr	r0, [pc, #168]	@ (8005300 <MX_USART6_UART_Init+0x134>)
 8005258:	f009 fee8 	bl	800f02c <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800525c:	f7ff fd92 	bl	8004d84 <__NVIC_GetPriorityGrouping>
 8005260:	4603      	mov	r3, r0
 8005262:	2200      	movs	r2, #0
 8005264:	2100      	movs	r1, #0
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff fde2 	bl	8004e30 <NVIC_EncodePriority>
 800526c:	4603      	mov	r3, r0
 800526e:	4619      	mov	r1, r3
 8005270:	2047      	movs	r0, #71	@ 0x47
 8005272:	f7ff fdb3 	bl	8004ddc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8005276:	2047      	movs	r0, #71	@ 0x47
 8005278:	f7ff fd92 	bl	8004da0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800527c:	2300      	movs	r3, #0
 800527e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  USART_InitStruct.BaudRate = 115200;
 8005282:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8005286:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800528a:	2300      	movs	r3, #0
 800528c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005290:	2300      	movs	r3, #0
 8005292:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005296:	2300      	movs	r3, #0
 8005298:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800529c:	230c      	movs	r3, #12
 800529e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  LL_USART_Init(USART6, &USART_InitStruct);
 80052ae:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80052b2:	4619      	mov	r1, r3
 80052b4:	4813      	ldr	r0, [pc, #76]	@ (8005304 <MX_USART6_UART_Init+0x138>)
 80052b6:	f00b fb73 	bl	80109a0 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 80052ba:	2100      	movs	r1, #0
 80052bc:	4811      	ldr	r0, [pc, #68]	@ (8005304 <MX_USART6_UART_Init+0x138>)
 80052be:	f7ff fe0a 	bl	8004ed6 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 80052c2:	2100      	movs	r1, #0
 80052c4:	480f      	ldr	r0, [pc, #60]	@ (8005304 <MX_USART6_UART_Init+0x138>)
 80052c6:	f7ff fe2d 	bl	8004f24 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART6);
 80052ca:	480e      	ldr	r0, [pc, #56]	@ (8005304 <MX_USART6_UART_Init+0x138>)
 80052cc:	f7ff fdf3 	bl	8004eb6 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART6);
 80052d0:	480c      	ldr	r0, [pc, #48]	@ (8005304 <MX_USART6_UART_Init+0x138>)
 80052d2:	f7ff fe4e 	bl	8004f72 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART6 */

  /* USER CODE END WKUPType USART6 */

  LL_USART_Enable(USART6);
 80052d6:	480b      	ldr	r0, [pc, #44]	@ (8005304 <MX_USART6_UART_Init+0x138>)
 80052d8:	f7ff fddd 	bl	8004e96 <LL_USART_Enable>

  /* Polling USART6 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART6))) || (!(LL_USART_IsActiveFlag_REACK(USART6))))
 80052dc:	bf00      	nop
 80052de:	4809      	ldr	r0, [pc, #36]	@ (8005304 <MX_USART6_UART_Init+0x138>)
 80052e0:	f7ff fe5d 	bl	8004f9e <LL_USART_IsActiveFlag_TEACK>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f9      	beq.n	80052de <MX_USART6_UART_Init+0x112>
 80052ea:	4806      	ldr	r0, [pc, #24]	@ (8005304 <MX_USART6_UART_Init+0x138>)
 80052ec:	f7ff fe6b 	bl	8004fc6 <LL_USART_IsActiveFlag_REACK>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f3      	beq.n	80052de <MX_USART6_UART_Init+0x112>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80052f6:	bf00      	nop
 80052f8:	bf00      	nop
 80052fa:	37f0      	adds	r7, #240	@ 0xf0
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	58020800 	.word	0x58020800
 8005304:	40011400 	.word	0x40011400

08005308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005308:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8005344 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800530c:	f7ff f8e8 	bl	80044e0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005310:	f7ff f856 	bl	80043c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005314:	480c      	ldr	r0, [pc, #48]	@ (8005348 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005316:	490d      	ldr	r1, [pc, #52]	@ (800534c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005318:	4a0d      	ldr	r2, [pc, #52]	@ (8005350 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800531a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800531c:	e002      	b.n	8005324 <LoopCopyDataInit>

0800531e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800531e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005322:	3304      	adds	r3, #4

08005324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005328:	d3f9      	bcc.n	800531e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800532a:	4a0a      	ldr	r2, [pc, #40]	@ (8005354 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800532c:	4c0a      	ldr	r4, [pc, #40]	@ (8005358 <LoopFillZerobss+0x22>)
  movs r3, #0
 800532e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005330:	e001      	b.n	8005336 <LoopFillZerobss>

08005332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005334:	3204      	adds	r2, #4

08005336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005338:	d3fb      	bcc.n	8005332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800533a:	f00c fd21 	bl	8011d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800533e:	f7fd faf1 	bl	8002924 <main>
  bx  lr
 8005342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005344:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005348:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800534c:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8005350:	08016fc4 	.word	0x08016fc4
  ldr r2, =_sbss
 8005354:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8005358:	2400087c 	.word	0x2400087c

0800535c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800535c:	e7fe      	b.n	800535c <ADC3_IRQHandler>
	...

08005360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005366:	2003      	movs	r0, #3
 8005368:	f000 f980 	bl	800566c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800536c:	f006 fb8c 	bl	800ba88 <HAL_RCC_GetSysClockFreq>
 8005370:	4602      	mov	r2, r0
 8005372:	4b15      	ldr	r3, [pc, #84]	@ (80053c8 <HAL_Init+0x68>)
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	4913      	ldr	r1, [pc, #76]	@ (80053cc <HAL_Init+0x6c>)
 800537e:	5ccb      	ldrb	r3, [r1, r3]
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	fa22 f303 	lsr.w	r3, r2, r3
 8005388:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800538a:	4b0f      	ldr	r3, [pc, #60]	@ (80053c8 <HAL_Init+0x68>)
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	4a0e      	ldr	r2, [pc, #56]	@ (80053cc <HAL_Init+0x6c>)
 8005394:	5cd3      	ldrb	r3, [r2, r3]
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	fa22 f303 	lsr.w	r3, r2, r3
 80053a0:	4a0b      	ldr	r2, [pc, #44]	@ (80053d0 <HAL_Init+0x70>)
 80053a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053a4:	4a0b      	ldr	r2, [pc, #44]	@ (80053d4 <HAL_Init+0x74>)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053aa:	200f      	movs	r0, #15
 80053ac:	f000 f814 	bl	80053d8 <HAL_InitTick>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e002      	b.n	80053c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80053ba:	f7fe fc83 	bl	8003cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	58024400 	.word	0x58024400
 80053cc:	08016b00 	.word	0x08016b00
 80053d0:	24000008 	.word	0x24000008
 80053d4:	24000004 	.word	0x24000004

080053d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80053e0:	4b15      	ldr	r3, [pc, #84]	@ (8005438 <HAL_InitTick+0x60>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e021      	b.n	8005430 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80053ec:	4b13      	ldr	r3, [pc, #76]	@ (800543c <HAL_InitTick+0x64>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4b11      	ldr	r3, [pc, #68]	@ (8005438 <HAL_InitTick+0x60>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	4619      	mov	r1, r3
 80053f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80053fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	4618      	mov	r0, r3
 8005404:	f000 f965 	bl	80056d2 <HAL_SYSTICK_Config>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e00e      	b.n	8005430 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b0f      	cmp	r3, #15
 8005416:	d80a      	bhi.n	800542e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005418:	2200      	movs	r2, #0
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005420:	f000 f92f 	bl	8005682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005424:	4a06      	ldr	r2, [pc, #24]	@ (8005440 <HAL_InitTick+0x68>)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	e000      	b.n	8005430 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	24000010 	.word	0x24000010
 800543c:	24000004 	.word	0x24000004
 8005440:	2400000c 	.word	0x2400000c

08005444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005448:	4b06      	ldr	r3, [pc, #24]	@ (8005464 <HAL_IncTick+0x20>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	4b06      	ldr	r3, [pc, #24]	@ (8005468 <HAL_IncTick+0x24>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4413      	add	r3, r2
 8005454:	4a04      	ldr	r2, [pc, #16]	@ (8005468 <HAL_IncTick+0x24>)
 8005456:	6013      	str	r3, [r2, #0]
}
 8005458:	bf00      	nop
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	24000010 	.word	0x24000010
 8005468:	2400072c 	.word	0x2400072c

0800546c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return uwTick;
 8005470:	4b03      	ldr	r3, [pc, #12]	@ (8005480 <HAL_GetTick+0x14>)
 8005472:	681b      	ldr	r3, [r3, #0]
}
 8005474:	4618      	mov	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	2400072c 	.word	0x2400072c

08005484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800548c:	f7ff ffee 	bl	800546c <HAL_GetTick>
 8005490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800549c:	d005      	beq.n	80054aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800549e:	4b0a      	ldr	r3, [pc, #40]	@ (80054c8 <HAL_Delay+0x44>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054aa:	bf00      	nop
 80054ac:	f7ff ffde 	bl	800546c <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d8f7      	bhi.n	80054ac <HAL_Delay+0x28>
  {
  }
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	24000010 	.word	0x24000010

080054cc <__NVIC_SetPriorityGrouping>:
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054dc:	4b0b      	ldr	r3, [pc, #44]	@ (800550c <__NVIC_SetPriorityGrouping+0x40>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054e8:	4013      	ands	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80054f4:	4b06      	ldr	r3, [pc, #24]	@ (8005510 <__NVIC_SetPriorityGrouping+0x44>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054fa:	4a04      	ldr	r2, [pc, #16]	@ (800550c <__NVIC_SetPriorityGrouping+0x40>)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	60d3      	str	r3, [r2, #12]
}
 8005500:	bf00      	nop
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	e000ed00 	.word	0xe000ed00
 8005510:	05fa0000 	.word	0x05fa0000

08005514 <__NVIC_GetPriorityGrouping>:
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005518:	4b04      	ldr	r3, [pc, #16]	@ (800552c <__NVIC_GetPriorityGrouping+0x18>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	0a1b      	lsrs	r3, r3, #8
 800551e:	f003 0307 	and.w	r3, r3, #7
}
 8005522:	4618      	mov	r0, r3
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	e000ed00 	.word	0xe000ed00

08005530 <__NVIC_EnableIRQ>:
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800553a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800553e:	2b00      	cmp	r3, #0
 8005540:	db0b      	blt.n	800555a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	f003 021f 	and.w	r2, r3, #31
 8005548:	4907      	ldr	r1, [pc, #28]	@ (8005568 <__NVIC_EnableIRQ+0x38>)
 800554a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	2001      	movs	r0, #1
 8005552:	fa00 f202 	lsl.w	r2, r0, r2
 8005556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	e000e100 	.word	0xe000e100

0800556c <__NVIC_SetPriority>:
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	6039      	str	r1, [r7, #0]
 8005576:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800557c:	2b00      	cmp	r3, #0
 800557e:	db0a      	blt.n	8005596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	490c      	ldr	r1, [pc, #48]	@ (80055b8 <__NVIC_SetPriority+0x4c>)
 8005586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800558a:	0112      	lsls	r2, r2, #4
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	440b      	add	r3, r1
 8005590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005594:	e00a      	b.n	80055ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	b2da      	uxtb	r2, r3
 800559a:	4908      	ldr	r1, [pc, #32]	@ (80055bc <__NVIC_SetPriority+0x50>)
 800559c:	88fb      	ldrh	r3, [r7, #6]
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	3b04      	subs	r3, #4
 80055a4:	0112      	lsls	r2, r2, #4
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	440b      	add	r3, r1
 80055aa:	761a      	strb	r2, [r3, #24]
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	e000e100 	.word	0xe000e100
 80055bc:	e000ed00 	.word	0xe000ed00

080055c0 <NVIC_EncodePriority>:
{
 80055c0:	b480      	push	{r7}
 80055c2:	b089      	sub	sp, #36	@ 0x24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	f1c3 0307 	rsb	r3, r3, #7
 80055da:	2b04      	cmp	r3, #4
 80055dc:	bf28      	it	cs
 80055de:	2304      	movcs	r3, #4
 80055e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	3304      	adds	r3, #4
 80055e6:	2b06      	cmp	r3, #6
 80055e8:	d902      	bls.n	80055f0 <NVIC_EncodePriority+0x30>
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	3b03      	subs	r3, #3
 80055ee:	e000      	b.n	80055f2 <NVIC_EncodePriority+0x32>
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	43da      	mvns	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	401a      	ands	r2, r3
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005608:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	fa01 f303 	lsl.w	r3, r1, r3
 8005612:	43d9      	mvns	r1, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005618:	4313      	orrs	r3, r2
}
 800561a:	4618      	mov	r0, r3
 800561c:	3724      	adds	r7, #36	@ 0x24
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3b01      	subs	r3, #1
 8005634:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005638:	d301      	bcc.n	800563e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800563a:	2301      	movs	r3, #1
 800563c:	e00f      	b.n	800565e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800563e:	4a0a      	ldr	r2, [pc, #40]	@ (8005668 <SysTick_Config+0x40>)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3b01      	subs	r3, #1
 8005644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005646:	210f      	movs	r1, #15
 8005648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800564c:	f7ff ff8e 	bl	800556c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005650:	4b05      	ldr	r3, [pc, #20]	@ (8005668 <SysTick_Config+0x40>)
 8005652:	2200      	movs	r2, #0
 8005654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005656:	4b04      	ldr	r3, [pc, #16]	@ (8005668 <SysTick_Config+0x40>)
 8005658:	2207      	movs	r2, #7
 800565a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	e000e010 	.word	0xe000e010

0800566c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff ff29 	bl	80054cc <__NVIC_SetPriorityGrouping>
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	4603      	mov	r3, r0
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005690:	f7ff ff40 	bl	8005514 <__NVIC_GetPriorityGrouping>
 8005694:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	68b9      	ldr	r1, [r7, #8]
 800569a:	6978      	ldr	r0, [r7, #20]
 800569c:	f7ff ff90 	bl	80055c0 <NVIC_EncodePriority>
 80056a0:	4602      	mov	r2, r0
 80056a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056a6:	4611      	mov	r1, r2
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff ff5f 	bl	800556c <__NVIC_SetPriority>
}
 80056ae:	bf00      	nop
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	4603      	mov	r3, r0
 80056be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff ff33 	bl	8005530 <__NVIC_EnableIRQ>
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff ffa4 	bl	8005628 <SysTick_Config>
 80056e0:	4603      	mov	r3, r0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80056f0:	f3bf 8f5f 	dmb	sy
}
 80056f4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80056f6:	4b07      	ldr	r3, [pc, #28]	@ (8005714 <HAL_MPU_Disable+0x28>)
 80056f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fa:	4a06      	ldr	r2, [pc, #24]	@ (8005714 <HAL_MPU_Disable+0x28>)
 80056fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005700:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005702:	4b05      	ldr	r3, [pc, #20]	@ (8005718 <HAL_MPU_Disable+0x2c>)
 8005704:	2200      	movs	r2, #0
 8005706:	605a      	str	r2, [r3, #4]
}
 8005708:	bf00      	nop
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	e000ed00 	.word	0xe000ed00
 8005718:	e000ed90 	.word	0xe000ed90

0800571c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005724:	4a0b      	ldr	r2, [pc, #44]	@ (8005754 <HAL_MPU_Enable+0x38>)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800572e:	4b0a      	ldr	r3, [pc, #40]	@ (8005758 <HAL_MPU_Enable+0x3c>)
 8005730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005732:	4a09      	ldr	r2, [pc, #36]	@ (8005758 <HAL_MPU_Enable+0x3c>)
 8005734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005738:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800573a:	f3bf 8f4f 	dsb	sy
}
 800573e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005740:	f3bf 8f6f 	isb	sy
}
 8005744:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	e000ed90 	.word	0xe000ed90
 8005758:	e000ed00 	.word	0xe000ed00

0800575c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	785a      	ldrb	r2, [r3, #1]
 8005768:	4b1b      	ldr	r3, [pc, #108]	@ (80057d8 <HAL_MPU_ConfigRegion+0x7c>)
 800576a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800576c:	4b1a      	ldr	r3, [pc, #104]	@ (80057d8 <HAL_MPU_ConfigRegion+0x7c>)
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	4a19      	ldr	r2, [pc, #100]	@ (80057d8 <HAL_MPU_ConfigRegion+0x7c>)
 8005772:	f023 0301 	bic.w	r3, r3, #1
 8005776:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005778:	4a17      	ldr	r2, [pc, #92]	@ (80057d8 <HAL_MPU_ConfigRegion+0x7c>)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	7b1b      	ldrb	r3, [r3, #12]
 8005784:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	7adb      	ldrb	r3, [r3, #11]
 800578a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800578c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	7a9b      	ldrb	r3, [r3, #10]
 8005792:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005794:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	7b5b      	ldrb	r3, [r3, #13]
 800579a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800579c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	7b9b      	ldrb	r3, [r3, #14]
 80057a2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80057a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	7bdb      	ldrb	r3, [r3, #15]
 80057aa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80057ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	7a5b      	ldrb	r3, [r3, #9]
 80057b2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80057b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	7a1b      	ldrb	r3, [r3, #8]
 80057ba:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80057bc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	7812      	ldrb	r2, [r2, #0]
 80057c2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80057c4:	4a04      	ldr	r2, [pc, #16]	@ (80057d8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80057c6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80057c8:	6113      	str	r3, [r2, #16]
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	e000ed90 	.word	0xe000ed90

080057dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80057e4:	f7ff fe42 	bl	800546c <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e312      	b.n	8005e1a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a66      	ldr	r2, [pc, #408]	@ (8005994 <HAL_DMA_Init+0x1b8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d04a      	beq.n	8005894 <HAL_DMA_Init+0xb8>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a65      	ldr	r2, [pc, #404]	@ (8005998 <HAL_DMA_Init+0x1bc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d045      	beq.n	8005894 <HAL_DMA_Init+0xb8>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a63      	ldr	r2, [pc, #396]	@ (800599c <HAL_DMA_Init+0x1c0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d040      	beq.n	8005894 <HAL_DMA_Init+0xb8>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a62      	ldr	r2, [pc, #392]	@ (80059a0 <HAL_DMA_Init+0x1c4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d03b      	beq.n	8005894 <HAL_DMA_Init+0xb8>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a60      	ldr	r2, [pc, #384]	@ (80059a4 <HAL_DMA_Init+0x1c8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d036      	beq.n	8005894 <HAL_DMA_Init+0xb8>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a5f      	ldr	r2, [pc, #380]	@ (80059a8 <HAL_DMA_Init+0x1cc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d031      	beq.n	8005894 <HAL_DMA_Init+0xb8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a5d      	ldr	r2, [pc, #372]	@ (80059ac <HAL_DMA_Init+0x1d0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d02c      	beq.n	8005894 <HAL_DMA_Init+0xb8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a5c      	ldr	r2, [pc, #368]	@ (80059b0 <HAL_DMA_Init+0x1d4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d027      	beq.n	8005894 <HAL_DMA_Init+0xb8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a5a      	ldr	r2, [pc, #360]	@ (80059b4 <HAL_DMA_Init+0x1d8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d022      	beq.n	8005894 <HAL_DMA_Init+0xb8>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a59      	ldr	r2, [pc, #356]	@ (80059b8 <HAL_DMA_Init+0x1dc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d01d      	beq.n	8005894 <HAL_DMA_Init+0xb8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a57      	ldr	r2, [pc, #348]	@ (80059bc <HAL_DMA_Init+0x1e0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d018      	beq.n	8005894 <HAL_DMA_Init+0xb8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a56      	ldr	r2, [pc, #344]	@ (80059c0 <HAL_DMA_Init+0x1e4>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d013      	beq.n	8005894 <HAL_DMA_Init+0xb8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a54      	ldr	r2, [pc, #336]	@ (80059c4 <HAL_DMA_Init+0x1e8>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00e      	beq.n	8005894 <HAL_DMA_Init+0xb8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a53      	ldr	r2, [pc, #332]	@ (80059c8 <HAL_DMA_Init+0x1ec>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d009      	beq.n	8005894 <HAL_DMA_Init+0xb8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a51      	ldr	r2, [pc, #324]	@ (80059cc <HAL_DMA_Init+0x1f0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <HAL_DMA_Init+0xb8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a50      	ldr	r2, [pc, #320]	@ (80059d0 <HAL_DMA_Init+0x1f4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d101      	bne.n	8005898 <HAL_DMA_Init+0xbc>
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <HAL_DMA_Init+0xbe>
 8005898:	2300      	movs	r3, #0
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 813c 	beq.w	8005b18 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a37      	ldr	r2, [pc, #220]	@ (8005994 <HAL_DMA_Init+0x1b8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d04a      	beq.n	8005950 <HAL_DMA_Init+0x174>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a36      	ldr	r2, [pc, #216]	@ (8005998 <HAL_DMA_Init+0x1bc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d045      	beq.n	8005950 <HAL_DMA_Init+0x174>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a34      	ldr	r2, [pc, #208]	@ (800599c <HAL_DMA_Init+0x1c0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d040      	beq.n	8005950 <HAL_DMA_Init+0x174>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a33      	ldr	r2, [pc, #204]	@ (80059a0 <HAL_DMA_Init+0x1c4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d03b      	beq.n	8005950 <HAL_DMA_Init+0x174>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a31      	ldr	r2, [pc, #196]	@ (80059a4 <HAL_DMA_Init+0x1c8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d036      	beq.n	8005950 <HAL_DMA_Init+0x174>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a30      	ldr	r2, [pc, #192]	@ (80059a8 <HAL_DMA_Init+0x1cc>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d031      	beq.n	8005950 <HAL_DMA_Init+0x174>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2e      	ldr	r2, [pc, #184]	@ (80059ac <HAL_DMA_Init+0x1d0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d02c      	beq.n	8005950 <HAL_DMA_Init+0x174>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a2d      	ldr	r2, [pc, #180]	@ (80059b0 <HAL_DMA_Init+0x1d4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d027      	beq.n	8005950 <HAL_DMA_Init+0x174>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a2b      	ldr	r2, [pc, #172]	@ (80059b4 <HAL_DMA_Init+0x1d8>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d022      	beq.n	8005950 <HAL_DMA_Init+0x174>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a2a      	ldr	r2, [pc, #168]	@ (80059b8 <HAL_DMA_Init+0x1dc>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d01d      	beq.n	8005950 <HAL_DMA_Init+0x174>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a28      	ldr	r2, [pc, #160]	@ (80059bc <HAL_DMA_Init+0x1e0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d018      	beq.n	8005950 <HAL_DMA_Init+0x174>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a27      	ldr	r2, [pc, #156]	@ (80059c0 <HAL_DMA_Init+0x1e4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d013      	beq.n	8005950 <HAL_DMA_Init+0x174>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a25      	ldr	r2, [pc, #148]	@ (80059c4 <HAL_DMA_Init+0x1e8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00e      	beq.n	8005950 <HAL_DMA_Init+0x174>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a24      	ldr	r2, [pc, #144]	@ (80059c8 <HAL_DMA_Init+0x1ec>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d009      	beq.n	8005950 <HAL_DMA_Init+0x174>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a22      	ldr	r2, [pc, #136]	@ (80059cc <HAL_DMA_Init+0x1f0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d004      	beq.n	8005950 <HAL_DMA_Init+0x174>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a21      	ldr	r2, [pc, #132]	@ (80059d0 <HAL_DMA_Init+0x1f4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d108      	bne.n	8005962 <HAL_DMA_Init+0x186>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e007      	b.n	8005972 <HAL_DMA_Init+0x196>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0201 	bic.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005972:	e02f      	b.n	80059d4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005974:	f7ff fd7a 	bl	800546c <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b05      	cmp	r3, #5
 8005980:	d928      	bls.n	80059d4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2203      	movs	r2, #3
 800598c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e242      	b.n	8005e1a <HAL_DMA_Init+0x63e>
 8005994:	40020010 	.word	0x40020010
 8005998:	40020028 	.word	0x40020028
 800599c:	40020040 	.word	0x40020040
 80059a0:	40020058 	.word	0x40020058
 80059a4:	40020070 	.word	0x40020070
 80059a8:	40020088 	.word	0x40020088
 80059ac:	400200a0 	.word	0x400200a0
 80059b0:	400200b8 	.word	0x400200b8
 80059b4:	40020410 	.word	0x40020410
 80059b8:	40020428 	.word	0x40020428
 80059bc:	40020440 	.word	0x40020440
 80059c0:	40020458 	.word	0x40020458
 80059c4:	40020470 	.word	0x40020470
 80059c8:	40020488 	.word	0x40020488
 80059cc:	400204a0 	.word	0x400204a0
 80059d0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1c8      	bne.n	8005974 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	4b83      	ldr	r3, [pc, #524]	@ (8005bfc <HAL_DMA_Init+0x420>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80059fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d107      	bne.n	8005a38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a30:	4313      	orrs	r3, r2
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b28      	cmp	r3, #40	@ 0x28
 8005a3e:	d903      	bls.n	8005a48 <HAL_DMA_Init+0x26c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a46:	d91f      	bls.n	8005a88 <HAL_DMA_Init+0x2ac>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a4e:	d903      	bls.n	8005a58 <HAL_DMA_Init+0x27c>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b42      	cmp	r3, #66	@ 0x42
 8005a56:	d917      	bls.n	8005a88 <HAL_DMA_Init+0x2ac>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b46      	cmp	r3, #70	@ 0x46
 8005a5e:	d903      	bls.n	8005a68 <HAL_DMA_Init+0x28c>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b48      	cmp	r3, #72	@ 0x48
 8005a66:	d90f      	bls.n	8005a88 <HAL_DMA_Init+0x2ac>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b4e      	cmp	r3, #78	@ 0x4e
 8005a6e:	d903      	bls.n	8005a78 <HAL_DMA_Init+0x29c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b52      	cmp	r3, #82	@ 0x52
 8005a76:	d907      	bls.n	8005a88 <HAL_DMA_Init+0x2ac>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	2b73      	cmp	r3, #115	@ 0x73
 8005a7e:	d905      	bls.n	8005a8c <HAL_DMA_Init+0x2b0>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b77      	cmp	r3, #119	@ 0x77
 8005a86:	d801      	bhi.n	8005a8c <HAL_DMA_Init+0x2b0>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e000      	b.n	8005a8e <HAL_DMA_Init+0x2b2>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a98:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f023 0307 	bic.w	r3, r3, #7
 8005ab0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d117      	bne.n	8005af4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00e      	beq.n	8005af4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f002 f81e 	bl	8007b18 <DMA_CheckFifoParam>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d008      	beq.n	8005af4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2240      	movs	r2, #64	@ 0x40
 8005ae6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e192      	b.n	8005e1a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f001 ff59 	bl	80079b4 <DMA_CalcBaseAndBitshift>
 8005b02:	4603      	mov	r3, r0
 8005b04:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	223f      	movs	r2, #63	@ 0x3f
 8005b10:	409a      	lsls	r2, r3
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	609a      	str	r2, [r3, #8]
 8005b16:	e0c8      	b.n	8005caa <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a38      	ldr	r2, [pc, #224]	@ (8005c00 <HAL_DMA_Init+0x424>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d022      	beq.n	8005b68 <HAL_DMA_Init+0x38c>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a37      	ldr	r2, [pc, #220]	@ (8005c04 <HAL_DMA_Init+0x428>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d01d      	beq.n	8005b68 <HAL_DMA_Init+0x38c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a35      	ldr	r2, [pc, #212]	@ (8005c08 <HAL_DMA_Init+0x42c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d018      	beq.n	8005b68 <HAL_DMA_Init+0x38c>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a34      	ldr	r2, [pc, #208]	@ (8005c0c <HAL_DMA_Init+0x430>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d013      	beq.n	8005b68 <HAL_DMA_Init+0x38c>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a32      	ldr	r2, [pc, #200]	@ (8005c10 <HAL_DMA_Init+0x434>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00e      	beq.n	8005b68 <HAL_DMA_Init+0x38c>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a31      	ldr	r2, [pc, #196]	@ (8005c14 <HAL_DMA_Init+0x438>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d009      	beq.n	8005b68 <HAL_DMA_Init+0x38c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a2f      	ldr	r2, [pc, #188]	@ (8005c18 <HAL_DMA_Init+0x43c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <HAL_DMA_Init+0x38c>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a2e      	ldr	r2, [pc, #184]	@ (8005c1c <HAL_DMA_Init+0x440>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d101      	bne.n	8005b6c <HAL_DMA_Init+0x390>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e000      	b.n	8005b6e <HAL_DMA_Init+0x392>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 8092 	beq.w	8005c98 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a21      	ldr	r2, [pc, #132]	@ (8005c00 <HAL_DMA_Init+0x424>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d021      	beq.n	8005bc2 <HAL_DMA_Init+0x3e6>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a20      	ldr	r2, [pc, #128]	@ (8005c04 <HAL_DMA_Init+0x428>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d01c      	beq.n	8005bc2 <HAL_DMA_Init+0x3e6>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8005c08 <HAL_DMA_Init+0x42c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d017      	beq.n	8005bc2 <HAL_DMA_Init+0x3e6>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1d      	ldr	r2, [pc, #116]	@ (8005c0c <HAL_DMA_Init+0x430>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d012      	beq.n	8005bc2 <HAL_DMA_Init+0x3e6>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c10 <HAL_DMA_Init+0x434>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00d      	beq.n	8005bc2 <HAL_DMA_Init+0x3e6>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a1a      	ldr	r2, [pc, #104]	@ (8005c14 <HAL_DMA_Init+0x438>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d008      	beq.n	8005bc2 <HAL_DMA_Init+0x3e6>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a18      	ldr	r2, [pc, #96]	@ (8005c18 <HAL_DMA_Init+0x43c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d003      	beq.n	8005bc2 <HAL_DMA_Init+0x3e6>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a17      	ldr	r2, [pc, #92]	@ (8005c1c <HAL_DMA_Init+0x440>)
 8005bc0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4b10      	ldr	r3, [pc, #64]	@ (8005c20 <HAL_DMA_Init+0x444>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2b40      	cmp	r3, #64	@ 0x40
 8005be8:	d01c      	beq.n	8005c24 <HAL_DMA_Init+0x448>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b80      	cmp	r3, #128	@ 0x80
 8005bf0:	d102      	bne.n	8005bf8 <HAL_DMA_Init+0x41c>
 8005bf2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005bf6:	e016      	b.n	8005c26 <HAL_DMA_Init+0x44a>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e014      	b.n	8005c26 <HAL_DMA_Init+0x44a>
 8005bfc:	fe10803f 	.word	0xfe10803f
 8005c00:	58025408 	.word	0x58025408
 8005c04:	5802541c 	.word	0x5802541c
 8005c08:	58025430 	.word	0x58025430
 8005c0c:	58025444 	.word	0x58025444
 8005c10:	58025458 	.word	0x58025458
 8005c14:	5802546c 	.word	0x5802546c
 8005c18:	58025480 	.word	0x58025480
 8005c1c:	58025494 	.word	0x58025494
 8005c20:	fffe000f 	.word	0xfffe000f
 8005c24:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	68d2      	ldr	r2, [r2, #12]
 8005c2a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c54:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4b6e      	ldr	r3, [pc, #440]	@ (8005e24 <HAL_DMA_Init+0x648>)
 8005c6c:	4413      	add	r3, r2
 8005c6e:	4a6e      	ldr	r2, [pc, #440]	@ (8005e28 <HAL_DMA_Init+0x64c>)
 8005c70:	fba2 2303 	umull	r2, r3, r2, r3
 8005c74:	091b      	lsrs	r3, r3, #4
 8005c76:	009a      	lsls	r2, r3, #2
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 fe99 	bl	80079b4 <DMA_CalcBaseAndBitshift>
 8005c82:	4603      	mov	r3, r0
 8005c84:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c8a:	f003 031f 	and.w	r3, r3, #31
 8005c8e:	2201      	movs	r2, #1
 8005c90:	409a      	lsls	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	605a      	str	r2, [r3, #4]
 8005c96:	e008      	b.n	8005caa <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2240      	movs	r2, #64	@ 0x40
 8005c9c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2203      	movs	r2, #3
 8005ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e0b7      	b.n	8005e1a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a5f      	ldr	r2, [pc, #380]	@ (8005e2c <HAL_DMA_Init+0x650>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d072      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a5d      	ldr	r2, [pc, #372]	@ (8005e30 <HAL_DMA_Init+0x654>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d06d      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a5c      	ldr	r2, [pc, #368]	@ (8005e34 <HAL_DMA_Init+0x658>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d068      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a5a      	ldr	r2, [pc, #360]	@ (8005e38 <HAL_DMA_Init+0x65c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d063      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a59      	ldr	r2, [pc, #356]	@ (8005e3c <HAL_DMA_Init+0x660>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d05e      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a57      	ldr	r2, [pc, #348]	@ (8005e40 <HAL_DMA_Init+0x664>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d059      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a56      	ldr	r2, [pc, #344]	@ (8005e44 <HAL_DMA_Init+0x668>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d054      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a54      	ldr	r2, [pc, #336]	@ (8005e48 <HAL_DMA_Init+0x66c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d04f      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a53      	ldr	r2, [pc, #332]	@ (8005e4c <HAL_DMA_Init+0x670>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d04a      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a51      	ldr	r2, [pc, #324]	@ (8005e50 <HAL_DMA_Init+0x674>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d045      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a50      	ldr	r2, [pc, #320]	@ (8005e54 <HAL_DMA_Init+0x678>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d040      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a4e      	ldr	r2, [pc, #312]	@ (8005e58 <HAL_DMA_Init+0x67c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d03b      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a4d      	ldr	r2, [pc, #308]	@ (8005e5c <HAL_DMA_Init+0x680>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d036      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a4b      	ldr	r2, [pc, #300]	@ (8005e60 <HAL_DMA_Init+0x684>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d031      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a4a      	ldr	r2, [pc, #296]	@ (8005e64 <HAL_DMA_Init+0x688>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d02c      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a48      	ldr	r2, [pc, #288]	@ (8005e68 <HAL_DMA_Init+0x68c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d027      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a47      	ldr	r2, [pc, #284]	@ (8005e6c <HAL_DMA_Init+0x690>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d022      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a45      	ldr	r2, [pc, #276]	@ (8005e70 <HAL_DMA_Init+0x694>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d01d      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a44      	ldr	r2, [pc, #272]	@ (8005e74 <HAL_DMA_Init+0x698>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d018      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a42      	ldr	r2, [pc, #264]	@ (8005e78 <HAL_DMA_Init+0x69c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d013      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a41      	ldr	r2, [pc, #260]	@ (8005e7c <HAL_DMA_Init+0x6a0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00e      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a3f      	ldr	r2, [pc, #252]	@ (8005e80 <HAL_DMA_Init+0x6a4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d009      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a3e      	ldr	r2, [pc, #248]	@ (8005e84 <HAL_DMA_Init+0x6a8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d004      	beq.n	8005d9a <HAL_DMA_Init+0x5be>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a3c      	ldr	r2, [pc, #240]	@ (8005e88 <HAL_DMA_Init+0x6ac>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d101      	bne.n	8005d9e <HAL_DMA_Init+0x5c2>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e000      	b.n	8005da0 <HAL_DMA_Init+0x5c4>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d032      	beq.n	8005e0a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 ff33 	bl	8007c10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	2b80      	cmp	r3, #128	@ 0x80
 8005db0:	d102      	bne.n	8005db8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005dcc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d010      	beq.n	8005df8 <HAL_DMA_Init+0x61c>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b08      	cmp	r3, #8
 8005ddc:	d80c      	bhi.n	8005df8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f001 ffb0 	bl	8007d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005df4:	605a      	str	r2, [r3, #4]
 8005df6:	e008      	b.n	8005e0a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	a7fdabf8 	.word	0xa7fdabf8
 8005e28:	cccccccd 	.word	0xcccccccd
 8005e2c:	40020010 	.word	0x40020010
 8005e30:	40020028 	.word	0x40020028
 8005e34:	40020040 	.word	0x40020040
 8005e38:	40020058 	.word	0x40020058
 8005e3c:	40020070 	.word	0x40020070
 8005e40:	40020088 	.word	0x40020088
 8005e44:	400200a0 	.word	0x400200a0
 8005e48:	400200b8 	.word	0x400200b8
 8005e4c:	40020410 	.word	0x40020410
 8005e50:	40020428 	.word	0x40020428
 8005e54:	40020440 	.word	0x40020440
 8005e58:	40020458 	.word	0x40020458
 8005e5c:	40020470 	.word	0x40020470
 8005e60:	40020488 	.word	0x40020488
 8005e64:	400204a0 	.word	0x400204a0
 8005e68:	400204b8 	.word	0x400204b8
 8005e6c:	58025408 	.word	0x58025408
 8005e70:	5802541c 	.word	0x5802541c
 8005e74:	58025430 	.word	0x58025430
 8005e78:	58025444 	.word	0x58025444
 8005e7c:	58025458 	.word	0x58025458
 8005e80:	5802546c 	.word	0x5802546c
 8005e84:	58025480 	.word	0x58025480
 8005e88:	58025494 	.word	0x58025494

08005e8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e226      	b.n	80062f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d101      	bne.n	8005eb6 <HAL_DMA_Start_IT+0x2a>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e21f      	b.n	80062f6 <HAL_DMA_Start_IT+0x46a>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	f040 820a 	bne.w	80062e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a68      	ldr	r2, [pc, #416]	@ (8006080 <HAL_DMA_Start_IT+0x1f4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d04a      	beq.n	8005f7a <HAL_DMA_Start_IT+0xee>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a66      	ldr	r2, [pc, #408]	@ (8006084 <HAL_DMA_Start_IT+0x1f8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d045      	beq.n	8005f7a <HAL_DMA_Start_IT+0xee>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a65      	ldr	r2, [pc, #404]	@ (8006088 <HAL_DMA_Start_IT+0x1fc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d040      	beq.n	8005f7a <HAL_DMA_Start_IT+0xee>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a63      	ldr	r2, [pc, #396]	@ (800608c <HAL_DMA_Start_IT+0x200>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d03b      	beq.n	8005f7a <HAL_DMA_Start_IT+0xee>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a62      	ldr	r2, [pc, #392]	@ (8006090 <HAL_DMA_Start_IT+0x204>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d036      	beq.n	8005f7a <HAL_DMA_Start_IT+0xee>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a60      	ldr	r2, [pc, #384]	@ (8006094 <HAL_DMA_Start_IT+0x208>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d031      	beq.n	8005f7a <HAL_DMA_Start_IT+0xee>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a5f      	ldr	r2, [pc, #380]	@ (8006098 <HAL_DMA_Start_IT+0x20c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d02c      	beq.n	8005f7a <HAL_DMA_Start_IT+0xee>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a5d      	ldr	r2, [pc, #372]	@ (800609c <HAL_DMA_Start_IT+0x210>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d027      	beq.n	8005f7a <HAL_DMA_Start_IT+0xee>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a5c      	ldr	r2, [pc, #368]	@ (80060a0 <HAL_DMA_Start_IT+0x214>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d022      	beq.n	8005f7a <HAL_DMA_Start_IT+0xee>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a5a      	ldr	r2, [pc, #360]	@ (80060a4 <HAL_DMA_Start_IT+0x218>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d01d      	beq.n	8005f7a <HAL_DMA_Start_IT+0xee>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a59      	ldr	r2, [pc, #356]	@ (80060a8 <HAL_DMA_Start_IT+0x21c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d018      	beq.n	8005f7a <HAL_DMA_Start_IT+0xee>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a57      	ldr	r2, [pc, #348]	@ (80060ac <HAL_DMA_Start_IT+0x220>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d013      	beq.n	8005f7a <HAL_DMA_Start_IT+0xee>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a56      	ldr	r2, [pc, #344]	@ (80060b0 <HAL_DMA_Start_IT+0x224>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00e      	beq.n	8005f7a <HAL_DMA_Start_IT+0xee>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a54      	ldr	r2, [pc, #336]	@ (80060b4 <HAL_DMA_Start_IT+0x228>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d009      	beq.n	8005f7a <HAL_DMA_Start_IT+0xee>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a53      	ldr	r2, [pc, #332]	@ (80060b8 <HAL_DMA_Start_IT+0x22c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d004      	beq.n	8005f7a <HAL_DMA_Start_IT+0xee>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a51      	ldr	r2, [pc, #324]	@ (80060bc <HAL_DMA_Start_IT+0x230>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d108      	bne.n	8005f8c <HAL_DMA_Start_IT+0x100>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0201 	bic.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	e007      	b.n	8005f9c <HAL_DMA_Start_IT+0x110>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0201 	bic.w	r2, r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f001 fb5a 	bl	800765c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a34      	ldr	r2, [pc, #208]	@ (8006080 <HAL_DMA_Start_IT+0x1f4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d04a      	beq.n	8006048 <HAL_DMA_Start_IT+0x1bc>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a33      	ldr	r2, [pc, #204]	@ (8006084 <HAL_DMA_Start_IT+0x1f8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d045      	beq.n	8006048 <HAL_DMA_Start_IT+0x1bc>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a31      	ldr	r2, [pc, #196]	@ (8006088 <HAL_DMA_Start_IT+0x1fc>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d040      	beq.n	8006048 <HAL_DMA_Start_IT+0x1bc>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a30      	ldr	r2, [pc, #192]	@ (800608c <HAL_DMA_Start_IT+0x200>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d03b      	beq.n	8006048 <HAL_DMA_Start_IT+0x1bc>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a2e      	ldr	r2, [pc, #184]	@ (8006090 <HAL_DMA_Start_IT+0x204>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d036      	beq.n	8006048 <HAL_DMA_Start_IT+0x1bc>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a2d      	ldr	r2, [pc, #180]	@ (8006094 <HAL_DMA_Start_IT+0x208>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d031      	beq.n	8006048 <HAL_DMA_Start_IT+0x1bc>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a2b      	ldr	r2, [pc, #172]	@ (8006098 <HAL_DMA_Start_IT+0x20c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d02c      	beq.n	8006048 <HAL_DMA_Start_IT+0x1bc>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a2a      	ldr	r2, [pc, #168]	@ (800609c <HAL_DMA_Start_IT+0x210>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d027      	beq.n	8006048 <HAL_DMA_Start_IT+0x1bc>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a28      	ldr	r2, [pc, #160]	@ (80060a0 <HAL_DMA_Start_IT+0x214>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d022      	beq.n	8006048 <HAL_DMA_Start_IT+0x1bc>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a27      	ldr	r2, [pc, #156]	@ (80060a4 <HAL_DMA_Start_IT+0x218>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d01d      	beq.n	8006048 <HAL_DMA_Start_IT+0x1bc>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a25      	ldr	r2, [pc, #148]	@ (80060a8 <HAL_DMA_Start_IT+0x21c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d018      	beq.n	8006048 <HAL_DMA_Start_IT+0x1bc>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a24      	ldr	r2, [pc, #144]	@ (80060ac <HAL_DMA_Start_IT+0x220>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d013      	beq.n	8006048 <HAL_DMA_Start_IT+0x1bc>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a22      	ldr	r2, [pc, #136]	@ (80060b0 <HAL_DMA_Start_IT+0x224>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00e      	beq.n	8006048 <HAL_DMA_Start_IT+0x1bc>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a21      	ldr	r2, [pc, #132]	@ (80060b4 <HAL_DMA_Start_IT+0x228>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d009      	beq.n	8006048 <HAL_DMA_Start_IT+0x1bc>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a1f      	ldr	r2, [pc, #124]	@ (80060b8 <HAL_DMA_Start_IT+0x22c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d004      	beq.n	8006048 <HAL_DMA_Start_IT+0x1bc>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a1e      	ldr	r2, [pc, #120]	@ (80060bc <HAL_DMA_Start_IT+0x230>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d101      	bne.n	800604c <HAL_DMA_Start_IT+0x1c0>
 8006048:	2301      	movs	r3, #1
 800604a:	e000      	b.n	800604e <HAL_DMA_Start_IT+0x1c2>
 800604c:	2300      	movs	r3, #0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d036      	beq.n	80060c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f023 021e 	bic.w	r2, r3, #30
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0216 	orr.w	r2, r2, #22
 8006064:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606a:	2b00      	cmp	r3, #0
 800606c:	d03e      	beq.n	80060ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0208 	orr.w	r2, r2, #8
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	e035      	b.n	80060ec <HAL_DMA_Start_IT+0x260>
 8006080:	40020010 	.word	0x40020010
 8006084:	40020028 	.word	0x40020028
 8006088:	40020040 	.word	0x40020040
 800608c:	40020058 	.word	0x40020058
 8006090:	40020070 	.word	0x40020070
 8006094:	40020088 	.word	0x40020088
 8006098:	400200a0 	.word	0x400200a0
 800609c:	400200b8 	.word	0x400200b8
 80060a0:	40020410 	.word	0x40020410
 80060a4:	40020428 	.word	0x40020428
 80060a8:	40020440 	.word	0x40020440
 80060ac:	40020458 	.word	0x40020458
 80060b0:	40020470 	.word	0x40020470
 80060b4:	40020488 	.word	0x40020488
 80060b8:	400204a0 	.word	0x400204a0
 80060bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f023 020e 	bic.w	r2, r3, #14
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 020a 	orr.w	r2, r2, #10
 80060d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d007      	beq.n	80060ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0204 	orr.w	r2, r2, #4
 80060ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a83      	ldr	r2, [pc, #524]	@ (8006300 <HAL_DMA_Start_IT+0x474>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d072      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a82      	ldr	r2, [pc, #520]	@ (8006304 <HAL_DMA_Start_IT+0x478>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d06d      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a80      	ldr	r2, [pc, #512]	@ (8006308 <HAL_DMA_Start_IT+0x47c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d068      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a7f      	ldr	r2, [pc, #508]	@ (800630c <HAL_DMA_Start_IT+0x480>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d063      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a7d      	ldr	r2, [pc, #500]	@ (8006310 <HAL_DMA_Start_IT+0x484>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d05e      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a7c      	ldr	r2, [pc, #496]	@ (8006314 <HAL_DMA_Start_IT+0x488>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d059      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a7a      	ldr	r2, [pc, #488]	@ (8006318 <HAL_DMA_Start_IT+0x48c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d054      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a79      	ldr	r2, [pc, #484]	@ (800631c <HAL_DMA_Start_IT+0x490>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d04f      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a77      	ldr	r2, [pc, #476]	@ (8006320 <HAL_DMA_Start_IT+0x494>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d04a      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a76      	ldr	r2, [pc, #472]	@ (8006324 <HAL_DMA_Start_IT+0x498>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d045      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a74      	ldr	r2, [pc, #464]	@ (8006328 <HAL_DMA_Start_IT+0x49c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d040      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a73      	ldr	r2, [pc, #460]	@ (800632c <HAL_DMA_Start_IT+0x4a0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d03b      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a71      	ldr	r2, [pc, #452]	@ (8006330 <HAL_DMA_Start_IT+0x4a4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d036      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a70      	ldr	r2, [pc, #448]	@ (8006334 <HAL_DMA_Start_IT+0x4a8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d031      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a6e      	ldr	r2, [pc, #440]	@ (8006338 <HAL_DMA_Start_IT+0x4ac>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d02c      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a6d      	ldr	r2, [pc, #436]	@ (800633c <HAL_DMA_Start_IT+0x4b0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d027      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a6b      	ldr	r2, [pc, #428]	@ (8006340 <HAL_DMA_Start_IT+0x4b4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d022      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a6a      	ldr	r2, [pc, #424]	@ (8006344 <HAL_DMA_Start_IT+0x4b8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d01d      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a68      	ldr	r2, [pc, #416]	@ (8006348 <HAL_DMA_Start_IT+0x4bc>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d018      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a67      	ldr	r2, [pc, #412]	@ (800634c <HAL_DMA_Start_IT+0x4c0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d013      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a65      	ldr	r2, [pc, #404]	@ (8006350 <HAL_DMA_Start_IT+0x4c4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00e      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a64      	ldr	r2, [pc, #400]	@ (8006354 <HAL_DMA_Start_IT+0x4c8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d009      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a62      	ldr	r2, [pc, #392]	@ (8006358 <HAL_DMA_Start_IT+0x4cc>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d004      	beq.n	80061dc <HAL_DMA_Start_IT+0x350>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a61      	ldr	r2, [pc, #388]	@ (800635c <HAL_DMA_Start_IT+0x4d0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d101      	bne.n	80061e0 <HAL_DMA_Start_IT+0x354>
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <HAL_DMA_Start_IT+0x356>
 80061e0:	2300      	movs	r3, #0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01a      	beq.n	800621c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006202:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006216:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800621a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a37      	ldr	r2, [pc, #220]	@ (8006300 <HAL_DMA_Start_IT+0x474>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d04a      	beq.n	80062bc <HAL_DMA_Start_IT+0x430>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a36      	ldr	r2, [pc, #216]	@ (8006304 <HAL_DMA_Start_IT+0x478>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d045      	beq.n	80062bc <HAL_DMA_Start_IT+0x430>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a34      	ldr	r2, [pc, #208]	@ (8006308 <HAL_DMA_Start_IT+0x47c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d040      	beq.n	80062bc <HAL_DMA_Start_IT+0x430>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a33      	ldr	r2, [pc, #204]	@ (800630c <HAL_DMA_Start_IT+0x480>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d03b      	beq.n	80062bc <HAL_DMA_Start_IT+0x430>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a31      	ldr	r2, [pc, #196]	@ (8006310 <HAL_DMA_Start_IT+0x484>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d036      	beq.n	80062bc <HAL_DMA_Start_IT+0x430>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a30      	ldr	r2, [pc, #192]	@ (8006314 <HAL_DMA_Start_IT+0x488>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d031      	beq.n	80062bc <HAL_DMA_Start_IT+0x430>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a2e      	ldr	r2, [pc, #184]	@ (8006318 <HAL_DMA_Start_IT+0x48c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d02c      	beq.n	80062bc <HAL_DMA_Start_IT+0x430>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a2d      	ldr	r2, [pc, #180]	@ (800631c <HAL_DMA_Start_IT+0x490>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d027      	beq.n	80062bc <HAL_DMA_Start_IT+0x430>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a2b      	ldr	r2, [pc, #172]	@ (8006320 <HAL_DMA_Start_IT+0x494>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d022      	beq.n	80062bc <HAL_DMA_Start_IT+0x430>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a2a      	ldr	r2, [pc, #168]	@ (8006324 <HAL_DMA_Start_IT+0x498>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d01d      	beq.n	80062bc <HAL_DMA_Start_IT+0x430>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a28      	ldr	r2, [pc, #160]	@ (8006328 <HAL_DMA_Start_IT+0x49c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d018      	beq.n	80062bc <HAL_DMA_Start_IT+0x430>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a27      	ldr	r2, [pc, #156]	@ (800632c <HAL_DMA_Start_IT+0x4a0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d013      	beq.n	80062bc <HAL_DMA_Start_IT+0x430>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a25      	ldr	r2, [pc, #148]	@ (8006330 <HAL_DMA_Start_IT+0x4a4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00e      	beq.n	80062bc <HAL_DMA_Start_IT+0x430>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a24      	ldr	r2, [pc, #144]	@ (8006334 <HAL_DMA_Start_IT+0x4a8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d009      	beq.n	80062bc <HAL_DMA_Start_IT+0x430>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a22      	ldr	r2, [pc, #136]	@ (8006338 <HAL_DMA_Start_IT+0x4ac>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d004      	beq.n	80062bc <HAL_DMA_Start_IT+0x430>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a21      	ldr	r2, [pc, #132]	@ (800633c <HAL_DMA_Start_IT+0x4b0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d108      	bne.n	80062ce <HAL_DMA_Start_IT+0x442>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0201 	orr.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	e012      	b.n	80062f4 <HAL_DMA_Start_IT+0x468>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0201 	orr.w	r2, r2, #1
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	e009      	b.n	80062f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	40020010 	.word	0x40020010
 8006304:	40020028 	.word	0x40020028
 8006308:	40020040 	.word	0x40020040
 800630c:	40020058 	.word	0x40020058
 8006310:	40020070 	.word	0x40020070
 8006314:	40020088 	.word	0x40020088
 8006318:	400200a0 	.word	0x400200a0
 800631c:	400200b8 	.word	0x400200b8
 8006320:	40020410 	.word	0x40020410
 8006324:	40020428 	.word	0x40020428
 8006328:	40020440 	.word	0x40020440
 800632c:	40020458 	.word	0x40020458
 8006330:	40020470 	.word	0x40020470
 8006334:	40020488 	.word	0x40020488
 8006338:	400204a0 	.word	0x400204a0
 800633c:	400204b8 	.word	0x400204b8
 8006340:	58025408 	.word	0x58025408
 8006344:	5802541c 	.word	0x5802541c
 8006348:	58025430 	.word	0x58025430
 800634c:	58025444 	.word	0x58025444
 8006350:	58025458 	.word	0x58025458
 8006354:	5802546c 	.word	0x5802546c
 8006358:	58025480 	.word	0x58025480
 800635c:	58025494 	.word	0x58025494

08006360 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e237      	b.n	80067e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d004      	beq.n	8006388 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2280      	movs	r2, #128	@ 0x80
 8006382:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e22c      	b.n	80067e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a5c      	ldr	r2, [pc, #368]	@ (8006500 <HAL_DMA_Abort_IT+0x1a0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d04a      	beq.n	8006428 <HAL_DMA_Abort_IT+0xc8>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a5b      	ldr	r2, [pc, #364]	@ (8006504 <HAL_DMA_Abort_IT+0x1a4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d045      	beq.n	8006428 <HAL_DMA_Abort_IT+0xc8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a59      	ldr	r2, [pc, #356]	@ (8006508 <HAL_DMA_Abort_IT+0x1a8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d040      	beq.n	8006428 <HAL_DMA_Abort_IT+0xc8>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a58      	ldr	r2, [pc, #352]	@ (800650c <HAL_DMA_Abort_IT+0x1ac>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d03b      	beq.n	8006428 <HAL_DMA_Abort_IT+0xc8>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a56      	ldr	r2, [pc, #344]	@ (8006510 <HAL_DMA_Abort_IT+0x1b0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d036      	beq.n	8006428 <HAL_DMA_Abort_IT+0xc8>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a55      	ldr	r2, [pc, #340]	@ (8006514 <HAL_DMA_Abort_IT+0x1b4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d031      	beq.n	8006428 <HAL_DMA_Abort_IT+0xc8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a53      	ldr	r2, [pc, #332]	@ (8006518 <HAL_DMA_Abort_IT+0x1b8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d02c      	beq.n	8006428 <HAL_DMA_Abort_IT+0xc8>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a52      	ldr	r2, [pc, #328]	@ (800651c <HAL_DMA_Abort_IT+0x1bc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d027      	beq.n	8006428 <HAL_DMA_Abort_IT+0xc8>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a50      	ldr	r2, [pc, #320]	@ (8006520 <HAL_DMA_Abort_IT+0x1c0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d022      	beq.n	8006428 <HAL_DMA_Abort_IT+0xc8>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a4f      	ldr	r2, [pc, #316]	@ (8006524 <HAL_DMA_Abort_IT+0x1c4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d01d      	beq.n	8006428 <HAL_DMA_Abort_IT+0xc8>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a4d      	ldr	r2, [pc, #308]	@ (8006528 <HAL_DMA_Abort_IT+0x1c8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d018      	beq.n	8006428 <HAL_DMA_Abort_IT+0xc8>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a4c      	ldr	r2, [pc, #304]	@ (800652c <HAL_DMA_Abort_IT+0x1cc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d013      	beq.n	8006428 <HAL_DMA_Abort_IT+0xc8>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a4a      	ldr	r2, [pc, #296]	@ (8006530 <HAL_DMA_Abort_IT+0x1d0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00e      	beq.n	8006428 <HAL_DMA_Abort_IT+0xc8>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a49      	ldr	r2, [pc, #292]	@ (8006534 <HAL_DMA_Abort_IT+0x1d4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d009      	beq.n	8006428 <HAL_DMA_Abort_IT+0xc8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a47      	ldr	r2, [pc, #284]	@ (8006538 <HAL_DMA_Abort_IT+0x1d8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <HAL_DMA_Abort_IT+0xc8>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a46      	ldr	r2, [pc, #280]	@ (800653c <HAL_DMA_Abort_IT+0x1dc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d101      	bne.n	800642c <HAL_DMA_Abort_IT+0xcc>
 8006428:	2301      	movs	r3, #1
 800642a:	e000      	b.n	800642e <HAL_DMA_Abort_IT+0xce>
 800642c:	2300      	movs	r3, #0
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 8086 	beq.w	8006540 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2204      	movs	r2, #4
 8006438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a2f      	ldr	r2, [pc, #188]	@ (8006500 <HAL_DMA_Abort_IT+0x1a0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d04a      	beq.n	80064dc <HAL_DMA_Abort_IT+0x17c>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a2e      	ldr	r2, [pc, #184]	@ (8006504 <HAL_DMA_Abort_IT+0x1a4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d045      	beq.n	80064dc <HAL_DMA_Abort_IT+0x17c>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a2c      	ldr	r2, [pc, #176]	@ (8006508 <HAL_DMA_Abort_IT+0x1a8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d040      	beq.n	80064dc <HAL_DMA_Abort_IT+0x17c>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a2b      	ldr	r2, [pc, #172]	@ (800650c <HAL_DMA_Abort_IT+0x1ac>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d03b      	beq.n	80064dc <HAL_DMA_Abort_IT+0x17c>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a29      	ldr	r2, [pc, #164]	@ (8006510 <HAL_DMA_Abort_IT+0x1b0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d036      	beq.n	80064dc <HAL_DMA_Abort_IT+0x17c>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a28      	ldr	r2, [pc, #160]	@ (8006514 <HAL_DMA_Abort_IT+0x1b4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d031      	beq.n	80064dc <HAL_DMA_Abort_IT+0x17c>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a26      	ldr	r2, [pc, #152]	@ (8006518 <HAL_DMA_Abort_IT+0x1b8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d02c      	beq.n	80064dc <HAL_DMA_Abort_IT+0x17c>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a25      	ldr	r2, [pc, #148]	@ (800651c <HAL_DMA_Abort_IT+0x1bc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d027      	beq.n	80064dc <HAL_DMA_Abort_IT+0x17c>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a23      	ldr	r2, [pc, #140]	@ (8006520 <HAL_DMA_Abort_IT+0x1c0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d022      	beq.n	80064dc <HAL_DMA_Abort_IT+0x17c>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a22      	ldr	r2, [pc, #136]	@ (8006524 <HAL_DMA_Abort_IT+0x1c4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d01d      	beq.n	80064dc <HAL_DMA_Abort_IT+0x17c>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a20      	ldr	r2, [pc, #128]	@ (8006528 <HAL_DMA_Abort_IT+0x1c8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d018      	beq.n	80064dc <HAL_DMA_Abort_IT+0x17c>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a1f      	ldr	r2, [pc, #124]	@ (800652c <HAL_DMA_Abort_IT+0x1cc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d013      	beq.n	80064dc <HAL_DMA_Abort_IT+0x17c>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006530 <HAL_DMA_Abort_IT+0x1d0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d00e      	beq.n	80064dc <HAL_DMA_Abort_IT+0x17c>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006534 <HAL_DMA_Abort_IT+0x1d4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d009      	beq.n	80064dc <HAL_DMA_Abort_IT+0x17c>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1a      	ldr	r2, [pc, #104]	@ (8006538 <HAL_DMA_Abort_IT+0x1d8>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d004      	beq.n	80064dc <HAL_DMA_Abort_IT+0x17c>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a19      	ldr	r2, [pc, #100]	@ (800653c <HAL_DMA_Abort_IT+0x1dc>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d108      	bne.n	80064ee <HAL_DMA_Abort_IT+0x18e>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0201 	bic.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	e178      	b.n	80067e0 <HAL_DMA_Abort_IT+0x480>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0201 	bic.w	r2, r2, #1
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	e16f      	b.n	80067e0 <HAL_DMA_Abort_IT+0x480>
 8006500:	40020010 	.word	0x40020010
 8006504:	40020028 	.word	0x40020028
 8006508:	40020040 	.word	0x40020040
 800650c:	40020058 	.word	0x40020058
 8006510:	40020070 	.word	0x40020070
 8006514:	40020088 	.word	0x40020088
 8006518:	400200a0 	.word	0x400200a0
 800651c:	400200b8 	.word	0x400200b8
 8006520:	40020410 	.word	0x40020410
 8006524:	40020428 	.word	0x40020428
 8006528:	40020440 	.word	0x40020440
 800652c:	40020458 	.word	0x40020458
 8006530:	40020470 	.word	0x40020470
 8006534:	40020488 	.word	0x40020488
 8006538:	400204a0 	.word	0x400204a0
 800653c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 020e 	bic.w	r2, r2, #14
 800654e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a6c      	ldr	r2, [pc, #432]	@ (8006708 <HAL_DMA_Abort_IT+0x3a8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d04a      	beq.n	80065f0 <HAL_DMA_Abort_IT+0x290>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a6b      	ldr	r2, [pc, #428]	@ (800670c <HAL_DMA_Abort_IT+0x3ac>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d045      	beq.n	80065f0 <HAL_DMA_Abort_IT+0x290>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a69      	ldr	r2, [pc, #420]	@ (8006710 <HAL_DMA_Abort_IT+0x3b0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d040      	beq.n	80065f0 <HAL_DMA_Abort_IT+0x290>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a68      	ldr	r2, [pc, #416]	@ (8006714 <HAL_DMA_Abort_IT+0x3b4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d03b      	beq.n	80065f0 <HAL_DMA_Abort_IT+0x290>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a66      	ldr	r2, [pc, #408]	@ (8006718 <HAL_DMA_Abort_IT+0x3b8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d036      	beq.n	80065f0 <HAL_DMA_Abort_IT+0x290>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a65      	ldr	r2, [pc, #404]	@ (800671c <HAL_DMA_Abort_IT+0x3bc>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d031      	beq.n	80065f0 <HAL_DMA_Abort_IT+0x290>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a63      	ldr	r2, [pc, #396]	@ (8006720 <HAL_DMA_Abort_IT+0x3c0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d02c      	beq.n	80065f0 <HAL_DMA_Abort_IT+0x290>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a62      	ldr	r2, [pc, #392]	@ (8006724 <HAL_DMA_Abort_IT+0x3c4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d027      	beq.n	80065f0 <HAL_DMA_Abort_IT+0x290>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a60      	ldr	r2, [pc, #384]	@ (8006728 <HAL_DMA_Abort_IT+0x3c8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d022      	beq.n	80065f0 <HAL_DMA_Abort_IT+0x290>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a5f      	ldr	r2, [pc, #380]	@ (800672c <HAL_DMA_Abort_IT+0x3cc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d01d      	beq.n	80065f0 <HAL_DMA_Abort_IT+0x290>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a5d      	ldr	r2, [pc, #372]	@ (8006730 <HAL_DMA_Abort_IT+0x3d0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d018      	beq.n	80065f0 <HAL_DMA_Abort_IT+0x290>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a5c      	ldr	r2, [pc, #368]	@ (8006734 <HAL_DMA_Abort_IT+0x3d4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d013      	beq.n	80065f0 <HAL_DMA_Abort_IT+0x290>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a5a      	ldr	r2, [pc, #360]	@ (8006738 <HAL_DMA_Abort_IT+0x3d8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00e      	beq.n	80065f0 <HAL_DMA_Abort_IT+0x290>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a59      	ldr	r2, [pc, #356]	@ (800673c <HAL_DMA_Abort_IT+0x3dc>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d009      	beq.n	80065f0 <HAL_DMA_Abort_IT+0x290>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a57      	ldr	r2, [pc, #348]	@ (8006740 <HAL_DMA_Abort_IT+0x3e0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d004      	beq.n	80065f0 <HAL_DMA_Abort_IT+0x290>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a56      	ldr	r2, [pc, #344]	@ (8006744 <HAL_DMA_Abort_IT+0x3e4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d108      	bne.n	8006602 <HAL_DMA_Abort_IT+0x2a2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0201 	bic.w	r2, r2, #1
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	e007      	b.n	8006612 <HAL_DMA_Abort_IT+0x2b2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0201 	bic.w	r2, r2, #1
 8006610:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a3c      	ldr	r2, [pc, #240]	@ (8006708 <HAL_DMA_Abort_IT+0x3a8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d072      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a3a      	ldr	r2, [pc, #232]	@ (800670c <HAL_DMA_Abort_IT+0x3ac>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d06d      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a39      	ldr	r2, [pc, #228]	@ (8006710 <HAL_DMA_Abort_IT+0x3b0>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d068      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a37      	ldr	r2, [pc, #220]	@ (8006714 <HAL_DMA_Abort_IT+0x3b4>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d063      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a36      	ldr	r2, [pc, #216]	@ (8006718 <HAL_DMA_Abort_IT+0x3b8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d05e      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a34      	ldr	r2, [pc, #208]	@ (800671c <HAL_DMA_Abort_IT+0x3bc>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d059      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a33      	ldr	r2, [pc, #204]	@ (8006720 <HAL_DMA_Abort_IT+0x3c0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d054      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a31      	ldr	r2, [pc, #196]	@ (8006724 <HAL_DMA_Abort_IT+0x3c4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d04f      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a30      	ldr	r2, [pc, #192]	@ (8006728 <HAL_DMA_Abort_IT+0x3c8>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d04a      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a2e      	ldr	r2, [pc, #184]	@ (800672c <HAL_DMA_Abort_IT+0x3cc>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d045      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a2d      	ldr	r2, [pc, #180]	@ (8006730 <HAL_DMA_Abort_IT+0x3d0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d040      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a2b      	ldr	r2, [pc, #172]	@ (8006734 <HAL_DMA_Abort_IT+0x3d4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d03b      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a2a      	ldr	r2, [pc, #168]	@ (8006738 <HAL_DMA_Abort_IT+0x3d8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d036      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a28      	ldr	r2, [pc, #160]	@ (800673c <HAL_DMA_Abort_IT+0x3dc>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d031      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a27      	ldr	r2, [pc, #156]	@ (8006740 <HAL_DMA_Abort_IT+0x3e0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d02c      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a25      	ldr	r2, [pc, #148]	@ (8006744 <HAL_DMA_Abort_IT+0x3e4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d027      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a24      	ldr	r2, [pc, #144]	@ (8006748 <HAL_DMA_Abort_IT+0x3e8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d022      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a22      	ldr	r2, [pc, #136]	@ (800674c <HAL_DMA_Abort_IT+0x3ec>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d01d      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a21      	ldr	r2, [pc, #132]	@ (8006750 <HAL_DMA_Abort_IT+0x3f0>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d018      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006754 <HAL_DMA_Abort_IT+0x3f4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d013      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1e      	ldr	r2, [pc, #120]	@ (8006758 <HAL_DMA_Abort_IT+0x3f8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00e      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1c      	ldr	r2, [pc, #112]	@ (800675c <HAL_DMA_Abort_IT+0x3fc>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d009      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006760 <HAL_DMA_Abort_IT+0x400>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d004      	beq.n	8006702 <HAL_DMA_Abort_IT+0x3a2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a19      	ldr	r2, [pc, #100]	@ (8006764 <HAL_DMA_Abort_IT+0x404>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d132      	bne.n	8006768 <HAL_DMA_Abort_IT+0x408>
 8006702:	2301      	movs	r3, #1
 8006704:	e031      	b.n	800676a <HAL_DMA_Abort_IT+0x40a>
 8006706:	bf00      	nop
 8006708:	40020010 	.word	0x40020010
 800670c:	40020028 	.word	0x40020028
 8006710:	40020040 	.word	0x40020040
 8006714:	40020058 	.word	0x40020058
 8006718:	40020070 	.word	0x40020070
 800671c:	40020088 	.word	0x40020088
 8006720:	400200a0 	.word	0x400200a0
 8006724:	400200b8 	.word	0x400200b8
 8006728:	40020410 	.word	0x40020410
 800672c:	40020428 	.word	0x40020428
 8006730:	40020440 	.word	0x40020440
 8006734:	40020458 	.word	0x40020458
 8006738:	40020470 	.word	0x40020470
 800673c:	40020488 	.word	0x40020488
 8006740:	400204a0 	.word	0x400204a0
 8006744:	400204b8 	.word	0x400204b8
 8006748:	58025408 	.word	0x58025408
 800674c:	5802541c 	.word	0x5802541c
 8006750:	58025430 	.word	0x58025430
 8006754:	58025444 	.word	0x58025444
 8006758:	58025458 	.word	0x58025458
 800675c:	5802546c 	.word	0x5802546c
 8006760:	58025480 	.word	0x58025480
 8006764:	58025494 	.word	0x58025494
 8006768:	2300      	movs	r3, #0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d028      	beq.n	80067c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006778:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800677c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006782:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	2201      	movs	r2, #1
 800678e:	409a      	lsls	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800679c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00c      	beq.n	80067c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80067be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop

080067ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08a      	sub	sp, #40	@ 0x28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80067f8:	4b67      	ldr	r3, [pc, #412]	@ (8006998 <HAL_DMA_IRQHandler+0x1ac>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a67      	ldr	r2, [pc, #412]	@ (800699c <HAL_DMA_IRQHandler+0x1b0>)
 80067fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006802:	0a9b      	lsrs	r3, r3, #10
 8006804:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800680a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006810:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a5f      	ldr	r2, [pc, #380]	@ (80069a0 <HAL_DMA_IRQHandler+0x1b4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d04a      	beq.n	80068be <HAL_DMA_IRQHandler+0xd2>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a5d      	ldr	r2, [pc, #372]	@ (80069a4 <HAL_DMA_IRQHandler+0x1b8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d045      	beq.n	80068be <HAL_DMA_IRQHandler+0xd2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a5c      	ldr	r2, [pc, #368]	@ (80069a8 <HAL_DMA_IRQHandler+0x1bc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d040      	beq.n	80068be <HAL_DMA_IRQHandler+0xd2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a5a      	ldr	r2, [pc, #360]	@ (80069ac <HAL_DMA_IRQHandler+0x1c0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d03b      	beq.n	80068be <HAL_DMA_IRQHandler+0xd2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a59      	ldr	r2, [pc, #356]	@ (80069b0 <HAL_DMA_IRQHandler+0x1c4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d036      	beq.n	80068be <HAL_DMA_IRQHandler+0xd2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a57      	ldr	r2, [pc, #348]	@ (80069b4 <HAL_DMA_IRQHandler+0x1c8>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d031      	beq.n	80068be <HAL_DMA_IRQHandler+0xd2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a56      	ldr	r2, [pc, #344]	@ (80069b8 <HAL_DMA_IRQHandler+0x1cc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d02c      	beq.n	80068be <HAL_DMA_IRQHandler+0xd2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a54      	ldr	r2, [pc, #336]	@ (80069bc <HAL_DMA_IRQHandler+0x1d0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d027      	beq.n	80068be <HAL_DMA_IRQHandler+0xd2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a53      	ldr	r2, [pc, #332]	@ (80069c0 <HAL_DMA_IRQHandler+0x1d4>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d022      	beq.n	80068be <HAL_DMA_IRQHandler+0xd2>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a51      	ldr	r2, [pc, #324]	@ (80069c4 <HAL_DMA_IRQHandler+0x1d8>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d01d      	beq.n	80068be <HAL_DMA_IRQHandler+0xd2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a50      	ldr	r2, [pc, #320]	@ (80069c8 <HAL_DMA_IRQHandler+0x1dc>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d018      	beq.n	80068be <HAL_DMA_IRQHandler+0xd2>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a4e      	ldr	r2, [pc, #312]	@ (80069cc <HAL_DMA_IRQHandler+0x1e0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d013      	beq.n	80068be <HAL_DMA_IRQHandler+0xd2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a4d      	ldr	r2, [pc, #308]	@ (80069d0 <HAL_DMA_IRQHandler+0x1e4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00e      	beq.n	80068be <HAL_DMA_IRQHandler+0xd2>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a4b      	ldr	r2, [pc, #300]	@ (80069d4 <HAL_DMA_IRQHandler+0x1e8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d009      	beq.n	80068be <HAL_DMA_IRQHandler+0xd2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a4a      	ldr	r2, [pc, #296]	@ (80069d8 <HAL_DMA_IRQHandler+0x1ec>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d004      	beq.n	80068be <HAL_DMA_IRQHandler+0xd2>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a48      	ldr	r2, [pc, #288]	@ (80069dc <HAL_DMA_IRQHandler+0x1f0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d101      	bne.n	80068c2 <HAL_DMA_IRQHandler+0xd6>
 80068be:	2301      	movs	r3, #1
 80068c0:	e000      	b.n	80068c4 <HAL_DMA_IRQHandler+0xd8>
 80068c2:	2300      	movs	r3, #0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 842b 	beq.w	8007120 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2208      	movs	r2, #8
 80068d4:	409a      	lsls	r2, r3
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	4013      	ands	r3, r2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 80a2 	beq.w	8006a24 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a2e      	ldr	r2, [pc, #184]	@ (80069a0 <HAL_DMA_IRQHandler+0x1b4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d04a      	beq.n	8006980 <HAL_DMA_IRQHandler+0x194>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a2d      	ldr	r2, [pc, #180]	@ (80069a4 <HAL_DMA_IRQHandler+0x1b8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d045      	beq.n	8006980 <HAL_DMA_IRQHandler+0x194>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a2b      	ldr	r2, [pc, #172]	@ (80069a8 <HAL_DMA_IRQHandler+0x1bc>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d040      	beq.n	8006980 <HAL_DMA_IRQHandler+0x194>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a2a      	ldr	r2, [pc, #168]	@ (80069ac <HAL_DMA_IRQHandler+0x1c0>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d03b      	beq.n	8006980 <HAL_DMA_IRQHandler+0x194>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a28      	ldr	r2, [pc, #160]	@ (80069b0 <HAL_DMA_IRQHandler+0x1c4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d036      	beq.n	8006980 <HAL_DMA_IRQHandler+0x194>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a27      	ldr	r2, [pc, #156]	@ (80069b4 <HAL_DMA_IRQHandler+0x1c8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d031      	beq.n	8006980 <HAL_DMA_IRQHandler+0x194>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a25      	ldr	r2, [pc, #148]	@ (80069b8 <HAL_DMA_IRQHandler+0x1cc>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d02c      	beq.n	8006980 <HAL_DMA_IRQHandler+0x194>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a24      	ldr	r2, [pc, #144]	@ (80069bc <HAL_DMA_IRQHandler+0x1d0>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d027      	beq.n	8006980 <HAL_DMA_IRQHandler+0x194>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a22      	ldr	r2, [pc, #136]	@ (80069c0 <HAL_DMA_IRQHandler+0x1d4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d022      	beq.n	8006980 <HAL_DMA_IRQHandler+0x194>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a21      	ldr	r2, [pc, #132]	@ (80069c4 <HAL_DMA_IRQHandler+0x1d8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d01d      	beq.n	8006980 <HAL_DMA_IRQHandler+0x194>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1f      	ldr	r2, [pc, #124]	@ (80069c8 <HAL_DMA_IRQHandler+0x1dc>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d018      	beq.n	8006980 <HAL_DMA_IRQHandler+0x194>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1e      	ldr	r2, [pc, #120]	@ (80069cc <HAL_DMA_IRQHandler+0x1e0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d013      	beq.n	8006980 <HAL_DMA_IRQHandler+0x194>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a1c      	ldr	r2, [pc, #112]	@ (80069d0 <HAL_DMA_IRQHandler+0x1e4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00e      	beq.n	8006980 <HAL_DMA_IRQHandler+0x194>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1b      	ldr	r2, [pc, #108]	@ (80069d4 <HAL_DMA_IRQHandler+0x1e8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d009      	beq.n	8006980 <HAL_DMA_IRQHandler+0x194>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a19      	ldr	r2, [pc, #100]	@ (80069d8 <HAL_DMA_IRQHandler+0x1ec>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d004      	beq.n	8006980 <HAL_DMA_IRQHandler+0x194>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a18      	ldr	r2, [pc, #96]	@ (80069dc <HAL_DMA_IRQHandler+0x1f0>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d12f      	bne.n	80069e0 <HAL_DMA_IRQHandler+0x1f4>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	bf14      	ite	ne
 800698e:	2301      	movne	r3, #1
 8006990:	2300      	moveq	r3, #0
 8006992:	b2db      	uxtb	r3, r3
 8006994:	e02e      	b.n	80069f4 <HAL_DMA_IRQHandler+0x208>
 8006996:	bf00      	nop
 8006998:	24000004 	.word	0x24000004
 800699c:	1b4e81b5 	.word	0x1b4e81b5
 80069a0:	40020010 	.word	0x40020010
 80069a4:	40020028 	.word	0x40020028
 80069a8:	40020040 	.word	0x40020040
 80069ac:	40020058 	.word	0x40020058
 80069b0:	40020070 	.word	0x40020070
 80069b4:	40020088 	.word	0x40020088
 80069b8:	400200a0 	.word	0x400200a0
 80069bc:	400200b8 	.word	0x400200b8
 80069c0:	40020410 	.word	0x40020410
 80069c4:	40020428 	.word	0x40020428
 80069c8:	40020440 	.word	0x40020440
 80069cc:	40020458 	.word	0x40020458
 80069d0:	40020470 	.word	0x40020470
 80069d4:	40020488 	.word	0x40020488
 80069d8:	400204a0 	.word	0x400204a0
 80069dc:	400204b8 	.word	0x400204b8
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	bf14      	ite	ne
 80069ee:	2301      	movne	r3, #1
 80069f0:	2300      	moveq	r3, #0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d015      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0204 	bic.w	r2, r2, #4
 8006a06:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a0c:	f003 031f 	and.w	r3, r3, #31
 8006a10:	2208      	movs	r2, #8
 8006a12:	409a      	lsls	r2, r3
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a1c:	f043 0201 	orr.w	r2, r3, #1
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a28:	f003 031f 	and.w	r3, r3, #31
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d06e      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a69      	ldr	r2, [pc, #420]	@ (8006be4 <HAL_DMA_IRQHandler+0x3f8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d04a      	beq.n	8006ada <HAL_DMA_IRQHandler+0x2ee>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a67      	ldr	r2, [pc, #412]	@ (8006be8 <HAL_DMA_IRQHandler+0x3fc>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d045      	beq.n	8006ada <HAL_DMA_IRQHandler+0x2ee>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a66      	ldr	r2, [pc, #408]	@ (8006bec <HAL_DMA_IRQHandler+0x400>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d040      	beq.n	8006ada <HAL_DMA_IRQHandler+0x2ee>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a64      	ldr	r2, [pc, #400]	@ (8006bf0 <HAL_DMA_IRQHandler+0x404>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d03b      	beq.n	8006ada <HAL_DMA_IRQHandler+0x2ee>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a63      	ldr	r2, [pc, #396]	@ (8006bf4 <HAL_DMA_IRQHandler+0x408>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d036      	beq.n	8006ada <HAL_DMA_IRQHandler+0x2ee>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a61      	ldr	r2, [pc, #388]	@ (8006bf8 <HAL_DMA_IRQHandler+0x40c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d031      	beq.n	8006ada <HAL_DMA_IRQHandler+0x2ee>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a60      	ldr	r2, [pc, #384]	@ (8006bfc <HAL_DMA_IRQHandler+0x410>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d02c      	beq.n	8006ada <HAL_DMA_IRQHandler+0x2ee>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a5e      	ldr	r2, [pc, #376]	@ (8006c00 <HAL_DMA_IRQHandler+0x414>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d027      	beq.n	8006ada <HAL_DMA_IRQHandler+0x2ee>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a5d      	ldr	r2, [pc, #372]	@ (8006c04 <HAL_DMA_IRQHandler+0x418>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d022      	beq.n	8006ada <HAL_DMA_IRQHandler+0x2ee>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a5b      	ldr	r2, [pc, #364]	@ (8006c08 <HAL_DMA_IRQHandler+0x41c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d01d      	beq.n	8006ada <HAL_DMA_IRQHandler+0x2ee>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a5a      	ldr	r2, [pc, #360]	@ (8006c0c <HAL_DMA_IRQHandler+0x420>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d018      	beq.n	8006ada <HAL_DMA_IRQHandler+0x2ee>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a58      	ldr	r2, [pc, #352]	@ (8006c10 <HAL_DMA_IRQHandler+0x424>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d013      	beq.n	8006ada <HAL_DMA_IRQHandler+0x2ee>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a57      	ldr	r2, [pc, #348]	@ (8006c14 <HAL_DMA_IRQHandler+0x428>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00e      	beq.n	8006ada <HAL_DMA_IRQHandler+0x2ee>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a55      	ldr	r2, [pc, #340]	@ (8006c18 <HAL_DMA_IRQHandler+0x42c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d009      	beq.n	8006ada <HAL_DMA_IRQHandler+0x2ee>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a54      	ldr	r2, [pc, #336]	@ (8006c1c <HAL_DMA_IRQHandler+0x430>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d004      	beq.n	8006ada <HAL_DMA_IRQHandler+0x2ee>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a52      	ldr	r2, [pc, #328]	@ (8006c20 <HAL_DMA_IRQHandler+0x434>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d10a      	bne.n	8006af0 <HAL_DMA_IRQHandler+0x304>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	bf14      	ite	ne
 8006ae8:	2301      	movne	r3, #1
 8006aea:	2300      	moveq	r3, #0
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	e003      	b.n	8006af8 <HAL_DMA_IRQHandler+0x30c>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2300      	movs	r3, #0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00d      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b00:	f003 031f 	and.w	r3, r3, #31
 8006b04:	2201      	movs	r2, #1
 8006b06:	409a      	lsls	r2, r3
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b10:	f043 0202 	orr.w	r2, r3, #2
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b1c:	f003 031f 	and.w	r3, r3, #31
 8006b20:	2204      	movs	r2, #4
 8006b22:	409a      	lsls	r2, r3
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	4013      	ands	r3, r2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 808f 	beq.w	8006c4c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a2c      	ldr	r2, [pc, #176]	@ (8006be4 <HAL_DMA_IRQHandler+0x3f8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d04a      	beq.n	8006bce <HAL_DMA_IRQHandler+0x3e2>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a2a      	ldr	r2, [pc, #168]	@ (8006be8 <HAL_DMA_IRQHandler+0x3fc>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d045      	beq.n	8006bce <HAL_DMA_IRQHandler+0x3e2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a29      	ldr	r2, [pc, #164]	@ (8006bec <HAL_DMA_IRQHandler+0x400>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d040      	beq.n	8006bce <HAL_DMA_IRQHandler+0x3e2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a27      	ldr	r2, [pc, #156]	@ (8006bf0 <HAL_DMA_IRQHandler+0x404>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d03b      	beq.n	8006bce <HAL_DMA_IRQHandler+0x3e2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a26      	ldr	r2, [pc, #152]	@ (8006bf4 <HAL_DMA_IRQHandler+0x408>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d036      	beq.n	8006bce <HAL_DMA_IRQHandler+0x3e2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a24      	ldr	r2, [pc, #144]	@ (8006bf8 <HAL_DMA_IRQHandler+0x40c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d031      	beq.n	8006bce <HAL_DMA_IRQHandler+0x3e2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a23      	ldr	r2, [pc, #140]	@ (8006bfc <HAL_DMA_IRQHandler+0x410>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d02c      	beq.n	8006bce <HAL_DMA_IRQHandler+0x3e2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a21      	ldr	r2, [pc, #132]	@ (8006c00 <HAL_DMA_IRQHandler+0x414>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d027      	beq.n	8006bce <HAL_DMA_IRQHandler+0x3e2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a20      	ldr	r2, [pc, #128]	@ (8006c04 <HAL_DMA_IRQHandler+0x418>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d022      	beq.n	8006bce <HAL_DMA_IRQHandler+0x3e2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8006c08 <HAL_DMA_IRQHandler+0x41c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d01d      	beq.n	8006bce <HAL_DMA_IRQHandler+0x3e2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1d      	ldr	r2, [pc, #116]	@ (8006c0c <HAL_DMA_IRQHandler+0x420>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d018      	beq.n	8006bce <HAL_DMA_IRQHandler+0x3e2>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8006c10 <HAL_DMA_IRQHandler+0x424>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d013      	beq.n	8006bce <HAL_DMA_IRQHandler+0x3e2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1a      	ldr	r2, [pc, #104]	@ (8006c14 <HAL_DMA_IRQHandler+0x428>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d00e      	beq.n	8006bce <HAL_DMA_IRQHandler+0x3e2>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a18      	ldr	r2, [pc, #96]	@ (8006c18 <HAL_DMA_IRQHandler+0x42c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d009      	beq.n	8006bce <HAL_DMA_IRQHandler+0x3e2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a17      	ldr	r2, [pc, #92]	@ (8006c1c <HAL_DMA_IRQHandler+0x430>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d004      	beq.n	8006bce <HAL_DMA_IRQHandler+0x3e2>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a15      	ldr	r2, [pc, #84]	@ (8006c20 <HAL_DMA_IRQHandler+0x434>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d12a      	bne.n	8006c24 <HAL_DMA_IRQHandler+0x438>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	bf14      	ite	ne
 8006bdc:	2301      	movne	r3, #1
 8006bde:	2300      	moveq	r3, #0
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	e023      	b.n	8006c2c <HAL_DMA_IRQHandler+0x440>
 8006be4:	40020010 	.word	0x40020010
 8006be8:	40020028 	.word	0x40020028
 8006bec:	40020040 	.word	0x40020040
 8006bf0:	40020058 	.word	0x40020058
 8006bf4:	40020070 	.word	0x40020070
 8006bf8:	40020088 	.word	0x40020088
 8006bfc:	400200a0 	.word	0x400200a0
 8006c00:	400200b8 	.word	0x400200b8
 8006c04:	40020410 	.word	0x40020410
 8006c08:	40020428 	.word	0x40020428
 8006c0c:	40020440 	.word	0x40020440
 8006c10:	40020458 	.word	0x40020458
 8006c14:	40020470 	.word	0x40020470
 8006c18:	40020488 	.word	0x40020488
 8006c1c:	400204a0 	.word	0x400204a0
 8006c20:	400204b8 	.word	0x400204b8
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00d      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	2204      	movs	r2, #4
 8006c3a:	409a      	lsls	r2, r3
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c44:	f043 0204 	orr.w	r2, r3, #4
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c50:	f003 031f 	and.w	r3, r3, #31
 8006c54:	2210      	movs	r2, #16
 8006c56:	409a      	lsls	r2, r3
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 80a6 	beq.w	8006dae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a85      	ldr	r2, [pc, #532]	@ (8006e7c <HAL_DMA_IRQHandler+0x690>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d04a      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x516>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a83      	ldr	r2, [pc, #524]	@ (8006e80 <HAL_DMA_IRQHandler+0x694>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d045      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x516>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a82      	ldr	r2, [pc, #520]	@ (8006e84 <HAL_DMA_IRQHandler+0x698>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d040      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x516>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a80      	ldr	r2, [pc, #512]	@ (8006e88 <HAL_DMA_IRQHandler+0x69c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d03b      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x516>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a7f      	ldr	r2, [pc, #508]	@ (8006e8c <HAL_DMA_IRQHandler+0x6a0>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d036      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x516>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a7d      	ldr	r2, [pc, #500]	@ (8006e90 <HAL_DMA_IRQHandler+0x6a4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d031      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x516>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a7c      	ldr	r2, [pc, #496]	@ (8006e94 <HAL_DMA_IRQHandler+0x6a8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d02c      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x516>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a7a      	ldr	r2, [pc, #488]	@ (8006e98 <HAL_DMA_IRQHandler+0x6ac>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d027      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x516>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a79      	ldr	r2, [pc, #484]	@ (8006e9c <HAL_DMA_IRQHandler+0x6b0>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d022      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x516>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a77      	ldr	r2, [pc, #476]	@ (8006ea0 <HAL_DMA_IRQHandler+0x6b4>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d01d      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x516>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a76      	ldr	r2, [pc, #472]	@ (8006ea4 <HAL_DMA_IRQHandler+0x6b8>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d018      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x516>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a74      	ldr	r2, [pc, #464]	@ (8006ea8 <HAL_DMA_IRQHandler+0x6bc>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d013      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x516>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a73      	ldr	r2, [pc, #460]	@ (8006eac <HAL_DMA_IRQHandler+0x6c0>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d00e      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x516>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a71      	ldr	r2, [pc, #452]	@ (8006eb0 <HAL_DMA_IRQHandler+0x6c4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d009      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x516>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a70      	ldr	r2, [pc, #448]	@ (8006eb4 <HAL_DMA_IRQHandler+0x6c8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d004      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x516>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a6e      	ldr	r2, [pc, #440]	@ (8006eb8 <HAL_DMA_IRQHandler+0x6cc>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d10a      	bne.n	8006d18 <HAL_DMA_IRQHandler+0x52c>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	bf14      	ite	ne
 8006d10:	2301      	movne	r3, #1
 8006d12:	2300      	moveq	r3, #0
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	e009      	b.n	8006d2c <HAL_DMA_IRQHandler+0x540>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	bf14      	ite	ne
 8006d26:	2301      	movne	r3, #1
 8006d28:	2300      	moveq	r3, #0
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d03e      	beq.n	8006dae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d34:	f003 031f 	and.w	r3, r3, #31
 8006d38:	2210      	movs	r2, #16
 8006d3a:	409a      	lsls	r2, r3
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d018      	beq.n	8006d80 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d108      	bne.n	8006d6e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d024      	beq.n	8006dae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	4798      	blx	r3
 8006d6c:	e01f      	b.n	8006dae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d01b      	beq.n	8006dae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	4798      	blx	r3
 8006d7e:	e016      	b.n	8006dae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d107      	bne.n	8006d9e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0208 	bic.w	r2, r2, #8
 8006d9c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006db2:	f003 031f 	and.w	r3, r3, #31
 8006db6:	2220      	movs	r2, #32
 8006db8:	409a      	lsls	r2, r3
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 8110 	beq.w	8006fe4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8006e7c <HAL_DMA_IRQHandler+0x690>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d04a      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x678>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a2b      	ldr	r2, [pc, #172]	@ (8006e80 <HAL_DMA_IRQHandler+0x694>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d045      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x678>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a29      	ldr	r2, [pc, #164]	@ (8006e84 <HAL_DMA_IRQHandler+0x698>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d040      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x678>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a28      	ldr	r2, [pc, #160]	@ (8006e88 <HAL_DMA_IRQHandler+0x69c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d03b      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x678>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a26      	ldr	r2, [pc, #152]	@ (8006e8c <HAL_DMA_IRQHandler+0x6a0>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d036      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x678>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a25      	ldr	r2, [pc, #148]	@ (8006e90 <HAL_DMA_IRQHandler+0x6a4>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d031      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x678>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a23      	ldr	r2, [pc, #140]	@ (8006e94 <HAL_DMA_IRQHandler+0x6a8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d02c      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x678>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a22      	ldr	r2, [pc, #136]	@ (8006e98 <HAL_DMA_IRQHandler+0x6ac>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d027      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x678>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a20      	ldr	r2, [pc, #128]	@ (8006e9c <HAL_DMA_IRQHandler+0x6b0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d022      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x678>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a1f      	ldr	r2, [pc, #124]	@ (8006ea0 <HAL_DMA_IRQHandler+0x6b4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d01d      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x678>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ea4 <HAL_DMA_IRQHandler+0x6b8>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d018      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x678>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a1c      	ldr	r2, [pc, #112]	@ (8006ea8 <HAL_DMA_IRQHandler+0x6bc>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d013      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x678>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a1a      	ldr	r2, [pc, #104]	@ (8006eac <HAL_DMA_IRQHandler+0x6c0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d00e      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x678>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a19      	ldr	r2, [pc, #100]	@ (8006eb0 <HAL_DMA_IRQHandler+0x6c4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d009      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x678>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a17      	ldr	r2, [pc, #92]	@ (8006eb4 <HAL_DMA_IRQHandler+0x6c8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d004      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x678>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a16      	ldr	r2, [pc, #88]	@ (8006eb8 <HAL_DMA_IRQHandler+0x6cc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d12b      	bne.n	8006ebc <HAL_DMA_IRQHandler+0x6d0>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0310 	and.w	r3, r3, #16
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	bf14      	ite	ne
 8006e72:	2301      	movne	r3, #1
 8006e74:	2300      	moveq	r3, #0
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	e02a      	b.n	8006ed0 <HAL_DMA_IRQHandler+0x6e4>
 8006e7a:	bf00      	nop
 8006e7c:	40020010 	.word	0x40020010
 8006e80:	40020028 	.word	0x40020028
 8006e84:	40020040 	.word	0x40020040
 8006e88:	40020058 	.word	0x40020058
 8006e8c:	40020070 	.word	0x40020070
 8006e90:	40020088 	.word	0x40020088
 8006e94:	400200a0 	.word	0x400200a0
 8006e98:	400200b8 	.word	0x400200b8
 8006e9c:	40020410 	.word	0x40020410
 8006ea0:	40020428 	.word	0x40020428
 8006ea4:	40020440 	.word	0x40020440
 8006ea8:	40020458 	.word	0x40020458
 8006eac:	40020470 	.word	0x40020470
 8006eb0:	40020488 	.word	0x40020488
 8006eb4:	400204a0 	.word	0x400204a0
 8006eb8:	400204b8 	.word	0x400204b8
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bf14      	ite	ne
 8006eca:	2301      	movne	r3, #1
 8006ecc:	2300      	moveq	r3, #0
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8087 	beq.w	8006fe4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eda:	f003 031f 	and.w	r3, r3, #31
 8006ede:	2220      	movs	r2, #32
 8006ee0:	409a      	lsls	r2, r3
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d139      	bne.n	8006f66 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0216 	bic.w	r2, r2, #22
 8006f00:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	695a      	ldr	r2, [r3, #20]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f10:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d103      	bne.n	8006f22 <HAL_DMA_IRQHandler+0x736>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d007      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0208 	bic.w	r2, r2, #8
 8006f30:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f36:	f003 031f 	and.w	r3, r3, #31
 8006f3a:	223f      	movs	r2, #63	@ 0x3f
 8006f3c:	409a      	lsls	r2, r3
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 834a 	beq.w	80075f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	4798      	blx	r3
          }
          return;
 8006f64:	e344      	b.n	80075f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d018      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d108      	bne.n	8006f94 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d02c      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
 8006f92:	e027      	b.n	8006fe4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d023      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4798      	blx	r3
 8006fa4:	e01e      	b.n	8006fe4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10f      	bne.n	8006fd4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0210 	bic.w	r2, r2, #16
 8006fc2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d003      	beq.n	8006fe4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 8306 	beq.w	80075fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 8088 	beq.w	800710c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2204      	movs	r2, #4
 8007000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a7a      	ldr	r2, [pc, #488]	@ (80071f4 <HAL_DMA_IRQHandler+0xa08>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d04a      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x8b8>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a79      	ldr	r2, [pc, #484]	@ (80071f8 <HAL_DMA_IRQHandler+0xa0c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d045      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x8b8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a77      	ldr	r2, [pc, #476]	@ (80071fc <HAL_DMA_IRQHandler+0xa10>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d040      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x8b8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a76      	ldr	r2, [pc, #472]	@ (8007200 <HAL_DMA_IRQHandler+0xa14>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d03b      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x8b8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a74      	ldr	r2, [pc, #464]	@ (8007204 <HAL_DMA_IRQHandler+0xa18>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d036      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x8b8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a73      	ldr	r2, [pc, #460]	@ (8007208 <HAL_DMA_IRQHandler+0xa1c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d031      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x8b8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a71      	ldr	r2, [pc, #452]	@ (800720c <HAL_DMA_IRQHandler+0xa20>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d02c      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x8b8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a70      	ldr	r2, [pc, #448]	@ (8007210 <HAL_DMA_IRQHandler+0xa24>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d027      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x8b8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a6e      	ldr	r2, [pc, #440]	@ (8007214 <HAL_DMA_IRQHandler+0xa28>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d022      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x8b8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a6d      	ldr	r2, [pc, #436]	@ (8007218 <HAL_DMA_IRQHandler+0xa2c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d01d      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x8b8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a6b      	ldr	r2, [pc, #428]	@ (800721c <HAL_DMA_IRQHandler+0xa30>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d018      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x8b8>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a6a      	ldr	r2, [pc, #424]	@ (8007220 <HAL_DMA_IRQHandler+0xa34>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d013      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x8b8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a68      	ldr	r2, [pc, #416]	@ (8007224 <HAL_DMA_IRQHandler+0xa38>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00e      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x8b8>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a67      	ldr	r2, [pc, #412]	@ (8007228 <HAL_DMA_IRQHandler+0xa3c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d009      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x8b8>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a65      	ldr	r2, [pc, #404]	@ (800722c <HAL_DMA_IRQHandler+0xa40>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d004      	beq.n	80070a4 <HAL_DMA_IRQHandler+0x8b8>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a64      	ldr	r2, [pc, #400]	@ (8007230 <HAL_DMA_IRQHandler+0xa44>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d108      	bne.n	80070b6 <HAL_DMA_IRQHandler+0x8ca>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0201 	bic.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	e007      	b.n	80070c6 <HAL_DMA_IRQHandler+0x8da>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0201 	bic.w	r2, r2, #1
 80070c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3301      	adds	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d307      	bcc.n	80070e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1f2      	bne.n	80070c6 <HAL_DMA_IRQHandler+0x8da>
 80070e0:	e000      	b.n	80070e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80070e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d004      	beq.n	80070fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2203      	movs	r2, #3
 80070f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80070fa:	e003      	b.n	8007104 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 8272 	beq.w	80075fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
 800711e:	e26c      	b.n	80075fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a43      	ldr	r2, [pc, #268]	@ (8007234 <HAL_DMA_IRQHandler+0xa48>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d022      	beq.n	8007170 <HAL_DMA_IRQHandler+0x984>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a42      	ldr	r2, [pc, #264]	@ (8007238 <HAL_DMA_IRQHandler+0xa4c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d01d      	beq.n	8007170 <HAL_DMA_IRQHandler+0x984>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a40      	ldr	r2, [pc, #256]	@ (800723c <HAL_DMA_IRQHandler+0xa50>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d018      	beq.n	8007170 <HAL_DMA_IRQHandler+0x984>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a3f      	ldr	r2, [pc, #252]	@ (8007240 <HAL_DMA_IRQHandler+0xa54>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d013      	beq.n	8007170 <HAL_DMA_IRQHandler+0x984>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a3d      	ldr	r2, [pc, #244]	@ (8007244 <HAL_DMA_IRQHandler+0xa58>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00e      	beq.n	8007170 <HAL_DMA_IRQHandler+0x984>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a3c      	ldr	r2, [pc, #240]	@ (8007248 <HAL_DMA_IRQHandler+0xa5c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d009      	beq.n	8007170 <HAL_DMA_IRQHandler+0x984>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a3a      	ldr	r2, [pc, #232]	@ (800724c <HAL_DMA_IRQHandler+0xa60>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d004      	beq.n	8007170 <HAL_DMA_IRQHandler+0x984>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a39      	ldr	r2, [pc, #228]	@ (8007250 <HAL_DMA_IRQHandler+0xa64>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d101      	bne.n	8007174 <HAL_DMA_IRQHandler+0x988>
 8007170:	2301      	movs	r3, #1
 8007172:	e000      	b.n	8007176 <HAL_DMA_IRQHandler+0x98a>
 8007174:	2300      	movs	r3, #0
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 823f 	beq.w	80075fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007188:	f003 031f 	and.w	r3, r3, #31
 800718c:	2204      	movs	r2, #4
 800718e:	409a      	lsls	r2, r3
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	4013      	ands	r3, r2
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80cd 	beq.w	8007334 <HAL_DMA_IRQHandler+0xb48>
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	f003 0304 	and.w	r3, r3, #4
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 80c7 	beq.w	8007334 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071aa:	f003 031f 	and.w	r3, r3, #31
 80071ae:	2204      	movs	r2, #4
 80071b0:	409a      	lsls	r2, r3
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d049      	beq.n	8007254 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d109      	bne.n	80071de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 8210 	beq.w	80075f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071dc:	e20a      	b.n	80075f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 8206 	beq.w	80075f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071f0:	e200      	b.n	80075f4 <HAL_DMA_IRQHandler+0xe08>
 80071f2:	bf00      	nop
 80071f4:	40020010 	.word	0x40020010
 80071f8:	40020028 	.word	0x40020028
 80071fc:	40020040 	.word	0x40020040
 8007200:	40020058 	.word	0x40020058
 8007204:	40020070 	.word	0x40020070
 8007208:	40020088 	.word	0x40020088
 800720c:	400200a0 	.word	0x400200a0
 8007210:	400200b8 	.word	0x400200b8
 8007214:	40020410 	.word	0x40020410
 8007218:	40020428 	.word	0x40020428
 800721c:	40020440 	.word	0x40020440
 8007220:	40020458 	.word	0x40020458
 8007224:	40020470 	.word	0x40020470
 8007228:	40020488 	.word	0x40020488
 800722c:	400204a0 	.word	0x400204a0
 8007230:	400204b8 	.word	0x400204b8
 8007234:	58025408 	.word	0x58025408
 8007238:	5802541c 	.word	0x5802541c
 800723c:	58025430 	.word	0x58025430
 8007240:	58025444 	.word	0x58025444
 8007244:	58025458 	.word	0x58025458
 8007248:	5802546c 	.word	0x5802546c
 800724c:	58025480 	.word	0x58025480
 8007250:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d160      	bne.n	8007320 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a7f      	ldr	r2, [pc, #508]	@ (8007460 <HAL_DMA_IRQHandler+0xc74>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d04a      	beq.n	80072fe <HAL_DMA_IRQHandler+0xb12>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a7d      	ldr	r2, [pc, #500]	@ (8007464 <HAL_DMA_IRQHandler+0xc78>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d045      	beq.n	80072fe <HAL_DMA_IRQHandler+0xb12>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a7c      	ldr	r2, [pc, #496]	@ (8007468 <HAL_DMA_IRQHandler+0xc7c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d040      	beq.n	80072fe <HAL_DMA_IRQHandler+0xb12>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a7a      	ldr	r2, [pc, #488]	@ (800746c <HAL_DMA_IRQHandler+0xc80>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d03b      	beq.n	80072fe <HAL_DMA_IRQHandler+0xb12>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a79      	ldr	r2, [pc, #484]	@ (8007470 <HAL_DMA_IRQHandler+0xc84>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d036      	beq.n	80072fe <HAL_DMA_IRQHandler+0xb12>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a77      	ldr	r2, [pc, #476]	@ (8007474 <HAL_DMA_IRQHandler+0xc88>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d031      	beq.n	80072fe <HAL_DMA_IRQHandler+0xb12>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a76      	ldr	r2, [pc, #472]	@ (8007478 <HAL_DMA_IRQHandler+0xc8c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d02c      	beq.n	80072fe <HAL_DMA_IRQHandler+0xb12>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a74      	ldr	r2, [pc, #464]	@ (800747c <HAL_DMA_IRQHandler+0xc90>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d027      	beq.n	80072fe <HAL_DMA_IRQHandler+0xb12>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a73      	ldr	r2, [pc, #460]	@ (8007480 <HAL_DMA_IRQHandler+0xc94>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d022      	beq.n	80072fe <HAL_DMA_IRQHandler+0xb12>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a71      	ldr	r2, [pc, #452]	@ (8007484 <HAL_DMA_IRQHandler+0xc98>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d01d      	beq.n	80072fe <HAL_DMA_IRQHandler+0xb12>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a70      	ldr	r2, [pc, #448]	@ (8007488 <HAL_DMA_IRQHandler+0xc9c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d018      	beq.n	80072fe <HAL_DMA_IRQHandler+0xb12>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a6e      	ldr	r2, [pc, #440]	@ (800748c <HAL_DMA_IRQHandler+0xca0>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d013      	beq.n	80072fe <HAL_DMA_IRQHandler+0xb12>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a6d      	ldr	r2, [pc, #436]	@ (8007490 <HAL_DMA_IRQHandler+0xca4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d00e      	beq.n	80072fe <HAL_DMA_IRQHandler+0xb12>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a6b      	ldr	r2, [pc, #428]	@ (8007494 <HAL_DMA_IRQHandler+0xca8>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d009      	beq.n	80072fe <HAL_DMA_IRQHandler+0xb12>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a6a      	ldr	r2, [pc, #424]	@ (8007498 <HAL_DMA_IRQHandler+0xcac>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d004      	beq.n	80072fe <HAL_DMA_IRQHandler+0xb12>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a68      	ldr	r2, [pc, #416]	@ (800749c <HAL_DMA_IRQHandler+0xcb0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d108      	bne.n	8007310 <HAL_DMA_IRQHandler+0xb24>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 0208 	bic.w	r2, r2, #8
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	e007      	b.n	8007320 <HAL_DMA_IRQHandler+0xb34>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0204 	bic.w	r2, r2, #4
 800731e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 8165 	beq.w	80075f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007332:	e15f      	b.n	80075f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007338:	f003 031f 	and.w	r3, r3, #31
 800733c:	2202      	movs	r2, #2
 800733e:	409a      	lsls	r2, r3
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	4013      	ands	r3, r2
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 80c5 	beq.w	80074d4 <HAL_DMA_IRQHandler+0xce8>
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 80bf 	beq.w	80074d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	2202      	movs	r2, #2
 8007360:	409a      	lsls	r2, r3
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d018      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d109      	bne.n	800738e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 813a 	beq.w	80075f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800738c:	e134      	b.n	80075f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 8130 	beq.w	80075f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073a0:	e12a      	b.n	80075f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f003 0320 	and.w	r3, r3, #32
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f040 8089 	bne.w	80074c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a2b      	ldr	r2, [pc, #172]	@ (8007460 <HAL_DMA_IRQHandler+0xc74>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d04a      	beq.n	800744e <HAL_DMA_IRQHandler+0xc62>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a29      	ldr	r2, [pc, #164]	@ (8007464 <HAL_DMA_IRQHandler+0xc78>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d045      	beq.n	800744e <HAL_DMA_IRQHandler+0xc62>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a28      	ldr	r2, [pc, #160]	@ (8007468 <HAL_DMA_IRQHandler+0xc7c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d040      	beq.n	800744e <HAL_DMA_IRQHandler+0xc62>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a26      	ldr	r2, [pc, #152]	@ (800746c <HAL_DMA_IRQHandler+0xc80>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d03b      	beq.n	800744e <HAL_DMA_IRQHandler+0xc62>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a25      	ldr	r2, [pc, #148]	@ (8007470 <HAL_DMA_IRQHandler+0xc84>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d036      	beq.n	800744e <HAL_DMA_IRQHandler+0xc62>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a23      	ldr	r2, [pc, #140]	@ (8007474 <HAL_DMA_IRQHandler+0xc88>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d031      	beq.n	800744e <HAL_DMA_IRQHandler+0xc62>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a22      	ldr	r2, [pc, #136]	@ (8007478 <HAL_DMA_IRQHandler+0xc8c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d02c      	beq.n	800744e <HAL_DMA_IRQHandler+0xc62>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a20      	ldr	r2, [pc, #128]	@ (800747c <HAL_DMA_IRQHandler+0xc90>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d027      	beq.n	800744e <HAL_DMA_IRQHandler+0xc62>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a1f      	ldr	r2, [pc, #124]	@ (8007480 <HAL_DMA_IRQHandler+0xc94>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d022      	beq.n	800744e <HAL_DMA_IRQHandler+0xc62>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a1d      	ldr	r2, [pc, #116]	@ (8007484 <HAL_DMA_IRQHandler+0xc98>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d01d      	beq.n	800744e <HAL_DMA_IRQHandler+0xc62>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a1c      	ldr	r2, [pc, #112]	@ (8007488 <HAL_DMA_IRQHandler+0xc9c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d018      	beq.n	800744e <HAL_DMA_IRQHandler+0xc62>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a1a      	ldr	r2, [pc, #104]	@ (800748c <HAL_DMA_IRQHandler+0xca0>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d013      	beq.n	800744e <HAL_DMA_IRQHandler+0xc62>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a19      	ldr	r2, [pc, #100]	@ (8007490 <HAL_DMA_IRQHandler+0xca4>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d00e      	beq.n	800744e <HAL_DMA_IRQHandler+0xc62>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a17      	ldr	r2, [pc, #92]	@ (8007494 <HAL_DMA_IRQHandler+0xca8>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d009      	beq.n	800744e <HAL_DMA_IRQHandler+0xc62>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a16      	ldr	r2, [pc, #88]	@ (8007498 <HAL_DMA_IRQHandler+0xcac>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d004      	beq.n	800744e <HAL_DMA_IRQHandler+0xc62>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a14      	ldr	r2, [pc, #80]	@ (800749c <HAL_DMA_IRQHandler+0xcb0>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d128      	bne.n	80074a0 <HAL_DMA_IRQHandler+0xcb4>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f022 0214 	bic.w	r2, r2, #20
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	e027      	b.n	80074b0 <HAL_DMA_IRQHandler+0xcc4>
 8007460:	40020010 	.word	0x40020010
 8007464:	40020028 	.word	0x40020028
 8007468:	40020040 	.word	0x40020040
 800746c:	40020058 	.word	0x40020058
 8007470:	40020070 	.word	0x40020070
 8007474:	40020088 	.word	0x40020088
 8007478:	400200a0 	.word	0x400200a0
 800747c:	400200b8 	.word	0x400200b8
 8007480:	40020410 	.word	0x40020410
 8007484:	40020428 	.word	0x40020428
 8007488:	40020440 	.word	0x40020440
 800748c:	40020458 	.word	0x40020458
 8007490:	40020470 	.word	0x40020470
 8007494:	40020488 	.word	0x40020488
 8007498:	400204a0 	.word	0x400204a0
 800749c:	400204b8 	.word	0x400204b8
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 020a 	bic.w	r2, r2, #10
 80074ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 8097 	beq.w	80075f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074d2:	e091      	b.n	80075f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d8:	f003 031f 	and.w	r3, r3, #31
 80074dc:	2208      	movs	r2, #8
 80074de:	409a      	lsls	r2, r3
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	4013      	ands	r3, r2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 8088 	beq.w	80075fa <HAL_DMA_IRQHandler+0xe0e>
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f003 0308 	and.w	r3, r3, #8
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 8082 	beq.w	80075fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a41      	ldr	r2, [pc, #260]	@ (8007600 <HAL_DMA_IRQHandler+0xe14>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d04a      	beq.n	8007596 <HAL_DMA_IRQHandler+0xdaa>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a3f      	ldr	r2, [pc, #252]	@ (8007604 <HAL_DMA_IRQHandler+0xe18>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d045      	beq.n	8007596 <HAL_DMA_IRQHandler+0xdaa>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a3e      	ldr	r2, [pc, #248]	@ (8007608 <HAL_DMA_IRQHandler+0xe1c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d040      	beq.n	8007596 <HAL_DMA_IRQHandler+0xdaa>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a3c      	ldr	r2, [pc, #240]	@ (800760c <HAL_DMA_IRQHandler+0xe20>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d03b      	beq.n	8007596 <HAL_DMA_IRQHandler+0xdaa>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a3b      	ldr	r2, [pc, #236]	@ (8007610 <HAL_DMA_IRQHandler+0xe24>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d036      	beq.n	8007596 <HAL_DMA_IRQHandler+0xdaa>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a39      	ldr	r2, [pc, #228]	@ (8007614 <HAL_DMA_IRQHandler+0xe28>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d031      	beq.n	8007596 <HAL_DMA_IRQHandler+0xdaa>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a38      	ldr	r2, [pc, #224]	@ (8007618 <HAL_DMA_IRQHandler+0xe2c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d02c      	beq.n	8007596 <HAL_DMA_IRQHandler+0xdaa>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a36      	ldr	r2, [pc, #216]	@ (800761c <HAL_DMA_IRQHandler+0xe30>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d027      	beq.n	8007596 <HAL_DMA_IRQHandler+0xdaa>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a35      	ldr	r2, [pc, #212]	@ (8007620 <HAL_DMA_IRQHandler+0xe34>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d022      	beq.n	8007596 <HAL_DMA_IRQHandler+0xdaa>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a33      	ldr	r2, [pc, #204]	@ (8007624 <HAL_DMA_IRQHandler+0xe38>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d01d      	beq.n	8007596 <HAL_DMA_IRQHandler+0xdaa>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a32      	ldr	r2, [pc, #200]	@ (8007628 <HAL_DMA_IRQHandler+0xe3c>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d018      	beq.n	8007596 <HAL_DMA_IRQHandler+0xdaa>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a30      	ldr	r2, [pc, #192]	@ (800762c <HAL_DMA_IRQHandler+0xe40>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d013      	beq.n	8007596 <HAL_DMA_IRQHandler+0xdaa>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a2f      	ldr	r2, [pc, #188]	@ (8007630 <HAL_DMA_IRQHandler+0xe44>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00e      	beq.n	8007596 <HAL_DMA_IRQHandler+0xdaa>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a2d      	ldr	r2, [pc, #180]	@ (8007634 <HAL_DMA_IRQHandler+0xe48>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d009      	beq.n	8007596 <HAL_DMA_IRQHandler+0xdaa>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a2c      	ldr	r2, [pc, #176]	@ (8007638 <HAL_DMA_IRQHandler+0xe4c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d004      	beq.n	8007596 <HAL_DMA_IRQHandler+0xdaa>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a2a      	ldr	r2, [pc, #168]	@ (800763c <HAL_DMA_IRQHandler+0xe50>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d108      	bne.n	80075a8 <HAL_DMA_IRQHandler+0xdbc>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 021c 	bic.w	r2, r2, #28
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	e007      	b.n	80075b8 <HAL_DMA_IRQHandler+0xdcc>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 020e 	bic.w	r2, r2, #14
 80075b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075bc:	f003 031f 	and.w	r3, r3, #31
 80075c0:	2201      	movs	r2, #1
 80075c2:	409a      	lsls	r2, r3
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d009      	beq.n	80075fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	4798      	blx	r3
 80075ee:	e004      	b.n	80075fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80075f0:	bf00      	nop
 80075f2:	e002      	b.n	80075fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075f4:	bf00      	nop
 80075f6:	e000      	b.n	80075fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80075fa:	3728      	adds	r7, #40	@ 0x28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	40020010 	.word	0x40020010
 8007604:	40020028 	.word	0x40020028
 8007608:	40020040 	.word	0x40020040
 800760c:	40020058 	.word	0x40020058
 8007610:	40020070 	.word	0x40020070
 8007614:	40020088 	.word	0x40020088
 8007618:	400200a0 	.word	0x400200a0
 800761c:	400200b8 	.word	0x400200b8
 8007620:	40020410 	.word	0x40020410
 8007624:	40020428 	.word	0x40020428
 8007628:	40020440 	.word	0x40020440
 800762c:	40020458 	.word	0x40020458
 8007630:	40020470 	.word	0x40020470
 8007634:	40020488 	.word	0x40020488
 8007638:	400204a0 	.word	0x400204a0
 800763c:	400204b8 	.word	0x400204b8

08007640 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800764e:	b2db      	uxtb	r3, r3
}
 8007650:	4618      	mov	r0, r3
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
 8007668:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800766e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007674:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a7f      	ldr	r2, [pc, #508]	@ (8007878 <DMA_SetConfig+0x21c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d072      	beq.n	8007766 <DMA_SetConfig+0x10a>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a7d      	ldr	r2, [pc, #500]	@ (800787c <DMA_SetConfig+0x220>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d06d      	beq.n	8007766 <DMA_SetConfig+0x10a>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a7c      	ldr	r2, [pc, #496]	@ (8007880 <DMA_SetConfig+0x224>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d068      	beq.n	8007766 <DMA_SetConfig+0x10a>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a7a      	ldr	r2, [pc, #488]	@ (8007884 <DMA_SetConfig+0x228>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d063      	beq.n	8007766 <DMA_SetConfig+0x10a>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a79      	ldr	r2, [pc, #484]	@ (8007888 <DMA_SetConfig+0x22c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d05e      	beq.n	8007766 <DMA_SetConfig+0x10a>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a77      	ldr	r2, [pc, #476]	@ (800788c <DMA_SetConfig+0x230>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d059      	beq.n	8007766 <DMA_SetConfig+0x10a>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a76      	ldr	r2, [pc, #472]	@ (8007890 <DMA_SetConfig+0x234>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d054      	beq.n	8007766 <DMA_SetConfig+0x10a>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a74      	ldr	r2, [pc, #464]	@ (8007894 <DMA_SetConfig+0x238>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d04f      	beq.n	8007766 <DMA_SetConfig+0x10a>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a73      	ldr	r2, [pc, #460]	@ (8007898 <DMA_SetConfig+0x23c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d04a      	beq.n	8007766 <DMA_SetConfig+0x10a>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a71      	ldr	r2, [pc, #452]	@ (800789c <DMA_SetConfig+0x240>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d045      	beq.n	8007766 <DMA_SetConfig+0x10a>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a70      	ldr	r2, [pc, #448]	@ (80078a0 <DMA_SetConfig+0x244>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d040      	beq.n	8007766 <DMA_SetConfig+0x10a>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a6e      	ldr	r2, [pc, #440]	@ (80078a4 <DMA_SetConfig+0x248>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d03b      	beq.n	8007766 <DMA_SetConfig+0x10a>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a6d      	ldr	r2, [pc, #436]	@ (80078a8 <DMA_SetConfig+0x24c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d036      	beq.n	8007766 <DMA_SetConfig+0x10a>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a6b      	ldr	r2, [pc, #428]	@ (80078ac <DMA_SetConfig+0x250>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d031      	beq.n	8007766 <DMA_SetConfig+0x10a>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a6a      	ldr	r2, [pc, #424]	@ (80078b0 <DMA_SetConfig+0x254>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d02c      	beq.n	8007766 <DMA_SetConfig+0x10a>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a68      	ldr	r2, [pc, #416]	@ (80078b4 <DMA_SetConfig+0x258>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d027      	beq.n	8007766 <DMA_SetConfig+0x10a>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a67      	ldr	r2, [pc, #412]	@ (80078b8 <DMA_SetConfig+0x25c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d022      	beq.n	8007766 <DMA_SetConfig+0x10a>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a65      	ldr	r2, [pc, #404]	@ (80078bc <DMA_SetConfig+0x260>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d01d      	beq.n	8007766 <DMA_SetConfig+0x10a>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a64      	ldr	r2, [pc, #400]	@ (80078c0 <DMA_SetConfig+0x264>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d018      	beq.n	8007766 <DMA_SetConfig+0x10a>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a62      	ldr	r2, [pc, #392]	@ (80078c4 <DMA_SetConfig+0x268>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d013      	beq.n	8007766 <DMA_SetConfig+0x10a>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a61      	ldr	r2, [pc, #388]	@ (80078c8 <DMA_SetConfig+0x26c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00e      	beq.n	8007766 <DMA_SetConfig+0x10a>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a5f      	ldr	r2, [pc, #380]	@ (80078cc <DMA_SetConfig+0x270>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d009      	beq.n	8007766 <DMA_SetConfig+0x10a>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a5e      	ldr	r2, [pc, #376]	@ (80078d0 <DMA_SetConfig+0x274>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d004      	beq.n	8007766 <DMA_SetConfig+0x10a>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a5c      	ldr	r2, [pc, #368]	@ (80078d4 <DMA_SetConfig+0x278>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d101      	bne.n	800776a <DMA_SetConfig+0x10e>
 8007766:	2301      	movs	r3, #1
 8007768:	e000      	b.n	800776c <DMA_SetConfig+0x110>
 800776a:	2300      	movs	r3, #0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00d      	beq.n	800778c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007778:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d004      	beq.n	800778c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800778a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a39      	ldr	r2, [pc, #228]	@ (8007878 <DMA_SetConfig+0x21c>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d04a      	beq.n	800782c <DMA_SetConfig+0x1d0>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a38      	ldr	r2, [pc, #224]	@ (800787c <DMA_SetConfig+0x220>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d045      	beq.n	800782c <DMA_SetConfig+0x1d0>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a36      	ldr	r2, [pc, #216]	@ (8007880 <DMA_SetConfig+0x224>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d040      	beq.n	800782c <DMA_SetConfig+0x1d0>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a35      	ldr	r2, [pc, #212]	@ (8007884 <DMA_SetConfig+0x228>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d03b      	beq.n	800782c <DMA_SetConfig+0x1d0>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a33      	ldr	r2, [pc, #204]	@ (8007888 <DMA_SetConfig+0x22c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d036      	beq.n	800782c <DMA_SetConfig+0x1d0>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a32      	ldr	r2, [pc, #200]	@ (800788c <DMA_SetConfig+0x230>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d031      	beq.n	800782c <DMA_SetConfig+0x1d0>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a30      	ldr	r2, [pc, #192]	@ (8007890 <DMA_SetConfig+0x234>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d02c      	beq.n	800782c <DMA_SetConfig+0x1d0>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a2f      	ldr	r2, [pc, #188]	@ (8007894 <DMA_SetConfig+0x238>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d027      	beq.n	800782c <DMA_SetConfig+0x1d0>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007898 <DMA_SetConfig+0x23c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d022      	beq.n	800782c <DMA_SetConfig+0x1d0>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a2c      	ldr	r2, [pc, #176]	@ (800789c <DMA_SetConfig+0x240>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d01d      	beq.n	800782c <DMA_SetConfig+0x1d0>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a2a      	ldr	r2, [pc, #168]	@ (80078a0 <DMA_SetConfig+0x244>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d018      	beq.n	800782c <DMA_SetConfig+0x1d0>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a29      	ldr	r2, [pc, #164]	@ (80078a4 <DMA_SetConfig+0x248>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d013      	beq.n	800782c <DMA_SetConfig+0x1d0>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a27      	ldr	r2, [pc, #156]	@ (80078a8 <DMA_SetConfig+0x24c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d00e      	beq.n	800782c <DMA_SetConfig+0x1d0>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a26      	ldr	r2, [pc, #152]	@ (80078ac <DMA_SetConfig+0x250>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d009      	beq.n	800782c <DMA_SetConfig+0x1d0>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a24      	ldr	r2, [pc, #144]	@ (80078b0 <DMA_SetConfig+0x254>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d004      	beq.n	800782c <DMA_SetConfig+0x1d0>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a23      	ldr	r2, [pc, #140]	@ (80078b4 <DMA_SetConfig+0x258>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d101      	bne.n	8007830 <DMA_SetConfig+0x1d4>
 800782c:	2301      	movs	r3, #1
 800782e:	e000      	b.n	8007832 <DMA_SetConfig+0x1d6>
 8007830:	2300      	movs	r3, #0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d059      	beq.n	80078ea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800783a:	f003 031f 	and.w	r3, r3, #31
 800783e:	223f      	movs	r2, #63	@ 0x3f
 8007840:	409a      	lsls	r2, r3
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007854:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	2b40      	cmp	r3, #64	@ 0x40
 8007864:	d138      	bne.n	80078d8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007876:	e086      	b.n	8007986 <DMA_SetConfig+0x32a>
 8007878:	40020010 	.word	0x40020010
 800787c:	40020028 	.word	0x40020028
 8007880:	40020040 	.word	0x40020040
 8007884:	40020058 	.word	0x40020058
 8007888:	40020070 	.word	0x40020070
 800788c:	40020088 	.word	0x40020088
 8007890:	400200a0 	.word	0x400200a0
 8007894:	400200b8 	.word	0x400200b8
 8007898:	40020410 	.word	0x40020410
 800789c:	40020428 	.word	0x40020428
 80078a0:	40020440 	.word	0x40020440
 80078a4:	40020458 	.word	0x40020458
 80078a8:	40020470 	.word	0x40020470
 80078ac:	40020488 	.word	0x40020488
 80078b0:	400204a0 	.word	0x400204a0
 80078b4:	400204b8 	.word	0x400204b8
 80078b8:	58025408 	.word	0x58025408
 80078bc:	5802541c 	.word	0x5802541c
 80078c0:	58025430 	.word	0x58025430
 80078c4:	58025444 	.word	0x58025444
 80078c8:	58025458 	.word	0x58025458
 80078cc:	5802546c 	.word	0x5802546c
 80078d0:	58025480 	.word	0x58025480
 80078d4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	60da      	str	r2, [r3, #12]
}
 80078e8:	e04d      	b.n	8007986 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a29      	ldr	r2, [pc, #164]	@ (8007994 <DMA_SetConfig+0x338>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d022      	beq.n	800793a <DMA_SetConfig+0x2de>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a27      	ldr	r2, [pc, #156]	@ (8007998 <DMA_SetConfig+0x33c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d01d      	beq.n	800793a <DMA_SetConfig+0x2de>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a26      	ldr	r2, [pc, #152]	@ (800799c <DMA_SetConfig+0x340>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d018      	beq.n	800793a <DMA_SetConfig+0x2de>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a24      	ldr	r2, [pc, #144]	@ (80079a0 <DMA_SetConfig+0x344>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d013      	beq.n	800793a <DMA_SetConfig+0x2de>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a23      	ldr	r2, [pc, #140]	@ (80079a4 <DMA_SetConfig+0x348>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d00e      	beq.n	800793a <DMA_SetConfig+0x2de>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a21      	ldr	r2, [pc, #132]	@ (80079a8 <DMA_SetConfig+0x34c>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d009      	beq.n	800793a <DMA_SetConfig+0x2de>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a20      	ldr	r2, [pc, #128]	@ (80079ac <DMA_SetConfig+0x350>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d004      	beq.n	800793a <DMA_SetConfig+0x2de>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a1e      	ldr	r2, [pc, #120]	@ (80079b0 <DMA_SetConfig+0x354>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d101      	bne.n	800793e <DMA_SetConfig+0x2e2>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <DMA_SetConfig+0x2e4>
 800793e:	2300      	movs	r3, #0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d020      	beq.n	8007986 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007948:	f003 031f 	and.w	r3, r3, #31
 800794c:	2201      	movs	r2, #1
 800794e:	409a      	lsls	r2, r3
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	2b40      	cmp	r3, #64	@ 0x40
 8007962:	d108      	bne.n	8007976 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	60da      	str	r2, [r3, #12]
}
 8007974:	e007      	b.n	8007986 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	60da      	str	r2, [r3, #12]
}
 8007986:	bf00      	nop
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	58025408 	.word	0x58025408
 8007998:	5802541c 	.word	0x5802541c
 800799c:	58025430 	.word	0x58025430
 80079a0:	58025444 	.word	0x58025444
 80079a4:	58025458 	.word	0x58025458
 80079a8:	5802546c 	.word	0x5802546c
 80079ac:	58025480 	.word	0x58025480
 80079b0:	58025494 	.word	0x58025494

080079b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a42      	ldr	r2, [pc, #264]	@ (8007acc <DMA_CalcBaseAndBitshift+0x118>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d04a      	beq.n	8007a5c <DMA_CalcBaseAndBitshift+0xa8>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a41      	ldr	r2, [pc, #260]	@ (8007ad0 <DMA_CalcBaseAndBitshift+0x11c>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d045      	beq.n	8007a5c <DMA_CalcBaseAndBitshift+0xa8>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a3f      	ldr	r2, [pc, #252]	@ (8007ad4 <DMA_CalcBaseAndBitshift+0x120>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d040      	beq.n	8007a5c <DMA_CalcBaseAndBitshift+0xa8>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a3e      	ldr	r2, [pc, #248]	@ (8007ad8 <DMA_CalcBaseAndBitshift+0x124>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d03b      	beq.n	8007a5c <DMA_CalcBaseAndBitshift+0xa8>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a3c      	ldr	r2, [pc, #240]	@ (8007adc <DMA_CalcBaseAndBitshift+0x128>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d036      	beq.n	8007a5c <DMA_CalcBaseAndBitshift+0xa8>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a3b      	ldr	r2, [pc, #236]	@ (8007ae0 <DMA_CalcBaseAndBitshift+0x12c>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d031      	beq.n	8007a5c <DMA_CalcBaseAndBitshift+0xa8>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a39      	ldr	r2, [pc, #228]	@ (8007ae4 <DMA_CalcBaseAndBitshift+0x130>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d02c      	beq.n	8007a5c <DMA_CalcBaseAndBitshift+0xa8>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a38      	ldr	r2, [pc, #224]	@ (8007ae8 <DMA_CalcBaseAndBitshift+0x134>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d027      	beq.n	8007a5c <DMA_CalcBaseAndBitshift+0xa8>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a36      	ldr	r2, [pc, #216]	@ (8007aec <DMA_CalcBaseAndBitshift+0x138>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d022      	beq.n	8007a5c <DMA_CalcBaseAndBitshift+0xa8>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a35      	ldr	r2, [pc, #212]	@ (8007af0 <DMA_CalcBaseAndBitshift+0x13c>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d01d      	beq.n	8007a5c <DMA_CalcBaseAndBitshift+0xa8>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a33      	ldr	r2, [pc, #204]	@ (8007af4 <DMA_CalcBaseAndBitshift+0x140>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d018      	beq.n	8007a5c <DMA_CalcBaseAndBitshift+0xa8>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a32      	ldr	r2, [pc, #200]	@ (8007af8 <DMA_CalcBaseAndBitshift+0x144>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d013      	beq.n	8007a5c <DMA_CalcBaseAndBitshift+0xa8>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a30      	ldr	r2, [pc, #192]	@ (8007afc <DMA_CalcBaseAndBitshift+0x148>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d00e      	beq.n	8007a5c <DMA_CalcBaseAndBitshift+0xa8>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a2f      	ldr	r2, [pc, #188]	@ (8007b00 <DMA_CalcBaseAndBitshift+0x14c>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d009      	beq.n	8007a5c <DMA_CalcBaseAndBitshift+0xa8>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8007b04 <DMA_CalcBaseAndBitshift+0x150>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d004      	beq.n	8007a5c <DMA_CalcBaseAndBitshift+0xa8>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a2c      	ldr	r2, [pc, #176]	@ (8007b08 <DMA_CalcBaseAndBitshift+0x154>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d101      	bne.n	8007a60 <DMA_CalcBaseAndBitshift+0xac>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e000      	b.n	8007a62 <DMA_CalcBaseAndBitshift+0xae>
 8007a60:	2300      	movs	r3, #0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d024      	beq.n	8007ab0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	3b10      	subs	r3, #16
 8007a6e:	4a27      	ldr	r2, [pc, #156]	@ (8007b0c <DMA_CalcBaseAndBitshift+0x158>)
 8007a70:	fba2 2303 	umull	r2, r3, r2, r3
 8007a74:	091b      	lsrs	r3, r3, #4
 8007a76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f003 0307 	and.w	r3, r3, #7
 8007a7e:	4a24      	ldr	r2, [pc, #144]	@ (8007b10 <DMA_CalcBaseAndBitshift+0x15c>)
 8007a80:	5cd3      	ldrb	r3, [r2, r3]
 8007a82:	461a      	mov	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d908      	bls.n	8007aa0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	4b1f      	ldr	r3, [pc, #124]	@ (8007b14 <DMA_CalcBaseAndBitshift+0x160>)
 8007a96:	4013      	ands	r3, r2
 8007a98:	1d1a      	adds	r2, r3, #4
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a9e:	e00d      	b.n	8007abc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8007b14 <DMA_CalcBaseAndBitshift+0x160>)
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8007aae:	e005      	b.n	8007abc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	40020010 	.word	0x40020010
 8007ad0:	40020028 	.word	0x40020028
 8007ad4:	40020040 	.word	0x40020040
 8007ad8:	40020058 	.word	0x40020058
 8007adc:	40020070 	.word	0x40020070
 8007ae0:	40020088 	.word	0x40020088
 8007ae4:	400200a0 	.word	0x400200a0
 8007ae8:	400200b8 	.word	0x400200b8
 8007aec:	40020410 	.word	0x40020410
 8007af0:	40020428 	.word	0x40020428
 8007af4:	40020440 	.word	0x40020440
 8007af8:	40020458 	.word	0x40020458
 8007afc:	40020470 	.word	0x40020470
 8007b00:	40020488 	.word	0x40020488
 8007b04:	400204a0 	.word	0x400204a0
 8007b08:	400204b8 	.word	0x400204b8
 8007b0c:	aaaaaaab 	.word	0xaaaaaaab
 8007b10:	08016b28 	.word	0x08016b28
 8007b14:	fffffc00 	.word	0xfffffc00

08007b18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d120      	bne.n	8007b6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b30:	2b03      	cmp	r3, #3
 8007b32:	d858      	bhi.n	8007be6 <DMA_CheckFifoParam+0xce>
 8007b34:	a201      	add	r2, pc, #4	@ (adr r2, 8007b3c <DMA_CheckFifoParam+0x24>)
 8007b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3a:	bf00      	nop
 8007b3c:	08007b4d 	.word	0x08007b4d
 8007b40:	08007b5f 	.word	0x08007b5f
 8007b44:	08007b4d 	.word	0x08007b4d
 8007b48:	08007be7 	.word	0x08007be7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d048      	beq.n	8007bea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b5c:	e045      	b.n	8007bea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b62:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007b66:	d142      	bne.n	8007bee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b6c:	e03f      	b.n	8007bee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b76:	d123      	bne.n	8007bc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7c:	2b03      	cmp	r3, #3
 8007b7e:	d838      	bhi.n	8007bf2 <DMA_CheckFifoParam+0xda>
 8007b80:	a201      	add	r2, pc, #4	@ (adr r2, 8007b88 <DMA_CheckFifoParam+0x70>)
 8007b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b86:	bf00      	nop
 8007b88:	08007b99 	.word	0x08007b99
 8007b8c:	08007b9f 	.word	0x08007b9f
 8007b90:	08007b99 	.word	0x08007b99
 8007b94:	08007bb1 	.word	0x08007bb1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	73fb      	strb	r3, [r7, #15]
        break;
 8007b9c:	e030      	b.n	8007c00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d025      	beq.n	8007bf6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bae:	e022      	b.n	8007bf6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007bb8:	d11f      	bne.n	8007bfa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bbe:	e01c      	b.n	8007bfa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d902      	bls.n	8007bce <DMA_CheckFifoParam+0xb6>
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d003      	beq.n	8007bd4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007bcc:	e018      	b.n	8007c00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8007bd2:	e015      	b.n	8007c00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00e      	beq.n	8007bfe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	73fb      	strb	r3, [r7, #15]
    break;
 8007be4:	e00b      	b.n	8007bfe <DMA_CheckFifoParam+0xe6>
        break;
 8007be6:	bf00      	nop
 8007be8:	e00a      	b.n	8007c00 <DMA_CheckFifoParam+0xe8>
        break;
 8007bea:	bf00      	nop
 8007bec:	e008      	b.n	8007c00 <DMA_CheckFifoParam+0xe8>
        break;
 8007bee:	bf00      	nop
 8007bf0:	e006      	b.n	8007c00 <DMA_CheckFifoParam+0xe8>
        break;
 8007bf2:	bf00      	nop
 8007bf4:	e004      	b.n	8007c00 <DMA_CheckFifoParam+0xe8>
        break;
 8007bf6:	bf00      	nop
 8007bf8:	e002      	b.n	8007c00 <DMA_CheckFifoParam+0xe8>
        break;
 8007bfa:	bf00      	nop
 8007bfc:	e000      	b.n	8007c00 <DMA_CheckFifoParam+0xe8>
    break;
 8007bfe:	bf00      	nop
    }
  }

  return status;
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop

08007c10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a38      	ldr	r2, [pc, #224]	@ (8007d04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d022      	beq.n	8007c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a36      	ldr	r2, [pc, #216]	@ (8007d08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d01d      	beq.n	8007c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a35      	ldr	r2, [pc, #212]	@ (8007d0c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d018      	beq.n	8007c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a33      	ldr	r2, [pc, #204]	@ (8007d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d013      	beq.n	8007c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a32      	ldr	r2, [pc, #200]	@ (8007d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00e      	beq.n	8007c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a30      	ldr	r2, [pc, #192]	@ (8007d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d009      	beq.n	8007c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8007d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d004      	beq.n	8007c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a2d      	ldr	r2, [pc, #180]	@ (8007d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d101      	bne.n	8007c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e000      	b.n	8007c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007c72:	2300      	movs	r3, #0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d01a      	beq.n	8007cae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	3b08      	subs	r3, #8
 8007c80:	4a28      	ldr	r2, [pc, #160]	@ (8007d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007c82:	fba2 2303 	umull	r2, r3, r2, r3
 8007c86:	091b      	lsrs	r3, r3, #4
 8007c88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	4b26      	ldr	r3, [pc, #152]	@ (8007d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	461a      	mov	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a24      	ldr	r2, [pc, #144]	@ (8007d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007c9c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f003 031f 	and.w	r3, r3, #31
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	409a      	lsls	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007cac:	e024      	b.n	8007cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	3b10      	subs	r3, #16
 8007cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8007d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cbc:	091b      	lsrs	r3, r3, #4
 8007cbe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8007d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d806      	bhi.n	8007cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	4a1b      	ldr	r2, [pc, #108]	@ (8007d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d902      	bls.n	8007cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4b18      	ldr	r3, [pc, #96]	@ (8007d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007cda:	4413      	add	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	461a      	mov	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a16      	ldr	r2, [pc, #88]	@ (8007d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007ce8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f003 031f 	and.w	r3, r3, #31
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	409a      	lsls	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007cf8:	bf00      	nop
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	58025408 	.word	0x58025408
 8007d08:	5802541c 	.word	0x5802541c
 8007d0c:	58025430 	.word	0x58025430
 8007d10:	58025444 	.word	0x58025444
 8007d14:	58025458 	.word	0x58025458
 8007d18:	5802546c 	.word	0x5802546c
 8007d1c:	58025480 	.word	0x58025480
 8007d20:	58025494 	.word	0x58025494
 8007d24:	cccccccd 	.word	0xcccccccd
 8007d28:	16009600 	.word	0x16009600
 8007d2c:	58025880 	.word	0x58025880
 8007d30:	aaaaaaab 	.word	0xaaaaaaab
 8007d34:	400204b8 	.word	0x400204b8
 8007d38:	4002040f 	.word	0x4002040f
 8007d3c:	10008200 	.word	0x10008200
 8007d40:	40020880 	.word	0x40020880

08007d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d04a      	beq.n	8007df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	d847      	bhi.n	8007df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a25      	ldr	r2, [pc, #148]	@ (8007dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d022      	beq.n	8007db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a24      	ldr	r2, [pc, #144]	@ (8007e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d01d      	beq.n	8007db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a22      	ldr	r2, [pc, #136]	@ (8007e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d018      	beq.n	8007db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a21      	ldr	r2, [pc, #132]	@ (8007e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d013      	beq.n	8007db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8007e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d00e      	beq.n	8007db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a1e      	ldr	r2, [pc, #120]	@ (8007e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d009      	beq.n	8007db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a1c      	ldr	r2, [pc, #112]	@ (8007e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d004      	beq.n	8007db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a1b      	ldr	r2, [pc, #108]	@ (8007e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d101      	bne.n	8007db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007db0:	2301      	movs	r3, #1
 8007db2:	e000      	b.n	8007db6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007db4:	2300      	movs	r3, #0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	4b17      	ldr	r3, [pc, #92]	@ (8007e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007dbe:	4413      	add	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a15      	ldr	r2, [pc, #84]	@ (8007e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007dcc:	671a      	str	r2, [r3, #112]	@ 0x70
 8007dce:	e009      	b.n	8007de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	4b14      	ldr	r3, [pc, #80]	@ (8007e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	461a      	mov	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a11      	ldr	r2, [pc, #68]	@ (8007e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007de2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	2201      	movs	r2, #1
 8007dea:	409a      	lsls	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007df0:	bf00      	nop
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	58025408 	.word	0x58025408
 8007e00:	5802541c 	.word	0x5802541c
 8007e04:	58025430 	.word	0x58025430
 8007e08:	58025444 	.word	0x58025444
 8007e0c:	58025458 	.word	0x58025458
 8007e10:	5802546c 	.word	0x5802546c
 8007e14:	58025480 	.word	0x58025480
 8007e18:	58025494 	.word	0x58025494
 8007e1c:	1600963f 	.word	0x1600963f
 8007e20:	58025940 	.word	0x58025940
 8007e24:	1000823f 	.word	0x1000823f
 8007e28:	40020940 	.word	0x40020940

08007e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b089      	sub	sp, #36	@ 0x24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007e3a:	4b86      	ldr	r3, [pc, #536]	@ (8008054 <HAL_GPIO_Init+0x228>)
 8007e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e3e:	e18c      	b.n	800815a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	2101      	movs	r1, #1
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	fa01 f303 	lsl.w	r3, r1, r3
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 817e 	beq.w	8008154 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f003 0303 	and.w	r3, r3, #3
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d005      	beq.n	8007e70 <HAL_GPIO_Init+0x44>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f003 0303 	and.w	r3, r3, #3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d130      	bne.n	8007ed2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	2203      	movs	r2, #3
 8007e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e80:	43db      	mvns	r3, r3
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	4013      	ands	r3, r2
 8007e86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	fa02 f303 	lsl.w	r3, r2, r3
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007eae:	43db      	mvns	r3, r3
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	091b      	lsrs	r3, r3, #4
 8007ebc:	f003 0201 	and.w	r2, r3, #1
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	69ba      	ldr	r2, [r7, #24]
 8007ed0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f003 0303 	and.w	r3, r3, #3
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	d017      	beq.n	8007f0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	2203      	movs	r2, #3
 8007eea:	fa02 f303 	lsl.w	r3, r2, r3
 8007eee:	43db      	mvns	r3, r3
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	689a      	ldr	r2, [r3, #8]
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	fa02 f303 	lsl.w	r3, r2, r3
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f003 0303 	and.w	r3, r3, #3
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d123      	bne.n	8007f62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	08da      	lsrs	r2, r3, #3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3208      	adds	r2, #8
 8007f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	f003 0307 	and.w	r3, r3, #7
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	220f      	movs	r2, #15
 8007f32:	fa02 f303 	lsl.w	r3, r2, r3
 8007f36:	43db      	mvns	r3, r3
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	691a      	ldr	r2, [r3, #16]
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	f003 0307 	and.w	r3, r3, #7
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	08da      	lsrs	r2, r3, #3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3208      	adds	r2, #8
 8007f5c:	69b9      	ldr	r1, [r7, #24]
 8007f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	005b      	lsls	r3, r3, #1
 8007f6c:	2203      	movs	r2, #3
 8007f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f72:	43db      	mvns	r3, r3
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	4013      	ands	r3, r2
 8007f78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f003 0203 	and.w	r2, r3, #3
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 80d8 	beq.w	8008154 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8008058 <HAL_GPIO_Init+0x22c>)
 8007fa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007faa:	4a2b      	ldr	r2, [pc, #172]	@ (8008058 <HAL_GPIO_Init+0x22c>)
 8007fac:	f043 0302 	orr.w	r3, r3, #2
 8007fb0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007fb4:	4b28      	ldr	r3, [pc, #160]	@ (8008058 <HAL_GPIO_Init+0x22c>)
 8007fb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007fc2:	4a26      	ldr	r2, [pc, #152]	@ (800805c <HAL_GPIO_Init+0x230>)
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	089b      	lsrs	r3, r3, #2
 8007fc8:	3302      	adds	r3, #2
 8007fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	f003 0303 	and.w	r3, r3, #3
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	220f      	movs	r2, #15
 8007fda:	fa02 f303 	lsl.w	r3, r2, r3
 8007fde:	43db      	mvns	r3, r3
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8008060 <HAL_GPIO_Init+0x234>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d04a      	beq.n	8008084 <HAL_GPIO_Init+0x258>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8008064 <HAL_GPIO_Init+0x238>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d02b      	beq.n	800804e <HAL_GPIO_Init+0x222>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8008068 <HAL_GPIO_Init+0x23c>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d025      	beq.n	800804a <HAL_GPIO_Init+0x21e>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a1a      	ldr	r2, [pc, #104]	@ (800806c <HAL_GPIO_Init+0x240>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d01f      	beq.n	8008046 <HAL_GPIO_Init+0x21a>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a19      	ldr	r2, [pc, #100]	@ (8008070 <HAL_GPIO_Init+0x244>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d019      	beq.n	8008042 <HAL_GPIO_Init+0x216>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a18      	ldr	r2, [pc, #96]	@ (8008074 <HAL_GPIO_Init+0x248>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d013      	beq.n	800803e <HAL_GPIO_Init+0x212>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a17      	ldr	r2, [pc, #92]	@ (8008078 <HAL_GPIO_Init+0x24c>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d00d      	beq.n	800803a <HAL_GPIO_Init+0x20e>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a16      	ldr	r2, [pc, #88]	@ (800807c <HAL_GPIO_Init+0x250>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d007      	beq.n	8008036 <HAL_GPIO_Init+0x20a>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a15      	ldr	r2, [pc, #84]	@ (8008080 <HAL_GPIO_Init+0x254>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d101      	bne.n	8008032 <HAL_GPIO_Init+0x206>
 800802e:	2309      	movs	r3, #9
 8008030:	e029      	b.n	8008086 <HAL_GPIO_Init+0x25a>
 8008032:	230a      	movs	r3, #10
 8008034:	e027      	b.n	8008086 <HAL_GPIO_Init+0x25a>
 8008036:	2307      	movs	r3, #7
 8008038:	e025      	b.n	8008086 <HAL_GPIO_Init+0x25a>
 800803a:	2306      	movs	r3, #6
 800803c:	e023      	b.n	8008086 <HAL_GPIO_Init+0x25a>
 800803e:	2305      	movs	r3, #5
 8008040:	e021      	b.n	8008086 <HAL_GPIO_Init+0x25a>
 8008042:	2304      	movs	r3, #4
 8008044:	e01f      	b.n	8008086 <HAL_GPIO_Init+0x25a>
 8008046:	2303      	movs	r3, #3
 8008048:	e01d      	b.n	8008086 <HAL_GPIO_Init+0x25a>
 800804a:	2302      	movs	r3, #2
 800804c:	e01b      	b.n	8008086 <HAL_GPIO_Init+0x25a>
 800804e:	2301      	movs	r3, #1
 8008050:	e019      	b.n	8008086 <HAL_GPIO_Init+0x25a>
 8008052:	bf00      	nop
 8008054:	58000080 	.word	0x58000080
 8008058:	58024400 	.word	0x58024400
 800805c:	58000400 	.word	0x58000400
 8008060:	58020000 	.word	0x58020000
 8008064:	58020400 	.word	0x58020400
 8008068:	58020800 	.word	0x58020800
 800806c:	58020c00 	.word	0x58020c00
 8008070:	58021000 	.word	0x58021000
 8008074:	58021400 	.word	0x58021400
 8008078:	58021800 	.word	0x58021800
 800807c:	58021c00 	.word	0x58021c00
 8008080:	58022400 	.word	0x58022400
 8008084:	2300      	movs	r3, #0
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	f002 0203 	and.w	r2, r2, #3
 800808c:	0092      	lsls	r2, r2, #2
 800808e:	4093      	lsls	r3, r2
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	4313      	orrs	r3, r2
 8008094:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008096:	4938      	ldr	r1, [pc, #224]	@ (8008178 <HAL_GPIO_Init+0x34c>)
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	089b      	lsrs	r3, r3, #2
 800809c:	3302      	adds	r3, #2
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80080a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	43db      	mvns	r3, r3
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	4013      	ands	r3, r2
 80080b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80080c2:	69ba      	ldr	r2, [r7, #24]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80080ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80080d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	43db      	mvns	r3, r3
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	4013      	ands	r3, r2
 80080e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80080f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	43db      	mvns	r3, r3
 800810a:	69ba      	ldr	r2, [r7, #24]
 800810c:	4013      	ands	r3, r2
 800810e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d003      	beq.n	8008124 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800811c:	69ba      	ldr	r2, [r7, #24]
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	4313      	orrs	r3, r2
 8008122:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	43db      	mvns	r3, r3
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	4013      	ands	r3, r2
 8008138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008146:	69ba      	ldr	r2, [r7, #24]
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	4313      	orrs	r3, r2
 800814c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	3301      	adds	r3, #1
 8008158:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	fa22 f303 	lsr.w	r3, r2, r3
 8008164:	2b00      	cmp	r3, #0
 8008166:	f47f ae6b 	bne.w	8007e40 <HAL_GPIO_Init+0x14>
  }
}
 800816a:	bf00      	nop
 800816c:	bf00      	nop
 800816e:	3724      	adds	r7, #36	@ 0x24
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	58000400 	.word	0x58000400

0800817c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	807b      	strh	r3, [r7, #2]
 8008188:	4613      	mov	r3, r2
 800818a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800818c:	787b      	ldrb	r3, [r7, #1]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008192:	887a      	ldrh	r2, [r7, #2]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008198:	e003      	b.n	80081a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800819a:	887b      	ldrh	r3, [r7, #2]
 800819c:	041a      	lsls	r2, r3, #16
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	619a      	str	r2, [r3, #24]
}
 80081a2:	bf00      	nop
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b085      	sub	sp, #20
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80081c0:	887a      	ldrh	r2, [r7, #2]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	4013      	ands	r3, r2
 80081c6:	041a      	lsls	r2, r3, #16
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	43d9      	mvns	r1, r3
 80081cc:	887b      	ldrh	r3, [r7, #2]
 80081ce:	400b      	ands	r3, r1
 80081d0:	431a      	orrs	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	619a      	str	r2, [r3, #24]
}
 80081d6:	bf00      	nop
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
	...

080081e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e08b      	b.n	800830e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7fa f98c 	bl	8002528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2224      	movs	r2, #36	@ 0x24
 8008214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0201 	bic.w	r2, r2, #1
 8008226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008234:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008244:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d107      	bne.n	800825e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800825a:	609a      	str	r2, [r3, #8]
 800825c:	e006      	b.n	800826c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	689a      	ldr	r2, [r3, #8]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800826a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	2b02      	cmp	r3, #2
 8008272:	d108      	bne.n	8008286 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685a      	ldr	r2, [r3, #4]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008282:	605a      	str	r2, [r3, #4]
 8008284:	e007      	b.n	8008296 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008294:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6859      	ldr	r1, [r3, #4]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008318 <HAL_I2C_Init+0x134>)
 80082a2:	430b      	orrs	r3, r1
 80082a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68da      	ldr	r2, [r3, #12]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	691a      	ldr	r2, [r3, #16]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	430a      	orrs	r2, r1
 80082ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	69d9      	ldr	r1, [r3, #28]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1a      	ldr	r2, [r3, #32]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	430a      	orrs	r2, r1
 80082de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f042 0201 	orr.w	r2, r2, #1
 80082ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	02008000 	.word	0x02008000

0800831c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af02      	add	r7, sp, #8
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	607a      	str	r2, [r7, #4]
 8008326:	461a      	mov	r2, r3
 8008328:	460b      	mov	r3, r1
 800832a:	817b      	strh	r3, [r7, #10]
 800832c:	4613      	mov	r3, r2
 800832e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b20      	cmp	r3, #32
 800833a:	f040 80fd 	bne.w	8008538 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008344:	2b01      	cmp	r3, #1
 8008346:	d101      	bne.n	800834c <HAL_I2C_Master_Transmit+0x30>
 8008348:	2302      	movs	r3, #2
 800834a:	e0f6      	b.n	800853a <HAL_I2C_Master_Transmit+0x21e>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008354:	f7fd f88a 	bl	800546c <HAL_GetTick>
 8008358:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	2319      	movs	r3, #25
 8008360:	2201      	movs	r2, #1
 8008362:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f001 f887 	bl	800947a <I2C_WaitOnFlagUntilTimeout>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e0e1      	b.n	800853a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2221      	movs	r2, #33	@ 0x21
 800837a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2210      	movs	r2, #16
 8008382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	893a      	ldrh	r2, [r7, #8]
 8008396:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	2bff      	cmp	r3, #255	@ 0xff
 80083a6:	d906      	bls.n	80083b6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	22ff      	movs	r2, #255	@ 0xff
 80083ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80083ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80083b2:	617b      	str	r3, [r7, #20]
 80083b4:	e007      	b.n	80083c6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80083c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80083c4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d024      	beq.n	8008418 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d2:	781a      	ldrb	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083de:	1c5a      	adds	r2, r3, #1
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	3b01      	subs	r3, #1
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083f6:	3b01      	subs	r3, #1
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008402:	b2db      	uxtb	r3, r3
 8008404:	3301      	adds	r3, #1
 8008406:	b2da      	uxtb	r2, r3
 8008408:	8979      	ldrh	r1, [r7, #10]
 800840a:	4b4e      	ldr	r3, [pc, #312]	@ (8008544 <HAL_I2C_Master_Transmit+0x228>)
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f001 fa81 	bl	8009918 <I2C_TransferConfig>
 8008416:	e066      	b.n	80084e6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800841c:	b2da      	uxtb	r2, r3
 800841e:	8979      	ldrh	r1, [r7, #10]
 8008420:	4b48      	ldr	r3, [pc, #288]	@ (8008544 <HAL_I2C_Master_Transmit+0x228>)
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f001 fa76 	bl	8009918 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800842c:	e05b      	b.n	80084e6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	6a39      	ldr	r1, [r7, #32]
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f001 f87a 	bl	800952c <I2C_WaitOnTXISFlagUntilTimeout>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e07b      	b.n	800853a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008446:	781a      	ldrb	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800845c:	b29b      	uxth	r3, r3
 800845e:	3b01      	subs	r3, #1
 8008460:	b29a      	uxth	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800846a:	3b01      	subs	r3, #1
 800846c:	b29a      	uxth	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008476:	b29b      	uxth	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d034      	beq.n	80084e6 <HAL_I2C_Master_Transmit+0x1ca>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008480:	2b00      	cmp	r3, #0
 8008482:	d130      	bne.n	80084e6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	2200      	movs	r2, #0
 800848c:	2180      	movs	r1, #128	@ 0x80
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 fff3 	bl	800947a <I2C_WaitOnFlagUntilTimeout>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e04d      	b.n	800853a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	2bff      	cmp	r3, #255	@ 0xff
 80084a6:	d90e      	bls.n	80084c6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	22ff      	movs	r2, #255	@ 0xff
 80084ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	8979      	ldrh	r1, [r7, #10]
 80084b6:	2300      	movs	r3, #0
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f001 fa2a 	bl	8009918 <I2C_TransferConfig>
 80084c4:	e00f      	b.n	80084e6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	8979      	ldrh	r1, [r7, #10]
 80084d8:	2300      	movs	r3, #0
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f001 fa19 	bl	8009918 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d19e      	bne.n	800842e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	6a39      	ldr	r1, [r7, #32]
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f001 f860 	bl	80095ba <I2C_WaitOnSTOPFlagUntilTimeout>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e01a      	b.n	800853a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2220      	movs	r2, #32
 800850a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6859      	ldr	r1, [r3, #4]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	4b0c      	ldr	r3, [pc, #48]	@ (8008548 <HAL_I2C_Master_Transmit+0x22c>)
 8008518:	400b      	ands	r3, r1
 800851a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2220      	movs	r2, #32
 8008520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	e000      	b.n	800853a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008538:	2302      	movs	r3, #2
  }
}
 800853a:	4618      	mov	r0, r3
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	80002000 	.word	0x80002000
 8008548:	fe00e800 	.word	0xfe00e800

0800854c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b088      	sub	sp, #32
 8008550:	af02      	add	r7, sp, #8
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	607a      	str	r2, [r7, #4]
 8008556:	461a      	mov	r2, r3
 8008558:	460b      	mov	r3, r1
 800855a:	817b      	strh	r3, [r7, #10]
 800855c:	4613      	mov	r3, r2
 800855e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b20      	cmp	r3, #32
 800856a:	f040 80db 	bne.w	8008724 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008574:	2b01      	cmp	r3, #1
 8008576:	d101      	bne.n	800857c <HAL_I2C_Master_Receive+0x30>
 8008578:	2302      	movs	r3, #2
 800857a:	e0d4      	b.n	8008726 <HAL_I2C_Master_Receive+0x1da>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008584:	f7fc ff72 	bl	800546c <HAL_GetTick>
 8008588:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	2319      	movs	r3, #25
 8008590:	2201      	movs	r2, #1
 8008592:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 ff6f 	bl	800947a <I2C_WaitOnFlagUntilTimeout>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e0bf      	b.n	8008726 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2222      	movs	r2, #34	@ 0x22
 80085aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2210      	movs	r2, #16
 80085b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	893a      	ldrh	r2, [r7, #8]
 80085c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	2bff      	cmp	r3, #255	@ 0xff
 80085d6:	d90e      	bls.n	80085f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	22ff      	movs	r2, #255	@ 0xff
 80085dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	8979      	ldrh	r1, [r7, #10]
 80085e6:	4b52      	ldr	r3, [pc, #328]	@ (8008730 <HAL_I2C_Master_Receive+0x1e4>)
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f001 f992 	bl	8009918 <I2C_TransferConfig>
 80085f4:	e06d      	b.n	80086d2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008604:	b2da      	uxtb	r2, r3
 8008606:	8979      	ldrh	r1, [r7, #10]
 8008608:	4b49      	ldr	r3, [pc, #292]	@ (8008730 <HAL_I2C_Master_Receive+0x1e4>)
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f001 f981 	bl	8009918 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008616:	e05c      	b.n	80086d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	6a39      	ldr	r1, [r7, #32]
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f001 f80f 	bl	8009640 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e07c      	b.n	8008726 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008648:	3b01      	subs	r3, #1
 800864a:	b29a      	uxth	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008654:	b29b      	uxth	r3, r3
 8008656:	3b01      	subs	r3, #1
 8008658:	b29a      	uxth	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008662:	b29b      	uxth	r3, r3
 8008664:	2b00      	cmp	r3, #0
 8008666:	d034      	beq.n	80086d2 <HAL_I2C_Master_Receive+0x186>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800866c:	2b00      	cmp	r3, #0
 800866e:	d130      	bne.n	80086d2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	2200      	movs	r2, #0
 8008678:	2180      	movs	r1, #128	@ 0x80
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f000 fefd 	bl	800947a <I2C_WaitOnFlagUntilTimeout>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e04d      	b.n	8008726 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800868e:	b29b      	uxth	r3, r3
 8008690:	2bff      	cmp	r3, #255	@ 0xff
 8008692:	d90e      	bls.n	80086b2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	22ff      	movs	r2, #255	@ 0xff
 8008698:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	8979      	ldrh	r1, [r7, #10]
 80086a2:	2300      	movs	r3, #0
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f001 f934 	bl	8009918 <I2C_TransferConfig>
 80086b0:	e00f      	b.n	80086d2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	8979      	ldrh	r1, [r7, #10]
 80086c4:	2300      	movs	r3, #0
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f001 f923 	bl	8009918 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d19d      	bne.n	8008618 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	6a39      	ldr	r1, [r7, #32]
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 ff6a 	bl	80095ba <I2C_WaitOnSTOPFlagUntilTimeout>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e01a      	b.n	8008726 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2220      	movs	r2, #32
 80086f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6859      	ldr	r1, [r3, #4]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	4b0c      	ldr	r3, [pc, #48]	@ (8008734 <HAL_I2C_Master_Receive+0x1e8>)
 8008704:	400b      	ands	r3, r1
 8008706:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2220      	movs	r2, #32
 800870c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	e000      	b.n	8008726 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008724:	2302      	movs	r3, #2
  }
}
 8008726:	4618      	mov	r0, r3
 8008728:	3718      	adds	r7, #24
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	80002400 	.word	0x80002400
 8008734:	fe00e800 	.word	0xfe00e800

08008738 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	68f9      	ldr	r1, [r7, #12]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	4798      	blx	r3
  }
}
 8008764:	bf00      	nop
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	0a1b      	lsrs	r3, r3, #8
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	2b00      	cmp	r3, #0
 800878e:	d010      	beq.n	80087b2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	09db      	lsrs	r3, r3, #7
 8008794:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00a      	beq.n	80087b2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a0:	f043 0201 	orr.w	r2, r3, #1
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80087b0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	0a9b      	lsrs	r3, r3, #10
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d010      	beq.n	80087e0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	09db      	lsrs	r3, r3, #7
 80087c2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ce:	f043 0208 	orr.w	r2, r3, #8
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80087de:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	0a5b      	lsrs	r3, r3, #9
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d010      	beq.n	800880e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	09db      	lsrs	r3, r3, #7
 80087f0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00a      	beq.n	800880e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087fc:	f043 0202 	orr.w	r2, r3, #2
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800880c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008812:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f003 030b 	and.w	r3, r3, #11
 800881a:	2b00      	cmp	r3, #0
 800881c:	d003      	beq.n	8008826 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800881e:	68f9      	ldr	r1, [r7, #12]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fcd1 	bl	80091c8 <I2C_ITError>
  }
}
 8008826:	bf00      	nop
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800882e:	b480      	push	{r7}
 8008830:	b083      	sub	sp, #12
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008836:	bf00      	nop
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008842:	b480      	push	{r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800884a:	bf00      	nop
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	460b      	mov	r3, r1
 8008860:	70fb      	strb	r3, [r7, #3]
 8008862:	4613      	mov	r3, r2
 8008864:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008866:	bf00      	nop
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008872:	b480      	push	{r7}
 8008874:	b083      	sub	sp, #12
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800887a:	bf00      	nop
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b086      	sub	sp, #24
 800889e:	af00      	add	r7, sp, #0
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d101      	bne.n	80088be <I2C_Slave_ISR_IT+0x24>
 80088ba:	2302      	movs	r3, #2
 80088bc:	e0ed      	b.n	8008a9a <I2C_Slave_ISR_IT+0x200>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	095b      	lsrs	r3, r3, #5
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00a      	beq.n	80088e8 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	095b      	lsrs	r3, r3, #5
 80088d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d004      	beq.n	80088e8 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80088de:	6939      	ldr	r1, [r7, #16]
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 f9c1 	bl	8008c68 <I2C_ITSlaveCplt>
 80088e6:	e0d3      	b.n	8008a90 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	091b      	lsrs	r3, r3, #4
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d04d      	beq.n	8008990 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	091b      	lsrs	r3, r3, #4
 80088f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d047      	beq.n	8008990 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008904:	b29b      	uxth	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d128      	bne.n	800895c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b28      	cmp	r3, #40	@ 0x28
 8008914:	d108      	bne.n	8008928 <I2C_Slave_ISR_IT+0x8e>
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800891c:	d104      	bne.n	8008928 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800891e:	6939      	ldr	r1, [r7, #16]
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 fbfb 	bl	800911c <I2C_ITListenCplt>
 8008926:	e032      	b.n	800898e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b29      	cmp	r3, #41	@ 0x29
 8008932:	d10e      	bne.n	8008952 <I2C_Slave_ISR_IT+0xb8>
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800893a:	d00a      	beq.n	8008952 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2210      	movs	r2, #16
 8008942:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f000 fd56 	bl	80093f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 f92d 	bl	8008baa <I2C_ITSlaveSeqCplt>
 8008950:	e01d      	b.n	800898e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2210      	movs	r2, #16
 8008958:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800895a:	e096      	b.n	8008a8a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2210      	movs	r2, #16
 8008962:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008968:	f043 0204 	orr.w	r2, r3, #4
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d004      	beq.n	8008980 <I2C_Slave_ISR_IT+0xe6>
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800897c:	f040 8085 	bne.w	8008a8a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008984:	4619      	mov	r1, r3
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f000 fc1e 	bl	80091c8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800898c:	e07d      	b.n	8008a8a <I2C_Slave_ISR_IT+0x1f0>
 800898e:	e07c      	b.n	8008a8a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	089b      	lsrs	r3, r3, #2
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d030      	beq.n	80089fe <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	089b      	lsrs	r3, r3, #2
 80089a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d02a      	beq.n	80089fe <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d018      	beq.n	80089e4 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089bc:	b2d2      	uxtb	r2, r2
 80089be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c4:	1c5a      	adds	r2, r3, #1
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089ce:	3b01      	subs	r3, #1
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089da:	b29b      	uxth	r3, r3
 80089dc:	3b01      	subs	r3, #1
 80089de:	b29a      	uxth	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d14f      	bne.n	8008a8e <I2C_Slave_ISR_IT+0x1f4>
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80089f4:	d04b      	beq.n	8008a8e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f000 f8d7 	bl	8008baa <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80089fc:	e047      	b.n	8008a8e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	08db      	lsrs	r3, r3, #3
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00a      	beq.n	8008a20 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	08db      	lsrs	r3, r3, #3
 8008a0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d004      	beq.n	8008a20 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008a16:	6939      	ldr	r1, [r7, #16]
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 f842 	bl	8008aa2 <I2C_ITAddrCplt>
 8008a1e:	e037      	b.n	8008a90 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	085b      	lsrs	r3, r3, #1
 8008a24:	f003 0301 	and.w	r3, r3, #1
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d031      	beq.n	8008a90 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	085b      	lsrs	r3, r3, #1
 8008a30:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d02b      	beq.n	8008a90 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d018      	beq.n	8008a74 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a46:	781a      	ldrb	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a52:	1c5a      	adds	r2, r3, #1
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008a72:	e00d      	b.n	8008a90 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a7a:	d002      	beq.n	8008a82 <I2C_Slave_ISR_IT+0x1e8>
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d106      	bne.n	8008a90 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 f891 	bl	8008baa <I2C_ITSlaveSeqCplt>
 8008a88:	e002      	b.n	8008a90 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8008a8a:	bf00      	nop
 8008a8c:	e000      	b.n	8008a90 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8008a8e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3718      	adds	r7, #24
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008ab8:	2b28      	cmp	r3, #40	@ 0x28
 8008aba:	d16a      	bne.n	8008b92 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	0c1b      	lsrs	r3, r3, #16
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	0c1b      	lsrs	r3, r3, #16
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008ada:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ae8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008af6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d138      	bne.n	8008b72 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008b00:	897b      	ldrh	r3, [r7, #10]
 8008b02:	09db      	lsrs	r3, r3, #7
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	89bb      	ldrh	r3, [r7, #12]
 8008b08:	4053      	eors	r3, r2
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	f003 0306 	and.w	r3, r3, #6
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d11c      	bne.n	8008b4e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008b14:	897b      	ldrh	r3, [r7, #10]
 8008b16:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b1c:	1c5a      	adds	r2, r3, #1
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d13b      	bne.n	8008ba2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2208      	movs	r2, #8
 8008b36:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008b40:	89ba      	ldrh	r2, [r7, #12]
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	4619      	mov	r1, r3
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff fe85 	bl	8008856 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008b4c:	e029      	b.n	8008ba2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008b4e:	893b      	ldrh	r3, [r7, #8]
 8008b50:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008b52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 ff10 	bl	800997c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008b64:	89ba      	ldrh	r2, [r7, #12]
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7ff fe73 	bl	8008856 <HAL_I2C_AddrCallback>
}
 8008b70:	e017      	b.n	8008ba2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008b72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 ff00 	bl	800997c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008b84:	89ba      	ldrh	r2, [r7, #12]
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff fe63 	bl	8008856 <HAL_I2C_AddrCallback>
}
 8008b90:	e007      	b.n	8008ba2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2208      	movs	r2, #8
 8008b98:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008ba2:	bf00      	nop
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	0b9b      	lsrs	r3, r3, #14
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d008      	beq.n	8008be0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008bdc:	601a      	str	r2, [r3, #0]
 8008bde:	e00d      	b.n	8008bfc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	0bdb      	lsrs	r3, r3, #15
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d007      	beq.n	8008bfc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008bfa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b29      	cmp	r3, #41	@ 0x29
 8008c06:	d112      	bne.n	8008c2e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2228      	movs	r2, #40	@ 0x28
 8008c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2221      	movs	r2, #33	@ 0x21
 8008c14:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008c16:	2101      	movs	r1, #1
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 feaf 	bl	800997c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff fe01 	bl	800882e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c2c:	e017      	b.n	8008c5e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c38:	d111      	bne.n	8008c5e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2228      	movs	r2, #40	@ 0x28
 8008c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2222      	movs	r2, #34	@ 0x22
 8008c46:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008c48:	2102      	movs	r1, #2
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fe96 	bl	800997c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff fdf2 	bl	8008842 <HAL_I2C_SlaveRxCpltCallback>
}
 8008c5e:	bf00      	nop
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c82:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c8a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2220      	movs	r2, #32
 8008c92:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008c94:	7afb      	ldrb	r3, [r7, #11]
 8008c96:	2b21      	cmp	r3, #33	@ 0x21
 8008c98:	d002      	beq.n	8008ca0 <I2C_ITSlaveCplt+0x38>
 8008c9a:	7afb      	ldrb	r3, [r7, #11]
 8008c9c:	2b29      	cmp	r3, #41	@ 0x29
 8008c9e:	d108      	bne.n	8008cb2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008ca0:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fe69 	bl	800997c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2221      	movs	r2, #33	@ 0x21
 8008cae:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cb0:	e019      	b.n	8008ce6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008cb2:	7afb      	ldrb	r3, [r7, #11]
 8008cb4:	2b22      	cmp	r3, #34	@ 0x22
 8008cb6:	d002      	beq.n	8008cbe <I2C_ITSlaveCplt+0x56>
 8008cb8:	7afb      	ldrb	r3, [r7, #11]
 8008cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cbc:	d108      	bne.n	8008cd0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008cbe:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fe5a 	bl	800997c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2222      	movs	r2, #34	@ 0x22
 8008ccc:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cce:	e00a      	b.n	8008ce6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008cd0:	7afb      	ldrb	r3, [r7, #11]
 8008cd2:	2b28      	cmp	r3, #40	@ 0x28
 8008cd4:	d107      	bne.n	8008ce6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008cd6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fe4e 	bl	800997c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008cf4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	6859      	ldr	r1, [r3, #4]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	4b80      	ldr	r3, [pc, #512]	@ (8008f04 <I2C_ITSlaveCplt+0x29c>)
 8008d02:	400b      	ands	r3, r1
 8008d04:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fb75 	bl	80093f6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	0b9b      	lsrs	r3, r3, #14
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d07a      	beq.n	8008e0e <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008d26:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 8112 	beq.w	8008f56 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a73      	ldr	r2, [pc, #460]	@ (8008f08 <I2C_ITSlaveCplt+0x2a0>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d059      	beq.n	8008df2 <I2C_ITSlaveCplt+0x18a>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a71      	ldr	r2, [pc, #452]	@ (8008f0c <I2C_ITSlaveCplt+0x2a4>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d053      	beq.n	8008df2 <I2C_ITSlaveCplt+0x18a>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a6f      	ldr	r2, [pc, #444]	@ (8008f10 <I2C_ITSlaveCplt+0x2a8>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d04d      	beq.n	8008df2 <I2C_ITSlaveCplt+0x18a>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a6d      	ldr	r2, [pc, #436]	@ (8008f14 <I2C_ITSlaveCplt+0x2ac>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d047      	beq.n	8008df2 <I2C_ITSlaveCplt+0x18a>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a6b      	ldr	r2, [pc, #428]	@ (8008f18 <I2C_ITSlaveCplt+0x2b0>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d041      	beq.n	8008df2 <I2C_ITSlaveCplt+0x18a>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a69      	ldr	r2, [pc, #420]	@ (8008f1c <I2C_ITSlaveCplt+0x2b4>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d03b      	beq.n	8008df2 <I2C_ITSlaveCplt+0x18a>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a67      	ldr	r2, [pc, #412]	@ (8008f20 <I2C_ITSlaveCplt+0x2b8>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d035      	beq.n	8008df2 <I2C_ITSlaveCplt+0x18a>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a65      	ldr	r2, [pc, #404]	@ (8008f24 <I2C_ITSlaveCplt+0x2bc>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d02f      	beq.n	8008df2 <I2C_ITSlaveCplt+0x18a>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a63      	ldr	r2, [pc, #396]	@ (8008f28 <I2C_ITSlaveCplt+0x2c0>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d029      	beq.n	8008df2 <I2C_ITSlaveCplt+0x18a>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a61      	ldr	r2, [pc, #388]	@ (8008f2c <I2C_ITSlaveCplt+0x2c4>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d023      	beq.n	8008df2 <I2C_ITSlaveCplt+0x18a>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a5f      	ldr	r2, [pc, #380]	@ (8008f30 <I2C_ITSlaveCplt+0x2c8>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d01d      	beq.n	8008df2 <I2C_ITSlaveCplt+0x18a>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8008f34 <I2C_ITSlaveCplt+0x2cc>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d017      	beq.n	8008df2 <I2C_ITSlaveCplt+0x18a>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a5b      	ldr	r2, [pc, #364]	@ (8008f38 <I2C_ITSlaveCplt+0x2d0>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d011      	beq.n	8008df2 <I2C_ITSlaveCplt+0x18a>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a59      	ldr	r2, [pc, #356]	@ (8008f3c <I2C_ITSlaveCplt+0x2d4>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d00b      	beq.n	8008df2 <I2C_ITSlaveCplt+0x18a>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a57      	ldr	r2, [pc, #348]	@ (8008f40 <I2C_ITSlaveCplt+0x2d8>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d005      	beq.n	8008df2 <I2C_ITSlaveCplt+0x18a>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a55      	ldr	r2, [pc, #340]	@ (8008f44 <I2C_ITSlaveCplt+0x2dc>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d105      	bne.n	8008dfe <I2C_ITSlaveCplt+0x196>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	e004      	b.n	8008e08 <I2C_ITSlaveCplt+0x1a0>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8008e0c:	e0a3      	b.n	8008f56 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	0bdb      	lsrs	r3, r3, #15
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 809d 	beq.w	8008f56 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008e2a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 8090 	beq.w	8008f56 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a32      	ldr	r2, [pc, #200]	@ (8008f08 <I2C_ITSlaveCplt+0x2a0>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d059      	beq.n	8008ef6 <I2C_ITSlaveCplt+0x28e>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a30      	ldr	r2, [pc, #192]	@ (8008f0c <I2C_ITSlaveCplt+0x2a4>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d053      	beq.n	8008ef6 <I2C_ITSlaveCplt+0x28e>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a2e      	ldr	r2, [pc, #184]	@ (8008f10 <I2C_ITSlaveCplt+0x2a8>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d04d      	beq.n	8008ef6 <I2C_ITSlaveCplt+0x28e>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a2c      	ldr	r2, [pc, #176]	@ (8008f14 <I2C_ITSlaveCplt+0x2ac>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d047      	beq.n	8008ef6 <I2C_ITSlaveCplt+0x28e>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8008f18 <I2C_ITSlaveCplt+0x2b0>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d041      	beq.n	8008ef6 <I2C_ITSlaveCplt+0x28e>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a28      	ldr	r2, [pc, #160]	@ (8008f1c <I2C_ITSlaveCplt+0x2b4>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d03b      	beq.n	8008ef6 <I2C_ITSlaveCplt+0x28e>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a26      	ldr	r2, [pc, #152]	@ (8008f20 <I2C_ITSlaveCplt+0x2b8>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d035      	beq.n	8008ef6 <I2C_ITSlaveCplt+0x28e>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a24      	ldr	r2, [pc, #144]	@ (8008f24 <I2C_ITSlaveCplt+0x2bc>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d02f      	beq.n	8008ef6 <I2C_ITSlaveCplt+0x28e>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a22      	ldr	r2, [pc, #136]	@ (8008f28 <I2C_ITSlaveCplt+0x2c0>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d029      	beq.n	8008ef6 <I2C_ITSlaveCplt+0x28e>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a20      	ldr	r2, [pc, #128]	@ (8008f2c <I2C_ITSlaveCplt+0x2c4>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d023      	beq.n	8008ef6 <I2C_ITSlaveCplt+0x28e>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8008f30 <I2C_ITSlaveCplt+0x2c8>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d01d      	beq.n	8008ef6 <I2C_ITSlaveCplt+0x28e>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8008f34 <I2C_ITSlaveCplt+0x2cc>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d017      	beq.n	8008ef6 <I2C_ITSlaveCplt+0x28e>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8008f38 <I2C_ITSlaveCplt+0x2d0>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d011      	beq.n	8008ef6 <I2C_ITSlaveCplt+0x28e>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a18      	ldr	r2, [pc, #96]	@ (8008f3c <I2C_ITSlaveCplt+0x2d4>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d00b      	beq.n	8008ef6 <I2C_ITSlaveCplt+0x28e>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a16      	ldr	r2, [pc, #88]	@ (8008f40 <I2C_ITSlaveCplt+0x2d8>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d005      	beq.n	8008ef6 <I2C_ITSlaveCplt+0x28e>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a14      	ldr	r2, [pc, #80]	@ (8008f44 <I2C_ITSlaveCplt+0x2dc>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d128      	bne.n	8008f48 <I2C_ITSlaveCplt+0x2e0>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	e027      	b.n	8008f52 <I2C_ITSlaveCplt+0x2ea>
 8008f02:	bf00      	nop
 8008f04:	fe00e800 	.word	0xfe00e800
 8008f08:	40020010 	.word	0x40020010
 8008f0c:	40020028 	.word	0x40020028
 8008f10:	40020040 	.word	0x40020040
 8008f14:	40020058 	.word	0x40020058
 8008f18:	40020070 	.word	0x40020070
 8008f1c:	40020088 	.word	0x40020088
 8008f20:	400200a0 	.word	0x400200a0
 8008f24:	400200b8 	.word	0x400200b8
 8008f28:	40020410 	.word	0x40020410
 8008f2c:	40020428 	.word	0x40020428
 8008f30:	40020440 	.word	0x40020440
 8008f34:	40020458 	.word	0x40020458
 8008f38:	40020470 	.word	0x40020470
 8008f3c:	40020488 	.word	0x40020488
 8008f40:	400204a0 	.word	0x400204a0
 8008f44:	400204b8 	.word	0x400204b8
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	089b      	lsrs	r3, r3, #2
 8008f5a:	f003 0301 	and.w	r3, r3, #1
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d020      	beq.n	8008fa4 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f023 0304 	bic.w	r3, r3, #4
 8008f68:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f74:	b2d2      	uxtb	r2, r2
 8008f76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00c      	beq.n	8008fa4 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d005      	beq.n	8008fba <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fb2:	f043 0204 	orr.w	r2, r3, #4
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	091b      	lsrs	r3, r3, #4
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d04a      	beq.n	800905c <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	091b      	lsrs	r3, r3, #4
 8008fca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d044      	beq.n	800905c <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d128      	bne.n	800902e <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b28      	cmp	r3, #40	@ 0x28
 8008fe6:	d108      	bne.n	8008ffa <I2C_ITSlaveCplt+0x392>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fee:	d104      	bne.n	8008ffa <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008ff0:	6979      	ldr	r1, [r7, #20]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f892 	bl	800911c <I2C_ITListenCplt>
 8008ff8:	e030      	b.n	800905c <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b29      	cmp	r3, #41	@ 0x29
 8009004:	d10e      	bne.n	8009024 <I2C_ITSlaveCplt+0x3bc>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800900c:	d00a      	beq.n	8009024 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2210      	movs	r2, #16
 8009014:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f9ed 	bl	80093f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7ff fdc4 	bl	8008baa <I2C_ITSlaveSeqCplt>
 8009022:	e01b      	b.n	800905c <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2210      	movs	r2, #16
 800902a:	61da      	str	r2, [r3, #28]
 800902c:	e016      	b.n	800905c <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2210      	movs	r2, #16
 8009034:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800903a:	f043 0204 	orr.w	r2, r3, #4
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d003      	beq.n	8009050 <I2C_ITSlaveCplt+0x3e8>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800904e:	d105      	bne.n	800905c <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f8b6 	bl	80091c8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800906e:	2b00      	cmp	r3, #0
 8009070:	d010      	beq.n	8009094 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f8a5 	bl	80091c8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b28      	cmp	r3, #40	@ 0x28
 8009088:	d141      	bne.n	800910e <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800908a:	6979      	ldr	r1, [r7, #20]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f845 	bl	800911c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009092:	e03c      	b.n	800910e <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009098:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800909c:	d014      	beq.n	80090c8 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff fd83 	bl	8008baa <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009118 <I2C_ITSlaveCplt+0x4b0>)
 80090a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2220      	movs	r2, #32
 80090ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7ff fbd6 	bl	8008872 <HAL_I2C_ListenCpltCallback>
}
 80090c6:	e022      	b.n	800910e <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	2b22      	cmp	r3, #34	@ 0x22
 80090d2:	d10e      	bne.n	80090f2 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2220      	movs	r2, #32
 80090d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7ff fba9 	bl	8008842 <HAL_I2C_SlaveRxCpltCallback>
}
 80090f0:	e00d      	b.n	800910e <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2220      	movs	r2, #32
 80090f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7ff fb90 	bl	800882e <HAL_I2C_SlaveTxCpltCallback>
}
 800910e:	bf00      	nop
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	ffff0000 	.word	0xffff0000

0800911c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a26      	ldr	r2, [pc, #152]	@ (80091c4 <I2C_ITListenCplt+0xa8>)
 800912a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2220      	movs	r2, #32
 8009136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	089b      	lsrs	r3, r3, #2
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b00      	cmp	r3, #0
 8009152:	d022      	beq.n	800919a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800915e:	b2d2      	uxtb	r2, r2
 8009160:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009170:	2b00      	cmp	r3, #0
 8009172:	d012      	beq.n	800919a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009178:	3b01      	subs	r3, #1
 800917a:	b29a      	uxth	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009184:	b29b      	uxth	r3, r3
 8009186:	3b01      	subs	r3, #1
 8009188:	b29a      	uxth	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009192:	f043 0204 	orr.w	r2, r3, #4
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800919a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fbec 	bl	800997c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2210      	movs	r2, #16
 80091aa:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7ff fb5c 	bl	8008872 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80091ba:	bf00      	nop
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	ffff0000 	.word	0xffff0000

080091c8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091d8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a6d      	ldr	r2, [pc, #436]	@ (800939c <I2C_ITError+0x1d4>)
 80091e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	431a      	orrs	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	2b28      	cmp	r3, #40	@ 0x28
 80091fe:	d005      	beq.n	800920c <I2C_ITError+0x44>
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	2b29      	cmp	r3, #41	@ 0x29
 8009204:	d002      	beq.n	800920c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009206:	7bfb      	ldrb	r3, [r7, #15]
 8009208:	2b2a      	cmp	r3, #42	@ 0x2a
 800920a:	d10b      	bne.n	8009224 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800920c:	2103      	movs	r1, #3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fbb4 	bl	800997c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2228      	movs	r2, #40	@ 0x28
 8009218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a60      	ldr	r2, [pc, #384]	@ (80093a0 <I2C_ITError+0x1d8>)
 8009220:	635a      	str	r2, [r3, #52]	@ 0x34
 8009222:	e030      	b.n	8009286 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009224:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fba7 	bl	800997c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f8e1 	bl	80093f6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800923a:	b2db      	uxtb	r3, r3
 800923c:	2b60      	cmp	r3, #96	@ 0x60
 800923e:	d01f      	beq.n	8009280 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2220      	movs	r2, #32
 8009244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	f003 0320 	and.w	r3, r3, #32
 8009252:	2b20      	cmp	r3, #32
 8009254:	d114      	bne.n	8009280 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	f003 0310 	and.w	r3, r3, #16
 8009260:	2b10      	cmp	r3, #16
 8009262:	d109      	bne.n	8009278 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2210      	movs	r2, #16
 800926a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009270:	f043 0204 	orr.w	r2, r3, #4
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2220      	movs	r2, #32
 800927e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800928a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009290:	2b00      	cmp	r3, #0
 8009292:	d039      	beq.n	8009308 <I2C_ITError+0x140>
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2b11      	cmp	r3, #17
 8009298:	d002      	beq.n	80092a0 <I2C_ITError+0xd8>
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	2b21      	cmp	r3, #33	@ 0x21
 800929e:	d133      	bne.n	8009308 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092ae:	d107      	bne.n	80092c0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80092be:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fe f9bb 	bl	8007640 <HAL_DMA_GetState>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d017      	beq.n	8009300 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d4:	4a33      	ldr	r2, [pc, #204]	@ (80093a4 <I2C_ITError+0x1dc>)
 80092d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fd f83b 	bl	8006360 <HAL_DMA_Abort_IT>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d04d      	beq.n	800938c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80092fa:	4610      	mov	r0, r2
 80092fc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80092fe:	e045      	b.n	800938c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f851 	bl	80093a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009306:	e041      	b.n	800938c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800930c:	2b00      	cmp	r3, #0
 800930e:	d039      	beq.n	8009384 <I2C_ITError+0x1bc>
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2b12      	cmp	r3, #18
 8009314:	d002      	beq.n	800931c <I2C_ITError+0x154>
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	2b22      	cmp	r3, #34	@ 0x22
 800931a:	d133      	bne.n	8009384 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009326:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800932a:	d107      	bne.n	800933c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800933a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe f97d 	bl	8007640 <HAL_DMA_GetState>
 8009346:	4603      	mov	r3, r0
 8009348:	2b01      	cmp	r3, #1
 800934a:	d017      	beq.n	800937c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009350:	4a14      	ldr	r2, [pc, #80]	@ (80093a4 <I2C_ITError+0x1dc>)
 8009352:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009360:	4618      	mov	r0, r3
 8009362:	f7fc fffd 	bl	8006360 <HAL_DMA_Abort_IT>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d011      	beq.n	8009390 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009376:	4610      	mov	r0, r2
 8009378:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800937a:	e009      	b.n	8009390 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f813 	bl	80093a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009382:	e005      	b.n	8009390 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f80f 	bl	80093a8 <I2C_TreatErrorCallback>
  }
}
 800938a:	e002      	b.n	8009392 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800938c:	bf00      	nop
 800938e:	e000      	b.n	8009392 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009390:	bf00      	nop
}
 8009392:	bf00      	nop
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	ffff0000 	.word	0xffff0000
 80093a0:	0800889b 	.word	0x0800889b
 80093a4:	0800943f 	.word	0x0800943f

080093a8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b60      	cmp	r3, #96	@ 0x60
 80093ba:	d10e      	bne.n	80093da <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2220      	movs	r2, #32
 80093c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7ff fa57 	bl	8008886 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80093d8:	e009      	b.n	80093ee <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7f9 fa8b 	bl	8002904 <HAL_I2C_ErrorCallback>
}
 80093ee:	bf00      	nop
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80093f6:	b480      	push	{r7}
 80093f8:	b083      	sub	sp, #12
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b02      	cmp	r3, #2
 800940a:	d103      	bne.n	8009414 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2200      	movs	r2, #0
 8009412:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b01      	cmp	r3, #1
 8009420:	d007      	beq.n	8009432 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	699a      	ldr	r2, [r3, #24]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f042 0201 	orr.w	r2, r2, #1
 8009430:	619a      	str	r2, [r3, #24]
  }
}
 8009432:	bf00      	nop
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b084      	sub	sp, #16
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800944a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009450:	2b00      	cmp	r3, #0
 8009452:	d003      	beq.n	800945c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009458:	2200      	movs	r2, #0
 800945a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d003      	beq.n	800946c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009468:	2200      	movs	r2, #0
 800946a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f7ff ff9b 	bl	80093a8 <I2C_TreatErrorCallback>
}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b084      	sub	sp, #16
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	603b      	str	r3, [r7, #0]
 8009486:	4613      	mov	r3, r2
 8009488:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800948a:	e03b      	b.n	8009504 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800948c:	69ba      	ldr	r2, [r7, #24]
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 f961 	bl	8009758 <I2C_IsErrorOccurred>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e041      	b.n	8009524 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094a6:	d02d      	beq.n	8009504 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094a8:	f7fb ffe0 	bl	800546c <HAL_GetTick>
 80094ac:	4602      	mov	r2, r0
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d302      	bcc.n	80094be <I2C_WaitOnFlagUntilTimeout+0x44>
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d122      	bne.n	8009504 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	699a      	ldr	r2, [r3, #24]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	4013      	ands	r3, r2
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	bf0c      	ite	eq
 80094ce:	2301      	moveq	r3, #1
 80094d0:	2300      	movne	r3, #0
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	461a      	mov	r2, r3
 80094d6:	79fb      	ldrb	r3, [r7, #7]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d113      	bne.n	8009504 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094e0:	f043 0220 	orr.w	r2, r3, #32
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2220      	movs	r2, #32
 80094ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e00f      	b.n	8009524 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	699a      	ldr	r2, [r3, #24]
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	4013      	ands	r3, r2
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	429a      	cmp	r2, r3
 8009512:	bf0c      	ite	eq
 8009514:	2301      	moveq	r3, #1
 8009516:	2300      	movne	r3, #0
 8009518:	b2db      	uxtb	r3, r3
 800951a:	461a      	mov	r2, r3
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	429a      	cmp	r2, r3
 8009520:	d0b4      	beq.n	800948c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009538:	e033      	b.n	80095a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	68b9      	ldr	r1, [r7, #8]
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f000 f90a 	bl	8009758 <I2C_IsErrorOccurred>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e031      	b.n	80095b2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009554:	d025      	beq.n	80095a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009556:	f7fb ff89 	bl	800546c <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	429a      	cmp	r2, r3
 8009564:	d302      	bcc.n	800956c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d11a      	bne.n	80095a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	f003 0302 	and.w	r3, r3, #2
 8009576:	2b02      	cmp	r3, #2
 8009578:	d013      	beq.n	80095a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800957e:	f043 0220 	orr.w	r2, r3, #32
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2220      	movs	r2, #32
 800958a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e007      	b.n	80095b2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	f003 0302 	and.w	r3, r3, #2
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d1c4      	bne.n	800953a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	60f8      	str	r0, [r7, #12]
 80095c2:	60b9      	str	r1, [r7, #8]
 80095c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095c6:	e02f      	b.n	8009628 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	68b9      	ldr	r1, [r7, #8]
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 f8c3 	bl	8009758 <I2C_IsErrorOccurred>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e02d      	b.n	8009638 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095dc:	f7fb ff46 	bl	800546c <HAL_GetTick>
 80095e0:	4602      	mov	r2, r0
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d302      	bcc.n	80095f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d11a      	bne.n	8009628 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	f003 0320 	and.w	r3, r3, #32
 80095fc:	2b20      	cmp	r3, #32
 80095fe:	d013      	beq.n	8009628 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009604:	f043 0220 	orr.w	r2, r3, #32
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2220      	movs	r2, #32
 8009610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e007      	b.n	8009638 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	f003 0320 	and.w	r3, r3, #32
 8009632:	2b20      	cmp	r3, #32
 8009634:	d1c8      	bne.n	80095c8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800964c:	2300      	movs	r3, #0
 800964e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009650:	e071      	b.n	8009736 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	68b9      	ldr	r1, [r7, #8]
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 f87e 	bl	8009758 <I2C_IsErrorOccurred>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b20      	cmp	r3, #32
 8009672:	d13b      	bne.n	80096ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009674:	7dfb      	ldrb	r3, [r7, #23]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d138      	bne.n	80096ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b04      	cmp	r3, #4
 8009686:	d105      	bne.n	8009694 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	f003 0310 	and.w	r3, r3, #16
 800969e:	2b10      	cmp	r3, #16
 80096a0:	d121      	bne.n	80096e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2210      	movs	r2, #16
 80096a8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2204      	movs	r2, #4
 80096ae:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2220      	movs	r2, #32
 80096b6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6859      	ldr	r1, [r3, #4]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b24      	ldr	r3, [pc, #144]	@ (8009754 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80096c4:	400b      	ands	r3, r1
 80096c6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2220      	movs	r2, #32
 80096cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	75fb      	strb	r3, [r7, #23]
 80096e4:	e002      	b.n	80096ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80096ec:	f7fb febe 	bl	800546c <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d302      	bcc.n	8009702 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d119      	bne.n	8009736 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009702:	7dfb      	ldrb	r3, [r7, #23]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d116      	bne.n	8009736 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	f003 0304 	and.w	r3, r3, #4
 8009712:	2b04      	cmp	r3, #4
 8009714:	d00f      	beq.n	8009736 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800971a:	f043 0220 	orr.w	r2, r3, #32
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2220      	movs	r2, #32
 8009726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	f003 0304 	and.w	r3, r3, #4
 8009740:	2b04      	cmp	r3, #4
 8009742:	d002      	beq.n	800974a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009744:	7dfb      	ldrb	r3, [r7, #23]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d083      	beq.n	8009652 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800974a:	7dfb      	ldrb	r3, [r7, #23]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3718      	adds	r7, #24
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	fe00e800 	.word	0xfe00e800

08009758 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b08a      	sub	sp, #40	@ 0x28
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	f003 0310 	and.w	r3, r3, #16
 8009780:	2b00      	cmp	r3, #0
 8009782:	d068      	beq.n	8009856 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2210      	movs	r2, #16
 800978a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800978c:	e049      	b.n	8009822 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009794:	d045      	beq.n	8009822 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009796:	f7fb fe69 	bl	800546c <HAL_GetTick>
 800979a:	4602      	mov	r2, r0
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d302      	bcc.n	80097ac <I2C_IsErrorOccurred+0x54>
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d13a      	bne.n	8009822 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80097b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097ce:	d121      	bne.n	8009814 <I2C_IsErrorOccurred+0xbc>
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097d6:	d01d      	beq.n	8009814 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80097d8:	7cfb      	ldrb	r3, [r7, #19]
 80097da:	2b20      	cmp	r3, #32
 80097dc:	d01a      	beq.n	8009814 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80097ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80097ee:	f7fb fe3d 	bl	800546c <HAL_GetTick>
 80097f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097f4:	e00e      	b.n	8009814 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80097f6:	f7fb fe39 	bl	800546c <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	2b19      	cmp	r3, #25
 8009802:	d907      	bls.n	8009814 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	f043 0320 	orr.w	r3, r3, #32
 800980a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009812:	e006      	b.n	8009822 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b20      	cmp	r3, #32
 8009820:	d1e9      	bne.n	80097f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	f003 0320 	and.w	r3, r3, #32
 800982c:	2b20      	cmp	r3, #32
 800982e:	d003      	beq.n	8009838 <I2C_IsErrorOccurred+0xe0>
 8009830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009834:	2b00      	cmp	r3, #0
 8009836:	d0aa      	beq.n	800978e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800983c:	2b00      	cmp	r3, #0
 800983e:	d103      	bne.n	8009848 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2220      	movs	r2, #32
 8009846:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009848:	6a3b      	ldr	r3, [r7, #32]
 800984a:	f043 0304 	orr.w	r3, r3, #4
 800984e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	699b      	ldr	r3, [r3, #24]
 800985c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00b      	beq.n	8009880 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009868:	6a3b      	ldr	r3, [r7, #32]
 800986a:	f043 0301 	orr.w	r3, r3, #1
 800986e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009878:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00b      	beq.n	80098a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	f043 0308 	orr.w	r3, r3, #8
 8009890:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800989a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00b      	beq.n	80098c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	f043 0302 	orr.w	r3, r3, #2
 80098b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80098c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d01c      	beq.n	8009906 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f7ff fd92 	bl	80093f6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6859      	ldr	r1, [r3, #4]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	4b0d      	ldr	r3, [pc, #52]	@ (8009914 <I2C_IsErrorOccurred+0x1bc>)
 80098de:	400b      	ands	r3, r1
 80098e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098e6:	6a3b      	ldr	r3, [r7, #32]
 80098e8:	431a      	orrs	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2220      	movs	r2, #32
 80098f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009906:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800990a:	4618      	mov	r0, r3
 800990c:	3728      	adds	r7, #40	@ 0x28
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	fe00e800 	.word	0xfe00e800

08009918 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009918:	b480      	push	{r7}
 800991a:	b087      	sub	sp, #28
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	607b      	str	r3, [r7, #4]
 8009922:	460b      	mov	r3, r1
 8009924:	817b      	strh	r3, [r7, #10]
 8009926:	4613      	mov	r3, r2
 8009928:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800992a:	897b      	ldrh	r3, [r7, #10]
 800992c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009930:	7a7b      	ldrb	r3, [r7, #9]
 8009932:	041b      	lsls	r3, r3, #16
 8009934:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009938:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	4313      	orrs	r3, r2
 8009942:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009946:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	0d5b      	lsrs	r3, r3, #21
 8009952:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009956:	4b08      	ldr	r3, [pc, #32]	@ (8009978 <I2C_TransferConfig+0x60>)
 8009958:	430b      	orrs	r3, r1
 800995a:	43db      	mvns	r3, r3
 800995c:	ea02 0103 	and.w	r1, r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	430a      	orrs	r2, r1
 8009968:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800996a:	bf00      	nop
 800996c:	371c      	adds	r7, #28
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	03ff63ff 	.word	0x03ff63ff

0800997c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800998c:	887b      	ldrh	r3, [r7, #2]
 800998e:	f003 0301 	and.w	r3, r3, #1
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00f      	beq.n	80099b6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800999c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80099aa:	2b28      	cmp	r3, #40	@ 0x28
 80099ac:	d003      	beq.n	80099b6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80099b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80099b6:	887b      	ldrh	r3, [r7, #2]
 80099b8:	f003 0302 	and.w	r3, r3, #2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00f      	beq.n	80099e0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80099c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80099d4:	2b28      	cmp	r3, #40	@ 0x28
 80099d6:	d003      	beq.n	80099e0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80099de:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80099e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	da03      	bge.n	80099f0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80099ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80099f0:	887b      	ldrh	r3, [r7, #2]
 80099f2:	2b10      	cmp	r3, #16
 80099f4:	d103      	bne.n	80099fe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80099fc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80099fe:	887b      	ldrh	r3, [r7, #2]
 8009a00:	2b20      	cmp	r3, #32
 8009a02:	d103      	bne.n	8009a0c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f043 0320 	orr.w	r3, r3, #32
 8009a0a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009a0c:	887b      	ldrh	r3, [r7, #2]
 8009a0e:	2b40      	cmp	r3, #64	@ 0x40
 8009a10:	d103      	bne.n	8009a1a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a18:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	6819      	ldr	r1, [r3, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	43da      	mvns	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	400a      	ands	r2, r1
 8009a2a:	601a      	str	r2, [r3, #0]
}
 8009a2c:	bf00      	nop
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	2b20      	cmp	r3, #32
 8009a4c:	d138      	bne.n	8009ac0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d101      	bne.n	8009a5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009a58:	2302      	movs	r3, #2
 8009a5a:	e032      	b.n	8009ac2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2224      	movs	r2, #36	@ 0x24
 8009a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f022 0201 	bic.w	r2, r2, #1
 8009a7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009a8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6819      	ldr	r1, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	430a      	orrs	r2, r1
 8009a9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f042 0201 	orr.w	r2, r2, #1
 8009aaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2220      	movs	r2, #32
 8009ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	e000      	b.n	8009ac2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ac0:	2302      	movs	r3, #2
  }
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b085      	sub	sp, #20
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	2b20      	cmp	r3, #32
 8009ae2:	d139      	bne.n	8009b58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d101      	bne.n	8009af2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009aee:	2302      	movs	r3, #2
 8009af0:	e033      	b.n	8009b5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2224      	movs	r2, #36	@ 0x24
 8009afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f022 0201 	bic.w	r2, r2, #1
 8009b10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009b20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	021b      	lsls	r3, r3, #8
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f042 0201 	orr.w	r2, r2, #1
 8009b42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2220      	movs	r2, #32
 8009b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	e000      	b.n	8009b5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009b58:	2302      	movs	r3, #2
  }
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
	...

08009b68 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af02      	add	r7, sp, #8
 8009b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8009b74:	f7fb fc7a 	bl	800546c <HAL_GetTick>
 8009b78:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d102      	bne.n	8009b86 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	73fb      	strb	r3, [r7, #15]
 8009b84:	e0a5      	b.n	8009cd2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f040 809e 	bne.w	8009cd2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7f9 fb64 	bl	8003264 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8009b9c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fa40 	bl	800a026 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	689a      	ldr	r2, [r3, #8]
 8009bac:	4b4b      	ldr	r3, [pc, #300]	@ (8009cdc <HAL_OSPI_Init+0x174>)
 8009bae:	4013      	ands	r3, r2
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	68d1      	ldr	r1, [r2, #12]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	6912      	ldr	r2, [r2, #16]
 8009bb8:	3a01      	subs	r2, #1
 8009bba:	0412      	lsls	r2, r2, #16
 8009bbc:	4311      	orrs	r1, r2
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	6952      	ldr	r2, [r2, #20]
 8009bc2:	3a01      	subs	r2, #1
 8009bc4:	0212      	lsls	r2, r2, #8
 8009bc6:	4311      	orrs	r1, r2
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009bcc:	4311      	orrs	r1, r2
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	69d2      	ldr	r2, [r2, #28]
 8009bd2:	4311      	orrs	r1, r2
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	6812      	ldr	r2, [r2, #0]
 8009bd8:	430b      	orrs	r3, r1
 8009bda:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a1a      	ldr	r2, [r3, #32]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	430a      	orrs	r2, r1
 8009c02:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009c0c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	021a      	lsls	r2, r3, #8
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2200      	movs	r2, #0
 8009c32:	2120      	movs	r1, #32
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fef1 	bl	800aa1c <OSPI_WaitFlagStateUntilTimeout>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009c3e:	7bfb      	ldrb	r3, [r7, #15]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d146      	bne.n	8009cd2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c52:	1e5a      	subs	r2, r3, #1
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	430a      	orrs	r2, r1
 8009c5a:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	689a      	ldr	r2, [r3, #8]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009c7a:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c86:	431a      	orrs	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f042 0201 	orr.w	r2, r2, #1
 8009ca0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d107      	bne.n	8009cba <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	689a      	ldr	r2, [r3, #8]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f042 0202 	orr.w	r2, r2, #2
 8009cb8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009cc2:	d103      	bne.n	8009ccc <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	651a      	str	r2, [r3, #80]	@ 0x50
 8009cca:	e002      	b.n	8009cd2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	f8e0f8f4 	.word	0xf8e0f8f4

08009ce0 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b08a      	sub	sp, #40	@ 0x28
 8009ce4:	af02      	add	r7, sp, #8
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8009cec:	f7fb fbbe 	bl	800546c <HAL_GetTick>
 8009cf0:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf6:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cfc:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d104      	bne.n	8009d0e <HAL_OSPI_Command+0x2e>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d0c:	d115      	bne.n	8009d3a <HAL_OSPI_Command+0x5a>
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	2b14      	cmp	r3, #20
 8009d12:	d107      	bne.n	8009d24 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d00e      	beq.n	8009d3a <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2b03      	cmp	r3, #3
 8009d22:	d00a      	beq.n	8009d3a <HAL_OSPI_Command+0x5a>
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	2b24      	cmp	r3, #36	@ 0x24
 8009d28:	d15b      	bne.n	8009de2 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d003      	beq.n	8009d3a <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8009d36:	2b03      	cmp	r3, #3
 8009d38:	d153      	bne.n	8009de2 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	2200      	movs	r2, #0
 8009d42:	2120      	movs	r1, #32
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f000 fe69 	bl	800aa1c <OSPI_WaitFlagStateUntilTimeout>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8009d4e:	7ffb      	ldrb	r3, [r7, #31]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d14c      	bne.n	8009dee <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8009d5a:	68b9      	ldr	r1, [r7, #8]
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f000 fe95 	bl	800aa8c <OSPI_ConfigCmd>
 8009d62:	4603      	mov	r3, r0
 8009d64:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8009d66:	7ffb      	ldrb	r3, [r7, #31]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d140      	bne.n	8009dee <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10e      	bne.n	8009d92 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	2102      	movs	r1, #2
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 fe4c 	bl	800aa1c <OSPI_WaitFlagStateUntilTimeout>
 8009d84:	4603      	mov	r3, r0
 8009d86:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2202      	movs	r2, #2
 8009d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8009d90:	e02d      	b.n	8009dee <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d103      	bne.n	8009da2 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2204      	movs	r2, #4
 8009d9e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8009da0:	e025      	b.n	8009dee <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d10b      	bne.n	8009dc2 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dae:	2b24      	cmp	r3, #36	@ 0x24
 8009db0:	d103      	bne.n	8009dba <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2204      	movs	r2, #4
 8009db6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8009db8:	e019      	b.n	8009dee <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2214      	movs	r2, #20
 8009dbe:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8009dc0:	e015      	b.n	8009dee <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d111      	bne.n	8009dee <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dce:	2b14      	cmp	r3, #20
 8009dd0:	d103      	bne.n	8009dda <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2204      	movs	r2, #4
 8009dd6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8009dd8:	e009      	b.n	8009dee <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2224      	movs	r2, #36	@ 0x24
 8009dde:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8009de0:	e005      	b.n	8009dee <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2210      	movs	r2, #16
 8009dea:	655a      	str	r2, [r3, #84]	@ 0x54
 8009dec:	e000      	b.n	8009df0 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8009dee:	bf00      	nop
  }

  /* Return function status */
  return status;
 8009df0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3720      	adds	r7, #32
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b08a      	sub	sp, #40	@ 0x28
 8009dfe:	af02      	add	r7, sp, #8
 8009e00:	60f8      	str	r0, [r7, #12]
 8009e02:	60b9      	str	r1, [r7, #8]
 8009e04:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009e06:	f7fb fb31 	bl	800546c <HAL_GetTick>
 8009e0a:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	3350      	adds	r3, #80	@ 0x50
 8009e12:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d105      	bne.n	8009e26 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2208      	movs	r2, #8
 8009e22:	655a      	str	r2, [r3, #84]	@ 0x54
 8009e24:	e057      	b.n	8009ed6 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e2a:	2b04      	cmp	r3, #4
 8009e2c:	d14e      	bne.n	8009ecc <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e34:	1c5a      	adds	r2, r3, #1
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009e56:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	2104      	movs	r1, #4
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 fdda 	bl	800aa1c <OSPI_WaitFlagStateUntilTimeout>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8009e6c:	7ffb      	ldrb	r3, [r7, #31]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d113      	bne.n	8009e9a <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e76:	781a      	ldrb	r2, [r3, #0]
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e80:	1c5a      	adds	r2, r3, #1
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e8a:	1e5a      	subs	r2, r3, #1
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1df      	bne.n	8009e58 <HAL_OSPI_Transmit+0x5e>
 8009e98:	e000      	b.n	8009e9c <HAL_OSPI_Transmit+0xa2>
          break;
 8009e9a:	bf00      	nop

      if (status == HAL_OK)
 8009e9c:	7ffb      	ldrb	r3, [r7, #31]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d119      	bne.n	8009ed6 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	2102      	movs	r1, #2
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f000 fdb5 	bl	800aa1c <OSPI_WaitFlagStateUntilTimeout>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8009eb6:	7ffb      	ldrb	r3, [r7, #31]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10c      	bne.n	8009ed6 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2202      	movs	r2, #2
 8009ec2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	651a      	str	r2, [r3, #80]	@ 0x50
 8009eca:	e004      	b.n	8009ed6 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2210      	movs	r2, #16
 8009ed4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8009ed6:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3720      	adds	r7, #32
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08c      	sub	sp, #48	@ 0x30
 8009ee4:	af02      	add	r7, sp, #8
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009eec:	f7fb fabe 	bl	800546c <HAL_GetTick>
 8009ef0:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3350      	adds	r3, #80	@ 0x50
 8009ef8:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f00:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8009f0a:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d106      	bne.n	8009f20 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2208      	movs	r2, #8
 8009f1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8009f1e:	e07c      	b.n	800a01a <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d172      	bne.n	800a00e <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f2e:	1c5a      	adds	r2, r3, #1
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009f54:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f5e:	d104      	bne.n	8009f6a <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	69ba      	ldr	r2, [r7, #24]
 8009f66:	649a      	str	r2, [r3, #72]	@ 0x48
 8009f68:	e011      	b.n	8009f8e <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009f72:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d004      	beq.n	8009f84 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	69ba      	ldr	r2, [r7, #24]
 8009f80:	649a      	str	r2, [r3, #72]	@ 0x48
 8009f82:	e004      	b.n	8009f8e <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	6a3b      	ldr	r3, [r7, #32]
 8009f94:	2201      	movs	r2, #1
 8009f96:	2106      	movs	r1, #6
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f000 fd3f 	bl	800aa1c <OSPI_WaitFlagStateUntilTimeout>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 8009fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d114      	bne.n	8009fd6 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fb0:	69fa      	ldr	r2, [r7, #28]
 8009fb2:	7812      	ldrb	r2, [r2, #0]
 8009fb4:	b2d2      	uxtb	r2, r2
 8009fb6:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fbc:	1c5a      	adds	r2, r3, #1
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fc6:	1e5a      	subs	r2, r3, #1
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1dc      	bne.n	8009f8e <HAL_OSPI_Receive+0xae>
 8009fd4:	e000      	b.n	8009fd8 <HAL_OSPI_Receive+0xf8>
          break;
 8009fd6:	bf00      	nop

      if (status == HAL_OK)
 8009fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d11c      	bne.n	800a01a <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	6a3b      	ldr	r3, [r7, #32]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	2102      	movs	r1, #2
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 fd16 	bl	800aa1c <OSPI_WaitFlagStateUntilTimeout>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 8009ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10d      	bne.n	800a01a <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2202      	movs	r2, #2
 800a004:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2202      	movs	r2, #2
 800a00a:	651a      	str	r2, [r3, #80]	@ 0x50
 800a00c:	e005      	b.n	800a01a <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2210      	movs	r2, #16
 800a018:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800a01a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3728      	adds	r7, #40	@ 0x28
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800a026:	b480      	push	{r7}
 800a028:	b083      	sub	sp, #12
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b094      	sub	sp, #80	@ 0x50
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800a056:	2300      	movs	r3, #0
 800a058:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a9d      	ldr	r2, [pc, #628]	@ (800a2d8 <HAL_OSPIM_Config+0x294>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d105      	bne.n	800a072 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 800a06a:	2301      	movs	r3, #1
 800a06c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800a070:	e004      	b.n	800a07c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800a072:	2301      	movs	r3, #1
 800a074:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 800a076:	2300      	movs	r3, #0
 800a078:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a07c:	2300      	movs	r3, #0
 800a07e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a082:	e01d      	b.n	800a0c0 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800a084:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a088:	3301      	adds	r3, #1
 800a08a:	b2d8      	uxtb	r0, r3
 800a08c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a090:	f107 0114 	add.w	r1, r7, #20
 800a094:	4613      	mov	r3, r2
 800a096:	005b      	lsls	r3, r3, #1
 800a098:	4413      	add	r3, r2
 800a09a:	00db      	lsls	r3, r3, #3
 800a09c:	440b      	add	r3, r1
 800a09e:	4619      	mov	r1, r3
 800a0a0:	f000 fe6e 	bl	800ad80 <OSPIM_GetConfig>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d005      	beq.n	800a0b6 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2208      	movs	r2, #8
 800a0b4:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a0b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a0c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d9dd      	bls.n	800a084 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800a0c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f040 8499 	bne.w	800aa04 <HAL_OSPIM_Config+0x9c0>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800a0d2:	4b81      	ldr	r3, [pc, #516]	@ (800a2d8 <HAL_OSPIM_Config+0x294>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f003 0301 	and.w	r3, r3, #1
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00b      	beq.n	800a0f6 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a0de:	4b7e      	ldr	r3, [pc, #504]	@ (800a2d8 <HAL_OSPIM_Config+0x294>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a7d      	ldr	r2, [pc, #500]	@ (800a2d8 <HAL_OSPIM_Config+0x294>)
 800a0e4:	f023 0301 	bic.w	r3, r3, #1
 800a0e8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800a0ea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a0ee:	f043 0301 	orr.w	r3, r3, #1
 800a0f2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800a0f6:	4b79      	ldr	r3, [pc, #484]	@ (800a2dc <HAL_OSPIM_Config+0x298>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0301 	and.w	r3, r3, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00b      	beq.n	800a11a <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a102:	4b76      	ldr	r3, [pc, #472]	@ (800a2dc <HAL_OSPIM_Config+0x298>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a75      	ldr	r2, [pc, #468]	@ (800a2dc <HAL_OSPIM_Config+0x298>)
 800a108:	f023 0301 	bic.w	r3, r3, #1
 800a10c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800a10e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a112:	f043 0302 	orr.w	r3, r3, #2
 800a116:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800a11a:	4971      	ldr	r1, [pc, #452]	@ (800a2e0 <HAL_OSPIM_Config+0x29c>)
 800a11c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a11e:	4613      	mov	r3, r2
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	4413      	add	r3, r2
 800a124:	00db      	lsls	r3, r3, #3
 800a126:	3350      	adds	r3, #80	@ 0x50
 800a128:	443b      	add	r3, r7
 800a12a:	3b34      	subs	r3, #52	@ 0x34
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3b01      	subs	r3, #1
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	440b      	add	r3, r1
 800a134:	6859      	ldr	r1, [r3, #4]
 800a136:	486a      	ldr	r0, [pc, #424]	@ (800a2e0 <HAL_OSPIM_Config+0x29c>)
 800a138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a13a:	4613      	mov	r3, r2
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	4413      	add	r3, r2
 800a140:	00db      	lsls	r3, r3, #3
 800a142:	3350      	adds	r3, #80	@ 0x50
 800a144:	443b      	add	r3, r7
 800a146:	3b34      	subs	r3, #52	@ 0x34
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3b01      	subs	r3, #1
 800a14c:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4403      	add	r3, r0
 800a154:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a156:	4b62      	ldr	r3, [pc, #392]	@ (800a2e0 <HAL_OSPIM_Config+0x29c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 0301 	and.w	r3, r3, #1
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f000 80c0 	beq.w	800a2e4 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a164:	4b5e      	ldr	r3, [pc, #376]	@ (800a2e0 <HAL_OSPIM_Config+0x29c>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a5d      	ldr	r2, [pc, #372]	@ (800a2e0 <HAL_OSPIM_Config+0x29c>)
 800a16a:	f023 0301 	bic.w	r3, r3, #1
 800a16e:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800a170:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a174:	2b01      	cmp	r3, #1
 800a176:	f040 8162 	bne.w	800a43e <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800a17a:	4959      	ldr	r1, [pc, #356]	@ (800a2e0 <HAL_OSPIM_Config+0x29c>)
 800a17c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a180:	4613      	mov	r3, r2
 800a182:	005b      	lsls	r3, r3, #1
 800a184:	4413      	add	r3, r2
 800a186:	00db      	lsls	r3, r3, #3
 800a188:	3350      	adds	r3, #80	@ 0x50
 800a18a:	443b      	add	r3, r7
 800a18c:	3b3c      	subs	r3, #60	@ 0x3c
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3b01      	subs	r3, #1
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	440b      	add	r3, r1
 800a196:	6859      	ldr	r1, [r3, #4]
 800a198:	4851      	ldr	r0, [pc, #324]	@ (800a2e0 <HAL_OSPIM_Config+0x29c>)
 800a19a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a19e:	4613      	mov	r3, r2
 800a1a0:	005b      	lsls	r3, r3, #1
 800a1a2:	4413      	add	r3, r2
 800a1a4:	00db      	lsls	r3, r3, #3
 800a1a6:	3350      	adds	r3, #80	@ 0x50
 800a1a8:	443b      	add	r3, r7
 800a1aa:	3b3c      	subs	r3, #60	@ 0x3c
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	f041 0202 	orr.w	r2, r1, #2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4403      	add	r3, r0
 800a1b8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a1ba:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a1be:	4613      	mov	r3, r2
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	4413      	add	r3, r2
 800a1c4:	00db      	lsls	r3, r3, #3
 800a1c6:	3350      	adds	r3, #80	@ 0x50
 800a1c8:	443b      	add	r3, r7
 800a1ca:	3b38      	subs	r3, #56	@ 0x38
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d01f      	beq.n	800a212 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800a1d2:	4943      	ldr	r1, [pc, #268]	@ (800a2e0 <HAL_OSPIM_Config+0x29c>)
 800a1d4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a1d8:	4613      	mov	r3, r2
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	4413      	add	r3, r2
 800a1de:	00db      	lsls	r3, r3, #3
 800a1e0:	3350      	adds	r3, #80	@ 0x50
 800a1e2:	443b      	add	r3, r7
 800a1e4:	3b38      	subs	r3, #56	@ 0x38
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	440b      	add	r3, r1
 800a1ee:	6859      	ldr	r1, [r3, #4]
 800a1f0:	483b      	ldr	r0, [pc, #236]	@ (800a2e0 <HAL_OSPIM_Config+0x29c>)
 800a1f2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	4413      	add	r3, r2
 800a1fc:	00db      	lsls	r3, r3, #3
 800a1fe:	3350      	adds	r3, #80	@ 0x50
 800a200:	443b      	add	r3, r7
 800a202:	3b38      	subs	r3, #56	@ 0x38
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3b01      	subs	r3, #1
 800a208:	f041 0220 	orr.w	r2, r1, #32
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4403      	add	r3, r0
 800a210:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a212:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a216:	4613      	mov	r3, r2
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	4413      	add	r3, r2
 800a21c:	00db      	lsls	r3, r3, #3
 800a21e:	3350      	adds	r3, #80	@ 0x50
 800a220:	443b      	add	r3, r7
 800a222:	3b30      	subs	r3, #48	@ 0x30
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d023      	beq.n	800a272 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800a22a:	492d      	ldr	r1, [pc, #180]	@ (800a2e0 <HAL_OSPIM_Config+0x29c>)
 800a22c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a230:	4613      	mov	r3, r2
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	4413      	add	r3, r2
 800a236:	00db      	lsls	r3, r3, #3
 800a238:	3350      	adds	r3, #80	@ 0x50
 800a23a:	443b      	add	r3, r7
 800a23c:	3b30      	subs	r3, #48	@ 0x30
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	3b01      	subs	r3, #1
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	440b      	add	r3, r1
 800a24a:	6859      	ldr	r1, [r3, #4]
 800a24c:	4824      	ldr	r0, [pc, #144]	@ (800a2e0 <HAL_OSPIM_Config+0x29c>)
 800a24e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a252:	4613      	mov	r3, r2
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	4413      	add	r3, r2
 800a258:	00db      	lsls	r3, r3, #3
 800a25a:	3350      	adds	r3, #80	@ 0x50
 800a25c:	443b      	add	r3, r7
 800a25e:	3b30      	subs	r3, #48	@ 0x30
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3b01      	subs	r3, #1
 800a264:	f003 0301 	and.w	r3, r3, #1
 800a268:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4403      	add	r3, r0
 800a270:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a272:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a276:	4613      	mov	r3, r2
 800a278:	005b      	lsls	r3, r3, #1
 800a27a:	4413      	add	r3, r2
 800a27c:	00db      	lsls	r3, r3, #3
 800a27e:	3350      	adds	r3, #80	@ 0x50
 800a280:	443b      	add	r3, r7
 800a282:	3b2c      	subs	r3, #44	@ 0x2c
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	f000 80d9 	beq.w	800a43e <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800a28c:	4914      	ldr	r1, [pc, #80]	@ (800a2e0 <HAL_OSPIM_Config+0x29c>)
 800a28e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a292:	4613      	mov	r3, r2
 800a294:	005b      	lsls	r3, r3, #1
 800a296:	4413      	add	r3, r2
 800a298:	00db      	lsls	r3, r3, #3
 800a29a:	3350      	adds	r3, #80	@ 0x50
 800a29c:	443b      	add	r3, r7
 800a29e:	3b2c      	subs	r3, #44	@ 0x2c
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	f003 0301 	and.w	r3, r3, #1
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	440b      	add	r3, r1
 800a2ac:	6859      	ldr	r1, [r3, #4]
 800a2ae:	480c      	ldr	r0, [pc, #48]	@ (800a2e0 <HAL_OSPIM_Config+0x29c>)
 800a2b0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	005b      	lsls	r3, r3, #1
 800a2b8:	4413      	add	r3, r2
 800a2ba:	00db      	lsls	r3, r3, #3
 800a2bc:	3350      	adds	r3, #80	@ 0x50
 800a2be:	443b      	add	r3, r7
 800a2c0:	3b2c      	subs	r3, #44	@ 0x2c
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4403      	add	r3, r0
 800a2d2:	605a      	str	r2, [r3, #4]
 800a2d4:	e0b3      	b.n	800a43e <HAL_OSPIM_Config+0x3fa>
 800a2d6:	bf00      	nop
 800a2d8:	52005000 	.word	0x52005000
 800a2dc:	5200a000 	.word	0x5200a000
 800a2e0:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800a2e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	005b      	lsls	r3, r3, #1
 800a2ea:	4413      	add	r3, r2
 800a2ec:	00db      	lsls	r3, r3, #3
 800a2ee:	3350      	adds	r3, #80	@ 0x50
 800a2f0:	443b      	add	r3, r7
 800a2f2:	3b3c      	subs	r3, #60	@ 0x3c
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f000 80a1 	beq.w	800a43e <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800a2fc:	4995      	ldr	r1, [pc, #596]	@ (800a554 <HAL_OSPIM_Config+0x510>)
 800a2fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a300:	4613      	mov	r3, r2
 800a302:	005b      	lsls	r3, r3, #1
 800a304:	4413      	add	r3, r2
 800a306:	00db      	lsls	r3, r3, #3
 800a308:	3350      	adds	r3, #80	@ 0x50
 800a30a:	443b      	add	r3, r7
 800a30c:	3b3c      	subs	r3, #60	@ 0x3c
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3b01      	subs	r3, #1
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	440b      	add	r3, r1
 800a316:	6859      	ldr	r1, [r3, #4]
 800a318:	488e      	ldr	r0, [pc, #568]	@ (800a554 <HAL_OSPIM_Config+0x510>)
 800a31a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a31c:	4613      	mov	r3, r2
 800a31e:	005b      	lsls	r3, r3, #1
 800a320:	4413      	add	r3, r2
 800a322:	00db      	lsls	r3, r3, #3
 800a324:	3350      	adds	r3, #80	@ 0x50
 800a326:	443b      	add	r3, r7
 800a328:	3b3c      	subs	r3, #60	@ 0x3c
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3b01      	subs	r3, #1
 800a32e:	f021 0201 	bic.w	r2, r1, #1
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4403      	add	r3, r0
 800a336:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800a338:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a33a:	4613      	mov	r3, r2
 800a33c:	005b      	lsls	r3, r3, #1
 800a33e:	4413      	add	r3, r2
 800a340:	00db      	lsls	r3, r3, #3
 800a342:	3350      	adds	r3, #80	@ 0x50
 800a344:	443b      	add	r3, r7
 800a346:	3b38      	subs	r3, #56	@ 0x38
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d01d      	beq.n	800a38a <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a34e:	4981      	ldr	r1, [pc, #516]	@ (800a554 <HAL_OSPIM_Config+0x510>)
 800a350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a352:	4613      	mov	r3, r2
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	4413      	add	r3, r2
 800a358:	00db      	lsls	r3, r3, #3
 800a35a:	3350      	adds	r3, #80	@ 0x50
 800a35c:	443b      	add	r3, r7
 800a35e:	3b38      	subs	r3, #56	@ 0x38
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	3b01      	subs	r3, #1
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	440b      	add	r3, r1
 800a368:	6859      	ldr	r1, [r3, #4]
 800a36a:	487a      	ldr	r0, [pc, #488]	@ (800a554 <HAL_OSPIM_Config+0x510>)
 800a36c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a36e:	4613      	mov	r3, r2
 800a370:	005b      	lsls	r3, r3, #1
 800a372:	4413      	add	r3, r2
 800a374:	00db      	lsls	r3, r3, #3
 800a376:	3350      	adds	r3, #80	@ 0x50
 800a378:	443b      	add	r3, r7
 800a37a:	3b38      	subs	r3, #56	@ 0x38
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	3b01      	subs	r3, #1
 800a380:	f021 0210 	bic.w	r2, r1, #16
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4403      	add	r3, r0
 800a388:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a38a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a38c:	4613      	mov	r3, r2
 800a38e:	005b      	lsls	r3, r3, #1
 800a390:	4413      	add	r3, r2
 800a392:	00db      	lsls	r3, r3, #3
 800a394:	3350      	adds	r3, #80	@ 0x50
 800a396:	443b      	add	r3, r7
 800a398:	3b30      	subs	r3, #48	@ 0x30
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d021      	beq.n	800a3e4 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800a3a0:	496c      	ldr	r1, [pc, #432]	@ (800a554 <HAL_OSPIM_Config+0x510>)
 800a3a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	005b      	lsls	r3, r3, #1
 800a3a8:	4413      	add	r3, r2
 800a3aa:	00db      	lsls	r3, r3, #3
 800a3ac:	3350      	adds	r3, #80	@ 0x50
 800a3ae:	443b      	add	r3, r7
 800a3b0:	3b30      	subs	r3, #48	@ 0x30
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	440b      	add	r3, r1
 800a3be:	6859      	ldr	r1, [r3, #4]
 800a3c0:	4864      	ldr	r0, [pc, #400]	@ (800a554 <HAL_OSPIM_Config+0x510>)
 800a3c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	005b      	lsls	r3, r3, #1
 800a3c8:	4413      	add	r3, r2
 800a3ca:	00db      	lsls	r3, r3, #3
 800a3cc:	3350      	adds	r3, #80	@ 0x50
 800a3ce:	443b      	add	r3, r7
 800a3d0:	3b30      	subs	r3, #48	@ 0x30
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4403      	add	r3, r0
 800a3e2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a3e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	4413      	add	r3, r2
 800a3ec:	00db      	lsls	r3, r3, #3
 800a3ee:	3350      	adds	r3, #80	@ 0x50
 800a3f0:	443b      	add	r3, r7
 800a3f2:	3b2c      	subs	r3, #44	@ 0x2c
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d021      	beq.n	800a43e <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800a3fa:	4956      	ldr	r1, [pc, #344]	@ (800a554 <HAL_OSPIM_Config+0x510>)
 800a3fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3fe:	4613      	mov	r3, r2
 800a400:	005b      	lsls	r3, r3, #1
 800a402:	4413      	add	r3, r2
 800a404:	00db      	lsls	r3, r3, #3
 800a406:	3350      	adds	r3, #80	@ 0x50
 800a408:	443b      	add	r3, r7
 800a40a:	3b2c      	subs	r3, #44	@ 0x2c
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	3b01      	subs	r3, #1
 800a410:	f003 0301 	and.w	r3, r3, #1
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	440b      	add	r3, r1
 800a418:	6859      	ldr	r1, [r3, #4]
 800a41a:	484e      	ldr	r0, [pc, #312]	@ (800a554 <HAL_OSPIM_Config+0x510>)
 800a41c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a41e:	4613      	mov	r3, r2
 800a420:	005b      	lsls	r3, r3, #1
 800a422:	4413      	add	r3, r2
 800a424:	00db      	lsls	r3, r3, #3
 800a426:	3350      	adds	r3, #80	@ 0x50
 800a428:	443b      	add	r3, r7
 800a42a:	3b2c      	subs	r3, #44	@ 0x2c
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3b01      	subs	r3, #1
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4403      	add	r3, r0
 800a43c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	6819      	ldr	r1, [r3, #0]
 800a442:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a446:	4613      	mov	r3, r2
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	4413      	add	r3, r2
 800a44c:	00db      	lsls	r3, r3, #3
 800a44e:	3350      	adds	r3, #80	@ 0x50
 800a450:	443b      	add	r3, r7
 800a452:	3b3c      	subs	r3, #60	@ 0x3c
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4299      	cmp	r1, r3
 800a458:	d03c      	beq.n	800a4d4 <HAL_OSPIM_Config+0x490>
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	6899      	ldr	r1, [r3, #8]
 800a45e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a462:	4613      	mov	r3, r2
 800a464:	005b      	lsls	r3, r3, #1
 800a466:	4413      	add	r3, r2
 800a468:	00db      	lsls	r3, r3, #3
 800a46a:	3350      	adds	r3, #80	@ 0x50
 800a46c:	443b      	add	r3, r7
 800a46e:	3b34      	subs	r3, #52	@ 0x34
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4299      	cmp	r1, r3
 800a474:	d02e      	beq.n	800a4d4 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	6859      	ldr	r1, [r3, #4]
 800a47a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a47e:	4613      	mov	r3, r2
 800a480:	005b      	lsls	r3, r3, #1
 800a482:	4413      	add	r3, r2
 800a484:	00db      	lsls	r3, r3, #3
 800a486:	3350      	adds	r3, #80	@ 0x50
 800a488:	443b      	add	r3, r7
 800a48a:	3b38      	subs	r3, #56	@ 0x38
 800a48c:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800a48e:	4299      	cmp	r1, r3
 800a490:	d103      	bne.n	800a49a <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d11c      	bne.n	800a4d4 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	68d9      	ldr	r1, [r3, #12]
 800a49e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	4413      	add	r3, r2
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	3350      	adds	r3, #80	@ 0x50
 800a4ac:	443b      	add	r3, r7
 800a4ae:	3b30      	subs	r3, #48	@ 0x30
 800a4b0:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800a4b2:	4299      	cmp	r1, r3
 800a4b4:	d00e      	beq.n	800a4d4 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	6919      	ldr	r1, [r3, #16]
 800a4ba:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a4be:	4613      	mov	r3, r2
 800a4c0:	005b      	lsls	r3, r3, #1
 800a4c2:	4413      	add	r3, r2
 800a4c4:	00db      	lsls	r3, r3, #3
 800a4c6:	3350      	adds	r3, #80	@ 0x50
 800a4c8:	443b      	add	r3, r7
 800a4ca:	3b2c      	subs	r3, #44	@ 0x2c
 800a4cc:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a4ce:	4299      	cmp	r1, r3
 800a4d0:	f040 810e 	bne.w	800a6f0 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	6819      	ldr	r1, [r3, #0]
 800a4d8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a4dc:	4613      	mov	r3, r2
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	4413      	add	r3, r2
 800a4e2:	00db      	lsls	r3, r3, #3
 800a4e4:	3350      	adds	r3, #80	@ 0x50
 800a4e6:	443b      	add	r3, r7
 800a4e8:	3b3c      	subs	r3, #60	@ 0x3c
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4299      	cmp	r1, r3
 800a4ee:	d133      	bne.n	800a558 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	6859      	ldr	r1, [r3, #4]
 800a4f4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	005b      	lsls	r3, r3, #1
 800a4fc:	4413      	add	r3, r2
 800a4fe:	00db      	lsls	r3, r3, #3
 800a500:	3350      	adds	r3, #80	@ 0x50
 800a502:	443b      	add	r3, r7
 800a504:	3b38      	subs	r3, #56	@ 0x38
 800a506:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800a508:	4299      	cmp	r1, r3
 800a50a:	d125      	bne.n	800a558 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	68d9      	ldr	r1, [r3, #12]
 800a510:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a514:	4613      	mov	r3, r2
 800a516:	005b      	lsls	r3, r3, #1
 800a518:	4413      	add	r3, r2
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	3350      	adds	r3, #80	@ 0x50
 800a51e:	443b      	add	r3, r7
 800a520:	3b30      	subs	r3, #48	@ 0x30
 800a522:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800a524:	4299      	cmp	r1, r3
 800a526:	d117      	bne.n	800a558 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	6919      	ldr	r1, [r3, #16]
 800a52c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a530:	4613      	mov	r3, r2
 800a532:	005b      	lsls	r3, r3, #1
 800a534:	4413      	add	r3, r2
 800a536:	00db      	lsls	r3, r3, #3
 800a538:	3350      	adds	r3, #80	@ 0x50
 800a53a:	443b      	add	r3, r7
 800a53c:	3b2c      	subs	r3, #44	@ 0x2c
 800a53e:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800a540:	4299      	cmp	r1, r3
 800a542:	d109      	bne.n	800a558 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a544:	4b03      	ldr	r3, [pc, #12]	@ (800a554 <HAL_OSPIM_Config+0x510>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a02      	ldr	r2, [pc, #8]	@ (800a554 <HAL_OSPIM_Config+0x510>)
 800a54a:	f043 0301 	orr.w	r3, r3, #1
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	e0ce      	b.n	800a6f0 <HAL_OSPIM_Config+0x6ac>
 800a552:	bf00      	nop
 800a554:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800a558:	49bb      	ldr	r1, [pc, #748]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a55a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a55e:	4613      	mov	r3, r2
 800a560:	005b      	lsls	r3, r3, #1
 800a562:	4413      	add	r3, r2
 800a564:	00db      	lsls	r3, r3, #3
 800a566:	3350      	adds	r3, #80	@ 0x50
 800a568:	443b      	add	r3, r7
 800a56a:	3b3c      	subs	r3, #60	@ 0x3c
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	3b01      	subs	r3, #1
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	440b      	add	r3, r1
 800a574:	6859      	ldr	r1, [r3, #4]
 800a576:	48b4      	ldr	r0, [pc, #720]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a578:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a57c:	4613      	mov	r3, r2
 800a57e:	005b      	lsls	r3, r3, #1
 800a580:	4413      	add	r3, r2
 800a582:	00db      	lsls	r3, r3, #3
 800a584:	3350      	adds	r3, #80	@ 0x50
 800a586:	443b      	add	r3, r7
 800a588:	3b3c      	subs	r3, #60	@ 0x3c
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	3b01      	subs	r3, #1
 800a58e:	f021 0201 	bic.w	r2, r1, #1
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4403      	add	r3, r0
 800a596:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a598:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a59c:	4613      	mov	r3, r2
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	4413      	add	r3, r2
 800a5a2:	00db      	lsls	r3, r3, #3
 800a5a4:	3350      	adds	r3, #80	@ 0x50
 800a5a6:	443b      	add	r3, r7
 800a5a8:	3b38      	subs	r3, #56	@ 0x38
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d01f      	beq.n	800a5f0 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a5b0:	49a5      	ldr	r1, [pc, #660]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a5b2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	005b      	lsls	r3, r3, #1
 800a5ba:	4413      	add	r3, r2
 800a5bc:	00db      	lsls	r3, r3, #3
 800a5be:	3350      	adds	r3, #80	@ 0x50
 800a5c0:	443b      	add	r3, r7
 800a5c2:	3b38      	subs	r3, #56	@ 0x38
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	440b      	add	r3, r1
 800a5cc:	6859      	ldr	r1, [r3, #4]
 800a5ce:	489e      	ldr	r0, [pc, #632]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a5d0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	005b      	lsls	r3, r3, #1
 800a5d8:	4413      	add	r3, r2
 800a5da:	00db      	lsls	r3, r3, #3
 800a5dc:	3350      	adds	r3, #80	@ 0x50
 800a5de:	443b      	add	r3, r7
 800a5e0:	3b38      	subs	r3, #56	@ 0x38
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	f021 0210 	bic.w	r2, r1, #16
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4403      	add	r3, r0
 800a5ee:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800a5f0:	4995      	ldr	r1, [pc, #596]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a5f2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	005b      	lsls	r3, r3, #1
 800a5fa:	4413      	add	r3, r2
 800a5fc:	00db      	lsls	r3, r3, #3
 800a5fe:	3350      	adds	r3, #80	@ 0x50
 800a600:	443b      	add	r3, r7
 800a602:	3b34      	subs	r3, #52	@ 0x34
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	3b01      	subs	r3, #1
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	440b      	add	r3, r1
 800a60c:	6859      	ldr	r1, [r3, #4]
 800a60e:	488e      	ldr	r0, [pc, #568]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a610:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a614:	4613      	mov	r3, r2
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	4413      	add	r3, r2
 800a61a:	00db      	lsls	r3, r3, #3
 800a61c:	3350      	adds	r3, #80	@ 0x50
 800a61e:	443b      	add	r3, r7
 800a620:	3b34      	subs	r3, #52	@ 0x34
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	3b01      	subs	r3, #1
 800a626:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	4403      	add	r3, r0
 800a62e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a630:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a634:	4613      	mov	r3, r2
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	4413      	add	r3, r2
 800a63a:	00db      	lsls	r3, r3, #3
 800a63c:	3350      	adds	r3, #80	@ 0x50
 800a63e:	443b      	add	r3, r7
 800a640:	3b30      	subs	r3, #48	@ 0x30
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d023      	beq.n	800a690 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a648:	497f      	ldr	r1, [pc, #508]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a64a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a64e:	4613      	mov	r3, r2
 800a650:	005b      	lsls	r3, r3, #1
 800a652:	4413      	add	r3, r2
 800a654:	00db      	lsls	r3, r3, #3
 800a656:	3350      	adds	r3, #80	@ 0x50
 800a658:	443b      	add	r3, r7
 800a65a:	3b30      	subs	r3, #48	@ 0x30
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	3b01      	subs	r3, #1
 800a660:	f003 0301 	and.w	r3, r3, #1
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	440b      	add	r3, r1
 800a668:	6859      	ldr	r1, [r3, #4]
 800a66a:	4877      	ldr	r0, [pc, #476]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a66c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a670:	4613      	mov	r3, r2
 800a672:	005b      	lsls	r3, r3, #1
 800a674:	4413      	add	r3, r2
 800a676:	00db      	lsls	r3, r3, #3
 800a678:	3350      	adds	r3, #80	@ 0x50
 800a67a:	443b      	add	r3, r7
 800a67c:	3b30      	subs	r3, #48	@ 0x30
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	3b01      	subs	r3, #1
 800a682:	f003 0301 	and.w	r3, r3, #1
 800a686:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4403      	add	r3, r0
 800a68e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a690:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a694:	4613      	mov	r3, r2
 800a696:	005b      	lsls	r3, r3, #1
 800a698:	4413      	add	r3, r2
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	3350      	adds	r3, #80	@ 0x50
 800a69e:	443b      	add	r3, r7
 800a6a0:	3b2c      	subs	r3, #44	@ 0x2c
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d023      	beq.n	800a6f0 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a6a8:	4967      	ldr	r1, [pc, #412]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a6aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	4413      	add	r3, r2
 800a6b4:	00db      	lsls	r3, r3, #3
 800a6b6:	3350      	adds	r3, #80	@ 0x50
 800a6b8:	443b      	add	r3, r7
 800a6ba:	3b2c      	subs	r3, #44	@ 0x2c
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	440b      	add	r3, r1
 800a6c8:	6859      	ldr	r1, [r3, #4]
 800a6ca:	485f      	ldr	r0, [pc, #380]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a6cc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	005b      	lsls	r3, r3, #1
 800a6d4:	4413      	add	r3, r2
 800a6d6:	00db      	lsls	r3, r3, #3
 800a6d8:	3350      	adds	r3, #80	@ 0x50
 800a6da:	443b      	add	r3, r7
 800a6dc:	3b2c      	subs	r3, #44	@ 0x2c
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4403      	add	r3, r0
 800a6ee:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800a6f0:	4a55      	ldr	r2, [pc, #340]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a704:	025b      	lsls	r3, r3, #9
 800a706:	431a      	orrs	r2, r3
 800a708:	494f      	ldr	r1, [pc, #316]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	3b01      	subs	r3, #1
 800a710:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	440b      	add	r3, r1
 800a718:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	1e5a      	subs	r2, r3, #1
 800a720:	4b49      	ldr	r3, [pc, #292]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	0c1b      	lsrs	r3, r3, #16
 800a726:	b2db      	uxtb	r3, r3
 800a728:	429a      	cmp	r2, r3
 800a72a:	d90a      	bls.n	800a742 <HAL_OSPIM_Config+0x6fe>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800a72c:	4b46      	ldr	r3, [pc, #280]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	695b      	ldr	r3, [r3, #20]
 800a738:	3b01      	subs	r3, #1
 800a73a:	041b      	lsls	r3, r3, #16
 800a73c:	4942      	ldr	r1, [pc, #264]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a73e:	4313      	orrs	r3, r2
 800a740:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a742:	4b41      	ldr	r3, [pc, #260]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f000 809a 	beq.w	800a884 <HAL_OSPIM_Config+0x840>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800a750:	4a3d      	ldr	r2, [pc, #244]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3b01      	subs	r3, #1
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f023 0203 	bic.w	r2, r3, #3
 800a762:	4939      	ldr	r1, [pc, #228]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3b01      	subs	r3, #1
 800a76a:	f042 0201 	orr.w	r2, r2, #1
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	440b      	add	r3, r1
 800a772:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d011      	beq.n	800a7a0 <HAL_OSPIM_Config+0x75c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800a77c:	4a32      	ldr	r2, [pc, #200]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	3b01      	subs	r3, #1
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4413      	add	r3, r2
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a78e:	492e      	ldr	r1, [pc, #184]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	3b01      	subs	r3, #1
 800a796:	f042 0210 	orr.w	r2, r2, #16
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	440b      	add	r3, r1
 800a79e:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d016      	beq.n	800a7da <HAL_OSPIM_Config+0x796>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a7ac:	4a26      	ldr	r2, [pc, #152]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	f003 0301 	and.w	r3, r3, #1
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a7c2:	4921      	ldr	r1, [pc, #132]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	f003 0301 	and.w	r3, r3, #1
 800a7ce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	440b      	add	r3, r1
 800a7d6:	605a      	str	r2, [r3, #4]
 800a7d8:	e019      	b.n	800a80e <HAL_OSPIM_Config+0x7ca>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d015      	beq.n	800a80e <HAL_OSPIM_Config+0x7ca>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a7e2:	4a19      	ldr	r2, [pc, #100]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4413      	add	r3, r2
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a7f8:	4913      	ldr	r1, [pc, #76]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	3b01      	subs	r3, #1
 800a800:	f003 0301 	and.w	r3, r3, #1
 800a804:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	440b      	add	r3, r1
 800a80c:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d018      	beq.n	800a84c <HAL_OSPIM_Config+0x808>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a81a:	4a0b      	ldr	r2, [pc, #44]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	3b01      	subs	r3, #1
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a830:	4905      	ldr	r1, [pc, #20]	@ (800a848 <HAL_OSPIM_Config+0x804>)
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	3b01      	subs	r3, #1
 800a838:	f003 0301 	and.w	r3, r3, #1
 800a83c:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	440b      	add	r3, r1
 800a844:	605a      	str	r2, [r3, #4]
 800a846:	e0c5      	b.n	800a9d4 <HAL_OSPIM_Config+0x990>
 800a848:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 80bf 	beq.w	800a9d4 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a856:	4a6e      	ldr	r2, [pc, #440]	@ (800aa10 <HAL_OSPIM_Config+0x9cc>)
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	3b01      	subs	r3, #1
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4413      	add	r3, r2
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a86c:	4968      	ldr	r1, [pc, #416]	@ (800aa10 <HAL_OSPIM_Config+0x9cc>)
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	3b01      	subs	r3, #1
 800a874:	f003 0301 	and.w	r3, r3, #1
 800a878:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	440b      	add	r3, r1
 800a880:	605a      	str	r2, [r3, #4]
 800a882:	e0a7      	b.n	800a9d4 <HAL_OSPIM_Config+0x990>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800a884:	4a62      	ldr	r2, [pc, #392]	@ (800aa10 <HAL_OSPIM_Config+0x9cc>)
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	4413      	add	r3, r2
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f023 0203 	bic.w	r2, r3, #3
 800a896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a898:	005b      	lsls	r3, r3, #1
 800a89a:	431a      	orrs	r2, r3
 800a89c:	495c      	ldr	r1, [pc, #368]	@ (800aa10 <HAL_OSPIM_Config+0x9cc>)
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	f042 0201 	orr.w	r2, r2, #1
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	440b      	add	r3, r1
 800a8ac:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d014      	beq.n	800a8e0 <HAL_OSPIM_Config+0x89c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800a8b6:	4a56      	ldr	r2, [pc, #344]	@ (800aa10 <HAL_OSPIM_Config+0x9cc>)
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a8c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8ca:	015b      	lsls	r3, r3, #5
 800a8cc:	431a      	orrs	r2, r3
 800a8ce:	4950      	ldr	r1, [pc, #320]	@ (800aa10 <HAL_OSPIM_Config+0x9cc>)
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	f042 0210 	orr.w	r2, r2, #16
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	440b      	add	r3, r1
 800a8de:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d019      	beq.n	800a920 <HAL_OSPIM_Config+0x8dc>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a8ec:	4a48      	ldr	r2, [pc, #288]	@ (800aa10 <HAL_OSPIM_Config+0x9cc>)
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	f003 0301 	and.w	r3, r3, #1
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a904:	049b      	lsls	r3, r3, #18
 800a906:	431a      	orrs	r2, r3
 800a908:	4941      	ldr	r1, [pc, #260]	@ (800aa10 <HAL_OSPIM_Config+0x9cc>)
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	3b01      	subs	r3, #1
 800a910:	f003 0301 	and.w	r3, r3, #1
 800a914:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	440b      	add	r3, r1
 800a91c:	605a      	str	r2, [r3, #4]
 800a91e:	e01c      	b.n	800a95a <HAL_OSPIM_Config+0x916>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d018      	beq.n	800a95a <HAL_OSPIM_Config+0x916>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a928:	4a39      	ldr	r2, [pc, #228]	@ (800aa10 <HAL_OSPIM_Config+0x9cc>)
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	3b01      	subs	r3, #1
 800a930:	f003 0301 	and.w	r3, r3, #1
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a93e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a940:	069b      	lsls	r3, r3, #26
 800a942:	431a      	orrs	r2, r3
 800a944:	4932      	ldr	r1, [pc, #200]	@ (800aa10 <HAL_OSPIM_Config+0x9cc>)
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	f003 0301 	and.w	r3, r3, #1
 800a950:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	440b      	add	r3, r1
 800a958:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a962:	2b00      	cmp	r3, #0
 800a964:	d019      	beq.n	800a99a <HAL_OSPIM_Config+0x956>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a966:	4a2a      	ldr	r2, [pc, #168]	@ (800aa10 <HAL_OSPIM_Config+0x9cc>)
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	4413      	add	r3, r2
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a97c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a97e:	049b      	lsls	r3, r3, #18
 800a980:	431a      	orrs	r2, r3
 800a982:	4923      	ldr	r1, [pc, #140]	@ (800aa10 <HAL_OSPIM_Config+0x9cc>)
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	3b01      	subs	r3, #1
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	440b      	add	r3, r1
 800a996:	605a      	str	r2, [r3, #4]
 800a998:	e01c      	b.n	800a9d4 <HAL_OSPIM_Config+0x990>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d018      	beq.n	800a9d4 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a9a2:	4a1b      	ldr	r2, [pc, #108]	@ (800aa10 <HAL_OSPIM_Config+0x9cc>)
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4413      	add	r3, r2
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a9b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9ba:	069b      	lsls	r3, r3, #26
 800a9bc:	431a      	orrs	r2, r3
 800a9be:	4914      	ldr	r1, [pc, #80]	@ (800aa10 <HAL_OSPIM_Config+0x9cc>)
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	440b      	add	r3, r1
 800a9d2:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800a9d4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d005      	beq.n	800a9ec <HAL_OSPIM_Config+0x9a8>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a9e0:	4b0c      	ldr	r3, [pc, #48]	@ (800aa14 <HAL_OSPIM_Config+0x9d0>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a0b      	ldr	r2, [pc, #44]	@ (800aa14 <HAL_OSPIM_Config+0x9d0>)
 800a9e6:	f043 0301 	orr.w	r3, r3, #1
 800a9ea:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800a9ec:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a9f0:	f003 0302 	and.w	r3, r3, #2
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d005      	beq.n	800aa04 <HAL_OSPIM_Config+0x9c0>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a9f8:	4b07      	ldr	r3, [pc, #28]	@ (800aa18 <HAL_OSPIM_Config+0x9d4>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a06      	ldr	r2, [pc, #24]	@ (800aa18 <HAL_OSPIM_Config+0x9d4>)
 800a9fe:	f043 0301 	orr.w	r3, r3, #1
 800aa02:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800aa04:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3750      	adds	r7, #80	@ 0x50
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	5200b400 	.word	0x5200b400
 800aa14:	52005000 	.word	0x52005000
 800aa18:	5200a000 	.word	0x5200a000

0800aa1c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	603b      	str	r3, [r7, #0]
 800aa28:	4613      	mov	r3, r2
 800aa2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800aa2c:	e01a      	b.n	800aa64 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa34:	d016      	beq.n	800aa64 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa36:	f7fa fd19 	bl	800546c <HAL_GetTick>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	69ba      	ldr	r2, [r7, #24]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d302      	bcc.n	800aa4c <OSPI_WaitFlagStateUntilTimeout+0x30>
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d10b      	bne.n	800aa64 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa52:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa58:	f043 0201 	orr.w	r2, r3, #1
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	e00e      	b.n	800aa82 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6a1a      	ldr	r2, [r3, #32]
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	bf14      	ite	ne
 800aa72:	2301      	movne	r3, #1
 800aa74:	2300      	moveq	r3, #0
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	461a      	mov	r2, r3
 800aa7a:	79fb      	ldrb	r3, [r7, #7]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d1d6      	bne.n	800aa2e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
	...

0800aa8c <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b089      	sub	sp, #36	@ 0x24
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa96:	2300      	movs	r3, #0
 800aa98:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800aaa8:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10a      	bne.n	800aac8 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	685a      	ldr	r2, [r3, #4]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	430a      	orrs	r2, r1
 800aac6:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d114      	bne.n	800aafa <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800aad8:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800aae2:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800aaec:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800aaf6:	60fb      	str	r3, [r7, #12]
 800aaf8:	e02c      	b.n	800ab54 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d114      	bne.n	800ab2c <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800ab0a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800ab14:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab1e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800ab28:	60fb      	str	r3, [r7, #12]
 800ab2a:	e013      	b.n	800ab54 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ab34:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ab3e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800ab48:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800ab52:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab5c:	431a      	orrs	r2, r3
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d012      	beq.n	800ab90 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab82:	4319      	orrs	r1, r3
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab88:	430b      	orrs	r3, r1
 800ab8a:	431a      	orrs	r2, r3
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f023 021f 	bic.w	r2, r3, #31
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab9c:	431a      	orrs	r2, r3
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d009      	beq.n	800abbe <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d105      	bne.n	800abbe <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3a01      	subs	r2, #1
 800abbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f000 8095 	beq.w	800acf2 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	69db      	ldr	r3, [r3, #28]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d053      	beq.n	800ac78 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d01e      	beq.n	800ac16 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	4b64      	ldr	r3, [pc, #400]	@ (800ad70 <OSPI_ConfigCmd+0x2e4>)
 800abde:	4013      	ands	r3, r2
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	68d1      	ldr	r1, [r2, #12]
 800abe4:	683a      	ldr	r2, [r7, #0]
 800abe6:	6952      	ldr	r2, [r2, #20]
 800abe8:	4311      	orrs	r1, r2
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	6912      	ldr	r2, [r2, #16]
 800abee:	4311      	orrs	r1, r2
 800abf0:	683a      	ldr	r2, [r7, #0]
 800abf2:	69d2      	ldr	r2, [r2, #28]
 800abf4:	4311      	orrs	r1, r2
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800abfa:	4311      	orrs	r1, r2
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	6a12      	ldr	r2, [r2, #32]
 800ac00:	4311      	orrs	r1, r2
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ac06:	4311      	orrs	r1, r2
 800ac08:	683a      	ldr	r2, [r7, #0]
 800ac0a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ac0c:	430a      	orrs	r2, r1
 800ac0e:	431a      	orrs	r2, r3
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	601a      	str	r2, [r3, #0]
 800ac14:	e026      	b.n	800ac64 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	4b56      	ldr	r3, [pc, #344]	@ (800ad74 <OSPI_ConfigCmd+0x2e8>)
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	68d1      	ldr	r1, [r2, #12]
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	6952      	ldr	r2, [r2, #20]
 800ac26:	4311      	orrs	r1, r2
 800ac28:	683a      	ldr	r2, [r7, #0]
 800ac2a:	6912      	ldr	r2, [r2, #16]
 800ac2c:	4311      	orrs	r1, r2
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	69d2      	ldr	r2, [r2, #28]
 800ac32:	4311      	orrs	r1, r2
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ac38:	4311      	orrs	r1, r2
 800ac3a:	683a      	ldr	r2, [r7, #0]
 800ac3c:	6a12      	ldr	r2, [r2, #32]
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	431a      	orrs	r2, r3
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac4e:	d109      	bne.n	800ac64 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800ac54:	2b08      	cmp	r3, #8
 800ac56:	d105      	bne.n	800ac64 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	689a      	ldr	r2, [r3, #8]
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	683a      	ldr	r2, [r7, #0]
 800ac72:	6992      	ldr	r2, [r2, #24]
 800ac74:	649a      	str	r2, [r3, #72]	@ 0x48
 800ac76:	e074      	b.n	800ad62 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d015      	beq.n	800acac <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	4b3c      	ldr	r3, [pc, #240]	@ (800ad78 <OSPI_ConfigCmd+0x2ec>)
 800ac86:	4013      	ands	r3, r2
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	68d1      	ldr	r1, [r2, #12]
 800ac8c:	683a      	ldr	r2, [r7, #0]
 800ac8e:	6952      	ldr	r2, [r2, #20]
 800ac90:	4311      	orrs	r1, r2
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	6912      	ldr	r2, [r2, #16]
 800ac96:	4311      	orrs	r1, r2
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ac9c:	4311      	orrs	r1, r2
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800aca2:	430a      	orrs	r2, r1
 800aca4:	431a      	orrs	r2, r3
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	601a      	str	r2, [r3, #0]
 800acaa:	e01d      	b.n	800ace8 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	68d9      	ldr	r1, [r3, #12]
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	695b      	ldr	r3, [r3, #20]
 800acbc:	4319      	orrs	r1, r3
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	430b      	orrs	r3, r1
 800acc4:	431a      	orrs	r2, r3
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acd2:	d109      	bne.n	800ace8 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800acd8:	2b08      	cmp	r3, #8
 800acda:	d105      	bne.n	800ace8 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	689a      	ldr	r2, [r3, #8]
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	e037      	b.n	800ad62 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	69db      	ldr	r3, [r3, #28]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d02e      	beq.n	800ad58 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d015      	beq.n	800ad2e <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	4b1d      	ldr	r3, [pc, #116]	@ (800ad7c <OSPI_ConfigCmd+0x2f0>)
 800ad08:	4013      	ands	r3, r2
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	69d1      	ldr	r1, [r2, #28]
 800ad0e:	683a      	ldr	r2, [r7, #0]
 800ad10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ad12:	4311      	orrs	r1, r2
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	6a12      	ldr	r2, [r2, #32]
 800ad18:	4311      	orrs	r1, r2
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ad1e:	4311      	orrs	r1, r2
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ad24:	430a      	orrs	r2, r1
 800ad26:	431a      	orrs	r2, r3
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	e00e      	b.n	800ad4c <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	69d9      	ldr	r1, [r3, #28]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad3e:	4319      	orrs	r1, r3
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	6a1b      	ldr	r3, [r3, #32]
 800ad44:	430b      	orrs	r3, r1
 800ad46:	431a      	orrs	r2, r3
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	6992      	ldr	r2, [r2, #24]
 800ad54:	649a      	str	r2, [r3, #72]	@ 0x48
 800ad56:	e004      	b.n	800ad62 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2208      	movs	r2, #8
 800ad60:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800ad62:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3724      	adds	r7, #36	@ 0x24
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	f0ffc0c0 	.word	0xf0ffc0c0
 800ad74:	ffffc0c0 	.word	0xffffc0c0
 800ad78:	f0ffffc0 	.word	0xf0ffffc0
 800ad7c:	f0ffc0ff 	.word	0xf0ffc0ff

0800ad80 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b087      	sub	sp, #28
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	4603      	mov	r3, r0
 800ad88:	6039      	str	r1, [r7, #0]
 800ad8a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800ad90:	2300      	movs	r3, #0
 800ad92:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800ad94:	79fb      	ldrb	r3, [r7, #7]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d005      	beq.n	800ada6 <OSPIM_GetConfig+0x26>
 800ad9a:	79fb      	ldrb	r3, [r7, #7]
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d802      	bhi.n	800ada6 <OSPIM_GetConfig+0x26>
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d102      	bne.n	800adac <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	75fb      	strb	r3, [r7, #23]
 800adaa:	e098      	b.n	800aede <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2200      	movs	r2, #0
 800adb0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2200      	movs	r2, #0
 800adb6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	2200      	movs	r2, #0
 800adbc:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2200      	movs	r2, #0
 800adc2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	2200      	movs	r2, #0
 800adc8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800adca:	79fb      	ldrb	r3, [r7, #7]
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d10b      	bne.n	800ade8 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800add0:	4b46      	ldr	r3, [pc, #280]	@ (800aeec <OSPIM_GetConfig+0x16c>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f003 0301 	and.w	r3, r3, #1
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800addc:	4b44      	ldr	r3, [pc, #272]	@ (800aef0 <OSPIM_GetConfig+0x170>)
 800adde:	613b      	str	r3, [r7, #16]
 800ade0:	e002      	b.n	800ade8 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800ade2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ade6:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800ade8:	2300      	movs	r3, #0
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	e074      	b.n	800aed8 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800adee:	4a3f      	ldr	r2, [pc, #252]	@ (800aeec <OSPIM_GetConfig+0x16c>)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	f003 0301 	and.w	r3, r3, #1
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00a      	beq.n	800ae1a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	4053      	eors	r3, r2
 800ae0a:	f003 0302 	and.w	r3, r3, #2
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d103      	bne.n	800ae1a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	1c5a      	adds	r2, r3, #1
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	f003 0310 	and.w	r3, r3, #16
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00a      	beq.n	800ae3a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	4053      	eors	r3, r2
 800ae2a:	f003 0320 	and.w	r3, r3, #32
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d103      	bne.n	800ae3a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	1c5a      	adds	r2, r3, #1
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00a      	beq.n	800ae5a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	4053      	eors	r3, r2
 800ae4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d103      	bne.n	800ae5a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	1c5a      	adds	r2, r3, #1
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d018      	beq.n	800ae96 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800ae64:	68ba      	ldr	r2, [r7, #8]
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	4053      	eors	r3, r2
 800ae6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d111      	bne.n	800ae96 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d106      	bne.n	800ae8a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	60da      	str	r2, [r3, #12]
 800ae88:	e005      	b.n	800ae96 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d018      	beq.n	800aed2 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	4053      	eors	r3, r2
 800aea6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d111      	bne.n	800aed2 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d106      	bne.n	800aec6 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	3301      	adds	r3, #1
 800aebc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	611a      	str	r2, [r3, #16]
 800aec4:	e005      	b.n	800aed2 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3301      	adds	r3, #1
 800aeca:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3301      	adds	r3, #1
 800aed6:	60fb      	str	r3, [r7, #12]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d987      	bls.n	800adee <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800aede:	7dfb      	ldrb	r3, [r7, #23]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	371c      	adds	r7, #28
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	5200b400 	.word	0x5200b400
 800aef0:	04040222 	.word	0x04040222

0800aef4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800aefc:	4b19      	ldr	r3, [pc, #100]	@ (800af64 <HAL_PWREx_ConfigSupply+0x70>)
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	f003 0304 	and.w	r3, r3, #4
 800af04:	2b04      	cmp	r3, #4
 800af06:	d00a      	beq.n	800af1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800af08:	4b16      	ldr	r3, [pc, #88]	@ (800af64 <HAL_PWREx_ConfigSupply+0x70>)
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	f003 0307 	and.w	r3, r3, #7
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	429a      	cmp	r2, r3
 800af14:	d001      	beq.n	800af1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	e01f      	b.n	800af5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	e01d      	b.n	800af5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800af1e:	4b11      	ldr	r3, [pc, #68]	@ (800af64 <HAL_PWREx_ConfigSupply+0x70>)
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	f023 0207 	bic.w	r2, r3, #7
 800af26:	490f      	ldr	r1, [pc, #60]	@ (800af64 <HAL_PWREx_ConfigSupply+0x70>)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800af2e:	f7fa fa9d 	bl	800546c <HAL_GetTick>
 800af32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800af34:	e009      	b.n	800af4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800af36:	f7fa fa99 	bl	800546c <HAL_GetTick>
 800af3a:	4602      	mov	r2, r0
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af44:	d901      	bls.n	800af4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	e007      	b.n	800af5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800af4a:	4b06      	ldr	r3, [pc, #24]	@ (800af64 <HAL_PWREx_ConfigSupply+0x70>)
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af56:	d1ee      	bne.n	800af36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	58024800 	.word	0x58024800

0800af68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08c      	sub	sp, #48	@ 0x30
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d101      	bne.n	800af7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e3c8      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	2b00      	cmp	r3, #0
 800af84:	f000 8087 	beq.w	800b096 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af88:	4b88      	ldr	r3, [pc, #544]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800af92:	4b86      	ldr	r3, [pc, #536]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800af94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af96:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800af98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af9a:	2b10      	cmp	r3, #16
 800af9c:	d007      	beq.n	800afae <HAL_RCC_OscConfig+0x46>
 800af9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa0:	2b18      	cmp	r3, #24
 800afa2:	d110      	bne.n	800afc6 <HAL_RCC_OscConfig+0x5e>
 800afa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa6:	f003 0303 	and.w	r3, r3, #3
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d10b      	bne.n	800afc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afae:	4b7f      	ldr	r3, [pc, #508]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d06c      	beq.n	800b094 <HAL_RCC_OscConfig+0x12c>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d168      	bne.n	800b094 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e3a2      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afce:	d106      	bne.n	800afde <HAL_RCC_OscConfig+0x76>
 800afd0:	4b76      	ldr	r3, [pc, #472]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a75      	ldr	r2, [pc, #468]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800afd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	e02e      	b.n	800b03c <HAL_RCC_OscConfig+0xd4>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10c      	bne.n	800b000 <HAL_RCC_OscConfig+0x98>
 800afe6:	4b71      	ldr	r3, [pc, #452]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a70      	ldr	r2, [pc, #448]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800afec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aff0:	6013      	str	r3, [r2, #0]
 800aff2:	4b6e      	ldr	r3, [pc, #440]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a6d      	ldr	r2, [pc, #436]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800aff8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800affc:	6013      	str	r3, [r2, #0]
 800affe:	e01d      	b.n	800b03c <HAL_RCC_OscConfig+0xd4>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b008:	d10c      	bne.n	800b024 <HAL_RCC_OscConfig+0xbc>
 800b00a:	4b68      	ldr	r3, [pc, #416]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a67      	ldr	r2, [pc, #412]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b014:	6013      	str	r3, [r2, #0]
 800b016:	4b65      	ldr	r3, [pc, #404]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a64      	ldr	r2, [pc, #400]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b01c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b020:	6013      	str	r3, [r2, #0]
 800b022:	e00b      	b.n	800b03c <HAL_RCC_OscConfig+0xd4>
 800b024:	4b61      	ldr	r3, [pc, #388]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a60      	ldr	r2, [pc, #384]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b02a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b02e:	6013      	str	r3, [r2, #0]
 800b030:	4b5e      	ldr	r3, [pc, #376]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a5d      	ldr	r2, [pc, #372]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b03a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d013      	beq.n	800b06c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b044:	f7fa fa12 	bl	800546c <HAL_GetTick>
 800b048:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b04a:	e008      	b.n	800b05e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b04c:	f7fa fa0e 	bl	800546c <HAL_GetTick>
 800b050:	4602      	mov	r2, r0
 800b052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	2b64      	cmp	r3, #100	@ 0x64
 800b058:	d901      	bls.n	800b05e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b05a:	2303      	movs	r3, #3
 800b05c:	e356      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b05e:	4b53      	ldr	r3, [pc, #332]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b066:	2b00      	cmp	r3, #0
 800b068:	d0f0      	beq.n	800b04c <HAL_RCC_OscConfig+0xe4>
 800b06a:	e014      	b.n	800b096 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b06c:	f7fa f9fe 	bl	800546c <HAL_GetTick>
 800b070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b072:	e008      	b.n	800b086 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b074:	f7fa f9fa 	bl	800546c <HAL_GetTick>
 800b078:	4602      	mov	r2, r0
 800b07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b07c:	1ad3      	subs	r3, r2, r3
 800b07e:	2b64      	cmp	r3, #100	@ 0x64
 800b080:	d901      	bls.n	800b086 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b082:	2303      	movs	r3, #3
 800b084:	e342      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b086:	4b49      	ldr	r3, [pc, #292]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1f0      	bne.n	800b074 <HAL_RCC_OscConfig+0x10c>
 800b092:	e000      	b.n	800b096 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 0302 	and.w	r3, r3, #2
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 808c 	beq.w	800b1bc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0a4:	4b41      	ldr	r3, [pc, #260]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b0ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b0ae:	4b3f      	ldr	r3, [pc, #252]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b0b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b0b4:	6a3b      	ldr	r3, [r7, #32]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d007      	beq.n	800b0ca <HAL_RCC_OscConfig+0x162>
 800b0ba:	6a3b      	ldr	r3, [r7, #32]
 800b0bc:	2b18      	cmp	r3, #24
 800b0be:	d137      	bne.n	800b130 <HAL_RCC_OscConfig+0x1c8>
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	f003 0303 	and.w	r3, r3, #3
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d132      	bne.n	800b130 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b0ca:	4b38      	ldr	r3, [pc, #224]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 0304 	and.w	r3, r3, #4
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d005      	beq.n	800b0e2 <HAL_RCC_OscConfig+0x17a>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d101      	bne.n	800b0e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e314      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b0e2:	4b32      	ldr	r3, [pc, #200]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f023 0219 	bic.w	r2, r3, #25
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	492f      	ldr	r1, [pc, #188]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0f4:	f7fa f9ba 	bl	800546c <HAL_GetTick>
 800b0f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b0fa:	e008      	b.n	800b10e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0fc:	f7fa f9b6 	bl	800546c <HAL_GetTick>
 800b100:	4602      	mov	r2, r0
 800b102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b104:	1ad3      	subs	r3, r2, r3
 800b106:	2b02      	cmp	r3, #2
 800b108:	d901      	bls.n	800b10e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b10a:	2303      	movs	r3, #3
 800b10c:	e2fe      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b10e:	4b27      	ldr	r3, [pc, #156]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 0304 	and.w	r3, r3, #4
 800b116:	2b00      	cmp	r3, #0
 800b118:	d0f0      	beq.n	800b0fc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b11a:	4b24      	ldr	r3, [pc, #144]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	061b      	lsls	r3, r3, #24
 800b128:	4920      	ldr	r1, [pc, #128]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b12a:	4313      	orrs	r3, r2
 800b12c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b12e:	e045      	b.n	800b1bc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d026      	beq.n	800b186 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b138:	4b1c      	ldr	r3, [pc, #112]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f023 0219 	bic.w	r2, r3, #25
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	4919      	ldr	r1, [pc, #100]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b146:	4313      	orrs	r3, r2
 800b148:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b14a:	f7fa f98f 	bl	800546c <HAL_GetTick>
 800b14e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b150:	e008      	b.n	800b164 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b152:	f7fa f98b 	bl	800546c <HAL_GetTick>
 800b156:	4602      	mov	r2, r0
 800b158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d901      	bls.n	800b164 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b160:	2303      	movs	r3, #3
 800b162:	e2d3      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b164:	4b11      	ldr	r3, [pc, #68]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 0304 	and.w	r3, r3, #4
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d0f0      	beq.n	800b152 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b170:	4b0e      	ldr	r3, [pc, #56]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	691b      	ldr	r3, [r3, #16]
 800b17c:	061b      	lsls	r3, r3, #24
 800b17e:	490b      	ldr	r1, [pc, #44]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b180:	4313      	orrs	r3, r2
 800b182:	604b      	str	r3, [r1, #4]
 800b184:	e01a      	b.n	800b1bc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b186:	4b09      	ldr	r3, [pc, #36]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a08      	ldr	r2, [pc, #32]	@ (800b1ac <HAL_RCC_OscConfig+0x244>)
 800b18c:	f023 0301 	bic.w	r3, r3, #1
 800b190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b192:	f7fa f96b 	bl	800546c <HAL_GetTick>
 800b196:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b198:	e00a      	b.n	800b1b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b19a:	f7fa f967 	bl	800546c <HAL_GetTick>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d903      	bls.n	800b1b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	e2af      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
 800b1ac:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b1b0:	4b96      	ldr	r3, [pc, #600]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 0304 	and.w	r3, r3, #4
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1ee      	bne.n	800b19a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f003 0310 	and.w	r3, r3, #16
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d06a      	beq.n	800b29e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1c8:	4b90      	ldr	r3, [pc, #576]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b1d0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b1d2:	4b8e      	ldr	r3, [pc, #568]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b1d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1d6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	2b08      	cmp	r3, #8
 800b1dc:	d007      	beq.n	800b1ee <HAL_RCC_OscConfig+0x286>
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	2b18      	cmp	r3, #24
 800b1e2:	d11b      	bne.n	800b21c <HAL_RCC_OscConfig+0x2b4>
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	f003 0303 	and.w	r3, r3, #3
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d116      	bne.n	800b21c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b1ee:	4b87      	ldr	r3, [pc, #540]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d005      	beq.n	800b206 <HAL_RCC_OscConfig+0x29e>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	69db      	ldr	r3, [r3, #28]
 800b1fe:	2b80      	cmp	r3, #128	@ 0x80
 800b200:	d001      	beq.n	800b206 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e282      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b206:	4b81      	ldr	r3, [pc, #516]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a1b      	ldr	r3, [r3, #32]
 800b212:	061b      	lsls	r3, r3, #24
 800b214:	497d      	ldr	r1, [pc, #500]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b216:	4313      	orrs	r3, r2
 800b218:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b21a:	e040      	b.n	800b29e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	69db      	ldr	r3, [r3, #28]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d023      	beq.n	800b26c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b224:	4b79      	ldr	r3, [pc, #484]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a78      	ldr	r2, [pc, #480]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b22a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b22e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b230:	f7fa f91c 	bl	800546c <HAL_GetTick>
 800b234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b236:	e008      	b.n	800b24a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b238:	f7fa f918 	bl	800546c <HAL_GetTick>
 800b23c:	4602      	mov	r2, r0
 800b23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	2b02      	cmp	r3, #2
 800b244:	d901      	bls.n	800b24a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b246:	2303      	movs	r3, #3
 800b248:	e260      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b24a:	4b70      	ldr	r3, [pc, #448]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b252:	2b00      	cmp	r3, #0
 800b254:	d0f0      	beq.n	800b238 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b256:	4b6d      	ldr	r3, [pc, #436]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6a1b      	ldr	r3, [r3, #32]
 800b262:	061b      	lsls	r3, r3, #24
 800b264:	4969      	ldr	r1, [pc, #420]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b266:	4313      	orrs	r3, r2
 800b268:	60cb      	str	r3, [r1, #12]
 800b26a:	e018      	b.n	800b29e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b26c:	4b67      	ldr	r3, [pc, #412]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a66      	ldr	r2, [pc, #408]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b278:	f7fa f8f8 	bl	800546c <HAL_GetTick>
 800b27c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b27e:	e008      	b.n	800b292 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b280:	f7fa f8f4 	bl	800546c <HAL_GetTick>
 800b284:	4602      	mov	r2, r0
 800b286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b288:	1ad3      	subs	r3, r2, r3
 800b28a:	2b02      	cmp	r3, #2
 800b28c:	d901      	bls.n	800b292 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800b28e:	2303      	movs	r3, #3
 800b290:	e23c      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b292:	4b5e      	ldr	r3, [pc, #376]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1f0      	bne.n	800b280 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 0308 	and.w	r3, r3, #8
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d036      	beq.n	800b318 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	695b      	ldr	r3, [r3, #20]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d019      	beq.n	800b2e6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b2b2:	4b56      	ldr	r3, [pc, #344]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b2b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2b6:	4a55      	ldr	r2, [pc, #340]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b2b8:	f043 0301 	orr.w	r3, r3, #1
 800b2bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2be:	f7fa f8d5 	bl	800546c <HAL_GetTick>
 800b2c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b2c4:	e008      	b.n	800b2d8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b2c6:	f7fa f8d1 	bl	800546c <HAL_GetTick>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d901      	bls.n	800b2d8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	e219      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b2d8:	4b4c      	ldr	r3, [pc, #304]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b2da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2dc:	f003 0302 	and.w	r3, r3, #2
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d0f0      	beq.n	800b2c6 <HAL_RCC_OscConfig+0x35e>
 800b2e4:	e018      	b.n	800b318 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b2e6:	4b49      	ldr	r3, [pc, #292]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b2e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2ea:	4a48      	ldr	r2, [pc, #288]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b2ec:	f023 0301 	bic.w	r3, r3, #1
 800b2f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2f2:	f7fa f8bb 	bl	800546c <HAL_GetTick>
 800b2f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b2f8:	e008      	b.n	800b30c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b2fa:	f7fa f8b7 	bl	800546c <HAL_GetTick>
 800b2fe:	4602      	mov	r2, r0
 800b300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	2b02      	cmp	r3, #2
 800b306:	d901      	bls.n	800b30c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e1ff      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b30c:	4b3f      	ldr	r3, [pc, #252]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b30e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b310:	f003 0302 	and.w	r3, r3, #2
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1f0      	bne.n	800b2fa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 0320 	and.w	r3, r3, #32
 800b320:	2b00      	cmp	r3, #0
 800b322:	d036      	beq.n	800b392 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	699b      	ldr	r3, [r3, #24]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d019      	beq.n	800b360 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b32c:	4b37      	ldr	r3, [pc, #220]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a36      	ldr	r2, [pc, #216]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b332:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b336:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b338:	f7fa f898 	bl	800546c <HAL_GetTick>
 800b33c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b33e:	e008      	b.n	800b352 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b340:	f7fa f894 	bl	800546c <HAL_GetTick>
 800b344:	4602      	mov	r2, r0
 800b346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d901      	bls.n	800b352 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800b34e:	2303      	movs	r3, #3
 800b350:	e1dc      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b352:	4b2e      	ldr	r3, [pc, #184]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d0f0      	beq.n	800b340 <HAL_RCC_OscConfig+0x3d8>
 800b35e:	e018      	b.n	800b392 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b360:	4b2a      	ldr	r3, [pc, #168]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a29      	ldr	r2, [pc, #164]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b366:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b36a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b36c:	f7fa f87e 	bl	800546c <HAL_GetTick>
 800b370:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b372:	e008      	b.n	800b386 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b374:	f7fa f87a 	bl	800546c <HAL_GetTick>
 800b378:	4602      	mov	r2, r0
 800b37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37c:	1ad3      	subs	r3, r2, r3
 800b37e:	2b02      	cmp	r3, #2
 800b380:	d901      	bls.n	800b386 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b382:	2303      	movs	r3, #3
 800b384:	e1c2      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b386:	4b21      	ldr	r3, [pc, #132]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d1f0      	bne.n	800b374 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f003 0304 	and.w	r3, r3, #4
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f000 8086 	beq.w	800b4ac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b3a0:	4b1b      	ldr	r3, [pc, #108]	@ (800b410 <HAL_RCC_OscConfig+0x4a8>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a1a      	ldr	r2, [pc, #104]	@ (800b410 <HAL_RCC_OscConfig+0x4a8>)
 800b3a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b3ac:	f7fa f85e 	bl	800546c <HAL_GetTick>
 800b3b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3b2:	e008      	b.n	800b3c6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3b4:	f7fa f85a 	bl	800546c <HAL_GetTick>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	2b64      	cmp	r3, #100	@ 0x64
 800b3c0:	d901      	bls.n	800b3c6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	e1a2      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3c6:	4b12      	ldr	r3, [pc, #72]	@ (800b410 <HAL_RCC_OscConfig+0x4a8>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d0f0      	beq.n	800b3b4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d106      	bne.n	800b3e8 <HAL_RCC_OscConfig+0x480>
 800b3da:	4b0c      	ldr	r3, [pc, #48]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b3dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3de:	4a0b      	ldr	r2, [pc, #44]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b3e0:	f043 0301 	orr.w	r3, r3, #1
 800b3e4:	6713      	str	r3, [r2, #112]	@ 0x70
 800b3e6:	e032      	b.n	800b44e <HAL_RCC_OscConfig+0x4e6>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d111      	bne.n	800b414 <HAL_RCC_OscConfig+0x4ac>
 800b3f0:	4b06      	ldr	r3, [pc, #24]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b3f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3f4:	4a05      	ldr	r2, [pc, #20]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b3f6:	f023 0301 	bic.w	r3, r3, #1
 800b3fa:	6713      	str	r3, [r2, #112]	@ 0x70
 800b3fc:	4b03      	ldr	r3, [pc, #12]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b3fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b400:	4a02      	ldr	r2, [pc, #8]	@ (800b40c <HAL_RCC_OscConfig+0x4a4>)
 800b402:	f023 0304 	bic.w	r3, r3, #4
 800b406:	6713      	str	r3, [r2, #112]	@ 0x70
 800b408:	e021      	b.n	800b44e <HAL_RCC_OscConfig+0x4e6>
 800b40a:	bf00      	nop
 800b40c:	58024400 	.word	0x58024400
 800b410:	58024800 	.word	0x58024800
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	2b05      	cmp	r3, #5
 800b41a:	d10c      	bne.n	800b436 <HAL_RCC_OscConfig+0x4ce>
 800b41c:	4b83      	ldr	r3, [pc, #524]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b41e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b420:	4a82      	ldr	r2, [pc, #520]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b422:	f043 0304 	orr.w	r3, r3, #4
 800b426:	6713      	str	r3, [r2, #112]	@ 0x70
 800b428:	4b80      	ldr	r3, [pc, #512]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b42a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b42c:	4a7f      	ldr	r2, [pc, #508]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b42e:	f043 0301 	orr.w	r3, r3, #1
 800b432:	6713      	str	r3, [r2, #112]	@ 0x70
 800b434:	e00b      	b.n	800b44e <HAL_RCC_OscConfig+0x4e6>
 800b436:	4b7d      	ldr	r3, [pc, #500]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b43a:	4a7c      	ldr	r2, [pc, #496]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b43c:	f023 0301 	bic.w	r3, r3, #1
 800b440:	6713      	str	r3, [r2, #112]	@ 0x70
 800b442:	4b7a      	ldr	r3, [pc, #488]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b446:	4a79      	ldr	r2, [pc, #484]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b448:	f023 0304 	bic.w	r3, r3, #4
 800b44c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d015      	beq.n	800b482 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b456:	f7fa f809 	bl	800546c <HAL_GetTick>
 800b45a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b45c:	e00a      	b.n	800b474 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b45e:	f7fa f805 	bl	800546c <HAL_GetTick>
 800b462:	4602      	mov	r2, r0
 800b464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d901      	bls.n	800b474 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b470:	2303      	movs	r3, #3
 800b472:	e14b      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b474:	4b6d      	ldr	r3, [pc, #436]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b478:	f003 0302 	and.w	r3, r3, #2
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d0ee      	beq.n	800b45e <HAL_RCC_OscConfig+0x4f6>
 800b480:	e014      	b.n	800b4ac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b482:	f7f9 fff3 	bl	800546c <HAL_GetTick>
 800b486:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b488:	e00a      	b.n	800b4a0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b48a:	f7f9 ffef 	bl	800546c <HAL_GetTick>
 800b48e:	4602      	mov	r2, r0
 800b490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b498:	4293      	cmp	r3, r2
 800b49a:	d901      	bls.n	800b4a0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b49c:	2303      	movs	r3, #3
 800b49e:	e135      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b4a0:	4b62      	ldr	r3, [pc, #392]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b4a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4a4:	f003 0302 	and.w	r3, r3, #2
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1ee      	bne.n	800b48a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f000 812a 	beq.w	800b70a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b4b6:	4b5d      	ldr	r3, [pc, #372]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b4be:	2b18      	cmp	r3, #24
 800b4c0:	f000 80ba 	beq.w	800b638 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	f040 8095 	bne.w	800b5f8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4ce:	4b57      	ldr	r3, [pc, #348]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a56      	ldr	r2, [pc, #344]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b4d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b4d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4da:	f7f9 ffc7 	bl	800546c <HAL_GetTick>
 800b4de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b4e0:	e008      	b.n	800b4f4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4e2:	f7f9 ffc3 	bl	800546c <HAL_GetTick>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	2b02      	cmp	r3, #2
 800b4ee:	d901      	bls.n	800b4f4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	e10b      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b4f4:	4b4d      	ldr	r3, [pc, #308]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1f0      	bne.n	800b4e2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b500:	4b4a      	ldr	r3, [pc, #296]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b502:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b504:	4b4a      	ldr	r3, [pc, #296]	@ (800b630 <HAL_RCC_OscConfig+0x6c8>)
 800b506:	4013      	ands	r3, r2
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b510:	0112      	lsls	r2, r2, #4
 800b512:	430a      	orrs	r2, r1
 800b514:	4945      	ldr	r1, [pc, #276]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b516:	4313      	orrs	r3, r2
 800b518:	628b      	str	r3, [r1, #40]	@ 0x28
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b51e:	3b01      	subs	r3, #1
 800b520:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b528:	3b01      	subs	r3, #1
 800b52a:	025b      	lsls	r3, r3, #9
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	431a      	orrs	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b534:	3b01      	subs	r3, #1
 800b536:	041b      	lsls	r3, r3, #16
 800b538:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b53c:	431a      	orrs	r2, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b542:	3b01      	subs	r3, #1
 800b544:	061b      	lsls	r3, r3, #24
 800b546:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b54a:	4938      	ldr	r1, [pc, #224]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b54c:	4313      	orrs	r3, r2
 800b54e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b550:	4b36      	ldr	r3, [pc, #216]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b554:	4a35      	ldr	r2, [pc, #212]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b556:	f023 0301 	bic.w	r3, r3, #1
 800b55a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b55c:	4b33      	ldr	r3, [pc, #204]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b55e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b560:	4b34      	ldr	r3, [pc, #208]	@ (800b634 <HAL_RCC_OscConfig+0x6cc>)
 800b562:	4013      	ands	r3, r2
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b568:	00d2      	lsls	r2, r2, #3
 800b56a:	4930      	ldr	r1, [pc, #192]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b56c:	4313      	orrs	r3, r2
 800b56e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b570:	4b2e      	ldr	r3, [pc, #184]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b574:	f023 020c 	bic.w	r2, r3, #12
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b57c:	492b      	ldr	r1, [pc, #172]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b57e:	4313      	orrs	r3, r2
 800b580:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b582:	4b2a      	ldr	r3, [pc, #168]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b586:	f023 0202 	bic.w	r2, r3, #2
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b58e:	4927      	ldr	r1, [pc, #156]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b590:	4313      	orrs	r3, r2
 800b592:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b594:	4b25      	ldr	r3, [pc, #148]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b598:	4a24      	ldr	r2, [pc, #144]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b59a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b59e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5a0:	4b22      	ldr	r3, [pc, #136]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b5a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a4:	4a21      	ldr	r2, [pc, #132]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b5a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b5aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b5ac:	4b1f      	ldr	r3, [pc, #124]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b0:	4a1e      	ldr	r2, [pc, #120]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b5b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b5b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b5b8:	4b1c      	ldr	r3, [pc, #112]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5bc:	4a1b      	ldr	r2, [pc, #108]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b5be:	f043 0301 	orr.w	r3, r3, #1
 800b5c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b5c4:	4b19      	ldr	r3, [pc, #100]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a18      	ldr	r2, [pc, #96]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b5ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b5ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5d0:	f7f9 ff4c 	bl	800546c <HAL_GetTick>
 800b5d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b5d6:	e008      	b.n	800b5ea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5d8:	f7f9 ff48 	bl	800546c <HAL_GetTick>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d901      	bls.n	800b5ea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b5e6:	2303      	movs	r3, #3
 800b5e8:	e090      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b5ea:	4b10      	ldr	r3, [pc, #64]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d0f0      	beq.n	800b5d8 <HAL_RCC_OscConfig+0x670>
 800b5f6:	e088      	b.n	800b70a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b5f8:	4b0c      	ldr	r3, [pc, #48]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a0b      	ldr	r2, [pc, #44]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b5fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b604:	f7f9 ff32 	bl	800546c <HAL_GetTick>
 800b608:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b60a:	e008      	b.n	800b61e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b60c:	f7f9 ff2e 	bl	800546c <HAL_GetTick>
 800b610:	4602      	mov	r2, r0
 800b612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	2b02      	cmp	r3, #2
 800b618:	d901      	bls.n	800b61e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e076      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b61e:	4b03      	ldr	r3, [pc, #12]	@ (800b62c <HAL_RCC_OscConfig+0x6c4>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1f0      	bne.n	800b60c <HAL_RCC_OscConfig+0x6a4>
 800b62a:	e06e      	b.n	800b70a <HAL_RCC_OscConfig+0x7a2>
 800b62c:	58024400 	.word	0x58024400
 800b630:	fffffc0c 	.word	0xfffffc0c
 800b634:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b638:	4b36      	ldr	r3, [pc, #216]	@ (800b714 <HAL_RCC_OscConfig+0x7ac>)
 800b63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b63c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b63e:	4b35      	ldr	r3, [pc, #212]	@ (800b714 <HAL_RCC_OscConfig+0x7ac>)
 800b640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b642:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d031      	beq.n	800b6b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	f003 0203 	and.w	r2, r3, #3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b656:	429a      	cmp	r2, r3
 800b658:	d12a      	bne.n	800b6b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	091b      	lsrs	r3, r3, #4
 800b65e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b666:	429a      	cmp	r2, r3
 800b668:	d122      	bne.n	800b6b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b674:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b676:	429a      	cmp	r2, r3
 800b678:	d11a      	bne.n	800b6b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	0a5b      	lsrs	r3, r3, #9
 800b67e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b686:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b688:	429a      	cmp	r2, r3
 800b68a:	d111      	bne.n	800b6b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	0c1b      	lsrs	r3, r3, #16
 800b690:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b698:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d108      	bne.n	800b6b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	0e1b      	lsrs	r3, r3, #24
 800b6a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d001      	beq.n	800b6b4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	e02b      	b.n	800b70c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b6b4:	4b17      	ldr	r3, [pc, #92]	@ (800b714 <HAL_RCC_OscConfig+0x7ac>)
 800b6b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6b8:	08db      	lsrs	r3, r3, #3
 800b6ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6c4:	693a      	ldr	r2, [r7, #16]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d01f      	beq.n	800b70a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b6ca:	4b12      	ldr	r3, [pc, #72]	@ (800b714 <HAL_RCC_OscConfig+0x7ac>)
 800b6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ce:	4a11      	ldr	r2, [pc, #68]	@ (800b714 <HAL_RCC_OscConfig+0x7ac>)
 800b6d0:	f023 0301 	bic.w	r3, r3, #1
 800b6d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b6d6:	f7f9 fec9 	bl	800546c <HAL_GetTick>
 800b6da:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b6dc:	bf00      	nop
 800b6de:	f7f9 fec5 	bl	800546c <HAL_GetTick>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d0f9      	beq.n	800b6de <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b6ea:	4b0a      	ldr	r3, [pc, #40]	@ (800b714 <HAL_RCC_OscConfig+0x7ac>)
 800b6ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6ee:	4b0a      	ldr	r3, [pc, #40]	@ (800b718 <HAL_RCC_OscConfig+0x7b0>)
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b6f6:	00d2      	lsls	r2, r2, #3
 800b6f8:	4906      	ldr	r1, [pc, #24]	@ (800b714 <HAL_RCC_OscConfig+0x7ac>)
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b6fe:	4b05      	ldr	r3, [pc, #20]	@ (800b714 <HAL_RCC_OscConfig+0x7ac>)
 800b700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b702:	4a04      	ldr	r2, [pc, #16]	@ (800b714 <HAL_RCC_OscConfig+0x7ac>)
 800b704:	f043 0301 	orr.w	r3, r3, #1
 800b708:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3730      	adds	r7, #48	@ 0x30
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	58024400 	.word	0x58024400
 800b718:	ffff0007 	.word	0xffff0007

0800b71c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d101      	bne.n	800b730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	e19c      	b.n	800ba6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b730:	4b8a      	ldr	r3, [pc, #552]	@ (800b95c <HAL_RCC_ClockConfig+0x240>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 030f 	and.w	r3, r3, #15
 800b738:	683a      	ldr	r2, [r7, #0]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d910      	bls.n	800b760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b73e:	4b87      	ldr	r3, [pc, #540]	@ (800b95c <HAL_RCC_ClockConfig+0x240>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f023 020f 	bic.w	r2, r3, #15
 800b746:	4985      	ldr	r1, [pc, #532]	@ (800b95c <HAL_RCC_ClockConfig+0x240>)
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b74e:	4b83      	ldr	r3, [pc, #524]	@ (800b95c <HAL_RCC_ClockConfig+0x240>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f003 030f 	and.w	r3, r3, #15
 800b756:	683a      	ldr	r2, [r7, #0]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d001      	beq.n	800b760 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	e184      	b.n	800ba6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 0304 	and.w	r3, r3, #4
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d010      	beq.n	800b78e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	691a      	ldr	r2, [r3, #16]
 800b770:	4b7b      	ldr	r3, [pc, #492]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b778:	429a      	cmp	r2, r3
 800b77a:	d908      	bls.n	800b78e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b77c:	4b78      	ldr	r3, [pc, #480]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	691b      	ldr	r3, [r3, #16]
 800b788:	4975      	ldr	r1, [pc, #468]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b78a:	4313      	orrs	r3, r2
 800b78c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f003 0308 	and.w	r3, r3, #8
 800b796:	2b00      	cmp	r3, #0
 800b798:	d010      	beq.n	800b7bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	695a      	ldr	r2, [r3, #20]
 800b79e:	4b70      	ldr	r3, [pc, #448]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b7a0:	69db      	ldr	r3, [r3, #28]
 800b7a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d908      	bls.n	800b7bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b7aa:	4b6d      	ldr	r3, [pc, #436]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b7ac:	69db      	ldr	r3, [r3, #28]
 800b7ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	695b      	ldr	r3, [r3, #20]
 800b7b6:	496a      	ldr	r1, [pc, #424]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f003 0310 	and.w	r3, r3, #16
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d010      	beq.n	800b7ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	699a      	ldr	r2, [r3, #24]
 800b7cc:	4b64      	ldr	r3, [pc, #400]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b7ce:	69db      	ldr	r3, [r3, #28]
 800b7d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d908      	bls.n	800b7ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b7d8:	4b61      	ldr	r3, [pc, #388]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b7da:	69db      	ldr	r3, [r3, #28]
 800b7dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	495e      	ldr	r1, [pc, #376]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 0320 	and.w	r3, r3, #32
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d010      	beq.n	800b818 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	69da      	ldr	r2, [r3, #28]
 800b7fa:	4b59      	ldr	r3, [pc, #356]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b802:	429a      	cmp	r2, r3
 800b804:	d908      	bls.n	800b818 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b806:	4b56      	ldr	r3, [pc, #344]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	69db      	ldr	r3, [r3, #28]
 800b812:	4953      	ldr	r1, [pc, #332]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b814:	4313      	orrs	r3, r2
 800b816:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0302 	and.w	r3, r3, #2
 800b820:	2b00      	cmp	r3, #0
 800b822:	d010      	beq.n	800b846 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	68da      	ldr	r2, [r3, #12]
 800b828:	4b4d      	ldr	r3, [pc, #308]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	f003 030f 	and.w	r3, r3, #15
 800b830:	429a      	cmp	r2, r3
 800b832:	d908      	bls.n	800b846 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b834:	4b4a      	ldr	r3, [pc, #296]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b836:	699b      	ldr	r3, [r3, #24]
 800b838:	f023 020f 	bic.w	r2, r3, #15
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	4947      	ldr	r1, [pc, #284]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b842:	4313      	orrs	r3, r2
 800b844:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d055      	beq.n	800b8fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b852:	4b43      	ldr	r3, [pc, #268]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b854:	699b      	ldr	r3, [r3, #24]
 800b856:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	4940      	ldr	r1, [pc, #256]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b860:	4313      	orrs	r3, r2
 800b862:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d107      	bne.n	800b87c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b86c:	4b3c      	ldr	r3, [pc, #240]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b874:	2b00      	cmp	r3, #0
 800b876:	d121      	bne.n	800b8bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	e0f6      	b.n	800ba6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	2b03      	cmp	r3, #3
 800b882:	d107      	bne.n	800b894 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b884:	4b36      	ldr	r3, [pc, #216]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d115      	bne.n	800b8bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	e0ea      	b.n	800ba6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d107      	bne.n	800b8ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b89c:	4b30      	ldr	r3, [pc, #192]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d109      	bne.n	800b8bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e0de      	b.n	800ba6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8ac:	4b2c      	ldr	r3, [pc, #176]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f003 0304 	and.w	r3, r3, #4
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d101      	bne.n	800b8bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	e0d6      	b.n	800ba6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b8bc:	4b28      	ldr	r3, [pc, #160]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	f023 0207 	bic.w	r2, r3, #7
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	4925      	ldr	r1, [pc, #148]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8ce:	f7f9 fdcd 	bl	800546c <HAL_GetTick>
 800b8d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8d4:	e00a      	b.n	800b8ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8d6:	f7f9 fdc9 	bl	800546c <HAL_GetTick>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d901      	bls.n	800b8ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	e0be      	b.n	800ba6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8ec:	4b1c      	ldr	r3, [pc, #112]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b8ee:	691b      	ldr	r3, [r3, #16]
 800b8f0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	00db      	lsls	r3, r3, #3
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d1eb      	bne.n	800b8d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f003 0302 	and.w	r3, r3, #2
 800b906:	2b00      	cmp	r3, #0
 800b908:	d010      	beq.n	800b92c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	68da      	ldr	r2, [r3, #12]
 800b90e:	4b14      	ldr	r3, [pc, #80]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b910:	699b      	ldr	r3, [r3, #24]
 800b912:	f003 030f 	and.w	r3, r3, #15
 800b916:	429a      	cmp	r2, r3
 800b918:	d208      	bcs.n	800b92c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b91a:	4b11      	ldr	r3, [pc, #68]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b91c:	699b      	ldr	r3, [r3, #24]
 800b91e:	f023 020f 	bic.w	r2, r3, #15
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	490e      	ldr	r1, [pc, #56]	@ (800b960 <HAL_RCC_ClockConfig+0x244>)
 800b928:	4313      	orrs	r3, r2
 800b92a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b92c:	4b0b      	ldr	r3, [pc, #44]	@ (800b95c <HAL_RCC_ClockConfig+0x240>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f003 030f 	and.w	r3, r3, #15
 800b934:	683a      	ldr	r2, [r7, #0]
 800b936:	429a      	cmp	r2, r3
 800b938:	d214      	bcs.n	800b964 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b93a:	4b08      	ldr	r3, [pc, #32]	@ (800b95c <HAL_RCC_ClockConfig+0x240>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f023 020f 	bic.w	r2, r3, #15
 800b942:	4906      	ldr	r1, [pc, #24]	@ (800b95c <HAL_RCC_ClockConfig+0x240>)
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	4313      	orrs	r3, r2
 800b948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b94a:	4b04      	ldr	r3, [pc, #16]	@ (800b95c <HAL_RCC_ClockConfig+0x240>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f003 030f 	and.w	r3, r3, #15
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	429a      	cmp	r2, r3
 800b956:	d005      	beq.n	800b964 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b958:	2301      	movs	r3, #1
 800b95a:	e086      	b.n	800ba6a <HAL_RCC_ClockConfig+0x34e>
 800b95c:	52002000 	.word	0x52002000
 800b960:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 0304 	and.w	r3, r3, #4
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d010      	beq.n	800b992 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	691a      	ldr	r2, [r3, #16]
 800b974:	4b3f      	ldr	r3, [pc, #252]	@ (800ba74 <HAL_RCC_ClockConfig+0x358>)
 800b976:	699b      	ldr	r3, [r3, #24]
 800b978:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d208      	bcs.n	800b992 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b980:	4b3c      	ldr	r3, [pc, #240]	@ (800ba74 <HAL_RCC_ClockConfig+0x358>)
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	691b      	ldr	r3, [r3, #16]
 800b98c:	4939      	ldr	r1, [pc, #228]	@ (800ba74 <HAL_RCC_ClockConfig+0x358>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f003 0308 	and.w	r3, r3, #8
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d010      	beq.n	800b9c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	695a      	ldr	r2, [r3, #20]
 800b9a2:	4b34      	ldr	r3, [pc, #208]	@ (800ba74 <HAL_RCC_ClockConfig+0x358>)
 800b9a4:	69db      	ldr	r3, [r3, #28]
 800b9a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d208      	bcs.n	800b9c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b9ae:	4b31      	ldr	r3, [pc, #196]	@ (800ba74 <HAL_RCC_ClockConfig+0x358>)
 800b9b0:	69db      	ldr	r3, [r3, #28]
 800b9b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	492e      	ldr	r1, [pc, #184]	@ (800ba74 <HAL_RCC_ClockConfig+0x358>)
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 0310 	and.w	r3, r3, #16
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d010      	beq.n	800b9ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	699a      	ldr	r2, [r3, #24]
 800b9d0:	4b28      	ldr	r3, [pc, #160]	@ (800ba74 <HAL_RCC_ClockConfig+0x358>)
 800b9d2:	69db      	ldr	r3, [r3, #28]
 800b9d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d208      	bcs.n	800b9ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b9dc:	4b25      	ldr	r3, [pc, #148]	@ (800ba74 <HAL_RCC_ClockConfig+0x358>)
 800b9de:	69db      	ldr	r3, [r3, #28]
 800b9e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	699b      	ldr	r3, [r3, #24]
 800b9e8:	4922      	ldr	r1, [pc, #136]	@ (800ba74 <HAL_RCC_ClockConfig+0x358>)
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 0320 	and.w	r3, r3, #32
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d010      	beq.n	800ba1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	69da      	ldr	r2, [r3, #28]
 800b9fe:	4b1d      	ldr	r3, [pc, #116]	@ (800ba74 <HAL_RCC_ClockConfig+0x358>)
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d208      	bcs.n	800ba1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ba0a:	4b1a      	ldr	r3, [pc, #104]	@ (800ba74 <HAL_RCC_ClockConfig+0x358>)
 800ba0c:	6a1b      	ldr	r3, [r3, #32]
 800ba0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	69db      	ldr	r3, [r3, #28]
 800ba16:	4917      	ldr	r1, [pc, #92]	@ (800ba74 <HAL_RCC_ClockConfig+0x358>)
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ba1c:	f000 f834 	bl	800ba88 <HAL_RCC_GetSysClockFreq>
 800ba20:	4602      	mov	r2, r0
 800ba22:	4b14      	ldr	r3, [pc, #80]	@ (800ba74 <HAL_RCC_ClockConfig+0x358>)
 800ba24:	699b      	ldr	r3, [r3, #24]
 800ba26:	0a1b      	lsrs	r3, r3, #8
 800ba28:	f003 030f 	and.w	r3, r3, #15
 800ba2c:	4912      	ldr	r1, [pc, #72]	@ (800ba78 <HAL_RCC_ClockConfig+0x35c>)
 800ba2e:	5ccb      	ldrb	r3, [r1, r3]
 800ba30:	f003 031f 	and.w	r3, r3, #31
 800ba34:	fa22 f303 	lsr.w	r3, r2, r3
 800ba38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba3a:	4b0e      	ldr	r3, [pc, #56]	@ (800ba74 <HAL_RCC_ClockConfig+0x358>)
 800ba3c:	699b      	ldr	r3, [r3, #24]
 800ba3e:	f003 030f 	and.w	r3, r3, #15
 800ba42:	4a0d      	ldr	r2, [pc, #52]	@ (800ba78 <HAL_RCC_ClockConfig+0x35c>)
 800ba44:	5cd3      	ldrb	r3, [r2, r3]
 800ba46:	f003 031f 	and.w	r3, r3, #31
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ba50:	4a0a      	ldr	r2, [pc, #40]	@ (800ba7c <HAL_RCC_ClockConfig+0x360>)
 800ba52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ba54:	4a0a      	ldr	r2, [pc, #40]	@ (800ba80 <HAL_RCC_ClockConfig+0x364>)
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ba5a:	4b0a      	ldr	r3, [pc, #40]	@ (800ba84 <HAL_RCC_ClockConfig+0x368>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7f9 fcba 	bl	80053d8 <HAL_InitTick>
 800ba64:	4603      	mov	r3, r0
 800ba66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3718      	adds	r7, #24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	58024400 	.word	0x58024400
 800ba78:	08016b00 	.word	0x08016b00
 800ba7c:	24000008 	.word	0x24000008
 800ba80:	24000004 	.word	0x24000004
 800ba84:	2400000c 	.word	0x2400000c

0800ba88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b089      	sub	sp, #36	@ 0x24
 800ba8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba8e:	4bb3      	ldr	r3, [pc, #716]	@ (800bd5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ba96:	2b18      	cmp	r3, #24
 800ba98:	f200 8155 	bhi.w	800bd46 <HAL_RCC_GetSysClockFreq+0x2be>
 800ba9c:	a201      	add	r2, pc, #4	@ (adr r2, 800baa4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ba9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa2:	bf00      	nop
 800baa4:	0800bb09 	.word	0x0800bb09
 800baa8:	0800bd47 	.word	0x0800bd47
 800baac:	0800bd47 	.word	0x0800bd47
 800bab0:	0800bd47 	.word	0x0800bd47
 800bab4:	0800bd47 	.word	0x0800bd47
 800bab8:	0800bd47 	.word	0x0800bd47
 800babc:	0800bd47 	.word	0x0800bd47
 800bac0:	0800bd47 	.word	0x0800bd47
 800bac4:	0800bb2f 	.word	0x0800bb2f
 800bac8:	0800bd47 	.word	0x0800bd47
 800bacc:	0800bd47 	.word	0x0800bd47
 800bad0:	0800bd47 	.word	0x0800bd47
 800bad4:	0800bd47 	.word	0x0800bd47
 800bad8:	0800bd47 	.word	0x0800bd47
 800badc:	0800bd47 	.word	0x0800bd47
 800bae0:	0800bd47 	.word	0x0800bd47
 800bae4:	0800bb35 	.word	0x0800bb35
 800bae8:	0800bd47 	.word	0x0800bd47
 800baec:	0800bd47 	.word	0x0800bd47
 800baf0:	0800bd47 	.word	0x0800bd47
 800baf4:	0800bd47 	.word	0x0800bd47
 800baf8:	0800bd47 	.word	0x0800bd47
 800bafc:	0800bd47 	.word	0x0800bd47
 800bb00:	0800bd47 	.word	0x0800bd47
 800bb04:	0800bb3b 	.word	0x0800bb3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb08:	4b94      	ldr	r3, [pc, #592]	@ (800bd5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f003 0320 	and.w	r3, r3, #32
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d009      	beq.n	800bb28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb14:	4b91      	ldr	r3, [pc, #580]	@ (800bd5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	08db      	lsrs	r3, r3, #3
 800bb1a:	f003 0303 	and.w	r3, r3, #3
 800bb1e:	4a90      	ldr	r2, [pc, #576]	@ (800bd60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bb20:	fa22 f303 	lsr.w	r3, r2, r3
 800bb24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800bb26:	e111      	b.n	800bd4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bb28:	4b8d      	ldr	r3, [pc, #564]	@ (800bd60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bb2a:	61bb      	str	r3, [r7, #24]
      break;
 800bb2c:	e10e      	b.n	800bd4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800bb2e:	4b8d      	ldr	r3, [pc, #564]	@ (800bd64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bb30:	61bb      	str	r3, [r7, #24]
      break;
 800bb32:	e10b      	b.n	800bd4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800bb34:	4b8c      	ldr	r3, [pc, #560]	@ (800bd68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800bb36:	61bb      	str	r3, [r7, #24]
      break;
 800bb38:	e108      	b.n	800bd4c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb3a:	4b88      	ldr	r3, [pc, #544]	@ (800bd5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb3e:	f003 0303 	and.w	r3, r3, #3
 800bb42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800bb44:	4b85      	ldr	r3, [pc, #532]	@ (800bd5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb48:	091b      	lsrs	r3, r3, #4
 800bb4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bb50:	4b82      	ldr	r3, [pc, #520]	@ (800bd5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb54:	f003 0301 	and.w	r3, r3, #1
 800bb58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bb5a:	4b80      	ldr	r3, [pc, #512]	@ (800bd5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb5e:	08db      	lsrs	r3, r3, #3
 800bb60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	fb02 f303 	mul.w	r3, r2, r3
 800bb6a:	ee07 3a90 	vmov	s15, r3
 800bb6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 80e1 	beq.w	800bd40 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	2b02      	cmp	r3, #2
 800bb82:	f000 8083 	beq.w	800bc8c <HAL_RCC_GetSysClockFreq+0x204>
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	f200 80a1 	bhi.w	800bcd0 <HAL_RCC_GetSysClockFreq+0x248>
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d003      	beq.n	800bb9c <HAL_RCC_GetSysClockFreq+0x114>
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d056      	beq.n	800bc48 <HAL_RCC_GetSysClockFreq+0x1c0>
 800bb9a:	e099      	b.n	800bcd0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb9c:	4b6f      	ldr	r3, [pc, #444]	@ (800bd5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f003 0320 	and.w	r3, r3, #32
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d02d      	beq.n	800bc04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bba8:	4b6c      	ldr	r3, [pc, #432]	@ (800bd5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	08db      	lsrs	r3, r3, #3
 800bbae:	f003 0303 	and.w	r3, r3, #3
 800bbb2:	4a6b      	ldr	r2, [pc, #428]	@ (800bd60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bbb4:	fa22 f303 	lsr.w	r3, r2, r3
 800bbb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	ee07 3a90 	vmov	s15, r3
 800bbc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	ee07 3a90 	vmov	s15, r3
 800bbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbd2:	4b62      	ldr	r3, [pc, #392]	@ (800bd5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbda:	ee07 3a90 	vmov	s15, r3
 800bbde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbe2:	ed97 6a02 	vldr	s12, [r7, #8]
 800bbe6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800bd6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800bbea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbfe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800bc02:	e087      	b.n	800bd14 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	ee07 3a90 	vmov	s15, r3
 800bc0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc0e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800bd70 <HAL_RCC_GetSysClockFreq+0x2e8>
 800bc12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc16:	4b51      	ldr	r3, [pc, #324]	@ (800bd5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc1e:	ee07 3a90 	vmov	s15, r3
 800bc22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc26:	ed97 6a02 	vldr	s12, [r7, #8]
 800bc2a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800bd6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800bc2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bc46:	e065      	b.n	800bd14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	ee07 3a90 	vmov	s15, r3
 800bc4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc52:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800bd74 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bc56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc5a:	4b40      	ldr	r3, [pc, #256]	@ (800bd5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc62:	ee07 3a90 	vmov	s15, r3
 800bc66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800bc6e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bd6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800bc72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bc8a:	e043      	b.n	800bd14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	ee07 3a90 	vmov	s15, r3
 800bc92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc96:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800bd78 <HAL_RCC_GetSysClockFreq+0x2f0>
 800bc9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc9e:	4b2f      	ldr	r3, [pc, #188]	@ (800bd5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bca6:	ee07 3a90 	vmov	s15, r3
 800bcaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcae:	ed97 6a02 	vldr	s12, [r7, #8]
 800bcb2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800bd6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800bcb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bcce:	e021      	b.n	800bd14 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	ee07 3a90 	vmov	s15, r3
 800bcd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcda:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800bd74 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bcde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bce2:	4b1e      	ldr	r3, [pc, #120]	@ (800bd5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcea:	ee07 3a90 	vmov	s15, r3
 800bcee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcf2:	ed97 6a02 	vldr	s12, [r7, #8]
 800bcf6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800bd6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800bcfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bd12:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800bd14:	4b11      	ldr	r3, [pc, #68]	@ (800bd5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bd16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd18:	0a5b      	lsrs	r3, r3, #9
 800bd1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd1e:	3301      	adds	r3, #1
 800bd20:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	ee07 3a90 	vmov	s15, r3
 800bd28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bd2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd38:	ee17 3a90 	vmov	r3, s15
 800bd3c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800bd3e:	e005      	b.n	800bd4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800bd40:	2300      	movs	r3, #0
 800bd42:	61bb      	str	r3, [r7, #24]
      break;
 800bd44:	e002      	b.n	800bd4c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800bd46:	4b07      	ldr	r3, [pc, #28]	@ (800bd64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bd48:	61bb      	str	r3, [r7, #24]
      break;
 800bd4a:	bf00      	nop
  }

  return sysclockfreq;
 800bd4c:	69bb      	ldr	r3, [r7, #24]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3724      	adds	r7, #36	@ 0x24
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	58024400 	.word	0x58024400
 800bd60:	03d09000 	.word	0x03d09000
 800bd64:	003d0900 	.word	0x003d0900
 800bd68:	017d7840 	.word	0x017d7840
 800bd6c:	46000000 	.word	0x46000000
 800bd70:	4c742400 	.word	0x4c742400
 800bd74:	4a742400 	.word	0x4a742400
 800bd78:	4bbebc20 	.word	0x4bbebc20

0800bd7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bd7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd80:	b0c6      	sub	sp, #280	@ 0x118
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bd88:	2300      	movs	r3, #0
 800bd8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bd8e:	2300      	movs	r3, #0
 800bd90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bd94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800bda0:	2500      	movs	r5, #0
 800bda2:	ea54 0305 	orrs.w	r3, r4, r5
 800bda6:	d049      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800bda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bdb2:	d02f      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800bdb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bdb8:	d828      	bhi.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bdba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdbe:	d01a      	beq.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bdc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdc4:	d822      	bhi.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d003      	beq.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bdca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdce:	d007      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bdd0:	e01c      	b.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdd2:	4bab      	ldr	r3, [pc, #684]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bdd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdd6:	4aaa      	ldr	r2, [pc, #680]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bdd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bddc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bdde:	e01a      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bde0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bde4:	3308      	adds	r3, #8
 800bde6:	2102      	movs	r1, #2
 800bde8:	4618      	mov	r0, r3
 800bdea:	f001 f967 	bl	800d0bc <RCCEx_PLL2_Config>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bdf4:	e00f      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bdf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdfa:	3328      	adds	r3, #40	@ 0x28
 800bdfc:	2102      	movs	r1, #2
 800bdfe:	4618      	mov	r0, r3
 800be00:	f001 fa0e 	bl	800d220 <RCCEx_PLL3_Config>
 800be04:	4603      	mov	r3, r0
 800be06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800be0a:	e004      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be12:	e000      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800be14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10a      	bne.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800be1e:	4b98      	ldr	r3, [pc, #608]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800be26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be2c:	4a94      	ldr	r2, [pc, #592]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be2e:	430b      	orrs	r3, r1
 800be30:	6513      	str	r3, [r2, #80]	@ 0x50
 800be32:	e003      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800be3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800be48:	f04f 0900 	mov.w	r9, #0
 800be4c:	ea58 0309 	orrs.w	r3, r8, r9
 800be50:	d047      	beq.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800be52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be58:	2b04      	cmp	r3, #4
 800be5a:	d82a      	bhi.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800be5c:	a201      	add	r2, pc, #4	@ (adr r2, 800be64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800be5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be62:	bf00      	nop
 800be64:	0800be79 	.word	0x0800be79
 800be68:	0800be87 	.word	0x0800be87
 800be6c:	0800be9d 	.word	0x0800be9d
 800be70:	0800bebb 	.word	0x0800bebb
 800be74:	0800bebb 	.word	0x0800bebb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be78:	4b81      	ldr	r3, [pc, #516]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be7c:	4a80      	ldr	r2, [pc, #512]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800be84:	e01a      	b.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be8a:	3308      	adds	r3, #8
 800be8c:	2100      	movs	r1, #0
 800be8e:	4618      	mov	r0, r3
 800be90:	f001 f914 	bl	800d0bc <RCCEx_PLL2_Config>
 800be94:	4603      	mov	r3, r0
 800be96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800be9a:	e00f      	b.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bea0:	3328      	adds	r3, #40	@ 0x28
 800bea2:	2100      	movs	r1, #0
 800bea4:	4618      	mov	r0, r3
 800bea6:	f001 f9bb 	bl	800d220 <RCCEx_PLL3_Config>
 800beaa:	4603      	mov	r3, r0
 800beac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800beb0:	e004      	b.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800beb2:	2301      	movs	r3, #1
 800beb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800beb8:	e000      	b.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800beba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10a      	bne.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bec4:	4b6e      	ldr	r3, [pc, #440]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bec8:	f023 0107 	bic.w	r1, r3, #7
 800becc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bed2:	4a6b      	ldr	r2, [pc, #428]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bed4:	430b      	orrs	r3, r1
 800bed6:	6513      	str	r3, [r2, #80]	@ 0x50
 800bed8:	e003      	b.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bede:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800beee:	f04f 0b00 	mov.w	fp, #0
 800bef2:	ea5a 030b 	orrs.w	r3, sl, fp
 800bef6:	d05b      	beq.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800befc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bf00:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bf04:	d03b      	beq.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bf06:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bf0a:	d834      	bhi.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bf0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bf10:	d037      	beq.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bf12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bf16:	d82e      	bhi.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bf18:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bf1c:	d033      	beq.n	800bf86 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bf1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bf22:	d828      	bhi.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bf24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bf28:	d01a      	beq.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800bf2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bf2e:	d822      	bhi.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d003      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800bf34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf38:	d007      	beq.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800bf3a:	e01c      	b.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf3c:	4b50      	ldr	r3, [pc, #320]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bf3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf40:	4a4f      	ldr	r2, [pc, #316]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bf42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bf48:	e01e      	b.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf4e:	3308      	adds	r3, #8
 800bf50:	2100      	movs	r1, #0
 800bf52:	4618      	mov	r0, r3
 800bf54:	f001 f8b2 	bl	800d0bc <RCCEx_PLL2_Config>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bf5e:	e013      	b.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bf60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf64:	3328      	adds	r3, #40	@ 0x28
 800bf66:	2100      	movs	r1, #0
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f001 f959 	bl	800d220 <RCCEx_PLL3_Config>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bf74:	e008      	b.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf7c:	e004      	b.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bf7e:	bf00      	nop
 800bf80:	e002      	b.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bf82:	bf00      	nop
 800bf84:	e000      	b.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bf86:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10b      	bne.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bf90:	4b3b      	ldr	r3, [pc, #236]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bf92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf94:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800bf98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bfa0:	4a37      	ldr	r2, [pc, #220]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bfa2:	430b      	orrs	r3, r1
 800bfa4:	6593      	str	r3, [r2, #88]	@ 0x58
 800bfa6:	e003      	b.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bfb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bfbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bfc6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bfca:	460b      	mov	r3, r1
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	d05d      	beq.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bfd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bfd8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bfdc:	d03b      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bfde:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bfe2:	d834      	bhi.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bfe4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bfe8:	d037      	beq.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800bfea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bfee:	d82e      	bhi.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bff0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bff4:	d033      	beq.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800bff6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bffa:	d828      	bhi.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bffc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c000:	d01a      	beq.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800c002:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c006:	d822      	bhi.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d003      	beq.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c00c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c010:	d007      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c012:	e01c      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c014:	4b1a      	ldr	r3, [pc, #104]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c018:	4a19      	ldr	r2, [pc, #100]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c01a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c01e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c020:	e01e      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c026:	3308      	adds	r3, #8
 800c028:	2100      	movs	r1, #0
 800c02a:	4618      	mov	r0, r3
 800c02c:	f001 f846 	bl	800d0bc <RCCEx_PLL2_Config>
 800c030:	4603      	mov	r3, r0
 800c032:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c036:	e013      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c03c:	3328      	adds	r3, #40	@ 0x28
 800c03e:	2100      	movs	r1, #0
 800c040:	4618      	mov	r0, r3
 800c042:	f001 f8ed 	bl	800d220 <RCCEx_PLL3_Config>
 800c046:	4603      	mov	r3, r0
 800c048:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c04c:	e008      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c054:	e004      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c056:	bf00      	nop
 800c058:	e002      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c05a:	bf00      	nop
 800c05c:	e000      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c05e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c060:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c064:	2b00      	cmp	r3, #0
 800c066:	d10d      	bne.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c068:	4b05      	ldr	r3, [pc, #20]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c06a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c06c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c074:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c078:	4a01      	ldr	r2, [pc, #4]	@ (800c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c07a:	430b      	orrs	r3, r1
 800c07c:	6593      	str	r3, [r2, #88]	@ 0x58
 800c07e:	e005      	b.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800c080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c088:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c094:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c098:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c09c:	2300      	movs	r3, #0
 800c09e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c0a2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	d03a      	beq.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0b2:	2b30      	cmp	r3, #48	@ 0x30
 800c0b4:	d01f      	beq.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800c0b6:	2b30      	cmp	r3, #48	@ 0x30
 800c0b8:	d819      	bhi.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c0ba:	2b20      	cmp	r3, #32
 800c0bc:	d00c      	beq.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c0be:	2b20      	cmp	r3, #32
 800c0c0:	d815      	bhi.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d019      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c0c6:	2b10      	cmp	r3, #16
 800c0c8:	d111      	bne.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0ca:	4baa      	ldr	r3, [pc, #680]	@ (800c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ce:	4aa9      	ldr	r2, [pc, #676]	@ (800c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c0d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c0d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c0d6:	e011      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0dc:	3308      	adds	r3, #8
 800c0de:	2102      	movs	r1, #2
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f000 ffeb 	bl	800d0bc <RCCEx_PLL2_Config>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c0ec:	e006      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c0f4:	e002      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c0f6:	bf00      	nop
 800c0f8:	e000      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c0fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10a      	bne.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c104:	4b9b      	ldr	r3, [pc, #620]	@ (800c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c108:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c112:	4a98      	ldr	r2, [pc, #608]	@ (800c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c114:	430b      	orrs	r3, r1
 800c116:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c118:	e003      	b.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c11a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c11e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c12e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c132:	2300      	movs	r3, #0
 800c134:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c138:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800c13c:	460b      	mov	r3, r1
 800c13e:	4313      	orrs	r3, r2
 800c140:	d051      	beq.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c148:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c14c:	d035      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800c14e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c152:	d82e      	bhi.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c154:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c158:	d031      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x442>
 800c15a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c15e:	d828      	bhi.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c160:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c164:	d01a      	beq.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800c166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c16a:	d822      	bhi.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d003      	beq.n	800c178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800c170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c174:	d007      	beq.n	800c186 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800c176:	e01c      	b.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c178:	4b7e      	ldr	r3, [pc, #504]	@ (800c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c17c:	4a7d      	ldr	r2, [pc, #500]	@ (800c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c17e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c182:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c184:	e01c      	b.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c18a:	3308      	adds	r3, #8
 800c18c:	2100      	movs	r1, #0
 800c18e:	4618      	mov	r0, r3
 800c190:	f000 ff94 	bl	800d0bc <RCCEx_PLL2_Config>
 800c194:	4603      	mov	r3, r0
 800c196:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c19a:	e011      	b.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1a0:	3328      	adds	r3, #40	@ 0x28
 800c1a2:	2100      	movs	r1, #0
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f001 f83b 	bl	800d220 <RCCEx_PLL3_Config>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c1b0:	e006      	b.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1b8:	e002      	b.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c1ba:	bf00      	nop
 800c1bc:	e000      	b.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c1be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10a      	bne.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c1c8:	4b6a      	ldr	r3, [pc, #424]	@ (800c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c1ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1d6:	4a67      	ldr	r2, [pc, #412]	@ (800c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c1d8:	430b      	orrs	r3, r1
 800c1da:	6513      	str	r3, [r2, #80]	@ 0x50
 800c1dc:	e003      	b.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800c1f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c1fc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800c200:	460b      	mov	r3, r1
 800c202:	4313      	orrs	r3, r2
 800c204:	d053      	beq.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c20a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c20c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c210:	d033      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800c212:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c216:	d82c      	bhi.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c218:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c21c:	d02f      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800c21e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c222:	d826      	bhi.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c224:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c228:	d02b      	beq.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c22a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c22e:	d820      	bhi.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c230:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c234:	d012      	beq.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800c236:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c23a:	d81a      	bhi.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d022      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800c240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c244:	d115      	bne.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c24a:	3308      	adds	r3, #8
 800c24c:	2101      	movs	r1, #1
 800c24e:	4618      	mov	r0, r3
 800c250:	f000 ff34 	bl	800d0bc <RCCEx_PLL2_Config>
 800c254:	4603      	mov	r3, r0
 800c256:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c25a:	e015      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c260:	3328      	adds	r3, #40	@ 0x28
 800c262:	2101      	movs	r1, #1
 800c264:	4618      	mov	r0, r3
 800c266:	f000 ffdb 	bl	800d220 <RCCEx_PLL3_Config>
 800c26a:	4603      	mov	r3, r0
 800c26c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c270:	e00a      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c278:	e006      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c27a:	bf00      	nop
 800c27c:	e004      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c27e:	bf00      	nop
 800c280:	e002      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c282:	bf00      	nop
 800c284:	e000      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c286:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c288:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d10a      	bne.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c290:	4b38      	ldr	r3, [pc, #224]	@ (800c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c294:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c29c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c29e:	4a35      	ldr	r2, [pc, #212]	@ (800c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c2a0:	430b      	orrs	r3, r1
 800c2a2:	6513      	str	r3, [r2, #80]	@ 0x50
 800c2a4:	e003      	b.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c2ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800c2ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c2be:	2300      	movs	r3, #0
 800c2c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c2c4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	d058      	beq.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c2d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c2da:	d033      	beq.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c2dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c2e0:	d82c      	bhi.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c2e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2e6:	d02f      	beq.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c2e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2ec:	d826      	bhi.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c2ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c2f2:	d02b      	beq.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c2f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c2f8:	d820      	bhi.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c2fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c2fe:	d012      	beq.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c304:	d81a      	bhi.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c306:	2b00      	cmp	r3, #0
 800c308:	d022      	beq.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c30a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c30e:	d115      	bne.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c314:	3308      	adds	r3, #8
 800c316:	2101      	movs	r1, #1
 800c318:	4618      	mov	r0, r3
 800c31a:	f000 fecf 	bl	800d0bc <RCCEx_PLL2_Config>
 800c31e:	4603      	mov	r3, r0
 800c320:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c324:	e015      	b.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c32a:	3328      	adds	r3, #40	@ 0x28
 800c32c:	2101      	movs	r1, #1
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 ff76 	bl	800d220 <RCCEx_PLL3_Config>
 800c334:	4603      	mov	r3, r0
 800c336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c33a:	e00a      	b.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c33c:	2301      	movs	r3, #1
 800c33e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c342:	e006      	b.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c344:	bf00      	nop
 800c346:	e004      	b.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c348:	bf00      	nop
 800c34a:	e002      	b.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c34c:	bf00      	nop
 800c34e:	e000      	b.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c350:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c352:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c356:	2b00      	cmp	r3, #0
 800c358:	d10e      	bne.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c35a:	4b06      	ldr	r3, [pc, #24]	@ (800c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c35c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c35e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c366:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c36a:	4a02      	ldr	r2, [pc, #8]	@ (800c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c36c:	430b      	orrs	r3, r1
 800c36e:	6593      	str	r3, [r2, #88]	@ 0x58
 800c370:	e006      	b.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c372:	bf00      	nop
 800c374:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c378:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c37c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c388:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c38c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c390:	2300      	movs	r3, #0
 800c392:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c396:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c39a:	460b      	mov	r3, r1
 800c39c:	4313      	orrs	r3, r2
 800c39e:	d037      	beq.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3aa:	d00e      	beq.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c3ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3b0:	d816      	bhi.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d018      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c3b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3ba:	d111      	bne.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3bc:	4bc4      	ldr	r3, [pc, #784]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3c0:	4ac3      	ldr	r2, [pc, #780]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c3c8:	e00f      	b.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3ce:	3308      	adds	r3, #8
 800c3d0:	2101      	movs	r1, #1
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f000 fe72 	bl	800d0bc <RCCEx_PLL2_Config>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c3de:	e004      	b.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c3e6:	e000      	b.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c3e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d10a      	bne.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c3f2:	4bb7      	ldr	r3, [pc, #732]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c400:	4ab3      	ldr	r2, [pc, #716]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c402:	430b      	orrs	r3, r1
 800c404:	6513      	str	r3, [r2, #80]	@ 0x50
 800c406:	e003      	b.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c40c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c418:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c41c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c420:	2300      	movs	r3, #0
 800c422:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c426:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c42a:	460b      	mov	r3, r1
 800c42c:	4313      	orrs	r3, r2
 800c42e:	d039      	beq.n	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c436:	2b03      	cmp	r3, #3
 800c438:	d81c      	bhi.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c43a:	a201      	add	r2, pc, #4	@ (adr r2, 800c440 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c440:	0800c47d 	.word	0x0800c47d
 800c444:	0800c451 	.word	0x0800c451
 800c448:	0800c45f 	.word	0x0800c45f
 800c44c:	0800c47d 	.word	0x0800c47d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c450:	4b9f      	ldr	r3, [pc, #636]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c454:	4a9e      	ldr	r2, [pc, #632]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c45a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c45c:	e00f      	b.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c462:	3308      	adds	r3, #8
 800c464:	2102      	movs	r1, #2
 800c466:	4618      	mov	r0, r3
 800c468:	f000 fe28 	bl	800d0bc <RCCEx_PLL2_Config>
 800c46c:	4603      	mov	r3, r0
 800c46e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c472:	e004      	b.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c47a:	e000      	b.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c47c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c47e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c482:	2b00      	cmp	r3, #0
 800c484:	d10a      	bne.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c486:	4b92      	ldr	r3, [pc, #584]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c48a:	f023 0103 	bic.w	r1, r3, #3
 800c48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c494:	4a8e      	ldr	r2, [pc, #568]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c496:	430b      	orrs	r3, r1
 800c498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c49a:	e003      	b.n	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c49c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c4b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c4ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c4be:	460b      	mov	r3, r1
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	f000 8099 	beq.w	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c4c6:	4b83      	ldr	r3, [pc, #524]	@ (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a82      	ldr	r2, [pc, #520]	@ (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c4cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c4d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c4d2:	f7f8 ffcb 	bl	800546c <HAL_GetTick>
 800c4d6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c4da:	e00b      	b.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c4dc:	f7f8 ffc6 	bl	800546c <HAL_GetTick>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	2b64      	cmp	r3, #100	@ 0x64
 800c4ea:	d903      	bls.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4f2:	e005      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c4f4:	4b77      	ldr	r3, [pc, #476]	@ (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d0ed      	beq.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c504:	2b00      	cmp	r3, #0
 800c506:	d173      	bne.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c508:	4b71      	ldr	r3, [pc, #452]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c50a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c510:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c514:	4053      	eors	r3, r2
 800c516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d015      	beq.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c51e:	4b6c      	ldr	r3, [pc, #432]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c526:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c52a:	4b69      	ldr	r3, [pc, #420]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c52c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c52e:	4a68      	ldr	r2, [pc, #416]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c534:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c536:	4b66      	ldr	r3, [pc, #408]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c53a:	4a65      	ldr	r2, [pc, #404]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c53c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c540:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c542:	4a63      	ldr	r2, [pc, #396]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c548:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c54e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c556:	d118      	bne.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c558:	f7f8 ff88 	bl	800546c <HAL_GetTick>
 800c55c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c560:	e00d      	b.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c562:	f7f8 ff83 	bl	800546c <HAL_GetTick>
 800c566:	4602      	mov	r2, r0
 800c568:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c56c:	1ad2      	subs	r2, r2, r3
 800c56e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c572:	429a      	cmp	r2, r3
 800c574:	d903      	bls.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c576:	2303      	movs	r3, #3
 800c578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c57c:	e005      	b.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c57e:	4b54      	ldr	r3, [pc, #336]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c582:	f003 0302 	and.w	r3, r3, #2
 800c586:	2b00      	cmp	r3, #0
 800c588:	d0eb      	beq.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c58a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d129      	bne.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c596:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c59a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c59e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5a2:	d10e      	bne.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c5a4:	4b4a      	ldr	r3, [pc, #296]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c5b4:	091a      	lsrs	r2, r3, #4
 800c5b6:	4b48      	ldr	r3, [pc, #288]	@ (800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	4a45      	ldr	r2, [pc, #276]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5bc:	430b      	orrs	r3, r1
 800c5be:	6113      	str	r3, [r2, #16]
 800c5c0:	e005      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c5c2:	4b43      	ldr	r3, [pc, #268]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	4a42      	ldr	r2, [pc, #264]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c5cc:	6113      	str	r3, [r2, #16]
 800c5ce:	4b40      	ldr	r3, [pc, #256]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c5da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5de:	4a3c      	ldr	r2, [pc, #240]	@ (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5e0:	430b      	orrs	r3, r1
 800c5e2:	6713      	str	r3, [r2, #112]	@ 0x70
 800c5e4:	e008      	b.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c5e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c5ee:	e003      	b.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c600:	f002 0301 	and.w	r3, r2, #1
 800c604:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c608:	2300      	movs	r3, #0
 800c60a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c60e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c612:	460b      	mov	r3, r1
 800c614:	4313      	orrs	r3, r2
 800c616:	f000 808f 	beq.w	800c738 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c61e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c620:	2b28      	cmp	r3, #40	@ 0x28
 800c622:	d871      	bhi.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c624:	a201      	add	r2, pc, #4	@ (adr r2, 800c62c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c62a:	bf00      	nop
 800c62c:	0800c711 	.word	0x0800c711
 800c630:	0800c709 	.word	0x0800c709
 800c634:	0800c709 	.word	0x0800c709
 800c638:	0800c709 	.word	0x0800c709
 800c63c:	0800c709 	.word	0x0800c709
 800c640:	0800c709 	.word	0x0800c709
 800c644:	0800c709 	.word	0x0800c709
 800c648:	0800c709 	.word	0x0800c709
 800c64c:	0800c6dd 	.word	0x0800c6dd
 800c650:	0800c709 	.word	0x0800c709
 800c654:	0800c709 	.word	0x0800c709
 800c658:	0800c709 	.word	0x0800c709
 800c65c:	0800c709 	.word	0x0800c709
 800c660:	0800c709 	.word	0x0800c709
 800c664:	0800c709 	.word	0x0800c709
 800c668:	0800c709 	.word	0x0800c709
 800c66c:	0800c6f3 	.word	0x0800c6f3
 800c670:	0800c709 	.word	0x0800c709
 800c674:	0800c709 	.word	0x0800c709
 800c678:	0800c709 	.word	0x0800c709
 800c67c:	0800c709 	.word	0x0800c709
 800c680:	0800c709 	.word	0x0800c709
 800c684:	0800c709 	.word	0x0800c709
 800c688:	0800c709 	.word	0x0800c709
 800c68c:	0800c711 	.word	0x0800c711
 800c690:	0800c709 	.word	0x0800c709
 800c694:	0800c709 	.word	0x0800c709
 800c698:	0800c709 	.word	0x0800c709
 800c69c:	0800c709 	.word	0x0800c709
 800c6a0:	0800c709 	.word	0x0800c709
 800c6a4:	0800c709 	.word	0x0800c709
 800c6a8:	0800c709 	.word	0x0800c709
 800c6ac:	0800c711 	.word	0x0800c711
 800c6b0:	0800c709 	.word	0x0800c709
 800c6b4:	0800c709 	.word	0x0800c709
 800c6b8:	0800c709 	.word	0x0800c709
 800c6bc:	0800c709 	.word	0x0800c709
 800c6c0:	0800c709 	.word	0x0800c709
 800c6c4:	0800c709 	.word	0x0800c709
 800c6c8:	0800c709 	.word	0x0800c709
 800c6cc:	0800c711 	.word	0x0800c711
 800c6d0:	58024400 	.word	0x58024400
 800c6d4:	58024800 	.word	0x58024800
 800c6d8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6e0:	3308      	adds	r3, #8
 800c6e2:	2101      	movs	r1, #1
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f000 fce9 	bl	800d0bc <RCCEx_PLL2_Config>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c6f0:	e00f      	b.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6f6:	3328      	adds	r3, #40	@ 0x28
 800c6f8:	2101      	movs	r1, #1
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f000 fd90 	bl	800d220 <RCCEx_PLL3_Config>
 800c700:	4603      	mov	r3, r0
 800c702:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c706:	e004      	b.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c708:	2301      	movs	r3, #1
 800c70a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c70e:	e000      	b.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c710:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c712:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c716:	2b00      	cmp	r3, #0
 800c718:	d10a      	bne.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c71a:	4bbf      	ldr	r3, [pc, #764]	@ (800ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c71c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c71e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c726:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c728:	4abb      	ldr	r2, [pc, #748]	@ (800ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c72a:	430b      	orrs	r3, r1
 800c72c:	6553      	str	r3, [r2, #84]	@ 0x54
 800c72e:	e003      	b.n	800c738 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c734:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c740:	f002 0302 	and.w	r3, r2, #2
 800c744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c748:	2300      	movs	r3, #0
 800c74a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c74e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c752:	460b      	mov	r3, r1
 800c754:	4313      	orrs	r3, r2
 800c756:	d041      	beq.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c75c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c75e:	2b05      	cmp	r3, #5
 800c760:	d824      	bhi.n	800c7ac <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c762:	a201      	add	r2, pc, #4	@ (adr r2, 800c768 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c768:	0800c7b5 	.word	0x0800c7b5
 800c76c:	0800c781 	.word	0x0800c781
 800c770:	0800c797 	.word	0x0800c797
 800c774:	0800c7b5 	.word	0x0800c7b5
 800c778:	0800c7b5 	.word	0x0800c7b5
 800c77c:	0800c7b5 	.word	0x0800c7b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c784:	3308      	adds	r3, #8
 800c786:	2101      	movs	r1, #1
 800c788:	4618      	mov	r0, r3
 800c78a:	f000 fc97 	bl	800d0bc <RCCEx_PLL2_Config>
 800c78e:	4603      	mov	r3, r0
 800c790:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c794:	e00f      	b.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c79a:	3328      	adds	r3, #40	@ 0x28
 800c79c:	2101      	movs	r1, #1
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f000 fd3e 	bl	800d220 <RCCEx_PLL3_Config>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c7aa:	e004      	b.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7b2:	e000      	b.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c7b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d10a      	bne.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c7be:	4b96      	ldr	r3, [pc, #600]	@ (800ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c7c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7c2:	f023 0107 	bic.w	r1, r3, #7
 800c7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7cc:	4a92      	ldr	r2, [pc, #584]	@ (800ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c7ce:	430b      	orrs	r3, r1
 800c7d0:	6553      	str	r3, [r2, #84]	@ 0x54
 800c7d2:	e003      	b.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e4:	f002 0304 	and.w	r3, r2, #4
 800c7e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c7f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	d044      	beq.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c804:	2b05      	cmp	r3, #5
 800c806:	d825      	bhi.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c808:	a201      	add	r2, pc, #4	@ (adr r2, 800c810 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c80e:	bf00      	nop
 800c810:	0800c85d 	.word	0x0800c85d
 800c814:	0800c829 	.word	0x0800c829
 800c818:	0800c83f 	.word	0x0800c83f
 800c81c:	0800c85d 	.word	0x0800c85d
 800c820:	0800c85d 	.word	0x0800c85d
 800c824:	0800c85d 	.word	0x0800c85d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c82c:	3308      	adds	r3, #8
 800c82e:	2101      	movs	r1, #1
 800c830:	4618      	mov	r0, r3
 800c832:	f000 fc43 	bl	800d0bc <RCCEx_PLL2_Config>
 800c836:	4603      	mov	r3, r0
 800c838:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c83c:	e00f      	b.n	800c85e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c842:	3328      	adds	r3, #40	@ 0x28
 800c844:	2101      	movs	r1, #1
 800c846:	4618      	mov	r0, r3
 800c848:	f000 fcea 	bl	800d220 <RCCEx_PLL3_Config>
 800c84c:	4603      	mov	r3, r0
 800c84e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c852:	e004      	b.n	800c85e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c85a:	e000      	b.n	800c85e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c85c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c85e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c862:	2b00      	cmp	r3, #0
 800c864:	d10b      	bne.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c866:	4b6c      	ldr	r3, [pc, #432]	@ (800ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c86a:	f023 0107 	bic.w	r1, r3, #7
 800c86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c876:	4a68      	ldr	r2, [pc, #416]	@ (800ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c878:	430b      	orrs	r3, r1
 800c87a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c87c:	e003      	b.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c87e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c882:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88e:	f002 0320 	and.w	r3, r2, #32
 800c892:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c896:	2300      	movs	r3, #0
 800c898:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c89c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	d055      	beq.n	800c952 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c8ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c8b2:	d033      	beq.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c8b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c8b8:	d82c      	bhi.n	800c914 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c8ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8be:	d02f      	beq.n	800c920 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c8c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8c4:	d826      	bhi.n	800c914 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c8c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c8ca:	d02b      	beq.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c8cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c8d0:	d820      	bhi.n	800c914 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c8d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8d6:	d012      	beq.n	800c8fe <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c8d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8dc:	d81a      	bhi.n	800c914 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d022      	beq.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c8e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8e6:	d115      	bne.n	800c914 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8ec:	3308      	adds	r3, #8
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f000 fbe3 	bl	800d0bc <RCCEx_PLL2_Config>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c8fc:	e015      	b.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c902:	3328      	adds	r3, #40	@ 0x28
 800c904:	2102      	movs	r1, #2
 800c906:	4618      	mov	r0, r3
 800c908:	f000 fc8a 	bl	800d220 <RCCEx_PLL3_Config>
 800c90c:	4603      	mov	r3, r0
 800c90e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c912:	e00a      	b.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c914:	2301      	movs	r3, #1
 800c916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c91a:	e006      	b.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c91c:	bf00      	nop
 800c91e:	e004      	b.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c920:	bf00      	nop
 800c922:	e002      	b.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c924:	bf00      	nop
 800c926:	e000      	b.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c92a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d10b      	bne.n	800c94a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c932:	4b39      	ldr	r3, [pc, #228]	@ (800ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c936:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c93e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c942:	4a35      	ldr	r2, [pc, #212]	@ (800ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c944:	430b      	orrs	r3, r1
 800c946:	6553      	str	r3, [r2, #84]	@ 0x54
 800c948:	e003      	b.n	800c952 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c94a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c94e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c95e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c962:	2300      	movs	r3, #0
 800c964:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c968:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c96c:	460b      	mov	r3, r1
 800c96e:	4313      	orrs	r3, r2
 800c970:	d058      	beq.n	800ca24 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c976:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c97a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c97e:	d033      	beq.n	800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c980:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c984:	d82c      	bhi.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c98a:	d02f      	beq.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c98c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c990:	d826      	bhi.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c992:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c996:	d02b      	beq.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c998:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c99c:	d820      	bhi.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c99e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c9a2:	d012      	beq.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c9a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c9a8:	d81a      	bhi.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d022      	beq.n	800c9f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c9ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9b2:	d115      	bne.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9b8:	3308      	adds	r3, #8
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f000 fb7d 	bl	800d0bc <RCCEx_PLL2_Config>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c9c8:	e015      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9ce:	3328      	adds	r3, #40	@ 0x28
 800c9d0:	2102      	movs	r1, #2
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f000 fc24 	bl	800d220 <RCCEx_PLL3_Config>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c9de:	e00a      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c9e6:	e006      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c9e8:	bf00      	nop
 800c9ea:	e004      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c9ec:	bf00      	nop
 800c9ee:	e002      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c9f0:	bf00      	nop
 800c9f2:	e000      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c9f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10e      	bne.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c9fe:	4b06      	ldr	r3, [pc, #24]	@ (800ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ca00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca02:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ca06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ca0e:	4a02      	ldr	r2, [pc, #8]	@ (800ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ca10:	430b      	orrs	r3, r1
 800ca12:	6593      	str	r3, [r2, #88]	@ 0x58
 800ca14:	e006      	b.n	800ca24 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ca16:	bf00      	nop
 800ca18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ca24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ca30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ca34:	2300      	movs	r3, #0
 800ca36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ca3a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ca3e:	460b      	mov	r3, r1
 800ca40:	4313      	orrs	r3, r2
 800ca42:	d055      	beq.n	800caf0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ca44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ca4c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ca50:	d033      	beq.n	800caba <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800ca52:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ca56:	d82c      	bhi.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ca58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca5c:	d02f      	beq.n	800cabe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800ca5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca62:	d826      	bhi.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ca64:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ca68:	d02b      	beq.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800ca6a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ca6e:	d820      	bhi.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ca70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca74:	d012      	beq.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800ca76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca7a:	d81a      	bhi.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d022      	beq.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ca80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca84:	d115      	bne.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca8a:	3308      	adds	r3, #8
 800ca8c:	2100      	movs	r1, #0
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f000 fb14 	bl	800d0bc <RCCEx_PLL2_Config>
 800ca94:	4603      	mov	r3, r0
 800ca96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ca9a:	e015      	b.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ca9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caa0:	3328      	adds	r3, #40	@ 0x28
 800caa2:	2102      	movs	r1, #2
 800caa4:	4618      	mov	r0, r3
 800caa6:	f000 fbbb 	bl	800d220 <RCCEx_PLL3_Config>
 800caaa:	4603      	mov	r3, r0
 800caac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cab0:	e00a      	b.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cab2:	2301      	movs	r3, #1
 800cab4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cab8:	e006      	b.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800caba:	bf00      	nop
 800cabc:	e004      	b.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cabe:	bf00      	nop
 800cac0:	e002      	b.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cac2:	bf00      	nop
 800cac4:	e000      	b.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d10b      	bne.n	800cae8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800cad0:	4ba0      	ldr	r3, [pc, #640]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cad4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800cad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cadc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cae0:	4a9c      	ldr	r2, [pc, #624]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cae2:	430b      	orrs	r3, r1
 800cae4:	6593      	str	r3, [r2, #88]	@ 0x58
 800cae6:	e003      	b.n	800caf0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cae8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800caec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800caf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf8:	f002 0308 	and.w	r3, r2, #8
 800cafc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cb00:	2300      	movs	r3, #0
 800cb02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cb06:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	d01e      	beq.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800cb10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb1c:	d10c      	bne.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cb1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb22:	3328      	adds	r3, #40	@ 0x28
 800cb24:	2102      	movs	r1, #2
 800cb26:	4618      	mov	r0, r3
 800cb28:	f000 fb7a 	bl	800d220 <RCCEx_PLL3_Config>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d002      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800cb32:	2301      	movs	r3, #1
 800cb34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800cb38:	4b86      	ldr	r3, [pc, #536]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb3c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cb40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb48:	4a82      	ldr	r2, [pc, #520]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb4a:	430b      	orrs	r3, r1
 800cb4c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cb4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb56:	f002 0310 	and.w	r3, r2, #16
 800cb5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cb5e:	2300      	movs	r3, #0
 800cb60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cb64:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800cb68:	460b      	mov	r3, r1
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	d01e      	beq.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800cb6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cb76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb7a:	d10c      	bne.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb80:	3328      	adds	r3, #40	@ 0x28
 800cb82:	2102      	movs	r1, #2
 800cb84:	4618      	mov	r0, r3
 800cb86:	f000 fb4b 	bl	800d220 <RCCEx_PLL3_Config>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d002      	beq.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800cb90:	2301      	movs	r3, #1
 800cb92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cb96:	4b6f      	ldr	r3, [pc, #444]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cb9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cba6:	4a6b      	ldr	r2, [pc, #428]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cba8:	430b      	orrs	r3, r1
 800cbaa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cbac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800cbb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cbba:	2300      	movs	r3, #0
 800cbbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cbbe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	d03e      	beq.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800cbc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cbd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cbd4:	d022      	beq.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800cbd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cbda:	d81b      	bhi.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d003      	beq.n	800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800cbe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbe4:	d00b      	beq.n	800cbfe <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800cbe6:	e015      	b.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbec:	3308      	adds	r3, #8
 800cbee:	2100      	movs	r1, #0
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f000 fa63 	bl	800d0bc <RCCEx_PLL2_Config>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800cbfc:	e00f      	b.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cbfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc02:	3328      	adds	r3, #40	@ 0x28
 800cc04:	2102      	movs	r1, #2
 800cc06:	4618      	mov	r0, r3
 800cc08:	f000 fb0a 	bl	800d220 <RCCEx_PLL3_Config>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800cc12:	e004      	b.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cc1a:	e000      	b.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800cc1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d10b      	bne.n	800cc3e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cc26:	4b4b      	ldr	r3, [pc, #300]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cc28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc2a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800cc2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cc36:	4a47      	ldr	r2, [pc, #284]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cc38:	430b      	orrs	r3, r1
 800cc3a:	6593      	str	r3, [r2, #88]	@ 0x58
 800cc3c:	e003      	b.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cc46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800cc52:	673b      	str	r3, [r7, #112]	@ 0x70
 800cc54:	2300      	movs	r3, #0
 800cc56:	677b      	str	r3, [r7, #116]	@ 0x74
 800cc58:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	d03b      	beq.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800cc62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cc6e:	d01f      	beq.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800cc70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cc74:	d818      	bhi.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800cc76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc7a:	d003      	beq.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800cc7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc80:	d007      	beq.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800cc82:	e011      	b.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc84:	4b33      	ldr	r3, [pc, #204]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cc86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc88:	4a32      	ldr	r2, [pc, #200]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cc8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800cc90:	e00f      	b.n	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc96:	3328      	adds	r3, #40	@ 0x28
 800cc98:	2101      	movs	r1, #1
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f000 fac0 	bl	800d220 <RCCEx_PLL3_Config>
 800cca0:	4603      	mov	r3, r0
 800cca2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800cca6:	e004      	b.n	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ccae:	e000      	b.n	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ccb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10b      	bne.n	800ccd2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ccba:	4b26      	ldr	r3, [pc, #152]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ccbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccbe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ccc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ccca:	4a22      	ldr	r2, [pc, #136]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cccc:	430b      	orrs	r3, r1
 800ccce:	6553      	str	r3, [r2, #84]	@ 0x54
 800ccd0:	e003      	b.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ccda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800cce6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cce8:	2300      	movs	r3, #0
 800ccea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ccec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	d034      	beq.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ccf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d003      	beq.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800cd00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd04:	d007      	beq.n	800cd16 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800cd06:	e011      	b.n	800cd2c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd08:	4b12      	ldr	r3, [pc, #72]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cd0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd0c:	4a11      	ldr	r2, [pc, #68]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cd0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cd14:	e00e      	b.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cd16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd1a:	3308      	adds	r3, #8
 800cd1c:	2102      	movs	r1, #2
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f000 f9cc 	bl	800d0bc <RCCEx_PLL2_Config>
 800cd24:	4603      	mov	r3, r0
 800cd26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cd2a:	e003      	b.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cd32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10d      	bne.n	800cd58 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cd3c:	4b05      	ldr	r3, [pc, #20]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cd3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cd44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd4a:	4a02      	ldr	r2, [pc, #8]	@ (800cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cd4c:	430b      	orrs	r3, r1
 800cd4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cd50:	e006      	b.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800cd52:	bf00      	nop
 800cd54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd68:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800cd6c:	663b      	str	r3, [r7, #96]	@ 0x60
 800cd6e:	2300      	movs	r3, #0
 800cd70:	667b      	str	r3, [r7, #100]	@ 0x64
 800cd72:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800cd76:	460b      	mov	r3, r1
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	d00c      	beq.n	800cd96 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cd7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd80:	3328      	adds	r3, #40	@ 0x28
 800cd82:	2102      	movs	r1, #2
 800cd84:	4618      	mov	r0, r3
 800cd86:	f000 fa4b 	bl	800d220 <RCCEx_PLL3_Config>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800cd90:	2301      	movs	r3, #1
 800cd92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cd96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800cda2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cda4:	2300      	movs	r3, #0
 800cda6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cda8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800cdac:	460b      	mov	r3, r1
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	d036      	beq.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800cdb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cdb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cdbc:	d018      	beq.n	800cdf0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800cdbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cdc2:	d811      	bhi.n	800cde8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cdc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cdc8:	d014      	beq.n	800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800cdca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cdce:	d80b      	bhi.n	800cde8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d011      	beq.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800cdd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdd8:	d106      	bne.n	800cde8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdda:	4bb7      	ldr	r3, [pc, #732]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdde:	4ab6      	ldr	r2, [pc, #728]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cde0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cde4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800cde6:	e008      	b.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cde8:	2301      	movs	r3, #1
 800cdea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cdee:	e004      	b.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cdf0:	bf00      	nop
 800cdf2:	e002      	b.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cdf4:	bf00      	nop
 800cdf6:	e000      	b.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cdf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d10a      	bne.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ce02:	4bad      	ldr	r3, [pc, #692]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ce04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ce0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ce10:	4aa9      	ldr	r2, [pc, #676]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ce12:	430b      	orrs	r3, r1
 800ce14:	6553      	str	r3, [r2, #84]	@ 0x54
 800ce16:	e003      	b.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ce20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce28:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ce2c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce2e:	2300      	movs	r3, #0
 800ce30:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ce36:	460b      	mov	r3, r1
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	d009      	beq.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ce3c:	4b9e      	ldr	r3, [pc, #632]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ce3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ce44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce4a:	4a9b      	ldr	r2, [pc, #620]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ce4c:	430b      	orrs	r3, r1
 800ce4e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ce50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce58:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ce5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce5e:	2300      	movs	r3, #0
 800ce60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce62:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ce66:	460b      	mov	r3, r1
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	d009      	beq.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ce6c:	4b92      	ldr	r3, [pc, #584]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ce6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce70:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ce74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ce7a:	4a8f      	ldr	r2, [pc, #572]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ce7c:	430b      	orrs	r3, r1
 800ce7e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ce80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce88:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ce8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce8e:	2300      	movs	r3, #0
 800ce90:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce92:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ce96:	460b      	mov	r3, r1
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	d00e      	beq.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ce9c:	4b86      	ldr	r3, [pc, #536]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ce9e:	691b      	ldr	r3, [r3, #16]
 800cea0:	4a85      	ldr	r2, [pc, #532]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cea2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cea6:	6113      	str	r3, [r2, #16]
 800cea8:	4b83      	ldr	r3, [pc, #524]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ceaa:	6919      	ldr	r1, [r3, #16]
 800ceac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ceb4:	4a80      	ldr	r2, [pc, #512]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ceb6:	430b      	orrs	r3, r1
 800ceb8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ceba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800cec6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cec8:	2300      	movs	r3, #0
 800ceca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cecc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ced0:	460b      	mov	r3, r1
 800ced2:	4313      	orrs	r3, r2
 800ced4:	d009      	beq.n	800ceea <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ced6:	4b78      	ldr	r3, [pc, #480]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ced8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ceda:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cee4:	4a74      	ldr	r2, [pc, #464]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cee6:	430b      	orrs	r3, r1
 800cee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ceea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800cef6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cef8:	2300      	movs	r3, #0
 800cefa:	637b      	str	r3, [r7, #52]	@ 0x34
 800cefc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800cf00:	460b      	mov	r3, r1
 800cf02:	4313      	orrs	r3, r2
 800cf04:	d00a      	beq.n	800cf1c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cf06:	4b6c      	ldr	r3, [pc, #432]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf0a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cf0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf16:	4a68      	ldr	r2, [pc, #416]	@ (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf18:	430b      	orrs	r3, r1
 800cf1a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cf1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf24:	2100      	movs	r1, #0
 800cf26:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cf28:	f003 0301 	and.w	r3, r3, #1
 800cf2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf2e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800cf32:	460b      	mov	r3, r1
 800cf34:	4313      	orrs	r3, r2
 800cf36:	d011      	beq.n	800cf5c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf3c:	3308      	adds	r3, #8
 800cf3e:	2100      	movs	r1, #0
 800cf40:	4618      	mov	r0, r3
 800cf42:	f000 f8bb 	bl	800d0bc <RCCEx_PLL2_Config>
 800cf46:	4603      	mov	r3, r0
 800cf48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cf4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d003      	beq.n	800cf5c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cf5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf64:	2100      	movs	r1, #0
 800cf66:	6239      	str	r1, [r7, #32]
 800cf68:	f003 0302 	and.w	r3, r3, #2
 800cf6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf6e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cf72:	460b      	mov	r3, r1
 800cf74:	4313      	orrs	r3, r2
 800cf76:	d011      	beq.n	800cf9c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cf78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf7c:	3308      	adds	r3, #8
 800cf7e:	2101      	movs	r1, #1
 800cf80:	4618      	mov	r0, r3
 800cf82:	f000 f89b 	bl	800d0bc <RCCEx_PLL2_Config>
 800cf86:	4603      	mov	r3, r0
 800cf88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cf8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d003      	beq.n	800cf9c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cf9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	61b9      	str	r1, [r7, #24]
 800cfa8:	f003 0304 	and.w	r3, r3, #4
 800cfac:	61fb      	str	r3, [r7, #28]
 800cfae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	d011      	beq.n	800cfdc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cfb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfbc:	3308      	adds	r3, #8
 800cfbe:	2102      	movs	r1, #2
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f000 f87b 	bl	800d0bc <RCCEx_PLL2_Config>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cfcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d003      	beq.n	800cfdc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cfd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cfdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe4:	2100      	movs	r1, #0
 800cfe6:	6139      	str	r1, [r7, #16]
 800cfe8:	f003 0308 	and.w	r3, r3, #8
 800cfec:	617b      	str	r3, [r7, #20]
 800cfee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cff2:	460b      	mov	r3, r1
 800cff4:	4313      	orrs	r3, r2
 800cff6:	d011      	beq.n	800d01c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cffc:	3328      	adds	r3, #40	@ 0x28
 800cffe:	2100      	movs	r1, #0
 800d000:	4618      	mov	r0, r3
 800d002:	f000 f90d 	bl	800d220 <RCCEx_PLL3_Config>
 800d006:	4603      	mov	r3, r0
 800d008:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800d00c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d010:	2b00      	cmp	r3, #0
 800d012:	d003      	beq.n	800d01c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d014:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d018:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d024:	2100      	movs	r1, #0
 800d026:	60b9      	str	r1, [r7, #8]
 800d028:	f003 0310 	and.w	r3, r3, #16
 800d02c:	60fb      	str	r3, [r7, #12]
 800d02e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d032:	460b      	mov	r3, r1
 800d034:	4313      	orrs	r3, r2
 800d036:	d011      	beq.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d03c:	3328      	adds	r3, #40	@ 0x28
 800d03e:	2101      	movs	r1, #1
 800d040:	4618      	mov	r0, r3
 800d042:	f000 f8ed 	bl	800d220 <RCCEx_PLL3_Config>
 800d046:	4603      	mov	r3, r0
 800d048:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d04c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d050:	2b00      	cmp	r3, #0
 800d052:	d003      	beq.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d058:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d064:	2100      	movs	r1, #0
 800d066:	6039      	str	r1, [r7, #0]
 800d068:	f003 0320 	and.w	r3, r3, #32
 800d06c:	607b      	str	r3, [r7, #4]
 800d06e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d072:	460b      	mov	r3, r1
 800d074:	4313      	orrs	r3, r2
 800d076:	d011      	beq.n	800d09c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d07c:	3328      	adds	r3, #40	@ 0x28
 800d07e:	2102      	movs	r1, #2
 800d080:	4618      	mov	r0, r3
 800d082:	f000 f8cd 	bl	800d220 <RCCEx_PLL3_Config>
 800d086:	4603      	mov	r3, r0
 800d088:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d08c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d090:	2b00      	cmp	r3, #0
 800d092:	d003      	beq.n	800d09c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d098:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800d09c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d101      	bne.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	e000      	b.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800d0a8:	2301      	movs	r3, #1
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d0b6:	bf00      	nop
 800d0b8:	58024400 	.word	0x58024400

0800d0bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d0ca:	4b53      	ldr	r3, [pc, #332]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d0cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0ce:	f003 0303 	and.w	r3, r3, #3
 800d0d2:	2b03      	cmp	r3, #3
 800d0d4:	d101      	bne.n	800d0da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e099      	b.n	800d20e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d0da:	4b4f      	ldr	r3, [pc, #316]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4a4e      	ldr	r2, [pc, #312]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d0e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d0e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0e6:	f7f8 f9c1 	bl	800546c <HAL_GetTick>
 800d0ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d0ec:	e008      	b.n	800d100 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d0ee:	f7f8 f9bd 	bl	800546c <HAL_GetTick>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	2b02      	cmp	r3, #2
 800d0fa:	d901      	bls.n	800d100 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d0fc:	2303      	movs	r3, #3
 800d0fe:	e086      	b.n	800d20e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d100:	4b45      	ldr	r3, [pc, #276]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d1f0      	bne.n	800d0ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d10c:	4b42      	ldr	r3, [pc, #264]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d110:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	031b      	lsls	r3, r3, #12
 800d11a:	493f      	ldr	r1, [pc, #252]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d11c:	4313      	orrs	r3, r2
 800d11e:	628b      	str	r3, [r1, #40]	@ 0x28
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	3b01      	subs	r3, #1
 800d126:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	3b01      	subs	r3, #1
 800d130:	025b      	lsls	r3, r3, #9
 800d132:	b29b      	uxth	r3, r3
 800d134:	431a      	orrs	r2, r3
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	3b01      	subs	r3, #1
 800d13c:	041b      	lsls	r3, r3, #16
 800d13e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d142:	431a      	orrs	r2, r3
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	691b      	ldr	r3, [r3, #16]
 800d148:	3b01      	subs	r3, #1
 800d14a:	061b      	lsls	r3, r3, #24
 800d14c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d150:	4931      	ldr	r1, [pc, #196]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d152:	4313      	orrs	r3, r2
 800d154:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d156:	4b30      	ldr	r3, [pc, #192]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d15a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	695b      	ldr	r3, [r3, #20]
 800d162:	492d      	ldr	r1, [pc, #180]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d164:	4313      	orrs	r3, r2
 800d166:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d168:	4b2b      	ldr	r3, [pc, #172]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d16a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d16c:	f023 0220 	bic.w	r2, r3, #32
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	699b      	ldr	r3, [r3, #24]
 800d174:	4928      	ldr	r1, [pc, #160]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d176:	4313      	orrs	r3, r2
 800d178:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d17a:	4b27      	ldr	r3, [pc, #156]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d17e:	4a26      	ldr	r2, [pc, #152]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d180:	f023 0310 	bic.w	r3, r3, #16
 800d184:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d186:	4b24      	ldr	r3, [pc, #144]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d188:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d18a:	4b24      	ldr	r3, [pc, #144]	@ (800d21c <RCCEx_PLL2_Config+0x160>)
 800d18c:	4013      	ands	r3, r2
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	69d2      	ldr	r2, [r2, #28]
 800d192:	00d2      	lsls	r2, r2, #3
 800d194:	4920      	ldr	r1, [pc, #128]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d196:	4313      	orrs	r3, r2
 800d198:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d19a:	4b1f      	ldr	r3, [pc, #124]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d19e:	4a1e      	ldr	r2, [pc, #120]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d1a0:	f043 0310 	orr.w	r3, r3, #16
 800d1a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d106      	bne.n	800d1ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d1ac:	4b1a      	ldr	r3, [pc, #104]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1b0:	4a19      	ldr	r2, [pc, #100]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d1b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d1b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d1b8:	e00f      	b.n	800d1da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d106      	bne.n	800d1ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d1c0:	4b15      	ldr	r3, [pc, #84]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d1c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1c4:	4a14      	ldr	r2, [pc, #80]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d1c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d1ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d1cc:	e005      	b.n	800d1da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d1ce:	4b12      	ldr	r3, [pc, #72]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d1d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1d2:	4a11      	ldr	r2, [pc, #68]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d1d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d1d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d1da:	4b0f      	ldr	r3, [pc, #60]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4a0e      	ldr	r2, [pc, #56]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d1e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d1e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1e6:	f7f8 f941 	bl	800546c <HAL_GetTick>
 800d1ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d1ec:	e008      	b.n	800d200 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d1ee:	f7f8 f93d 	bl	800546c <HAL_GetTick>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	2b02      	cmp	r3, #2
 800d1fa:	d901      	bls.n	800d200 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d1fc:	2303      	movs	r3, #3
 800d1fe:	e006      	b.n	800d20e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d200:	4b05      	ldr	r3, [pc, #20]	@ (800d218 <RCCEx_PLL2_Config+0x15c>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d0f0      	beq.n	800d1ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	58024400 	.word	0x58024400
 800d21c:	ffff0007 	.word	0xffff0007

0800d220 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d22e:	4b53      	ldr	r3, [pc, #332]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d232:	f003 0303 	and.w	r3, r3, #3
 800d236:	2b03      	cmp	r3, #3
 800d238:	d101      	bne.n	800d23e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d23a:	2301      	movs	r3, #1
 800d23c:	e099      	b.n	800d372 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d23e:	4b4f      	ldr	r3, [pc, #316]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4a4e      	ldr	r2, [pc, #312]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d244:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d24a:	f7f8 f90f 	bl	800546c <HAL_GetTick>
 800d24e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d250:	e008      	b.n	800d264 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d252:	f7f8 f90b 	bl	800546c <HAL_GetTick>
 800d256:	4602      	mov	r2, r0
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	1ad3      	subs	r3, r2, r3
 800d25c:	2b02      	cmp	r3, #2
 800d25e:	d901      	bls.n	800d264 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d260:	2303      	movs	r3, #3
 800d262:	e086      	b.n	800d372 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d264:	4b45      	ldr	r3, [pc, #276]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d1f0      	bne.n	800d252 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d270:	4b42      	ldr	r3, [pc, #264]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d274:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	051b      	lsls	r3, r3, #20
 800d27e:	493f      	ldr	r1, [pc, #252]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d280:	4313      	orrs	r3, r2
 800d282:	628b      	str	r3, [r1, #40]	@ 0x28
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	3b01      	subs	r3, #1
 800d28a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	689b      	ldr	r3, [r3, #8]
 800d292:	3b01      	subs	r3, #1
 800d294:	025b      	lsls	r3, r3, #9
 800d296:	b29b      	uxth	r3, r3
 800d298:	431a      	orrs	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	68db      	ldr	r3, [r3, #12]
 800d29e:	3b01      	subs	r3, #1
 800d2a0:	041b      	lsls	r3, r3, #16
 800d2a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d2a6:	431a      	orrs	r2, r3
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	691b      	ldr	r3, [r3, #16]
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	061b      	lsls	r3, r3, #24
 800d2b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d2b4:	4931      	ldr	r1, [pc, #196]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d2ba:	4b30      	ldr	r3, [pc, #192]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	695b      	ldr	r3, [r3, #20]
 800d2c6:	492d      	ldr	r1, [pc, #180]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d2cc:	4b2b      	ldr	r3, [pc, #172]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	699b      	ldr	r3, [r3, #24]
 800d2d8:	4928      	ldr	r1, [pc, #160]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d2de:	4b27      	ldr	r3, [pc, #156]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2e2:	4a26      	ldr	r2, [pc, #152]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d2e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d2e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d2ea:	4b24      	ldr	r3, [pc, #144]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d2ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d2ee:	4b24      	ldr	r3, [pc, #144]	@ (800d380 <RCCEx_PLL3_Config+0x160>)
 800d2f0:	4013      	ands	r3, r2
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	69d2      	ldr	r2, [r2, #28]
 800d2f6:	00d2      	lsls	r2, r2, #3
 800d2f8:	4920      	ldr	r1, [pc, #128]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d2fe:	4b1f      	ldr	r3, [pc, #124]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d302:	4a1e      	ldr	r2, [pc, #120]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d308:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d106      	bne.n	800d31e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d310:	4b1a      	ldr	r3, [pc, #104]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d314:	4a19      	ldr	r2, [pc, #100]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d316:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d31a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d31c:	e00f      	b.n	800d33e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	2b01      	cmp	r3, #1
 800d322:	d106      	bne.n	800d332 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d324:	4b15      	ldr	r3, [pc, #84]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d328:	4a14      	ldr	r2, [pc, #80]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d32a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d32e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d330:	e005      	b.n	800d33e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d332:	4b12      	ldr	r3, [pc, #72]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d336:	4a11      	ldr	r2, [pc, #68]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d338:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d33c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d33e:	4b0f      	ldr	r3, [pc, #60]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a0e      	ldr	r2, [pc, #56]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d34a:	f7f8 f88f 	bl	800546c <HAL_GetTick>
 800d34e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d350:	e008      	b.n	800d364 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d352:	f7f8 f88b 	bl	800546c <HAL_GetTick>
 800d356:	4602      	mov	r2, r0
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	1ad3      	subs	r3, r2, r3
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	d901      	bls.n	800d364 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d360:	2303      	movs	r3, #3
 800d362:	e006      	b.n	800d372 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d364:	4b05      	ldr	r3, [pc, #20]	@ (800d37c <RCCEx_PLL3_Config+0x15c>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d0f0      	beq.n	800d352 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d370:	7bfb      	ldrb	r3, [r7, #15]
}
 800d372:	4618      	mov	r0, r3
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	58024400 	.word	0x58024400
 800d380:	ffff0007 	.word	0xffff0007

0800d384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d101      	bne.n	800d396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d392:	2301      	movs	r3, #1
 800d394:	e049      	b.n	800d42a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d106      	bne.n	800d3b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f7f7 fc1e 	bl	8004bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2202      	movs	r2, #2
 800d3b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	3304      	adds	r3, #4
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	4610      	mov	r0, r2
 800d3c4:	f001 f876 	bl	800e4b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2201      	movs	r2, #1
 800d404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2201      	movs	r2, #1
 800d414:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2201      	movs	r2, #1
 800d41c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2201      	movs	r2, #1
 800d424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d428:	2300      	movs	r3, #0
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3708      	adds	r7, #8
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
	...

0800d434 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d442:	b2db      	uxtb	r3, r3
 800d444:	2b01      	cmp	r3, #1
 800d446:	d001      	beq.n	800d44c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d448:	2301      	movs	r3, #1
 800d44a:	e056      	b.n	800d4fa <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2202      	movs	r2, #2
 800d450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4a2b      	ldr	r2, [pc, #172]	@ (800d508 <HAL_TIM_Base_Start+0xd4>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d02c      	beq.n	800d4b8 <HAL_TIM_Base_Start+0x84>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d466:	d027      	beq.n	800d4b8 <HAL_TIM_Base_Start+0x84>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a27      	ldr	r2, [pc, #156]	@ (800d50c <HAL_TIM_Base_Start+0xd8>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d022      	beq.n	800d4b8 <HAL_TIM_Base_Start+0x84>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4a26      	ldr	r2, [pc, #152]	@ (800d510 <HAL_TIM_Base_Start+0xdc>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d01d      	beq.n	800d4b8 <HAL_TIM_Base_Start+0x84>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a24      	ldr	r2, [pc, #144]	@ (800d514 <HAL_TIM_Base_Start+0xe0>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d018      	beq.n	800d4b8 <HAL_TIM_Base_Start+0x84>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	4a23      	ldr	r2, [pc, #140]	@ (800d518 <HAL_TIM_Base_Start+0xe4>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d013      	beq.n	800d4b8 <HAL_TIM_Base_Start+0x84>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4a21      	ldr	r2, [pc, #132]	@ (800d51c <HAL_TIM_Base_Start+0xe8>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d00e      	beq.n	800d4b8 <HAL_TIM_Base_Start+0x84>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4a20      	ldr	r2, [pc, #128]	@ (800d520 <HAL_TIM_Base_Start+0xec>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d009      	beq.n	800d4b8 <HAL_TIM_Base_Start+0x84>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4a1e      	ldr	r2, [pc, #120]	@ (800d524 <HAL_TIM_Base_Start+0xf0>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d004      	beq.n	800d4b8 <HAL_TIM_Base_Start+0x84>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4a1d      	ldr	r2, [pc, #116]	@ (800d528 <HAL_TIM_Base_Start+0xf4>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d115      	bne.n	800d4e4 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	689a      	ldr	r2, [r3, #8]
 800d4be:	4b1b      	ldr	r3, [pc, #108]	@ (800d52c <HAL_TIM_Base_Start+0xf8>)
 800d4c0:	4013      	ands	r3, r2
 800d4c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2b06      	cmp	r3, #6
 800d4c8:	d015      	beq.n	800d4f6 <HAL_TIM_Base_Start+0xc2>
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4d0:	d011      	beq.n	800d4f6 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f042 0201 	orr.w	r2, r2, #1
 800d4e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4e2:	e008      	b.n	800d4f6 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f042 0201 	orr.w	r2, r2, #1
 800d4f2:	601a      	str	r2, [r3, #0]
 800d4f4:	e000      	b.n	800d4f8 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3714      	adds	r7, #20
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr
 800d506:	bf00      	nop
 800d508:	40010000 	.word	0x40010000
 800d50c:	40000400 	.word	0x40000400
 800d510:	40000800 	.word	0x40000800
 800d514:	40000c00 	.word	0x40000c00
 800d518:	40010400 	.word	0x40010400
 800d51c:	40001800 	.word	0x40001800
 800d520:	40014000 	.word	0x40014000
 800d524:	4000e000 	.word	0x4000e000
 800d528:	4000e400 	.word	0x4000e400
 800d52c:	00010007 	.word	0x00010007

0800d530 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	6a1a      	ldr	r2, [r3, #32]
 800d53e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d542:	4013      	ands	r3, r2
 800d544:	2b00      	cmp	r3, #0
 800d546:	d10f      	bne.n	800d568 <HAL_TIM_Base_Stop+0x38>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	6a1a      	ldr	r2, [r3, #32]
 800d54e:	f240 4344 	movw	r3, #1092	@ 0x444
 800d552:	4013      	ands	r3, r2
 800d554:	2b00      	cmp	r3, #0
 800d556:	d107      	bne.n	800d568 <HAL_TIM_Base_Stop+0x38>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f022 0201 	bic.w	r2, r2, #1
 800d566:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2201      	movs	r2, #1
 800d56c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	370c      	adds	r7, #12
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr

0800d57e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d57e:	b580      	push	{r7, lr}
 800d580:	b082      	sub	sp, #8
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d101      	bne.n	800d590 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d58c:	2301      	movs	r3, #1
 800d58e:	e049      	b.n	800d624 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d596:	b2db      	uxtb	r3, r3
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d106      	bne.n	800d5aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f000 f841 	bl	800d62c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2202      	movs	r2, #2
 800d5ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681a      	ldr	r2, [r3, #0]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	3304      	adds	r3, #4
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	4610      	mov	r0, r2
 800d5be:	f000 ff79 	bl	800e4b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2201      	movs	r2, #1
 800d5de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2201      	movs	r2, #1
 800d606:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2201      	movs	r2, #1
 800d60e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2201      	movs	r2, #1
 800d616:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2201      	movs	r2, #1
 800d61e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d622:	2300      	movs	r3, #0
}
 800d624:	4618      	mov	r0, r3
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d109      	bne.n	800d664 <HAL_TIM_PWM_Start+0x24>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d656:	b2db      	uxtb	r3, r3
 800d658:	2b01      	cmp	r3, #1
 800d65a:	bf14      	ite	ne
 800d65c:	2301      	movne	r3, #1
 800d65e:	2300      	moveq	r3, #0
 800d660:	b2db      	uxtb	r3, r3
 800d662:	e03c      	b.n	800d6de <HAL_TIM_PWM_Start+0x9e>
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	2b04      	cmp	r3, #4
 800d668:	d109      	bne.n	800d67e <HAL_TIM_PWM_Start+0x3e>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d670:	b2db      	uxtb	r3, r3
 800d672:	2b01      	cmp	r3, #1
 800d674:	bf14      	ite	ne
 800d676:	2301      	movne	r3, #1
 800d678:	2300      	moveq	r3, #0
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	e02f      	b.n	800d6de <HAL_TIM_PWM_Start+0x9e>
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	2b08      	cmp	r3, #8
 800d682:	d109      	bne.n	800d698 <HAL_TIM_PWM_Start+0x58>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	bf14      	ite	ne
 800d690:	2301      	movne	r3, #1
 800d692:	2300      	moveq	r3, #0
 800d694:	b2db      	uxtb	r3, r3
 800d696:	e022      	b.n	800d6de <HAL_TIM_PWM_Start+0x9e>
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2b0c      	cmp	r3, #12
 800d69c:	d109      	bne.n	800d6b2 <HAL_TIM_PWM_Start+0x72>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	bf14      	ite	ne
 800d6aa:	2301      	movne	r3, #1
 800d6ac:	2300      	moveq	r3, #0
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	e015      	b.n	800d6de <HAL_TIM_PWM_Start+0x9e>
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	2b10      	cmp	r3, #16
 800d6b6:	d109      	bne.n	800d6cc <HAL_TIM_PWM_Start+0x8c>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	bf14      	ite	ne
 800d6c4:	2301      	movne	r3, #1
 800d6c6:	2300      	moveq	r3, #0
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	e008      	b.n	800d6de <HAL_TIM_PWM_Start+0x9e>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	bf14      	ite	ne
 800d6d8:	2301      	movne	r3, #1
 800d6da:	2300      	moveq	r3, #0
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e0ab      	b.n	800d83e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d104      	bne.n	800d6f6 <HAL_TIM_PWM_Start+0xb6>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2202      	movs	r2, #2
 800d6f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d6f4:	e023      	b.n	800d73e <HAL_TIM_PWM_Start+0xfe>
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	2b04      	cmp	r3, #4
 800d6fa:	d104      	bne.n	800d706 <HAL_TIM_PWM_Start+0xc6>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2202      	movs	r2, #2
 800d700:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d704:	e01b      	b.n	800d73e <HAL_TIM_PWM_Start+0xfe>
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	2b08      	cmp	r3, #8
 800d70a:	d104      	bne.n	800d716 <HAL_TIM_PWM_Start+0xd6>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2202      	movs	r2, #2
 800d710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d714:	e013      	b.n	800d73e <HAL_TIM_PWM_Start+0xfe>
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	2b0c      	cmp	r3, #12
 800d71a:	d104      	bne.n	800d726 <HAL_TIM_PWM_Start+0xe6>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2202      	movs	r2, #2
 800d720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d724:	e00b      	b.n	800d73e <HAL_TIM_PWM_Start+0xfe>
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	2b10      	cmp	r3, #16
 800d72a:	d104      	bne.n	800d736 <HAL_TIM_PWM_Start+0xf6>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2202      	movs	r2, #2
 800d730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d734:	e003      	b.n	800d73e <HAL_TIM_PWM_Start+0xfe>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2202      	movs	r2, #2
 800d73a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2201      	movs	r2, #1
 800d744:	6839      	ldr	r1, [r7, #0]
 800d746:	4618      	mov	r0, r3
 800d748:	f001 fad4 	bl	800ecf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a3d      	ldr	r2, [pc, #244]	@ (800d848 <HAL_TIM_PWM_Start+0x208>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d013      	beq.n	800d77e <HAL_TIM_PWM_Start+0x13e>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4a3c      	ldr	r2, [pc, #240]	@ (800d84c <HAL_TIM_PWM_Start+0x20c>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d00e      	beq.n	800d77e <HAL_TIM_PWM_Start+0x13e>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a3a      	ldr	r2, [pc, #232]	@ (800d850 <HAL_TIM_PWM_Start+0x210>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d009      	beq.n	800d77e <HAL_TIM_PWM_Start+0x13e>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a39      	ldr	r2, [pc, #228]	@ (800d854 <HAL_TIM_PWM_Start+0x214>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d004      	beq.n	800d77e <HAL_TIM_PWM_Start+0x13e>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a37      	ldr	r2, [pc, #220]	@ (800d858 <HAL_TIM_PWM_Start+0x218>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d101      	bne.n	800d782 <HAL_TIM_PWM_Start+0x142>
 800d77e:	2301      	movs	r3, #1
 800d780:	e000      	b.n	800d784 <HAL_TIM_PWM_Start+0x144>
 800d782:	2300      	movs	r3, #0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d007      	beq.n	800d798 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d796:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4a2a      	ldr	r2, [pc, #168]	@ (800d848 <HAL_TIM_PWM_Start+0x208>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d02c      	beq.n	800d7fc <HAL_TIM_PWM_Start+0x1bc>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7aa:	d027      	beq.n	800d7fc <HAL_TIM_PWM_Start+0x1bc>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a2a      	ldr	r2, [pc, #168]	@ (800d85c <HAL_TIM_PWM_Start+0x21c>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d022      	beq.n	800d7fc <HAL_TIM_PWM_Start+0x1bc>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4a29      	ldr	r2, [pc, #164]	@ (800d860 <HAL_TIM_PWM_Start+0x220>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d01d      	beq.n	800d7fc <HAL_TIM_PWM_Start+0x1bc>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a27      	ldr	r2, [pc, #156]	@ (800d864 <HAL_TIM_PWM_Start+0x224>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d018      	beq.n	800d7fc <HAL_TIM_PWM_Start+0x1bc>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a1f      	ldr	r2, [pc, #124]	@ (800d84c <HAL_TIM_PWM_Start+0x20c>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d013      	beq.n	800d7fc <HAL_TIM_PWM_Start+0x1bc>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4a23      	ldr	r2, [pc, #140]	@ (800d868 <HAL_TIM_PWM_Start+0x228>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d00e      	beq.n	800d7fc <HAL_TIM_PWM_Start+0x1bc>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	4a1b      	ldr	r2, [pc, #108]	@ (800d850 <HAL_TIM_PWM_Start+0x210>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d009      	beq.n	800d7fc <HAL_TIM_PWM_Start+0x1bc>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a1f      	ldr	r2, [pc, #124]	@ (800d86c <HAL_TIM_PWM_Start+0x22c>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d004      	beq.n	800d7fc <HAL_TIM_PWM_Start+0x1bc>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4a1e      	ldr	r2, [pc, #120]	@ (800d870 <HAL_TIM_PWM_Start+0x230>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d115      	bne.n	800d828 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	689a      	ldr	r2, [r3, #8]
 800d802:	4b1c      	ldr	r3, [pc, #112]	@ (800d874 <HAL_TIM_PWM_Start+0x234>)
 800d804:	4013      	ands	r3, r2
 800d806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2b06      	cmp	r3, #6
 800d80c:	d015      	beq.n	800d83a <HAL_TIM_PWM_Start+0x1fa>
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d814:	d011      	beq.n	800d83a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f042 0201 	orr.w	r2, r2, #1
 800d824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d826:	e008      	b.n	800d83a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f042 0201 	orr.w	r2, r2, #1
 800d836:	601a      	str	r2, [r3, #0]
 800d838:	e000      	b.n	800d83c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d83a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d83c:	2300      	movs	r3, #0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3710      	adds	r7, #16
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	40010000 	.word	0x40010000
 800d84c:	40010400 	.word	0x40010400
 800d850:	40014000 	.word	0x40014000
 800d854:	40014400 	.word	0x40014400
 800d858:	40014800 	.word	0x40014800
 800d85c:	40000400 	.word	0x40000400
 800d860:	40000800 	.word	0x40000800
 800d864:	40000c00 	.word	0x40000c00
 800d868:	40001800 	.word	0x40001800
 800d86c:	4000e000 	.word	0x4000e000
 800d870:	4000e400 	.word	0x4000e400
 800d874:	00010007 	.word	0x00010007

0800d878 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b086      	sub	sp, #24
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	607a      	str	r2, [r7, #4]
 800d884:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800d886:	2300      	movs	r3, #0
 800d888:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d109      	bne.n	800d8a4 <HAL_TIM_PWM_Start_DMA+0x2c>
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d896:	b2db      	uxtb	r3, r3
 800d898:	2b02      	cmp	r3, #2
 800d89a:	bf0c      	ite	eq
 800d89c:	2301      	moveq	r3, #1
 800d89e:	2300      	movne	r3, #0
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	e03c      	b.n	800d91e <HAL_TIM_PWM_Start_DMA+0xa6>
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	2b04      	cmp	r3, #4
 800d8a8:	d109      	bne.n	800d8be <HAL_TIM_PWM_Start_DMA+0x46>
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	2b02      	cmp	r3, #2
 800d8b4:	bf0c      	ite	eq
 800d8b6:	2301      	moveq	r3, #1
 800d8b8:	2300      	movne	r3, #0
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	e02f      	b.n	800d91e <HAL_TIM_PWM_Start_DMA+0xa6>
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	2b08      	cmp	r3, #8
 800d8c2:	d109      	bne.n	800d8d8 <HAL_TIM_PWM_Start_DMA+0x60>
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	2b02      	cmp	r3, #2
 800d8ce:	bf0c      	ite	eq
 800d8d0:	2301      	moveq	r3, #1
 800d8d2:	2300      	movne	r3, #0
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	e022      	b.n	800d91e <HAL_TIM_PWM_Start_DMA+0xa6>
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	2b0c      	cmp	r3, #12
 800d8dc:	d109      	bne.n	800d8f2 <HAL_TIM_PWM_Start_DMA+0x7a>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	bf0c      	ite	eq
 800d8ea:	2301      	moveq	r3, #1
 800d8ec:	2300      	movne	r3, #0
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	e015      	b.n	800d91e <HAL_TIM_PWM_Start_DMA+0xa6>
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	2b10      	cmp	r3, #16
 800d8f6:	d109      	bne.n	800d90c <HAL_TIM_PWM_Start_DMA+0x94>
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	2b02      	cmp	r3, #2
 800d902:	bf0c      	ite	eq
 800d904:	2301      	moveq	r3, #1
 800d906:	2300      	movne	r3, #0
 800d908:	b2db      	uxtb	r3, r3
 800d90a:	e008      	b.n	800d91e <HAL_TIM_PWM_Start_DMA+0xa6>
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d912:	b2db      	uxtb	r3, r3
 800d914:	2b02      	cmp	r3, #2
 800d916:	bf0c      	ite	eq
 800d918:	2301      	moveq	r3, #1
 800d91a:	2300      	movne	r3, #0
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d001      	beq.n	800d926 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800d922:	2302      	movs	r3, #2
 800d924:	e1ba      	b.n	800dc9c <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d109      	bne.n	800d940 <HAL_TIM_PWM_Start_DMA+0xc8>
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d932:	b2db      	uxtb	r3, r3
 800d934:	2b01      	cmp	r3, #1
 800d936:	bf0c      	ite	eq
 800d938:	2301      	moveq	r3, #1
 800d93a:	2300      	movne	r3, #0
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	e03c      	b.n	800d9ba <HAL_TIM_PWM_Start_DMA+0x142>
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	2b04      	cmp	r3, #4
 800d944:	d109      	bne.n	800d95a <HAL_TIM_PWM_Start_DMA+0xe2>
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	2b01      	cmp	r3, #1
 800d950:	bf0c      	ite	eq
 800d952:	2301      	moveq	r3, #1
 800d954:	2300      	movne	r3, #0
 800d956:	b2db      	uxtb	r3, r3
 800d958:	e02f      	b.n	800d9ba <HAL_TIM_PWM_Start_DMA+0x142>
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	2b08      	cmp	r3, #8
 800d95e:	d109      	bne.n	800d974 <HAL_TIM_PWM_Start_DMA+0xfc>
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b01      	cmp	r3, #1
 800d96a:	bf0c      	ite	eq
 800d96c:	2301      	moveq	r3, #1
 800d96e:	2300      	movne	r3, #0
 800d970:	b2db      	uxtb	r3, r3
 800d972:	e022      	b.n	800d9ba <HAL_TIM_PWM_Start_DMA+0x142>
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	2b0c      	cmp	r3, #12
 800d978:	d109      	bne.n	800d98e <HAL_TIM_PWM_Start_DMA+0x116>
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d980:	b2db      	uxtb	r3, r3
 800d982:	2b01      	cmp	r3, #1
 800d984:	bf0c      	ite	eq
 800d986:	2301      	moveq	r3, #1
 800d988:	2300      	movne	r3, #0
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	e015      	b.n	800d9ba <HAL_TIM_PWM_Start_DMA+0x142>
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	2b10      	cmp	r3, #16
 800d992:	d109      	bne.n	800d9a8 <HAL_TIM_PWM_Start_DMA+0x130>
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	bf0c      	ite	eq
 800d9a0:	2301      	moveq	r3, #1
 800d9a2:	2300      	movne	r3, #0
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	e008      	b.n	800d9ba <HAL_TIM_PWM_Start_DMA+0x142>
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	bf0c      	ite	eq
 800d9b4:	2301      	moveq	r3, #1
 800d9b6:	2300      	movne	r3, #0
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d034      	beq.n	800da28 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d002      	beq.n	800d9ca <HAL_TIM_PWM_Start_DMA+0x152>
 800d9c4:	887b      	ldrh	r3, [r7, #2]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d101      	bne.n	800d9ce <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e166      	b.n	800dc9c <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d104      	bne.n	800d9de <HAL_TIM_PWM_Start_DMA+0x166>
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2202      	movs	r2, #2
 800d9d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d9dc:	e026      	b.n	800da2c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	2b04      	cmp	r3, #4
 800d9e2:	d104      	bne.n	800d9ee <HAL_TIM_PWM_Start_DMA+0x176>
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2202      	movs	r2, #2
 800d9e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d9ec:	e01e      	b.n	800da2c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	2b08      	cmp	r3, #8
 800d9f2:	d104      	bne.n	800d9fe <HAL_TIM_PWM_Start_DMA+0x186>
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2202      	movs	r2, #2
 800d9f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d9fc:	e016      	b.n	800da2c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	2b0c      	cmp	r3, #12
 800da02:	d104      	bne.n	800da0e <HAL_TIM_PWM_Start_DMA+0x196>
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2202      	movs	r2, #2
 800da08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800da0c:	e00e      	b.n	800da2c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	2b10      	cmp	r3, #16
 800da12:	d104      	bne.n	800da1e <HAL_TIM_PWM_Start_DMA+0x1a6>
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2202      	movs	r2, #2
 800da18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800da1c:	e006      	b.n	800da2c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2202      	movs	r2, #2
 800da22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800da26:	e001      	b.n	800da2c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800da28:	2301      	movs	r3, #1
 800da2a:	e137      	b.n	800dc9c <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	2b0c      	cmp	r3, #12
 800da30:	f200 80ae 	bhi.w	800db90 <HAL_TIM_PWM_Start_DMA+0x318>
 800da34:	a201      	add	r2, pc, #4	@ (adr r2, 800da3c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800da36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da3a:	bf00      	nop
 800da3c:	0800da71 	.word	0x0800da71
 800da40:	0800db91 	.word	0x0800db91
 800da44:	0800db91 	.word	0x0800db91
 800da48:	0800db91 	.word	0x0800db91
 800da4c:	0800dab9 	.word	0x0800dab9
 800da50:	0800db91 	.word	0x0800db91
 800da54:	0800db91 	.word	0x0800db91
 800da58:	0800db91 	.word	0x0800db91
 800da5c:	0800db01 	.word	0x0800db01
 800da60:	0800db91 	.word	0x0800db91
 800da64:	0800db91 	.word	0x0800db91
 800da68:	0800db91 	.word	0x0800db91
 800da6c:	0800db49 	.word	0x0800db49
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da74:	4a8b      	ldr	r2, [pc, #556]	@ (800dca4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800da76:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da7c:	4a8a      	ldr	r2, [pc, #552]	@ (800dca8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800da7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da84:	4a89      	ldr	r2, [pc, #548]	@ (800dcac <HAL_TIM_PWM_Start_DMA+0x434>)
 800da86:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800da8c:	6879      	ldr	r1, [r7, #4]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	3334      	adds	r3, #52	@ 0x34
 800da94:	461a      	mov	r2, r3
 800da96:	887b      	ldrh	r3, [r7, #2]
 800da98:	f7f8 f9f8 	bl	8005e8c <HAL_DMA_Start_IT>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d001      	beq.n	800daa6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800daa2:	2301      	movs	r3, #1
 800daa4:	e0fa      	b.n	800dc9c <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	68da      	ldr	r2, [r3, #12]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dab4:	60da      	str	r2, [r3, #12]
      break;
 800dab6:	e06e      	b.n	800db96 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dabc:	4a79      	ldr	r2, [pc, #484]	@ (800dca4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800dabe:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dac4:	4a78      	ldr	r2, [pc, #480]	@ (800dca8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800dac6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dacc:	4a77      	ldr	r2, [pc, #476]	@ (800dcac <HAL_TIM_PWM_Start_DMA+0x434>)
 800dace:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800dad4:	6879      	ldr	r1, [r7, #4]
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	3338      	adds	r3, #56	@ 0x38
 800dadc:	461a      	mov	r2, r3
 800dade:	887b      	ldrh	r3, [r7, #2]
 800dae0:	f7f8 f9d4 	bl	8005e8c <HAL_DMA_Start_IT>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d001      	beq.n	800daee <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800daea:	2301      	movs	r3, #1
 800daec:	e0d6      	b.n	800dc9c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	68da      	ldr	r2, [r3, #12]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dafc:	60da      	str	r2, [r3, #12]
      break;
 800dafe:	e04a      	b.n	800db96 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db04:	4a67      	ldr	r2, [pc, #412]	@ (800dca4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800db06:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db0c:	4a66      	ldr	r2, [pc, #408]	@ (800dca8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800db0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db14:	4a65      	ldr	r2, [pc, #404]	@ (800dcac <HAL_TIM_PWM_Start_DMA+0x434>)
 800db16:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800db1c:	6879      	ldr	r1, [r7, #4]
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	333c      	adds	r3, #60	@ 0x3c
 800db24:	461a      	mov	r2, r3
 800db26:	887b      	ldrh	r3, [r7, #2]
 800db28:	f7f8 f9b0 	bl	8005e8c <HAL_DMA_Start_IT>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d001      	beq.n	800db36 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800db32:	2301      	movs	r3, #1
 800db34:	e0b2      	b.n	800dc9c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	68da      	ldr	r2, [r3, #12]
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800db44:	60da      	str	r2, [r3, #12]
      break;
 800db46:	e026      	b.n	800db96 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db4c:	4a55      	ldr	r2, [pc, #340]	@ (800dca4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800db4e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db54:	4a54      	ldr	r2, [pc, #336]	@ (800dca8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800db56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db5c:	4a53      	ldr	r2, [pc, #332]	@ (800dcac <HAL_TIM_PWM_Start_DMA+0x434>)
 800db5e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800db64:	6879      	ldr	r1, [r7, #4]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	3340      	adds	r3, #64	@ 0x40
 800db6c:	461a      	mov	r2, r3
 800db6e:	887b      	ldrh	r3, [r7, #2]
 800db70:	f7f8 f98c 	bl	8005e8c <HAL_DMA_Start_IT>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d001      	beq.n	800db7e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800db7a:	2301      	movs	r3, #1
 800db7c:	e08e      	b.n	800dc9c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	68da      	ldr	r2, [r3, #12]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800db8c:	60da      	str	r2, [r3, #12]
      break;
 800db8e:	e002      	b.n	800db96 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800db90:	2301      	movs	r3, #1
 800db92:	75fb      	strb	r3, [r7, #23]
      break;
 800db94:	bf00      	nop
  }

  if (status == HAL_OK)
 800db96:	7dfb      	ldrb	r3, [r7, #23]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d17e      	bne.n	800dc9a <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2201      	movs	r2, #1
 800dba2:	68b9      	ldr	r1, [r7, #8]
 800dba4:	4618      	mov	r0, r3
 800dba6:	f001 f8a5 	bl	800ecf4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4a40      	ldr	r2, [pc, #256]	@ (800dcb0 <HAL_TIM_PWM_Start_DMA+0x438>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d013      	beq.n	800dbdc <HAL_TIM_PWM_Start_DMA+0x364>
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4a3e      	ldr	r2, [pc, #248]	@ (800dcb4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d00e      	beq.n	800dbdc <HAL_TIM_PWM_Start_DMA+0x364>
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4a3d      	ldr	r2, [pc, #244]	@ (800dcb8 <HAL_TIM_PWM_Start_DMA+0x440>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d009      	beq.n	800dbdc <HAL_TIM_PWM_Start_DMA+0x364>
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4a3b      	ldr	r2, [pc, #236]	@ (800dcbc <HAL_TIM_PWM_Start_DMA+0x444>)
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d004      	beq.n	800dbdc <HAL_TIM_PWM_Start_DMA+0x364>
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4a3a      	ldr	r2, [pc, #232]	@ (800dcc0 <HAL_TIM_PWM_Start_DMA+0x448>)
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d101      	bne.n	800dbe0 <HAL_TIM_PWM_Start_DMA+0x368>
 800dbdc:	2301      	movs	r3, #1
 800dbde:	e000      	b.n	800dbe2 <HAL_TIM_PWM_Start_DMA+0x36a>
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d007      	beq.n	800dbf6 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dbf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4a2d      	ldr	r2, [pc, #180]	@ (800dcb0 <HAL_TIM_PWM_Start_DMA+0x438>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d02c      	beq.n	800dc5a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc08:	d027      	beq.n	800dc5a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	4a2d      	ldr	r2, [pc, #180]	@ (800dcc4 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d022      	beq.n	800dc5a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	4a2b      	ldr	r2, [pc, #172]	@ (800dcc8 <HAL_TIM_PWM_Start_DMA+0x450>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d01d      	beq.n	800dc5a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	4a2a      	ldr	r2, [pc, #168]	@ (800dccc <HAL_TIM_PWM_Start_DMA+0x454>)
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d018      	beq.n	800dc5a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4a21      	ldr	r2, [pc, #132]	@ (800dcb4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d013      	beq.n	800dc5a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4a26      	ldr	r2, [pc, #152]	@ (800dcd0 <HAL_TIM_PWM_Start_DMA+0x458>)
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d00e      	beq.n	800dc5a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a1d      	ldr	r2, [pc, #116]	@ (800dcb8 <HAL_TIM_PWM_Start_DMA+0x440>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d009      	beq.n	800dc5a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a22      	ldr	r2, [pc, #136]	@ (800dcd4 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d004      	beq.n	800dc5a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4a20      	ldr	r2, [pc, #128]	@ (800dcd8 <HAL_TIM_PWM_Start_DMA+0x460>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d115      	bne.n	800dc86 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	689a      	ldr	r2, [r3, #8]
 800dc60:	4b1e      	ldr	r3, [pc, #120]	@ (800dcdc <HAL_TIM_PWM_Start_DMA+0x464>)
 800dc62:	4013      	ands	r3, r2
 800dc64:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	2b06      	cmp	r3, #6
 800dc6a:	d015      	beq.n	800dc98 <HAL_TIM_PWM_Start_DMA+0x420>
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc72:	d011      	beq.n	800dc98 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f042 0201 	orr.w	r2, r2, #1
 800dc82:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc84:	e008      	b.n	800dc98 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f042 0201 	orr.w	r2, r2, #1
 800dc94:	601a      	str	r2, [r3, #0]
 800dc96:	e000      	b.n	800dc9a <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc98:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800dc9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3718      	adds	r7, #24
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	0800e3a3 	.word	0x0800e3a3
 800dca8:	0800e44b 	.word	0x0800e44b
 800dcac:	0800e311 	.word	0x0800e311
 800dcb0:	40010000 	.word	0x40010000
 800dcb4:	40010400 	.word	0x40010400
 800dcb8:	40014000 	.word	0x40014000
 800dcbc:	40014400 	.word	0x40014400
 800dcc0:	40014800 	.word	0x40014800
 800dcc4:	40000400 	.word	0x40000400
 800dcc8:	40000800 	.word	0x40000800
 800dccc:	40000c00 	.word	0x40000c00
 800dcd0:	40001800 	.word	0x40001800
 800dcd4:	4000e000 	.word	0x4000e000
 800dcd8:	4000e400 	.word	0x4000e400
 800dcdc:	00010007 	.word	0x00010007

0800dce0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dcea:	2300      	movs	r3, #0
 800dcec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	2b0c      	cmp	r3, #12
 800dcf2:	d855      	bhi.n	800dda0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800dcf4:	a201      	add	r2, pc, #4	@ (adr r2, 800dcfc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800dcf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfa:	bf00      	nop
 800dcfc:	0800dd31 	.word	0x0800dd31
 800dd00:	0800dda1 	.word	0x0800dda1
 800dd04:	0800dda1 	.word	0x0800dda1
 800dd08:	0800dda1 	.word	0x0800dda1
 800dd0c:	0800dd4d 	.word	0x0800dd4d
 800dd10:	0800dda1 	.word	0x0800dda1
 800dd14:	0800dda1 	.word	0x0800dda1
 800dd18:	0800dda1 	.word	0x0800dda1
 800dd1c:	0800dd69 	.word	0x0800dd69
 800dd20:	0800dda1 	.word	0x0800dda1
 800dd24:	0800dda1 	.word	0x0800dda1
 800dd28:	0800dda1 	.word	0x0800dda1
 800dd2c:	0800dd85 	.word	0x0800dd85
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	68da      	ldr	r2, [r3, #12]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800dd3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7f8 fb0b 	bl	8006360 <HAL_DMA_Abort_IT>
      break;
 800dd4a:	e02c      	b.n	800dda6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	68da      	ldr	r2, [r3, #12]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dd5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7f8 fafd 	bl	8006360 <HAL_DMA_Abort_IT>
      break;
 800dd66:	e01e      	b.n	800dda6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	68da      	ldr	r2, [r3, #12]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dd76:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7f8 faef 	bl	8006360 <HAL_DMA_Abort_IT>
      break;
 800dd82:	e010      	b.n	800dda6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68da      	ldr	r2, [r3, #12]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800dd92:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7f8 fae1 	bl	8006360 <HAL_DMA_Abort_IT>
      break;
 800dd9e:	e002      	b.n	800dda6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800dda0:	2301      	movs	r3, #1
 800dda2:	73fb      	strb	r3, [r7, #15]
      break;
 800dda4:	bf00      	nop
  }

  if (status == HAL_OK)
 800dda6:	7bfb      	ldrb	r3, [r7, #15]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	f040 8081 	bne.w	800deb0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	6839      	ldr	r1, [r7, #0]
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f000 ff9c 	bl	800ecf4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a3e      	ldr	r2, [pc, #248]	@ (800debc <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d013      	beq.n	800ddee <HAL_TIM_PWM_Stop_DMA+0x10e>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4a3d      	ldr	r2, [pc, #244]	@ (800dec0 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d00e      	beq.n	800ddee <HAL_TIM_PWM_Stop_DMA+0x10e>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a3b      	ldr	r2, [pc, #236]	@ (800dec4 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d009      	beq.n	800ddee <HAL_TIM_PWM_Stop_DMA+0x10e>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4a3a      	ldr	r2, [pc, #232]	@ (800dec8 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d004      	beq.n	800ddee <HAL_TIM_PWM_Stop_DMA+0x10e>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4a38      	ldr	r2, [pc, #224]	@ (800decc <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d101      	bne.n	800ddf2 <HAL_TIM_PWM_Stop_DMA+0x112>
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e000      	b.n	800ddf4 <HAL_TIM_PWM_Stop_DMA+0x114>
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d017      	beq.n	800de28 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	6a1a      	ldr	r2, [r3, #32]
 800ddfe:	f241 1311 	movw	r3, #4369	@ 0x1111
 800de02:	4013      	ands	r3, r2
 800de04:	2b00      	cmp	r3, #0
 800de06:	d10f      	bne.n	800de28 <HAL_TIM_PWM_Stop_DMA+0x148>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	6a1a      	ldr	r2, [r3, #32]
 800de0e:	f240 4344 	movw	r3, #1092	@ 0x444
 800de12:	4013      	ands	r3, r2
 800de14:	2b00      	cmp	r3, #0
 800de16:	d107      	bne.n	800de28 <HAL_TIM_PWM_Stop_DMA+0x148>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800de26:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	6a1a      	ldr	r2, [r3, #32]
 800de2e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800de32:	4013      	ands	r3, r2
 800de34:	2b00      	cmp	r3, #0
 800de36:	d10f      	bne.n	800de58 <HAL_TIM_PWM_Stop_DMA+0x178>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	6a1a      	ldr	r2, [r3, #32]
 800de3e:	f240 4344 	movw	r3, #1092	@ 0x444
 800de42:	4013      	ands	r3, r2
 800de44:	2b00      	cmp	r3, #0
 800de46:	d107      	bne.n	800de58 <HAL_TIM_PWM_Stop_DMA+0x178>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f022 0201 	bic.w	r2, r2, #1
 800de56:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d104      	bne.n	800de68 <HAL_TIM_PWM_Stop_DMA+0x188>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2201      	movs	r2, #1
 800de62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de66:	e023      	b.n	800deb0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	2b04      	cmp	r3, #4
 800de6c:	d104      	bne.n	800de78 <HAL_TIM_PWM_Stop_DMA+0x198>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2201      	movs	r2, #1
 800de72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de76:	e01b      	b.n	800deb0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	2b08      	cmp	r3, #8
 800de7c:	d104      	bne.n	800de88 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2201      	movs	r2, #1
 800de82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800de86:	e013      	b.n	800deb0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	2b0c      	cmp	r3, #12
 800de8c:	d104      	bne.n	800de98 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2201      	movs	r2, #1
 800de92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800de96:	e00b      	b.n	800deb0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	2b10      	cmp	r3, #16
 800de9c:	d104      	bne.n	800dea8 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2201      	movs	r2, #1
 800dea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dea6:	e003      	b.n	800deb0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2201      	movs	r2, #1
 800deac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800deb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3710      	adds	r7, #16
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	40010000 	.word	0x40010000
 800dec0:	40010400 	.word	0x40010400
 800dec4:	40014000 	.word	0x40014000
 800dec8:	40014400 	.word	0x40014400
 800decc:	40014800 	.word	0x40014800

0800ded0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b086      	sub	sp, #24
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dedc:	2300      	movs	r3, #0
 800dede:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d101      	bne.n	800deee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800deea:	2302      	movs	r3, #2
 800deec:	e0ff      	b.n	800e0ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2201      	movs	r2, #1
 800def2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2b14      	cmp	r3, #20
 800defa:	f200 80f0 	bhi.w	800e0de <HAL_TIM_PWM_ConfigChannel+0x20e>
 800defe:	a201      	add	r2, pc, #4	@ (adr r2, 800df04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800df00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df04:	0800df59 	.word	0x0800df59
 800df08:	0800e0df 	.word	0x0800e0df
 800df0c:	0800e0df 	.word	0x0800e0df
 800df10:	0800e0df 	.word	0x0800e0df
 800df14:	0800df99 	.word	0x0800df99
 800df18:	0800e0df 	.word	0x0800e0df
 800df1c:	0800e0df 	.word	0x0800e0df
 800df20:	0800e0df 	.word	0x0800e0df
 800df24:	0800dfdb 	.word	0x0800dfdb
 800df28:	0800e0df 	.word	0x0800e0df
 800df2c:	0800e0df 	.word	0x0800e0df
 800df30:	0800e0df 	.word	0x0800e0df
 800df34:	0800e01b 	.word	0x0800e01b
 800df38:	0800e0df 	.word	0x0800e0df
 800df3c:	0800e0df 	.word	0x0800e0df
 800df40:	0800e0df 	.word	0x0800e0df
 800df44:	0800e05d 	.word	0x0800e05d
 800df48:	0800e0df 	.word	0x0800e0df
 800df4c:	0800e0df 	.word	0x0800e0df
 800df50:	0800e0df 	.word	0x0800e0df
 800df54:	0800e09d 	.word	0x0800e09d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	68b9      	ldr	r1, [r7, #8]
 800df5e:	4618      	mov	r0, r3
 800df60:	f000 fb54 	bl	800e60c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	699a      	ldr	r2, [r3, #24]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f042 0208 	orr.w	r2, r2, #8
 800df72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	699a      	ldr	r2, [r3, #24]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f022 0204 	bic.w	r2, r2, #4
 800df82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	6999      	ldr	r1, [r3, #24]
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	691a      	ldr	r2, [r3, #16]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	430a      	orrs	r2, r1
 800df94:	619a      	str	r2, [r3, #24]
      break;
 800df96:	e0a5      	b.n	800e0e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68b9      	ldr	r1, [r7, #8]
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f000 fbc4 	bl	800e72c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	699a      	ldr	r2, [r3, #24]
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dfb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	699a      	ldr	r2, [r3, #24]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dfc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	6999      	ldr	r1, [r3, #24]
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	021a      	lsls	r2, r3, #8
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	430a      	orrs	r2, r1
 800dfd6:	619a      	str	r2, [r3, #24]
      break;
 800dfd8:	e084      	b.n	800e0e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	68b9      	ldr	r1, [r7, #8]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f000 fc2d 	bl	800e840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	69da      	ldr	r2, [r3, #28]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f042 0208 	orr.w	r2, r2, #8
 800dff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	69da      	ldr	r2, [r3, #28]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f022 0204 	bic.w	r2, r2, #4
 800e004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	69d9      	ldr	r1, [r3, #28]
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	691a      	ldr	r2, [r3, #16]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	430a      	orrs	r2, r1
 800e016:	61da      	str	r2, [r3, #28]
      break;
 800e018:	e064      	b.n	800e0e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	68b9      	ldr	r1, [r7, #8]
 800e020:	4618      	mov	r0, r3
 800e022:	f000 fc95 	bl	800e950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	69da      	ldr	r2, [r3, #28]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	69da      	ldr	r2, [r3, #28]
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	69d9      	ldr	r1, [r3, #28]
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	691b      	ldr	r3, [r3, #16]
 800e050:	021a      	lsls	r2, r3, #8
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	430a      	orrs	r2, r1
 800e058:	61da      	str	r2, [r3, #28]
      break;
 800e05a:	e043      	b.n	800e0e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	68b9      	ldr	r1, [r7, #8]
 800e062:	4618      	mov	r0, r3
 800e064:	f000 fcde 	bl	800ea24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f042 0208 	orr.w	r2, r2, #8
 800e076:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f022 0204 	bic.w	r2, r2, #4
 800e086:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	691a      	ldr	r2, [r3, #16]
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	430a      	orrs	r2, r1
 800e098:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e09a:	e023      	b.n	800e0e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	68b9      	ldr	r1, [r7, #8]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f000 fd22 	bl	800eaec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e0b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e0c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	691b      	ldr	r3, [r3, #16]
 800e0d2:	021a      	lsls	r2, r3, #8
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	430a      	orrs	r2, r1
 800e0da:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e0dc:	e002      	b.n	800e0e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	75fb      	strb	r3, [r7, #23]
      break;
 800e0e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e0ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3718      	adds	r7, #24
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop

0800e0f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e102:	2300      	movs	r3, #0
 800e104:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d101      	bne.n	800e114 <HAL_TIM_ConfigClockSource+0x1c>
 800e110:	2302      	movs	r3, #2
 800e112:	e0dc      	b.n	800e2ce <HAL_TIM_ConfigClockSource+0x1d6>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2201      	movs	r2, #1
 800e118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2202      	movs	r2, #2
 800e120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	689b      	ldr	r3, [r3, #8]
 800e12a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e12c:	68ba      	ldr	r2, [r7, #8]
 800e12e:	4b6a      	ldr	r3, [pc, #424]	@ (800e2d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e130:	4013      	ands	r3, r2
 800e132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e13a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	68ba      	ldr	r2, [r7, #8]
 800e142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4a64      	ldr	r2, [pc, #400]	@ (800e2dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	f000 80a9 	beq.w	800e2a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800e150:	4a62      	ldr	r2, [pc, #392]	@ (800e2dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800e152:	4293      	cmp	r3, r2
 800e154:	f200 80ae 	bhi.w	800e2b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e158:	4a61      	ldr	r2, [pc, #388]	@ (800e2e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	f000 80a1 	beq.w	800e2a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800e160:	4a5f      	ldr	r2, [pc, #380]	@ (800e2e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e162:	4293      	cmp	r3, r2
 800e164:	f200 80a6 	bhi.w	800e2b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e168:	4a5e      	ldr	r2, [pc, #376]	@ (800e2e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	f000 8099 	beq.w	800e2a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800e170:	4a5c      	ldr	r2, [pc, #368]	@ (800e2e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e172:	4293      	cmp	r3, r2
 800e174:	f200 809e 	bhi.w	800e2b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e178:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e17c:	f000 8091 	beq.w	800e2a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800e180:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e184:	f200 8096 	bhi.w	800e2b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e188:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e18c:	f000 8089 	beq.w	800e2a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800e190:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e194:	f200 808e 	bhi.w	800e2b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e19c:	d03e      	beq.n	800e21c <HAL_TIM_ConfigClockSource+0x124>
 800e19e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e1a2:	f200 8087 	bhi.w	800e2b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e1a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1aa:	f000 8086 	beq.w	800e2ba <HAL_TIM_ConfigClockSource+0x1c2>
 800e1ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1b2:	d87f      	bhi.n	800e2b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e1b4:	2b70      	cmp	r3, #112	@ 0x70
 800e1b6:	d01a      	beq.n	800e1ee <HAL_TIM_ConfigClockSource+0xf6>
 800e1b8:	2b70      	cmp	r3, #112	@ 0x70
 800e1ba:	d87b      	bhi.n	800e2b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e1bc:	2b60      	cmp	r3, #96	@ 0x60
 800e1be:	d050      	beq.n	800e262 <HAL_TIM_ConfigClockSource+0x16a>
 800e1c0:	2b60      	cmp	r3, #96	@ 0x60
 800e1c2:	d877      	bhi.n	800e2b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e1c4:	2b50      	cmp	r3, #80	@ 0x50
 800e1c6:	d03c      	beq.n	800e242 <HAL_TIM_ConfigClockSource+0x14a>
 800e1c8:	2b50      	cmp	r3, #80	@ 0x50
 800e1ca:	d873      	bhi.n	800e2b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e1cc:	2b40      	cmp	r3, #64	@ 0x40
 800e1ce:	d058      	beq.n	800e282 <HAL_TIM_ConfigClockSource+0x18a>
 800e1d0:	2b40      	cmp	r3, #64	@ 0x40
 800e1d2:	d86f      	bhi.n	800e2b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e1d4:	2b30      	cmp	r3, #48	@ 0x30
 800e1d6:	d064      	beq.n	800e2a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800e1d8:	2b30      	cmp	r3, #48	@ 0x30
 800e1da:	d86b      	bhi.n	800e2b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e1dc:	2b20      	cmp	r3, #32
 800e1de:	d060      	beq.n	800e2a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800e1e0:	2b20      	cmp	r3, #32
 800e1e2:	d867      	bhi.n	800e2b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d05c      	beq.n	800e2a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800e1e8:	2b10      	cmp	r3, #16
 800e1ea:	d05a      	beq.n	800e2a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800e1ec:	e062      	b.n	800e2b4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e1fe:	f000 fd59 	bl	800ecb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	689b      	ldr	r3, [r3, #8]
 800e208:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e210:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	68ba      	ldr	r2, [r7, #8]
 800e218:	609a      	str	r2, [r3, #8]
      break;
 800e21a:	e04f      	b.n	800e2bc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e22c:	f000 fd42 	bl	800ecb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	689a      	ldr	r2, [r3, #8]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e23e:	609a      	str	r2, [r3, #8]
      break;
 800e240:	e03c      	b.n	800e2bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e24e:	461a      	mov	r2, r3
 800e250:	f000 fcb2 	bl	800ebb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2150      	movs	r1, #80	@ 0x50
 800e25a:	4618      	mov	r0, r3
 800e25c:	f000 fd0c 	bl	800ec78 <TIM_ITRx_SetConfig>
      break;
 800e260:	e02c      	b.n	800e2bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e26e:	461a      	mov	r2, r3
 800e270:	f000 fcd1 	bl	800ec16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	2160      	movs	r1, #96	@ 0x60
 800e27a:	4618      	mov	r0, r3
 800e27c:	f000 fcfc 	bl	800ec78 <TIM_ITRx_SetConfig>
      break;
 800e280:	e01c      	b.n	800e2bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e28e:	461a      	mov	r2, r3
 800e290:	f000 fc92 	bl	800ebb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2140      	movs	r1, #64	@ 0x40
 800e29a:	4618      	mov	r0, r3
 800e29c:	f000 fcec 	bl	800ec78 <TIM_ITRx_SetConfig>
      break;
 800e2a0:	e00c      	b.n	800e2bc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681a      	ldr	r2, [r3, #0]
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	4610      	mov	r0, r2
 800e2ae:	f000 fce3 	bl	800ec78 <TIM_ITRx_SetConfig>
      break;
 800e2b2:	e003      	b.n	800e2bc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	73fb      	strb	r3, [r7, #15]
      break;
 800e2b8:	e000      	b.n	800e2bc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e2ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2201      	movs	r2, #1
 800e2c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	ffceff88 	.word	0xffceff88
 800e2dc:	00100040 	.word	0x00100040
 800e2e0:	00100030 	.word	0x00100030
 800e2e4:	00100020 	.word	0x00100020

0800e2e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800e2f0:	bf00      	nop
 800e2f2:	370c      	adds	r7, #12
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr

0800e2fc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e304:	bf00      	nop
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e31c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e322:	687a      	ldr	r2, [r7, #4]
 800e324:	429a      	cmp	r2, r3
 800e326:	d107      	bne.n	800e338 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2201      	movs	r2, #1
 800e32c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2201      	movs	r2, #1
 800e332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e336:	e02a      	b.n	800e38e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	429a      	cmp	r2, r3
 800e340:	d107      	bne.n	800e352 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2202      	movs	r2, #2
 800e346:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2201      	movs	r2, #1
 800e34c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e350:	e01d      	b.n	800e38e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d107      	bne.n	800e36c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2204      	movs	r2, #4
 800e360:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2201      	movs	r2, #1
 800e366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e36a:	e010      	b.n	800e38e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	429a      	cmp	r2, r3
 800e374:	d107      	bne.n	800e386 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2208      	movs	r2, #8
 800e37a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2201      	movs	r2, #1
 800e380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e384:	e003      	b.n	800e38e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2201      	movs	r2, #1
 800e38a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f7ff ffb4 	bl	800e2fc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	771a      	strb	r2, [r3, #28]
}
 800e39a:	bf00      	nop
 800e39c:	3710      	adds	r7, #16
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}

0800e3a2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b084      	sub	sp, #16
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d10b      	bne.n	800e3d2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2201      	movs	r2, #1
 800e3be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	69db      	ldr	r3, [r3, #28]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d136      	bne.n	800e436 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e3d0:	e031      	b.n	800e436 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d10b      	bne.n	800e3f4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2202      	movs	r2, #2
 800e3e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	69db      	ldr	r3, [r3, #28]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d125      	bne.n	800e436 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e3f2:	e020      	b.n	800e436 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d10b      	bne.n	800e416 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2204      	movs	r2, #4
 800e402:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	69db      	ldr	r3, [r3, #28]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d114      	bne.n	800e436 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	2201      	movs	r2, #1
 800e410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e414:	e00f      	b.n	800e436 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d10a      	bne.n	800e436 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2208      	movs	r2, #8
 800e424:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	69db      	ldr	r3, [r3, #28]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d103      	bne.n	800e436 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2201      	movs	r2, #1
 800e432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e436:	68f8      	ldr	r0, [r7, #12]
 800e438:	f7f3 fe6a 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2200      	movs	r2, #0
 800e440:	771a      	strb	r2, [r3, #28]
}
 800e442:	bf00      	nop
 800e444:	3710      	adds	r7, #16
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b084      	sub	sp, #16
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e456:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	429a      	cmp	r2, r3
 800e460:	d103      	bne.n	800e46a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2201      	movs	r2, #1
 800e466:	771a      	strb	r2, [r3, #28]
 800e468:	e019      	b.n	800e49e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	429a      	cmp	r2, r3
 800e472:	d103      	bne.n	800e47c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2202      	movs	r2, #2
 800e478:	771a      	strb	r2, [r3, #28]
 800e47a:	e010      	b.n	800e49e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	429a      	cmp	r2, r3
 800e484:	d103      	bne.n	800e48e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2204      	movs	r2, #4
 800e48a:	771a      	strb	r2, [r3, #28]
 800e48c:	e007      	b.n	800e49e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e492:	687a      	ldr	r2, [r7, #4]
 800e494:	429a      	cmp	r2, r3
 800e496:	d102      	bne.n	800e49e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2208      	movs	r2, #8
 800e49c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800e49e:	68f8      	ldr	r0, [r7, #12]
 800e4a0:	f7ff ff22 	bl	800e2e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	771a      	strb	r2, [r3, #28]
}
 800e4aa:	bf00      	nop
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
	...

0800e4b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b085      	sub	sp, #20
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	4a47      	ldr	r2, [pc, #284]	@ (800e5e4 <TIM_Base_SetConfig+0x130>)
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d013      	beq.n	800e4f4 <TIM_Base_SetConfig+0x40>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4d2:	d00f      	beq.n	800e4f4 <TIM_Base_SetConfig+0x40>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	4a44      	ldr	r2, [pc, #272]	@ (800e5e8 <TIM_Base_SetConfig+0x134>)
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d00b      	beq.n	800e4f4 <TIM_Base_SetConfig+0x40>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	4a43      	ldr	r2, [pc, #268]	@ (800e5ec <TIM_Base_SetConfig+0x138>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d007      	beq.n	800e4f4 <TIM_Base_SetConfig+0x40>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	4a42      	ldr	r2, [pc, #264]	@ (800e5f0 <TIM_Base_SetConfig+0x13c>)
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d003      	beq.n	800e4f4 <TIM_Base_SetConfig+0x40>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	4a41      	ldr	r2, [pc, #260]	@ (800e5f4 <TIM_Base_SetConfig+0x140>)
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	d108      	bne.n	800e506 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	4313      	orrs	r3, r2
 800e504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	4a36      	ldr	r2, [pc, #216]	@ (800e5e4 <TIM_Base_SetConfig+0x130>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d027      	beq.n	800e55e <TIM_Base_SetConfig+0xaa>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e514:	d023      	beq.n	800e55e <TIM_Base_SetConfig+0xaa>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	4a33      	ldr	r2, [pc, #204]	@ (800e5e8 <TIM_Base_SetConfig+0x134>)
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d01f      	beq.n	800e55e <TIM_Base_SetConfig+0xaa>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	4a32      	ldr	r2, [pc, #200]	@ (800e5ec <TIM_Base_SetConfig+0x138>)
 800e522:	4293      	cmp	r3, r2
 800e524:	d01b      	beq.n	800e55e <TIM_Base_SetConfig+0xaa>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	4a31      	ldr	r2, [pc, #196]	@ (800e5f0 <TIM_Base_SetConfig+0x13c>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d017      	beq.n	800e55e <TIM_Base_SetConfig+0xaa>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	4a30      	ldr	r2, [pc, #192]	@ (800e5f4 <TIM_Base_SetConfig+0x140>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d013      	beq.n	800e55e <TIM_Base_SetConfig+0xaa>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4a2f      	ldr	r2, [pc, #188]	@ (800e5f8 <TIM_Base_SetConfig+0x144>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d00f      	beq.n	800e55e <TIM_Base_SetConfig+0xaa>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4a2e      	ldr	r2, [pc, #184]	@ (800e5fc <TIM_Base_SetConfig+0x148>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d00b      	beq.n	800e55e <TIM_Base_SetConfig+0xaa>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	4a2d      	ldr	r2, [pc, #180]	@ (800e600 <TIM_Base_SetConfig+0x14c>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d007      	beq.n	800e55e <TIM_Base_SetConfig+0xaa>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	4a2c      	ldr	r2, [pc, #176]	@ (800e604 <TIM_Base_SetConfig+0x150>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d003      	beq.n	800e55e <TIM_Base_SetConfig+0xaa>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	4a2b      	ldr	r2, [pc, #172]	@ (800e608 <TIM_Base_SetConfig+0x154>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d108      	bne.n	800e570 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	68fa      	ldr	r2, [r7, #12]
 800e56c:	4313      	orrs	r3, r2
 800e56e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	695b      	ldr	r3, [r3, #20]
 800e57a:	4313      	orrs	r3, r2
 800e57c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	689a      	ldr	r2, [r3, #8]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4a14      	ldr	r2, [pc, #80]	@ (800e5e4 <TIM_Base_SetConfig+0x130>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d00f      	beq.n	800e5b6 <TIM_Base_SetConfig+0x102>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4a16      	ldr	r2, [pc, #88]	@ (800e5f4 <TIM_Base_SetConfig+0x140>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d00b      	beq.n	800e5b6 <TIM_Base_SetConfig+0x102>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4a15      	ldr	r2, [pc, #84]	@ (800e5f8 <TIM_Base_SetConfig+0x144>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d007      	beq.n	800e5b6 <TIM_Base_SetConfig+0x102>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4a14      	ldr	r2, [pc, #80]	@ (800e5fc <TIM_Base_SetConfig+0x148>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d003      	beq.n	800e5b6 <TIM_Base_SetConfig+0x102>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4a13      	ldr	r2, [pc, #76]	@ (800e600 <TIM_Base_SetConfig+0x14c>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d103      	bne.n	800e5be <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	691a      	ldr	r2, [r3, #16]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f043 0204 	orr.w	r2, r3, #4
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	68fa      	ldr	r2, [r7, #12]
 800e5d4:	601a      	str	r2, [r3, #0]
}
 800e5d6:	bf00      	nop
 800e5d8:	3714      	adds	r7, #20
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop
 800e5e4:	40010000 	.word	0x40010000
 800e5e8:	40000400 	.word	0x40000400
 800e5ec:	40000800 	.word	0x40000800
 800e5f0:	40000c00 	.word	0x40000c00
 800e5f4:	40010400 	.word	0x40010400
 800e5f8:	40014000 	.word	0x40014000
 800e5fc:	40014400 	.word	0x40014400
 800e600:	40014800 	.word	0x40014800
 800e604:	4000e000 	.word	0x4000e000
 800e608:	4000e400 	.word	0x4000e400

0800e60c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b087      	sub	sp, #28
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6a1b      	ldr	r3, [r3, #32]
 800e61a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6a1b      	ldr	r3, [r3, #32]
 800e620:	f023 0201 	bic.w	r2, r3, #1
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	699b      	ldr	r3, [r3, #24]
 800e632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e634:	68fa      	ldr	r2, [r7, #12]
 800e636:	4b37      	ldr	r3, [pc, #220]	@ (800e714 <TIM_OC1_SetConfig+0x108>)
 800e638:	4013      	ands	r3, r2
 800e63a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f023 0303 	bic.w	r3, r3, #3
 800e642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	68fa      	ldr	r2, [r7, #12]
 800e64a:	4313      	orrs	r3, r2
 800e64c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	f023 0302 	bic.w	r3, r3, #2
 800e654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	697a      	ldr	r2, [r7, #20]
 800e65c:	4313      	orrs	r3, r2
 800e65e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4a2d      	ldr	r2, [pc, #180]	@ (800e718 <TIM_OC1_SetConfig+0x10c>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d00f      	beq.n	800e688 <TIM_OC1_SetConfig+0x7c>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	4a2c      	ldr	r2, [pc, #176]	@ (800e71c <TIM_OC1_SetConfig+0x110>)
 800e66c:	4293      	cmp	r3, r2
 800e66e:	d00b      	beq.n	800e688 <TIM_OC1_SetConfig+0x7c>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	4a2b      	ldr	r2, [pc, #172]	@ (800e720 <TIM_OC1_SetConfig+0x114>)
 800e674:	4293      	cmp	r3, r2
 800e676:	d007      	beq.n	800e688 <TIM_OC1_SetConfig+0x7c>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	4a2a      	ldr	r2, [pc, #168]	@ (800e724 <TIM_OC1_SetConfig+0x118>)
 800e67c:	4293      	cmp	r3, r2
 800e67e:	d003      	beq.n	800e688 <TIM_OC1_SetConfig+0x7c>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	4a29      	ldr	r2, [pc, #164]	@ (800e728 <TIM_OC1_SetConfig+0x11c>)
 800e684:	4293      	cmp	r3, r2
 800e686:	d10c      	bne.n	800e6a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	f023 0308 	bic.w	r3, r3, #8
 800e68e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	68db      	ldr	r3, [r3, #12]
 800e694:	697a      	ldr	r2, [r7, #20]
 800e696:	4313      	orrs	r3, r2
 800e698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	f023 0304 	bic.w	r3, r3, #4
 800e6a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	4a1c      	ldr	r2, [pc, #112]	@ (800e718 <TIM_OC1_SetConfig+0x10c>)
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	d00f      	beq.n	800e6ca <TIM_OC1_SetConfig+0xbe>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	4a1b      	ldr	r2, [pc, #108]	@ (800e71c <TIM_OC1_SetConfig+0x110>)
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d00b      	beq.n	800e6ca <TIM_OC1_SetConfig+0xbe>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	4a1a      	ldr	r2, [pc, #104]	@ (800e720 <TIM_OC1_SetConfig+0x114>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d007      	beq.n	800e6ca <TIM_OC1_SetConfig+0xbe>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	4a19      	ldr	r2, [pc, #100]	@ (800e724 <TIM_OC1_SetConfig+0x118>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d003      	beq.n	800e6ca <TIM_OC1_SetConfig+0xbe>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	4a18      	ldr	r2, [pc, #96]	@ (800e728 <TIM_OC1_SetConfig+0x11c>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d111      	bne.n	800e6ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e6d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e6d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	695b      	ldr	r3, [r3, #20]
 800e6de:	693a      	ldr	r2, [r7, #16]
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	699b      	ldr	r3, [r3, #24]
 800e6e8:	693a      	ldr	r2, [r7, #16]
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	693a      	ldr	r2, [r7, #16]
 800e6f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	68fa      	ldr	r2, [r7, #12]
 800e6f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	685a      	ldr	r2, [r3, #4]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	697a      	ldr	r2, [r7, #20]
 800e706:	621a      	str	r2, [r3, #32]
}
 800e708:	bf00      	nop
 800e70a:	371c      	adds	r7, #28
 800e70c:	46bd      	mov	sp, r7
 800e70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e712:	4770      	bx	lr
 800e714:	fffeff8f 	.word	0xfffeff8f
 800e718:	40010000 	.word	0x40010000
 800e71c:	40010400 	.word	0x40010400
 800e720:	40014000 	.word	0x40014000
 800e724:	40014400 	.word	0x40014400
 800e728:	40014800 	.word	0x40014800

0800e72c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b087      	sub	sp, #28
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6a1b      	ldr	r3, [r3, #32]
 800e73a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6a1b      	ldr	r3, [r3, #32]
 800e740:	f023 0210 	bic.w	r2, r3, #16
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	699b      	ldr	r3, [r3, #24]
 800e752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e754:	68fa      	ldr	r2, [r7, #12]
 800e756:	4b34      	ldr	r3, [pc, #208]	@ (800e828 <TIM_OC2_SetConfig+0xfc>)
 800e758:	4013      	ands	r3, r2
 800e75a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	021b      	lsls	r3, r3, #8
 800e76a:	68fa      	ldr	r2, [r7, #12]
 800e76c:	4313      	orrs	r3, r2
 800e76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	f023 0320 	bic.w	r3, r3, #32
 800e776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	689b      	ldr	r3, [r3, #8]
 800e77c:	011b      	lsls	r3, r3, #4
 800e77e:	697a      	ldr	r2, [r7, #20]
 800e780:	4313      	orrs	r3, r2
 800e782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4a29      	ldr	r2, [pc, #164]	@ (800e82c <TIM_OC2_SetConfig+0x100>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d003      	beq.n	800e794 <TIM_OC2_SetConfig+0x68>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	4a28      	ldr	r2, [pc, #160]	@ (800e830 <TIM_OC2_SetConfig+0x104>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d10d      	bne.n	800e7b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e79a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	011b      	lsls	r3, r3, #4
 800e7a2:	697a      	ldr	r2, [r7, #20]
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	4a1e      	ldr	r2, [pc, #120]	@ (800e82c <TIM_OC2_SetConfig+0x100>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d00f      	beq.n	800e7d8 <TIM_OC2_SetConfig+0xac>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	4a1d      	ldr	r2, [pc, #116]	@ (800e830 <TIM_OC2_SetConfig+0x104>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d00b      	beq.n	800e7d8 <TIM_OC2_SetConfig+0xac>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	4a1c      	ldr	r2, [pc, #112]	@ (800e834 <TIM_OC2_SetConfig+0x108>)
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d007      	beq.n	800e7d8 <TIM_OC2_SetConfig+0xac>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	4a1b      	ldr	r2, [pc, #108]	@ (800e838 <TIM_OC2_SetConfig+0x10c>)
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d003      	beq.n	800e7d8 <TIM_OC2_SetConfig+0xac>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	4a1a      	ldr	r2, [pc, #104]	@ (800e83c <TIM_OC2_SetConfig+0x110>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d113      	bne.n	800e800 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e7de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e7e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	695b      	ldr	r3, [r3, #20]
 800e7ec:	009b      	lsls	r3, r3, #2
 800e7ee:	693a      	ldr	r2, [r7, #16]
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	699b      	ldr	r3, [r3, #24]
 800e7f8:	009b      	lsls	r3, r3, #2
 800e7fa:	693a      	ldr	r2, [r7, #16]
 800e7fc:	4313      	orrs	r3, r2
 800e7fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	693a      	ldr	r2, [r7, #16]
 800e804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	685a      	ldr	r2, [r3, #4]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	697a      	ldr	r2, [r7, #20]
 800e818:	621a      	str	r2, [r3, #32]
}
 800e81a:	bf00      	nop
 800e81c:	371c      	adds	r7, #28
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr
 800e826:	bf00      	nop
 800e828:	feff8fff 	.word	0xfeff8fff
 800e82c:	40010000 	.word	0x40010000
 800e830:	40010400 	.word	0x40010400
 800e834:	40014000 	.word	0x40014000
 800e838:	40014400 	.word	0x40014400
 800e83c:	40014800 	.word	0x40014800

0800e840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e840:	b480      	push	{r7}
 800e842:	b087      	sub	sp, #28
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6a1b      	ldr	r3, [r3, #32]
 800e84e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6a1b      	ldr	r3, [r3, #32]
 800e854:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	69db      	ldr	r3, [r3, #28]
 800e866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	4b33      	ldr	r3, [pc, #204]	@ (800e938 <TIM_OC3_SetConfig+0xf8>)
 800e86c:	4013      	ands	r3, r2
 800e86e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f023 0303 	bic.w	r3, r3, #3
 800e876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	68fa      	ldr	r2, [r7, #12]
 800e87e:	4313      	orrs	r3, r2
 800e880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	689b      	ldr	r3, [r3, #8]
 800e88e:	021b      	lsls	r3, r3, #8
 800e890:	697a      	ldr	r2, [r7, #20]
 800e892:	4313      	orrs	r3, r2
 800e894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	4a28      	ldr	r2, [pc, #160]	@ (800e93c <TIM_OC3_SetConfig+0xfc>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d003      	beq.n	800e8a6 <TIM_OC3_SetConfig+0x66>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	4a27      	ldr	r2, [pc, #156]	@ (800e940 <TIM_OC3_SetConfig+0x100>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d10d      	bne.n	800e8c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e8ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	021b      	lsls	r3, r3, #8
 800e8b4:	697a      	ldr	r2, [r7, #20]
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e8c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	4a1d      	ldr	r2, [pc, #116]	@ (800e93c <TIM_OC3_SetConfig+0xfc>)
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d00f      	beq.n	800e8ea <TIM_OC3_SetConfig+0xaa>
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	4a1c      	ldr	r2, [pc, #112]	@ (800e940 <TIM_OC3_SetConfig+0x100>)
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d00b      	beq.n	800e8ea <TIM_OC3_SetConfig+0xaa>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	4a1b      	ldr	r2, [pc, #108]	@ (800e944 <TIM_OC3_SetConfig+0x104>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d007      	beq.n	800e8ea <TIM_OC3_SetConfig+0xaa>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	4a1a      	ldr	r2, [pc, #104]	@ (800e948 <TIM_OC3_SetConfig+0x108>)
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	d003      	beq.n	800e8ea <TIM_OC3_SetConfig+0xaa>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	4a19      	ldr	r2, [pc, #100]	@ (800e94c <TIM_OC3_SetConfig+0x10c>)
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d113      	bne.n	800e912 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e8f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e8f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	695b      	ldr	r3, [r3, #20]
 800e8fe:	011b      	lsls	r3, r3, #4
 800e900:	693a      	ldr	r2, [r7, #16]
 800e902:	4313      	orrs	r3, r2
 800e904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	699b      	ldr	r3, [r3, #24]
 800e90a:	011b      	lsls	r3, r3, #4
 800e90c:	693a      	ldr	r2, [r7, #16]
 800e90e:	4313      	orrs	r3, r2
 800e910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	693a      	ldr	r2, [r7, #16]
 800e916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	685a      	ldr	r2, [r3, #4]
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	697a      	ldr	r2, [r7, #20]
 800e92a:	621a      	str	r2, [r3, #32]
}
 800e92c:	bf00      	nop
 800e92e:	371c      	adds	r7, #28
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr
 800e938:	fffeff8f 	.word	0xfffeff8f
 800e93c:	40010000 	.word	0x40010000
 800e940:	40010400 	.word	0x40010400
 800e944:	40014000 	.word	0x40014000
 800e948:	40014400 	.word	0x40014400
 800e94c:	40014800 	.word	0x40014800

0800e950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e950:	b480      	push	{r7}
 800e952:	b087      	sub	sp, #28
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6a1b      	ldr	r3, [r3, #32]
 800e95e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6a1b      	ldr	r3, [r3, #32]
 800e964:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	69db      	ldr	r3, [r3, #28]
 800e976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e978:	68fa      	ldr	r2, [r7, #12]
 800e97a:	4b24      	ldr	r3, [pc, #144]	@ (800ea0c <TIM_OC4_SetConfig+0xbc>)
 800e97c:	4013      	ands	r3, r2
 800e97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	021b      	lsls	r3, r3, #8
 800e98e:	68fa      	ldr	r2, [r7, #12]
 800e990:	4313      	orrs	r3, r2
 800e992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e99a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	031b      	lsls	r3, r3, #12
 800e9a2:	693a      	ldr	r2, [r7, #16]
 800e9a4:	4313      	orrs	r3, r2
 800e9a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	4a19      	ldr	r2, [pc, #100]	@ (800ea10 <TIM_OC4_SetConfig+0xc0>)
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d00f      	beq.n	800e9d0 <TIM_OC4_SetConfig+0x80>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	4a18      	ldr	r2, [pc, #96]	@ (800ea14 <TIM_OC4_SetConfig+0xc4>)
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d00b      	beq.n	800e9d0 <TIM_OC4_SetConfig+0x80>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	4a17      	ldr	r2, [pc, #92]	@ (800ea18 <TIM_OC4_SetConfig+0xc8>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d007      	beq.n	800e9d0 <TIM_OC4_SetConfig+0x80>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	4a16      	ldr	r2, [pc, #88]	@ (800ea1c <TIM_OC4_SetConfig+0xcc>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d003      	beq.n	800e9d0 <TIM_OC4_SetConfig+0x80>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	4a15      	ldr	r2, [pc, #84]	@ (800ea20 <TIM_OC4_SetConfig+0xd0>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d109      	bne.n	800e9e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e9d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	695b      	ldr	r3, [r3, #20]
 800e9dc:	019b      	lsls	r3, r3, #6
 800e9de:	697a      	ldr	r2, [r7, #20]
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	697a      	ldr	r2, [r7, #20]
 800e9e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	685a      	ldr	r2, [r3, #4]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	693a      	ldr	r2, [r7, #16]
 800e9fc:	621a      	str	r2, [r3, #32]
}
 800e9fe:	bf00      	nop
 800ea00:	371c      	adds	r7, #28
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop
 800ea0c:	feff8fff 	.word	0xfeff8fff
 800ea10:	40010000 	.word	0x40010000
 800ea14:	40010400 	.word	0x40010400
 800ea18:	40014000 	.word	0x40014000
 800ea1c:	40014400 	.word	0x40014400
 800ea20:	40014800 	.word	0x40014800

0800ea24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b087      	sub	sp, #28
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6a1b      	ldr	r3, [r3, #32]
 800ea32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6a1b      	ldr	r3, [r3, #32]
 800ea38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	4b21      	ldr	r3, [pc, #132]	@ (800ead4 <TIM_OC5_SetConfig+0xb0>)
 800ea50:	4013      	ands	r3, r2
 800ea52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ea64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	689b      	ldr	r3, [r3, #8]
 800ea6a:	041b      	lsls	r3, r3, #16
 800ea6c:	693a      	ldr	r2, [r7, #16]
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	4a18      	ldr	r2, [pc, #96]	@ (800ead8 <TIM_OC5_SetConfig+0xb4>)
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d00f      	beq.n	800ea9a <TIM_OC5_SetConfig+0x76>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	4a17      	ldr	r2, [pc, #92]	@ (800eadc <TIM_OC5_SetConfig+0xb8>)
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d00b      	beq.n	800ea9a <TIM_OC5_SetConfig+0x76>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	4a16      	ldr	r2, [pc, #88]	@ (800eae0 <TIM_OC5_SetConfig+0xbc>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d007      	beq.n	800ea9a <TIM_OC5_SetConfig+0x76>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	4a15      	ldr	r2, [pc, #84]	@ (800eae4 <TIM_OC5_SetConfig+0xc0>)
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d003      	beq.n	800ea9a <TIM_OC5_SetConfig+0x76>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	4a14      	ldr	r2, [pc, #80]	@ (800eae8 <TIM_OC5_SetConfig+0xc4>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d109      	bne.n	800eaae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eaa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	695b      	ldr	r3, [r3, #20]
 800eaa6:	021b      	lsls	r3, r3, #8
 800eaa8:	697a      	ldr	r2, [r7, #20]
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	697a      	ldr	r2, [r7, #20]
 800eab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	68fa      	ldr	r2, [r7, #12]
 800eab8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	685a      	ldr	r2, [r3, #4]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	693a      	ldr	r2, [r7, #16]
 800eac6:	621a      	str	r2, [r3, #32]
}
 800eac8:	bf00      	nop
 800eaca:	371c      	adds	r7, #28
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr
 800ead4:	fffeff8f 	.word	0xfffeff8f
 800ead8:	40010000 	.word	0x40010000
 800eadc:	40010400 	.word	0x40010400
 800eae0:	40014000 	.word	0x40014000
 800eae4:	40014400 	.word	0x40014400
 800eae8:	40014800 	.word	0x40014800

0800eaec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b087      	sub	sp, #28
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6a1b      	ldr	r3, [r3, #32]
 800eafa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6a1b      	ldr	r3, [r3, #32]
 800eb00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eb14:	68fa      	ldr	r2, [r7, #12]
 800eb16:	4b22      	ldr	r3, [pc, #136]	@ (800eba0 <TIM_OC6_SetConfig+0xb4>)
 800eb18:	4013      	ands	r3, r2
 800eb1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	021b      	lsls	r3, r3, #8
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	4313      	orrs	r3, r2
 800eb26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eb2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	051b      	lsls	r3, r3, #20
 800eb36:	693a      	ldr	r2, [r7, #16]
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4a19      	ldr	r2, [pc, #100]	@ (800eba4 <TIM_OC6_SetConfig+0xb8>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d00f      	beq.n	800eb64 <TIM_OC6_SetConfig+0x78>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4a18      	ldr	r2, [pc, #96]	@ (800eba8 <TIM_OC6_SetConfig+0xbc>)
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	d00b      	beq.n	800eb64 <TIM_OC6_SetConfig+0x78>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	4a17      	ldr	r2, [pc, #92]	@ (800ebac <TIM_OC6_SetConfig+0xc0>)
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d007      	beq.n	800eb64 <TIM_OC6_SetConfig+0x78>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	4a16      	ldr	r2, [pc, #88]	@ (800ebb0 <TIM_OC6_SetConfig+0xc4>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d003      	beq.n	800eb64 <TIM_OC6_SetConfig+0x78>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	4a15      	ldr	r2, [pc, #84]	@ (800ebb4 <TIM_OC6_SetConfig+0xc8>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d109      	bne.n	800eb78 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eb6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	695b      	ldr	r3, [r3, #20]
 800eb70:	029b      	lsls	r3, r3, #10
 800eb72:	697a      	ldr	r2, [r7, #20]
 800eb74:	4313      	orrs	r3, r2
 800eb76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	697a      	ldr	r2, [r7, #20]
 800eb7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	68fa      	ldr	r2, [r7, #12]
 800eb82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	685a      	ldr	r2, [r3, #4]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	693a      	ldr	r2, [r7, #16]
 800eb90:	621a      	str	r2, [r3, #32]
}
 800eb92:	bf00      	nop
 800eb94:	371c      	adds	r7, #28
 800eb96:	46bd      	mov	sp, r7
 800eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop
 800eba0:	feff8fff 	.word	0xfeff8fff
 800eba4:	40010000 	.word	0x40010000
 800eba8:	40010400 	.word	0x40010400
 800ebac:	40014000 	.word	0x40014000
 800ebb0:	40014400 	.word	0x40014400
 800ebb4:	40014800 	.word	0x40014800

0800ebb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b087      	sub	sp, #28
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	60f8      	str	r0, [r7, #12]
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	6a1b      	ldr	r3, [r3, #32]
 800ebc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	6a1b      	ldr	r3, [r3, #32]
 800ebce:	f023 0201 	bic.w	r2, r3, #1
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	699b      	ldr	r3, [r3, #24]
 800ebda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ebe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	011b      	lsls	r3, r3, #4
 800ebe8:	693a      	ldr	r2, [r7, #16]
 800ebea:	4313      	orrs	r3, r2
 800ebec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	f023 030a 	bic.w	r3, r3, #10
 800ebf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ebf6:	697a      	ldr	r2, [r7, #20]
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	4313      	orrs	r3, r2
 800ebfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	693a      	ldr	r2, [r7, #16]
 800ec02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	697a      	ldr	r2, [r7, #20]
 800ec08:	621a      	str	r2, [r3, #32]
}
 800ec0a:	bf00      	nop
 800ec0c:	371c      	adds	r7, #28
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr

0800ec16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ec16:	b480      	push	{r7}
 800ec18:	b087      	sub	sp, #28
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	60f8      	str	r0, [r7, #12]
 800ec1e:	60b9      	str	r1, [r7, #8]
 800ec20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	6a1b      	ldr	r3, [r3, #32]
 800ec26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	6a1b      	ldr	r3, [r3, #32]
 800ec2c:	f023 0210 	bic.w	r2, r3, #16
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	699b      	ldr	r3, [r3, #24]
 800ec38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ec40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	031b      	lsls	r3, r3, #12
 800ec46:	693a      	ldr	r2, [r7, #16]
 800ec48:	4313      	orrs	r3, r2
 800ec4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ec52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	011b      	lsls	r3, r3, #4
 800ec58:	697a      	ldr	r2, [r7, #20]
 800ec5a:	4313      	orrs	r3, r2
 800ec5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	693a      	ldr	r2, [r7, #16]
 800ec62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	621a      	str	r2, [r3, #32]
}
 800ec6a:	bf00      	nop
 800ec6c:	371c      	adds	r7, #28
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr
	...

0800ec78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b085      	sub	sp, #20
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	689b      	ldr	r3, [r3, #8]
 800ec86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	4b09      	ldr	r3, [pc, #36]	@ (800ecb0 <TIM_ITRx_SetConfig+0x38>)
 800ec8c:	4013      	ands	r3, r2
 800ec8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ec90:	683a      	ldr	r2, [r7, #0]
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	4313      	orrs	r3, r2
 800ec96:	f043 0307 	orr.w	r3, r3, #7
 800ec9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	68fa      	ldr	r2, [r7, #12]
 800eca0:	609a      	str	r2, [r3, #8]
}
 800eca2:	bf00      	nop
 800eca4:	3714      	adds	r7, #20
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop
 800ecb0:	ffcfff8f 	.word	0xffcfff8f

0800ecb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b087      	sub	sp, #28
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	607a      	str	r2, [r7, #4]
 800ecc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	689b      	ldr	r3, [r3, #8]
 800ecc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ecce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	021a      	lsls	r2, r3, #8
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	431a      	orrs	r2, r3
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	4313      	orrs	r3, r2
 800ecdc:	697a      	ldr	r2, [r7, #20]
 800ecde:	4313      	orrs	r3, r2
 800ece0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	697a      	ldr	r2, [r7, #20]
 800ece6:	609a      	str	r2, [r3, #8]
}
 800ece8:	bf00      	nop
 800ecea:	371c      	adds	r7, #28
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr

0800ecf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b087      	sub	sp, #28
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	f003 031f 	and.w	r3, r3, #31
 800ed06:	2201      	movs	r2, #1
 800ed08:	fa02 f303 	lsl.w	r3, r2, r3
 800ed0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	6a1a      	ldr	r2, [r3, #32]
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	43db      	mvns	r3, r3
 800ed16:	401a      	ands	r2, r3
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6a1a      	ldr	r2, [r3, #32]
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	f003 031f 	and.w	r3, r3, #31
 800ed26:	6879      	ldr	r1, [r7, #4]
 800ed28:	fa01 f303 	lsl.w	r3, r1, r3
 800ed2c:	431a      	orrs	r2, r3
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	621a      	str	r2, [r3, #32]
}
 800ed32:	bf00      	nop
 800ed34:	371c      	adds	r7, #28
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr
	...

0800ed40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b085      	sub	sp, #20
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d101      	bne.n	800ed58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ed54:	2302      	movs	r3, #2
 800ed56:	e077      	b.n	800ee48 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2202      	movs	r2, #2
 800ed64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	689b      	ldr	r3, [r3, #8]
 800ed76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a35      	ldr	r2, [pc, #212]	@ (800ee54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d004      	beq.n	800ed8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4a34      	ldr	r2, [pc, #208]	@ (800ee58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d108      	bne.n	800ed9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ed92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	68fa      	ldr	r2, [r7, #12]
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eda4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	68fa      	ldr	r2, [r7, #12]
 800edac:	4313      	orrs	r3, r2
 800edae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	68fa      	ldr	r2, [r7, #12]
 800edb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	4a25      	ldr	r2, [pc, #148]	@ (800ee54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d02c      	beq.n	800ee1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800edca:	d027      	beq.n	800ee1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4a22      	ldr	r2, [pc, #136]	@ (800ee5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d022      	beq.n	800ee1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a21      	ldr	r2, [pc, #132]	@ (800ee60 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d01d      	beq.n	800ee1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	4a1f      	ldr	r2, [pc, #124]	@ (800ee64 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d018      	beq.n	800ee1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4a1a      	ldr	r2, [pc, #104]	@ (800ee58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800edf0:	4293      	cmp	r3, r2
 800edf2:	d013      	beq.n	800ee1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4a1b      	ldr	r2, [pc, #108]	@ (800ee68 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d00e      	beq.n	800ee1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	4a1a      	ldr	r2, [pc, #104]	@ (800ee6c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d009      	beq.n	800ee1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4a18      	ldr	r2, [pc, #96]	@ (800ee70 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d004      	beq.n	800ee1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4a17      	ldr	r2, [pc, #92]	@ (800ee74 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d10c      	bne.n	800ee36 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ee22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	689b      	ldr	r3, [r3, #8]
 800ee28:	68ba      	ldr	r2, [r7, #8]
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	68ba      	ldr	r2, [r7, #8]
 800ee34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2201      	movs	r2, #1
 800ee3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2200      	movs	r2, #0
 800ee42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ee46:	2300      	movs	r3, #0
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3714      	adds	r7, #20
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr
 800ee54:	40010000 	.word	0x40010000
 800ee58:	40010400 	.word	0x40010400
 800ee5c:	40000400 	.word	0x40000400
 800ee60:	40000800 	.word	0x40000800
 800ee64:	40000c00 	.word	0x40000c00
 800ee68:	40001800 	.word	0x40001800
 800ee6c:	40014000 	.word	0x40014000
 800ee70:	4000e000 	.word	0x4000e000
 800ee74:	4000e400 	.word	0x4000e400

0800ee78 <LL_GPIO_SetPinMode>:
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b085      	sub	sp, #20
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	6819      	ldr	r1, [r3, #0]
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	fb03 f203 	mul.w	r2, r3, r3
 800ee8e:	4613      	mov	r3, r2
 800ee90:	005b      	lsls	r3, r3, #1
 800ee92:	4413      	add	r3, r2
 800ee94:	43db      	mvns	r3, r3
 800ee96:	ea01 0203 	and.w	r2, r1, r3
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	fb03 f303 	mul.w	r3, r3, r3
 800eea0:	6879      	ldr	r1, [r7, #4]
 800eea2:	fb01 f303 	mul.w	r3, r1, r3
 800eea6:	431a      	orrs	r2, r3
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	601a      	str	r2, [r3, #0]
}
 800eeac:	bf00      	nop
 800eeae:	3714      	adds	r7, #20
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb6:	4770      	bx	lr

0800eeb8 <LL_GPIO_SetPinOutputType>:
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b085      	sub	sp, #20
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	685a      	ldr	r2, [r3, #4]
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	43db      	mvns	r3, r3
 800eecc:	401a      	ands	r2, r3
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	6879      	ldr	r1, [r7, #4]
 800eed2:	fb01 f303 	mul.w	r3, r1, r3
 800eed6:	431a      	orrs	r2, r3
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	605a      	str	r2, [r3, #4]
}
 800eedc:	bf00      	nop
 800eede:	3714      	adds	r7, #20
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr

0800eee8 <LL_GPIO_SetPinSpeed>:
{
 800eee8:	b480      	push	{r7}
 800eeea:	b085      	sub	sp, #20
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	6899      	ldr	r1, [r3, #8]
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	fb03 f203 	mul.w	r2, r3, r3
 800eefe:	4613      	mov	r3, r2
 800ef00:	005b      	lsls	r3, r3, #1
 800ef02:	4413      	add	r3, r2
 800ef04:	43db      	mvns	r3, r3
 800ef06:	ea01 0203 	and.w	r2, r1, r3
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	fb03 f303 	mul.w	r3, r3, r3
 800ef10:	6879      	ldr	r1, [r7, #4]
 800ef12:	fb01 f303 	mul.w	r3, r1, r3
 800ef16:	431a      	orrs	r2, r3
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	609a      	str	r2, [r3, #8]
}
 800ef1c:	bf00      	nop
 800ef1e:	3714      	adds	r7, #20
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr

0800ef28 <LL_GPIO_SetPinPull>:
{
 800ef28:	b480      	push	{r7}
 800ef2a:	b085      	sub	sp, #20
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	68d9      	ldr	r1, [r3, #12]
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	fb03 f203 	mul.w	r2, r3, r3
 800ef3e:	4613      	mov	r3, r2
 800ef40:	005b      	lsls	r3, r3, #1
 800ef42:	4413      	add	r3, r2
 800ef44:	43db      	mvns	r3, r3
 800ef46:	ea01 0203 	and.w	r2, r1, r3
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	fb03 f303 	mul.w	r3, r3, r3
 800ef50:	6879      	ldr	r1, [r7, #4]
 800ef52:	fb01 f303 	mul.w	r3, r1, r3
 800ef56:	431a      	orrs	r2, r3
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	60da      	str	r2, [r3, #12]
}
 800ef5c:	bf00      	nop
 800ef5e:	3714      	adds	r7, #20
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr

0800ef68 <LL_GPIO_SetAFPin_0_7>:
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b085      	sub	sp, #20
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	6a19      	ldr	r1, [r3, #32]
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	fb03 f303 	mul.w	r3, r3, r3
 800ef7e:	68ba      	ldr	r2, [r7, #8]
 800ef80:	fb02 f303 	mul.w	r3, r2, r3
 800ef84:	68ba      	ldr	r2, [r7, #8]
 800ef86:	fb03 f202 	mul.w	r2, r3, r2
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	011b      	lsls	r3, r3, #4
 800ef8e:	1a9b      	subs	r3, r3, r2
 800ef90:	43db      	mvns	r3, r3
 800ef92:	ea01 0203 	and.w	r2, r1, r3
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	fb03 f303 	mul.w	r3, r3, r3
 800ef9c:	68b9      	ldr	r1, [r7, #8]
 800ef9e:	fb01 f303 	mul.w	r3, r1, r3
 800efa2:	68b9      	ldr	r1, [r7, #8]
 800efa4:	fb01 f303 	mul.w	r3, r1, r3
 800efa8:	6879      	ldr	r1, [r7, #4]
 800efaa:	fb01 f303 	mul.w	r3, r1, r3
 800efae:	431a      	orrs	r2, r3
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	621a      	str	r2, [r3, #32]
}
 800efb4:	bf00      	nop
 800efb6:	3714      	adds	r7, #20
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr

0800efc0 <LL_GPIO_SetAFPin_8_15>:
{
 800efc0:	b480      	push	{r7}
 800efc2:	b085      	sub	sp, #20
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	0a1b      	lsrs	r3, r3, #8
 800efd4:	68ba      	ldr	r2, [r7, #8]
 800efd6:	0a12      	lsrs	r2, r2, #8
 800efd8:	fb02 f303 	mul.w	r3, r2, r3
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	0a12      	lsrs	r2, r2, #8
 800efe0:	fb02 f303 	mul.w	r3, r2, r3
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	0a12      	lsrs	r2, r2, #8
 800efe8:	fb03 f202 	mul.w	r2, r3, r2
 800efec:	4613      	mov	r3, r2
 800efee:	011b      	lsls	r3, r3, #4
 800eff0:	1a9b      	subs	r3, r3, r2
 800eff2:	43db      	mvns	r3, r3
 800eff4:	ea01 0203 	and.w	r2, r1, r3
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	0a1b      	lsrs	r3, r3, #8
 800effc:	68b9      	ldr	r1, [r7, #8]
 800effe:	0a09      	lsrs	r1, r1, #8
 800f000:	fb01 f303 	mul.w	r3, r1, r3
 800f004:	68b9      	ldr	r1, [r7, #8]
 800f006:	0a09      	lsrs	r1, r1, #8
 800f008:	fb01 f303 	mul.w	r3, r1, r3
 800f00c:	68b9      	ldr	r1, [r7, #8]
 800f00e:	0a09      	lsrs	r1, r1, #8
 800f010:	fb01 f303 	mul.w	r3, r1, r3
 800f014:	6879      	ldr	r1, [r7, #4]
 800f016:	fb01 f303 	mul.w	r3, r1, r3
 800f01a:	431a      	orrs	r2, r3
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800f020:	bf00      	nop
 800f022:	3714      	adds	r7, #20
 800f024:	46bd      	mov	sp, r7
 800f026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02a:	4770      	bx	lr

0800f02c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b088      	sub	sp, #32
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	fa93 f3a3 	rbit	r3, r3
 800f042:	60fb      	str	r3, [r7, #12]
  return result;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d101      	bne.n	800f052 <LL_GPIO_Init+0x26>
    return 32U;
 800f04e:	2320      	movs	r3, #32
 800f050:	e003      	b.n	800f05a <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	fab3 f383 	clz	r3, r3
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f05c:	e048      	b.n	800f0f0 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	2101      	movs	r1, #1
 800f064:	69fb      	ldr	r3, [r7, #28]
 800f066:	fa01 f303 	lsl.w	r3, r1, r3
 800f06a:	4013      	ands	r3, r2
 800f06c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d03a      	beq.n	800f0ea <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d003      	beq.n	800f084 <LL_GPIO_Init+0x58>
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	2b02      	cmp	r3, #2
 800f082:	d10e      	bne.n	800f0a2 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	689b      	ldr	r3, [r3, #8]
 800f088:	461a      	mov	r2, r3
 800f08a:	69b9      	ldr	r1, [r7, #24]
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f7ff ff2b 	bl	800eee8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	6819      	ldr	r1, [r3, #0]
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	68db      	ldr	r3, [r3, #12]
 800f09a:	461a      	mov	r2, r3
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f7ff ff0b 	bl	800eeb8 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	691b      	ldr	r3, [r3, #16]
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	69b9      	ldr	r1, [r7, #24]
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f7ff ff3c 	bl	800ef28 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	685b      	ldr	r3, [r3, #4]
 800f0b4:	2b02      	cmp	r3, #2
 800f0b6:	d111      	bne.n	800f0dc <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800f0b8:	69bb      	ldr	r3, [r7, #24]
 800f0ba:	2bff      	cmp	r3, #255	@ 0xff
 800f0bc:	d807      	bhi.n	800f0ce <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	695b      	ldr	r3, [r3, #20]
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	69b9      	ldr	r1, [r7, #24]
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f7ff ff4e 	bl	800ef68 <LL_GPIO_SetAFPin_0_7>
 800f0cc:	e006      	b.n	800f0dc <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	695b      	ldr	r3, [r3, #20]
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	69b9      	ldr	r1, [r7, #24]
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f7ff ff72 	bl	800efc0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	69b9      	ldr	r1, [r7, #24]
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff fec7 	bl	800ee78 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800f0ea:	69fb      	ldr	r3, [r7, #28]
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	fa22 f303 	lsr.w	r3, r2, r3
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d1af      	bne.n	800f05e <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800f0fe:	2300      	movs	r3, #0
}
 800f100:	4618      	mov	r0, r3
 800f102:	3720      	adds	r7, #32
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800f108:	b480      	push	{r7}
 800f10a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800f10c:	4b07      	ldr	r3, [pc, #28]	@ (800f12c <LL_RCC_HSE_IsReady+0x24>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f114:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f118:	d101      	bne.n	800f11e <LL_RCC_HSE_IsReady+0x16>
 800f11a:	2301      	movs	r3, #1
 800f11c:	e000      	b.n	800f120 <LL_RCC_HSE_IsReady+0x18>
 800f11e:	2300      	movs	r3, #0
}
 800f120:	4618      	mov	r0, r3
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr
 800f12a:	bf00      	nop
 800f12c:	58024400 	.word	0x58024400

0800f130 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800f130:	b480      	push	{r7}
 800f132:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800f134:	4b06      	ldr	r3, [pc, #24]	@ (800f150 <LL_RCC_HSI_IsReady+0x20>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f003 0304 	and.w	r3, r3, #4
 800f13c:	2b04      	cmp	r3, #4
 800f13e:	d101      	bne.n	800f144 <LL_RCC_HSI_IsReady+0x14>
 800f140:	2301      	movs	r3, #1
 800f142:	e000      	b.n	800f146 <LL_RCC_HSI_IsReady+0x16>
 800f144:	2300      	movs	r3, #0
}
 800f146:	4618      	mov	r0, r3
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr
 800f150:	58024400 	.word	0x58024400

0800f154 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 800f154:	b480      	push	{r7}
 800f156:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 800f158:	4b04      	ldr	r3, [pc, #16]	@ (800f16c <LL_RCC_HSI_GetDivider+0x18>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f003 0318 	and.w	r3, r3, #24
}
 800f160:	4618      	mov	r0, r3
 800f162:	46bd      	mov	sp, r7
 800f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f168:	4770      	bx	lr
 800f16a:	bf00      	nop
 800f16c:	58024400 	.word	0x58024400

0800f170 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 800f170:	b480      	push	{r7}
 800f172:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 800f174:	4b07      	ldr	r3, [pc, #28]	@ (800f194 <LL_RCC_CSI_IsReady+0x24>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f17c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f180:	d101      	bne.n	800f186 <LL_RCC_CSI_IsReady+0x16>
 800f182:	2301      	movs	r3, #1
 800f184:	e000      	b.n	800f188 <LL_RCC_CSI_IsReady+0x18>
 800f186:	2300      	movs	r3, #0
}
 800f188:	4618      	mov	r0, r3
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr
 800f192:	bf00      	nop
 800f194:	58024400 	.word	0x58024400

0800f198 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800f198:	b480      	push	{r7}
 800f19a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f19c:	4b06      	ldr	r3, [pc, #24]	@ (800f1b8 <LL_RCC_LSE_IsReady+0x20>)
 800f19e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1a0:	f003 0302 	and.w	r3, r3, #2
 800f1a4:	2b02      	cmp	r3, #2
 800f1a6:	d101      	bne.n	800f1ac <LL_RCC_LSE_IsReady+0x14>
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	e000      	b.n	800f1ae <LL_RCC_LSE_IsReady+0x16>
 800f1ac:	2300      	movs	r3, #0
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr
 800f1b8:	58024400 	.word	0x58024400

0800f1bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f1c0:	4b04      	ldr	r3, [pc, #16]	@ (800f1d4 <LL_RCC_GetSysClkSource+0x18>)
 800f1c2:	691b      	ldr	r3, [r3, #16]
 800f1c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr
 800f1d2:	bf00      	nop
 800f1d4:	58024400 	.word	0x58024400

0800f1d8 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 800f1dc:	4b04      	ldr	r3, [pc, #16]	@ (800f1f0 <LL_RCC_GetSysPrescaler+0x18>)
 800f1de:	699b      	ldr	r3, [r3, #24]
 800f1e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ec:	4770      	bx	lr
 800f1ee:	bf00      	nop
 800f1f0:	58024400 	.word	0x58024400

0800f1f4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 800f1f8:	4b04      	ldr	r3, [pc, #16]	@ (800f20c <LL_RCC_GetAHBPrescaler+0x18>)
 800f1fa:	699b      	ldr	r3, [r3, #24]
 800f1fc:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 800f200:	4618      	mov	r0, r3
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	58024400 	.word	0x58024400

0800f210 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800f210:	b480      	push	{r7}
 800f212:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 800f214:	4b04      	ldr	r3, [pc, #16]	@ (800f228 <LL_RCC_GetAPB1Prescaler+0x18>)
 800f216:	69db      	ldr	r3, [r3, #28]
 800f218:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	46bd      	mov	sp, r7
 800f220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f224:	4770      	bx	lr
 800f226:	bf00      	nop
 800f228:	58024400 	.word	0x58024400

0800f22c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800f22c:	b480      	push	{r7}
 800f22e:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 800f230:	4b04      	ldr	r3, [pc, #16]	@ (800f244 <LL_RCC_GetAPB2Prescaler+0x18>)
 800f232:	69db      	ldr	r3, [r3, #28]
 800f234:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 800f238:	4618      	mov	r0, r3
 800f23a:	46bd      	mov	sp, r7
 800f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop
 800f244:	58024400 	.word	0x58024400

0800f248 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 800f248:	b480      	push	{r7}
 800f24a:	b085      	sub	sp, #20
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	b2da      	uxtb	r2, r3
 800f254:	4b0e      	ldr	r3, [pc, #56]	@ (800f290 <LL_RCC_GetClockSource+0x48>)
 800f256:	4413      	add	r3, r2
 800f258:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681a      	ldr	r2, [r3, #0]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	0e19      	lsrs	r1, r3, #24
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	0a1b      	lsrs	r3, r3, #8
 800f266:	f003 031f 	and.w	r3, r3, #31
 800f26a:	fa01 f303 	lsl.w	r3, r1, r3
 800f26e:	401a      	ands	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	0a1b      	lsrs	r3, r3, #8
 800f274:	f003 031f 	and.w	r3, r3, #31
 800f278:	fa22 f303 	lsr.w	r3, r2, r3
 800f27c:	041a      	lsls	r2, r3, #16
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	4313      	orrs	r3, r2
}
 800f282:	4618      	mov	r0, r3
 800f284:	3714      	adds	r7, #20
 800f286:	46bd      	mov	sp, r7
 800f288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28c:	4770      	bx	lr
 800f28e:	bf00      	nop
 800f290:	5802444c 	.word	0x5802444c

0800f294 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f7ff ffd3 	bl	800f248 <LL_RCC_GetClockSource>
 800f2a2:	4603      	mov	r3, r0
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3708      	adds	r7, #8
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 800f2b0:	4b04      	ldr	r3, [pc, #16]	@ (800f2c4 <LL_RCC_PLL_GetSource+0x18>)
 800f2b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2b4:	f003 0303 	and.w	r3, r3, #3
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr
 800f2c2:	bf00      	nop
 800f2c4:	58024400 	.word	0x58024400

0800f2c8 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 800f2cc:	4b07      	ldr	r3, [pc, #28]	@ (800f2ec <LL_RCC_PLL1P_IsEnabled+0x24>)
 800f2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f2d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f2d8:	d101      	bne.n	800f2de <LL_RCC_PLL1P_IsEnabled+0x16>
 800f2da:	2301      	movs	r3, #1
 800f2dc:	e000      	b.n	800f2e0 <LL_RCC_PLL1P_IsEnabled+0x18>
 800f2de:	2300      	movs	r3, #0
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e8:	4770      	bx	lr
 800f2ea:	bf00      	nop
 800f2ec:	58024400 	.word	0x58024400

0800f2f0 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 800f2f4:	4b07      	ldr	r3, [pc, #28]	@ (800f314 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 800f2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f2fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f300:	d101      	bne.n	800f306 <LL_RCC_PLL1Q_IsEnabled+0x16>
 800f302:	2301      	movs	r3, #1
 800f304:	e000      	b.n	800f308 <LL_RCC_PLL1Q_IsEnabled+0x18>
 800f306:	2300      	movs	r3, #0
}
 800f308:	4618      	mov	r0, r3
 800f30a:	46bd      	mov	sp, r7
 800f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f310:	4770      	bx	lr
 800f312:	bf00      	nop
 800f314:	58024400 	.word	0x58024400

0800f318 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 800f318:	b480      	push	{r7}
 800f31a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 800f31c:	4b07      	ldr	r3, [pc, #28]	@ (800f33c <LL_RCC_PLL1R_IsEnabled+0x24>)
 800f31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f320:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f324:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f328:	d101      	bne.n	800f32e <LL_RCC_PLL1R_IsEnabled+0x16>
 800f32a:	2301      	movs	r3, #1
 800f32c:	e000      	b.n	800f330 <LL_RCC_PLL1R_IsEnabled+0x18>
 800f32e:	2300      	movs	r3, #0
}
 800f330:	4618      	mov	r0, r3
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr
 800f33a:	bf00      	nop
 800f33c:	58024400 	.word	0x58024400

0800f340 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 800f340:	b480      	push	{r7}
 800f342:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 800f344:	4b06      	ldr	r3, [pc, #24]	@ (800f360 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 800f346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f348:	f003 0301 	and.w	r3, r3, #1
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d101      	bne.n	800f354 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 800f350:	2301      	movs	r3, #1
 800f352:	e000      	b.n	800f356 <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 800f354:	2300      	movs	r3, #0
}
 800f356:	4618      	mov	r0, r3
 800f358:	46bd      	mov	sp, r7
 800f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35e:	4770      	bx	lr
 800f360:	58024400 	.word	0x58024400

0800f364 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 800f364:	b480      	push	{r7}
 800f366:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 800f368:	4b04      	ldr	r3, [pc, #16]	@ (800f37c <LL_RCC_PLL1_GetN+0x18>)
 800f36a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f36c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f370:	3301      	adds	r3, #1
}
 800f372:	4618      	mov	r0, r3
 800f374:	46bd      	mov	sp, r7
 800f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37a:	4770      	bx	lr
 800f37c:	58024400 	.word	0x58024400

0800f380 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 800f380:	b480      	push	{r7}
 800f382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 800f384:	4b04      	ldr	r3, [pc, #16]	@ (800f398 <LL_RCC_PLL1_GetM+0x18>)
 800f386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f388:	091b      	lsrs	r3, r3, #4
 800f38a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800f38e:	4618      	mov	r0, r3
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr
 800f398:	58024400 	.word	0x58024400

0800f39c <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 800f39c:	b480      	push	{r7}
 800f39e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 800f3a0:	4b05      	ldr	r3, [pc, #20]	@ (800f3b8 <LL_RCC_PLL1_GetP+0x1c>)
 800f3a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3a4:	0a5b      	lsrs	r3, r3, #9
 800f3a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3aa:	3301      	adds	r3, #1
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b4:	4770      	bx	lr
 800f3b6:	bf00      	nop
 800f3b8:	58024400 	.word	0x58024400

0800f3bc <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 800f3c0:	4b05      	ldr	r3, [pc, #20]	@ (800f3d8 <LL_RCC_PLL1_GetQ+0x1c>)
 800f3c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3c4:	0c1b      	lsrs	r3, r3, #16
 800f3c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3ca:	3301      	adds	r3, #1
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr
 800f3d6:	bf00      	nop
 800f3d8:	58024400 	.word	0x58024400

0800f3dc <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 800f3e0:	4b05      	ldr	r3, [pc, #20]	@ (800f3f8 <LL_RCC_PLL1_GetR+0x1c>)
 800f3e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3e4:	0e1b      	lsrs	r3, r3, #24
 800f3e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3ea:	3301      	adds	r3, #1
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	58024400 	.word	0x58024400

0800f3fc <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 800f400:	4b04      	ldr	r3, [pc, #16]	@ (800f414 <LL_RCC_PLL1_GetFRACN+0x18>)
 800f402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f404:	08db      	lsrs	r3, r3, #3
 800f406:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr
 800f414:	58024400 	.word	0x58024400

0800f418 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 800f418:	b480      	push	{r7}
 800f41a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 800f41c:	4b07      	ldr	r3, [pc, #28]	@ (800f43c <LL_RCC_PLL2_IsReady+0x24>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f424:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f428:	d101      	bne.n	800f42e <LL_RCC_PLL2_IsReady+0x16>
 800f42a:	2301      	movs	r3, #1
 800f42c:	e000      	b.n	800f430 <LL_RCC_PLL2_IsReady+0x18>
 800f42e:	2300      	movs	r3, #0
}
 800f430:	4618      	mov	r0, r3
 800f432:	46bd      	mov	sp, r7
 800f434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f438:	4770      	bx	lr
 800f43a:	bf00      	nop
 800f43c:	58024400 	.word	0x58024400

0800f440 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 800f440:	b480      	push	{r7}
 800f442:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 800f444:	4b07      	ldr	r3, [pc, #28]	@ (800f464 <LL_RCC_PLL2P_IsEnabled+0x24>)
 800f446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f448:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f44c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800f450:	d101      	bne.n	800f456 <LL_RCC_PLL2P_IsEnabled+0x16>
 800f452:	2301      	movs	r3, #1
 800f454:	e000      	b.n	800f458 <LL_RCC_PLL2P_IsEnabled+0x18>
 800f456:	2300      	movs	r3, #0
}
 800f458:	4618      	mov	r0, r3
 800f45a:	46bd      	mov	sp, r7
 800f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f460:	4770      	bx	lr
 800f462:	bf00      	nop
 800f464:	58024400 	.word	0x58024400

0800f468 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 800f468:	b480      	push	{r7}
 800f46a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 800f46c:	4b07      	ldr	r3, [pc, #28]	@ (800f48c <LL_RCC_PLL2Q_IsEnabled+0x24>)
 800f46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f470:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f474:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f478:	d101      	bne.n	800f47e <LL_RCC_PLL2Q_IsEnabled+0x16>
 800f47a:	2301      	movs	r3, #1
 800f47c:	e000      	b.n	800f480 <LL_RCC_PLL2Q_IsEnabled+0x18>
 800f47e:	2300      	movs	r3, #0
}
 800f480:	4618      	mov	r0, r3
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr
 800f48a:	bf00      	nop
 800f48c:	58024400 	.word	0x58024400

0800f490 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 800f490:	b480      	push	{r7}
 800f492:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 800f494:	4b07      	ldr	r3, [pc, #28]	@ (800f4b4 <LL_RCC_PLL2R_IsEnabled+0x24>)
 800f496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f498:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f49c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f4a0:	d101      	bne.n	800f4a6 <LL_RCC_PLL2R_IsEnabled+0x16>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e000      	b.n	800f4a8 <LL_RCC_PLL2R_IsEnabled+0x18>
 800f4a6:	2300      	movs	r3, #0
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b0:	4770      	bx	lr
 800f4b2:	bf00      	nop
 800f4b4:	58024400 	.word	0x58024400

0800f4b8 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 800f4bc:	4b06      	ldr	r3, [pc, #24]	@ (800f4d8 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 800f4be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4c0:	f003 0310 	and.w	r3, r3, #16
 800f4c4:	2b10      	cmp	r3, #16
 800f4c6:	d101      	bne.n	800f4cc <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	e000      	b.n	800f4ce <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 800f4cc:	2300      	movs	r3, #0
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr
 800f4d8:	58024400 	.word	0x58024400

0800f4dc <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 800f4e0:	4b04      	ldr	r3, [pc, #16]	@ (800f4f4 <LL_RCC_PLL2_GetN+0x18>)
 800f4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4e8:	3301      	adds	r3, #1
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f2:	4770      	bx	lr
 800f4f4:	58024400 	.word	0x58024400

0800f4f8 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 800f4fc:	4b04      	ldr	r3, [pc, #16]	@ (800f510 <LL_RCC_PLL2_GetM+0x18>)
 800f4fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f500:	0b1b      	lsrs	r3, r3, #12
 800f502:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800f506:	4618      	mov	r0, r3
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr
 800f510:	58024400 	.word	0x58024400

0800f514 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 800f514:	b480      	push	{r7}
 800f516:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 800f518:	4b05      	ldr	r3, [pc, #20]	@ (800f530 <LL_RCC_PLL2_GetP+0x1c>)
 800f51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f51c:	0a5b      	lsrs	r3, r3, #9
 800f51e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f522:	3301      	adds	r3, #1
}
 800f524:	4618      	mov	r0, r3
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr
 800f52e:	bf00      	nop
 800f530:	58024400 	.word	0x58024400

0800f534 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 800f534:	b480      	push	{r7}
 800f536:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 800f538:	4b05      	ldr	r3, [pc, #20]	@ (800f550 <LL_RCC_PLL2_GetQ+0x1c>)
 800f53a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f53c:	0c1b      	lsrs	r3, r3, #16
 800f53e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f542:	3301      	adds	r3, #1
}
 800f544:	4618      	mov	r0, r3
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop
 800f550:	58024400 	.word	0x58024400

0800f554 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 800f554:	b480      	push	{r7}
 800f556:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 800f558:	4b05      	ldr	r3, [pc, #20]	@ (800f570 <LL_RCC_PLL2_GetR+0x1c>)
 800f55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f55c:	0e1b      	lsrs	r3, r3, #24
 800f55e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f562:	3301      	adds	r3, #1
}
 800f564:	4618      	mov	r0, r3
 800f566:	46bd      	mov	sp, r7
 800f568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56c:	4770      	bx	lr
 800f56e:	bf00      	nop
 800f570:	58024400 	.word	0x58024400

0800f574 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 800f574:	b480      	push	{r7}
 800f576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 800f578:	4b04      	ldr	r3, [pc, #16]	@ (800f58c <LL_RCC_PLL2_GetFRACN+0x18>)
 800f57a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f57c:	08db      	lsrs	r3, r3, #3
 800f57e:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800f582:	4618      	mov	r0, r3
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr
 800f58c:	58024400 	.word	0x58024400

0800f590 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 800f590:	b480      	push	{r7}
 800f592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 800f594:	4b07      	ldr	r3, [pc, #28]	@ (800f5b4 <LL_RCC_PLL3_IsReady+0x24>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f59c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5a0:	d101      	bne.n	800f5a6 <LL_RCC_PLL3_IsReady+0x16>
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	e000      	b.n	800f5a8 <LL_RCC_PLL3_IsReady+0x18>
 800f5a6:	2300      	movs	r3, #0
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop
 800f5b4:	58024400 	.word	0x58024400

0800f5b8 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 800f5bc:	4b07      	ldr	r3, [pc, #28]	@ (800f5dc <LL_RCC_PLL3P_IsEnabled+0x24>)
 800f5be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f5c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f5c8:	d101      	bne.n	800f5ce <LL_RCC_PLL3P_IsEnabled+0x16>
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e000      	b.n	800f5d0 <LL_RCC_PLL3P_IsEnabled+0x18>
 800f5ce:	2300      	movs	r3, #0
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d8:	4770      	bx	lr
 800f5da:	bf00      	nop
 800f5dc:	58024400 	.word	0x58024400

0800f5e0 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 800f5e4:	4b07      	ldr	r3, [pc, #28]	@ (800f604 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 800f5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f5ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f5f0:	d101      	bne.n	800f5f6 <LL_RCC_PLL3Q_IsEnabled+0x16>
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	e000      	b.n	800f5f8 <LL_RCC_PLL3Q_IsEnabled+0x18>
 800f5f6:	2300      	movs	r3, #0
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr
 800f602:	bf00      	nop
 800f604:	58024400 	.word	0x58024400

0800f608 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 800f608:	b480      	push	{r7}
 800f60a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 800f60c:	4b07      	ldr	r3, [pc, #28]	@ (800f62c <LL_RCC_PLL3R_IsEnabled+0x24>)
 800f60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f610:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f618:	d101      	bne.n	800f61e <LL_RCC_PLL3R_IsEnabled+0x16>
 800f61a:	2301      	movs	r3, #1
 800f61c:	e000      	b.n	800f620 <LL_RCC_PLL3R_IsEnabled+0x18>
 800f61e:	2300      	movs	r3, #0
}
 800f620:	4618      	mov	r0, r3
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr
 800f62a:	bf00      	nop
 800f62c:	58024400 	.word	0x58024400

0800f630 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 800f630:	b480      	push	{r7}
 800f632:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 800f634:	4b07      	ldr	r3, [pc, #28]	@ (800f654 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 800f636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f63c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f640:	d101      	bne.n	800f646 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 800f642:	2301      	movs	r3, #1
 800f644:	e000      	b.n	800f648 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 800f646:	2300      	movs	r3, #0
}
 800f648:	4618      	mov	r0, r3
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr
 800f652:	bf00      	nop
 800f654:	58024400 	.word	0x58024400

0800f658 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 800f658:	b480      	push	{r7}
 800f65a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 800f65c:	4b04      	ldr	r3, [pc, #16]	@ (800f670 <LL_RCC_PLL3_GetN+0x18>)
 800f65e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f664:	3301      	adds	r3, #1
}
 800f666:	4618      	mov	r0, r3
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr
 800f670:	58024400 	.word	0x58024400

0800f674 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 800f674:	b480      	push	{r7}
 800f676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 800f678:	4b04      	ldr	r3, [pc, #16]	@ (800f68c <LL_RCC_PLL3_GetM+0x18>)
 800f67a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f67c:	0d1b      	lsrs	r3, r3, #20
 800f67e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800f682:	4618      	mov	r0, r3
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr
 800f68c:	58024400 	.word	0x58024400

0800f690 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 800f690:	b480      	push	{r7}
 800f692:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 800f694:	4b05      	ldr	r3, [pc, #20]	@ (800f6ac <LL_RCC_PLL3_GetP+0x1c>)
 800f696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f698:	0a5b      	lsrs	r3, r3, #9
 800f69a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f69e:	3301      	adds	r3, #1
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr
 800f6aa:	bf00      	nop
 800f6ac:	58024400 	.word	0x58024400

0800f6b0 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 800f6b4:	4b05      	ldr	r3, [pc, #20]	@ (800f6cc <LL_RCC_PLL3_GetQ+0x1c>)
 800f6b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6b8:	0c1b      	lsrs	r3, r3, #16
 800f6ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6be:	3301      	adds	r3, #1
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr
 800f6ca:	bf00      	nop
 800f6cc:	58024400 	.word	0x58024400

0800f6d0 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 800f6d4:	4b05      	ldr	r3, [pc, #20]	@ (800f6ec <LL_RCC_PLL3_GetR+0x1c>)
 800f6d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6d8:	0e1b      	lsrs	r3, r3, #24
 800f6da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6de:	3301      	adds	r3, #1
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr
 800f6ea:	bf00      	nop
 800f6ec:	58024400 	.word	0x58024400

0800f6f0 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 800f6f4:	4b04      	ldr	r3, [pc, #16]	@ (800f708 <LL_RCC_PLL3_GetFRACN+0x18>)
 800f6f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6f8:	08db      	lsrs	r3, r3, #3
 800f6fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr
 800f708:	58024400 	.word	0x58024400

0800f70c <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b08a      	sub	sp, #40	@ 0x28
 800f710:	af02      	add	r7, sp, #8
 800f712:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800f714:	2300      	movs	r3, #0
 800f716:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800f718:	2300      	movs	r3, #0
 800f71a:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800f71c:	f7ff fdc6 	bl	800f2ac <LL_RCC_PLL_GetSource>
 800f720:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	2b02      	cmp	r3, #2
 800f726:	d01f      	beq.n	800f768 <LL_RCC_GetPLL1ClockFreq+0x5c>
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	2b02      	cmp	r3, #2
 800f72c:	d824      	bhi.n	800f778 <LL_RCC_GetPLL1ClockFreq+0x6c>
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d003      	beq.n	800f73c <LL_RCC_GetPLL1ClockFreq+0x30>
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	2b01      	cmp	r3, #1
 800f738:	d00e      	beq.n	800f758 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800f73a:	e01d      	b.n	800f778 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800f73c:	f7ff fcf8 	bl	800f130 <LL_RCC_HSI_IsReady>
 800f740:	4603      	mov	r3, r0
 800f742:	2b00      	cmp	r3, #0
 800f744:	d01a      	beq.n	800f77c <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800f746:	f7ff fd05 	bl	800f154 <LL_RCC_HSI_GetDivider>
 800f74a:	4603      	mov	r3, r0
 800f74c:	08db      	lsrs	r3, r3, #3
 800f74e:	4a38      	ldr	r2, [pc, #224]	@ (800f830 <LL_RCC_GetPLL1ClockFreq+0x124>)
 800f750:	fa22 f303 	lsr.w	r3, r2, r3
 800f754:	61fb      	str	r3, [r7, #28]
      break;
 800f756:	e011      	b.n	800f77c <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800f758:	f7ff fd0a 	bl	800f170 <LL_RCC_CSI_IsReady>
 800f75c:	4603      	mov	r3, r0
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d00e      	beq.n	800f780 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800f762:	4b34      	ldr	r3, [pc, #208]	@ (800f834 <LL_RCC_GetPLL1ClockFreq+0x128>)
 800f764:	61fb      	str	r3, [r7, #28]
      break;
 800f766:	e00b      	b.n	800f780 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800f768:	f7ff fcce 	bl	800f108 <LL_RCC_HSE_IsReady>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d008      	beq.n	800f784 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800f772:	4b31      	ldr	r3, [pc, #196]	@ (800f838 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 800f774:	61fb      	str	r3, [r7, #28]
      break;
 800f776:	e005      	b.n	800f784 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 800f778:	bf00      	nop
 800f77a:	e004      	b.n	800f786 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800f77c:	bf00      	nop
 800f77e:	e002      	b.n	800f786 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800f780:	bf00      	nop
 800f782:	e000      	b.n	800f786 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800f784:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2200      	movs	r2, #0
 800f78a:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2200      	movs	r2, #0
 800f790:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2200      	movs	r2, #0
 800f796:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 800f798:	f7ff fdf2 	bl	800f380 <LL_RCC_PLL1_GetM>
 800f79c:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 800f79e:	f7ff fde1 	bl	800f364 <LL_RCC_PLL1_GetN>
 800f7a2:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 800f7a4:	f7ff fdcc 	bl	800f340 <LL_RCC_PLL1FRACN_IsEnabled>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d002      	beq.n	800f7b4 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 800f7ae:	f7ff fe25 	bl	800f3fc <LL_RCC_PLL1_GetFRACN>
 800f7b2:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d035      	beq.n	800f826 <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 800f7ba:	f7ff fd85 	bl	800f2c8 <LL_RCC_PLL1P_IsEnabled>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d00c      	beq.n	800f7de <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 800f7c4:	f7ff fdea 	bl	800f39c <LL_RCC_PLL1_GetP>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	9300      	str	r3, [sp, #0]
 800f7cc:	69bb      	ldr	r3, [r7, #24]
 800f7ce:	68fa      	ldr	r2, [r7, #12]
 800f7d0:	6939      	ldr	r1, [r7, #16]
 800f7d2:	69f8      	ldr	r0, [r7, #28]
 800f7d4:	f000 f964 	bl	800faa0 <LL_RCC_CalcPLLClockFreq>
 800f7d8:	4602      	mov	r2, r0
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 800f7de:	f7ff fd87 	bl	800f2f0 <LL_RCC_PLL1Q_IsEnabled>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d00c      	beq.n	800f802 <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 800f7e8:	f7ff fde8 	bl	800f3bc <LL_RCC_PLL1_GetQ>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	9300      	str	r3, [sp, #0]
 800f7f0:	69bb      	ldr	r3, [r7, #24]
 800f7f2:	68fa      	ldr	r2, [r7, #12]
 800f7f4:	6939      	ldr	r1, [r7, #16]
 800f7f6:	69f8      	ldr	r0, [r7, #28]
 800f7f8:	f000 f952 	bl	800faa0 <LL_RCC_CalcPLLClockFreq>
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 800f802:	f7ff fd89 	bl	800f318 <LL_RCC_PLL1R_IsEnabled>
 800f806:	4603      	mov	r3, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d00c      	beq.n	800f826 <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 800f80c:	f7ff fde6 	bl	800f3dc <LL_RCC_PLL1_GetR>
 800f810:	4603      	mov	r3, r0
 800f812:	9300      	str	r3, [sp, #0]
 800f814:	69bb      	ldr	r3, [r7, #24]
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	6939      	ldr	r1, [r7, #16]
 800f81a:	69f8      	ldr	r0, [r7, #28]
 800f81c:	f000 f940 	bl	800faa0 <LL_RCC_CalcPLLClockFreq>
 800f820:	4602      	mov	r2, r0
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	609a      	str	r2, [r3, #8]
    }
  }
}
 800f826:	bf00      	nop
 800f828:	3720      	adds	r7, #32
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	bf00      	nop
 800f830:	03d09000 	.word	0x03d09000
 800f834:	003d0900 	.word	0x003d0900
 800f838:	017d7840 	.word	0x017d7840

0800f83c <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b08a      	sub	sp, #40	@ 0x28
 800f840:	af02      	add	r7, sp, #8
 800f842:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800f844:	2300      	movs	r3, #0
 800f846:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800f848:	2300      	movs	r3, #0
 800f84a:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800f84c:	f7ff fd2e 	bl	800f2ac <LL_RCC_PLL_GetSource>
 800f850:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	2b02      	cmp	r3, #2
 800f856:	d01f      	beq.n	800f898 <LL_RCC_GetPLL2ClockFreq+0x5c>
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	2b02      	cmp	r3, #2
 800f85c:	d824      	bhi.n	800f8a8 <LL_RCC_GetPLL2ClockFreq+0x6c>
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d003      	beq.n	800f86c <LL_RCC_GetPLL2ClockFreq+0x30>
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	2b01      	cmp	r3, #1
 800f868:	d00e      	beq.n	800f888 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800f86a:	e01d      	b.n	800f8a8 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800f86c:	f7ff fc60 	bl	800f130 <LL_RCC_HSI_IsReady>
 800f870:	4603      	mov	r3, r0
 800f872:	2b00      	cmp	r3, #0
 800f874:	d01a      	beq.n	800f8ac <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800f876:	f7ff fc6d 	bl	800f154 <LL_RCC_HSI_GetDivider>
 800f87a:	4603      	mov	r3, r0
 800f87c:	08db      	lsrs	r3, r3, #3
 800f87e:	4a38      	ldr	r2, [pc, #224]	@ (800f960 <LL_RCC_GetPLL2ClockFreq+0x124>)
 800f880:	fa22 f303 	lsr.w	r3, r2, r3
 800f884:	61fb      	str	r3, [r7, #28]
      break;
 800f886:	e011      	b.n	800f8ac <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800f888:	f7ff fc72 	bl	800f170 <LL_RCC_CSI_IsReady>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d00e      	beq.n	800f8b0 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800f892:	4b34      	ldr	r3, [pc, #208]	@ (800f964 <LL_RCC_GetPLL2ClockFreq+0x128>)
 800f894:	61fb      	str	r3, [r7, #28]
      break;
 800f896:	e00b      	b.n	800f8b0 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800f898:	f7ff fc36 	bl	800f108 <LL_RCC_HSE_IsReady>
 800f89c:	4603      	mov	r3, r0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d008      	beq.n	800f8b4 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800f8a2:	4b31      	ldr	r3, [pc, #196]	@ (800f968 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 800f8a4:	61fb      	str	r3, [r7, #28]
      break;
 800f8a6:	e005      	b.n	800f8b4 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 800f8a8:	bf00      	nop
 800f8aa:	e004      	b.n	800f8b6 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800f8ac:	bf00      	nop
 800f8ae:	e002      	b.n	800f8b6 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800f8b0:	bf00      	nop
 800f8b2:	e000      	b.n	800f8b6 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800f8b4:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 800f8c8:	f7ff fe16 	bl	800f4f8 <LL_RCC_PLL2_GetM>
 800f8cc:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 800f8ce:	f7ff fe05 	bl	800f4dc <LL_RCC_PLL2_GetN>
 800f8d2:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 800f8d4:	f7ff fdf0 	bl	800f4b8 <LL_RCC_PLL2FRACN_IsEnabled>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d002      	beq.n	800f8e4 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 800f8de:	f7ff fe49 	bl	800f574 <LL_RCC_PLL2_GetFRACN>
 800f8e2:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d035      	beq.n	800f956 <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 800f8ea:	f7ff fda9 	bl	800f440 <LL_RCC_PLL2P_IsEnabled>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d00c      	beq.n	800f90e <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 800f8f4:	f7ff fe0e 	bl	800f514 <LL_RCC_PLL2_GetP>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	9300      	str	r3, [sp, #0]
 800f8fc:	69bb      	ldr	r3, [r7, #24]
 800f8fe:	68fa      	ldr	r2, [r7, #12]
 800f900:	6939      	ldr	r1, [r7, #16]
 800f902:	69f8      	ldr	r0, [r7, #28]
 800f904:	f000 f8cc 	bl	800faa0 <LL_RCC_CalcPLLClockFreq>
 800f908:	4602      	mov	r2, r0
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800f90e:	f7ff fdab 	bl	800f468 <LL_RCC_PLL2Q_IsEnabled>
 800f912:	4603      	mov	r3, r0
 800f914:	2b00      	cmp	r3, #0
 800f916:	d00c      	beq.n	800f932 <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 800f918:	f7ff fe0c 	bl	800f534 <LL_RCC_PLL2_GetQ>
 800f91c:	4603      	mov	r3, r0
 800f91e:	9300      	str	r3, [sp, #0]
 800f920:	69bb      	ldr	r3, [r7, #24]
 800f922:	68fa      	ldr	r2, [r7, #12]
 800f924:	6939      	ldr	r1, [r7, #16]
 800f926:	69f8      	ldr	r0, [r7, #28]
 800f928:	f000 f8ba 	bl	800faa0 <LL_RCC_CalcPLLClockFreq>
 800f92c:	4602      	mov	r2, r0
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 800f932:	f7ff fdad 	bl	800f490 <LL_RCC_PLL2R_IsEnabled>
 800f936:	4603      	mov	r3, r0
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d00c      	beq.n	800f956 <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 800f93c:	f7ff fe0a 	bl	800f554 <LL_RCC_PLL2_GetR>
 800f940:	4603      	mov	r3, r0
 800f942:	9300      	str	r3, [sp, #0]
 800f944:	69bb      	ldr	r3, [r7, #24]
 800f946:	68fa      	ldr	r2, [r7, #12]
 800f948:	6939      	ldr	r1, [r7, #16]
 800f94a:	69f8      	ldr	r0, [r7, #28]
 800f94c:	f000 f8a8 	bl	800faa0 <LL_RCC_CalcPLLClockFreq>
 800f950:	4602      	mov	r2, r0
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	609a      	str	r2, [r3, #8]
    }
  }
}
 800f956:	bf00      	nop
 800f958:	3720      	adds	r7, #32
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop
 800f960:	03d09000 	.word	0x03d09000
 800f964:	003d0900 	.word	0x003d0900
 800f968:	017d7840 	.word	0x017d7840

0800f96c <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b08a      	sub	sp, #40	@ 0x28
 800f970:	af02      	add	r7, sp, #8
 800f972:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800f974:	2300      	movs	r3, #0
 800f976:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800f978:	2300      	movs	r3, #0
 800f97a:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800f97c:	f7ff fc96 	bl	800f2ac <LL_RCC_PLL_GetSource>
 800f980:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	2b02      	cmp	r3, #2
 800f986:	d01f      	beq.n	800f9c8 <LL_RCC_GetPLL3ClockFreq+0x5c>
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	2b02      	cmp	r3, #2
 800f98c:	d824      	bhi.n	800f9d8 <LL_RCC_GetPLL3ClockFreq+0x6c>
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d003      	beq.n	800f99c <LL_RCC_GetPLL3ClockFreq+0x30>
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	2b01      	cmp	r3, #1
 800f998:	d00e      	beq.n	800f9b8 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800f99a:	e01d      	b.n	800f9d8 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800f99c:	f7ff fbc8 	bl	800f130 <LL_RCC_HSI_IsReady>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d01a      	beq.n	800f9dc <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800f9a6:	f7ff fbd5 	bl	800f154 <LL_RCC_HSI_GetDivider>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	08db      	lsrs	r3, r3, #3
 800f9ae:	4a39      	ldr	r2, [pc, #228]	@ (800fa94 <LL_RCC_GetPLL3ClockFreq+0x128>)
 800f9b0:	fa22 f303 	lsr.w	r3, r2, r3
 800f9b4:	61fb      	str	r3, [r7, #28]
      break;
 800f9b6:	e011      	b.n	800f9dc <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800f9b8:	f7ff fbda 	bl	800f170 <LL_RCC_CSI_IsReady>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d00e      	beq.n	800f9e0 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800f9c2:	4b35      	ldr	r3, [pc, #212]	@ (800fa98 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 800f9c4:	61fb      	str	r3, [r7, #28]
      break;
 800f9c6:	e00b      	b.n	800f9e0 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800f9c8:	f7ff fb9e 	bl	800f108 <LL_RCC_HSE_IsReady>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d008      	beq.n	800f9e4 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800f9d2:	4b32      	ldr	r3, [pc, #200]	@ (800fa9c <LL_RCC_GetPLL3ClockFreq+0x130>)
 800f9d4:	61fb      	str	r3, [r7, #28]
      break;
 800f9d6:	e005      	b.n	800f9e4 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 800f9d8:	bf00      	nop
 800f9da:	e004      	b.n	800f9e6 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800f9dc:	bf00      	nop
 800f9de:	e002      	b.n	800f9e6 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800f9e0:	bf00      	nop
 800f9e2:	e000      	b.n	800f9e6 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800f9e4:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 800f9f8:	f7ff fe3c 	bl	800f674 <LL_RCC_PLL3_GetM>
 800f9fc:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 800f9fe:	f7ff fe2b 	bl	800f658 <LL_RCC_PLL3_GetN>
 800fa02:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 800fa04:	f7ff fe14 	bl	800f630 <LL_RCC_PLL3FRACN_IsEnabled>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d002      	beq.n	800fa14 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 800fa0e:	f7ff fe6f 	bl	800f6f0 <LL_RCC_PLL3_GetFRACN>
 800fa12:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d038      	beq.n	800fa8c <LL_RCC_GetPLL3ClockFreq+0x120>
 800fa1a:	69fb      	ldr	r3, [r7, #28]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d035      	beq.n	800fa8c <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 800fa20:	f7ff fdca 	bl	800f5b8 <LL_RCC_PLL3P_IsEnabled>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d00c      	beq.n	800fa44 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 800fa2a:	f7ff fe31 	bl	800f690 <LL_RCC_PLL3_GetP>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	9300      	str	r3, [sp, #0]
 800fa32:	69bb      	ldr	r3, [r7, #24]
 800fa34:	68fa      	ldr	r2, [r7, #12]
 800fa36:	6939      	ldr	r1, [r7, #16]
 800fa38:	69f8      	ldr	r0, [r7, #28]
 800fa3a:	f000 f831 	bl	800faa0 <LL_RCC_CalcPLLClockFreq>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800fa44:	f7ff fdcc 	bl	800f5e0 <LL_RCC_PLL3Q_IsEnabled>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d00c      	beq.n	800fa68 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 800fa4e:	f7ff fe2f 	bl	800f6b0 <LL_RCC_PLL3_GetQ>
 800fa52:	4603      	mov	r3, r0
 800fa54:	9300      	str	r3, [sp, #0]
 800fa56:	69bb      	ldr	r3, [r7, #24]
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	6939      	ldr	r1, [r7, #16]
 800fa5c:	69f8      	ldr	r0, [r7, #28]
 800fa5e:	f000 f81f 	bl	800faa0 <LL_RCC_CalcPLLClockFreq>
 800fa62:	4602      	mov	r2, r0
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 800fa68:	f7ff fdce 	bl	800f608 <LL_RCC_PLL3R_IsEnabled>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d00c      	beq.n	800fa8c <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 800fa72:	f7ff fe2d 	bl	800f6d0 <LL_RCC_PLL3_GetR>
 800fa76:	4603      	mov	r3, r0
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	69bb      	ldr	r3, [r7, #24]
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	6939      	ldr	r1, [r7, #16]
 800fa80:	69f8      	ldr	r0, [r7, #28]
 800fa82:	f000 f80d 	bl	800faa0 <LL_RCC_CalcPLLClockFreq>
 800fa86:	4602      	mov	r2, r0
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	609a      	str	r2, [r3, #8]
    }
  }
}
 800fa8c:	bf00      	nop
 800fa8e:	3720      	adds	r7, #32
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	03d09000 	.word	0x03d09000
 800fa98:	003d0900 	.word	0x003d0900
 800fa9c:	017d7840 	.word	0x017d7840

0800faa0 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b087      	sub	sp, #28
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	60b9      	str	r1, [r7, #8]
 800faaa:	607a      	str	r2, [r7, #4]
 800faac:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	ee07 3a90 	vmov	s15, r3
 800fab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	ee07 3a90 	vmov	s15, r3
 800fabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	ee07 3a90 	vmov	s15, r3
 800facc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	ee07 3a90 	vmov	s15, r3
 800fad6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800fada:	eddf 5a10 	vldr	s11, [pc, #64]	@ 800fb1c <LL_RCC_CalcPLLClockFreq+0x7c>
 800fade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800faea:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 800faee:	6a3b      	ldr	r3, [r7, #32]
 800faf0:	ee07 3a90 	vmov	s15, r3
 800faf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800faf8:	edd7 6a05 	vldr	s13, [r7, #20]
 800fafc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb00:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 800fb04:	edd7 7a05 	vldr	s15, [r7, #20]
 800fb08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb0c:	ee17 3a90 	vmov	r3, s15
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	371c      	adds	r7, #28
 800fb14:	46bd      	mov	sp, r7
 800fb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1a:	4770      	bx	lr
 800fb1c:	46000000 	.word	0x46000000

0800fb20 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800fb20:	b590      	push	{r4, r7, lr}
 800fb22:	b087      	sub	sp, #28
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f7ff fbb1 	bl	800f294 <LL_RCC_GetUSARTClockSource>
 800fb32:	4603      	mov	r3, r0
 800fb34:	4a62      	ldr	r2, [pc, #392]	@ (800fcc0 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800fb36:	4293      	cmp	r3, r2
 800fb38:	f000 80a9 	beq.w	800fc8e <LL_RCC_GetUSARTClockFreq+0x16e>
 800fb3c:	4a60      	ldr	r2, [pc, #384]	@ (800fcc0 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	f200 80ae 	bhi.w	800fca0 <LL_RCC_GetUSARTClockFreq+0x180>
 800fb44:	4a5f      	ldr	r2, [pc, #380]	@ (800fcc4 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800fb46:	4293      	cmp	r3, r2
 800fb48:	f000 80a1 	beq.w	800fc8e <LL_RCC_GetUSARTClockFreq+0x16e>
 800fb4c:	4a5d      	ldr	r2, [pc, #372]	@ (800fcc4 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	f200 80a6 	bhi.w	800fca0 <LL_RCC_GetUSARTClockFreq+0x180>
 800fb54:	4a5c      	ldr	r2, [pc, #368]	@ (800fcc8 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	f000 8091 	beq.w	800fc7e <LL_RCC_GetUSARTClockFreq+0x15e>
 800fb5c:	4a5a      	ldr	r2, [pc, #360]	@ (800fcc8 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	f200 809e 	bhi.w	800fca0 <LL_RCC_GetUSARTClockFreq+0x180>
 800fb64:	4a59      	ldr	r2, [pc, #356]	@ (800fccc <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	f000 8089 	beq.w	800fc7e <LL_RCC_GetUSARTClockFreq+0x15e>
 800fb6c:	4a57      	ldr	r2, [pc, #348]	@ (800fccc <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	f200 8096 	bhi.w	800fca0 <LL_RCC_GetUSARTClockFreq+0x180>
 800fb74:	4a56      	ldr	r2, [pc, #344]	@ (800fcd0 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d073      	beq.n	800fc62 <LL_RCC_GetUSARTClockFreq+0x142>
 800fb7a:	4a55      	ldr	r2, [pc, #340]	@ (800fcd0 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	f200 808f 	bhi.w	800fca0 <LL_RCC_GetUSARTClockFreq+0x180>
 800fb82:	4a54      	ldr	r2, [pc, #336]	@ (800fcd4 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800fb84:	4293      	cmp	r3, r2
 800fb86:	d06c      	beq.n	800fc62 <LL_RCC_GetUSARTClockFreq+0x142>
 800fb88:	4a52      	ldr	r2, [pc, #328]	@ (800fcd4 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	f200 8088 	bhi.w	800fca0 <LL_RCC_GetUSARTClockFreq+0x180>
 800fb90:	4a51      	ldr	r2, [pc, #324]	@ (800fcd8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800fb92:	4293      	cmp	r3, r2
 800fb94:	d058      	beq.n	800fc48 <LL_RCC_GetUSARTClockFreq+0x128>
 800fb96:	4a50      	ldr	r2, [pc, #320]	@ (800fcd8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	f200 8081 	bhi.w	800fca0 <LL_RCC_GetUSARTClockFreq+0x180>
 800fb9e:	4a4f      	ldr	r2, [pc, #316]	@ (800fcdc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800fba0:	4293      	cmp	r3, r2
 800fba2:	d051      	beq.n	800fc48 <LL_RCC_GetUSARTClockFreq+0x128>
 800fba4:	4a4d      	ldr	r2, [pc, #308]	@ (800fcdc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d87a      	bhi.n	800fca0 <LL_RCC_GetUSARTClockFreq+0x180>
 800fbaa:	4a4d      	ldr	r2, [pc, #308]	@ (800fce0 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d03e      	beq.n	800fc2e <LL_RCC_GetUSARTClockFreq+0x10e>
 800fbb0:	4a4b      	ldr	r2, [pc, #300]	@ (800fce0 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d874      	bhi.n	800fca0 <LL_RCC_GetUSARTClockFreq+0x180>
 800fbb6:	4a4b      	ldr	r2, [pc, #300]	@ (800fce4 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d038      	beq.n	800fc2e <LL_RCC_GetUSARTClockFreq+0x10e>
 800fbbc:	4a49      	ldr	r2, [pc, #292]	@ (800fce4 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	d86e      	bhi.n	800fca0 <LL_RCC_GetUSARTClockFreq+0x180>
 800fbc2:	4a49      	ldr	r2, [pc, #292]	@ (800fce8 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d01a      	beq.n	800fbfe <LL_RCC_GetUSARTClockFreq+0xde>
 800fbc8:	4a48      	ldr	r2, [pc, #288]	@ (800fcec <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d168      	bne.n	800fca0 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 800fbce:	f000 f895 	bl	800fcfc <RCC_GetSystemClockFreq>
 800fbd2:	4604      	mov	r4, r0
 800fbd4:	f7ff fb00 	bl	800f1d8 <LL_RCC_GetSysPrescaler>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	0a1b      	lsrs	r3, r3, #8
 800fbdc:	f003 030f 	and.w	r3, r3, #15
 800fbe0:	4a43      	ldr	r2, [pc, #268]	@ (800fcf0 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 800fbe2:	5cd3      	ldrb	r3, [r2, r3]
 800fbe4:	f003 031f 	and.w	r3, r3, #31
 800fbe8:	fa24 f303 	lsr.w	r3, r4, r3
 800fbec:	4618      	mov	r0, r3
 800fbee:	f000 f8e7 	bl	800fdc0 <RCC_GetHCLKClockFreq>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f000 f911 	bl	800fe1c <RCC_GetPCLK2ClockFreq>
 800fbfa:	6178      	str	r0, [r7, #20]
      break;
 800fbfc:	e05b      	b.n	800fcb6 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 800fbfe:	f000 f87d 	bl	800fcfc <RCC_GetSystemClockFreq>
 800fc02:	4604      	mov	r4, r0
 800fc04:	f7ff fae8 	bl	800f1d8 <LL_RCC_GetSysPrescaler>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	0a1b      	lsrs	r3, r3, #8
 800fc0c:	f003 030f 	and.w	r3, r3, #15
 800fc10:	4a37      	ldr	r2, [pc, #220]	@ (800fcf0 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 800fc12:	5cd3      	ldrb	r3, [r2, r3]
 800fc14:	f003 031f 	and.w	r3, r3, #31
 800fc18:	fa24 f303 	lsr.w	r3, r4, r3
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f000 f8cf 	bl	800fdc0 <RCC_GetHCLKClockFreq>
 800fc22:	4603      	mov	r3, r0
 800fc24:	4618      	mov	r0, r3
 800fc26:	f000 f8e1 	bl	800fdec <RCC_GetPCLK1ClockFreq>
 800fc2a:	6178      	str	r0, [r7, #20]
      break;
 800fc2c:	e043      	b.n	800fcb6 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 800fc2e:	f7ff fbf3 	bl	800f418 <LL_RCC_PLL2_IsReady>
 800fc32:	4603      	mov	r3, r0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d035      	beq.n	800fca4 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800fc38:	f107 0308 	add.w	r3, r7, #8
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7ff fdfd 	bl	800f83c <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	617b      	str	r3, [r7, #20]
      }
      break;
 800fc46:	e02d      	b.n	800fca4 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 800fc48:	f7ff fca2 	bl	800f590 <LL_RCC_PLL3_IsReady>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d02a      	beq.n	800fca8 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800fc52:	f107 0308 	add.w	r3, r7, #8
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7ff fe88 	bl	800f96c <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	617b      	str	r3, [r7, #20]
      }
      break;
 800fc60:	e022      	b.n	800fca8 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 800fc62:	f7ff fa65 	bl	800f130 <LL_RCC_HSI_IsReady>
 800fc66:	4603      	mov	r3, r0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d01f      	beq.n	800fcac <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800fc6c:	f7ff fa72 	bl	800f154 <LL_RCC_HSI_GetDivider>
 800fc70:	4603      	mov	r3, r0
 800fc72:	08db      	lsrs	r3, r3, #3
 800fc74:	4a1f      	ldr	r2, [pc, #124]	@ (800fcf4 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 800fc76:	fa22 f303 	lsr.w	r3, r2, r3
 800fc7a:	617b      	str	r3, [r7, #20]
      }
      break;
 800fc7c:	e016      	b.n	800fcac <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 800fc7e:	f7ff fa77 	bl	800f170 <LL_RCC_CSI_IsReady>
 800fc82:	4603      	mov	r3, r0
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d013      	beq.n	800fcb0 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 800fc88:	4b1b      	ldr	r3, [pc, #108]	@ (800fcf8 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 800fc8a:	617b      	str	r3, [r7, #20]
      }
      break;
 800fc8c:	e010      	b.n	800fcb0 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 800fc8e:	f7ff fa83 	bl	800f198 <LL_RCC_LSE_IsReady>
 800fc92:	4603      	mov	r3, r0
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d00d      	beq.n	800fcb4 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 800fc98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fc9c:	617b      	str	r3, [r7, #20]
      }
      break;
 800fc9e:	e009      	b.n	800fcb4 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 800fca0:	bf00      	nop
 800fca2:	e008      	b.n	800fcb6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800fca4:	bf00      	nop
 800fca6:	e006      	b.n	800fcb6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800fca8:	bf00      	nop
 800fcaa:	e004      	b.n	800fcb6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800fcac:	bf00      	nop
 800fcae:	e002      	b.n	800fcb6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800fcb0:	bf00      	nop
 800fcb2:	e000      	b.n	800fcb6 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800fcb4:	bf00      	nop
  }

  return usart_frequency;
 800fcb6:	697b      	ldr	r3, [r7, #20]
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	371c      	adds	r7, #28
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd90      	pop	{r4, r7, pc}
 800fcc0:	07050308 	.word	0x07050308
 800fcc4:	07050008 	.word	0x07050008
 800fcc8:	07040308 	.word	0x07040308
 800fccc:	07040008 	.word	0x07040008
 800fcd0:	07030308 	.word	0x07030308
 800fcd4:	07030008 	.word	0x07030008
 800fcd8:	07020308 	.word	0x07020308
 800fcdc:	07020008 	.word	0x07020008
 800fce0:	07010308 	.word	0x07010308
 800fce4:	07010008 	.word	0x07010008
 800fce8:	07000008 	.word	0x07000008
 800fcec:	07000308 	.word	0x07000308
 800fcf0:	08016b30 	.word	0x08016b30
 800fcf4:	03d09000 	.word	0x03d09000
 800fcf8:	003d0900 	.word	0x003d0900

0800fcfc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b084      	sub	sp, #16
 800fd00:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800fd02:	2300      	movs	r3, #0
 800fd04:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800fd06:	f7ff fa59 	bl	800f1bc <LL_RCC_GetSysClkSource>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	2b18      	cmp	r3, #24
 800fd0e:	d84b      	bhi.n	800fda8 <RCC_GetSystemClockFreq+0xac>
 800fd10:	a201      	add	r2, pc, #4	@ (adr r2, 800fd18 <RCC_GetSystemClockFreq+0x1c>)
 800fd12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd16:	bf00      	nop
 800fd18:	0800fd7d 	.word	0x0800fd7d
 800fd1c:	0800fda9 	.word	0x0800fda9
 800fd20:	0800fda9 	.word	0x0800fda9
 800fd24:	0800fda9 	.word	0x0800fda9
 800fd28:	0800fda9 	.word	0x0800fda9
 800fd2c:	0800fda9 	.word	0x0800fda9
 800fd30:	0800fda9 	.word	0x0800fda9
 800fd34:	0800fda9 	.word	0x0800fda9
 800fd38:	0800fd8f 	.word	0x0800fd8f
 800fd3c:	0800fda9 	.word	0x0800fda9
 800fd40:	0800fda9 	.word	0x0800fda9
 800fd44:	0800fda9 	.word	0x0800fda9
 800fd48:	0800fda9 	.word	0x0800fda9
 800fd4c:	0800fda9 	.word	0x0800fda9
 800fd50:	0800fda9 	.word	0x0800fda9
 800fd54:	0800fda9 	.word	0x0800fda9
 800fd58:	0800fd95 	.word	0x0800fd95
 800fd5c:	0800fda9 	.word	0x0800fda9
 800fd60:	0800fda9 	.word	0x0800fda9
 800fd64:	0800fda9 	.word	0x0800fda9
 800fd68:	0800fda9 	.word	0x0800fda9
 800fd6c:	0800fda9 	.word	0x0800fda9
 800fd70:	0800fda9 	.word	0x0800fda9
 800fd74:	0800fda9 	.word	0x0800fda9
 800fd78:	0800fd9b 	.word	0x0800fd9b
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800fd7c:	f7ff f9ea 	bl	800f154 <LL_RCC_HSI_GetDivider>
 800fd80:	4603      	mov	r3, r0
 800fd82:	08db      	lsrs	r3, r3, #3
 800fd84:	4a0b      	ldr	r2, [pc, #44]	@ (800fdb4 <RCC_GetSystemClockFreq+0xb8>)
 800fd86:	fa22 f303 	lsr.w	r3, r2, r3
 800fd8a:	60fb      	str	r3, [r7, #12]
      break;
 800fd8c:	e00d      	b.n	800fdaa <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 800fd8e:	4b0a      	ldr	r3, [pc, #40]	@ (800fdb8 <RCC_GetSystemClockFreq+0xbc>)
 800fd90:	60fb      	str	r3, [r7, #12]
      break;
 800fd92:	e00a      	b.n	800fdaa <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 800fd94:	4b09      	ldr	r3, [pc, #36]	@ (800fdbc <RCC_GetSystemClockFreq+0xc0>)
 800fd96:	60fb      	str	r3, [r7, #12]
      break;
 800fd98:	e007      	b.n	800fdaa <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 800fd9a:	463b      	mov	r3, r7
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7ff fcb5 	bl	800f70c <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	60fb      	str	r3, [r7, #12]
      break;
 800fda6:	e000      	b.n	800fdaa <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 800fda8:	bf00      	nop
  }

  return frequency;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
}
 800fdac:	4618      	mov	r0, r3
 800fdae:	3710      	adds	r7, #16
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	03d09000 	.word	0x03d09000
 800fdb8:	003d0900 	.word	0x003d0900
 800fdbc:	017d7840 	.word	0x017d7840

0800fdc0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b082      	sub	sp, #8
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800fdc8:	f7ff fa14 	bl	800f1f4 <LL_RCC_GetAHBPrescaler>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	f003 030f 	and.w	r3, r3, #15
 800fdd2:	4a05      	ldr	r2, [pc, #20]	@ (800fde8 <RCC_GetHCLKClockFreq+0x28>)
 800fdd4:	5cd3      	ldrb	r3, [r2, r3]
 800fdd6:	f003 031f 	and.w	r3, r3, #31
 800fdda:	687a      	ldr	r2, [r7, #4]
 800fddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3708      	adds	r7, #8
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	08016b30 	.word	0x08016b30

0800fdec <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800fdf4:	f7ff fa0c 	bl	800f210 <LL_RCC_GetAPB1Prescaler>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	091b      	lsrs	r3, r3, #4
 800fdfc:	f003 0307 	and.w	r3, r3, #7
 800fe00:	4a05      	ldr	r2, [pc, #20]	@ (800fe18 <RCC_GetPCLK1ClockFreq+0x2c>)
 800fe02:	5cd3      	ldrb	r3, [r2, r3]
 800fe04:	f003 031f 	and.w	r3, r3, #31
 800fe08:	687a      	ldr	r2, [r7, #4]
 800fe0a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3708      	adds	r7, #8
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
 800fe16:	bf00      	nop
 800fe18:	08016b30 	.word	0x08016b30

0800fe1c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800fe24:	f7ff fa02 	bl	800f22c <LL_RCC_GetAPB2Prescaler>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	0a1b      	lsrs	r3, r3, #8
 800fe2c:	f003 0307 	and.w	r3, r3, #7
 800fe30:	4a05      	ldr	r2, [pc, #20]	@ (800fe48 <RCC_GetPCLK2ClockFreq+0x2c>)
 800fe32:	5cd3      	ldrb	r3, [r2, r3]
 800fe34:	f003 031f 	and.w	r3, r3, #31
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3708      	adds	r7, #8
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}
 800fe46:	bf00      	nop
 800fe48:	08016b30 	.word	0x08016b30

0800fe4c <LL_SPI_IsEnabled>:
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	b083      	sub	sp, #12
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	f003 0301 	and.w	r3, r3, #1
 800fe5c:	2b01      	cmp	r3, #1
 800fe5e:	d101      	bne.n	800fe64 <LL_SPI_IsEnabled+0x18>
 800fe60:	2301      	movs	r3, #1
 800fe62:	e000      	b.n	800fe66 <LL_SPI_IsEnabled+0x1a>
 800fe64:	2300      	movs	r3, #0
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	370c      	adds	r7, #12
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe70:	4770      	bx	lr

0800fe72 <LL_SPI_SetInternalSSLevel>:
{
 800fe72:	b480      	push	{r7}
 800fe74:	b083      	sub	sp, #12
 800fe76:	af00      	add	r7, sp, #0
 800fe78:	6078      	str	r0, [r7, #4]
 800fe7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	431a      	orrs	r2, r3
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	601a      	str	r2, [r3, #0]
}
 800fe8c:	bf00      	nop
 800fe8e:	370c      	adds	r7, #12
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr

0800fe98 <LL_SPI_GetNSSPolarity>:
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b083      	sub	sp, #12
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	370c      	adds	r7, #12
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr

0800feb4 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 800feb4:	b480      	push	{r7}
 800feb6:	b083      	sub	sp, #12
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	683a      	ldr	r2, [r7, #0]
 800fec2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800fec4:	bf00      	nop
 800fec6:	370c      	adds	r7, #12
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr

0800fed0 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b086      	sub	sp, #24
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800feda:	2301      	movs	r3, #1
 800fedc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f7ff ffb4 	bl	800fe4c <LL_SPI_IsEnabled>
 800fee4:	4603      	mov	r3, r0
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d167      	bne.n	800ffba <LL_SPI_Init+0xea>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	689a      	ldr	r2, [r3, #8]
 800feee:	4b35      	ldr	r3, [pc, #212]	@ (800ffc4 <LL_SPI_Init+0xf4>)
 800fef0:	4013      	ands	r3, r2
 800fef2:	683a      	ldr	r2, [r7, #0]
 800fef4:	6991      	ldr	r1, [r2, #24]
 800fef6:	683a      	ldr	r2, [r7, #0]
 800fef8:	6a12      	ldr	r2, [r2, #32]
 800fefa:	4311      	orrs	r1, r2
 800fefc:	683a      	ldr	r2, [r7, #0]
 800fefe:	6892      	ldr	r2, [r2, #8]
 800ff00:	430a      	orrs	r2, r1
 800ff02:	431a      	orrs	r2, r3
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	695b      	ldr	r3, [r3, #20]
 800ff0c:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	685b      	ldr	r3, [r3, #4]
 800ff12:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f7ff ffbf 	bl	800fe98 <LL_SPI_GetNSSPolarity>
 800ff1a:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ff22:	d112      	bne.n	800ff4a <LL_SPI_Init+0x7a>
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d103      	bne.n	800ff32 <LL_SPI_Init+0x62>
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ff30:	d006      	beq.n	800ff40 <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ff38:	d107      	bne.n	800ff4a <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d104      	bne.n	800ff4a <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 800ff40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f7ff ff94 	bl	800fe72 <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	68da      	ldr	r2, [r3, #12]
 800ff4e:	4b1e      	ldr	r3, [pc, #120]	@ (800ffc8 <LL_SPI_Init+0xf8>)
 800ff50:	4013      	ands	r3, r2
 800ff52:	683a      	ldr	r2, [r7, #0]
 800ff54:	6951      	ldr	r1, [r2, #20]
 800ff56:	683a      	ldr	r2, [r7, #0]
 800ff58:	68d2      	ldr	r2, [r2, #12]
 800ff5a:	4311      	orrs	r1, r2
 800ff5c:	683a      	ldr	r2, [r7, #0]
 800ff5e:	6912      	ldr	r2, [r2, #16]
 800ff60:	4311      	orrs	r1, r2
 800ff62:	683a      	ldr	r2, [r7, #0]
 800ff64:	69d2      	ldr	r2, [r2, #28]
 800ff66:	4311      	orrs	r1, r2
 800ff68:	683a      	ldr	r2, [r7, #0]
 800ff6a:	6852      	ldr	r2, [r2, #4]
 800ff6c:	4311      	orrs	r1, r2
 800ff6e:	683a      	ldr	r2, [r7, #0]
 800ff70:	6812      	ldr	r2, [r2, #0]
 800ff72:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 800ff76:	430a      	orrs	r2, r1
 800ff78:	431a      	orrs	r2, r3
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ff8e:	431a      	orrs	r2, r3
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	6a1b      	ldr	r3, [r3, #32]
 800ff98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ff9c:	d105      	bne.n	800ffaa <LL_SPI_Init+0xda>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f7ff ff85 	bl	800feb4 <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ffae:	f023 0201 	bic.w	r2, r3, #1
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ffba:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3718      	adds	r7, #24
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}
 800ffc4:	8fbfffe0 	.word	0x8fbfffe0
 800ffc8:	d839ffff 	.word	0xd839ffff

0800ffcc <LL_TIM_SetPrescaler>:
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	683a      	ldr	r2, [r7, #0]
 800ffda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ffdc:	bf00      	nop
 800ffde:	370c      	adds	r7, #12
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr

0800ffe8 <LL_TIM_SetAutoReload>:
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b083      	sub	sp, #12
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	683a      	ldr	r2, [r7, #0]
 800fff6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800fff8:	bf00      	nop
 800fffa:	370c      	adds	r7, #12
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr

08010004 <LL_TIM_SetRepetitionCounter>:
{
 8010004:	b480      	push	{r7}
 8010006:	b083      	sub	sp, #12
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	683a      	ldr	r2, [r7, #0]
 8010012:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8010014:	bf00      	nop
 8010016:	370c      	adds	r7, #12
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <LL_TIM_OC_SetCompareCH1>:
{
 8010020:	b480      	push	{r7}
 8010022:	b083      	sub	sp, #12
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	683a      	ldr	r2, [r7, #0]
 801002e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8010030:	bf00      	nop
 8010032:	370c      	adds	r7, #12
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr

0801003c <LL_TIM_OC_SetCompareCH2>:
{
 801003c:	b480      	push	{r7}
 801003e:	b083      	sub	sp, #12
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	683a      	ldr	r2, [r7, #0]
 801004a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 801004c:	bf00      	nop
 801004e:	370c      	adds	r7, #12
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr

08010058 <LL_TIM_OC_SetCompareCH3>:
{
 8010058:	b480      	push	{r7}
 801005a:	b083      	sub	sp, #12
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	683a      	ldr	r2, [r7, #0]
 8010066:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8010068:	bf00      	nop
 801006a:	370c      	adds	r7, #12
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr

08010074 <LL_TIM_OC_SetCompareCH4>:
{
 8010074:	b480      	push	{r7}
 8010076:	b083      	sub	sp, #12
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	683a      	ldr	r2, [r7, #0]
 8010082:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8010084:	bf00      	nop
 8010086:	370c      	adds	r7, #12
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr

08010090 <LL_TIM_OC_SetCompareCH5>:
{
 8010090:	b480      	push	{r7}
 8010092:	b083      	sub	sp, #12
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	683a      	ldr	r2, [r7, #0]
 80100a2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80100a4:	bf00      	nop
 80100a6:	370c      	adds	r7, #12
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr

080100b0 <LL_TIM_OC_SetCompareCH6>:
{
 80100b0:	b480      	push	{r7}
 80100b2:	b083      	sub	sp, #12
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	683a      	ldr	r2, [r7, #0]
 80100be:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80100c0:	bf00      	nop
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	695b      	ldr	r3, [r3, #20]
 80100d8:	f043 0201 	orr.w	r2, r3, #1
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	615a      	str	r2, [r3, #20]
}
 80100e0:	bf00      	nop
 80100e2:	370c      	adds	r7, #12
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr

080100ec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	4a41      	ldr	r2, [pc, #260]	@ (8010204 <LL_TIM_Init+0x118>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d013      	beq.n	801012c <LL_TIM_Init+0x40>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801010a:	d00f      	beq.n	801012c <LL_TIM_Init+0x40>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	4a3e      	ldr	r2, [pc, #248]	@ (8010208 <LL_TIM_Init+0x11c>)
 8010110:	4293      	cmp	r3, r2
 8010112:	d00b      	beq.n	801012c <LL_TIM_Init+0x40>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	4a3d      	ldr	r2, [pc, #244]	@ (801020c <LL_TIM_Init+0x120>)
 8010118:	4293      	cmp	r3, r2
 801011a:	d007      	beq.n	801012c <LL_TIM_Init+0x40>
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	4a3c      	ldr	r2, [pc, #240]	@ (8010210 <LL_TIM_Init+0x124>)
 8010120:	4293      	cmp	r3, r2
 8010122:	d003      	beq.n	801012c <LL_TIM_Init+0x40>
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	4a3b      	ldr	r2, [pc, #236]	@ (8010214 <LL_TIM_Init+0x128>)
 8010128:	4293      	cmp	r3, r2
 801012a:	d106      	bne.n	801013a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	685b      	ldr	r3, [r3, #4]
 8010136:	4313      	orrs	r3, r2
 8010138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	4a31      	ldr	r2, [pc, #196]	@ (8010204 <LL_TIM_Init+0x118>)
 801013e:	4293      	cmp	r3, r2
 8010140:	d027      	beq.n	8010192 <LL_TIM_Init+0xa6>
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010148:	d023      	beq.n	8010192 <LL_TIM_Init+0xa6>
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	4a2e      	ldr	r2, [pc, #184]	@ (8010208 <LL_TIM_Init+0x11c>)
 801014e:	4293      	cmp	r3, r2
 8010150:	d01f      	beq.n	8010192 <LL_TIM_Init+0xa6>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	4a2d      	ldr	r2, [pc, #180]	@ (801020c <LL_TIM_Init+0x120>)
 8010156:	4293      	cmp	r3, r2
 8010158:	d01b      	beq.n	8010192 <LL_TIM_Init+0xa6>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	4a2c      	ldr	r2, [pc, #176]	@ (8010210 <LL_TIM_Init+0x124>)
 801015e:	4293      	cmp	r3, r2
 8010160:	d017      	beq.n	8010192 <LL_TIM_Init+0xa6>
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	4a2b      	ldr	r2, [pc, #172]	@ (8010214 <LL_TIM_Init+0x128>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d013      	beq.n	8010192 <LL_TIM_Init+0xa6>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	4a2a      	ldr	r2, [pc, #168]	@ (8010218 <LL_TIM_Init+0x12c>)
 801016e:	4293      	cmp	r3, r2
 8010170:	d00f      	beq.n	8010192 <LL_TIM_Init+0xa6>
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	4a29      	ldr	r2, [pc, #164]	@ (801021c <LL_TIM_Init+0x130>)
 8010176:	4293      	cmp	r3, r2
 8010178:	d00b      	beq.n	8010192 <LL_TIM_Init+0xa6>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	4a28      	ldr	r2, [pc, #160]	@ (8010220 <LL_TIM_Init+0x134>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d007      	beq.n	8010192 <LL_TIM_Init+0xa6>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4a27      	ldr	r2, [pc, #156]	@ (8010224 <LL_TIM_Init+0x138>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d003      	beq.n	8010192 <LL_TIM_Init+0xa6>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	4a26      	ldr	r2, [pc, #152]	@ (8010228 <LL_TIM_Init+0x13c>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d106      	bne.n	80101a0 <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	68db      	ldr	r3, [r3, #12]
 801019c:	4313      	orrs	r3, r2
 801019e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	68fa      	ldr	r2, [r7, #12]
 80101a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	689b      	ldr	r3, [r3, #8]
 80101aa:	4619      	mov	r1, r3
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f7ff ff1b 	bl	800ffe8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	881b      	ldrh	r3, [r3, #0]
 80101b6:	4619      	mov	r1, r3
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7ff ff07 	bl	800ffcc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	4a10      	ldr	r2, [pc, #64]	@ (8010204 <LL_TIM_Init+0x118>)
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d00f      	beq.n	80101e6 <LL_TIM_Init+0xfa>
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	4a12      	ldr	r2, [pc, #72]	@ (8010214 <LL_TIM_Init+0x128>)
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d00b      	beq.n	80101e6 <LL_TIM_Init+0xfa>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	4a11      	ldr	r2, [pc, #68]	@ (8010218 <LL_TIM_Init+0x12c>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d007      	beq.n	80101e6 <LL_TIM_Init+0xfa>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	4a10      	ldr	r2, [pc, #64]	@ (801021c <LL_TIM_Init+0x130>)
 80101da:	4293      	cmp	r3, r2
 80101dc:	d003      	beq.n	80101e6 <LL_TIM_Init+0xfa>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	4a0f      	ldr	r2, [pc, #60]	@ (8010220 <LL_TIM_Init+0x134>)
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d105      	bne.n	80101f2 <LL_TIM_Init+0x106>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	691b      	ldr	r3, [r3, #16]
 80101ea:	4619      	mov	r1, r3
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f7ff ff09 	bl	8010004 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f7ff ff6a 	bl	80100cc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80101f8:	2300      	movs	r3, #0
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	3710      	adds	r7, #16
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}
 8010202:	bf00      	nop
 8010204:	40010000 	.word	0x40010000
 8010208:	40000400 	.word	0x40000400
 801020c:	40000800 	.word	0x40000800
 8010210:	40000c00 	.word	0x40000c00
 8010214:	40010400 	.word	0x40010400
 8010218:	40014000 	.word	0x40014000
 801021c:	40014400 	.word	0x40014400
 8010220:	40014800 	.word	0x40014800
 8010224:	4000e000 	.word	0x4000e000
 8010228:	4000e400 	.word	0x4000e400

0801022c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b086      	sub	sp, #24
 8010230:	af00      	add	r7, sp, #0
 8010232:	60f8      	str	r0, [r7, #12]
 8010234:	60b9      	str	r1, [r7, #8]
 8010236:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8010238:	2301      	movs	r3, #1
 801023a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010242:	d045      	beq.n	80102d0 <LL_TIM_OC_Init+0xa4>
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801024a:	d848      	bhi.n	80102de <LL_TIM_OC_Init+0xb2>
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010252:	d036      	beq.n	80102c2 <LL_TIM_OC_Init+0x96>
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801025a:	d840      	bhi.n	80102de <LL_TIM_OC_Init+0xb2>
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010262:	d027      	beq.n	80102b4 <LL_TIM_OC_Init+0x88>
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801026a:	d838      	bhi.n	80102de <LL_TIM_OC_Init+0xb2>
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010272:	d018      	beq.n	80102a6 <LL_TIM_OC_Init+0x7a>
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801027a:	d830      	bhi.n	80102de <LL_TIM_OC_Init+0xb2>
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	2b01      	cmp	r3, #1
 8010280:	d003      	beq.n	801028a <LL_TIM_OC_Init+0x5e>
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	2b10      	cmp	r3, #16
 8010286:	d007      	beq.n	8010298 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8010288:	e029      	b.n	80102de <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 801028a:	6879      	ldr	r1, [r7, #4]
 801028c:	68f8      	ldr	r0, [r7, #12]
 801028e:	f000 f82d 	bl	80102ec <OC1Config>
 8010292:	4603      	mov	r3, r0
 8010294:	75fb      	strb	r3, [r7, #23]
      break;
 8010296:	e023      	b.n	80102e0 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8010298:	6879      	ldr	r1, [r7, #4]
 801029a:	68f8      	ldr	r0, [r7, #12]
 801029c:	f000 f8a6 	bl	80103ec <OC2Config>
 80102a0:	4603      	mov	r3, r0
 80102a2:	75fb      	strb	r3, [r7, #23]
      break;
 80102a4:	e01c      	b.n	80102e0 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80102a6:	6879      	ldr	r1, [r7, #4]
 80102a8:	68f8      	ldr	r0, [r7, #12]
 80102aa:	f000 f923 	bl	80104f4 <OC3Config>
 80102ae:	4603      	mov	r3, r0
 80102b0:	75fb      	strb	r3, [r7, #23]
      break;
 80102b2:	e015      	b.n	80102e0 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80102b4:	6879      	ldr	r1, [r7, #4]
 80102b6:	68f8      	ldr	r0, [r7, #12]
 80102b8:	f000 f9a0 	bl	80105fc <OC4Config>
 80102bc:	4603      	mov	r3, r0
 80102be:	75fb      	strb	r3, [r7, #23]
      break;
 80102c0:	e00e      	b.n	80102e0 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80102c2:	6879      	ldr	r1, [r7, #4]
 80102c4:	68f8      	ldr	r0, [r7, #12]
 80102c6:	f000 fa05 	bl	80106d4 <OC5Config>
 80102ca:	4603      	mov	r3, r0
 80102cc:	75fb      	strb	r3, [r7, #23]
      break;
 80102ce:	e007      	b.n	80102e0 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80102d0:	6879      	ldr	r1, [r7, #4]
 80102d2:	68f8      	ldr	r0, [r7, #12]
 80102d4:	f000 fa62 	bl	801079c <OC6Config>
 80102d8:	4603      	mov	r3, r0
 80102da:	75fb      	strb	r3, [r7, #23]
      break;
 80102dc:	e000      	b.n	80102e0 <LL_TIM_OC_Init+0xb4>
      break;
 80102de:	bf00      	nop
  }

  return result;
 80102e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3718      	adds	r7, #24
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
	...

080102ec <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b086      	sub	sp, #24
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6a1b      	ldr	r3, [r3, #32]
 80102fa:	f023 0201 	bic.w	r2, r3, #1
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6a1b      	ldr	r3, [r3, #32]
 8010306:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	699b      	ldr	r3, [r3, #24]
 8010312:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	f023 0303 	bic.w	r3, r3, #3
 801031a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 801031c:	68fa      	ldr	r2, [r7, #12]
 801031e:	4b2d      	ldr	r3, [pc, #180]	@ (80103d4 <OC1Config+0xe8>)
 8010320:	4013      	ands	r3, r2
 8010322:	683a      	ldr	r2, [r7, #0]
 8010324:	6812      	ldr	r2, [r2, #0]
 8010326:	4313      	orrs	r3, r2
 8010328:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	f023 0202 	bic.w	r2, r3, #2
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	691b      	ldr	r3, [r3, #16]
 8010334:	4313      	orrs	r3, r2
 8010336:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	f023 0201 	bic.w	r2, r3, #1
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	685b      	ldr	r3, [r3, #4]
 8010342:	4313      	orrs	r3, r2
 8010344:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	4a23      	ldr	r2, [pc, #140]	@ (80103d8 <OC1Config+0xec>)
 801034a:	4293      	cmp	r3, r2
 801034c:	d00f      	beq.n	801036e <OC1Config+0x82>
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	4a22      	ldr	r2, [pc, #136]	@ (80103dc <OC1Config+0xf0>)
 8010352:	4293      	cmp	r3, r2
 8010354:	d00b      	beq.n	801036e <OC1Config+0x82>
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	4a21      	ldr	r2, [pc, #132]	@ (80103e0 <OC1Config+0xf4>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d007      	beq.n	801036e <OC1Config+0x82>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	4a20      	ldr	r2, [pc, #128]	@ (80103e4 <OC1Config+0xf8>)
 8010362:	4293      	cmp	r3, r2
 8010364:	d003      	beq.n	801036e <OC1Config+0x82>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	4a1f      	ldr	r2, [pc, #124]	@ (80103e8 <OC1Config+0xfc>)
 801036a:	4293      	cmp	r3, r2
 801036c:	d11e      	bne.n	80103ac <OC1Config+0xc0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	f023 0208 	bic.w	r2, r3, #8
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	695b      	ldr	r3, [r3, #20]
 8010378:	009b      	lsls	r3, r3, #2
 801037a:	4313      	orrs	r3, r2
 801037c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	f023 0204 	bic.w	r2, r3, #4
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	689b      	ldr	r3, [r3, #8]
 8010388:	009b      	lsls	r3, r3, #2
 801038a:	4313      	orrs	r3, r2
 801038c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	699b      	ldr	r3, [r3, #24]
 8010398:	4313      	orrs	r3, r2
 801039a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	69db      	ldr	r3, [r3, #28]
 80103a6:	005b      	lsls	r3, r3, #1
 80103a8:	4313      	orrs	r3, r2
 80103aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	693a      	ldr	r2, [r7, #16]
 80103b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	68fa      	ldr	r2, [r7, #12]
 80103b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	68db      	ldr	r3, [r3, #12]
 80103bc:	4619      	mov	r1, r3
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f7ff fe2e 	bl	8010020 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	697a      	ldr	r2, [r7, #20]
 80103c8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80103ca:	2300      	movs	r3, #0
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3718      	adds	r7, #24
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	fffeff8f 	.word	0xfffeff8f
 80103d8:	40010000 	.word	0x40010000
 80103dc:	40010400 	.word	0x40010400
 80103e0:	40014000 	.word	0x40014000
 80103e4:	40014400 	.word	0x40014400
 80103e8:	40014800 	.word	0x40014800

080103ec <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b086      	sub	sp, #24
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6a1b      	ldr	r3, [r3, #32]
 80103fa:	f023 0210 	bic.w	r2, r3, #16
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6a1b      	ldr	r3, [r3, #32]
 8010406:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	685b      	ldr	r3, [r3, #4]
 801040c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	699b      	ldr	r3, [r3, #24]
 8010412:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801041a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 801041c:	68fa      	ldr	r2, [r7, #12]
 801041e:	4b2f      	ldr	r3, [pc, #188]	@ (80104dc <OC2Config+0xf0>)
 8010420:	4013      	ands	r3, r2
 8010422:	683a      	ldr	r2, [r7, #0]
 8010424:	6812      	ldr	r2, [r2, #0]
 8010426:	0212      	lsls	r2, r2, #8
 8010428:	4313      	orrs	r3, r2
 801042a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	f023 0220 	bic.w	r2, r3, #32
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	691b      	ldr	r3, [r3, #16]
 8010436:	011b      	lsls	r3, r3, #4
 8010438:	4313      	orrs	r3, r2
 801043a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	f023 0210 	bic.w	r2, r3, #16
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	011b      	lsls	r3, r3, #4
 8010448:	4313      	orrs	r3, r2
 801044a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	4a24      	ldr	r2, [pc, #144]	@ (80104e0 <OC2Config+0xf4>)
 8010450:	4293      	cmp	r3, r2
 8010452:	d00f      	beq.n	8010474 <OC2Config+0x88>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	4a23      	ldr	r2, [pc, #140]	@ (80104e4 <OC2Config+0xf8>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d00b      	beq.n	8010474 <OC2Config+0x88>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	4a22      	ldr	r2, [pc, #136]	@ (80104e8 <OC2Config+0xfc>)
 8010460:	4293      	cmp	r3, r2
 8010462:	d007      	beq.n	8010474 <OC2Config+0x88>
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	4a21      	ldr	r2, [pc, #132]	@ (80104ec <OC2Config+0x100>)
 8010468:	4293      	cmp	r3, r2
 801046a:	d003      	beq.n	8010474 <OC2Config+0x88>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	4a20      	ldr	r2, [pc, #128]	@ (80104f0 <OC2Config+0x104>)
 8010470:	4293      	cmp	r3, r2
 8010472:	d11f      	bne.n	80104b4 <OC2Config+0xc8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	695b      	ldr	r3, [r3, #20]
 801047e:	019b      	lsls	r3, r3, #6
 8010480:	4313      	orrs	r3, r2
 8010482:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	689b      	ldr	r3, [r3, #8]
 801048e:	019b      	lsls	r3, r3, #6
 8010490:	4313      	orrs	r3, r2
 8010492:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	699b      	ldr	r3, [r3, #24]
 801049e:	009b      	lsls	r3, r3, #2
 80104a0:	4313      	orrs	r3, r2
 80104a2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	69db      	ldr	r3, [r3, #28]
 80104ae:	00db      	lsls	r3, r3, #3
 80104b0:	4313      	orrs	r3, r2
 80104b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	693a      	ldr	r2, [r7, #16]
 80104b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	68fa      	ldr	r2, [r7, #12]
 80104be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	68db      	ldr	r3, [r3, #12]
 80104c4:	4619      	mov	r1, r3
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f7ff fdb8 	bl	801003c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	697a      	ldr	r2, [r7, #20]
 80104d0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80104d2:	2300      	movs	r3, #0
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3718      	adds	r7, #24
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	feff8fff 	.word	0xfeff8fff
 80104e0:	40010000 	.word	0x40010000
 80104e4:	40010400 	.word	0x40010400
 80104e8:	40014000 	.word	0x40014000
 80104ec:	40014400 	.word	0x40014400
 80104f0:	40014800 	.word	0x40014800

080104f4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b086      	sub	sp, #24
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6a1b      	ldr	r3, [r3, #32]
 8010502:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6a1b      	ldr	r3, [r3, #32]
 801050e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	69db      	ldr	r3, [r3, #28]
 801051a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	f023 0303 	bic.w	r3, r3, #3
 8010522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8010524:	68fa      	ldr	r2, [r7, #12]
 8010526:	4b2f      	ldr	r3, [pc, #188]	@ (80105e4 <OC3Config+0xf0>)
 8010528:	4013      	ands	r3, r2
 801052a:	683a      	ldr	r2, [r7, #0]
 801052c:	6812      	ldr	r2, [r2, #0]
 801052e:	4313      	orrs	r3, r2
 8010530:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	691b      	ldr	r3, [r3, #16]
 801053c:	021b      	lsls	r3, r3, #8
 801053e:	4313      	orrs	r3, r2
 8010540:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	685b      	ldr	r3, [r3, #4]
 801054c:	021b      	lsls	r3, r3, #8
 801054e:	4313      	orrs	r3, r2
 8010550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	4a24      	ldr	r2, [pc, #144]	@ (80105e8 <OC3Config+0xf4>)
 8010556:	4293      	cmp	r3, r2
 8010558:	d00f      	beq.n	801057a <OC3Config+0x86>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	4a23      	ldr	r2, [pc, #140]	@ (80105ec <OC3Config+0xf8>)
 801055e:	4293      	cmp	r3, r2
 8010560:	d00b      	beq.n	801057a <OC3Config+0x86>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	4a22      	ldr	r2, [pc, #136]	@ (80105f0 <OC3Config+0xfc>)
 8010566:	4293      	cmp	r3, r2
 8010568:	d007      	beq.n	801057a <OC3Config+0x86>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4a21      	ldr	r2, [pc, #132]	@ (80105f4 <OC3Config+0x100>)
 801056e:	4293      	cmp	r3, r2
 8010570:	d003      	beq.n	801057a <OC3Config+0x86>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	4a20      	ldr	r2, [pc, #128]	@ (80105f8 <OC3Config+0x104>)
 8010576:	4293      	cmp	r3, r2
 8010578:	d11f      	bne.n	80105ba <OC3Config+0xc6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	695b      	ldr	r3, [r3, #20]
 8010584:	029b      	lsls	r3, r3, #10
 8010586:	4313      	orrs	r3, r2
 8010588:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	689b      	ldr	r3, [r3, #8]
 8010594:	029b      	lsls	r3, r3, #10
 8010596:	4313      	orrs	r3, r2
 8010598:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	699b      	ldr	r3, [r3, #24]
 80105a4:	011b      	lsls	r3, r3, #4
 80105a6:	4313      	orrs	r3, r2
 80105a8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	69db      	ldr	r3, [r3, #28]
 80105b4:	015b      	lsls	r3, r3, #5
 80105b6:	4313      	orrs	r3, r2
 80105b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	693a      	ldr	r2, [r7, #16]
 80105be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	68fa      	ldr	r2, [r7, #12]
 80105c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	4619      	mov	r1, r3
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f7ff fd43 	bl	8010058 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	697a      	ldr	r2, [r7, #20]
 80105d6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80105d8:	2300      	movs	r3, #0
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3718      	adds	r7, #24
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	fffeff8f 	.word	0xfffeff8f
 80105e8:	40010000 	.word	0x40010000
 80105ec:	40010400 	.word	0x40010400
 80105f0:	40014000 	.word	0x40014000
 80105f4:	40014400 	.word	0x40014400
 80105f8:	40014800 	.word	0x40014800

080105fc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b086      	sub	sp, #24
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6a1b      	ldr	r3, [r3, #32]
 801060a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6a1b      	ldr	r3, [r3, #32]
 8010616:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	685b      	ldr	r3, [r3, #4]
 801061c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	69db      	ldr	r3, [r3, #28]
 8010622:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801062a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 801062c:	68fa      	ldr	r2, [r7, #12]
 801062e:	4b23      	ldr	r3, [pc, #140]	@ (80106bc <OC4Config+0xc0>)
 8010630:	4013      	ands	r3, r2
 8010632:	683a      	ldr	r2, [r7, #0]
 8010634:	6812      	ldr	r2, [r2, #0]
 8010636:	0212      	lsls	r2, r2, #8
 8010638:	4313      	orrs	r3, r2
 801063a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	691b      	ldr	r3, [r3, #16]
 8010646:	031b      	lsls	r3, r3, #12
 8010648:	4313      	orrs	r3, r2
 801064a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	031b      	lsls	r3, r3, #12
 8010658:	4313      	orrs	r3, r2
 801065a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	4a18      	ldr	r2, [pc, #96]	@ (80106c0 <OC4Config+0xc4>)
 8010660:	4293      	cmp	r3, r2
 8010662:	d00f      	beq.n	8010684 <OC4Config+0x88>
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	4a17      	ldr	r2, [pc, #92]	@ (80106c4 <OC4Config+0xc8>)
 8010668:	4293      	cmp	r3, r2
 801066a:	d00b      	beq.n	8010684 <OC4Config+0x88>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	4a16      	ldr	r2, [pc, #88]	@ (80106c8 <OC4Config+0xcc>)
 8010670:	4293      	cmp	r3, r2
 8010672:	d007      	beq.n	8010684 <OC4Config+0x88>
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	4a15      	ldr	r2, [pc, #84]	@ (80106cc <OC4Config+0xd0>)
 8010678:	4293      	cmp	r3, r2
 801067a:	d003      	beq.n	8010684 <OC4Config+0x88>
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	4a14      	ldr	r2, [pc, #80]	@ (80106d0 <OC4Config+0xd4>)
 8010680:	4293      	cmp	r3, r2
 8010682:	d107      	bne.n	8010694 <OC4Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	699b      	ldr	r3, [r3, #24]
 801068e:	019b      	lsls	r3, r3, #6
 8010690:	4313      	orrs	r3, r2
 8010692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	697a      	ldr	r2, [r7, #20]
 8010698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	68fa      	ldr	r2, [r7, #12]
 801069e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	4619      	mov	r1, r3
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f7ff fce4 	bl	8010074 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	693a      	ldr	r2, [r7, #16]
 80106b0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80106b2:	2300      	movs	r3, #0
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3718      	adds	r7, #24
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	feff8fff 	.word	0xfeff8fff
 80106c0:	40010000 	.word	0x40010000
 80106c4:	40010400 	.word	0x40010400
 80106c8:	40014000 	.word	0x40014000
 80106cc:	40014400 	.word	0x40014400
 80106d0:	40014800 	.word	0x40014800

080106d4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b084      	sub	sp, #16
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6a1b      	ldr	r3, [r3, #32]
 80106e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6a1b      	ldr	r3, [r3, #32]
 80106ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80106f4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80106f6:	68ba      	ldr	r2, [r7, #8]
 80106f8:	4b22      	ldr	r3, [pc, #136]	@ (8010784 <OC5Config+0xb0>)
 80106fa:	4013      	ands	r3, r2
 80106fc:	683a      	ldr	r2, [r7, #0]
 80106fe:	6812      	ldr	r2, [r2, #0]
 8010700:	4313      	orrs	r3, r2
 8010702:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	691b      	ldr	r3, [r3, #16]
 801070e:	041b      	lsls	r3, r3, #16
 8010710:	4313      	orrs	r3, r2
 8010712:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	041b      	lsls	r3, r3, #16
 8010720:	4313      	orrs	r3, r2
 8010722:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	4a18      	ldr	r2, [pc, #96]	@ (8010788 <OC5Config+0xb4>)
 8010728:	4293      	cmp	r3, r2
 801072a:	d00f      	beq.n	801074c <OC5Config+0x78>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	4a17      	ldr	r2, [pc, #92]	@ (801078c <OC5Config+0xb8>)
 8010730:	4293      	cmp	r3, r2
 8010732:	d00b      	beq.n	801074c <OC5Config+0x78>
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	4a16      	ldr	r2, [pc, #88]	@ (8010790 <OC5Config+0xbc>)
 8010738:	4293      	cmp	r3, r2
 801073a:	d007      	beq.n	801074c <OC5Config+0x78>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	4a15      	ldr	r2, [pc, #84]	@ (8010794 <OC5Config+0xc0>)
 8010740:	4293      	cmp	r3, r2
 8010742:	d003      	beq.n	801074c <OC5Config+0x78>
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	4a14      	ldr	r2, [pc, #80]	@ (8010798 <OC5Config+0xc4>)
 8010748:	4293      	cmp	r3, r2
 801074a:	d109      	bne.n	8010760 <OC5Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	699b      	ldr	r3, [r3, #24]
 8010758:	021b      	lsls	r3, r3, #8
 801075a:	431a      	orrs	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	68ba      	ldr	r2, [r7, #8]
 8010764:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	68db      	ldr	r3, [r3, #12]
 801076a:	4619      	mov	r1, r3
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f7ff fc8f 	bl	8010090 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	68fa      	ldr	r2, [r7, #12]
 8010776:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010778:	2300      	movs	r3, #0
}
 801077a:	4618      	mov	r0, r3
 801077c:	3710      	adds	r7, #16
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}
 8010782:	bf00      	nop
 8010784:	fffeff8f 	.word	0xfffeff8f
 8010788:	40010000 	.word	0x40010000
 801078c:	40010400 	.word	0x40010400
 8010790:	40014000 	.word	0x40014000
 8010794:	40014400 	.word	0x40014400
 8010798:	40014800 	.word	0x40014800

0801079c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6a1b      	ldr	r3, [r3, #32]
 80107aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6a1b      	ldr	r3, [r3, #32]
 80107b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107bc:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80107be:	68ba      	ldr	r2, [r7, #8]
 80107c0:	4b22      	ldr	r3, [pc, #136]	@ (801084c <OC6Config+0xb0>)
 80107c2:	4013      	ands	r3, r2
 80107c4:	683a      	ldr	r2, [r7, #0]
 80107c6:	6812      	ldr	r2, [r2, #0]
 80107c8:	0212      	lsls	r2, r2, #8
 80107ca:	4313      	orrs	r3, r2
 80107cc:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	691b      	ldr	r3, [r3, #16]
 80107d8:	051b      	lsls	r3, r3, #20
 80107da:	4313      	orrs	r3, r2
 80107dc:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	685b      	ldr	r3, [r3, #4]
 80107e8:	051b      	lsls	r3, r3, #20
 80107ea:	4313      	orrs	r3, r2
 80107ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	4a17      	ldr	r2, [pc, #92]	@ (8010850 <OC6Config+0xb4>)
 80107f2:	4293      	cmp	r3, r2
 80107f4:	d00f      	beq.n	8010816 <OC6Config+0x7a>
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	4a16      	ldr	r2, [pc, #88]	@ (8010854 <OC6Config+0xb8>)
 80107fa:	4293      	cmp	r3, r2
 80107fc:	d00b      	beq.n	8010816 <OC6Config+0x7a>
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	4a15      	ldr	r2, [pc, #84]	@ (8010858 <OC6Config+0xbc>)
 8010802:	4293      	cmp	r3, r2
 8010804:	d007      	beq.n	8010816 <OC6Config+0x7a>
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	4a14      	ldr	r2, [pc, #80]	@ (801085c <OC6Config+0xc0>)
 801080a:	4293      	cmp	r3, r2
 801080c:	d003      	beq.n	8010816 <OC6Config+0x7a>
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	4a13      	ldr	r2, [pc, #76]	@ (8010860 <OC6Config+0xc4>)
 8010812:	4293      	cmp	r3, r2
 8010814:	d109      	bne.n	801082a <OC6Config+0x8e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	699b      	ldr	r3, [r3, #24]
 8010822:	029b      	lsls	r3, r3, #10
 8010824:	431a      	orrs	r2, r3
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	68ba      	ldr	r2, [r7, #8]
 801082e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	68db      	ldr	r3, [r3, #12]
 8010834:	4619      	mov	r1, r3
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f7ff fc3a 	bl	80100b0 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	68fa      	ldr	r2, [r7, #12]
 8010840:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010842:	2300      	movs	r3, #0
}
 8010844:	4618      	mov	r0, r3
 8010846:	3710      	adds	r7, #16
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	feff8fff 	.word	0xfeff8fff
 8010850:	40010000 	.word	0x40010000
 8010854:	40010400 	.word	0x40010400
 8010858:	40014000 	.word	0x40014000
 801085c:	40014400 	.word	0x40014400
 8010860:	40014800 	.word	0x40014800

08010864 <LL_USART_IsEnabled>:
{
 8010864:	b480      	push	{r7}
 8010866:	b083      	sub	sp, #12
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f003 0301 	and.w	r3, r3, #1
 8010874:	2b01      	cmp	r3, #1
 8010876:	d101      	bne.n	801087c <LL_USART_IsEnabled+0x18>
 8010878:	2301      	movs	r3, #1
 801087a:	e000      	b.n	801087e <LL_USART_IsEnabled+0x1a>
 801087c:	2300      	movs	r3, #0
}
 801087e:	4618      	mov	r0, r3
 8010880:	370c      	adds	r7, #12
 8010882:	46bd      	mov	sp, r7
 8010884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010888:	4770      	bx	lr

0801088a <LL_USART_SetPrescaler>:
{
 801088a:	b480      	push	{r7}
 801088c:	b083      	sub	sp, #12
 801088e:	af00      	add	r7, sp, #0
 8010890:	6078      	str	r0, [r7, #4]
 8010892:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010898:	f023 030f 	bic.w	r3, r3, #15
 801089c:	683a      	ldr	r2, [r7, #0]
 801089e:	b292      	uxth	r2, r2
 80108a0:	431a      	orrs	r2, r3
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80108a6:	bf00      	nop
 80108a8:	370c      	adds	r7, #12
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr

080108b2 <LL_USART_SetStopBitsLength>:
{
 80108b2:	b480      	push	{r7}
 80108b4:	b083      	sub	sp, #12
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
 80108ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	431a      	orrs	r2, r3
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	605a      	str	r2, [r3, #4]
}
 80108cc:	bf00      	nop
 80108ce:	370c      	adds	r7, #12
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr

080108d8 <LL_USART_SetHWFlowCtrl>:
{
 80108d8:	b480      	push	{r7}
 80108da:	b083      	sub	sp, #12
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
 80108e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	689b      	ldr	r3, [r3, #8]
 80108e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	431a      	orrs	r2, r3
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	609a      	str	r2, [r3, #8]
}
 80108f2:	bf00      	nop
 80108f4:	370c      	adds	r7, #12
 80108f6:	46bd      	mov	sp, r7
 80108f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fc:	4770      	bx	lr
	...

08010900 <LL_USART_SetBaudRate>:
{
 8010900:	b480      	push	{r7}
 8010902:	b087      	sub	sp, #28
 8010904:	af00      	add	r7, sp, #0
 8010906:	60f8      	str	r0, [r7, #12]
 8010908:	60b9      	str	r1, [r7, #8]
 801090a:	607a      	str	r2, [r7, #4]
 801090c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2b0b      	cmp	r3, #11
 8010912:	d83c      	bhi.n	801098e <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8010914:	6a3b      	ldr	r3, [r7, #32]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d039      	beq.n	801098e <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010920:	d122      	bne.n	8010968 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	b2db      	uxtb	r3, r3
 8010926:	461a      	mov	r2, r3
 8010928:	4b1c      	ldr	r3, [pc, #112]	@ (801099c <LL_USART_SetBaudRate+0x9c>)
 801092a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801092e:	68ba      	ldr	r2, [r7, #8]
 8010930:	fbb2 f3f3 	udiv	r3, r2, r3
 8010934:	005a      	lsls	r2, r3, #1
 8010936:	6a3b      	ldr	r3, [r7, #32]
 8010938:	085b      	lsrs	r3, r3, #1
 801093a:	441a      	add	r2, r3
 801093c:	6a3b      	ldr	r3, [r7, #32]
 801093e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010942:	b29b      	uxth	r3, r3
 8010944:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8010946:	697a      	ldr	r2, [r7, #20]
 8010948:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 801094c:	4013      	ands	r3, r2
 801094e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	085b      	lsrs	r3, r3, #1
 8010954:	b29b      	uxth	r3, r3
 8010956:	f003 0307 	and.w	r3, r3, #7
 801095a:	693a      	ldr	r2, [r7, #16]
 801095c:	4313      	orrs	r3, r2
 801095e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	693a      	ldr	r2, [r7, #16]
 8010964:	60da      	str	r2, [r3, #12]
}
 8010966:	e012      	b.n	801098e <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	b2db      	uxtb	r3, r3
 801096c:	461a      	mov	r2, r3
 801096e:	4b0b      	ldr	r3, [pc, #44]	@ (801099c <LL_USART_SetBaudRate+0x9c>)
 8010970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010974:	68ba      	ldr	r2, [r7, #8]
 8010976:	fbb2 f2f3 	udiv	r2, r2, r3
 801097a:	6a3b      	ldr	r3, [r7, #32]
 801097c:	085b      	lsrs	r3, r3, #1
 801097e:	441a      	add	r2, r3
 8010980:	6a3b      	ldr	r3, [r7, #32]
 8010982:	fbb2 f3f3 	udiv	r3, r2, r3
 8010986:	b29b      	uxth	r3, r3
 8010988:	461a      	mov	r2, r3
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	60da      	str	r2, [r3, #12]
}
 801098e:	bf00      	nop
 8010990:	371c      	adds	r7, #28
 8010992:	46bd      	mov	sp, r7
 8010994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010998:	4770      	bx	lr
 801099a:	bf00      	nop
 801099c:	08016b40 	.word	0x08016b40

080109a0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b086      	sub	sp, #24
 80109a4:	af02      	add	r7, sp, #8
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80109aa:	2301      	movs	r3, #1
 80109ac:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80109ae:	2300      	movs	r3, #0
 80109b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7ff ff56 	bl	8010864 <LL_USART_IsEnabled>
 80109b8:	4603      	mov	r3, r0
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	f040 8092 	bne.w	8010ae4 <LL_USART_Init+0x144>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681a      	ldr	r2, [r3, #0]
 80109c4:	4b4a      	ldr	r3, [pc, #296]	@ (8010af0 <LL_USART_Init+0x150>)
 80109c6:	4013      	ands	r3, r2
 80109c8:	683a      	ldr	r2, [r7, #0]
 80109ca:	6891      	ldr	r1, [r2, #8]
 80109cc:	683a      	ldr	r2, [r7, #0]
 80109ce:	6912      	ldr	r2, [r2, #16]
 80109d0:	4311      	orrs	r1, r2
 80109d2:	683a      	ldr	r2, [r7, #0]
 80109d4:	6952      	ldr	r2, [r2, #20]
 80109d6:	4311      	orrs	r1, r2
 80109d8:	683a      	ldr	r2, [r7, #0]
 80109da:	69d2      	ldr	r2, [r2, #28]
 80109dc:	430a      	orrs	r2, r1
 80109de:	431a      	orrs	r2, r3
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	68db      	ldr	r3, [r3, #12]
 80109e8:	4619      	mov	r1, r3
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f7ff ff61 	bl	80108b2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	699b      	ldr	r3, [r3, #24]
 80109f4:	4619      	mov	r1, r3
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f7ff ff6e 	bl	80108d8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	4a3d      	ldr	r2, [pc, #244]	@ (8010af4 <LL_USART_Init+0x154>)
 8010a00:	4293      	cmp	r3, r2
 8010a02:	d104      	bne.n	8010a0e <LL_USART_Init+0x6e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010a04:	483c      	ldr	r0, [pc, #240]	@ (8010af8 <LL_USART_Init+0x158>)
 8010a06:	f7ff f88b 	bl	800fb20 <LL_RCC_GetUSARTClockFreq>
 8010a0a:	60b8      	str	r0, [r7, #8]
 8010a0c:	e04f      	b.n	8010aae <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART2)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	4a3a      	ldr	r2, [pc, #232]	@ (8010afc <LL_USART_Init+0x15c>)
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d104      	bne.n	8010a20 <LL_USART_Init+0x80>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010a16:	483a      	ldr	r0, [pc, #232]	@ (8010b00 <LL_USART_Init+0x160>)
 8010a18:	f7ff f882 	bl	800fb20 <LL_RCC_GetUSARTClockFreq>
 8010a1c:	60b8      	str	r0, [r7, #8]
 8010a1e:	e046      	b.n	8010aae <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART3)
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	4a38      	ldr	r2, [pc, #224]	@ (8010b04 <LL_USART_Init+0x164>)
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d104      	bne.n	8010a32 <LL_USART_Init+0x92>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010a28:	4835      	ldr	r0, [pc, #212]	@ (8010b00 <LL_USART_Init+0x160>)
 8010a2a:	f7ff f879 	bl	800fb20 <LL_RCC_GetUSARTClockFreq>
 8010a2e:	60b8      	str	r0, [r7, #8]
 8010a30:	e03d      	b.n	8010aae <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART4)
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	4a34      	ldr	r2, [pc, #208]	@ (8010b08 <LL_USART_Init+0x168>)
 8010a36:	4293      	cmp	r3, r2
 8010a38:	d104      	bne.n	8010a44 <LL_USART_Init+0xa4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010a3a:	4831      	ldr	r0, [pc, #196]	@ (8010b00 <LL_USART_Init+0x160>)
 8010a3c:	f7ff f870 	bl	800fb20 <LL_RCC_GetUSARTClockFreq>
 8010a40:	60b8      	str	r0, [r7, #8]
 8010a42:	e034      	b.n	8010aae <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART5)
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	4a31      	ldr	r2, [pc, #196]	@ (8010b0c <LL_USART_Init+0x16c>)
 8010a48:	4293      	cmp	r3, r2
 8010a4a:	d104      	bne.n	8010a56 <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010a4c:	482c      	ldr	r0, [pc, #176]	@ (8010b00 <LL_USART_Init+0x160>)
 8010a4e:	f7ff f867 	bl	800fb20 <LL_RCC_GetUSARTClockFreq>
 8010a52:	60b8      	str	r0, [r7, #8]
 8010a54:	e02b      	b.n	8010aae <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART6)
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	4a2d      	ldr	r2, [pc, #180]	@ (8010b10 <LL_USART_Init+0x170>)
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	d104      	bne.n	8010a68 <LL_USART_Init+0xc8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010a5e:	4826      	ldr	r0, [pc, #152]	@ (8010af8 <LL_USART_Init+0x158>)
 8010a60:	f7ff f85e 	bl	800fb20 <LL_RCC_GetUSARTClockFreq>
 8010a64:	60b8      	str	r0, [r7, #8]
 8010a66:	e022      	b.n	8010aae <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART7)
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8010b14 <LL_USART_Init+0x174>)
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d104      	bne.n	8010a7a <LL_USART_Init+0xda>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010a70:	4823      	ldr	r0, [pc, #140]	@ (8010b00 <LL_USART_Init+0x160>)
 8010a72:	f7ff f855 	bl	800fb20 <LL_RCC_GetUSARTClockFreq>
 8010a76:	60b8      	str	r0, [r7, #8]
 8010a78:	e019      	b.n	8010aae <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART8)
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	4a26      	ldr	r2, [pc, #152]	@ (8010b18 <LL_USART_Init+0x178>)
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d104      	bne.n	8010a8c <LL_USART_Init+0xec>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010a82:	481f      	ldr	r0, [pc, #124]	@ (8010b00 <LL_USART_Init+0x160>)
 8010a84:	f7ff f84c 	bl	800fb20 <LL_RCC_GetUSARTClockFreq>
 8010a88:	60b8      	str	r0, [r7, #8]
 8010a8a:	e010      	b.n	8010aae <LL_USART_Init+0x10e>
    }
#if defined(UART9)
    else if (USARTx == UART9)
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	4a23      	ldr	r2, [pc, #140]	@ (8010b1c <LL_USART_Init+0x17c>)
 8010a90:	4293      	cmp	r3, r2
 8010a92:	d104      	bne.n	8010a9e <LL_USART_Init+0xfe>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010a94:	4818      	ldr	r0, [pc, #96]	@ (8010af8 <LL_USART_Init+0x158>)
 8010a96:	f7ff f843 	bl	800fb20 <LL_RCC_GetUSARTClockFreq>
 8010a9a:	60b8      	str	r0, [r7, #8]
 8010a9c:	e007      	b.n	8010aae <LL_USART_Init+0x10e>
    }
#endif /* UART9 */
#if defined(USART10)
    else if (USARTx == USART10)
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8010b20 <LL_USART_Init+0x180>)
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d103      	bne.n	8010aae <LL_USART_Init+0x10e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010aa6:	4814      	ldr	r0, [pc, #80]	@ (8010af8 <LL_USART_Init+0x158>)
 8010aa8:	f7ff f83a 	bl	800fb20 <LL_RCC_GetUSARTClockFreq>
 8010aac:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d011      	beq.n	8010ad8 <LL_USART_Init+0x138>
        && (USART_InitStruct->BaudRate != 0U))
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	685b      	ldr	r3, [r3, #4]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d00d      	beq.n	8010ad8 <LL_USART_Init+0x138>
    {
      status = SUCCESS;
 8010abc:	2300      	movs	r3, #0
 8010abe:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8010acc:	9300      	str	r3, [sp, #0]
 8010ace:	460b      	mov	r3, r1
 8010ad0:	68b9      	ldr	r1, [r7, #8]
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f7ff ff14 	bl	8010900 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	4619      	mov	r1, r3
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f7ff fed3 	bl	801088a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8010ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3710      	adds	r7, #16
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}
 8010aee:	bf00      	nop
 8010af0:	efff69f3 	.word	0xefff69f3
 8010af4:	40011000 	.word	0x40011000
 8010af8:	07000308 	.word	0x07000308
 8010afc:	40004400 	.word	0x40004400
 8010b00:	07000008 	.word	0x07000008
 8010b04:	40004800 	.word	0x40004800
 8010b08:	40004c00 	.word	0x40004c00
 8010b0c:	40005000 	.word	0x40005000
 8010b10:	40011400 	.word	0x40011400
 8010b14:	40007800 	.word	0x40007800
 8010b18:	40007c00 	.word	0x40007c00
 8010b1c:	40011800 	.word	0x40011800
 8010b20:	40011c00 	.word	0x40011c00

08010b24 <__cvt>:
 8010b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b26:	ed2d 8b02 	vpush	{d8}
 8010b2a:	eeb0 8b40 	vmov.f64	d8, d0
 8010b2e:	b085      	sub	sp, #20
 8010b30:	4617      	mov	r7, r2
 8010b32:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8010b34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010b36:	ee18 2a90 	vmov	r2, s17
 8010b3a:	f025 0520 	bic.w	r5, r5, #32
 8010b3e:	2a00      	cmp	r2, #0
 8010b40:	bfb6      	itet	lt
 8010b42:	222d      	movlt	r2, #45	@ 0x2d
 8010b44:	2200      	movge	r2, #0
 8010b46:	eeb1 8b40 	vneglt.f64	d8, d0
 8010b4a:	2d46      	cmp	r5, #70	@ 0x46
 8010b4c:	460c      	mov	r4, r1
 8010b4e:	701a      	strb	r2, [r3, #0]
 8010b50:	d004      	beq.n	8010b5c <__cvt+0x38>
 8010b52:	2d45      	cmp	r5, #69	@ 0x45
 8010b54:	d100      	bne.n	8010b58 <__cvt+0x34>
 8010b56:	3401      	adds	r4, #1
 8010b58:	2102      	movs	r1, #2
 8010b5a:	e000      	b.n	8010b5e <__cvt+0x3a>
 8010b5c:	2103      	movs	r1, #3
 8010b5e:	ab03      	add	r3, sp, #12
 8010b60:	9301      	str	r3, [sp, #4]
 8010b62:	ab02      	add	r3, sp, #8
 8010b64:	9300      	str	r3, [sp, #0]
 8010b66:	4622      	mov	r2, r4
 8010b68:	4633      	mov	r3, r6
 8010b6a:	eeb0 0b48 	vmov.f64	d0, d8
 8010b6e:	f001 f9cb 	bl	8011f08 <_dtoa_r>
 8010b72:	2d47      	cmp	r5, #71	@ 0x47
 8010b74:	d114      	bne.n	8010ba0 <__cvt+0x7c>
 8010b76:	07fb      	lsls	r3, r7, #31
 8010b78:	d50a      	bpl.n	8010b90 <__cvt+0x6c>
 8010b7a:	1902      	adds	r2, r0, r4
 8010b7c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b84:	bf08      	it	eq
 8010b86:	9203      	streq	r2, [sp, #12]
 8010b88:	2130      	movs	r1, #48	@ 0x30
 8010b8a:	9b03      	ldr	r3, [sp, #12]
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	d319      	bcc.n	8010bc4 <__cvt+0xa0>
 8010b90:	9b03      	ldr	r3, [sp, #12]
 8010b92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b94:	1a1b      	subs	r3, r3, r0
 8010b96:	6013      	str	r3, [r2, #0]
 8010b98:	b005      	add	sp, #20
 8010b9a:	ecbd 8b02 	vpop	{d8}
 8010b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ba0:	2d46      	cmp	r5, #70	@ 0x46
 8010ba2:	eb00 0204 	add.w	r2, r0, r4
 8010ba6:	d1e9      	bne.n	8010b7c <__cvt+0x58>
 8010ba8:	7803      	ldrb	r3, [r0, #0]
 8010baa:	2b30      	cmp	r3, #48	@ 0x30
 8010bac:	d107      	bne.n	8010bbe <__cvt+0x9a>
 8010bae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bb6:	bf1c      	itt	ne
 8010bb8:	f1c4 0401 	rsbne	r4, r4, #1
 8010bbc:	6034      	strne	r4, [r6, #0]
 8010bbe:	6833      	ldr	r3, [r6, #0]
 8010bc0:	441a      	add	r2, r3
 8010bc2:	e7db      	b.n	8010b7c <__cvt+0x58>
 8010bc4:	1c5c      	adds	r4, r3, #1
 8010bc6:	9403      	str	r4, [sp, #12]
 8010bc8:	7019      	strb	r1, [r3, #0]
 8010bca:	e7de      	b.n	8010b8a <__cvt+0x66>

08010bcc <__exponent>:
 8010bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010bce:	2900      	cmp	r1, #0
 8010bd0:	bfba      	itte	lt
 8010bd2:	4249      	neglt	r1, r1
 8010bd4:	232d      	movlt	r3, #45	@ 0x2d
 8010bd6:	232b      	movge	r3, #43	@ 0x2b
 8010bd8:	2909      	cmp	r1, #9
 8010bda:	7002      	strb	r2, [r0, #0]
 8010bdc:	7043      	strb	r3, [r0, #1]
 8010bde:	dd29      	ble.n	8010c34 <__exponent+0x68>
 8010be0:	f10d 0307 	add.w	r3, sp, #7
 8010be4:	461d      	mov	r5, r3
 8010be6:	270a      	movs	r7, #10
 8010be8:	461a      	mov	r2, r3
 8010bea:	fbb1 f6f7 	udiv	r6, r1, r7
 8010bee:	fb07 1416 	mls	r4, r7, r6, r1
 8010bf2:	3430      	adds	r4, #48	@ 0x30
 8010bf4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010bf8:	460c      	mov	r4, r1
 8010bfa:	2c63      	cmp	r4, #99	@ 0x63
 8010bfc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010c00:	4631      	mov	r1, r6
 8010c02:	dcf1      	bgt.n	8010be8 <__exponent+0x1c>
 8010c04:	3130      	adds	r1, #48	@ 0x30
 8010c06:	1e94      	subs	r4, r2, #2
 8010c08:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010c0c:	1c41      	adds	r1, r0, #1
 8010c0e:	4623      	mov	r3, r4
 8010c10:	42ab      	cmp	r3, r5
 8010c12:	d30a      	bcc.n	8010c2a <__exponent+0x5e>
 8010c14:	f10d 0309 	add.w	r3, sp, #9
 8010c18:	1a9b      	subs	r3, r3, r2
 8010c1a:	42ac      	cmp	r4, r5
 8010c1c:	bf88      	it	hi
 8010c1e:	2300      	movhi	r3, #0
 8010c20:	3302      	adds	r3, #2
 8010c22:	4403      	add	r3, r0
 8010c24:	1a18      	subs	r0, r3, r0
 8010c26:	b003      	add	sp, #12
 8010c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c2a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010c2e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010c32:	e7ed      	b.n	8010c10 <__exponent+0x44>
 8010c34:	2330      	movs	r3, #48	@ 0x30
 8010c36:	3130      	adds	r1, #48	@ 0x30
 8010c38:	7083      	strb	r3, [r0, #2]
 8010c3a:	70c1      	strb	r1, [r0, #3]
 8010c3c:	1d03      	adds	r3, r0, #4
 8010c3e:	e7f1      	b.n	8010c24 <__exponent+0x58>

08010c40 <_printf_float>:
 8010c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c44:	b08d      	sub	sp, #52	@ 0x34
 8010c46:	460c      	mov	r4, r1
 8010c48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010c4c:	4616      	mov	r6, r2
 8010c4e:	461f      	mov	r7, r3
 8010c50:	4605      	mov	r5, r0
 8010c52:	f001 f845 	bl	8011ce0 <_localeconv_r>
 8010c56:	f8d0 b000 	ldr.w	fp, [r0]
 8010c5a:	4658      	mov	r0, fp
 8010c5c:	f7ef fbb8 	bl	80003d0 <strlen>
 8010c60:	2300      	movs	r3, #0
 8010c62:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c64:	f8d8 3000 	ldr.w	r3, [r8]
 8010c68:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010c6c:	6822      	ldr	r2, [r4, #0]
 8010c6e:	9005      	str	r0, [sp, #20]
 8010c70:	3307      	adds	r3, #7
 8010c72:	f023 0307 	bic.w	r3, r3, #7
 8010c76:	f103 0108 	add.w	r1, r3, #8
 8010c7a:	f8c8 1000 	str.w	r1, [r8]
 8010c7e:	ed93 0b00 	vldr	d0, [r3]
 8010c82:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8010ee0 <_printf_float+0x2a0>
 8010c86:	eeb0 7bc0 	vabs.f64	d7, d0
 8010c8a:	eeb4 7b46 	vcmp.f64	d7, d6
 8010c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c92:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8010c96:	dd24      	ble.n	8010ce2 <_printf_float+0xa2>
 8010c98:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ca0:	d502      	bpl.n	8010ca8 <_printf_float+0x68>
 8010ca2:	232d      	movs	r3, #45	@ 0x2d
 8010ca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ca8:	498f      	ldr	r1, [pc, #572]	@ (8010ee8 <_printf_float+0x2a8>)
 8010caa:	4b90      	ldr	r3, [pc, #576]	@ (8010eec <_printf_float+0x2ac>)
 8010cac:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8010cb0:	bf8c      	ite	hi
 8010cb2:	4688      	movhi	r8, r1
 8010cb4:	4698      	movls	r8, r3
 8010cb6:	f022 0204 	bic.w	r2, r2, #4
 8010cba:	2303      	movs	r3, #3
 8010cbc:	6123      	str	r3, [r4, #16]
 8010cbe:	6022      	str	r2, [r4, #0]
 8010cc0:	f04f 0a00 	mov.w	sl, #0
 8010cc4:	9700      	str	r7, [sp, #0]
 8010cc6:	4633      	mov	r3, r6
 8010cc8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010cca:	4621      	mov	r1, r4
 8010ccc:	4628      	mov	r0, r5
 8010cce:	f000 f9d1 	bl	8011074 <_printf_common>
 8010cd2:	3001      	adds	r0, #1
 8010cd4:	f040 8089 	bne.w	8010dea <_printf_float+0x1aa>
 8010cd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010cdc:	b00d      	add	sp, #52	@ 0x34
 8010cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce2:	eeb4 0b40 	vcmp.f64	d0, d0
 8010ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cea:	d709      	bvc.n	8010d00 <_printf_float+0xc0>
 8010cec:	ee10 3a90 	vmov	r3, s1
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	bfbc      	itt	lt
 8010cf4:	232d      	movlt	r3, #45	@ 0x2d
 8010cf6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010cfa:	497d      	ldr	r1, [pc, #500]	@ (8010ef0 <_printf_float+0x2b0>)
 8010cfc:	4b7d      	ldr	r3, [pc, #500]	@ (8010ef4 <_printf_float+0x2b4>)
 8010cfe:	e7d5      	b.n	8010cac <_printf_float+0x6c>
 8010d00:	6863      	ldr	r3, [r4, #4]
 8010d02:	1c59      	adds	r1, r3, #1
 8010d04:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8010d08:	d139      	bne.n	8010d7e <_printf_float+0x13e>
 8010d0a:	2306      	movs	r3, #6
 8010d0c:	6063      	str	r3, [r4, #4]
 8010d0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010d12:	2300      	movs	r3, #0
 8010d14:	6022      	str	r2, [r4, #0]
 8010d16:	9303      	str	r3, [sp, #12]
 8010d18:	ab0a      	add	r3, sp, #40	@ 0x28
 8010d1a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010d1e:	ab09      	add	r3, sp, #36	@ 0x24
 8010d20:	9300      	str	r3, [sp, #0]
 8010d22:	6861      	ldr	r1, [r4, #4]
 8010d24:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010d28:	4628      	mov	r0, r5
 8010d2a:	f7ff fefb 	bl	8010b24 <__cvt>
 8010d2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010d32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010d34:	4680      	mov	r8, r0
 8010d36:	d129      	bne.n	8010d8c <_printf_float+0x14c>
 8010d38:	1cc8      	adds	r0, r1, #3
 8010d3a:	db02      	blt.n	8010d42 <_printf_float+0x102>
 8010d3c:	6863      	ldr	r3, [r4, #4]
 8010d3e:	4299      	cmp	r1, r3
 8010d40:	dd41      	ble.n	8010dc6 <_printf_float+0x186>
 8010d42:	f1a9 0902 	sub.w	r9, r9, #2
 8010d46:	fa5f f989 	uxtb.w	r9, r9
 8010d4a:	3901      	subs	r1, #1
 8010d4c:	464a      	mov	r2, r9
 8010d4e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010d52:	9109      	str	r1, [sp, #36]	@ 0x24
 8010d54:	f7ff ff3a 	bl	8010bcc <__exponent>
 8010d58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010d5a:	1813      	adds	r3, r2, r0
 8010d5c:	2a01      	cmp	r2, #1
 8010d5e:	4682      	mov	sl, r0
 8010d60:	6123      	str	r3, [r4, #16]
 8010d62:	dc02      	bgt.n	8010d6a <_printf_float+0x12a>
 8010d64:	6822      	ldr	r2, [r4, #0]
 8010d66:	07d2      	lsls	r2, r2, #31
 8010d68:	d501      	bpl.n	8010d6e <_printf_float+0x12e>
 8010d6a:	3301      	adds	r3, #1
 8010d6c:	6123      	str	r3, [r4, #16]
 8010d6e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d0a6      	beq.n	8010cc4 <_printf_float+0x84>
 8010d76:	232d      	movs	r3, #45	@ 0x2d
 8010d78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010d7c:	e7a2      	b.n	8010cc4 <_printf_float+0x84>
 8010d7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010d82:	d1c4      	bne.n	8010d0e <_printf_float+0xce>
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d1c2      	bne.n	8010d0e <_printf_float+0xce>
 8010d88:	2301      	movs	r3, #1
 8010d8a:	e7bf      	b.n	8010d0c <_printf_float+0xcc>
 8010d8c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010d90:	d9db      	bls.n	8010d4a <_printf_float+0x10a>
 8010d92:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8010d96:	d118      	bne.n	8010dca <_printf_float+0x18a>
 8010d98:	2900      	cmp	r1, #0
 8010d9a:	6863      	ldr	r3, [r4, #4]
 8010d9c:	dd0b      	ble.n	8010db6 <_printf_float+0x176>
 8010d9e:	6121      	str	r1, [r4, #16]
 8010da0:	b913      	cbnz	r3, 8010da8 <_printf_float+0x168>
 8010da2:	6822      	ldr	r2, [r4, #0]
 8010da4:	07d0      	lsls	r0, r2, #31
 8010da6:	d502      	bpl.n	8010dae <_printf_float+0x16e>
 8010da8:	3301      	adds	r3, #1
 8010daa:	440b      	add	r3, r1
 8010dac:	6123      	str	r3, [r4, #16]
 8010dae:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010db0:	f04f 0a00 	mov.w	sl, #0
 8010db4:	e7db      	b.n	8010d6e <_printf_float+0x12e>
 8010db6:	b913      	cbnz	r3, 8010dbe <_printf_float+0x17e>
 8010db8:	6822      	ldr	r2, [r4, #0]
 8010dba:	07d2      	lsls	r2, r2, #31
 8010dbc:	d501      	bpl.n	8010dc2 <_printf_float+0x182>
 8010dbe:	3302      	adds	r3, #2
 8010dc0:	e7f4      	b.n	8010dac <_printf_float+0x16c>
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	e7f2      	b.n	8010dac <_printf_float+0x16c>
 8010dc6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8010dca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010dcc:	4299      	cmp	r1, r3
 8010dce:	db05      	blt.n	8010ddc <_printf_float+0x19c>
 8010dd0:	6823      	ldr	r3, [r4, #0]
 8010dd2:	6121      	str	r1, [r4, #16]
 8010dd4:	07d8      	lsls	r0, r3, #31
 8010dd6:	d5ea      	bpl.n	8010dae <_printf_float+0x16e>
 8010dd8:	1c4b      	adds	r3, r1, #1
 8010dda:	e7e7      	b.n	8010dac <_printf_float+0x16c>
 8010ddc:	2900      	cmp	r1, #0
 8010dde:	bfd4      	ite	le
 8010de0:	f1c1 0202 	rsble	r2, r1, #2
 8010de4:	2201      	movgt	r2, #1
 8010de6:	4413      	add	r3, r2
 8010de8:	e7e0      	b.n	8010dac <_printf_float+0x16c>
 8010dea:	6823      	ldr	r3, [r4, #0]
 8010dec:	055a      	lsls	r2, r3, #21
 8010dee:	d407      	bmi.n	8010e00 <_printf_float+0x1c0>
 8010df0:	6923      	ldr	r3, [r4, #16]
 8010df2:	4642      	mov	r2, r8
 8010df4:	4631      	mov	r1, r6
 8010df6:	4628      	mov	r0, r5
 8010df8:	47b8      	blx	r7
 8010dfa:	3001      	adds	r0, #1
 8010dfc:	d12a      	bne.n	8010e54 <_printf_float+0x214>
 8010dfe:	e76b      	b.n	8010cd8 <_printf_float+0x98>
 8010e00:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010e04:	f240 80e0 	bls.w	8010fc8 <_printf_float+0x388>
 8010e08:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8010e0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e14:	d133      	bne.n	8010e7e <_printf_float+0x23e>
 8010e16:	4a38      	ldr	r2, [pc, #224]	@ (8010ef8 <_printf_float+0x2b8>)
 8010e18:	2301      	movs	r3, #1
 8010e1a:	4631      	mov	r1, r6
 8010e1c:	4628      	mov	r0, r5
 8010e1e:	47b8      	blx	r7
 8010e20:	3001      	adds	r0, #1
 8010e22:	f43f af59 	beq.w	8010cd8 <_printf_float+0x98>
 8010e26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010e2a:	4543      	cmp	r3, r8
 8010e2c:	db02      	blt.n	8010e34 <_printf_float+0x1f4>
 8010e2e:	6823      	ldr	r3, [r4, #0]
 8010e30:	07d8      	lsls	r0, r3, #31
 8010e32:	d50f      	bpl.n	8010e54 <_printf_float+0x214>
 8010e34:	9b05      	ldr	r3, [sp, #20]
 8010e36:	465a      	mov	r2, fp
 8010e38:	4631      	mov	r1, r6
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	47b8      	blx	r7
 8010e3e:	3001      	adds	r0, #1
 8010e40:	f43f af4a 	beq.w	8010cd8 <_printf_float+0x98>
 8010e44:	f04f 0900 	mov.w	r9, #0
 8010e48:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8010e4c:	f104 0a1a 	add.w	sl, r4, #26
 8010e50:	45c8      	cmp	r8, r9
 8010e52:	dc09      	bgt.n	8010e68 <_printf_float+0x228>
 8010e54:	6823      	ldr	r3, [r4, #0]
 8010e56:	079b      	lsls	r3, r3, #30
 8010e58:	f100 8107 	bmi.w	801106a <_printf_float+0x42a>
 8010e5c:	68e0      	ldr	r0, [r4, #12]
 8010e5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010e60:	4298      	cmp	r0, r3
 8010e62:	bfb8      	it	lt
 8010e64:	4618      	movlt	r0, r3
 8010e66:	e739      	b.n	8010cdc <_printf_float+0x9c>
 8010e68:	2301      	movs	r3, #1
 8010e6a:	4652      	mov	r2, sl
 8010e6c:	4631      	mov	r1, r6
 8010e6e:	4628      	mov	r0, r5
 8010e70:	47b8      	blx	r7
 8010e72:	3001      	adds	r0, #1
 8010e74:	f43f af30 	beq.w	8010cd8 <_printf_float+0x98>
 8010e78:	f109 0901 	add.w	r9, r9, #1
 8010e7c:	e7e8      	b.n	8010e50 <_printf_float+0x210>
 8010e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	dc3b      	bgt.n	8010efc <_printf_float+0x2bc>
 8010e84:	4a1c      	ldr	r2, [pc, #112]	@ (8010ef8 <_printf_float+0x2b8>)
 8010e86:	2301      	movs	r3, #1
 8010e88:	4631      	mov	r1, r6
 8010e8a:	4628      	mov	r0, r5
 8010e8c:	47b8      	blx	r7
 8010e8e:	3001      	adds	r0, #1
 8010e90:	f43f af22 	beq.w	8010cd8 <_printf_float+0x98>
 8010e94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010e98:	ea59 0303 	orrs.w	r3, r9, r3
 8010e9c:	d102      	bne.n	8010ea4 <_printf_float+0x264>
 8010e9e:	6823      	ldr	r3, [r4, #0]
 8010ea0:	07d9      	lsls	r1, r3, #31
 8010ea2:	d5d7      	bpl.n	8010e54 <_printf_float+0x214>
 8010ea4:	9b05      	ldr	r3, [sp, #20]
 8010ea6:	465a      	mov	r2, fp
 8010ea8:	4631      	mov	r1, r6
 8010eaa:	4628      	mov	r0, r5
 8010eac:	47b8      	blx	r7
 8010eae:	3001      	adds	r0, #1
 8010eb0:	f43f af12 	beq.w	8010cd8 <_printf_float+0x98>
 8010eb4:	f04f 0a00 	mov.w	sl, #0
 8010eb8:	f104 0b1a 	add.w	fp, r4, #26
 8010ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ebe:	425b      	negs	r3, r3
 8010ec0:	4553      	cmp	r3, sl
 8010ec2:	dc01      	bgt.n	8010ec8 <_printf_float+0x288>
 8010ec4:	464b      	mov	r3, r9
 8010ec6:	e794      	b.n	8010df2 <_printf_float+0x1b2>
 8010ec8:	2301      	movs	r3, #1
 8010eca:	465a      	mov	r2, fp
 8010ecc:	4631      	mov	r1, r6
 8010ece:	4628      	mov	r0, r5
 8010ed0:	47b8      	blx	r7
 8010ed2:	3001      	adds	r0, #1
 8010ed4:	f43f af00 	beq.w	8010cd8 <_printf_float+0x98>
 8010ed8:	f10a 0a01 	add.w	sl, sl, #1
 8010edc:	e7ee      	b.n	8010ebc <_printf_float+0x27c>
 8010ede:	bf00      	nop
 8010ee0:	ffffffff 	.word	0xffffffff
 8010ee4:	7fefffff 	.word	0x7fefffff
 8010ee8:	08016b74 	.word	0x08016b74
 8010eec:	08016b70 	.word	0x08016b70
 8010ef0:	08016b7c 	.word	0x08016b7c
 8010ef4:	08016b78 	.word	0x08016b78
 8010ef8:	08016cb6 	.word	0x08016cb6
 8010efc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010efe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010f02:	4553      	cmp	r3, sl
 8010f04:	bfa8      	it	ge
 8010f06:	4653      	movge	r3, sl
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	4699      	mov	r9, r3
 8010f0c:	dc37      	bgt.n	8010f7e <_printf_float+0x33e>
 8010f0e:	2300      	movs	r3, #0
 8010f10:	9307      	str	r3, [sp, #28]
 8010f12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010f16:	f104 021a 	add.w	r2, r4, #26
 8010f1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010f1c:	9907      	ldr	r1, [sp, #28]
 8010f1e:	9306      	str	r3, [sp, #24]
 8010f20:	eba3 0309 	sub.w	r3, r3, r9
 8010f24:	428b      	cmp	r3, r1
 8010f26:	dc31      	bgt.n	8010f8c <_printf_float+0x34c>
 8010f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f2a:	459a      	cmp	sl, r3
 8010f2c:	dc3b      	bgt.n	8010fa6 <_printf_float+0x366>
 8010f2e:	6823      	ldr	r3, [r4, #0]
 8010f30:	07da      	lsls	r2, r3, #31
 8010f32:	d438      	bmi.n	8010fa6 <_printf_float+0x366>
 8010f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f36:	ebaa 0903 	sub.w	r9, sl, r3
 8010f3a:	9b06      	ldr	r3, [sp, #24]
 8010f3c:	ebaa 0303 	sub.w	r3, sl, r3
 8010f40:	4599      	cmp	r9, r3
 8010f42:	bfa8      	it	ge
 8010f44:	4699      	movge	r9, r3
 8010f46:	f1b9 0f00 	cmp.w	r9, #0
 8010f4a:	dc34      	bgt.n	8010fb6 <_printf_float+0x376>
 8010f4c:	f04f 0800 	mov.w	r8, #0
 8010f50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010f54:	f104 0b1a 	add.w	fp, r4, #26
 8010f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f5a:	ebaa 0303 	sub.w	r3, sl, r3
 8010f5e:	eba3 0309 	sub.w	r3, r3, r9
 8010f62:	4543      	cmp	r3, r8
 8010f64:	f77f af76 	ble.w	8010e54 <_printf_float+0x214>
 8010f68:	2301      	movs	r3, #1
 8010f6a:	465a      	mov	r2, fp
 8010f6c:	4631      	mov	r1, r6
 8010f6e:	4628      	mov	r0, r5
 8010f70:	47b8      	blx	r7
 8010f72:	3001      	adds	r0, #1
 8010f74:	f43f aeb0 	beq.w	8010cd8 <_printf_float+0x98>
 8010f78:	f108 0801 	add.w	r8, r8, #1
 8010f7c:	e7ec      	b.n	8010f58 <_printf_float+0x318>
 8010f7e:	4642      	mov	r2, r8
 8010f80:	4631      	mov	r1, r6
 8010f82:	4628      	mov	r0, r5
 8010f84:	47b8      	blx	r7
 8010f86:	3001      	adds	r0, #1
 8010f88:	d1c1      	bne.n	8010f0e <_printf_float+0x2ce>
 8010f8a:	e6a5      	b.n	8010cd8 <_printf_float+0x98>
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	4631      	mov	r1, r6
 8010f90:	4628      	mov	r0, r5
 8010f92:	9206      	str	r2, [sp, #24]
 8010f94:	47b8      	blx	r7
 8010f96:	3001      	adds	r0, #1
 8010f98:	f43f ae9e 	beq.w	8010cd8 <_printf_float+0x98>
 8010f9c:	9b07      	ldr	r3, [sp, #28]
 8010f9e:	9a06      	ldr	r2, [sp, #24]
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	9307      	str	r3, [sp, #28]
 8010fa4:	e7b9      	b.n	8010f1a <_printf_float+0x2da>
 8010fa6:	9b05      	ldr	r3, [sp, #20]
 8010fa8:	465a      	mov	r2, fp
 8010faa:	4631      	mov	r1, r6
 8010fac:	4628      	mov	r0, r5
 8010fae:	47b8      	blx	r7
 8010fb0:	3001      	adds	r0, #1
 8010fb2:	d1bf      	bne.n	8010f34 <_printf_float+0x2f4>
 8010fb4:	e690      	b.n	8010cd8 <_printf_float+0x98>
 8010fb6:	9a06      	ldr	r2, [sp, #24]
 8010fb8:	464b      	mov	r3, r9
 8010fba:	4442      	add	r2, r8
 8010fbc:	4631      	mov	r1, r6
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	47b8      	blx	r7
 8010fc2:	3001      	adds	r0, #1
 8010fc4:	d1c2      	bne.n	8010f4c <_printf_float+0x30c>
 8010fc6:	e687      	b.n	8010cd8 <_printf_float+0x98>
 8010fc8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8010fcc:	f1b9 0f01 	cmp.w	r9, #1
 8010fd0:	dc01      	bgt.n	8010fd6 <_printf_float+0x396>
 8010fd2:	07db      	lsls	r3, r3, #31
 8010fd4:	d536      	bpl.n	8011044 <_printf_float+0x404>
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	4642      	mov	r2, r8
 8010fda:	4631      	mov	r1, r6
 8010fdc:	4628      	mov	r0, r5
 8010fde:	47b8      	blx	r7
 8010fe0:	3001      	adds	r0, #1
 8010fe2:	f43f ae79 	beq.w	8010cd8 <_printf_float+0x98>
 8010fe6:	9b05      	ldr	r3, [sp, #20]
 8010fe8:	465a      	mov	r2, fp
 8010fea:	4631      	mov	r1, r6
 8010fec:	4628      	mov	r0, r5
 8010fee:	47b8      	blx	r7
 8010ff0:	3001      	adds	r0, #1
 8010ff2:	f43f ae71 	beq.w	8010cd8 <_printf_float+0x98>
 8010ff6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8010ffa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011002:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8011006:	d018      	beq.n	801103a <_printf_float+0x3fa>
 8011008:	464b      	mov	r3, r9
 801100a:	f108 0201 	add.w	r2, r8, #1
 801100e:	4631      	mov	r1, r6
 8011010:	4628      	mov	r0, r5
 8011012:	47b8      	blx	r7
 8011014:	3001      	adds	r0, #1
 8011016:	d10c      	bne.n	8011032 <_printf_float+0x3f2>
 8011018:	e65e      	b.n	8010cd8 <_printf_float+0x98>
 801101a:	2301      	movs	r3, #1
 801101c:	465a      	mov	r2, fp
 801101e:	4631      	mov	r1, r6
 8011020:	4628      	mov	r0, r5
 8011022:	47b8      	blx	r7
 8011024:	3001      	adds	r0, #1
 8011026:	f43f ae57 	beq.w	8010cd8 <_printf_float+0x98>
 801102a:	f108 0801 	add.w	r8, r8, #1
 801102e:	45c8      	cmp	r8, r9
 8011030:	dbf3      	blt.n	801101a <_printf_float+0x3da>
 8011032:	4653      	mov	r3, sl
 8011034:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011038:	e6dc      	b.n	8010df4 <_printf_float+0x1b4>
 801103a:	f04f 0800 	mov.w	r8, #0
 801103e:	f104 0b1a 	add.w	fp, r4, #26
 8011042:	e7f4      	b.n	801102e <_printf_float+0x3ee>
 8011044:	2301      	movs	r3, #1
 8011046:	4642      	mov	r2, r8
 8011048:	e7e1      	b.n	801100e <_printf_float+0x3ce>
 801104a:	2301      	movs	r3, #1
 801104c:	464a      	mov	r2, r9
 801104e:	4631      	mov	r1, r6
 8011050:	4628      	mov	r0, r5
 8011052:	47b8      	blx	r7
 8011054:	3001      	adds	r0, #1
 8011056:	f43f ae3f 	beq.w	8010cd8 <_printf_float+0x98>
 801105a:	f108 0801 	add.w	r8, r8, #1
 801105e:	68e3      	ldr	r3, [r4, #12]
 8011060:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011062:	1a5b      	subs	r3, r3, r1
 8011064:	4543      	cmp	r3, r8
 8011066:	dcf0      	bgt.n	801104a <_printf_float+0x40a>
 8011068:	e6f8      	b.n	8010e5c <_printf_float+0x21c>
 801106a:	f04f 0800 	mov.w	r8, #0
 801106e:	f104 0919 	add.w	r9, r4, #25
 8011072:	e7f4      	b.n	801105e <_printf_float+0x41e>

08011074 <_printf_common>:
 8011074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011078:	4616      	mov	r6, r2
 801107a:	4698      	mov	r8, r3
 801107c:	688a      	ldr	r2, [r1, #8]
 801107e:	690b      	ldr	r3, [r1, #16]
 8011080:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011084:	4293      	cmp	r3, r2
 8011086:	bfb8      	it	lt
 8011088:	4613      	movlt	r3, r2
 801108a:	6033      	str	r3, [r6, #0]
 801108c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011090:	4607      	mov	r7, r0
 8011092:	460c      	mov	r4, r1
 8011094:	b10a      	cbz	r2, 801109a <_printf_common+0x26>
 8011096:	3301      	adds	r3, #1
 8011098:	6033      	str	r3, [r6, #0]
 801109a:	6823      	ldr	r3, [r4, #0]
 801109c:	0699      	lsls	r1, r3, #26
 801109e:	bf42      	ittt	mi
 80110a0:	6833      	ldrmi	r3, [r6, #0]
 80110a2:	3302      	addmi	r3, #2
 80110a4:	6033      	strmi	r3, [r6, #0]
 80110a6:	6825      	ldr	r5, [r4, #0]
 80110a8:	f015 0506 	ands.w	r5, r5, #6
 80110ac:	d106      	bne.n	80110bc <_printf_common+0x48>
 80110ae:	f104 0a19 	add.w	sl, r4, #25
 80110b2:	68e3      	ldr	r3, [r4, #12]
 80110b4:	6832      	ldr	r2, [r6, #0]
 80110b6:	1a9b      	subs	r3, r3, r2
 80110b8:	42ab      	cmp	r3, r5
 80110ba:	dc26      	bgt.n	801110a <_printf_common+0x96>
 80110bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80110c0:	6822      	ldr	r2, [r4, #0]
 80110c2:	3b00      	subs	r3, #0
 80110c4:	bf18      	it	ne
 80110c6:	2301      	movne	r3, #1
 80110c8:	0692      	lsls	r2, r2, #26
 80110ca:	d42b      	bmi.n	8011124 <_printf_common+0xb0>
 80110cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80110d0:	4641      	mov	r1, r8
 80110d2:	4638      	mov	r0, r7
 80110d4:	47c8      	blx	r9
 80110d6:	3001      	adds	r0, #1
 80110d8:	d01e      	beq.n	8011118 <_printf_common+0xa4>
 80110da:	6823      	ldr	r3, [r4, #0]
 80110dc:	6922      	ldr	r2, [r4, #16]
 80110de:	f003 0306 	and.w	r3, r3, #6
 80110e2:	2b04      	cmp	r3, #4
 80110e4:	bf02      	ittt	eq
 80110e6:	68e5      	ldreq	r5, [r4, #12]
 80110e8:	6833      	ldreq	r3, [r6, #0]
 80110ea:	1aed      	subeq	r5, r5, r3
 80110ec:	68a3      	ldr	r3, [r4, #8]
 80110ee:	bf0c      	ite	eq
 80110f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110f4:	2500      	movne	r5, #0
 80110f6:	4293      	cmp	r3, r2
 80110f8:	bfc4      	itt	gt
 80110fa:	1a9b      	subgt	r3, r3, r2
 80110fc:	18ed      	addgt	r5, r5, r3
 80110fe:	2600      	movs	r6, #0
 8011100:	341a      	adds	r4, #26
 8011102:	42b5      	cmp	r5, r6
 8011104:	d11a      	bne.n	801113c <_printf_common+0xc8>
 8011106:	2000      	movs	r0, #0
 8011108:	e008      	b.n	801111c <_printf_common+0xa8>
 801110a:	2301      	movs	r3, #1
 801110c:	4652      	mov	r2, sl
 801110e:	4641      	mov	r1, r8
 8011110:	4638      	mov	r0, r7
 8011112:	47c8      	blx	r9
 8011114:	3001      	adds	r0, #1
 8011116:	d103      	bne.n	8011120 <_printf_common+0xac>
 8011118:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801111c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011120:	3501      	adds	r5, #1
 8011122:	e7c6      	b.n	80110b2 <_printf_common+0x3e>
 8011124:	18e1      	adds	r1, r4, r3
 8011126:	1c5a      	adds	r2, r3, #1
 8011128:	2030      	movs	r0, #48	@ 0x30
 801112a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801112e:	4422      	add	r2, r4
 8011130:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011134:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011138:	3302      	adds	r3, #2
 801113a:	e7c7      	b.n	80110cc <_printf_common+0x58>
 801113c:	2301      	movs	r3, #1
 801113e:	4622      	mov	r2, r4
 8011140:	4641      	mov	r1, r8
 8011142:	4638      	mov	r0, r7
 8011144:	47c8      	blx	r9
 8011146:	3001      	adds	r0, #1
 8011148:	d0e6      	beq.n	8011118 <_printf_common+0xa4>
 801114a:	3601      	adds	r6, #1
 801114c:	e7d9      	b.n	8011102 <_printf_common+0x8e>
	...

08011150 <_printf_i>:
 8011150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011154:	7e0f      	ldrb	r7, [r1, #24]
 8011156:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011158:	2f78      	cmp	r7, #120	@ 0x78
 801115a:	4691      	mov	r9, r2
 801115c:	4680      	mov	r8, r0
 801115e:	460c      	mov	r4, r1
 8011160:	469a      	mov	sl, r3
 8011162:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011166:	d807      	bhi.n	8011178 <_printf_i+0x28>
 8011168:	2f62      	cmp	r7, #98	@ 0x62
 801116a:	d80a      	bhi.n	8011182 <_printf_i+0x32>
 801116c:	2f00      	cmp	r7, #0
 801116e:	f000 80d1 	beq.w	8011314 <_printf_i+0x1c4>
 8011172:	2f58      	cmp	r7, #88	@ 0x58
 8011174:	f000 80b8 	beq.w	80112e8 <_printf_i+0x198>
 8011178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801117c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011180:	e03a      	b.n	80111f8 <_printf_i+0xa8>
 8011182:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011186:	2b15      	cmp	r3, #21
 8011188:	d8f6      	bhi.n	8011178 <_printf_i+0x28>
 801118a:	a101      	add	r1, pc, #4	@ (adr r1, 8011190 <_printf_i+0x40>)
 801118c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011190:	080111e9 	.word	0x080111e9
 8011194:	080111fd 	.word	0x080111fd
 8011198:	08011179 	.word	0x08011179
 801119c:	08011179 	.word	0x08011179
 80111a0:	08011179 	.word	0x08011179
 80111a4:	08011179 	.word	0x08011179
 80111a8:	080111fd 	.word	0x080111fd
 80111ac:	08011179 	.word	0x08011179
 80111b0:	08011179 	.word	0x08011179
 80111b4:	08011179 	.word	0x08011179
 80111b8:	08011179 	.word	0x08011179
 80111bc:	080112fb 	.word	0x080112fb
 80111c0:	08011227 	.word	0x08011227
 80111c4:	080112b5 	.word	0x080112b5
 80111c8:	08011179 	.word	0x08011179
 80111cc:	08011179 	.word	0x08011179
 80111d0:	0801131d 	.word	0x0801131d
 80111d4:	08011179 	.word	0x08011179
 80111d8:	08011227 	.word	0x08011227
 80111dc:	08011179 	.word	0x08011179
 80111e0:	08011179 	.word	0x08011179
 80111e4:	080112bd 	.word	0x080112bd
 80111e8:	6833      	ldr	r3, [r6, #0]
 80111ea:	1d1a      	adds	r2, r3, #4
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	6032      	str	r2, [r6, #0]
 80111f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80111f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80111f8:	2301      	movs	r3, #1
 80111fa:	e09c      	b.n	8011336 <_printf_i+0x1e6>
 80111fc:	6833      	ldr	r3, [r6, #0]
 80111fe:	6820      	ldr	r0, [r4, #0]
 8011200:	1d19      	adds	r1, r3, #4
 8011202:	6031      	str	r1, [r6, #0]
 8011204:	0606      	lsls	r6, r0, #24
 8011206:	d501      	bpl.n	801120c <_printf_i+0xbc>
 8011208:	681d      	ldr	r5, [r3, #0]
 801120a:	e003      	b.n	8011214 <_printf_i+0xc4>
 801120c:	0645      	lsls	r5, r0, #25
 801120e:	d5fb      	bpl.n	8011208 <_printf_i+0xb8>
 8011210:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011214:	2d00      	cmp	r5, #0
 8011216:	da03      	bge.n	8011220 <_printf_i+0xd0>
 8011218:	232d      	movs	r3, #45	@ 0x2d
 801121a:	426d      	negs	r5, r5
 801121c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011220:	4858      	ldr	r0, [pc, #352]	@ (8011384 <_printf_i+0x234>)
 8011222:	230a      	movs	r3, #10
 8011224:	e011      	b.n	801124a <_printf_i+0xfa>
 8011226:	6821      	ldr	r1, [r4, #0]
 8011228:	6833      	ldr	r3, [r6, #0]
 801122a:	0608      	lsls	r0, r1, #24
 801122c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011230:	d402      	bmi.n	8011238 <_printf_i+0xe8>
 8011232:	0649      	lsls	r1, r1, #25
 8011234:	bf48      	it	mi
 8011236:	b2ad      	uxthmi	r5, r5
 8011238:	2f6f      	cmp	r7, #111	@ 0x6f
 801123a:	4852      	ldr	r0, [pc, #328]	@ (8011384 <_printf_i+0x234>)
 801123c:	6033      	str	r3, [r6, #0]
 801123e:	bf14      	ite	ne
 8011240:	230a      	movne	r3, #10
 8011242:	2308      	moveq	r3, #8
 8011244:	2100      	movs	r1, #0
 8011246:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801124a:	6866      	ldr	r6, [r4, #4]
 801124c:	60a6      	str	r6, [r4, #8]
 801124e:	2e00      	cmp	r6, #0
 8011250:	db05      	blt.n	801125e <_printf_i+0x10e>
 8011252:	6821      	ldr	r1, [r4, #0]
 8011254:	432e      	orrs	r6, r5
 8011256:	f021 0104 	bic.w	r1, r1, #4
 801125a:	6021      	str	r1, [r4, #0]
 801125c:	d04b      	beq.n	80112f6 <_printf_i+0x1a6>
 801125e:	4616      	mov	r6, r2
 8011260:	fbb5 f1f3 	udiv	r1, r5, r3
 8011264:	fb03 5711 	mls	r7, r3, r1, r5
 8011268:	5dc7      	ldrb	r7, [r0, r7]
 801126a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801126e:	462f      	mov	r7, r5
 8011270:	42bb      	cmp	r3, r7
 8011272:	460d      	mov	r5, r1
 8011274:	d9f4      	bls.n	8011260 <_printf_i+0x110>
 8011276:	2b08      	cmp	r3, #8
 8011278:	d10b      	bne.n	8011292 <_printf_i+0x142>
 801127a:	6823      	ldr	r3, [r4, #0]
 801127c:	07df      	lsls	r7, r3, #31
 801127e:	d508      	bpl.n	8011292 <_printf_i+0x142>
 8011280:	6923      	ldr	r3, [r4, #16]
 8011282:	6861      	ldr	r1, [r4, #4]
 8011284:	4299      	cmp	r1, r3
 8011286:	bfde      	ittt	le
 8011288:	2330      	movle	r3, #48	@ 0x30
 801128a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801128e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011292:	1b92      	subs	r2, r2, r6
 8011294:	6122      	str	r2, [r4, #16]
 8011296:	f8cd a000 	str.w	sl, [sp]
 801129a:	464b      	mov	r3, r9
 801129c:	aa03      	add	r2, sp, #12
 801129e:	4621      	mov	r1, r4
 80112a0:	4640      	mov	r0, r8
 80112a2:	f7ff fee7 	bl	8011074 <_printf_common>
 80112a6:	3001      	adds	r0, #1
 80112a8:	d14a      	bne.n	8011340 <_printf_i+0x1f0>
 80112aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80112ae:	b004      	add	sp, #16
 80112b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112b4:	6823      	ldr	r3, [r4, #0]
 80112b6:	f043 0320 	orr.w	r3, r3, #32
 80112ba:	6023      	str	r3, [r4, #0]
 80112bc:	4832      	ldr	r0, [pc, #200]	@ (8011388 <_printf_i+0x238>)
 80112be:	2778      	movs	r7, #120	@ 0x78
 80112c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80112c4:	6823      	ldr	r3, [r4, #0]
 80112c6:	6831      	ldr	r1, [r6, #0]
 80112c8:	061f      	lsls	r7, r3, #24
 80112ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80112ce:	d402      	bmi.n	80112d6 <_printf_i+0x186>
 80112d0:	065f      	lsls	r7, r3, #25
 80112d2:	bf48      	it	mi
 80112d4:	b2ad      	uxthmi	r5, r5
 80112d6:	6031      	str	r1, [r6, #0]
 80112d8:	07d9      	lsls	r1, r3, #31
 80112da:	bf44      	itt	mi
 80112dc:	f043 0320 	orrmi.w	r3, r3, #32
 80112e0:	6023      	strmi	r3, [r4, #0]
 80112e2:	b11d      	cbz	r5, 80112ec <_printf_i+0x19c>
 80112e4:	2310      	movs	r3, #16
 80112e6:	e7ad      	b.n	8011244 <_printf_i+0xf4>
 80112e8:	4826      	ldr	r0, [pc, #152]	@ (8011384 <_printf_i+0x234>)
 80112ea:	e7e9      	b.n	80112c0 <_printf_i+0x170>
 80112ec:	6823      	ldr	r3, [r4, #0]
 80112ee:	f023 0320 	bic.w	r3, r3, #32
 80112f2:	6023      	str	r3, [r4, #0]
 80112f4:	e7f6      	b.n	80112e4 <_printf_i+0x194>
 80112f6:	4616      	mov	r6, r2
 80112f8:	e7bd      	b.n	8011276 <_printf_i+0x126>
 80112fa:	6833      	ldr	r3, [r6, #0]
 80112fc:	6825      	ldr	r5, [r4, #0]
 80112fe:	6961      	ldr	r1, [r4, #20]
 8011300:	1d18      	adds	r0, r3, #4
 8011302:	6030      	str	r0, [r6, #0]
 8011304:	062e      	lsls	r6, r5, #24
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	d501      	bpl.n	801130e <_printf_i+0x1be>
 801130a:	6019      	str	r1, [r3, #0]
 801130c:	e002      	b.n	8011314 <_printf_i+0x1c4>
 801130e:	0668      	lsls	r0, r5, #25
 8011310:	d5fb      	bpl.n	801130a <_printf_i+0x1ba>
 8011312:	8019      	strh	r1, [r3, #0]
 8011314:	2300      	movs	r3, #0
 8011316:	6123      	str	r3, [r4, #16]
 8011318:	4616      	mov	r6, r2
 801131a:	e7bc      	b.n	8011296 <_printf_i+0x146>
 801131c:	6833      	ldr	r3, [r6, #0]
 801131e:	1d1a      	adds	r2, r3, #4
 8011320:	6032      	str	r2, [r6, #0]
 8011322:	681e      	ldr	r6, [r3, #0]
 8011324:	6862      	ldr	r2, [r4, #4]
 8011326:	2100      	movs	r1, #0
 8011328:	4630      	mov	r0, r6
 801132a:	f7ef f801 	bl	8000330 <memchr>
 801132e:	b108      	cbz	r0, 8011334 <_printf_i+0x1e4>
 8011330:	1b80      	subs	r0, r0, r6
 8011332:	6060      	str	r0, [r4, #4]
 8011334:	6863      	ldr	r3, [r4, #4]
 8011336:	6123      	str	r3, [r4, #16]
 8011338:	2300      	movs	r3, #0
 801133a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801133e:	e7aa      	b.n	8011296 <_printf_i+0x146>
 8011340:	6923      	ldr	r3, [r4, #16]
 8011342:	4632      	mov	r2, r6
 8011344:	4649      	mov	r1, r9
 8011346:	4640      	mov	r0, r8
 8011348:	47d0      	blx	sl
 801134a:	3001      	adds	r0, #1
 801134c:	d0ad      	beq.n	80112aa <_printf_i+0x15a>
 801134e:	6823      	ldr	r3, [r4, #0]
 8011350:	079b      	lsls	r3, r3, #30
 8011352:	d413      	bmi.n	801137c <_printf_i+0x22c>
 8011354:	68e0      	ldr	r0, [r4, #12]
 8011356:	9b03      	ldr	r3, [sp, #12]
 8011358:	4298      	cmp	r0, r3
 801135a:	bfb8      	it	lt
 801135c:	4618      	movlt	r0, r3
 801135e:	e7a6      	b.n	80112ae <_printf_i+0x15e>
 8011360:	2301      	movs	r3, #1
 8011362:	4632      	mov	r2, r6
 8011364:	4649      	mov	r1, r9
 8011366:	4640      	mov	r0, r8
 8011368:	47d0      	blx	sl
 801136a:	3001      	adds	r0, #1
 801136c:	d09d      	beq.n	80112aa <_printf_i+0x15a>
 801136e:	3501      	adds	r5, #1
 8011370:	68e3      	ldr	r3, [r4, #12]
 8011372:	9903      	ldr	r1, [sp, #12]
 8011374:	1a5b      	subs	r3, r3, r1
 8011376:	42ab      	cmp	r3, r5
 8011378:	dcf2      	bgt.n	8011360 <_printf_i+0x210>
 801137a:	e7eb      	b.n	8011354 <_printf_i+0x204>
 801137c:	2500      	movs	r5, #0
 801137e:	f104 0619 	add.w	r6, r4, #25
 8011382:	e7f5      	b.n	8011370 <_printf_i+0x220>
 8011384:	08016b80 	.word	0x08016b80
 8011388:	08016b91 	.word	0x08016b91

0801138c <_scanf_float>:
 801138c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011390:	b087      	sub	sp, #28
 8011392:	4691      	mov	r9, r2
 8011394:	9303      	str	r3, [sp, #12]
 8011396:	688b      	ldr	r3, [r1, #8]
 8011398:	1e5a      	subs	r2, r3, #1
 801139a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801139e:	bf81      	itttt	hi
 80113a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80113a4:	eb03 0b05 	addhi.w	fp, r3, r5
 80113a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80113ac:	608b      	strhi	r3, [r1, #8]
 80113ae:	680b      	ldr	r3, [r1, #0]
 80113b0:	460a      	mov	r2, r1
 80113b2:	f04f 0500 	mov.w	r5, #0
 80113b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80113ba:	f842 3b1c 	str.w	r3, [r2], #28
 80113be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80113c2:	4680      	mov	r8, r0
 80113c4:	460c      	mov	r4, r1
 80113c6:	bf98      	it	ls
 80113c8:	f04f 0b00 	movls.w	fp, #0
 80113cc:	9201      	str	r2, [sp, #4]
 80113ce:	4616      	mov	r6, r2
 80113d0:	46aa      	mov	sl, r5
 80113d2:	462f      	mov	r7, r5
 80113d4:	9502      	str	r5, [sp, #8]
 80113d6:	68a2      	ldr	r2, [r4, #8]
 80113d8:	b15a      	cbz	r2, 80113f2 <_scanf_float+0x66>
 80113da:	f8d9 3000 	ldr.w	r3, [r9]
 80113de:	781b      	ldrb	r3, [r3, #0]
 80113e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80113e2:	d863      	bhi.n	80114ac <_scanf_float+0x120>
 80113e4:	2b40      	cmp	r3, #64	@ 0x40
 80113e6:	d83b      	bhi.n	8011460 <_scanf_float+0xd4>
 80113e8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80113ec:	b2c8      	uxtb	r0, r1
 80113ee:	280e      	cmp	r0, #14
 80113f0:	d939      	bls.n	8011466 <_scanf_float+0xda>
 80113f2:	b11f      	cbz	r7, 80113fc <_scanf_float+0x70>
 80113f4:	6823      	ldr	r3, [r4, #0]
 80113f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80113fa:	6023      	str	r3, [r4, #0]
 80113fc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011400:	f1ba 0f01 	cmp.w	sl, #1
 8011404:	f200 8114 	bhi.w	8011630 <_scanf_float+0x2a4>
 8011408:	9b01      	ldr	r3, [sp, #4]
 801140a:	429e      	cmp	r6, r3
 801140c:	f200 8105 	bhi.w	801161a <_scanf_float+0x28e>
 8011410:	2001      	movs	r0, #1
 8011412:	b007      	add	sp, #28
 8011414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011418:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801141c:	2a0d      	cmp	r2, #13
 801141e:	d8e8      	bhi.n	80113f2 <_scanf_float+0x66>
 8011420:	a101      	add	r1, pc, #4	@ (adr r1, 8011428 <_scanf_float+0x9c>)
 8011422:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011426:	bf00      	nop
 8011428:	08011571 	.word	0x08011571
 801142c:	080113f3 	.word	0x080113f3
 8011430:	080113f3 	.word	0x080113f3
 8011434:	080113f3 	.word	0x080113f3
 8011438:	080115cd 	.word	0x080115cd
 801143c:	080115a7 	.word	0x080115a7
 8011440:	080113f3 	.word	0x080113f3
 8011444:	080113f3 	.word	0x080113f3
 8011448:	0801157f 	.word	0x0801157f
 801144c:	080113f3 	.word	0x080113f3
 8011450:	080113f3 	.word	0x080113f3
 8011454:	080113f3 	.word	0x080113f3
 8011458:	080113f3 	.word	0x080113f3
 801145c:	0801153b 	.word	0x0801153b
 8011460:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8011464:	e7da      	b.n	801141c <_scanf_float+0x90>
 8011466:	290e      	cmp	r1, #14
 8011468:	d8c3      	bhi.n	80113f2 <_scanf_float+0x66>
 801146a:	a001      	add	r0, pc, #4	@ (adr r0, 8011470 <_scanf_float+0xe4>)
 801146c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011470:	0801152b 	.word	0x0801152b
 8011474:	080113f3 	.word	0x080113f3
 8011478:	0801152b 	.word	0x0801152b
 801147c:	080115bb 	.word	0x080115bb
 8011480:	080113f3 	.word	0x080113f3
 8011484:	080114cd 	.word	0x080114cd
 8011488:	08011511 	.word	0x08011511
 801148c:	08011511 	.word	0x08011511
 8011490:	08011511 	.word	0x08011511
 8011494:	08011511 	.word	0x08011511
 8011498:	08011511 	.word	0x08011511
 801149c:	08011511 	.word	0x08011511
 80114a0:	08011511 	.word	0x08011511
 80114a4:	08011511 	.word	0x08011511
 80114a8:	08011511 	.word	0x08011511
 80114ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80114ae:	d809      	bhi.n	80114c4 <_scanf_float+0x138>
 80114b0:	2b60      	cmp	r3, #96	@ 0x60
 80114b2:	d8b1      	bhi.n	8011418 <_scanf_float+0x8c>
 80114b4:	2b54      	cmp	r3, #84	@ 0x54
 80114b6:	d07b      	beq.n	80115b0 <_scanf_float+0x224>
 80114b8:	2b59      	cmp	r3, #89	@ 0x59
 80114ba:	d19a      	bne.n	80113f2 <_scanf_float+0x66>
 80114bc:	2d07      	cmp	r5, #7
 80114be:	d198      	bne.n	80113f2 <_scanf_float+0x66>
 80114c0:	2508      	movs	r5, #8
 80114c2:	e02f      	b.n	8011524 <_scanf_float+0x198>
 80114c4:	2b74      	cmp	r3, #116	@ 0x74
 80114c6:	d073      	beq.n	80115b0 <_scanf_float+0x224>
 80114c8:	2b79      	cmp	r3, #121	@ 0x79
 80114ca:	e7f6      	b.n	80114ba <_scanf_float+0x12e>
 80114cc:	6821      	ldr	r1, [r4, #0]
 80114ce:	05c8      	lsls	r0, r1, #23
 80114d0:	d51e      	bpl.n	8011510 <_scanf_float+0x184>
 80114d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80114d6:	6021      	str	r1, [r4, #0]
 80114d8:	3701      	adds	r7, #1
 80114da:	f1bb 0f00 	cmp.w	fp, #0
 80114de:	d003      	beq.n	80114e8 <_scanf_float+0x15c>
 80114e0:	3201      	adds	r2, #1
 80114e2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80114e6:	60a2      	str	r2, [r4, #8]
 80114e8:	68a3      	ldr	r3, [r4, #8]
 80114ea:	3b01      	subs	r3, #1
 80114ec:	60a3      	str	r3, [r4, #8]
 80114ee:	6923      	ldr	r3, [r4, #16]
 80114f0:	3301      	adds	r3, #1
 80114f2:	6123      	str	r3, [r4, #16]
 80114f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80114f8:	3b01      	subs	r3, #1
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	f8c9 3004 	str.w	r3, [r9, #4]
 8011500:	f340 8082 	ble.w	8011608 <_scanf_float+0x27c>
 8011504:	f8d9 3000 	ldr.w	r3, [r9]
 8011508:	3301      	adds	r3, #1
 801150a:	f8c9 3000 	str.w	r3, [r9]
 801150e:	e762      	b.n	80113d6 <_scanf_float+0x4a>
 8011510:	eb1a 0105 	adds.w	r1, sl, r5
 8011514:	f47f af6d 	bne.w	80113f2 <_scanf_float+0x66>
 8011518:	6822      	ldr	r2, [r4, #0]
 801151a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801151e:	6022      	str	r2, [r4, #0]
 8011520:	460d      	mov	r5, r1
 8011522:	468a      	mov	sl, r1
 8011524:	f806 3b01 	strb.w	r3, [r6], #1
 8011528:	e7de      	b.n	80114e8 <_scanf_float+0x15c>
 801152a:	6822      	ldr	r2, [r4, #0]
 801152c:	0610      	lsls	r0, r2, #24
 801152e:	f57f af60 	bpl.w	80113f2 <_scanf_float+0x66>
 8011532:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011536:	6022      	str	r2, [r4, #0]
 8011538:	e7f4      	b.n	8011524 <_scanf_float+0x198>
 801153a:	f1ba 0f00 	cmp.w	sl, #0
 801153e:	d10c      	bne.n	801155a <_scanf_float+0x1ce>
 8011540:	b977      	cbnz	r7, 8011560 <_scanf_float+0x1d4>
 8011542:	6822      	ldr	r2, [r4, #0]
 8011544:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011548:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801154c:	d108      	bne.n	8011560 <_scanf_float+0x1d4>
 801154e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011552:	6022      	str	r2, [r4, #0]
 8011554:	f04f 0a01 	mov.w	sl, #1
 8011558:	e7e4      	b.n	8011524 <_scanf_float+0x198>
 801155a:	f1ba 0f02 	cmp.w	sl, #2
 801155e:	d050      	beq.n	8011602 <_scanf_float+0x276>
 8011560:	2d01      	cmp	r5, #1
 8011562:	d002      	beq.n	801156a <_scanf_float+0x1de>
 8011564:	2d04      	cmp	r5, #4
 8011566:	f47f af44 	bne.w	80113f2 <_scanf_float+0x66>
 801156a:	3501      	adds	r5, #1
 801156c:	b2ed      	uxtb	r5, r5
 801156e:	e7d9      	b.n	8011524 <_scanf_float+0x198>
 8011570:	f1ba 0f01 	cmp.w	sl, #1
 8011574:	f47f af3d 	bne.w	80113f2 <_scanf_float+0x66>
 8011578:	f04f 0a02 	mov.w	sl, #2
 801157c:	e7d2      	b.n	8011524 <_scanf_float+0x198>
 801157e:	b975      	cbnz	r5, 801159e <_scanf_float+0x212>
 8011580:	2f00      	cmp	r7, #0
 8011582:	f47f af37 	bne.w	80113f4 <_scanf_float+0x68>
 8011586:	6822      	ldr	r2, [r4, #0]
 8011588:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801158c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011590:	f040 80fc 	bne.w	801178c <_scanf_float+0x400>
 8011594:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011598:	6022      	str	r2, [r4, #0]
 801159a:	2501      	movs	r5, #1
 801159c:	e7c2      	b.n	8011524 <_scanf_float+0x198>
 801159e:	2d03      	cmp	r5, #3
 80115a0:	d0e3      	beq.n	801156a <_scanf_float+0x1de>
 80115a2:	2d05      	cmp	r5, #5
 80115a4:	e7df      	b.n	8011566 <_scanf_float+0x1da>
 80115a6:	2d02      	cmp	r5, #2
 80115a8:	f47f af23 	bne.w	80113f2 <_scanf_float+0x66>
 80115ac:	2503      	movs	r5, #3
 80115ae:	e7b9      	b.n	8011524 <_scanf_float+0x198>
 80115b0:	2d06      	cmp	r5, #6
 80115b2:	f47f af1e 	bne.w	80113f2 <_scanf_float+0x66>
 80115b6:	2507      	movs	r5, #7
 80115b8:	e7b4      	b.n	8011524 <_scanf_float+0x198>
 80115ba:	6822      	ldr	r2, [r4, #0]
 80115bc:	0591      	lsls	r1, r2, #22
 80115be:	f57f af18 	bpl.w	80113f2 <_scanf_float+0x66>
 80115c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80115c6:	6022      	str	r2, [r4, #0]
 80115c8:	9702      	str	r7, [sp, #8]
 80115ca:	e7ab      	b.n	8011524 <_scanf_float+0x198>
 80115cc:	6822      	ldr	r2, [r4, #0]
 80115ce:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80115d2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80115d6:	d005      	beq.n	80115e4 <_scanf_float+0x258>
 80115d8:	0550      	lsls	r0, r2, #21
 80115da:	f57f af0a 	bpl.w	80113f2 <_scanf_float+0x66>
 80115de:	2f00      	cmp	r7, #0
 80115e0:	f000 80d4 	beq.w	801178c <_scanf_float+0x400>
 80115e4:	0591      	lsls	r1, r2, #22
 80115e6:	bf58      	it	pl
 80115e8:	9902      	ldrpl	r1, [sp, #8]
 80115ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80115ee:	bf58      	it	pl
 80115f0:	1a79      	subpl	r1, r7, r1
 80115f2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80115f6:	bf58      	it	pl
 80115f8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80115fc:	6022      	str	r2, [r4, #0]
 80115fe:	2700      	movs	r7, #0
 8011600:	e790      	b.n	8011524 <_scanf_float+0x198>
 8011602:	f04f 0a03 	mov.w	sl, #3
 8011606:	e78d      	b.n	8011524 <_scanf_float+0x198>
 8011608:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801160c:	4649      	mov	r1, r9
 801160e:	4640      	mov	r0, r8
 8011610:	4798      	blx	r3
 8011612:	2800      	cmp	r0, #0
 8011614:	f43f aedf 	beq.w	80113d6 <_scanf_float+0x4a>
 8011618:	e6eb      	b.n	80113f2 <_scanf_float+0x66>
 801161a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801161e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011622:	464a      	mov	r2, r9
 8011624:	4640      	mov	r0, r8
 8011626:	4798      	blx	r3
 8011628:	6923      	ldr	r3, [r4, #16]
 801162a:	3b01      	subs	r3, #1
 801162c:	6123      	str	r3, [r4, #16]
 801162e:	e6eb      	b.n	8011408 <_scanf_float+0x7c>
 8011630:	1e6b      	subs	r3, r5, #1
 8011632:	2b06      	cmp	r3, #6
 8011634:	d824      	bhi.n	8011680 <_scanf_float+0x2f4>
 8011636:	2d02      	cmp	r5, #2
 8011638:	d836      	bhi.n	80116a8 <_scanf_float+0x31c>
 801163a:	9b01      	ldr	r3, [sp, #4]
 801163c:	429e      	cmp	r6, r3
 801163e:	f67f aee7 	bls.w	8011410 <_scanf_float+0x84>
 8011642:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011646:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801164a:	464a      	mov	r2, r9
 801164c:	4640      	mov	r0, r8
 801164e:	4798      	blx	r3
 8011650:	6923      	ldr	r3, [r4, #16]
 8011652:	3b01      	subs	r3, #1
 8011654:	6123      	str	r3, [r4, #16]
 8011656:	e7f0      	b.n	801163a <_scanf_float+0x2ae>
 8011658:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801165c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011660:	464a      	mov	r2, r9
 8011662:	4640      	mov	r0, r8
 8011664:	4798      	blx	r3
 8011666:	6923      	ldr	r3, [r4, #16]
 8011668:	3b01      	subs	r3, #1
 801166a:	6123      	str	r3, [r4, #16]
 801166c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011670:	fa5f fa8a 	uxtb.w	sl, sl
 8011674:	f1ba 0f02 	cmp.w	sl, #2
 8011678:	d1ee      	bne.n	8011658 <_scanf_float+0x2cc>
 801167a:	3d03      	subs	r5, #3
 801167c:	b2ed      	uxtb	r5, r5
 801167e:	1b76      	subs	r6, r6, r5
 8011680:	6823      	ldr	r3, [r4, #0]
 8011682:	05da      	lsls	r2, r3, #23
 8011684:	d530      	bpl.n	80116e8 <_scanf_float+0x35c>
 8011686:	055b      	lsls	r3, r3, #21
 8011688:	d511      	bpl.n	80116ae <_scanf_float+0x322>
 801168a:	9b01      	ldr	r3, [sp, #4]
 801168c:	429e      	cmp	r6, r3
 801168e:	f67f aebf 	bls.w	8011410 <_scanf_float+0x84>
 8011692:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011696:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801169a:	464a      	mov	r2, r9
 801169c:	4640      	mov	r0, r8
 801169e:	4798      	blx	r3
 80116a0:	6923      	ldr	r3, [r4, #16]
 80116a2:	3b01      	subs	r3, #1
 80116a4:	6123      	str	r3, [r4, #16]
 80116a6:	e7f0      	b.n	801168a <_scanf_float+0x2fe>
 80116a8:	46aa      	mov	sl, r5
 80116aa:	46b3      	mov	fp, r6
 80116ac:	e7de      	b.n	801166c <_scanf_float+0x2e0>
 80116ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80116b2:	6923      	ldr	r3, [r4, #16]
 80116b4:	2965      	cmp	r1, #101	@ 0x65
 80116b6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80116ba:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80116be:	6123      	str	r3, [r4, #16]
 80116c0:	d00c      	beq.n	80116dc <_scanf_float+0x350>
 80116c2:	2945      	cmp	r1, #69	@ 0x45
 80116c4:	d00a      	beq.n	80116dc <_scanf_float+0x350>
 80116c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80116ca:	464a      	mov	r2, r9
 80116cc:	4640      	mov	r0, r8
 80116ce:	4798      	blx	r3
 80116d0:	6923      	ldr	r3, [r4, #16]
 80116d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80116d6:	3b01      	subs	r3, #1
 80116d8:	1eb5      	subs	r5, r6, #2
 80116da:	6123      	str	r3, [r4, #16]
 80116dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80116e0:	464a      	mov	r2, r9
 80116e2:	4640      	mov	r0, r8
 80116e4:	4798      	blx	r3
 80116e6:	462e      	mov	r6, r5
 80116e8:	6822      	ldr	r2, [r4, #0]
 80116ea:	f012 0210 	ands.w	r2, r2, #16
 80116ee:	d001      	beq.n	80116f4 <_scanf_float+0x368>
 80116f0:	2000      	movs	r0, #0
 80116f2:	e68e      	b.n	8011412 <_scanf_float+0x86>
 80116f4:	7032      	strb	r2, [r6, #0]
 80116f6:	6823      	ldr	r3, [r4, #0]
 80116f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80116fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011700:	d123      	bne.n	801174a <_scanf_float+0x3be>
 8011702:	9b02      	ldr	r3, [sp, #8]
 8011704:	429f      	cmp	r7, r3
 8011706:	d00a      	beq.n	801171e <_scanf_float+0x392>
 8011708:	1bda      	subs	r2, r3, r7
 801170a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801170e:	429e      	cmp	r6, r3
 8011710:	bf28      	it	cs
 8011712:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011716:	491e      	ldr	r1, [pc, #120]	@ (8011790 <_scanf_float+0x404>)
 8011718:	4630      	mov	r0, r6
 801171a:	f000 f977 	bl	8011a0c <siprintf>
 801171e:	9901      	ldr	r1, [sp, #4]
 8011720:	2200      	movs	r2, #0
 8011722:	4640      	mov	r0, r8
 8011724:	f002 fcaa 	bl	801407c <_strtod_r>
 8011728:	9b03      	ldr	r3, [sp, #12]
 801172a:	6821      	ldr	r1, [r4, #0]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	f011 0f02 	tst.w	r1, #2
 8011732:	f103 0204 	add.w	r2, r3, #4
 8011736:	d015      	beq.n	8011764 <_scanf_float+0x3d8>
 8011738:	9903      	ldr	r1, [sp, #12]
 801173a:	600a      	str	r2, [r1, #0]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	ed83 0b00 	vstr	d0, [r3]
 8011742:	68e3      	ldr	r3, [r4, #12]
 8011744:	3301      	adds	r3, #1
 8011746:	60e3      	str	r3, [r4, #12]
 8011748:	e7d2      	b.n	80116f0 <_scanf_float+0x364>
 801174a:	9b04      	ldr	r3, [sp, #16]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d0e6      	beq.n	801171e <_scanf_float+0x392>
 8011750:	9905      	ldr	r1, [sp, #20]
 8011752:	230a      	movs	r3, #10
 8011754:	3101      	adds	r1, #1
 8011756:	4640      	mov	r0, r8
 8011758:	f002 fd10 	bl	801417c <_strtol_r>
 801175c:	9b04      	ldr	r3, [sp, #16]
 801175e:	9e05      	ldr	r6, [sp, #20]
 8011760:	1ac2      	subs	r2, r0, r3
 8011762:	e7d2      	b.n	801170a <_scanf_float+0x37e>
 8011764:	f011 0f04 	tst.w	r1, #4
 8011768:	9903      	ldr	r1, [sp, #12]
 801176a:	600a      	str	r2, [r1, #0]
 801176c:	d1e6      	bne.n	801173c <_scanf_float+0x3b0>
 801176e:	eeb4 0b40 	vcmp.f64	d0, d0
 8011772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011776:	681d      	ldr	r5, [r3, #0]
 8011778:	d705      	bvc.n	8011786 <_scanf_float+0x3fa>
 801177a:	4806      	ldr	r0, [pc, #24]	@ (8011794 <_scanf_float+0x408>)
 801177c:	f000 fb36 	bl	8011dec <nanf>
 8011780:	ed85 0a00 	vstr	s0, [r5]
 8011784:	e7dd      	b.n	8011742 <_scanf_float+0x3b6>
 8011786:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801178a:	e7f9      	b.n	8011780 <_scanf_float+0x3f4>
 801178c:	2700      	movs	r7, #0
 801178e:	e635      	b.n	80113fc <_scanf_float+0x70>
 8011790:	08016ba2 	.word	0x08016ba2
 8011794:	08016cfe 	.word	0x08016cfe

08011798 <std>:
 8011798:	2300      	movs	r3, #0
 801179a:	b510      	push	{r4, lr}
 801179c:	4604      	mov	r4, r0
 801179e:	e9c0 3300 	strd	r3, r3, [r0]
 80117a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80117a6:	6083      	str	r3, [r0, #8]
 80117a8:	8181      	strh	r1, [r0, #12]
 80117aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80117ac:	81c2      	strh	r2, [r0, #14]
 80117ae:	6183      	str	r3, [r0, #24]
 80117b0:	4619      	mov	r1, r3
 80117b2:	2208      	movs	r2, #8
 80117b4:	305c      	adds	r0, #92	@ 0x5c
 80117b6:	f000 fa6b 	bl	8011c90 <memset>
 80117ba:	4b0d      	ldr	r3, [pc, #52]	@ (80117f0 <std+0x58>)
 80117bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80117be:	4b0d      	ldr	r3, [pc, #52]	@ (80117f4 <std+0x5c>)
 80117c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80117c2:	4b0d      	ldr	r3, [pc, #52]	@ (80117f8 <std+0x60>)
 80117c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80117c6:	4b0d      	ldr	r3, [pc, #52]	@ (80117fc <std+0x64>)
 80117c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80117ca:	4b0d      	ldr	r3, [pc, #52]	@ (8011800 <std+0x68>)
 80117cc:	6224      	str	r4, [r4, #32]
 80117ce:	429c      	cmp	r4, r3
 80117d0:	d006      	beq.n	80117e0 <std+0x48>
 80117d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80117d6:	4294      	cmp	r4, r2
 80117d8:	d002      	beq.n	80117e0 <std+0x48>
 80117da:	33d0      	adds	r3, #208	@ 0xd0
 80117dc:	429c      	cmp	r4, r3
 80117de:	d105      	bne.n	80117ec <std+0x54>
 80117e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80117e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117e8:	f000 baee 	b.w	8011dc8 <__retarget_lock_init_recursive>
 80117ec:	bd10      	pop	{r4, pc}
 80117ee:	bf00      	nop
 80117f0:	08011aa9 	.word	0x08011aa9
 80117f4:	08011acf 	.word	0x08011acf
 80117f8:	08011b07 	.word	0x08011b07
 80117fc:	08011b2b 	.word	0x08011b2b
 8011800:	24000730 	.word	0x24000730

08011804 <stdio_exit_handler>:
 8011804:	4a02      	ldr	r2, [pc, #8]	@ (8011810 <stdio_exit_handler+0xc>)
 8011806:	4903      	ldr	r1, [pc, #12]	@ (8011814 <stdio_exit_handler+0x10>)
 8011808:	4803      	ldr	r0, [pc, #12]	@ (8011818 <stdio_exit_handler+0x14>)
 801180a:	f000 b869 	b.w	80118e0 <_fwalk_sglue>
 801180e:	bf00      	nop
 8011810:	24000014 	.word	0x24000014
 8011814:	08014df9 	.word	0x08014df9
 8011818:	24000024 	.word	0x24000024

0801181c <cleanup_stdio>:
 801181c:	6841      	ldr	r1, [r0, #4]
 801181e:	4b0c      	ldr	r3, [pc, #48]	@ (8011850 <cleanup_stdio+0x34>)
 8011820:	4299      	cmp	r1, r3
 8011822:	b510      	push	{r4, lr}
 8011824:	4604      	mov	r4, r0
 8011826:	d001      	beq.n	801182c <cleanup_stdio+0x10>
 8011828:	f003 fae6 	bl	8014df8 <_fflush_r>
 801182c:	68a1      	ldr	r1, [r4, #8]
 801182e:	4b09      	ldr	r3, [pc, #36]	@ (8011854 <cleanup_stdio+0x38>)
 8011830:	4299      	cmp	r1, r3
 8011832:	d002      	beq.n	801183a <cleanup_stdio+0x1e>
 8011834:	4620      	mov	r0, r4
 8011836:	f003 fadf 	bl	8014df8 <_fflush_r>
 801183a:	68e1      	ldr	r1, [r4, #12]
 801183c:	4b06      	ldr	r3, [pc, #24]	@ (8011858 <cleanup_stdio+0x3c>)
 801183e:	4299      	cmp	r1, r3
 8011840:	d004      	beq.n	801184c <cleanup_stdio+0x30>
 8011842:	4620      	mov	r0, r4
 8011844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011848:	f003 bad6 	b.w	8014df8 <_fflush_r>
 801184c:	bd10      	pop	{r4, pc}
 801184e:	bf00      	nop
 8011850:	24000730 	.word	0x24000730
 8011854:	24000798 	.word	0x24000798
 8011858:	24000800 	.word	0x24000800

0801185c <global_stdio_init.part.0>:
 801185c:	b510      	push	{r4, lr}
 801185e:	4b0b      	ldr	r3, [pc, #44]	@ (801188c <global_stdio_init.part.0+0x30>)
 8011860:	4c0b      	ldr	r4, [pc, #44]	@ (8011890 <global_stdio_init.part.0+0x34>)
 8011862:	4a0c      	ldr	r2, [pc, #48]	@ (8011894 <global_stdio_init.part.0+0x38>)
 8011864:	601a      	str	r2, [r3, #0]
 8011866:	4620      	mov	r0, r4
 8011868:	2200      	movs	r2, #0
 801186a:	2104      	movs	r1, #4
 801186c:	f7ff ff94 	bl	8011798 <std>
 8011870:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011874:	2201      	movs	r2, #1
 8011876:	2109      	movs	r1, #9
 8011878:	f7ff ff8e 	bl	8011798 <std>
 801187c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011880:	2202      	movs	r2, #2
 8011882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011886:	2112      	movs	r1, #18
 8011888:	f7ff bf86 	b.w	8011798 <std>
 801188c:	24000868 	.word	0x24000868
 8011890:	24000730 	.word	0x24000730
 8011894:	08011805 	.word	0x08011805

08011898 <__sfp_lock_acquire>:
 8011898:	4801      	ldr	r0, [pc, #4]	@ (80118a0 <__sfp_lock_acquire+0x8>)
 801189a:	f000 ba96 	b.w	8011dca <__retarget_lock_acquire_recursive>
 801189e:	bf00      	nop
 80118a0:	24000871 	.word	0x24000871

080118a4 <__sfp_lock_release>:
 80118a4:	4801      	ldr	r0, [pc, #4]	@ (80118ac <__sfp_lock_release+0x8>)
 80118a6:	f000 ba91 	b.w	8011dcc <__retarget_lock_release_recursive>
 80118aa:	bf00      	nop
 80118ac:	24000871 	.word	0x24000871

080118b0 <__sinit>:
 80118b0:	b510      	push	{r4, lr}
 80118b2:	4604      	mov	r4, r0
 80118b4:	f7ff fff0 	bl	8011898 <__sfp_lock_acquire>
 80118b8:	6a23      	ldr	r3, [r4, #32]
 80118ba:	b11b      	cbz	r3, 80118c4 <__sinit+0x14>
 80118bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118c0:	f7ff bff0 	b.w	80118a4 <__sfp_lock_release>
 80118c4:	4b04      	ldr	r3, [pc, #16]	@ (80118d8 <__sinit+0x28>)
 80118c6:	6223      	str	r3, [r4, #32]
 80118c8:	4b04      	ldr	r3, [pc, #16]	@ (80118dc <__sinit+0x2c>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d1f5      	bne.n	80118bc <__sinit+0xc>
 80118d0:	f7ff ffc4 	bl	801185c <global_stdio_init.part.0>
 80118d4:	e7f2      	b.n	80118bc <__sinit+0xc>
 80118d6:	bf00      	nop
 80118d8:	0801181d 	.word	0x0801181d
 80118dc:	24000868 	.word	0x24000868

080118e0 <_fwalk_sglue>:
 80118e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118e4:	4607      	mov	r7, r0
 80118e6:	4688      	mov	r8, r1
 80118e8:	4614      	mov	r4, r2
 80118ea:	2600      	movs	r6, #0
 80118ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80118f0:	f1b9 0901 	subs.w	r9, r9, #1
 80118f4:	d505      	bpl.n	8011902 <_fwalk_sglue+0x22>
 80118f6:	6824      	ldr	r4, [r4, #0]
 80118f8:	2c00      	cmp	r4, #0
 80118fa:	d1f7      	bne.n	80118ec <_fwalk_sglue+0xc>
 80118fc:	4630      	mov	r0, r6
 80118fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011902:	89ab      	ldrh	r3, [r5, #12]
 8011904:	2b01      	cmp	r3, #1
 8011906:	d907      	bls.n	8011918 <_fwalk_sglue+0x38>
 8011908:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801190c:	3301      	adds	r3, #1
 801190e:	d003      	beq.n	8011918 <_fwalk_sglue+0x38>
 8011910:	4629      	mov	r1, r5
 8011912:	4638      	mov	r0, r7
 8011914:	47c0      	blx	r8
 8011916:	4306      	orrs	r6, r0
 8011918:	3568      	adds	r5, #104	@ 0x68
 801191a:	e7e9      	b.n	80118f0 <_fwalk_sglue+0x10>

0801191c <iprintf>:
 801191c:	b40f      	push	{r0, r1, r2, r3}
 801191e:	b507      	push	{r0, r1, r2, lr}
 8011920:	4906      	ldr	r1, [pc, #24]	@ (801193c <iprintf+0x20>)
 8011922:	ab04      	add	r3, sp, #16
 8011924:	6808      	ldr	r0, [r1, #0]
 8011926:	f853 2b04 	ldr.w	r2, [r3], #4
 801192a:	6881      	ldr	r1, [r0, #8]
 801192c:	9301      	str	r3, [sp, #4]
 801192e:	f002 ff79 	bl	8014824 <_vfiprintf_r>
 8011932:	b003      	add	sp, #12
 8011934:	f85d eb04 	ldr.w	lr, [sp], #4
 8011938:	b004      	add	sp, #16
 801193a:	4770      	bx	lr
 801193c:	24000020 	.word	0x24000020

08011940 <putchar>:
 8011940:	4b02      	ldr	r3, [pc, #8]	@ (801194c <putchar+0xc>)
 8011942:	4601      	mov	r1, r0
 8011944:	6818      	ldr	r0, [r3, #0]
 8011946:	6882      	ldr	r2, [r0, #8]
 8011948:	f003 bae0 	b.w	8014f0c <_putc_r>
 801194c:	24000020 	.word	0x24000020

08011950 <_puts_r>:
 8011950:	6a03      	ldr	r3, [r0, #32]
 8011952:	b570      	push	{r4, r5, r6, lr}
 8011954:	6884      	ldr	r4, [r0, #8]
 8011956:	4605      	mov	r5, r0
 8011958:	460e      	mov	r6, r1
 801195a:	b90b      	cbnz	r3, 8011960 <_puts_r+0x10>
 801195c:	f7ff ffa8 	bl	80118b0 <__sinit>
 8011960:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011962:	07db      	lsls	r3, r3, #31
 8011964:	d405      	bmi.n	8011972 <_puts_r+0x22>
 8011966:	89a3      	ldrh	r3, [r4, #12]
 8011968:	0598      	lsls	r0, r3, #22
 801196a:	d402      	bmi.n	8011972 <_puts_r+0x22>
 801196c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801196e:	f000 fa2c 	bl	8011dca <__retarget_lock_acquire_recursive>
 8011972:	89a3      	ldrh	r3, [r4, #12]
 8011974:	0719      	lsls	r1, r3, #28
 8011976:	d502      	bpl.n	801197e <_puts_r+0x2e>
 8011978:	6923      	ldr	r3, [r4, #16]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d135      	bne.n	80119ea <_puts_r+0x9a>
 801197e:	4621      	mov	r1, r4
 8011980:	4628      	mov	r0, r5
 8011982:	f000 f915 	bl	8011bb0 <__swsetup_r>
 8011986:	b380      	cbz	r0, 80119ea <_puts_r+0x9a>
 8011988:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801198c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801198e:	07da      	lsls	r2, r3, #31
 8011990:	d405      	bmi.n	801199e <_puts_r+0x4e>
 8011992:	89a3      	ldrh	r3, [r4, #12]
 8011994:	059b      	lsls	r3, r3, #22
 8011996:	d402      	bmi.n	801199e <_puts_r+0x4e>
 8011998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801199a:	f000 fa17 	bl	8011dcc <__retarget_lock_release_recursive>
 801199e:	4628      	mov	r0, r5
 80119a0:	bd70      	pop	{r4, r5, r6, pc}
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	da04      	bge.n	80119b0 <_puts_r+0x60>
 80119a6:	69a2      	ldr	r2, [r4, #24]
 80119a8:	429a      	cmp	r2, r3
 80119aa:	dc17      	bgt.n	80119dc <_puts_r+0x8c>
 80119ac:	290a      	cmp	r1, #10
 80119ae:	d015      	beq.n	80119dc <_puts_r+0x8c>
 80119b0:	6823      	ldr	r3, [r4, #0]
 80119b2:	1c5a      	adds	r2, r3, #1
 80119b4:	6022      	str	r2, [r4, #0]
 80119b6:	7019      	strb	r1, [r3, #0]
 80119b8:	68a3      	ldr	r3, [r4, #8]
 80119ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80119be:	3b01      	subs	r3, #1
 80119c0:	60a3      	str	r3, [r4, #8]
 80119c2:	2900      	cmp	r1, #0
 80119c4:	d1ed      	bne.n	80119a2 <_puts_r+0x52>
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	da11      	bge.n	80119ee <_puts_r+0x9e>
 80119ca:	4622      	mov	r2, r4
 80119cc:	210a      	movs	r1, #10
 80119ce:	4628      	mov	r0, r5
 80119d0:	f000 f8af 	bl	8011b32 <__swbuf_r>
 80119d4:	3001      	adds	r0, #1
 80119d6:	d0d7      	beq.n	8011988 <_puts_r+0x38>
 80119d8:	250a      	movs	r5, #10
 80119da:	e7d7      	b.n	801198c <_puts_r+0x3c>
 80119dc:	4622      	mov	r2, r4
 80119de:	4628      	mov	r0, r5
 80119e0:	f000 f8a7 	bl	8011b32 <__swbuf_r>
 80119e4:	3001      	adds	r0, #1
 80119e6:	d1e7      	bne.n	80119b8 <_puts_r+0x68>
 80119e8:	e7ce      	b.n	8011988 <_puts_r+0x38>
 80119ea:	3e01      	subs	r6, #1
 80119ec:	e7e4      	b.n	80119b8 <_puts_r+0x68>
 80119ee:	6823      	ldr	r3, [r4, #0]
 80119f0:	1c5a      	adds	r2, r3, #1
 80119f2:	6022      	str	r2, [r4, #0]
 80119f4:	220a      	movs	r2, #10
 80119f6:	701a      	strb	r2, [r3, #0]
 80119f8:	e7ee      	b.n	80119d8 <_puts_r+0x88>
	...

080119fc <puts>:
 80119fc:	4b02      	ldr	r3, [pc, #8]	@ (8011a08 <puts+0xc>)
 80119fe:	4601      	mov	r1, r0
 8011a00:	6818      	ldr	r0, [r3, #0]
 8011a02:	f7ff bfa5 	b.w	8011950 <_puts_r>
 8011a06:	bf00      	nop
 8011a08:	24000020 	.word	0x24000020

08011a0c <siprintf>:
 8011a0c:	b40e      	push	{r1, r2, r3}
 8011a0e:	b510      	push	{r4, lr}
 8011a10:	b09d      	sub	sp, #116	@ 0x74
 8011a12:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011a14:	9002      	str	r0, [sp, #8]
 8011a16:	9006      	str	r0, [sp, #24]
 8011a18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011a1c:	480a      	ldr	r0, [pc, #40]	@ (8011a48 <siprintf+0x3c>)
 8011a1e:	9107      	str	r1, [sp, #28]
 8011a20:	9104      	str	r1, [sp, #16]
 8011a22:	490a      	ldr	r1, [pc, #40]	@ (8011a4c <siprintf+0x40>)
 8011a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a28:	9105      	str	r1, [sp, #20]
 8011a2a:	2400      	movs	r4, #0
 8011a2c:	a902      	add	r1, sp, #8
 8011a2e:	6800      	ldr	r0, [r0, #0]
 8011a30:	9301      	str	r3, [sp, #4]
 8011a32:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011a34:	f002 fc00 	bl	8014238 <_svfiprintf_r>
 8011a38:	9b02      	ldr	r3, [sp, #8]
 8011a3a:	701c      	strb	r4, [r3, #0]
 8011a3c:	b01d      	add	sp, #116	@ 0x74
 8011a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a42:	b003      	add	sp, #12
 8011a44:	4770      	bx	lr
 8011a46:	bf00      	nop
 8011a48:	24000020 	.word	0x24000020
 8011a4c:	ffff0208 	.word	0xffff0208

08011a50 <siscanf>:
 8011a50:	b40e      	push	{r1, r2, r3}
 8011a52:	b570      	push	{r4, r5, r6, lr}
 8011a54:	b09d      	sub	sp, #116	@ 0x74
 8011a56:	ac21      	add	r4, sp, #132	@ 0x84
 8011a58:	2500      	movs	r5, #0
 8011a5a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011a5e:	f854 6b04 	ldr.w	r6, [r4], #4
 8011a62:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011a66:	951b      	str	r5, [sp, #108]	@ 0x6c
 8011a68:	9002      	str	r0, [sp, #8]
 8011a6a:	9006      	str	r0, [sp, #24]
 8011a6c:	f7ee fcb0 	bl	80003d0 <strlen>
 8011a70:	4b0b      	ldr	r3, [pc, #44]	@ (8011aa0 <siscanf+0x50>)
 8011a72:	9003      	str	r0, [sp, #12]
 8011a74:	9007      	str	r0, [sp, #28]
 8011a76:	480b      	ldr	r0, [pc, #44]	@ (8011aa4 <siscanf+0x54>)
 8011a78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011a7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011a82:	4632      	mov	r2, r6
 8011a84:	4623      	mov	r3, r4
 8011a86:	a902      	add	r1, sp, #8
 8011a88:	6800      	ldr	r0, [r0, #0]
 8011a8a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8011a8c:	9514      	str	r5, [sp, #80]	@ 0x50
 8011a8e:	9401      	str	r4, [sp, #4]
 8011a90:	f002 fd28 	bl	80144e4 <__ssvfiscanf_r>
 8011a94:	b01d      	add	sp, #116	@ 0x74
 8011a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a9a:	b003      	add	sp, #12
 8011a9c:	4770      	bx	lr
 8011a9e:	bf00      	nop
 8011aa0:	08011acb 	.word	0x08011acb
 8011aa4:	24000020 	.word	0x24000020

08011aa8 <__sread>:
 8011aa8:	b510      	push	{r4, lr}
 8011aaa:	460c      	mov	r4, r1
 8011aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ab0:	f000 f93c 	bl	8011d2c <_read_r>
 8011ab4:	2800      	cmp	r0, #0
 8011ab6:	bfab      	itete	ge
 8011ab8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011aba:	89a3      	ldrhlt	r3, [r4, #12]
 8011abc:	181b      	addge	r3, r3, r0
 8011abe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011ac2:	bfac      	ite	ge
 8011ac4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011ac6:	81a3      	strhlt	r3, [r4, #12]
 8011ac8:	bd10      	pop	{r4, pc}

08011aca <__seofread>:
 8011aca:	2000      	movs	r0, #0
 8011acc:	4770      	bx	lr

08011ace <__swrite>:
 8011ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ad2:	461f      	mov	r7, r3
 8011ad4:	898b      	ldrh	r3, [r1, #12]
 8011ad6:	05db      	lsls	r3, r3, #23
 8011ad8:	4605      	mov	r5, r0
 8011ada:	460c      	mov	r4, r1
 8011adc:	4616      	mov	r6, r2
 8011ade:	d505      	bpl.n	8011aec <__swrite+0x1e>
 8011ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ae4:	2302      	movs	r3, #2
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	f000 f90e 	bl	8011d08 <_lseek_r>
 8011aec:	89a3      	ldrh	r3, [r4, #12]
 8011aee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011af2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011af6:	81a3      	strh	r3, [r4, #12]
 8011af8:	4632      	mov	r2, r6
 8011afa:	463b      	mov	r3, r7
 8011afc:	4628      	mov	r0, r5
 8011afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b02:	f000 b925 	b.w	8011d50 <_write_r>

08011b06 <__sseek>:
 8011b06:	b510      	push	{r4, lr}
 8011b08:	460c      	mov	r4, r1
 8011b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b0e:	f000 f8fb 	bl	8011d08 <_lseek_r>
 8011b12:	1c43      	adds	r3, r0, #1
 8011b14:	89a3      	ldrh	r3, [r4, #12]
 8011b16:	bf15      	itete	ne
 8011b18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011b1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011b1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011b22:	81a3      	strheq	r3, [r4, #12]
 8011b24:	bf18      	it	ne
 8011b26:	81a3      	strhne	r3, [r4, #12]
 8011b28:	bd10      	pop	{r4, pc}

08011b2a <__sclose>:
 8011b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b2e:	f000 b8db 	b.w	8011ce8 <_close_r>

08011b32 <__swbuf_r>:
 8011b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b34:	460e      	mov	r6, r1
 8011b36:	4614      	mov	r4, r2
 8011b38:	4605      	mov	r5, r0
 8011b3a:	b118      	cbz	r0, 8011b44 <__swbuf_r+0x12>
 8011b3c:	6a03      	ldr	r3, [r0, #32]
 8011b3e:	b90b      	cbnz	r3, 8011b44 <__swbuf_r+0x12>
 8011b40:	f7ff feb6 	bl	80118b0 <__sinit>
 8011b44:	69a3      	ldr	r3, [r4, #24]
 8011b46:	60a3      	str	r3, [r4, #8]
 8011b48:	89a3      	ldrh	r3, [r4, #12]
 8011b4a:	071a      	lsls	r2, r3, #28
 8011b4c:	d501      	bpl.n	8011b52 <__swbuf_r+0x20>
 8011b4e:	6923      	ldr	r3, [r4, #16]
 8011b50:	b943      	cbnz	r3, 8011b64 <__swbuf_r+0x32>
 8011b52:	4621      	mov	r1, r4
 8011b54:	4628      	mov	r0, r5
 8011b56:	f000 f82b 	bl	8011bb0 <__swsetup_r>
 8011b5a:	b118      	cbz	r0, 8011b64 <__swbuf_r+0x32>
 8011b5c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011b60:	4638      	mov	r0, r7
 8011b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b64:	6823      	ldr	r3, [r4, #0]
 8011b66:	6922      	ldr	r2, [r4, #16]
 8011b68:	1a98      	subs	r0, r3, r2
 8011b6a:	6963      	ldr	r3, [r4, #20]
 8011b6c:	b2f6      	uxtb	r6, r6
 8011b6e:	4283      	cmp	r3, r0
 8011b70:	4637      	mov	r7, r6
 8011b72:	dc05      	bgt.n	8011b80 <__swbuf_r+0x4e>
 8011b74:	4621      	mov	r1, r4
 8011b76:	4628      	mov	r0, r5
 8011b78:	f003 f93e 	bl	8014df8 <_fflush_r>
 8011b7c:	2800      	cmp	r0, #0
 8011b7e:	d1ed      	bne.n	8011b5c <__swbuf_r+0x2a>
 8011b80:	68a3      	ldr	r3, [r4, #8]
 8011b82:	3b01      	subs	r3, #1
 8011b84:	60a3      	str	r3, [r4, #8]
 8011b86:	6823      	ldr	r3, [r4, #0]
 8011b88:	1c5a      	adds	r2, r3, #1
 8011b8a:	6022      	str	r2, [r4, #0]
 8011b8c:	701e      	strb	r6, [r3, #0]
 8011b8e:	6962      	ldr	r2, [r4, #20]
 8011b90:	1c43      	adds	r3, r0, #1
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d004      	beq.n	8011ba0 <__swbuf_r+0x6e>
 8011b96:	89a3      	ldrh	r3, [r4, #12]
 8011b98:	07db      	lsls	r3, r3, #31
 8011b9a:	d5e1      	bpl.n	8011b60 <__swbuf_r+0x2e>
 8011b9c:	2e0a      	cmp	r6, #10
 8011b9e:	d1df      	bne.n	8011b60 <__swbuf_r+0x2e>
 8011ba0:	4621      	mov	r1, r4
 8011ba2:	4628      	mov	r0, r5
 8011ba4:	f003 f928 	bl	8014df8 <_fflush_r>
 8011ba8:	2800      	cmp	r0, #0
 8011baa:	d0d9      	beq.n	8011b60 <__swbuf_r+0x2e>
 8011bac:	e7d6      	b.n	8011b5c <__swbuf_r+0x2a>
	...

08011bb0 <__swsetup_r>:
 8011bb0:	b538      	push	{r3, r4, r5, lr}
 8011bb2:	4b29      	ldr	r3, [pc, #164]	@ (8011c58 <__swsetup_r+0xa8>)
 8011bb4:	4605      	mov	r5, r0
 8011bb6:	6818      	ldr	r0, [r3, #0]
 8011bb8:	460c      	mov	r4, r1
 8011bba:	b118      	cbz	r0, 8011bc4 <__swsetup_r+0x14>
 8011bbc:	6a03      	ldr	r3, [r0, #32]
 8011bbe:	b90b      	cbnz	r3, 8011bc4 <__swsetup_r+0x14>
 8011bc0:	f7ff fe76 	bl	80118b0 <__sinit>
 8011bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bc8:	0719      	lsls	r1, r3, #28
 8011bca:	d422      	bmi.n	8011c12 <__swsetup_r+0x62>
 8011bcc:	06da      	lsls	r2, r3, #27
 8011bce:	d407      	bmi.n	8011be0 <__swsetup_r+0x30>
 8011bd0:	2209      	movs	r2, #9
 8011bd2:	602a      	str	r2, [r5, #0]
 8011bd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bd8:	81a3      	strh	r3, [r4, #12]
 8011bda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011bde:	e033      	b.n	8011c48 <__swsetup_r+0x98>
 8011be0:	0758      	lsls	r0, r3, #29
 8011be2:	d512      	bpl.n	8011c0a <__swsetup_r+0x5a>
 8011be4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011be6:	b141      	cbz	r1, 8011bfa <__swsetup_r+0x4a>
 8011be8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011bec:	4299      	cmp	r1, r3
 8011bee:	d002      	beq.n	8011bf6 <__swsetup_r+0x46>
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	f000 fee7 	bl	80129c4 <_free_r>
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8011bfa:	89a3      	ldrh	r3, [r4, #12]
 8011bfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011c00:	81a3      	strh	r3, [r4, #12]
 8011c02:	2300      	movs	r3, #0
 8011c04:	6063      	str	r3, [r4, #4]
 8011c06:	6923      	ldr	r3, [r4, #16]
 8011c08:	6023      	str	r3, [r4, #0]
 8011c0a:	89a3      	ldrh	r3, [r4, #12]
 8011c0c:	f043 0308 	orr.w	r3, r3, #8
 8011c10:	81a3      	strh	r3, [r4, #12]
 8011c12:	6923      	ldr	r3, [r4, #16]
 8011c14:	b94b      	cbnz	r3, 8011c2a <__swsetup_r+0x7a>
 8011c16:	89a3      	ldrh	r3, [r4, #12]
 8011c18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c20:	d003      	beq.n	8011c2a <__swsetup_r+0x7a>
 8011c22:	4621      	mov	r1, r4
 8011c24:	4628      	mov	r0, r5
 8011c26:	f003 f935 	bl	8014e94 <__smakebuf_r>
 8011c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c2e:	f013 0201 	ands.w	r2, r3, #1
 8011c32:	d00a      	beq.n	8011c4a <__swsetup_r+0x9a>
 8011c34:	2200      	movs	r2, #0
 8011c36:	60a2      	str	r2, [r4, #8]
 8011c38:	6962      	ldr	r2, [r4, #20]
 8011c3a:	4252      	negs	r2, r2
 8011c3c:	61a2      	str	r2, [r4, #24]
 8011c3e:	6922      	ldr	r2, [r4, #16]
 8011c40:	b942      	cbnz	r2, 8011c54 <__swsetup_r+0xa4>
 8011c42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011c46:	d1c5      	bne.n	8011bd4 <__swsetup_r+0x24>
 8011c48:	bd38      	pop	{r3, r4, r5, pc}
 8011c4a:	0799      	lsls	r1, r3, #30
 8011c4c:	bf58      	it	pl
 8011c4e:	6962      	ldrpl	r2, [r4, #20]
 8011c50:	60a2      	str	r2, [r4, #8]
 8011c52:	e7f4      	b.n	8011c3e <__swsetup_r+0x8e>
 8011c54:	2000      	movs	r0, #0
 8011c56:	e7f7      	b.n	8011c48 <__swsetup_r+0x98>
 8011c58:	24000020 	.word	0x24000020

08011c5c <memmove>:
 8011c5c:	4288      	cmp	r0, r1
 8011c5e:	b510      	push	{r4, lr}
 8011c60:	eb01 0402 	add.w	r4, r1, r2
 8011c64:	d902      	bls.n	8011c6c <memmove+0x10>
 8011c66:	4284      	cmp	r4, r0
 8011c68:	4623      	mov	r3, r4
 8011c6a:	d807      	bhi.n	8011c7c <memmove+0x20>
 8011c6c:	1e43      	subs	r3, r0, #1
 8011c6e:	42a1      	cmp	r1, r4
 8011c70:	d008      	beq.n	8011c84 <memmove+0x28>
 8011c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c7a:	e7f8      	b.n	8011c6e <memmove+0x12>
 8011c7c:	4402      	add	r2, r0
 8011c7e:	4601      	mov	r1, r0
 8011c80:	428a      	cmp	r2, r1
 8011c82:	d100      	bne.n	8011c86 <memmove+0x2a>
 8011c84:	bd10      	pop	{r4, pc}
 8011c86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c8e:	e7f7      	b.n	8011c80 <memmove+0x24>

08011c90 <memset>:
 8011c90:	4402      	add	r2, r0
 8011c92:	4603      	mov	r3, r0
 8011c94:	4293      	cmp	r3, r2
 8011c96:	d100      	bne.n	8011c9a <memset+0xa>
 8011c98:	4770      	bx	lr
 8011c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8011c9e:	e7f9      	b.n	8011c94 <memset+0x4>

08011ca0 <strchr>:
 8011ca0:	b2c9      	uxtb	r1, r1
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011caa:	b112      	cbz	r2, 8011cb2 <strchr+0x12>
 8011cac:	428a      	cmp	r2, r1
 8011cae:	d1f9      	bne.n	8011ca4 <strchr+0x4>
 8011cb0:	4770      	bx	lr
 8011cb2:	2900      	cmp	r1, #0
 8011cb4:	bf18      	it	ne
 8011cb6:	2000      	movne	r0, #0
 8011cb8:	4770      	bx	lr

08011cba <strncmp>:
 8011cba:	b510      	push	{r4, lr}
 8011cbc:	b16a      	cbz	r2, 8011cda <strncmp+0x20>
 8011cbe:	3901      	subs	r1, #1
 8011cc0:	1884      	adds	r4, r0, r2
 8011cc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cc6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d103      	bne.n	8011cd6 <strncmp+0x1c>
 8011cce:	42a0      	cmp	r0, r4
 8011cd0:	d001      	beq.n	8011cd6 <strncmp+0x1c>
 8011cd2:	2a00      	cmp	r2, #0
 8011cd4:	d1f5      	bne.n	8011cc2 <strncmp+0x8>
 8011cd6:	1ad0      	subs	r0, r2, r3
 8011cd8:	bd10      	pop	{r4, pc}
 8011cda:	4610      	mov	r0, r2
 8011cdc:	e7fc      	b.n	8011cd8 <strncmp+0x1e>
	...

08011ce0 <_localeconv_r>:
 8011ce0:	4800      	ldr	r0, [pc, #0]	@ (8011ce4 <_localeconv_r+0x4>)
 8011ce2:	4770      	bx	lr
 8011ce4:	24000160 	.word	0x24000160

08011ce8 <_close_r>:
 8011ce8:	b538      	push	{r3, r4, r5, lr}
 8011cea:	4d06      	ldr	r5, [pc, #24]	@ (8011d04 <_close_r+0x1c>)
 8011cec:	2300      	movs	r3, #0
 8011cee:	4604      	mov	r4, r0
 8011cf0:	4608      	mov	r0, r1
 8011cf2:	602b      	str	r3, [r5, #0]
 8011cf4:	f7f2 fafa 	bl	80042ec <_close>
 8011cf8:	1c43      	adds	r3, r0, #1
 8011cfa:	d102      	bne.n	8011d02 <_close_r+0x1a>
 8011cfc:	682b      	ldr	r3, [r5, #0]
 8011cfe:	b103      	cbz	r3, 8011d02 <_close_r+0x1a>
 8011d00:	6023      	str	r3, [r4, #0]
 8011d02:	bd38      	pop	{r3, r4, r5, pc}
 8011d04:	2400086c 	.word	0x2400086c

08011d08 <_lseek_r>:
 8011d08:	b538      	push	{r3, r4, r5, lr}
 8011d0a:	4d07      	ldr	r5, [pc, #28]	@ (8011d28 <_lseek_r+0x20>)
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	4608      	mov	r0, r1
 8011d10:	4611      	mov	r1, r2
 8011d12:	2200      	movs	r2, #0
 8011d14:	602a      	str	r2, [r5, #0]
 8011d16:	461a      	mov	r2, r3
 8011d18:	f7f2 fb0f 	bl	800433a <_lseek>
 8011d1c:	1c43      	adds	r3, r0, #1
 8011d1e:	d102      	bne.n	8011d26 <_lseek_r+0x1e>
 8011d20:	682b      	ldr	r3, [r5, #0]
 8011d22:	b103      	cbz	r3, 8011d26 <_lseek_r+0x1e>
 8011d24:	6023      	str	r3, [r4, #0]
 8011d26:	bd38      	pop	{r3, r4, r5, pc}
 8011d28:	2400086c 	.word	0x2400086c

08011d2c <_read_r>:
 8011d2c:	b538      	push	{r3, r4, r5, lr}
 8011d2e:	4d07      	ldr	r5, [pc, #28]	@ (8011d4c <_read_r+0x20>)
 8011d30:	4604      	mov	r4, r0
 8011d32:	4608      	mov	r0, r1
 8011d34:	4611      	mov	r1, r2
 8011d36:	2200      	movs	r2, #0
 8011d38:	602a      	str	r2, [r5, #0]
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	f7f2 fab9 	bl	80042b2 <_read>
 8011d40:	1c43      	adds	r3, r0, #1
 8011d42:	d102      	bne.n	8011d4a <_read_r+0x1e>
 8011d44:	682b      	ldr	r3, [r5, #0]
 8011d46:	b103      	cbz	r3, 8011d4a <_read_r+0x1e>
 8011d48:	6023      	str	r3, [r4, #0]
 8011d4a:	bd38      	pop	{r3, r4, r5, pc}
 8011d4c:	2400086c 	.word	0x2400086c

08011d50 <_write_r>:
 8011d50:	b538      	push	{r3, r4, r5, lr}
 8011d52:	4d07      	ldr	r5, [pc, #28]	@ (8011d70 <_write_r+0x20>)
 8011d54:	4604      	mov	r4, r0
 8011d56:	4608      	mov	r0, r1
 8011d58:	4611      	mov	r1, r2
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	602a      	str	r2, [r5, #0]
 8011d5e:	461a      	mov	r2, r3
 8011d60:	f7f0 fd8e 	bl	8002880 <_write>
 8011d64:	1c43      	adds	r3, r0, #1
 8011d66:	d102      	bne.n	8011d6e <_write_r+0x1e>
 8011d68:	682b      	ldr	r3, [r5, #0]
 8011d6a:	b103      	cbz	r3, 8011d6e <_write_r+0x1e>
 8011d6c:	6023      	str	r3, [r4, #0]
 8011d6e:	bd38      	pop	{r3, r4, r5, pc}
 8011d70:	2400086c 	.word	0x2400086c

08011d74 <__errno>:
 8011d74:	4b01      	ldr	r3, [pc, #4]	@ (8011d7c <__errno+0x8>)
 8011d76:	6818      	ldr	r0, [r3, #0]
 8011d78:	4770      	bx	lr
 8011d7a:	bf00      	nop
 8011d7c:	24000020 	.word	0x24000020

08011d80 <__libc_init_array>:
 8011d80:	b570      	push	{r4, r5, r6, lr}
 8011d82:	4d0d      	ldr	r5, [pc, #52]	@ (8011db8 <__libc_init_array+0x38>)
 8011d84:	4c0d      	ldr	r4, [pc, #52]	@ (8011dbc <__libc_init_array+0x3c>)
 8011d86:	1b64      	subs	r4, r4, r5
 8011d88:	10a4      	asrs	r4, r4, #2
 8011d8a:	2600      	movs	r6, #0
 8011d8c:	42a6      	cmp	r6, r4
 8011d8e:	d109      	bne.n	8011da4 <__libc_init_array+0x24>
 8011d90:	4d0b      	ldr	r5, [pc, #44]	@ (8011dc0 <__libc_init_array+0x40>)
 8011d92:	4c0c      	ldr	r4, [pc, #48]	@ (8011dc4 <__libc_init_array+0x44>)
 8011d94:	f003 fe2c 	bl	80159f0 <_init>
 8011d98:	1b64      	subs	r4, r4, r5
 8011d9a:	10a4      	asrs	r4, r4, #2
 8011d9c:	2600      	movs	r6, #0
 8011d9e:	42a6      	cmp	r6, r4
 8011da0:	d105      	bne.n	8011dae <__libc_init_array+0x2e>
 8011da2:	bd70      	pop	{r4, r5, r6, pc}
 8011da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011da8:	4798      	blx	r3
 8011daa:	3601      	adds	r6, #1
 8011dac:	e7ee      	b.n	8011d8c <__libc_init_array+0xc>
 8011dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8011db2:	4798      	blx	r3
 8011db4:	3601      	adds	r6, #1
 8011db6:	e7f2      	b.n	8011d9e <__libc_init_array+0x1e>
 8011db8:	08016fbc 	.word	0x08016fbc
 8011dbc:	08016fbc 	.word	0x08016fbc
 8011dc0:	08016fbc 	.word	0x08016fbc
 8011dc4:	08016fc0 	.word	0x08016fc0

08011dc8 <__retarget_lock_init_recursive>:
 8011dc8:	4770      	bx	lr

08011dca <__retarget_lock_acquire_recursive>:
 8011dca:	4770      	bx	lr

08011dcc <__retarget_lock_release_recursive>:
 8011dcc:	4770      	bx	lr

08011dce <memcpy>:
 8011dce:	440a      	add	r2, r1
 8011dd0:	4291      	cmp	r1, r2
 8011dd2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011dd6:	d100      	bne.n	8011dda <memcpy+0xc>
 8011dd8:	4770      	bx	lr
 8011dda:	b510      	push	{r4, lr}
 8011ddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011de0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011de4:	4291      	cmp	r1, r2
 8011de6:	d1f9      	bne.n	8011ddc <memcpy+0xe>
 8011de8:	bd10      	pop	{r4, pc}
	...

08011dec <nanf>:
 8011dec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011df4 <nanf+0x8>
 8011df0:	4770      	bx	lr
 8011df2:	bf00      	nop
 8011df4:	7fc00000 	.word	0x7fc00000

08011df8 <quorem>:
 8011df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dfc:	6903      	ldr	r3, [r0, #16]
 8011dfe:	690c      	ldr	r4, [r1, #16]
 8011e00:	42a3      	cmp	r3, r4
 8011e02:	4607      	mov	r7, r0
 8011e04:	db7e      	blt.n	8011f04 <quorem+0x10c>
 8011e06:	3c01      	subs	r4, #1
 8011e08:	f101 0814 	add.w	r8, r1, #20
 8011e0c:	00a3      	lsls	r3, r4, #2
 8011e0e:	f100 0514 	add.w	r5, r0, #20
 8011e12:	9300      	str	r3, [sp, #0]
 8011e14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e18:	9301      	str	r3, [sp, #4]
 8011e1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011e1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e22:	3301      	adds	r3, #1
 8011e24:	429a      	cmp	r2, r3
 8011e26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011e2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e2e:	d32e      	bcc.n	8011e8e <quorem+0x96>
 8011e30:	f04f 0a00 	mov.w	sl, #0
 8011e34:	46c4      	mov	ip, r8
 8011e36:	46ae      	mov	lr, r5
 8011e38:	46d3      	mov	fp, sl
 8011e3a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011e3e:	b298      	uxth	r0, r3
 8011e40:	fb06 a000 	mla	r0, r6, r0, sl
 8011e44:	0c02      	lsrs	r2, r0, #16
 8011e46:	0c1b      	lsrs	r3, r3, #16
 8011e48:	fb06 2303 	mla	r3, r6, r3, r2
 8011e4c:	f8de 2000 	ldr.w	r2, [lr]
 8011e50:	b280      	uxth	r0, r0
 8011e52:	b292      	uxth	r2, r2
 8011e54:	1a12      	subs	r2, r2, r0
 8011e56:	445a      	add	r2, fp
 8011e58:	f8de 0000 	ldr.w	r0, [lr]
 8011e5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011e66:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011e6a:	b292      	uxth	r2, r2
 8011e6c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011e70:	45e1      	cmp	r9, ip
 8011e72:	f84e 2b04 	str.w	r2, [lr], #4
 8011e76:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011e7a:	d2de      	bcs.n	8011e3a <quorem+0x42>
 8011e7c:	9b00      	ldr	r3, [sp, #0]
 8011e7e:	58eb      	ldr	r3, [r5, r3]
 8011e80:	b92b      	cbnz	r3, 8011e8e <quorem+0x96>
 8011e82:	9b01      	ldr	r3, [sp, #4]
 8011e84:	3b04      	subs	r3, #4
 8011e86:	429d      	cmp	r5, r3
 8011e88:	461a      	mov	r2, r3
 8011e8a:	d32f      	bcc.n	8011eec <quorem+0xf4>
 8011e8c:	613c      	str	r4, [r7, #16]
 8011e8e:	4638      	mov	r0, r7
 8011e90:	f001 f954 	bl	801313c <__mcmp>
 8011e94:	2800      	cmp	r0, #0
 8011e96:	db25      	blt.n	8011ee4 <quorem+0xec>
 8011e98:	4629      	mov	r1, r5
 8011e9a:	2000      	movs	r0, #0
 8011e9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011ea0:	f8d1 c000 	ldr.w	ip, [r1]
 8011ea4:	fa1f fe82 	uxth.w	lr, r2
 8011ea8:	fa1f f38c 	uxth.w	r3, ip
 8011eac:	eba3 030e 	sub.w	r3, r3, lr
 8011eb0:	4403      	add	r3, r0
 8011eb2:	0c12      	lsrs	r2, r2, #16
 8011eb4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011eb8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011ebc:	b29b      	uxth	r3, r3
 8011ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ec2:	45c1      	cmp	r9, r8
 8011ec4:	f841 3b04 	str.w	r3, [r1], #4
 8011ec8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011ecc:	d2e6      	bcs.n	8011e9c <quorem+0xa4>
 8011ece:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011ed2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ed6:	b922      	cbnz	r2, 8011ee2 <quorem+0xea>
 8011ed8:	3b04      	subs	r3, #4
 8011eda:	429d      	cmp	r5, r3
 8011edc:	461a      	mov	r2, r3
 8011ede:	d30b      	bcc.n	8011ef8 <quorem+0x100>
 8011ee0:	613c      	str	r4, [r7, #16]
 8011ee2:	3601      	adds	r6, #1
 8011ee4:	4630      	mov	r0, r6
 8011ee6:	b003      	add	sp, #12
 8011ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eec:	6812      	ldr	r2, [r2, #0]
 8011eee:	3b04      	subs	r3, #4
 8011ef0:	2a00      	cmp	r2, #0
 8011ef2:	d1cb      	bne.n	8011e8c <quorem+0x94>
 8011ef4:	3c01      	subs	r4, #1
 8011ef6:	e7c6      	b.n	8011e86 <quorem+0x8e>
 8011ef8:	6812      	ldr	r2, [r2, #0]
 8011efa:	3b04      	subs	r3, #4
 8011efc:	2a00      	cmp	r2, #0
 8011efe:	d1ef      	bne.n	8011ee0 <quorem+0xe8>
 8011f00:	3c01      	subs	r4, #1
 8011f02:	e7ea      	b.n	8011eda <quorem+0xe2>
 8011f04:	2000      	movs	r0, #0
 8011f06:	e7ee      	b.n	8011ee6 <quorem+0xee>

08011f08 <_dtoa_r>:
 8011f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f0c:	ed2d 8b02 	vpush	{d8}
 8011f10:	69c7      	ldr	r7, [r0, #28]
 8011f12:	b091      	sub	sp, #68	@ 0x44
 8011f14:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011f18:	ec55 4b10 	vmov	r4, r5, d0
 8011f1c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011f1e:	9107      	str	r1, [sp, #28]
 8011f20:	4681      	mov	r9, r0
 8011f22:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f24:	930d      	str	r3, [sp, #52]	@ 0x34
 8011f26:	b97f      	cbnz	r7, 8011f48 <_dtoa_r+0x40>
 8011f28:	2010      	movs	r0, #16
 8011f2a:	f000 fd95 	bl	8012a58 <malloc>
 8011f2e:	4602      	mov	r2, r0
 8011f30:	f8c9 001c 	str.w	r0, [r9, #28]
 8011f34:	b920      	cbnz	r0, 8011f40 <_dtoa_r+0x38>
 8011f36:	4ba0      	ldr	r3, [pc, #640]	@ (80121b8 <_dtoa_r+0x2b0>)
 8011f38:	21ef      	movs	r1, #239	@ 0xef
 8011f3a:	48a0      	ldr	r0, [pc, #640]	@ (80121bc <_dtoa_r+0x2b4>)
 8011f3c:	f003 f8c8 	bl	80150d0 <__assert_func>
 8011f40:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011f44:	6007      	str	r7, [r0, #0]
 8011f46:	60c7      	str	r7, [r0, #12]
 8011f48:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011f4c:	6819      	ldr	r1, [r3, #0]
 8011f4e:	b159      	cbz	r1, 8011f68 <_dtoa_r+0x60>
 8011f50:	685a      	ldr	r2, [r3, #4]
 8011f52:	604a      	str	r2, [r1, #4]
 8011f54:	2301      	movs	r3, #1
 8011f56:	4093      	lsls	r3, r2
 8011f58:	608b      	str	r3, [r1, #8]
 8011f5a:	4648      	mov	r0, r9
 8011f5c:	f000 fe72 	bl	8012c44 <_Bfree>
 8011f60:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011f64:	2200      	movs	r2, #0
 8011f66:	601a      	str	r2, [r3, #0]
 8011f68:	1e2b      	subs	r3, r5, #0
 8011f6a:	bfbb      	ittet	lt
 8011f6c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011f70:	9303      	strlt	r3, [sp, #12]
 8011f72:	2300      	movge	r3, #0
 8011f74:	2201      	movlt	r2, #1
 8011f76:	bfac      	ite	ge
 8011f78:	6033      	strge	r3, [r6, #0]
 8011f7a:	6032      	strlt	r2, [r6, #0]
 8011f7c:	4b90      	ldr	r3, [pc, #576]	@ (80121c0 <_dtoa_r+0x2b8>)
 8011f7e:	9e03      	ldr	r6, [sp, #12]
 8011f80:	43b3      	bics	r3, r6
 8011f82:	d110      	bne.n	8011fa6 <_dtoa_r+0x9e>
 8011f84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011f86:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011f8a:	6013      	str	r3, [r2, #0]
 8011f8c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011f90:	4323      	orrs	r3, r4
 8011f92:	f000 84e6 	beq.w	8012962 <_dtoa_r+0xa5a>
 8011f96:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011f98:	4f8a      	ldr	r7, [pc, #552]	@ (80121c4 <_dtoa_r+0x2bc>)
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	f000 84e8 	beq.w	8012970 <_dtoa_r+0xa68>
 8011fa0:	1cfb      	adds	r3, r7, #3
 8011fa2:	f000 bce3 	b.w	801296c <_dtoa_r+0xa64>
 8011fa6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011faa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fb2:	d10a      	bne.n	8011fca <_dtoa_r+0xc2>
 8011fb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	6013      	str	r3, [r2, #0]
 8011fba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011fbc:	b113      	cbz	r3, 8011fc4 <_dtoa_r+0xbc>
 8011fbe:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011fc0:	4b81      	ldr	r3, [pc, #516]	@ (80121c8 <_dtoa_r+0x2c0>)
 8011fc2:	6013      	str	r3, [r2, #0]
 8011fc4:	4f81      	ldr	r7, [pc, #516]	@ (80121cc <_dtoa_r+0x2c4>)
 8011fc6:	f000 bcd3 	b.w	8012970 <_dtoa_r+0xa68>
 8011fca:	aa0e      	add	r2, sp, #56	@ 0x38
 8011fcc:	a90f      	add	r1, sp, #60	@ 0x3c
 8011fce:	4648      	mov	r0, r9
 8011fd0:	eeb0 0b48 	vmov.f64	d0, d8
 8011fd4:	f001 f9d2 	bl	801337c <__d2b>
 8011fd8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8011fdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011fde:	9001      	str	r0, [sp, #4]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d045      	beq.n	8012070 <_dtoa_r+0x168>
 8011fe4:	eeb0 7b48 	vmov.f64	d7, d8
 8011fe8:	ee18 1a90 	vmov	r1, s17
 8011fec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011ff0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8011ff4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8011ff8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8011ffc:	2500      	movs	r5, #0
 8011ffe:	ee07 1a90 	vmov	s15, r1
 8012002:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8012006:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80121a0 <_dtoa_r+0x298>
 801200a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801200e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80121a8 <_dtoa_r+0x2a0>
 8012012:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012016:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80121b0 <_dtoa_r+0x2a8>
 801201a:	ee07 3a90 	vmov	s15, r3
 801201e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012022:	eeb0 7b46 	vmov.f64	d7, d6
 8012026:	eea4 7b05 	vfma.f64	d7, d4, d5
 801202a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801202e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012036:	ee16 8a90 	vmov	r8, s13
 801203a:	d508      	bpl.n	801204e <_dtoa_r+0x146>
 801203c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012040:	eeb4 6b47 	vcmp.f64	d6, d7
 8012044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012048:	bf18      	it	ne
 801204a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 801204e:	f1b8 0f16 	cmp.w	r8, #22
 8012052:	d82b      	bhi.n	80120ac <_dtoa_r+0x1a4>
 8012054:	495e      	ldr	r1, [pc, #376]	@ (80121d0 <_dtoa_r+0x2c8>)
 8012056:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801205a:	ed91 7b00 	vldr	d7, [r1]
 801205e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012066:	d501      	bpl.n	801206c <_dtoa_r+0x164>
 8012068:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801206c:	2100      	movs	r1, #0
 801206e:	e01e      	b.n	80120ae <_dtoa_r+0x1a6>
 8012070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012072:	4413      	add	r3, r2
 8012074:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012078:	2920      	cmp	r1, #32
 801207a:	bfc1      	itttt	gt
 801207c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012080:	408e      	lslgt	r6, r1
 8012082:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8012086:	fa24 f101 	lsrgt.w	r1, r4, r1
 801208a:	bfd6      	itet	le
 801208c:	f1c1 0120 	rsble	r1, r1, #32
 8012090:	4331      	orrgt	r1, r6
 8012092:	fa04 f101 	lslle.w	r1, r4, r1
 8012096:	ee07 1a90 	vmov	s15, r1
 801209a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801209e:	3b01      	subs	r3, #1
 80120a0:	ee17 1a90 	vmov	r1, s15
 80120a4:	2501      	movs	r5, #1
 80120a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80120aa:	e7a8      	b.n	8011ffe <_dtoa_r+0xf6>
 80120ac:	2101      	movs	r1, #1
 80120ae:	1ad2      	subs	r2, r2, r3
 80120b0:	1e53      	subs	r3, r2, #1
 80120b2:	9306      	str	r3, [sp, #24]
 80120b4:	bf45      	ittet	mi
 80120b6:	f1c2 0301 	rsbmi	r3, r2, #1
 80120ba:	9304      	strmi	r3, [sp, #16]
 80120bc:	2300      	movpl	r3, #0
 80120be:	2300      	movmi	r3, #0
 80120c0:	bf4c      	ite	mi
 80120c2:	9306      	strmi	r3, [sp, #24]
 80120c4:	9304      	strpl	r3, [sp, #16]
 80120c6:	f1b8 0f00 	cmp.w	r8, #0
 80120ca:	910c      	str	r1, [sp, #48]	@ 0x30
 80120cc:	db18      	blt.n	8012100 <_dtoa_r+0x1f8>
 80120ce:	9b06      	ldr	r3, [sp, #24]
 80120d0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80120d4:	4443      	add	r3, r8
 80120d6:	9306      	str	r3, [sp, #24]
 80120d8:	2300      	movs	r3, #0
 80120da:	9a07      	ldr	r2, [sp, #28]
 80120dc:	2a09      	cmp	r2, #9
 80120de:	d845      	bhi.n	801216c <_dtoa_r+0x264>
 80120e0:	2a05      	cmp	r2, #5
 80120e2:	bfc4      	itt	gt
 80120e4:	3a04      	subgt	r2, #4
 80120e6:	9207      	strgt	r2, [sp, #28]
 80120e8:	9a07      	ldr	r2, [sp, #28]
 80120ea:	f1a2 0202 	sub.w	r2, r2, #2
 80120ee:	bfcc      	ite	gt
 80120f0:	2400      	movgt	r4, #0
 80120f2:	2401      	movle	r4, #1
 80120f4:	2a03      	cmp	r2, #3
 80120f6:	d844      	bhi.n	8012182 <_dtoa_r+0x27a>
 80120f8:	e8df f002 	tbb	[pc, r2]
 80120fc:	0b173634 	.word	0x0b173634
 8012100:	9b04      	ldr	r3, [sp, #16]
 8012102:	2200      	movs	r2, #0
 8012104:	eba3 0308 	sub.w	r3, r3, r8
 8012108:	9304      	str	r3, [sp, #16]
 801210a:	920a      	str	r2, [sp, #40]	@ 0x28
 801210c:	f1c8 0300 	rsb	r3, r8, #0
 8012110:	e7e3      	b.n	80120da <_dtoa_r+0x1d2>
 8012112:	2201      	movs	r2, #1
 8012114:	9208      	str	r2, [sp, #32]
 8012116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012118:	eb08 0b02 	add.w	fp, r8, r2
 801211c:	f10b 0a01 	add.w	sl, fp, #1
 8012120:	4652      	mov	r2, sl
 8012122:	2a01      	cmp	r2, #1
 8012124:	bfb8      	it	lt
 8012126:	2201      	movlt	r2, #1
 8012128:	e006      	b.n	8012138 <_dtoa_r+0x230>
 801212a:	2201      	movs	r2, #1
 801212c:	9208      	str	r2, [sp, #32]
 801212e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012130:	2a00      	cmp	r2, #0
 8012132:	dd29      	ble.n	8012188 <_dtoa_r+0x280>
 8012134:	4693      	mov	fp, r2
 8012136:	4692      	mov	sl, r2
 8012138:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801213c:	2100      	movs	r1, #0
 801213e:	2004      	movs	r0, #4
 8012140:	f100 0614 	add.w	r6, r0, #20
 8012144:	4296      	cmp	r6, r2
 8012146:	d926      	bls.n	8012196 <_dtoa_r+0x28e>
 8012148:	6079      	str	r1, [r7, #4]
 801214a:	4648      	mov	r0, r9
 801214c:	9305      	str	r3, [sp, #20]
 801214e:	f000 fd39 	bl	8012bc4 <_Balloc>
 8012152:	9b05      	ldr	r3, [sp, #20]
 8012154:	4607      	mov	r7, r0
 8012156:	2800      	cmp	r0, #0
 8012158:	d13e      	bne.n	80121d8 <_dtoa_r+0x2d0>
 801215a:	4b1e      	ldr	r3, [pc, #120]	@ (80121d4 <_dtoa_r+0x2cc>)
 801215c:	4602      	mov	r2, r0
 801215e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012162:	e6ea      	b.n	8011f3a <_dtoa_r+0x32>
 8012164:	2200      	movs	r2, #0
 8012166:	e7e1      	b.n	801212c <_dtoa_r+0x224>
 8012168:	2200      	movs	r2, #0
 801216a:	e7d3      	b.n	8012114 <_dtoa_r+0x20c>
 801216c:	2401      	movs	r4, #1
 801216e:	2200      	movs	r2, #0
 8012170:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012174:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8012178:	2100      	movs	r1, #0
 801217a:	46da      	mov	sl, fp
 801217c:	2212      	movs	r2, #18
 801217e:	9109      	str	r1, [sp, #36]	@ 0x24
 8012180:	e7da      	b.n	8012138 <_dtoa_r+0x230>
 8012182:	2201      	movs	r2, #1
 8012184:	9208      	str	r2, [sp, #32]
 8012186:	e7f5      	b.n	8012174 <_dtoa_r+0x26c>
 8012188:	f04f 0b01 	mov.w	fp, #1
 801218c:	46da      	mov	sl, fp
 801218e:	465a      	mov	r2, fp
 8012190:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012194:	e7d0      	b.n	8012138 <_dtoa_r+0x230>
 8012196:	3101      	adds	r1, #1
 8012198:	0040      	lsls	r0, r0, #1
 801219a:	e7d1      	b.n	8012140 <_dtoa_r+0x238>
 801219c:	f3af 8000 	nop.w
 80121a0:	636f4361 	.word	0x636f4361
 80121a4:	3fd287a7 	.word	0x3fd287a7
 80121a8:	8b60c8b3 	.word	0x8b60c8b3
 80121ac:	3fc68a28 	.word	0x3fc68a28
 80121b0:	509f79fb 	.word	0x509f79fb
 80121b4:	3fd34413 	.word	0x3fd34413
 80121b8:	08016bb4 	.word	0x08016bb4
 80121bc:	08016bcb 	.word	0x08016bcb
 80121c0:	7ff00000 	.word	0x7ff00000
 80121c4:	08016bb0 	.word	0x08016bb0
 80121c8:	08016cb7 	.word	0x08016cb7
 80121cc:	08016cb6 	.word	0x08016cb6
 80121d0:	08016d98 	.word	0x08016d98
 80121d4:	08016c23 	.word	0x08016c23
 80121d8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80121dc:	f1ba 0f0e 	cmp.w	sl, #14
 80121e0:	6010      	str	r0, [r2, #0]
 80121e2:	d86e      	bhi.n	80122c2 <_dtoa_r+0x3ba>
 80121e4:	2c00      	cmp	r4, #0
 80121e6:	d06c      	beq.n	80122c2 <_dtoa_r+0x3ba>
 80121e8:	f1b8 0f00 	cmp.w	r8, #0
 80121ec:	f340 80b4 	ble.w	8012358 <_dtoa_r+0x450>
 80121f0:	4ac8      	ldr	r2, [pc, #800]	@ (8012514 <_dtoa_r+0x60c>)
 80121f2:	f008 010f 	and.w	r1, r8, #15
 80121f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80121fa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80121fe:	ed92 7b00 	vldr	d7, [r2]
 8012202:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012206:	f000 809b 	beq.w	8012340 <_dtoa_r+0x438>
 801220a:	4ac3      	ldr	r2, [pc, #780]	@ (8012518 <_dtoa_r+0x610>)
 801220c:	ed92 6b08 	vldr	d6, [r2, #32]
 8012210:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012214:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012218:	f001 010f 	and.w	r1, r1, #15
 801221c:	2203      	movs	r2, #3
 801221e:	48be      	ldr	r0, [pc, #760]	@ (8012518 <_dtoa_r+0x610>)
 8012220:	2900      	cmp	r1, #0
 8012222:	f040 808f 	bne.w	8012344 <_dtoa_r+0x43c>
 8012226:	ed9d 6b02 	vldr	d6, [sp, #8]
 801222a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801222e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012232:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012234:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012238:	2900      	cmp	r1, #0
 801223a:	f000 80b3 	beq.w	80123a4 <_dtoa_r+0x49c>
 801223e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012242:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801224a:	f140 80ab 	bpl.w	80123a4 <_dtoa_r+0x49c>
 801224e:	f1ba 0f00 	cmp.w	sl, #0
 8012252:	f000 80a7 	beq.w	80123a4 <_dtoa_r+0x49c>
 8012256:	f1bb 0f00 	cmp.w	fp, #0
 801225a:	dd30      	ble.n	80122be <_dtoa_r+0x3b6>
 801225c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012260:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012264:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012268:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 801226c:	9105      	str	r1, [sp, #20]
 801226e:	3201      	adds	r2, #1
 8012270:	465c      	mov	r4, fp
 8012272:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012276:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801227a:	ee07 2a90 	vmov	s15, r2
 801227e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012282:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012286:	ee15 2a90 	vmov	r2, s11
 801228a:	ec51 0b15 	vmov	r0, r1, d5
 801228e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8012292:	2c00      	cmp	r4, #0
 8012294:	f040 808a 	bne.w	80123ac <_dtoa_r+0x4a4>
 8012298:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801229c:	ee36 6b47 	vsub.f64	d6, d6, d7
 80122a0:	ec41 0b17 	vmov	d7, r0, r1
 80122a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80122a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ac:	f300 826a 	bgt.w	8012784 <_dtoa_r+0x87c>
 80122b0:	eeb1 7b47 	vneg.f64	d7, d7
 80122b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80122b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122bc:	d423      	bmi.n	8012306 <_dtoa_r+0x3fe>
 80122be:	ed8d 8b02 	vstr	d8, [sp, #8]
 80122c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80122c4:	2a00      	cmp	r2, #0
 80122c6:	f2c0 8129 	blt.w	801251c <_dtoa_r+0x614>
 80122ca:	f1b8 0f0e 	cmp.w	r8, #14
 80122ce:	f300 8125 	bgt.w	801251c <_dtoa_r+0x614>
 80122d2:	4b90      	ldr	r3, [pc, #576]	@ (8012514 <_dtoa_r+0x60c>)
 80122d4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80122d8:	ed93 6b00 	vldr	d6, [r3]
 80122dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122de:	2b00      	cmp	r3, #0
 80122e0:	f280 80c8 	bge.w	8012474 <_dtoa_r+0x56c>
 80122e4:	f1ba 0f00 	cmp.w	sl, #0
 80122e8:	f300 80c4 	bgt.w	8012474 <_dtoa_r+0x56c>
 80122ec:	d10b      	bne.n	8012306 <_dtoa_r+0x3fe>
 80122ee:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80122f2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80122f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80122fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80122fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012302:	f2c0 823c 	blt.w	801277e <_dtoa_r+0x876>
 8012306:	2400      	movs	r4, #0
 8012308:	4625      	mov	r5, r4
 801230a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801230c:	43db      	mvns	r3, r3
 801230e:	9305      	str	r3, [sp, #20]
 8012310:	463e      	mov	r6, r7
 8012312:	f04f 0800 	mov.w	r8, #0
 8012316:	4621      	mov	r1, r4
 8012318:	4648      	mov	r0, r9
 801231a:	f000 fc93 	bl	8012c44 <_Bfree>
 801231e:	2d00      	cmp	r5, #0
 8012320:	f000 80a2 	beq.w	8012468 <_dtoa_r+0x560>
 8012324:	f1b8 0f00 	cmp.w	r8, #0
 8012328:	d005      	beq.n	8012336 <_dtoa_r+0x42e>
 801232a:	45a8      	cmp	r8, r5
 801232c:	d003      	beq.n	8012336 <_dtoa_r+0x42e>
 801232e:	4641      	mov	r1, r8
 8012330:	4648      	mov	r0, r9
 8012332:	f000 fc87 	bl	8012c44 <_Bfree>
 8012336:	4629      	mov	r1, r5
 8012338:	4648      	mov	r0, r9
 801233a:	f000 fc83 	bl	8012c44 <_Bfree>
 801233e:	e093      	b.n	8012468 <_dtoa_r+0x560>
 8012340:	2202      	movs	r2, #2
 8012342:	e76c      	b.n	801221e <_dtoa_r+0x316>
 8012344:	07cc      	lsls	r4, r1, #31
 8012346:	d504      	bpl.n	8012352 <_dtoa_r+0x44a>
 8012348:	ed90 6b00 	vldr	d6, [r0]
 801234c:	3201      	adds	r2, #1
 801234e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012352:	1049      	asrs	r1, r1, #1
 8012354:	3008      	adds	r0, #8
 8012356:	e763      	b.n	8012220 <_dtoa_r+0x318>
 8012358:	d022      	beq.n	80123a0 <_dtoa_r+0x498>
 801235a:	f1c8 0100 	rsb	r1, r8, #0
 801235e:	4a6d      	ldr	r2, [pc, #436]	@ (8012514 <_dtoa_r+0x60c>)
 8012360:	f001 000f 	and.w	r0, r1, #15
 8012364:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012368:	ed92 7b00 	vldr	d7, [r2]
 801236c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012370:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012374:	4868      	ldr	r0, [pc, #416]	@ (8012518 <_dtoa_r+0x610>)
 8012376:	1109      	asrs	r1, r1, #4
 8012378:	2400      	movs	r4, #0
 801237a:	2202      	movs	r2, #2
 801237c:	b929      	cbnz	r1, 801238a <_dtoa_r+0x482>
 801237e:	2c00      	cmp	r4, #0
 8012380:	f43f af57 	beq.w	8012232 <_dtoa_r+0x32a>
 8012384:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012388:	e753      	b.n	8012232 <_dtoa_r+0x32a>
 801238a:	07ce      	lsls	r6, r1, #31
 801238c:	d505      	bpl.n	801239a <_dtoa_r+0x492>
 801238e:	ed90 6b00 	vldr	d6, [r0]
 8012392:	3201      	adds	r2, #1
 8012394:	2401      	movs	r4, #1
 8012396:	ee27 7b06 	vmul.f64	d7, d7, d6
 801239a:	1049      	asrs	r1, r1, #1
 801239c:	3008      	adds	r0, #8
 801239e:	e7ed      	b.n	801237c <_dtoa_r+0x474>
 80123a0:	2202      	movs	r2, #2
 80123a2:	e746      	b.n	8012232 <_dtoa_r+0x32a>
 80123a4:	f8cd 8014 	str.w	r8, [sp, #20]
 80123a8:	4654      	mov	r4, sl
 80123aa:	e762      	b.n	8012272 <_dtoa_r+0x36a>
 80123ac:	4a59      	ldr	r2, [pc, #356]	@ (8012514 <_dtoa_r+0x60c>)
 80123ae:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80123b2:	ed12 4b02 	vldr	d4, [r2, #-8]
 80123b6:	9a08      	ldr	r2, [sp, #32]
 80123b8:	ec41 0b17 	vmov	d7, r0, r1
 80123bc:	443c      	add	r4, r7
 80123be:	b34a      	cbz	r2, 8012414 <_dtoa_r+0x50c>
 80123c0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80123c4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80123c8:	463e      	mov	r6, r7
 80123ca:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80123ce:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80123d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80123d6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80123da:	ee14 2a90 	vmov	r2, s9
 80123de:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80123e2:	3230      	adds	r2, #48	@ 0x30
 80123e4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80123e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80123ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123f0:	f806 2b01 	strb.w	r2, [r6], #1
 80123f4:	d438      	bmi.n	8012468 <_dtoa_r+0x560>
 80123f6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80123fa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80123fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012402:	d46e      	bmi.n	80124e2 <_dtoa_r+0x5da>
 8012404:	42a6      	cmp	r6, r4
 8012406:	f43f af5a 	beq.w	80122be <_dtoa_r+0x3b6>
 801240a:	ee27 7b03 	vmul.f64	d7, d7, d3
 801240e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012412:	e7e0      	b.n	80123d6 <_dtoa_r+0x4ce>
 8012414:	4621      	mov	r1, r4
 8012416:	463e      	mov	r6, r7
 8012418:	ee27 7b04 	vmul.f64	d7, d7, d4
 801241c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012420:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012424:	ee14 2a90 	vmov	r2, s9
 8012428:	3230      	adds	r2, #48	@ 0x30
 801242a:	f806 2b01 	strb.w	r2, [r6], #1
 801242e:	42a6      	cmp	r6, r4
 8012430:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012434:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012438:	d119      	bne.n	801246e <_dtoa_r+0x566>
 801243a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801243e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012442:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801244a:	dc4a      	bgt.n	80124e2 <_dtoa_r+0x5da>
 801244c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012450:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012458:	f57f af31 	bpl.w	80122be <_dtoa_r+0x3b6>
 801245c:	460e      	mov	r6, r1
 801245e:	3901      	subs	r1, #1
 8012460:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012464:	2b30      	cmp	r3, #48	@ 0x30
 8012466:	d0f9      	beq.n	801245c <_dtoa_r+0x554>
 8012468:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801246c:	e027      	b.n	80124be <_dtoa_r+0x5b6>
 801246e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012472:	e7d5      	b.n	8012420 <_dtoa_r+0x518>
 8012474:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012478:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801247c:	463e      	mov	r6, r7
 801247e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012482:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012486:	ee15 3a10 	vmov	r3, s10
 801248a:	3330      	adds	r3, #48	@ 0x30
 801248c:	f806 3b01 	strb.w	r3, [r6], #1
 8012490:	1bf3      	subs	r3, r6, r7
 8012492:	459a      	cmp	sl, r3
 8012494:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012498:	eea3 7b46 	vfms.f64	d7, d3, d6
 801249c:	d132      	bne.n	8012504 <_dtoa_r+0x5fc>
 801249e:	ee37 7b07 	vadd.f64	d7, d7, d7
 80124a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80124a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124aa:	dc18      	bgt.n	80124de <_dtoa_r+0x5d6>
 80124ac:	eeb4 7b46 	vcmp.f64	d7, d6
 80124b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124b4:	d103      	bne.n	80124be <_dtoa_r+0x5b6>
 80124b6:	ee15 3a10 	vmov	r3, s10
 80124ba:	07db      	lsls	r3, r3, #31
 80124bc:	d40f      	bmi.n	80124de <_dtoa_r+0x5d6>
 80124be:	9901      	ldr	r1, [sp, #4]
 80124c0:	4648      	mov	r0, r9
 80124c2:	f000 fbbf 	bl	8012c44 <_Bfree>
 80124c6:	2300      	movs	r3, #0
 80124c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80124ca:	7033      	strb	r3, [r6, #0]
 80124cc:	f108 0301 	add.w	r3, r8, #1
 80124d0:	6013      	str	r3, [r2, #0]
 80124d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	f000 824b 	beq.w	8012970 <_dtoa_r+0xa68>
 80124da:	601e      	str	r6, [r3, #0]
 80124dc:	e248      	b.n	8012970 <_dtoa_r+0xa68>
 80124de:	f8cd 8014 	str.w	r8, [sp, #20]
 80124e2:	4633      	mov	r3, r6
 80124e4:	461e      	mov	r6, r3
 80124e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80124ea:	2a39      	cmp	r2, #57	@ 0x39
 80124ec:	d106      	bne.n	80124fc <_dtoa_r+0x5f4>
 80124ee:	429f      	cmp	r7, r3
 80124f0:	d1f8      	bne.n	80124e4 <_dtoa_r+0x5dc>
 80124f2:	9a05      	ldr	r2, [sp, #20]
 80124f4:	3201      	adds	r2, #1
 80124f6:	9205      	str	r2, [sp, #20]
 80124f8:	2230      	movs	r2, #48	@ 0x30
 80124fa:	703a      	strb	r2, [r7, #0]
 80124fc:	781a      	ldrb	r2, [r3, #0]
 80124fe:	3201      	adds	r2, #1
 8012500:	701a      	strb	r2, [r3, #0]
 8012502:	e7b1      	b.n	8012468 <_dtoa_r+0x560>
 8012504:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012508:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801250c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012510:	d1b5      	bne.n	801247e <_dtoa_r+0x576>
 8012512:	e7d4      	b.n	80124be <_dtoa_r+0x5b6>
 8012514:	08016d98 	.word	0x08016d98
 8012518:	08016d70 	.word	0x08016d70
 801251c:	9908      	ldr	r1, [sp, #32]
 801251e:	2900      	cmp	r1, #0
 8012520:	f000 80e9 	beq.w	80126f6 <_dtoa_r+0x7ee>
 8012524:	9907      	ldr	r1, [sp, #28]
 8012526:	2901      	cmp	r1, #1
 8012528:	f300 80cb 	bgt.w	80126c2 <_dtoa_r+0x7ba>
 801252c:	2d00      	cmp	r5, #0
 801252e:	f000 80c4 	beq.w	80126ba <_dtoa_r+0x7b2>
 8012532:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012536:	9e04      	ldr	r6, [sp, #16]
 8012538:	461c      	mov	r4, r3
 801253a:	9305      	str	r3, [sp, #20]
 801253c:	9b04      	ldr	r3, [sp, #16]
 801253e:	4413      	add	r3, r2
 8012540:	9304      	str	r3, [sp, #16]
 8012542:	9b06      	ldr	r3, [sp, #24]
 8012544:	2101      	movs	r1, #1
 8012546:	4413      	add	r3, r2
 8012548:	4648      	mov	r0, r9
 801254a:	9306      	str	r3, [sp, #24]
 801254c:	f000 fc78 	bl	8012e40 <__i2b>
 8012550:	9b05      	ldr	r3, [sp, #20]
 8012552:	4605      	mov	r5, r0
 8012554:	b166      	cbz	r6, 8012570 <_dtoa_r+0x668>
 8012556:	9a06      	ldr	r2, [sp, #24]
 8012558:	2a00      	cmp	r2, #0
 801255a:	dd09      	ble.n	8012570 <_dtoa_r+0x668>
 801255c:	42b2      	cmp	r2, r6
 801255e:	9904      	ldr	r1, [sp, #16]
 8012560:	bfa8      	it	ge
 8012562:	4632      	movge	r2, r6
 8012564:	1a89      	subs	r1, r1, r2
 8012566:	9104      	str	r1, [sp, #16]
 8012568:	9906      	ldr	r1, [sp, #24]
 801256a:	1ab6      	subs	r6, r6, r2
 801256c:	1a8a      	subs	r2, r1, r2
 801256e:	9206      	str	r2, [sp, #24]
 8012570:	b30b      	cbz	r3, 80125b6 <_dtoa_r+0x6ae>
 8012572:	9a08      	ldr	r2, [sp, #32]
 8012574:	2a00      	cmp	r2, #0
 8012576:	f000 80c5 	beq.w	8012704 <_dtoa_r+0x7fc>
 801257a:	2c00      	cmp	r4, #0
 801257c:	f000 80bf 	beq.w	80126fe <_dtoa_r+0x7f6>
 8012580:	4629      	mov	r1, r5
 8012582:	4622      	mov	r2, r4
 8012584:	4648      	mov	r0, r9
 8012586:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012588:	f000 fd12 	bl	8012fb0 <__pow5mult>
 801258c:	9a01      	ldr	r2, [sp, #4]
 801258e:	4601      	mov	r1, r0
 8012590:	4605      	mov	r5, r0
 8012592:	4648      	mov	r0, r9
 8012594:	f000 fc6a 	bl	8012e6c <__multiply>
 8012598:	9901      	ldr	r1, [sp, #4]
 801259a:	9005      	str	r0, [sp, #20]
 801259c:	4648      	mov	r0, r9
 801259e:	f000 fb51 	bl	8012c44 <_Bfree>
 80125a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80125a4:	1b1b      	subs	r3, r3, r4
 80125a6:	f000 80b0 	beq.w	801270a <_dtoa_r+0x802>
 80125aa:	9905      	ldr	r1, [sp, #20]
 80125ac:	461a      	mov	r2, r3
 80125ae:	4648      	mov	r0, r9
 80125b0:	f000 fcfe 	bl	8012fb0 <__pow5mult>
 80125b4:	9001      	str	r0, [sp, #4]
 80125b6:	2101      	movs	r1, #1
 80125b8:	4648      	mov	r0, r9
 80125ba:	f000 fc41 	bl	8012e40 <__i2b>
 80125be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125c0:	4604      	mov	r4, r0
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	f000 81da 	beq.w	801297c <_dtoa_r+0xa74>
 80125c8:	461a      	mov	r2, r3
 80125ca:	4601      	mov	r1, r0
 80125cc:	4648      	mov	r0, r9
 80125ce:	f000 fcef 	bl	8012fb0 <__pow5mult>
 80125d2:	9b07      	ldr	r3, [sp, #28]
 80125d4:	2b01      	cmp	r3, #1
 80125d6:	4604      	mov	r4, r0
 80125d8:	f300 80a0 	bgt.w	801271c <_dtoa_r+0x814>
 80125dc:	9b02      	ldr	r3, [sp, #8]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	f040 8096 	bne.w	8012710 <_dtoa_r+0x808>
 80125e4:	9b03      	ldr	r3, [sp, #12]
 80125e6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80125ea:	2a00      	cmp	r2, #0
 80125ec:	f040 8092 	bne.w	8012714 <_dtoa_r+0x80c>
 80125f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80125f4:	0d12      	lsrs	r2, r2, #20
 80125f6:	0512      	lsls	r2, r2, #20
 80125f8:	2a00      	cmp	r2, #0
 80125fa:	f000 808d 	beq.w	8012718 <_dtoa_r+0x810>
 80125fe:	9b04      	ldr	r3, [sp, #16]
 8012600:	3301      	adds	r3, #1
 8012602:	9304      	str	r3, [sp, #16]
 8012604:	9b06      	ldr	r3, [sp, #24]
 8012606:	3301      	adds	r3, #1
 8012608:	9306      	str	r3, [sp, #24]
 801260a:	2301      	movs	r3, #1
 801260c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801260e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012610:	2b00      	cmp	r3, #0
 8012612:	f000 81b9 	beq.w	8012988 <_dtoa_r+0xa80>
 8012616:	6922      	ldr	r2, [r4, #16]
 8012618:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801261c:	6910      	ldr	r0, [r2, #16]
 801261e:	f000 fbc3 	bl	8012da8 <__hi0bits>
 8012622:	f1c0 0020 	rsb	r0, r0, #32
 8012626:	9b06      	ldr	r3, [sp, #24]
 8012628:	4418      	add	r0, r3
 801262a:	f010 001f 	ands.w	r0, r0, #31
 801262e:	f000 8081 	beq.w	8012734 <_dtoa_r+0x82c>
 8012632:	f1c0 0220 	rsb	r2, r0, #32
 8012636:	2a04      	cmp	r2, #4
 8012638:	dd73      	ble.n	8012722 <_dtoa_r+0x81a>
 801263a:	9b04      	ldr	r3, [sp, #16]
 801263c:	f1c0 001c 	rsb	r0, r0, #28
 8012640:	4403      	add	r3, r0
 8012642:	9304      	str	r3, [sp, #16]
 8012644:	9b06      	ldr	r3, [sp, #24]
 8012646:	4406      	add	r6, r0
 8012648:	4403      	add	r3, r0
 801264a:	9306      	str	r3, [sp, #24]
 801264c:	9b04      	ldr	r3, [sp, #16]
 801264e:	2b00      	cmp	r3, #0
 8012650:	dd05      	ble.n	801265e <_dtoa_r+0x756>
 8012652:	9901      	ldr	r1, [sp, #4]
 8012654:	461a      	mov	r2, r3
 8012656:	4648      	mov	r0, r9
 8012658:	f000 fd04 	bl	8013064 <__lshift>
 801265c:	9001      	str	r0, [sp, #4]
 801265e:	9b06      	ldr	r3, [sp, #24]
 8012660:	2b00      	cmp	r3, #0
 8012662:	dd05      	ble.n	8012670 <_dtoa_r+0x768>
 8012664:	4621      	mov	r1, r4
 8012666:	461a      	mov	r2, r3
 8012668:	4648      	mov	r0, r9
 801266a:	f000 fcfb 	bl	8013064 <__lshift>
 801266e:	4604      	mov	r4, r0
 8012670:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012672:	2b00      	cmp	r3, #0
 8012674:	d060      	beq.n	8012738 <_dtoa_r+0x830>
 8012676:	9801      	ldr	r0, [sp, #4]
 8012678:	4621      	mov	r1, r4
 801267a:	f000 fd5f 	bl	801313c <__mcmp>
 801267e:	2800      	cmp	r0, #0
 8012680:	da5a      	bge.n	8012738 <_dtoa_r+0x830>
 8012682:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8012686:	9305      	str	r3, [sp, #20]
 8012688:	9901      	ldr	r1, [sp, #4]
 801268a:	2300      	movs	r3, #0
 801268c:	220a      	movs	r2, #10
 801268e:	4648      	mov	r0, r9
 8012690:	f000 fafa 	bl	8012c88 <__multadd>
 8012694:	9b08      	ldr	r3, [sp, #32]
 8012696:	9001      	str	r0, [sp, #4]
 8012698:	2b00      	cmp	r3, #0
 801269a:	f000 8177 	beq.w	801298c <_dtoa_r+0xa84>
 801269e:	4629      	mov	r1, r5
 80126a0:	2300      	movs	r3, #0
 80126a2:	220a      	movs	r2, #10
 80126a4:	4648      	mov	r0, r9
 80126a6:	f000 faef 	bl	8012c88 <__multadd>
 80126aa:	f1bb 0f00 	cmp.w	fp, #0
 80126ae:	4605      	mov	r5, r0
 80126b0:	dc6e      	bgt.n	8012790 <_dtoa_r+0x888>
 80126b2:	9b07      	ldr	r3, [sp, #28]
 80126b4:	2b02      	cmp	r3, #2
 80126b6:	dc48      	bgt.n	801274a <_dtoa_r+0x842>
 80126b8:	e06a      	b.n	8012790 <_dtoa_r+0x888>
 80126ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80126bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80126c0:	e739      	b.n	8012536 <_dtoa_r+0x62e>
 80126c2:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 80126c6:	42a3      	cmp	r3, r4
 80126c8:	db07      	blt.n	80126da <_dtoa_r+0x7d2>
 80126ca:	f1ba 0f00 	cmp.w	sl, #0
 80126ce:	eba3 0404 	sub.w	r4, r3, r4
 80126d2:	db0b      	blt.n	80126ec <_dtoa_r+0x7e4>
 80126d4:	9e04      	ldr	r6, [sp, #16]
 80126d6:	4652      	mov	r2, sl
 80126d8:	e72f      	b.n	801253a <_dtoa_r+0x632>
 80126da:	1ae2      	subs	r2, r4, r3
 80126dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126de:	9e04      	ldr	r6, [sp, #16]
 80126e0:	4413      	add	r3, r2
 80126e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80126e4:	4652      	mov	r2, sl
 80126e6:	4623      	mov	r3, r4
 80126e8:	2400      	movs	r4, #0
 80126ea:	e726      	b.n	801253a <_dtoa_r+0x632>
 80126ec:	9a04      	ldr	r2, [sp, #16]
 80126ee:	eba2 060a 	sub.w	r6, r2, sl
 80126f2:	2200      	movs	r2, #0
 80126f4:	e721      	b.n	801253a <_dtoa_r+0x632>
 80126f6:	9e04      	ldr	r6, [sp, #16]
 80126f8:	9d08      	ldr	r5, [sp, #32]
 80126fa:	461c      	mov	r4, r3
 80126fc:	e72a      	b.n	8012554 <_dtoa_r+0x64c>
 80126fe:	9a01      	ldr	r2, [sp, #4]
 8012700:	9205      	str	r2, [sp, #20]
 8012702:	e752      	b.n	80125aa <_dtoa_r+0x6a2>
 8012704:	9901      	ldr	r1, [sp, #4]
 8012706:	461a      	mov	r2, r3
 8012708:	e751      	b.n	80125ae <_dtoa_r+0x6a6>
 801270a:	9b05      	ldr	r3, [sp, #20]
 801270c:	9301      	str	r3, [sp, #4]
 801270e:	e752      	b.n	80125b6 <_dtoa_r+0x6ae>
 8012710:	2300      	movs	r3, #0
 8012712:	e77b      	b.n	801260c <_dtoa_r+0x704>
 8012714:	9b02      	ldr	r3, [sp, #8]
 8012716:	e779      	b.n	801260c <_dtoa_r+0x704>
 8012718:	920b      	str	r2, [sp, #44]	@ 0x2c
 801271a:	e778      	b.n	801260e <_dtoa_r+0x706>
 801271c:	2300      	movs	r3, #0
 801271e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012720:	e779      	b.n	8012616 <_dtoa_r+0x70e>
 8012722:	d093      	beq.n	801264c <_dtoa_r+0x744>
 8012724:	9b04      	ldr	r3, [sp, #16]
 8012726:	321c      	adds	r2, #28
 8012728:	4413      	add	r3, r2
 801272a:	9304      	str	r3, [sp, #16]
 801272c:	9b06      	ldr	r3, [sp, #24]
 801272e:	4416      	add	r6, r2
 8012730:	4413      	add	r3, r2
 8012732:	e78a      	b.n	801264a <_dtoa_r+0x742>
 8012734:	4602      	mov	r2, r0
 8012736:	e7f5      	b.n	8012724 <_dtoa_r+0x81c>
 8012738:	f1ba 0f00 	cmp.w	sl, #0
 801273c:	f8cd 8014 	str.w	r8, [sp, #20]
 8012740:	46d3      	mov	fp, sl
 8012742:	dc21      	bgt.n	8012788 <_dtoa_r+0x880>
 8012744:	9b07      	ldr	r3, [sp, #28]
 8012746:	2b02      	cmp	r3, #2
 8012748:	dd1e      	ble.n	8012788 <_dtoa_r+0x880>
 801274a:	f1bb 0f00 	cmp.w	fp, #0
 801274e:	f47f addc 	bne.w	801230a <_dtoa_r+0x402>
 8012752:	4621      	mov	r1, r4
 8012754:	465b      	mov	r3, fp
 8012756:	2205      	movs	r2, #5
 8012758:	4648      	mov	r0, r9
 801275a:	f000 fa95 	bl	8012c88 <__multadd>
 801275e:	4601      	mov	r1, r0
 8012760:	4604      	mov	r4, r0
 8012762:	9801      	ldr	r0, [sp, #4]
 8012764:	f000 fcea 	bl	801313c <__mcmp>
 8012768:	2800      	cmp	r0, #0
 801276a:	f77f adce 	ble.w	801230a <_dtoa_r+0x402>
 801276e:	463e      	mov	r6, r7
 8012770:	2331      	movs	r3, #49	@ 0x31
 8012772:	f806 3b01 	strb.w	r3, [r6], #1
 8012776:	9b05      	ldr	r3, [sp, #20]
 8012778:	3301      	adds	r3, #1
 801277a:	9305      	str	r3, [sp, #20]
 801277c:	e5c9      	b.n	8012312 <_dtoa_r+0x40a>
 801277e:	f8cd 8014 	str.w	r8, [sp, #20]
 8012782:	4654      	mov	r4, sl
 8012784:	4625      	mov	r5, r4
 8012786:	e7f2      	b.n	801276e <_dtoa_r+0x866>
 8012788:	9b08      	ldr	r3, [sp, #32]
 801278a:	2b00      	cmp	r3, #0
 801278c:	f000 8102 	beq.w	8012994 <_dtoa_r+0xa8c>
 8012790:	2e00      	cmp	r6, #0
 8012792:	dd05      	ble.n	80127a0 <_dtoa_r+0x898>
 8012794:	4629      	mov	r1, r5
 8012796:	4632      	mov	r2, r6
 8012798:	4648      	mov	r0, r9
 801279a:	f000 fc63 	bl	8013064 <__lshift>
 801279e:	4605      	mov	r5, r0
 80127a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d058      	beq.n	8012858 <_dtoa_r+0x950>
 80127a6:	6869      	ldr	r1, [r5, #4]
 80127a8:	4648      	mov	r0, r9
 80127aa:	f000 fa0b 	bl	8012bc4 <_Balloc>
 80127ae:	4606      	mov	r6, r0
 80127b0:	b928      	cbnz	r0, 80127be <_dtoa_r+0x8b6>
 80127b2:	4b82      	ldr	r3, [pc, #520]	@ (80129bc <_dtoa_r+0xab4>)
 80127b4:	4602      	mov	r2, r0
 80127b6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80127ba:	f7ff bbbe 	b.w	8011f3a <_dtoa_r+0x32>
 80127be:	692a      	ldr	r2, [r5, #16]
 80127c0:	3202      	adds	r2, #2
 80127c2:	0092      	lsls	r2, r2, #2
 80127c4:	f105 010c 	add.w	r1, r5, #12
 80127c8:	300c      	adds	r0, #12
 80127ca:	f7ff fb00 	bl	8011dce <memcpy>
 80127ce:	2201      	movs	r2, #1
 80127d0:	4631      	mov	r1, r6
 80127d2:	4648      	mov	r0, r9
 80127d4:	f000 fc46 	bl	8013064 <__lshift>
 80127d8:	1c7b      	adds	r3, r7, #1
 80127da:	9304      	str	r3, [sp, #16]
 80127dc:	eb07 030b 	add.w	r3, r7, fp
 80127e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80127e2:	9b02      	ldr	r3, [sp, #8]
 80127e4:	f003 0301 	and.w	r3, r3, #1
 80127e8:	46a8      	mov	r8, r5
 80127ea:	9308      	str	r3, [sp, #32]
 80127ec:	4605      	mov	r5, r0
 80127ee:	9b04      	ldr	r3, [sp, #16]
 80127f0:	9801      	ldr	r0, [sp, #4]
 80127f2:	4621      	mov	r1, r4
 80127f4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80127f8:	f7ff fafe 	bl	8011df8 <quorem>
 80127fc:	4641      	mov	r1, r8
 80127fe:	9002      	str	r0, [sp, #8]
 8012800:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012804:	9801      	ldr	r0, [sp, #4]
 8012806:	f000 fc99 	bl	801313c <__mcmp>
 801280a:	462a      	mov	r2, r5
 801280c:	9006      	str	r0, [sp, #24]
 801280e:	4621      	mov	r1, r4
 8012810:	4648      	mov	r0, r9
 8012812:	f000 fcaf 	bl	8013174 <__mdiff>
 8012816:	68c2      	ldr	r2, [r0, #12]
 8012818:	4606      	mov	r6, r0
 801281a:	b9fa      	cbnz	r2, 801285c <_dtoa_r+0x954>
 801281c:	4601      	mov	r1, r0
 801281e:	9801      	ldr	r0, [sp, #4]
 8012820:	f000 fc8c 	bl	801313c <__mcmp>
 8012824:	4602      	mov	r2, r0
 8012826:	4631      	mov	r1, r6
 8012828:	4648      	mov	r0, r9
 801282a:	920a      	str	r2, [sp, #40]	@ 0x28
 801282c:	f000 fa0a 	bl	8012c44 <_Bfree>
 8012830:	9b07      	ldr	r3, [sp, #28]
 8012832:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012834:	9e04      	ldr	r6, [sp, #16]
 8012836:	ea42 0103 	orr.w	r1, r2, r3
 801283a:	9b08      	ldr	r3, [sp, #32]
 801283c:	4319      	orrs	r1, r3
 801283e:	d10f      	bne.n	8012860 <_dtoa_r+0x958>
 8012840:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012844:	d028      	beq.n	8012898 <_dtoa_r+0x990>
 8012846:	9b06      	ldr	r3, [sp, #24]
 8012848:	2b00      	cmp	r3, #0
 801284a:	dd02      	ble.n	8012852 <_dtoa_r+0x94a>
 801284c:	9b02      	ldr	r3, [sp, #8]
 801284e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012852:	f88b a000 	strb.w	sl, [fp]
 8012856:	e55e      	b.n	8012316 <_dtoa_r+0x40e>
 8012858:	4628      	mov	r0, r5
 801285a:	e7bd      	b.n	80127d8 <_dtoa_r+0x8d0>
 801285c:	2201      	movs	r2, #1
 801285e:	e7e2      	b.n	8012826 <_dtoa_r+0x91e>
 8012860:	9b06      	ldr	r3, [sp, #24]
 8012862:	2b00      	cmp	r3, #0
 8012864:	db04      	blt.n	8012870 <_dtoa_r+0x968>
 8012866:	9907      	ldr	r1, [sp, #28]
 8012868:	430b      	orrs	r3, r1
 801286a:	9908      	ldr	r1, [sp, #32]
 801286c:	430b      	orrs	r3, r1
 801286e:	d120      	bne.n	80128b2 <_dtoa_r+0x9aa>
 8012870:	2a00      	cmp	r2, #0
 8012872:	ddee      	ble.n	8012852 <_dtoa_r+0x94a>
 8012874:	9901      	ldr	r1, [sp, #4]
 8012876:	2201      	movs	r2, #1
 8012878:	4648      	mov	r0, r9
 801287a:	f000 fbf3 	bl	8013064 <__lshift>
 801287e:	4621      	mov	r1, r4
 8012880:	9001      	str	r0, [sp, #4]
 8012882:	f000 fc5b 	bl	801313c <__mcmp>
 8012886:	2800      	cmp	r0, #0
 8012888:	dc03      	bgt.n	8012892 <_dtoa_r+0x98a>
 801288a:	d1e2      	bne.n	8012852 <_dtoa_r+0x94a>
 801288c:	f01a 0f01 	tst.w	sl, #1
 8012890:	d0df      	beq.n	8012852 <_dtoa_r+0x94a>
 8012892:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012896:	d1d9      	bne.n	801284c <_dtoa_r+0x944>
 8012898:	2339      	movs	r3, #57	@ 0x39
 801289a:	f88b 3000 	strb.w	r3, [fp]
 801289e:	4633      	mov	r3, r6
 80128a0:	461e      	mov	r6, r3
 80128a2:	3b01      	subs	r3, #1
 80128a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80128a8:	2a39      	cmp	r2, #57	@ 0x39
 80128aa:	d052      	beq.n	8012952 <_dtoa_r+0xa4a>
 80128ac:	3201      	adds	r2, #1
 80128ae:	701a      	strb	r2, [r3, #0]
 80128b0:	e531      	b.n	8012316 <_dtoa_r+0x40e>
 80128b2:	2a00      	cmp	r2, #0
 80128b4:	dd07      	ble.n	80128c6 <_dtoa_r+0x9be>
 80128b6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80128ba:	d0ed      	beq.n	8012898 <_dtoa_r+0x990>
 80128bc:	f10a 0301 	add.w	r3, sl, #1
 80128c0:	f88b 3000 	strb.w	r3, [fp]
 80128c4:	e527      	b.n	8012316 <_dtoa_r+0x40e>
 80128c6:	9b04      	ldr	r3, [sp, #16]
 80128c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80128ca:	f803 ac01 	strb.w	sl, [r3, #-1]
 80128ce:	4293      	cmp	r3, r2
 80128d0:	d029      	beq.n	8012926 <_dtoa_r+0xa1e>
 80128d2:	9901      	ldr	r1, [sp, #4]
 80128d4:	2300      	movs	r3, #0
 80128d6:	220a      	movs	r2, #10
 80128d8:	4648      	mov	r0, r9
 80128da:	f000 f9d5 	bl	8012c88 <__multadd>
 80128de:	45a8      	cmp	r8, r5
 80128e0:	9001      	str	r0, [sp, #4]
 80128e2:	f04f 0300 	mov.w	r3, #0
 80128e6:	f04f 020a 	mov.w	r2, #10
 80128ea:	4641      	mov	r1, r8
 80128ec:	4648      	mov	r0, r9
 80128ee:	d107      	bne.n	8012900 <_dtoa_r+0x9f8>
 80128f0:	f000 f9ca 	bl	8012c88 <__multadd>
 80128f4:	4680      	mov	r8, r0
 80128f6:	4605      	mov	r5, r0
 80128f8:	9b04      	ldr	r3, [sp, #16]
 80128fa:	3301      	adds	r3, #1
 80128fc:	9304      	str	r3, [sp, #16]
 80128fe:	e776      	b.n	80127ee <_dtoa_r+0x8e6>
 8012900:	f000 f9c2 	bl	8012c88 <__multadd>
 8012904:	4629      	mov	r1, r5
 8012906:	4680      	mov	r8, r0
 8012908:	2300      	movs	r3, #0
 801290a:	220a      	movs	r2, #10
 801290c:	4648      	mov	r0, r9
 801290e:	f000 f9bb 	bl	8012c88 <__multadd>
 8012912:	4605      	mov	r5, r0
 8012914:	e7f0      	b.n	80128f8 <_dtoa_r+0x9f0>
 8012916:	f1bb 0f00 	cmp.w	fp, #0
 801291a:	bfcc      	ite	gt
 801291c:	465e      	movgt	r6, fp
 801291e:	2601      	movle	r6, #1
 8012920:	443e      	add	r6, r7
 8012922:	f04f 0800 	mov.w	r8, #0
 8012926:	9901      	ldr	r1, [sp, #4]
 8012928:	2201      	movs	r2, #1
 801292a:	4648      	mov	r0, r9
 801292c:	f000 fb9a 	bl	8013064 <__lshift>
 8012930:	4621      	mov	r1, r4
 8012932:	9001      	str	r0, [sp, #4]
 8012934:	f000 fc02 	bl	801313c <__mcmp>
 8012938:	2800      	cmp	r0, #0
 801293a:	dcb0      	bgt.n	801289e <_dtoa_r+0x996>
 801293c:	d102      	bne.n	8012944 <_dtoa_r+0xa3c>
 801293e:	f01a 0f01 	tst.w	sl, #1
 8012942:	d1ac      	bne.n	801289e <_dtoa_r+0x996>
 8012944:	4633      	mov	r3, r6
 8012946:	461e      	mov	r6, r3
 8012948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801294c:	2a30      	cmp	r2, #48	@ 0x30
 801294e:	d0fa      	beq.n	8012946 <_dtoa_r+0xa3e>
 8012950:	e4e1      	b.n	8012316 <_dtoa_r+0x40e>
 8012952:	429f      	cmp	r7, r3
 8012954:	d1a4      	bne.n	80128a0 <_dtoa_r+0x998>
 8012956:	9b05      	ldr	r3, [sp, #20]
 8012958:	3301      	adds	r3, #1
 801295a:	9305      	str	r3, [sp, #20]
 801295c:	2331      	movs	r3, #49	@ 0x31
 801295e:	703b      	strb	r3, [r7, #0]
 8012960:	e4d9      	b.n	8012316 <_dtoa_r+0x40e>
 8012962:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012964:	4f16      	ldr	r7, [pc, #88]	@ (80129c0 <_dtoa_r+0xab8>)
 8012966:	b11b      	cbz	r3, 8012970 <_dtoa_r+0xa68>
 8012968:	f107 0308 	add.w	r3, r7, #8
 801296c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801296e:	6013      	str	r3, [r2, #0]
 8012970:	4638      	mov	r0, r7
 8012972:	b011      	add	sp, #68	@ 0x44
 8012974:	ecbd 8b02 	vpop	{d8}
 8012978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801297c:	9b07      	ldr	r3, [sp, #28]
 801297e:	2b01      	cmp	r3, #1
 8012980:	f77f ae2c 	ble.w	80125dc <_dtoa_r+0x6d4>
 8012984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012986:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012988:	2001      	movs	r0, #1
 801298a:	e64c      	b.n	8012626 <_dtoa_r+0x71e>
 801298c:	f1bb 0f00 	cmp.w	fp, #0
 8012990:	f77f aed8 	ble.w	8012744 <_dtoa_r+0x83c>
 8012994:	463e      	mov	r6, r7
 8012996:	9801      	ldr	r0, [sp, #4]
 8012998:	4621      	mov	r1, r4
 801299a:	f7ff fa2d 	bl	8011df8 <quorem>
 801299e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80129a2:	f806 ab01 	strb.w	sl, [r6], #1
 80129a6:	1bf2      	subs	r2, r6, r7
 80129a8:	4593      	cmp	fp, r2
 80129aa:	ddb4      	ble.n	8012916 <_dtoa_r+0xa0e>
 80129ac:	9901      	ldr	r1, [sp, #4]
 80129ae:	2300      	movs	r3, #0
 80129b0:	220a      	movs	r2, #10
 80129b2:	4648      	mov	r0, r9
 80129b4:	f000 f968 	bl	8012c88 <__multadd>
 80129b8:	9001      	str	r0, [sp, #4]
 80129ba:	e7ec      	b.n	8012996 <_dtoa_r+0xa8e>
 80129bc:	08016c23 	.word	0x08016c23
 80129c0:	08016ba7 	.word	0x08016ba7

080129c4 <_free_r>:
 80129c4:	b538      	push	{r3, r4, r5, lr}
 80129c6:	4605      	mov	r5, r0
 80129c8:	2900      	cmp	r1, #0
 80129ca:	d041      	beq.n	8012a50 <_free_r+0x8c>
 80129cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129d0:	1f0c      	subs	r4, r1, #4
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	bfb8      	it	lt
 80129d6:	18e4      	addlt	r4, r4, r3
 80129d8:	f000 f8e8 	bl	8012bac <__malloc_lock>
 80129dc:	4a1d      	ldr	r2, [pc, #116]	@ (8012a54 <_free_r+0x90>)
 80129de:	6813      	ldr	r3, [r2, #0]
 80129e0:	b933      	cbnz	r3, 80129f0 <_free_r+0x2c>
 80129e2:	6063      	str	r3, [r4, #4]
 80129e4:	6014      	str	r4, [r2, #0]
 80129e6:	4628      	mov	r0, r5
 80129e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129ec:	f000 b8e4 	b.w	8012bb8 <__malloc_unlock>
 80129f0:	42a3      	cmp	r3, r4
 80129f2:	d908      	bls.n	8012a06 <_free_r+0x42>
 80129f4:	6820      	ldr	r0, [r4, #0]
 80129f6:	1821      	adds	r1, r4, r0
 80129f8:	428b      	cmp	r3, r1
 80129fa:	bf01      	itttt	eq
 80129fc:	6819      	ldreq	r1, [r3, #0]
 80129fe:	685b      	ldreq	r3, [r3, #4]
 8012a00:	1809      	addeq	r1, r1, r0
 8012a02:	6021      	streq	r1, [r4, #0]
 8012a04:	e7ed      	b.n	80129e2 <_free_r+0x1e>
 8012a06:	461a      	mov	r2, r3
 8012a08:	685b      	ldr	r3, [r3, #4]
 8012a0a:	b10b      	cbz	r3, 8012a10 <_free_r+0x4c>
 8012a0c:	42a3      	cmp	r3, r4
 8012a0e:	d9fa      	bls.n	8012a06 <_free_r+0x42>
 8012a10:	6811      	ldr	r1, [r2, #0]
 8012a12:	1850      	adds	r0, r2, r1
 8012a14:	42a0      	cmp	r0, r4
 8012a16:	d10b      	bne.n	8012a30 <_free_r+0x6c>
 8012a18:	6820      	ldr	r0, [r4, #0]
 8012a1a:	4401      	add	r1, r0
 8012a1c:	1850      	adds	r0, r2, r1
 8012a1e:	4283      	cmp	r3, r0
 8012a20:	6011      	str	r1, [r2, #0]
 8012a22:	d1e0      	bne.n	80129e6 <_free_r+0x22>
 8012a24:	6818      	ldr	r0, [r3, #0]
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	6053      	str	r3, [r2, #4]
 8012a2a:	4408      	add	r0, r1
 8012a2c:	6010      	str	r0, [r2, #0]
 8012a2e:	e7da      	b.n	80129e6 <_free_r+0x22>
 8012a30:	d902      	bls.n	8012a38 <_free_r+0x74>
 8012a32:	230c      	movs	r3, #12
 8012a34:	602b      	str	r3, [r5, #0]
 8012a36:	e7d6      	b.n	80129e6 <_free_r+0x22>
 8012a38:	6820      	ldr	r0, [r4, #0]
 8012a3a:	1821      	adds	r1, r4, r0
 8012a3c:	428b      	cmp	r3, r1
 8012a3e:	bf04      	itt	eq
 8012a40:	6819      	ldreq	r1, [r3, #0]
 8012a42:	685b      	ldreq	r3, [r3, #4]
 8012a44:	6063      	str	r3, [r4, #4]
 8012a46:	bf04      	itt	eq
 8012a48:	1809      	addeq	r1, r1, r0
 8012a4a:	6021      	streq	r1, [r4, #0]
 8012a4c:	6054      	str	r4, [r2, #4]
 8012a4e:	e7ca      	b.n	80129e6 <_free_r+0x22>
 8012a50:	bd38      	pop	{r3, r4, r5, pc}
 8012a52:	bf00      	nop
 8012a54:	24000878 	.word	0x24000878

08012a58 <malloc>:
 8012a58:	4b02      	ldr	r3, [pc, #8]	@ (8012a64 <malloc+0xc>)
 8012a5a:	4601      	mov	r1, r0
 8012a5c:	6818      	ldr	r0, [r3, #0]
 8012a5e:	f000 b825 	b.w	8012aac <_malloc_r>
 8012a62:	bf00      	nop
 8012a64:	24000020 	.word	0x24000020

08012a68 <sbrk_aligned>:
 8012a68:	b570      	push	{r4, r5, r6, lr}
 8012a6a:	4e0f      	ldr	r6, [pc, #60]	@ (8012aa8 <sbrk_aligned+0x40>)
 8012a6c:	460c      	mov	r4, r1
 8012a6e:	6831      	ldr	r1, [r6, #0]
 8012a70:	4605      	mov	r5, r0
 8012a72:	b911      	cbnz	r1, 8012a7a <sbrk_aligned+0x12>
 8012a74:	f002 fb14 	bl	80150a0 <_sbrk_r>
 8012a78:	6030      	str	r0, [r6, #0]
 8012a7a:	4621      	mov	r1, r4
 8012a7c:	4628      	mov	r0, r5
 8012a7e:	f002 fb0f 	bl	80150a0 <_sbrk_r>
 8012a82:	1c43      	adds	r3, r0, #1
 8012a84:	d103      	bne.n	8012a8e <sbrk_aligned+0x26>
 8012a86:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012a8a:	4620      	mov	r0, r4
 8012a8c:	bd70      	pop	{r4, r5, r6, pc}
 8012a8e:	1cc4      	adds	r4, r0, #3
 8012a90:	f024 0403 	bic.w	r4, r4, #3
 8012a94:	42a0      	cmp	r0, r4
 8012a96:	d0f8      	beq.n	8012a8a <sbrk_aligned+0x22>
 8012a98:	1a21      	subs	r1, r4, r0
 8012a9a:	4628      	mov	r0, r5
 8012a9c:	f002 fb00 	bl	80150a0 <_sbrk_r>
 8012aa0:	3001      	adds	r0, #1
 8012aa2:	d1f2      	bne.n	8012a8a <sbrk_aligned+0x22>
 8012aa4:	e7ef      	b.n	8012a86 <sbrk_aligned+0x1e>
 8012aa6:	bf00      	nop
 8012aa8:	24000874 	.word	0x24000874

08012aac <_malloc_r>:
 8012aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ab0:	1ccd      	adds	r5, r1, #3
 8012ab2:	f025 0503 	bic.w	r5, r5, #3
 8012ab6:	3508      	adds	r5, #8
 8012ab8:	2d0c      	cmp	r5, #12
 8012aba:	bf38      	it	cc
 8012abc:	250c      	movcc	r5, #12
 8012abe:	2d00      	cmp	r5, #0
 8012ac0:	4606      	mov	r6, r0
 8012ac2:	db01      	blt.n	8012ac8 <_malloc_r+0x1c>
 8012ac4:	42a9      	cmp	r1, r5
 8012ac6:	d904      	bls.n	8012ad2 <_malloc_r+0x26>
 8012ac8:	230c      	movs	r3, #12
 8012aca:	6033      	str	r3, [r6, #0]
 8012acc:	2000      	movs	r0, #0
 8012ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ad2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012ba8 <_malloc_r+0xfc>
 8012ad6:	f000 f869 	bl	8012bac <__malloc_lock>
 8012ada:	f8d8 3000 	ldr.w	r3, [r8]
 8012ade:	461c      	mov	r4, r3
 8012ae0:	bb44      	cbnz	r4, 8012b34 <_malloc_r+0x88>
 8012ae2:	4629      	mov	r1, r5
 8012ae4:	4630      	mov	r0, r6
 8012ae6:	f7ff ffbf 	bl	8012a68 <sbrk_aligned>
 8012aea:	1c43      	adds	r3, r0, #1
 8012aec:	4604      	mov	r4, r0
 8012aee:	d158      	bne.n	8012ba2 <_malloc_r+0xf6>
 8012af0:	f8d8 4000 	ldr.w	r4, [r8]
 8012af4:	4627      	mov	r7, r4
 8012af6:	2f00      	cmp	r7, #0
 8012af8:	d143      	bne.n	8012b82 <_malloc_r+0xd6>
 8012afa:	2c00      	cmp	r4, #0
 8012afc:	d04b      	beq.n	8012b96 <_malloc_r+0xea>
 8012afe:	6823      	ldr	r3, [r4, #0]
 8012b00:	4639      	mov	r1, r7
 8012b02:	4630      	mov	r0, r6
 8012b04:	eb04 0903 	add.w	r9, r4, r3
 8012b08:	f002 faca 	bl	80150a0 <_sbrk_r>
 8012b0c:	4581      	cmp	r9, r0
 8012b0e:	d142      	bne.n	8012b96 <_malloc_r+0xea>
 8012b10:	6821      	ldr	r1, [r4, #0]
 8012b12:	1a6d      	subs	r5, r5, r1
 8012b14:	4629      	mov	r1, r5
 8012b16:	4630      	mov	r0, r6
 8012b18:	f7ff ffa6 	bl	8012a68 <sbrk_aligned>
 8012b1c:	3001      	adds	r0, #1
 8012b1e:	d03a      	beq.n	8012b96 <_malloc_r+0xea>
 8012b20:	6823      	ldr	r3, [r4, #0]
 8012b22:	442b      	add	r3, r5
 8012b24:	6023      	str	r3, [r4, #0]
 8012b26:	f8d8 3000 	ldr.w	r3, [r8]
 8012b2a:	685a      	ldr	r2, [r3, #4]
 8012b2c:	bb62      	cbnz	r2, 8012b88 <_malloc_r+0xdc>
 8012b2e:	f8c8 7000 	str.w	r7, [r8]
 8012b32:	e00f      	b.n	8012b54 <_malloc_r+0xa8>
 8012b34:	6822      	ldr	r2, [r4, #0]
 8012b36:	1b52      	subs	r2, r2, r5
 8012b38:	d420      	bmi.n	8012b7c <_malloc_r+0xd0>
 8012b3a:	2a0b      	cmp	r2, #11
 8012b3c:	d917      	bls.n	8012b6e <_malloc_r+0xc2>
 8012b3e:	1961      	adds	r1, r4, r5
 8012b40:	42a3      	cmp	r3, r4
 8012b42:	6025      	str	r5, [r4, #0]
 8012b44:	bf18      	it	ne
 8012b46:	6059      	strne	r1, [r3, #4]
 8012b48:	6863      	ldr	r3, [r4, #4]
 8012b4a:	bf08      	it	eq
 8012b4c:	f8c8 1000 	streq.w	r1, [r8]
 8012b50:	5162      	str	r2, [r4, r5]
 8012b52:	604b      	str	r3, [r1, #4]
 8012b54:	4630      	mov	r0, r6
 8012b56:	f000 f82f 	bl	8012bb8 <__malloc_unlock>
 8012b5a:	f104 000b 	add.w	r0, r4, #11
 8012b5e:	1d23      	adds	r3, r4, #4
 8012b60:	f020 0007 	bic.w	r0, r0, #7
 8012b64:	1ac2      	subs	r2, r0, r3
 8012b66:	bf1c      	itt	ne
 8012b68:	1a1b      	subne	r3, r3, r0
 8012b6a:	50a3      	strne	r3, [r4, r2]
 8012b6c:	e7af      	b.n	8012ace <_malloc_r+0x22>
 8012b6e:	6862      	ldr	r2, [r4, #4]
 8012b70:	42a3      	cmp	r3, r4
 8012b72:	bf0c      	ite	eq
 8012b74:	f8c8 2000 	streq.w	r2, [r8]
 8012b78:	605a      	strne	r2, [r3, #4]
 8012b7a:	e7eb      	b.n	8012b54 <_malloc_r+0xa8>
 8012b7c:	4623      	mov	r3, r4
 8012b7e:	6864      	ldr	r4, [r4, #4]
 8012b80:	e7ae      	b.n	8012ae0 <_malloc_r+0x34>
 8012b82:	463c      	mov	r4, r7
 8012b84:	687f      	ldr	r7, [r7, #4]
 8012b86:	e7b6      	b.n	8012af6 <_malloc_r+0x4a>
 8012b88:	461a      	mov	r2, r3
 8012b8a:	685b      	ldr	r3, [r3, #4]
 8012b8c:	42a3      	cmp	r3, r4
 8012b8e:	d1fb      	bne.n	8012b88 <_malloc_r+0xdc>
 8012b90:	2300      	movs	r3, #0
 8012b92:	6053      	str	r3, [r2, #4]
 8012b94:	e7de      	b.n	8012b54 <_malloc_r+0xa8>
 8012b96:	230c      	movs	r3, #12
 8012b98:	6033      	str	r3, [r6, #0]
 8012b9a:	4630      	mov	r0, r6
 8012b9c:	f000 f80c 	bl	8012bb8 <__malloc_unlock>
 8012ba0:	e794      	b.n	8012acc <_malloc_r+0x20>
 8012ba2:	6005      	str	r5, [r0, #0]
 8012ba4:	e7d6      	b.n	8012b54 <_malloc_r+0xa8>
 8012ba6:	bf00      	nop
 8012ba8:	24000878 	.word	0x24000878

08012bac <__malloc_lock>:
 8012bac:	4801      	ldr	r0, [pc, #4]	@ (8012bb4 <__malloc_lock+0x8>)
 8012bae:	f7ff b90c 	b.w	8011dca <__retarget_lock_acquire_recursive>
 8012bb2:	bf00      	nop
 8012bb4:	24000870 	.word	0x24000870

08012bb8 <__malloc_unlock>:
 8012bb8:	4801      	ldr	r0, [pc, #4]	@ (8012bc0 <__malloc_unlock+0x8>)
 8012bba:	f7ff b907 	b.w	8011dcc <__retarget_lock_release_recursive>
 8012bbe:	bf00      	nop
 8012bc0:	24000870 	.word	0x24000870

08012bc4 <_Balloc>:
 8012bc4:	b570      	push	{r4, r5, r6, lr}
 8012bc6:	69c6      	ldr	r6, [r0, #28]
 8012bc8:	4604      	mov	r4, r0
 8012bca:	460d      	mov	r5, r1
 8012bcc:	b976      	cbnz	r6, 8012bec <_Balloc+0x28>
 8012bce:	2010      	movs	r0, #16
 8012bd0:	f7ff ff42 	bl	8012a58 <malloc>
 8012bd4:	4602      	mov	r2, r0
 8012bd6:	61e0      	str	r0, [r4, #28]
 8012bd8:	b920      	cbnz	r0, 8012be4 <_Balloc+0x20>
 8012bda:	4b18      	ldr	r3, [pc, #96]	@ (8012c3c <_Balloc+0x78>)
 8012bdc:	4818      	ldr	r0, [pc, #96]	@ (8012c40 <_Balloc+0x7c>)
 8012bde:	216b      	movs	r1, #107	@ 0x6b
 8012be0:	f002 fa76 	bl	80150d0 <__assert_func>
 8012be4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012be8:	6006      	str	r6, [r0, #0]
 8012bea:	60c6      	str	r6, [r0, #12]
 8012bec:	69e6      	ldr	r6, [r4, #28]
 8012bee:	68f3      	ldr	r3, [r6, #12]
 8012bf0:	b183      	cbz	r3, 8012c14 <_Balloc+0x50>
 8012bf2:	69e3      	ldr	r3, [r4, #28]
 8012bf4:	68db      	ldr	r3, [r3, #12]
 8012bf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012bfa:	b9b8      	cbnz	r0, 8012c2c <_Balloc+0x68>
 8012bfc:	2101      	movs	r1, #1
 8012bfe:	fa01 f605 	lsl.w	r6, r1, r5
 8012c02:	1d72      	adds	r2, r6, #5
 8012c04:	0092      	lsls	r2, r2, #2
 8012c06:	4620      	mov	r0, r4
 8012c08:	f002 fa80 	bl	801510c <_calloc_r>
 8012c0c:	b160      	cbz	r0, 8012c28 <_Balloc+0x64>
 8012c0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012c12:	e00e      	b.n	8012c32 <_Balloc+0x6e>
 8012c14:	2221      	movs	r2, #33	@ 0x21
 8012c16:	2104      	movs	r1, #4
 8012c18:	4620      	mov	r0, r4
 8012c1a:	f002 fa77 	bl	801510c <_calloc_r>
 8012c1e:	69e3      	ldr	r3, [r4, #28]
 8012c20:	60f0      	str	r0, [r6, #12]
 8012c22:	68db      	ldr	r3, [r3, #12]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d1e4      	bne.n	8012bf2 <_Balloc+0x2e>
 8012c28:	2000      	movs	r0, #0
 8012c2a:	bd70      	pop	{r4, r5, r6, pc}
 8012c2c:	6802      	ldr	r2, [r0, #0]
 8012c2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012c32:	2300      	movs	r3, #0
 8012c34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012c38:	e7f7      	b.n	8012c2a <_Balloc+0x66>
 8012c3a:	bf00      	nop
 8012c3c:	08016bb4 	.word	0x08016bb4
 8012c40:	08016c34 	.word	0x08016c34

08012c44 <_Bfree>:
 8012c44:	b570      	push	{r4, r5, r6, lr}
 8012c46:	69c6      	ldr	r6, [r0, #28]
 8012c48:	4605      	mov	r5, r0
 8012c4a:	460c      	mov	r4, r1
 8012c4c:	b976      	cbnz	r6, 8012c6c <_Bfree+0x28>
 8012c4e:	2010      	movs	r0, #16
 8012c50:	f7ff ff02 	bl	8012a58 <malloc>
 8012c54:	4602      	mov	r2, r0
 8012c56:	61e8      	str	r0, [r5, #28]
 8012c58:	b920      	cbnz	r0, 8012c64 <_Bfree+0x20>
 8012c5a:	4b09      	ldr	r3, [pc, #36]	@ (8012c80 <_Bfree+0x3c>)
 8012c5c:	4809      	ldr	r0, [pc, #36]	@ (8012c84 <_Bfree+0x40>)
 8012c5e:	218f      	movs	r1, #143	@ 0x8f
 8012c60:	f002 fa36 	bl	80150d0 <__assert_func>
 8012c64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c68:	6006      	str	r6, [r0, #0]
 8012c6a:	60c6      	str	r6, [r0, #12]
 8012c6c:	b13c      	cbz	r4, 8012c7e <_Bfree+0x3a>
 8012c6e:	69eb      	ldr	r3, [r5, #28]
 8012c70:	6862      	ldr	r2, [r4, #4]
 8012c72:	68db      	ldr	r3, [r3, #12]
 8012c74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012c78:	6021      	str	r1, [r4, #0]
 8012c7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012c7e:	bd70      	pop	{r4, r5, r6, pc}
 8012c80:	08016bb4 	.word	0x08016bb4
 8012c84:	08016c34 	.word	0x08016c34

08012c88 <__multadd>:
 8012c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c8c:	690d      	ldr	r5, [r1, #16]
 8012c8e:	4607      	mov	r7, r0
 8012c90:	460c      	mov	r4, r1
 8012c92:	461e      	mov	r6, r3
 8012c94:	f101 0c14 	add.w	ip, r1, #20
 8012c98:	2000      	movs	r0, #0
 8012c9a:	f8dc 3000 	ldr.w	r3, [ip]
 8012c9e:	b299      	uxth	r1, r3
 8012ca0:	fb02 6101 	mla	r1, r2, r1, r6
 8012ca4:	0c1e      	lsrs	r6, r3, #16
 8012ca6:	0c0b      	lsrs	r3, r1, #16
 8012ca8:	fb02 3306 	mla	r3, r2, r6, r3
 8012cac:	b289      	uxth	r1, r1
 8012cae:	3001      	adds	r0, #1
 8012cb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012cb4:	4285      	cmp	r5, r0
 8012cb6:	f84c 1b04 	str.w	r1, [ip], #4
 8012cba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012cbe:	dcec      	bgt.n	8012c9a <__multadd+0x12>
 8012cc0:	b30e      	cbz	r6, 8012d06 <__multadd+0x7e>
 8012cc2:	68a3      	ldr	r3, [r4, #8]
 8012cc4:	42ab      	cmp	r3, r5
 8012cc6:	dc19      	bgt.n	8012cfc <__multadd+0x74>
 8012cc8:	6861      	ldr	r1, [r4, #4]
 8012cca:	4638      	mov	r0, r7
 8012ccc:	3101      	adds	r1, #1
 8012cce:	f7ff ff79 	bl	8012bc4 <_Balloc>
 8012cd2:	4680      	mov	r8, r0
 8012cd4:	b928      	cbnz	r0, 8012ce2 <__multadd+0x5a>
 8012cd6:	4602      	mov	r2, r0
 8012cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8012d0c <__multadd+0x84>)
 8012cda:	480d      	ldr	r0, [pc, #52]	@ (8012d10 <__multadd+0x88>)
 8012cdc:	21ba      	movs	r1, #186	@ 0xba
 8012cde:	f002 f9f7 	bl	80150d0 <__assert_func>
 8012ce2:	6922      	ldr	r2, [r4, #16]
 8012ce4:	3202      	adds	r2, #2
 8012ce6:	f104 010c 	add.w	r1, r4, #12
 8012cea:	0092      	lsls	r2, r2, #2
 8012cec:	300c      	adds	r0, #12
 8012cee:	f7ff f86e 	bl	8011dce <memcpy>
 8012cf2:	4621      	mov	r1, r4
 8012cf4:	4638      	mov	r0, r7
 8012cf6:	f7ff ffa5 	bl	8012c44 <_Bfree>
 8012cfa:	4644      	mov	r4, r8
 8012cfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012d00:	3501      	adds	r5, #1
 8012d02:	615e      	str	r6, [r3, #20]
 8012d04:	6125      	str	r5, [r4, #16]
 8012d06:	4620      	mov	r0, r4
 8012d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d0c:	08016c23 	.word	0x08016c23
 8012d10:	08016c34 	.word	0x08016c34

08012d14 <__s2b>:
 8012d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d18:	460c      	mov	r4, r1
 8012d1a:	4615      	mov	r5, r2
 8012d1c:	461f      	mov	r7, r3
 8012d1e:	2209      	movs	r2, #9
 8012d20:	3308      	adds	r3, #8
 8012d22:	4606      	mov	r6, r0
 8012d24:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d28:	2100      	movs	r1, #0
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	db09      	blt.n	8012d44 <__s2b+0x30>
 8012d30:	4630      	mov	r0, r6
 8012d32:	f7ff ff47 	bl	8012bc4 <_Balloc>
 8012d36:	b940      	cbnz	r0, 8012d4a <__s2b+0x36>
 8012d38:	4602      	mov	r2, r0
 8012d3a:	4b19      	ldr	r3, [pc, #100]	@ (8012da0 <__s2b+0x8c>)
 8012d3c:	4819      	ldr	r0, [pc, #100]	@ (8012da4 <__s2b+0x90>)
 8012d3e:	21d3      	movs	r1, #211	@ 0xd3
 8012d40:	f002 f9c6 	bl	80150d0 <__assert_func>
 8012d44:	0052      	lsls	r2, r2, #1
 8012d46:	3101      	adds	r1, #1
 8012d48:	e7f0      	b.n	8012d2c <__s2b+0x18>
 8012d4a:	9b08      	ldr	r3, [sp, #32]
 8012d4c:	6143      	str	r3, [r0, #20]
 8012d4e:	2d09      	cmp	r5, #9
 8012d50:	f04f 0301 	mov.w	r3, #1
 8012d54:	6103      	str	r3, [r0, #16]
 8012d56:	dd16      	ble.n	8012d86 <__s2b+0x72>
 8012d58:	f104 0909 	add.w	r9, r4, #9
 8012d5c:	46c8      	mov	r8, r9
 8012d5e:	442c      	add	r4, r5
 8012d60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012d64:	4601      	mov	r1, r0
 8012d66:	3b30      	subs	r3, #48	@ 0x30
 8012d68:	220a      	movs	r2, #10
 8012d6a:	4630      	mov	r0, r6
 8012d6c:	f7ff ff8c 	bl	8012c88 <__multadd>
 8012d70:	45a0      	cmp	r8, r4
 8012d72:	d1f5      	bne.n	8012d60 <__s2b+0x4c>
 8012d74:	f1a5 0408 	sub.w	r4, r5, #8
 8012d78:	444c      	add	r4, r9
 8012d7a:	1b2d      	subs	r5, r5, r4
 8012d7c:	1963      	adds	r3, r4, r5
 8012d7e:	42bb      	cmp	r3, r7
 8012d80:	db04      	blt.n	8012d8c <__s2b+0x78>
 8012d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d86:	340a      	adds	r4, #10
 8012d88:	2509      	movs	r5, #9
 8012d8a:	e7f6      	b.n	8012d7a <__s2b+0x66>
 8012d8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012d90:	4601      	mov	r1, r0
 8012d92:	3b30      	subs	r3, #48	@ 0x30
 8012d94:	220a      	movs	r2, #10
 8012d96:	4630      	mov	r0, r6
 8012d98:	f7ff ff76 	bl	8012c88 <__multadd>
 8012d9c:	e7ee      	b.n	8012d7c <__s2b+0x68>
 8012d9e:	bf00      	nop
 8012da0:	08016c23 	.word	0x08016c23
 8012da4:	08016c34 	.word	0x08016c34

08012da8 <__hi0bits>:
 8012da8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012dac:	4603      	mov	r3, r0
 8012dae:	bf36      	itet	cc
 8012db0:	0403      	lslcc	r3, r0, #16
 8012db2:	2000      	movcs	r0, #0
 8012db4:	2010      	movcc	r0, #16
 8012db6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012dba:	bf3c      	itt	cc
 8012dbc:	021b      	lslcc	r3, r3, #8
 8012dbe:	3008      	addcc	r0, #8
 8012dc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012dc4:	bf3c      	itt	cc
 8012dc6:	011b      	lslcc	r3, r3, #4
 8012dc8:	3004      	addcc	r0, #4
 8012dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012dce:	bf3c      	itt	cc
 8012dd0:	009b      	lslcc	r3, r3, #2
 8012dd2:	3002      	addcc	r0, #2
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	db05      	blt.n	8012de4 <__hi0bits+0x3c>
 8012dd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012ddc:	f100 0001 	add.w	r0, r0, #1
 8012de0:	bf08      	it	eq
 8012de2:	2020      	moveq	r0, #32
 8012de4:	4770      	bx	lr

08012de6 <__lo0bits>:
 8012de6:	6803      	ldr	r3, [r0, #0]
 8012de8:	4602      	mov	r2, r0
 8012dea:	f013 0007 	ands.w	r0, r3, #7
 8012dee:	d00b      	beq.n	8012e08 <__lo0bits+0x22>
 8012df0:	07d9      	lsls	r1, r3, #31
 8012df2:	d421      	bmi.n	8012e38 <__lo0bits+0x52>
 8012df4:	0798      	lsls	r0, r3, #30
 8012df6:	bf49      	itett	mi
 8012df8:	085b      	lsrmi	r3, r3, #1
 8012dfa:	089b      	lsrpl	r3, r3, #2
 8012dfc:	2001      	movmi	r0, #1
 8012dfe:	6013      	strmi	r3, [r2, #0]
 8012e00:	bf5c      	itt	pl
 8012e02:	6013      	strpl	r3, [r2, #0]
 8012e04:	2002      	movpl	r0, #2
 8012e06:	4770      	bx	lr
 8012e08:	b299      	uxth	r1, r3
 8012e0a:	b909      	cbnz	r1, 8012e10 <__lo0bits+0x2a>
 8012e0c:	0c1b      	lsrs	r3, r3, #16
 8012e0e:	2010      	movs	r0, #16
 8012e10:	b2d9      	uxtb	r1, r3
 8012e12:	b909      	cbnz	r1, 8012e18 <__lo0bits+0x32>
 8012e14:	3008      	adds	r0, #8
 8012e16:	0a1b      	lsrs	r3, r3, #8
 8012e18:	0719      	lsls	r1, r3, #28
 8012e1a:	bf04      	itt	eq
 8012e1c:	091b      	lsreq	r3, r3, #4
 8012e1e:	3004      	addeq	r0, #4
 8012e20:	0799      	lsls	r1, r3, #30
 8012e22:	bf04      	itt	eq
 8012e24:	089b      	lsreq	r3, r3, #2
 8012e26:	3002      	addeq	r0, #2
 8012e28:	07d9      	lsls	r1, r3, #31
 8012e2a:	d403      	bmi.n	8012e34 <__lo0bits+0x4e>
 8012e2c:	085b      	lsrs	r3, r3, #1
 8012e2e:	f100 0001 	add.w	r0, r0, #1
 8012e32:	d003      	beq.n	8012e3c <__lo0bits+0x56>
 8012e34:	6013      	str	r3, [r2, #0]
 8012e36:	4770      	bx	lr
 8012e38:	2000      	movs	r0, #0
 8012e3a:	4770      	bx	lr
 8012e3c:	2020      	movs	r0, #32
 8012e3e:	4770      	bx	lr

08012e40 <__i2b>:
 8012e40:	b510      	push	{r4, lr}
 8012e42:	460c      	mov	r4, r1
 8012e44:	2101      	movs	r1, #1
 8012e46:	f7ff febd 	bl	8012bc4 <_Balloc>
 8012e4a:	4602      	mov	r2, r0
 8012e4c:	b928      	cbnz	r0, 8012e5a <__i2b+0x1a>
 8012e4e:	4b05      	ldr	r3, [pc, #20]	@ (8012e64 <__i2b+0x24>)
 8012e50:	4805      	ldr	r0, [pc, #20]	@ (8012e68 <__i2b+0x28>)
 8012e52:	f240 1145 	movw	r1, #325	@ 0x145
 8012e56:	f002 f93b 	bl	80150d0 <__assert_func>
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	6144      	str	r4, [r0, #20]
 8012e5e:	6103      	str	r3, [r0, #16]
 8012e60:	bd10      	pop	{r4, pc}
 8012e62:	bf00      	nop
 8012e64:	08016c23 	.word	0x08016c23
 8012e68:	08016c34 	.word	0x08016c34

08012e6c <__multiply>:
 8012e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e70:	4617      	mov	r7, r2
 8012e72:	690a      	ldr	r2, [r1, #16]
 8012e74:	693b      	ldr	r3, [r7, #16]
 8012e76:	429a      	cmp	r2, r3
 8012e78:	bfa8      	it	ge
 8012e7a:	463b      	movge	r3, r7
 8012e7c:	4689      	mov	r9, r1
 8012e7e:	bfa4      	itt	ge
 8012e80:	460f      	movge	r7, r1
 8012e82:	4699      	movge	r9, r3
 8012e84:	693d      	ldr	r5, [r7, #16]
 8012e86:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	6879      	ldr	r1, [r7, #4]
 8012e8e:	eb05 060a 	add.w	r6, r5, sl
 8012e92:	42b3      	cmp	r3, r6
 8012e94:	b085      	sub	sp, #20
 8012e96:	bfb8      	it	lt
 8012e98:	3101      	addlt	r1, #1
 8012e9a:	f7ff fe93 	bl	8012bc4 <_Balloc>
 8012e9e:	b930      	cbnz	r0, 8012eae <__multiply+0x42>
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	4b41      	ldr	r3, [pc, #260]	@ (8012fa8 <__multiply+0x13c>)
 8012ea4:	4841      	ldr	r0, [pc, #260]	@ (8012fac <__multiply+0x140>)
 8012ea6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012eaa:	f002 f911 	bl	80150d0 <__assert_func>
 8012eae:	f100 0414 	add.w	r4, r0, #20
 8012eb2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8012eb6:	4623      	mov	r3, r4
 8012eb8:	2200      	movs	r2, #0
 8012eba:	4573      	cmp	r3, lr
 8012ebc:	d320      	bcc.n	8012f00 <__multiply+0x94>
 8012ebe:	f107 0814 	add.w	r8, r7, #20
 8012ec2:	f109 0114 	add.w	r1, r9, #20
 8012ec6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8012eca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8012ece:	9302      	str	r3, [sp, #8]
 8012ed0:	1beb      	subs	r3, r5, r7
 8012ed2:	3b15      	subs	r3, #21
 8012ed4:	f023 0303 	bic.w	r3, r3, #3
 8012ed8:	3304      	adds	r3, #4
 8012eda:	3715      	adds	r7, #21
 8012edc:	42bd      	cmp	r5, r7
 8012ede:	bf38      	it	cc
 8012ee0:	2304      	movcc	r3, #4
 8012ee2:	9301      	str	r3, [sp, #4]
 8012ee4:	9b02      	ldr	r3, [sp, #8]
 8012ee6:	9103      	str	r1, [sp, #12]
 8012ee8:	428b      	cmp	r3, r1
 8012eea:	d80c      	bhi.n	8012f06 <__multiply+0x9a>
 8012eec:	2e00      	cmp	r6, #0
 8012eee:	dd03      	ble.n	8012ef8 <__multiply+0x8c>
 8012ef0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d055      	beq.n	8012fa4 <__multiply+0x138>
 8012ef8:	6106      	str	r6, [r0, #16]
 8012efa:	b005      	add	sp, #20
 8012efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f00:	f843 2b04 	str.w	r2, [r3], #4
 8012f04:	e7d9      	b.n	8012eba <__multiply+0x4e>
 8012f06:	f8b1 a000 	ldrh.w	sl, [r1]
 8012f0a:	f1ba 0f00 	cmp.w	sl, #0
 8012f0e:	d01f      	beq.n	8012f50 <__multiply+0xe4>
 8012f10:	46c4      	mov	ip, r8
 8012f12:	46a1      	mov	r9, r4
 8012f14:	2700      	movs	r7, #0
 8012f16:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012f1a:	f8d9 3000 	ldr.w	r3, [r9]
 8012f1e:	fa1f fb82 	uxth.w	fp, r2
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	fb0a 330b 	mla	r3, sl, fp, r3
 8012f28:	443b      	add	r3, r7
 8012f2a:	f8d9 7000 	ldr.w	r7, [r9]
 8012f2e:	0c12      	lsrs	r2, r2, #16
 8012f30:	0c3f      	lsrs	r7, r7, #16
 8012f32:	fb0a 7202 	mla	r2, sl, r2, r7
 8012f36:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8012f3a:	b29b      	uxth	r3, r3
 8012f3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012f40:	4565      	cmp	r5, ip
 8012f42:	f849 3b04 	str.w	r3, [r9], #4
 8012f46:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8012f4a:	d8e4      	bhi.n	8012f16 <__multiply+0xaa>
 8012f4c:	9b01      	ldr	r3, [sp, #4]
 8012f4e:	50e7      	str	r7, [r4, r3]
 8012f50:	9b03      	ldr	r3, [sp, #12]
 8012f52:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012f56:	3104      	adds	r1, #4
 8012f58:	f1b9 0f00 	cmp.w	r9, #0
 8012f5c:	d020      	beq.n	8012fa0 <__multiply+0x134>
 8012f5e:	6823      	ldr	r3, [r4, #0]
 8012f60:	4647      	mov	r7, r8
 8012f62:	46a4      	mov	ip, r4
 8012f64:	f04f 0a00 	mov.w	sl, #0
 8012f68:	f8b7 b000 	ldrh.w	fp, [r7]
 8012f6c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8012f70:	fb09 220b 	mla	r2, r9, fp, r2
 8012f74:	4452      	add	r2, sl
 8012f76:	b29b      	uxth	r3, r3
 8012f78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012f7c:	f84c 3b04 	str.w	r3, [ip], #4
 8012f80:	f857 3b04 	ldr.w	r3, [r7], #4
 8012f84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012f88:	f8bc 3000 	ldrh.w	r3, [ip]
 8012f8c:	fb09 330a 	mla	r3, r9, sl, r3
 8012f90:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8012f94:	42bd      	cmp	r5, r7
 8012f96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012f9a:	d8e5      	bhi.n	8012f68 <__multiply+0xfc>
 8012f9c:	9a01      	ldr	r2, [sp, #4]
 8012f9e:	50a3      	str	r3, [r4, r2]
 8012fa0:	3404      	adds	r4, #4
 8012fa2:	e79f      	b.n	8012ee4 <__multiply+0x78>
 8012fa4:	3e01      	subs	r6, #1
 8012fa6:	e7a1      	b.n	8012eec <__multiply+0x80>
 8012fa8:	08016c23 	.word	0x08016c23
 8012fac:	08016c34 	.word	0x08016c34

08012fb0 <__pow5mult>:
 8012fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fb4:	4615      	mov	r5, r2
 8012fb6:	f012 0203 	ands.w	r2, r2, #3
 8012fba:	4607      	mov	r7, r0
 8012fbc:	460e      	mov	r6, r1
 8012fbe:	d007      	beq.n	8012fd0 <__pow5mult+0x20>
 8012fc0:	4c25      	ldr	r4, [pc, #148]	@ (8013058 <__pow5mult+0xa8>)
 8012fc2:	3a01      	subs	r2, #1
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012fca:	f7ff fe5d 	bl	8012c88 <__multadd>
 8012fce:	4606      	mov	r6, r0
 8012fd0:	10ad      	asrs	r5, r5, #2
 8012fd2:	d03d      	beq.n	8013050 <__pow5mult+0xa0>
 8012fd4:	69fc      	ldr	r4, [r7, #28]
 8012fd6:	b97c      	cbnz	r4, 8012ff8 <__pow5mult+0x48>
 8012fd8:	2010      	movs	r0, #16
 8012fda:	f7ff fd3d 	bl	8012a58 <malloc>
 8012fde:	4602      	mov	r2, r0
 8012fe0:	61f8      	str	r0, [r7, #28]
 8012fe2:	b928      	cbnz	r0, 8012ff0 <__pow5mult+0x40>
 8012fe4:	4b1d      	ldr	r3, [pc, #116]	@ (801305c <__pow5mult+0xac>)
 8012fe6:	481e      	ldr	r0, [pc, #120]	@ (8013060 <__pow5mult+0xb0>)
 8012fe8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012fec:	f002 f870 	bl	80150d0 <__assert_func>
 8012ff0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012ff4:	6004      	str	r4, [r0, #0]
 8012ff6:	60c4      	str	r4, [r0, #12]
 8012ff8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012ffc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013000:	b94c      	cbnz	r4, 8013016 <__pow5mult+0x66>
 8013002:	f240 2171 	movw	r1, #625	@ 0x271
 8013006:	4638      	mov	r0, r7
 8013008:	f7ff ff1a 	bl	8012e40 <__i2b>
 801300c:	2300      	movs	r3, #0
 801300e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013012:	4604      	mov	r4, r0
 8013014:	6003      	str	r3, [r0, #0]
 8013016:	f04f 0900 	mov.w	r9, #0
 801301a:	07eb      	lsls	r3, r5, #31
 801301c:	d50a      	bpl.n	8013034 <__pow5mult+0x84>
 801301e:	4631      	mov	r1, r6
 8013020:	4622      	mov	r2, r4
 8013022:	4638      	mov	r0, r7
 8013024:	f7ff ff22 	bl	8012e6c <__multiply>
 8013028:	4631      	mov	r1, r6
 801302a:	4680      	mov	r8, r0
 801302c:	4638      	mov	r0, r7
 801302e:	f7ff fe09 	bl	8012c44 <_Bfree>
 8013032:	4646      	mov	r6, r8
 8013034:	106d      	asrs	r5, r5, #1
 8013036:	d00b      	beq.n	8013050 <__pow5mult+0xa0>
 8013038:	6820      	ldr	r0, [r4, #0]
 801303a:	b938      	cbnz	r0, 801304c <__pow5mult+0x9c>
 801303c:	4622      	mov	r2, r4
 801303e:	4621      	mov	r1, r4
 8013040:	4638      	mov	r0, r7
 8013042:	f7ff ff13 	bl	8012e6c <__multiply>
 8013046:	6020      	str	r0, [r4, #0]
 8013048:	f8c0 9000 	str.w	r9, [r0]
 801304c:	4604      	mov	r4, r0
 801304e:	e7e4      	b.n	801301a <__pow5mult+0x6a>
 8013050:	4630      	mov	r0, r6
 8013052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013056:	bf00      	nop
 8013058:	08016d60 	.word	0x08016d60
 801305c:	08016bb4 	.word	0x08016bb4
 8013060:	08016c34 	.word	0x08016c34

08013064 <__lshift>:
 8013064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013068:	460c      	mov	r4, r1
 801306a:	6849      	ldr	r1, [r1, #4]
 801306c:	6923      	ldr	r3, [r4, #16]
 801306e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013072:	68a3      	ldr	r3, [r4, #8]
 8013074:	4607      	mov	r7, r0
 8013076:	4691      	mov	r9, r2
 8013078:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801307c:	f108 0601 	add.w	r6, r8, #1
 8013080:	42b3      	cmp	r3, r6
 8013082:	db0b      	blt.n	801309c <__lshift+0x38>
 8013084:	4638      	mov	r0, r7
 8013086:	f7ff fd9d 	bl	8012bc4 <_Balloc>
 801308a:	4605      	mov	r5, r0
 801308c:	b948      	cbnz	r0, 80130a2 <__lshift+0x3e>
 801308e:	4602      	mov	r2, r0
 8013090:	4b28      	ldr	r3, [pc, #160]	@ (8013134 <__lshift+0xd0>)
 8013092:	4829      	ldr	r0, [pc, #164]	@ (8013138 <__lshift+0xd4>)
 8013094:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013098:	f002 f81a 	bl	80150d0 <__assert_func>
 801309c:	3101      	adds	r1, #1
 801309e:	005b      	lsls	r3, r3, #1
 80130a0:	e7ee      	b.n	8013080 <__lshift+0x1c>
 80130a2:	2300      	movs	r3, #0
 80130a4:	f100 0114 	add.w	r1, r0, #20
 80130a8:	f100 0210 	add.w	r2, r0, #16
 80130ac:	4618      	mov	r0, r3
 80130ae:	4553      	cmp	r3, sl
 80130b0:	db33      	blt.n	801311a <__lshift+0xb6>
 80130b2:	6920      	ldr	r0, [r4, #16]
 80130b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80130b8:	f104 0314 	add.w	r3, r4, #20
 80130bc:	f019 091f 	ands.w	r9, r9, #31
 80130c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80130c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80130c8:	d02b      	beq.n	8013122 <__lshift+0xbe>
 80130ca:	f1c9 0e20 	rsb	lr, r9, #32
 80130ce:	468a      	mov	sl, r1
 80130d0:	2200      	movs	r2, #0
 80130d2:	6818      	ldr	r0, [r3, #0]
 80130d4:	fa00 f009 	lsl.w	r0, r0, r9
 80130d8:	4310      	orrs	r0, r2
 80130da:	f84a 0b04 	str.w	r0, [sl], #4
 80130de:	f853 2b04 	ldr.w	r2, [r3], #4
 80130e2:	459c      	cmp	ip, r3
 80130e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80130e8:	d8f3      	bhi.n	80130d2 <__lshift+0x6e>
 80130ea:	ebac 0304 	sub.w	r3, ip, r4
 80130ee:	3b15      	subs	r3, #21
 80130f0:	f023 0303 	bic.w	r3, r3, #3
 80130f4:	3304      	adds	r3, #4
 80130f6:	f104 0015 	add.w	r0, r4, #21
 80130fa:	4560      	cmp	r0, ip
 80130fc:	bf88      	it	hi
 80130fe:	2304      	movhi	r3, #4
 8013100:	50ca      	str	r2, [r1, r3]
 8013102:	b10a      	cbz	r2, 8013108 <__lshift+0xa4>
 8013104:	f108 0602 	add.w	r6, r8, #2
 8013108:	3e01      	subs	r6, #1
 801310a:	4638      	mov	r0, r7
 801310c:	612e      	str	r6, [r5, #16]
 801310e:	4621      	mov	r1, r4
 8013110:	f7ff fd98 	bl	8012c44 <_Bfree>
 8013114:	4628      	mov	r0, r5
 8013116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801311a:	f842 0f04 	str.w	r0, [r2, #4]!
 801311e:	3301      	adds	r3, #1
 8013120:	e7c5      	b.n	80130ae <__lshift+0x4a>
 8013122:	3904      	subs	r1, #4
 8013124:	f853 2b04 	ldr.w	r2, [r3], #4
 8013128:	f841 2f04 	str.w	r2, [r1, #4]!
 801312c:	459c      	cmp	ip, r3
 801312e:	d8f9      	bhi.n	8013124 <__lshift+0xc0>
 8013130:	e7ea      	b.n	8013108 <__lshift+0xa4>
 8013132:	bf00      	nop
 8013134:	08016c23 	.word	0x08016c23
 8013138:	08016c34 	.word	0x08016c34

0801313c <__mcmp>:
 801313c:	690a      	ldr	r2, [r1, #16]
 801313e:	4603      	mov	r3, r0
 8013140:	6900      	ldr	r0, [r0, #16]
 8013142:	1a80      	subs	r0, r0, r2
 8013144:	b530      	push	{r4, r5, lr}
 8013146:	d10e      	bne.n	8013166 <__mcmp+0x2a>
 8013148:	3314      	adds	r3, #20
 801314a:	3114      	adds	r1, #20
 801314c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013150:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013154:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013158:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801315c:	4295      	cmp	r5, r2
 801315e:	d003      	beq.n	8013168 <__mcmp+0x2c>
 8013160:	d205      	bcs.n	801316e <__mcmp+0x32>
 8013162:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013166:	bd30      	pop	{r4, r5, pc}
 8013168:	42a3      	cmp	r3, r4
 801316a:	d3f3      	bcc.n	8013154 <__mcmp+0x18>
 801316c:	e7fb      	b.n	8013166 <__mcmp+0x2a>
 801316e:	2001      	movs	r0, #1
 8013170:	e7f9      	b.n	8013166 <__mcmp+0x2a>
	...

08013174 <__mdiff>:
 8013174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013178:	4689      	mov	r9, r1
 801317a:	4606      	mov	r6, r0
 801317c:	4611      	mov	r1, r2
 801317e:	4648      	mov	r0, r9
 8013180:	4614      	mov	r4, r2
 8013182:	f7ff ffdb 	bl	801313c <__mcmp>
 8013186:	1e05      	subs	r5, r0, #0
 8013188:	d112      	bne.n	80131b0 <__mdiff+0x3c>
 801318a:	4629      	mov	r1, r5
 801318c:	4630      	mov	r0, r6
 801318e:	f7ff fd19 	bl	8012bc4 <_Balloc>
 8013192:	4602      	mov	r2, r0
 8013194:	b928      	cbnz	r0, 80131a2 <__mdiff+0x2e>
 8013196:	4b3f      	ldr	r3, [pc, #252]	@ (8013294 <__mdiff+0x120>)
 8013198:	f240 2137 	movw	r1, #567	@ 0x237
 801319c:	483e      	ldr	r0, [pc, #248]	@ (8013298 <__mdiff+0x124>)
 801319e:	f001 ff97 	bl	80150d0 <__assert_func>
 80131a2:	2301      	movs	r3, #1
 80131a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80131a8:	4610      	mov	r0, r2
 80131aa:	b003      	add	sp, #12
 80131ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131b0:	bfbc      	itt	lt
 80131b2:	464b      	movlt	r3, r9
 80131b4:	46a1      	movlt	r9, r4
 80131b6:	4630      	mov	r0, r6
 80131b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80131bc:	bfba      	itte	lt
 80131be:	461c      	movlt	r4, r3
 80131c0:	2501      	movlt	r5, #1
 80131c2:	2500      	movge	r5, #0
 80131c4:	f7ff fcfe 	bl	8012bc4 <_Balloc>
 80131c8:	4602      	mov	r2, r0
 80131ca:	b918      	cbnz	r0, 80131d4 <__mdiff+0x60>
 80131cc:	4b31      	ldr	r3, [pc, #196]	@ (8013294 <__mdiff+0x120>)
 80131ce:	f240 2145 	movw	r1, #581	@ 0x245
 80131d2:	e7e3      	b.n	801319c <__mdiff+0x28>
 80131d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80131d8:	6926      	ldr	r6, [r4, #16]
 80131da:	60c5      	str	r5, [r0, #12]
 80131dc:	f109 0310 	add.w	r3, r9, #16
 80131e0:	f109 0514 	add.w	r5, r9, #20
 80131e4:	f104 0e14 	add.w	lr, r4, #20
 80131e8:	f100 0b14 	add.w	fp, r0, #20
 80131ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80131f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80131f4:	9301      	str	r3, [sp, #4]
 80131f6:	46d9      	mov	r9, fp
 80131f8:	f04f 0c00 	mov.w	ip, #0
 80131fc:	9b01      	ldr	r3, [sp, #4]
 80131fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013202:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013206:	9301      	str	r3, [sp, #4]
 8013208:	fa1f f38a 	uxth.w	r3, sl
 801320c:	4619      	mov	r1, r3
 801320e:	b283      	uxth	r3, r0
 8013210:	1acb      	subs	r3, r1, r3
 8013212:	0c00      	lsrs	r0, r0, #16
 8013214:	4463      	add	r3, ip
 8013216:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801321a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801321e:	b29b      	uxth	r3, r3
 8013220:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013224:	4576      	cmp	r6, lr
 8013226:	f849 3b04 	str.w	r3, [r9], #4
 801322a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801322e:	d8e5      	bhi.n	80131fc <__mdiff+0x88>
 8013230:	1b33      	subs	r3, r6, r4
 8013232:	3b15      	subs	r3, #21
 8013234:	f023 0303 	bic.w	r3, r3, #3
 8013238:	3415      	adds	r4, #21
 801323a:	3304      	adds	r3, #4
 801323c:	42a6      	cmp	r6, r4
 801323e:	bf38      	it	cc
 8013240:	2304      	movcc	r3, #4
 8013242:	441d      	add	r5, r3
 8013244:	445b      	add	r3, fp
 8013246:	461e      	mov	r6, r3
 8013248:	462c      	mov	r4, r5
 801324a:	4544      	cmp	r4, r8
 801324c:	d30e      	bcc.n	801326c <__mdiff+0xf8>
 801324e:	f108 0103 	add.w	r1, r8, #3
 8013252:	1b49      	subs	r1, r1, r5
 8013254:	f021 0103 	bic.w	r1, r1, #3
 8013258:	3d03      	subs	r5, #3
 801325a:	45a8      	cmp	r8, r5
 801325c:	bf38      	it	cc
 801325e:	2100      	movcc	r1, #0
 8013260:	440b      	add	r3, r1
 8013262:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013266:	b191      	cbz	r1, 801328e <__mdiff+0x11a>
 8013268:	6117      	str	r7, [r2, #16]
 801326a:	e79d      	b.n	80131a8 <__mdiff+0x34>
 801326c:	f854 1b04 	ldr.w	r1, [r4], #4
 8013270:	46e6      	mov	lr, ip
 8013272:	0c08      	lsrs	r0, r1, #16
 8013274:	fa1c fc81 	uxtah	ip, ip, r1
 8013278:	4471      	add	r1, lr
 801327a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801327e:	b289      	uxth	r1, r1
 8013280:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013284:	f846 1b04 	str.w	r1, [r6], #4
 8013288:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801328c:	e7dd      	b.n	801324a <__mdiff+0xd6>
 801328e:	3f01      	subs	r7, #1
 8013290:	e7e7      	b.n	8013262 <__mdiff+0xee>
 8013292:	bf00      	nop
 8013294:	08016c23 	.word	0x08016c23
 8013298:	08016c34 	.word	0x08016c34

0801329c <__ulp>:
 801329c:	b082      	sub	sp, #8
 801329e:	ed8d 0b00 	vstr	d0, [sp]
 80132a2:	9a01      	ldr	r2, [sp, #4]
 80132a4:	4b0f      	ldr	r3, [pc, #60]	@ (80132e4 <__ulp+0x48>)
 80132a6:	4013      	ands	r3, r2
 80132a8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	dc08      	bgt.n	80132c2 <__ulp+0x26>
 80132b0:	425b      	negs	r3, r3
 80132b2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80132b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80132ba:	da04      	bge.n	80132c6 <__ulp+0x2a>
 80132bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80132c0:	4113      	asrs	r3, r2
 80132c2:	2200      	movs	r2, #0
 80132c4:	e008      	b.n	80132d8 <__ulp+0x3c>
 80132c6:	f1a2 0314 	sub.w	r3, r2, #20
 80132ca:	2b1e      	cmp	r3, #30
 80132cc:	bfda      	itte	le
 80132ce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80132d2:	40da      	lsrle	r2, r3
 80132d4:	2201      	movgt	r2, #1
 80132d6:	2300      	movs	r3, #0
 80132d8:	4619      	mov	r1, r3
 80132da:	4610      	mov	r0, r2
 80132dc:	ec41 0b10 	vmov	d0, r0, r1
 80132e0:	b002      	add	sp, #8
 80132e2:	4770      	bx	lr
 80132e4:	7ff00000 	.word	0x7ff00000

080132e8 <__b2d>:
 80132e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132ec:	6906      	ldr	r6, [r0, #16]
 80132ee:	f100 0814 	add.w	r8, r0, #20
 80132f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80132f6:	1f37      	subs	r7, r6, #4
 80132f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80132fc:	4610      	mov	r0, r2
 80132fe:	f7ff fd53 	bl	8012da8 <__hi0bits>
 8013302:	f1c0 0320 	rsb	r3, r0, #32
 8013306:	280a      	cmp	r0, #10
 8013308:	600b      	str	r3, [r1, #0]
 801330a:	491b      	ldr	r1, [pc, #108]	@ (8013378 <__b2d+0x90>)
 801330c:	dc15      	bgt.n	801333a <__b2d+0x52>
 801330e:	f1c0 0c0b 	rsb	ip, r0, #11
 8013312:	fa22 f30c 	lsr.w	r3, r2, ip
 8013316:	45b8      	cmp	r8, r7
 8013318:	ea43 0501 	orr.w	r5, r3, r1
 801331c:	bf34      	ite	cc
 801331e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013322:	2300      	movcs	r3, #0
 8013324:	3015      	adds	r0, #21
 8013326:	fa02 f000 	lsl.w	r0, r2, r0
 801332a:	fa23 f30c 	lsr.w	r3, r3, ip
 801332e:	4303      	orrs	r3, r0
 8013330:	461c      	mov	r4, r3
 8013332:	ec45 4b10 	vmov	d0, r4, r5
 8013336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801333a:	45b8      	cmp	r8, r7
 801333c:	bf3a      	itte	cc
 801333e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013342:	f1a6 0708 	subcc.w	r7, r6, #8
 8013346:	2300      	movcs	r3, #0
 8013348:	380b      	subs	r0, #11
 801334a:	d012      	beq.n	8013372 <__b2d+0x8a>
 801334c:	f1c0 0120 	rsb	r1, r0, #32
 8013350:	fa23 f401 	lsr.w	r4, r3, r1
 8013354:	4082      	lsls	r2, r0
 8013356:	4322      	orrs	r2, r4
 8013358:	4547      	cmp	r7, r8
 801335a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801335e:	bf8c      	ite	hi
 8013360:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013364:	2200      	movls	r2, #0
 8013366:	4083      	lsls	r3, r0
 8013368:	40ca      	lsrs	r2, r1
 801336a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801336e:	4313      	orrs	r3, r2
 8013370:	e7de      	b.n	8013330 <__b2d+0x48>
 8013372:	ea42 0501 	orr.w	r5, r2, r1
 8013376:	e7db      	b.n	8013330 <__b2d+0x48>
 8013378:	3ff00000 	.word	0x3ff00000

0801337c <__d2b>:
 801337c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013380:	460f      	mov	r7, r1
 8013382:	2101      	movs	r1, #1
 8013384:	ec59 8b10 	vmov	r8, r9, d0
 8013388:	4616      	mov	r6, r2
 801338a:	f7ff fc1b 	bl	8012bc4 <_Balloc>
 801338e:	4604      	mov	r4, r0
 8013390:	b930      	cbnz	r0, 80133a0 <__d2b+0x24>
 8013392:	4602      	mov	r2, r0
 8013394:	4b23      	ldr	r3, [pc, #140]	@ (8013424 <__d2b+0xa8>)
 8013396:	4824      	ldr	r0, [pc, #144]	@ (8013428 <__d2b+0xac>)
 8013398:	f240 310f 	movw	r1, #783	@ 0x30f
 801339c:	f001 fe98 	bl	80150d0 <__assert_func>
 80133a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80133a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80133a8:	b10d      	cbz	r5, 80133ae <__d2b+0x32>
 80133aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80133ae:	9301      	str	r3, [sp, #4]
 80133b0:	f1b8 0300 	subs.w	r3, r8, #0
 80133b4:	d023      	beq.n	80133fe <__d2b+0x82>
 80133b6:	4668      	mov	r0, sp
 80133b8:	9300      	str	r3, [sp, #0]
 80133ba:	f7ff fd14 	bl	8012de6 <__lo0bits>
 80133be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80133c2:	b1d0      	cbz	r0, 80133fa <__d2b+0x7e>
 80133c4:	f1c0 0320 	rsb	r3, r0, #32
 80133c8:	fa02 f303 	lsl.w	r3, r2, r3
 80133cc:	430b      	orrs	r3, r1
 80133ce:	40c2      	lsrs	r2, r0
 80133d0:	6163      	str	r3, [r4, #20]
 80133d2:	9201      	str	r2, [sp, #4]
 80133d4:	9b01      	ldr	r3, [sp, #4]
 80133d6:	61a3      	str	r3, [r4, #24]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	bf0c      	ite	eq
 80133dc:	2201      	moveq	r2, #1
 80133de:	2202      	movne	r2, #2
 80133e0:	6122      	str	r2, [r4, #16]
 80133e2:	b1a5      	cbz	r5, 801340e <__d2b+0x92>
 80133e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80133e8:	4405      	add	r5, r0
 80133ea:	603d      	str	r5, [r7, #0]
 80133ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80133f0:	6030      	str	r0, [r6, #0]
 80133f2:	4620      	mov	r0, r4
 80133f4:	b003      	add	sp, #12
 80133f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133fa:	6161      	str	r1, [r4, #20]
 80133fc:	e7ea      	b.n	80133d4 <__d2b+0x58>
 80133fe:	a801      	add	r0, sp, #4
 8013400:	f7ff fcf1 	bl	8012de6 <__lo0bits>
 8013404:	9b01      	ldr	r3, [sp, #4]
 8013406:	6163      	str	r3, [r4, #20]
 8013408:	3020      	adds	r0, #32
 801340a:	2201      	movs	r2, #1
 801340c:	e7e8      	b.n	80133e0 <__d2b+0x64>
 801340e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013412:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013416:	6038      	str	r0, [r7, #0]
 8013418:	6918      	ldr	r0, [r3, #16]
 801341a:	f7ff fcc5 	bl	8012da8 <__hi0bits>
 801341e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013422:	e7e5      	b.n	80133f0 <__d2b+0x74>
 8013424:	08016c23 	.word	0x08016c23
 8013428:	08016c34 	.word	0x08016c34

0801342c <__ratio>:
 801342c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013430:	4688      	mov	r8, r1
 8013432:	4669      	mov	r1, sp
 8013434:	4681      	mov	r9, r0
 8013436:	f7ff ff57 	bl	80132e8 <__b2d>
 801343a:	a901      	add	r1, sp, #4
 801343c:	4640      	mov	r0, r8
 801343e:	ec55 4b10 	vmov	r4, r5, d0
 8013442:	f7ff ff51 	bl	80132e8 <__b2d>
 8013446:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801344a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801344e:	1ad2      	subs	r2, r2, r3
 8013450:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013454:	1a5b      	subs	r3, r3, r1
 8013456:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801345a:	ec57 6b10 	vmov	r6, r7, d0
 801345e:	2b00      	cmp	r3, #0
 8013460:	bfd6      	itet	le
 8013462:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013466:	462a      	movgt	r2, r5
 8013468:	463a      	movle	r2, r7
 801346a:	46ab      	mov	fp, r5
 801346c:	46a2      	mov	sl, r4
 801346e:	bfce      	itee	gt
 8013470:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8013474:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8013478:	ee00 3a90 	vmovle	s1, r3
 801347c:	ec4b ab17 	vmov	d7, sl, fp
 8013480:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8013484:	b003      	add	sp, #12
 8013486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801348a <__copybits>:
 801348a:	3901      	subs	r1, #1
 801348c:	b570      	push	{r4, r5, r6, lr}
 801348e:	1149      	asrs	r1, r1, #5
 8013490:	6914      	ldr	r4, [r2, #16]
 8013492:	3101      	adds	r1, #1
 8013494:	f102 0314 	add.w	r3, r2, #20
 8013498:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801349c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80134a0:	1f05      	subs	r5, r0, #4
 80134a2:	42a3      	cmp	r3, r4
 80134a4:	d30c      	bcc.n	80134c0 <__copybits+0x36>
 80134a6:	1aa3      	subs	r3, r4, r2
 80134a8:	3b11      	subs	r3, #17
 80134aa:	f023 0303 	bic.w	r3, r3, #3
 80134ae:	3211      	adds	r2, #17
 80134b0:	42a2      	cmp	r2, r4
 80134b2:	bf88      	it	hi
 80134b4:	2300      	movhi	r3, #0
 80134b6:	4418      	add	r0, r3
 80134b8:	2300      	movs	r3, #0
 80134ba:	4288      	cmp	r0, r1
 80134bc:	d305      	bcc.n	80134ca <__copybits+0x40>
 80134be:	bd70      	pop	{r4, r5, r6, pc}
 80134c0:	f853 6b04 	ldr.w	r6, [r3], #4
 80134c4:	f845 6f04 	str.w	r6, [r5, #4]!
 80134c8:	e7eb      	b.n	80134a2 <__copybits+0x18>
 80134ca:	f840 3b04 	str.w	r3, [r0], #4
 80134ce:	e7f4      	b.n	80134ba <__copybits+0x30>

080134d0 <__any_on>:
 80134d0:	f100 0214 	add.w	r2, r0, #20
 80134d4:	6900      	ldr	r0, [r0, #16]
 80134d6:	114b      	asrs	r3, r1, #5
 80134d8:	4298      	cmp	r0, r3
 80134da:	b510      	push	{r4, lr}
 80134dc:	db11      	blt.n	8013502 <__any_on+0x32>
 80134de:	dd0a      	ble.n	80134f6 <__any_on+0x26>
 80134e0:	f011 011f 	ands.w	r1, r1, #31
 80134e4:	d007      	beq.n	80134f6 <__any_on+0x26>
 80134e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80134ea:	fa24 f001 	lsr.w	r0, r4, r1
 80134ee:	fa00 f101 	lsl.w	r1, r0, r1
 80134f2:	428c      	cmp	r4, r1
 80134f4:	d10b      	bne.n	801350e <__any_on+0x3e>
 80134f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80134fa:	4293      	cmp	r3, r2
 80134fc:	d803      	bhi.n	8013506 <__any_on+0x36>
 80134fe:	2000      	movs	r0, #0
 8013500:	bd10      	pop	{r4, pc}
 8013502:	4603      	mov	r3, r0
 8013504:	e7f7      	b.n	80134f6 <__any_on+0x26>
 8013506:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801350a:	2900      	cmp	r1, #0
 801350c:	d0f5      	beq.n	80134fa <__any_on+0x2a>
 801350e:	2001      	movs	r0, #1
 8013510:	e7f6      	b.n	8013500 <__any_on+0x30>

08013512 <sulp>:
 8013512:	b570      	push	{r4, r5, r6, lr}
 8013514:	4604      	mov	r4, r0
 8013516:	460d      	mov	r5, r1
 8013518:	4616      	mov	r6, r2
 801351a:	ec45 4b10 	vmov	d0, r4, r5
 801351e:	f7ff febd 	bl	801329c <__ulp>
 8013522:	b17e      	cbz	r6, 8013544 <sulp+0x32>
 8013524:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013528:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801352c:	2b00      	cmp	r3, #0
 801352e:	dd09      	ble.n	8013544 <sulp+0x32>
 8013530:	051b      	lsls	r3, r3, #20
 8013532:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8013536:	2000      	movs	r0, #0
 8013538:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801353c:	ec41 0b17 	vmov	d7, r0, r1
 8013540:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013544:	bd70      	pop	{r4, r5, r6, pc}
	...

08013548 <_strtod_l>:
 8013548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801354c:	ed2d 8b0a 	vpush	{d8-d12}
 8013550:	b097      	sub	sp, #92	@ 0x5c
 8013552:	4688      	mov	r8, r1
 8013554:	920e      	str	r2, [sp, #56]	@ 0x38
 8013556:	2200      	movs	r2, #0
 8013558:	9212      	str	r2, [sp, #72]	@ 0x48
 801355a:	9005      	str	r0, [sp, #20]
 801355c:	f04f 0a00 	mov.w	sl, #0
 8013560:	f04f 0b00 	mov.w	fp, #0
 8013564:	460a      	mov	r2, r1
 8013566:	9211      	str	r2, [sp, #68]	@ 0x44
 8013568:	7811      	ldrb	r1, [r2, #0]
 801356a:	292b      	cmp	r1, #43	@ 0x2b
 801356c:	d04c      	beq.n	8013608 <_strtod_l+0xc0>
 801356e:	d839      	bhi.n	80135e4 <_strtod_l+0x9c>
 8013570:	290d      	cmp	r1, #13
 8013572:	d833      	bhi.n	80135dc <_strtod_l+0x94>
 8013574:	2908      	cmp	r1, #8
 8013576:	d833      	bhi.n	80135e0 <_strtod_l+0x98>
 8013578:	2900      	cmp	r1, #0
 801357a:	d03c      	beq.n	80135f6 <_strtod_l+0xae>
 801357c:	2200      	movs	r2, #0
 801357e:	9208      	str	r2, [sp, #32]
 8013580:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8013582:	782a      	ldrb	r2, [r5, #0]
 8013584:	2a30      	cmp	r2, #48	@ 0x30
 8013586:	f040 80b7 	bne.w	80136f8 <_strtod_l+0x1b0>
 801358a:	786a      	ldrb	r2, [r5, #1]
 801358c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013590:	2a58      	cmp	r2, #88	@ 0x58
 8013592:	d170      	bne.n	8013676 <_strtod_l+0x12e>
 8013594:	9302      	str	r3, [sp, #8]
 8013596:	9b08      	ldr	r3, [sp, #32]
 8013598:	9301      	str	r3, [sp, #4]
 801359a:	ab12      	add	r3, sp, #72	@ 0x48
 801359c:	9300      	str	r3, [sp, #0]
 801359e:	4a90      	ldr	r2, [pc, #576]	@ (80137e0 <_strtod_l+0x298>)
 80135a0:	9805      	ldr	r0, [sp, #20]
 80135a2:	ab13      	add	r3, sp, #76	@ 0x4c
 80135a4:	a911      	add	r1, sp, #68	@ 0x44
 80135a6:	f001 fe2d 	bl	8015204 <__gethex>
 80135aa:	f010 060f 	ands.w	r6, r0, #15
 80135ae:	4604      	mov	r4, r0
 80135b0:	d005      	beq.n	80135be <_strtod_l+0x76>
 80135b2:	2e06      	cmp	r6, #6
 80135b4:	d12a      	bne.n	801360c <_strtod_l+0xc4>
 80135b6:	3501      	adds	r5, #1
 80135b8:	2300      	movs	r3, #0
 80135ba:	9511      	str	r5, [sp, #68]	@ 0x44
 80135bc:	9308      	str	r3, [sp, #32]
 80135be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	f040 8537 	bne.w	8014034 <_strtod_l+0xaec>
 80135c6:	9b08      	ldr	r3, [sp, #32]
 80135c8:	ec4b ab10 	vmov	d0, sl, fp
 80135cc:	b1cb      	cbz	r3, 8013602 <_strtod_l+0xba>
 80135ce:	eeb1 0b40 	vneg.f64	d0, d0
 80135d2:	b017      	add	sp, #92	@ 0x5c
 80135d4:	ecbd 8b0a 	vpop	{d8-d12}
 80135d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135dc:	2920      	cmp	r1, #32
 80135de:	d1cd      	bne.n	801357c <_strtod_l+0x34>
 80135e0:	3201      	adds	r2, #1
 80135e2:	e7c0      	b.n	8013566 <_strtod_l+0x1e>
 80135e4:	292d      	cmp	r1, #45	@ 0x2d
 80135e6:	d1c9      	bne.n	801357c <_strtod_l+0x34>
 80135e8:	2101      	movs	r1, #1
 80135ea:	9108      	str	r1, [sp, #32]
 80135ec:	1c51      	adds	r1, r2, #1
 80135ee:	9111      	str	r1, [sp, #68]	@ 0x44
 80135f0:	7852      	ldrb	r2, [r2, #1]
 80135f2:	2a00      	cmp	r2, #0
 80135f4:	d1c4      	bne.n	8013580 <_strtod_l+0x38>
 80135f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80135f8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	f040 8517 	bne.w	8014030 <_strtod_l+0xae8>
 8013602:	ec4b ab10 	vmov	d0, sl, fp
 8013606:	e7e4      	b.n	80135d2 <_strtod_l+0x8a>
 8013608:	2100      	movs	r1, #0
 801360a:	e7ee      	b.n	80135ea <_strtod_l+0xa2>
 801360c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801360e:	b13a      	cbz	r2, 8013620 <_strtod_l+0xd8>
 8013610:	2135      	movs	r1, #53	@ 0x35
 8013612:	a814      	add	r0, sp, #80	@ 0x50
 8013614:	f7ff ff39 	bl	801348a <__copybits>
 8013618:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801361a:	9805      	ldr	r0, [sp, #20]
 801361c:	f7ff fb12 	bl	8012c44 <_Bfree>
 8013620:	1e73      	subs	r3, r6, #1
 8013622:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013624:	2b04      	cmp	r3, #4
 8013626:	d806      	bhi.n	8013636 <_strtod_l+0xee>
 8013628:	e8df f003 	tbb	[pc, r3]
 801362c:	201d0314 	.word	0x201d0314
 8013630:	14          	.byte	0x14
 8013631:	00          	.byte	0x00
 8013632:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8013636:	05e3      	lsls	r3, r4, #23
 8013638:	bf48      	it	mi
 801363a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801363e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013642:	0d1b      	lsrs	r3, r3, #20
 8013644:	051b      	lsls	r3, r3, #20
 8013646:	2b00      	cmp	r3, #0
 8013648:	d1b9      	bne.n	80135be <_strtod_l+0x76>
 801364a:	f7fe fb93 	bl	8011d74 <__errno>
 801364e:	2322      	movs	r3, #34	@ 0x22
 8013650:	6003      	str	r3, [r0, #0]
 8013652:	e7b4      	b.n	80135be <_strtod_l+0x76>
 8013654:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8013658:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801365c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013660:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013664:	e7e7      	b.n	8013636 <_strtod_l+0xee>
 8013666:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80137e8 <_strtod_l+0x2a0>
 801366a:	e7e4      	b.n	8013636 <_strtod_l+0xee>
 801366c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013670:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013674:	e7df      	b.n	8013636 <_strtod_l+0xee>
 8013676:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013678:	1c5a      	adds	r2, r3, #1
 801367a:	9211      	str	r2, [sp, #68]	@ 0x44
 801367c:	785b      	ldrb	r3, [r3, #1]
 801367e:	2b30      	cmp	r3, #48	@ 0x30
 8013680:	d0f9      	beq.n	8013676 <_strtod_l+0x12e>
 8013682:	2b00      	cmp	r3, #0
 8013684:	d09b      	beq.n	80135be <_strtod_l+0x76>
 8013686:	2301      	movs	r3, #1
 8013688:	9307      	str	r3, [sp, #28]
 801368a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801368c:	930a      	str	r3, [sp, #40]	@ 0x28
 801368e:	2300      	movs	r3, #0
 8013690:	9306      	str	r3, [sp, #24]
 8013692:	4699      	mov	r9, r3
 8013694:	461d      	mov	r5, r3
 8013696:	220a      	movs	r2, #10
 8013698:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801369a:	7804      	ldrb	r4, [r0, #0]
 801369c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80136a0:	b2d9      	uxtb	r1, r3
 80136a2:	2909      	cmp	r1, #9
 80136a4:	d92a      	bls.n	80136fc <_strtod_l+0x1b4>
 80136a6:	494f      	ldr	r1, [pc, #316]	@ (80137e4 <_strtod_l+0x29c>)
 80136a8:	2201      	movs	r2, #1
 80136aa:	f7fe fb06 	bl	8011cba <strncmp>
 80136ae:	b398      	cbz	r0, 8013718 <_strtod_l+0x1d0>
 80136b0:	2000      	movs	r0, #0
 80136b2:	4622      	mov	r2, r4
 80136b4:	462b      	mov	r3, r5
 80136b6:	4607      	mov	r7, r0
 80136b8:	4601      	mov	r1, r0
 80136ba:	2a65      	cmp	r2, #101	@ 0x65
 80136bc:	d001      	beq.n	80136c2 <_strtod_l+0x17a>
 80136be:	2a45      	cmp	r2, #69	@ 0x45
 80136c0:	d118      	bne.n	80136f4 <_strtod_l+0x1ac>
 80136c2:	b91b      	cbnz	r3, 80136cc <_strtod_l+0x184>
 80136c4:	9b07      	ldr	r3, [sp, #28]
 80136c6:	4303      	orrs	r3, r0
 80136c8:	d095      	beq.n	80135f6 <_strtod_l+0xae>
 80136ca:	2300      	movs	r3, #0
 80136cc:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80136d0:	f108 0201 	add.w	r2, r8, #1
 80136d4:	9211      	str	r2, [sp, #68]	@ 0x44
 80136d6:	f898 2001 	ldrb.w	r2, [r8, #1]
 80136da:	2a2b      	cmp	r2, #43	@ 0x2b
 80136dc:	d074      	beq.n	80137c8 <_strtod_l+0x280>
 80136de:	2a2d      	cmp	r2, #45	@ 0x2d
 80136e0:	d07a      	beq.n	80137d8 <_strtod_l+0x290>
 80136e2:	f04f 0e00 	mov.w	lr, #0
 80136e6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80136ea:	2c09      	cmp	r4, #9
 80136ec:	f240 8082 	bls.w	80137f4 <_strtod_l+0x2ac>
 80136f0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80136f4:	2400      	movs	r4, #0
 80136f6:	e09d      	b.n	8013834 <_strtod_l+0x2ec>
 80136f8:	2300      	movs	r3, #0
 80136fa:	e7c5      	b.n	8013688 <_strtod_l+0x140>
 80136fc:	2d08      	cmp	r5, #8
 80136fe:	bfc8      	it	gt
 8013700:	9906      	ldrgt	r1, [sp, #24]
 8013702:	f100 0001 	add.w	r0, r0, #1
 8013706:	bfca      	itet	gt
 8013708:	fb02 3301 	mlagt	r3, r2, r1, r3
 801370c:	fb02 3909 	mlale	r9, r2, r9, r3
 8013710:	9306      	strgt	r3, [sp, #24]
 8013712:	3501      	adds	r5, #1
 8013714:	9011      	str	r0, [sp, #68]	@ 0x44
 8013716:	e7bf      	b.n	8013698 <_strtod_l+0x150>
 8013718:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801371a:	1c5a      	adds	r2, r3, #1
 801371c:	9211      	str	r2, [sp, #68]	@ 0x44
 801371e:	785a      	ldrb	r2, [r3, #1]
 8013720:	b3bd      	cbz	r5, 8013792 <_strtod_l+0x24a>
 8013722:	4607      	mov	r7, r0
 8013724:	462b      	mov	r3, r5
 8013726:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801372a:	2909      	cmp	r1, #9
 801372c:	d912      	bls.n	8013754 <_strtod_l+0x20c>
 801372e:	2101      	movs	r1, #1
 8013730:	e7c3      	b.n	80136ba <_strtod_l+0x172>
 8013732:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013734:	1c5a      	adds	r2, r3, #1
 8013736:	9211      	str	r2, [sp, #68]	@ 0x44
 8013738:	785a      	ldrb	r2, [r3, #1]
 801373a:	3001      	adds	r0, #1
 801373c:	2a30      	cmp	r2, #48	@ 0x30
 801373e:	d0f8      	beq.n	8013732 <_strtod_l+0x1ea>
 8013740:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013744:	2b08      	cmp	r3, #8
 8013746:	f200 847a 	bhi.w	801403e <_strtod_l+0xaf6>
 801374a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801374c:	930a      	str	r3, [sp, #40]	@ 0x28
 801374e:	4607      	mov	r7, r0
 8013750:	2000      	movs	r0, #0
 8013752:	4603      	mov	r3, r0
 8013754:	3a30      	subs	r2, #48	@ 0x30
 8013756:	f100 0101 	add.w	r1, r0, #1
 801375a:	d014      	beq.n	8013786 <_strtod_l+0x23e>
 801375c:	440f      	add	r7, r1
 801375e:	469c      	mov	ip, r3
 8013760:	f04f 0e0a 	mov.w	lr, #10
 8013764:	f10c 0401 	add.w	r4, ip, #1
 8013768:	1ae6      	subs	r6, r4, r3
 801376a:	42b1      	cmp	r1, r6
 801376c:	dc13      	bgt.n	8013796 <_strtod_l+0x24e>
 801376e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013772:	1819      	adds	r1, r3, r0
 8013774:	2908      	cmp	r1, #8
 8013776:	f103 0301 	add.w	r3, r3, #1
 801377a:	4403      	add	r3, r0
 801377c:	dc19      	bgt.n	80137b2 <_strtod_l+0x26a>
 801377e:	210a      	movs	r1, #10
 8013780:	fb01 2909 	mla	r9, r1, r9, r2
 8013784:	2100      	movs	r1, #0
 8013786:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013788:	1c50      	adds	r0, r2, #1
 801378a:	9011      	str	r0, [sp, #68]	@ 0x44
 801378c:	7852      	ldrb	r2, [r2, #1]
 801378e:	4608      	mov	r0, r1
 8013790:	e7c9      	b.n	8013726 <_strtod_l+0x1de>
 8013792:	4628      	mov	r0, r5
 8013794:	e7d2      	b.n	801373c <_strtod_l+0x1f4>
 8013796:	f1bc 0f08 	cmp.w	ip, #8
 801379a:	dc03      	bgt.n	80137a4 <_strtod_l+0x25c>
 801379c:	fb0e f909 	mul.w	r9, lr, r9
 80137a0:	46a4      	mov	ip, r4
 80137a2:	e7df      	b.n	8013764 <_strtod_l+0x21c>
 80137a4:	2c10      	cmp	r4, #16
 80137a6:	bfde      	ittt	le
 80137a8:	9e06      	ldrle	r6, [sp, #24]
 80137aa:	fb0e f606 	mulle.w	r6, lr, r6
 80137ae:	9606      	strle	r6, [sp, #24]
 80137b0:	e7f6      	b.n	80137a0 <_strtod_l+0x258>
 80137b2:	290f      	cmp	r1, #15
 80137b4:	bfdf      	itttt	le
 80137b6:	9806      	ldrle	r0, [sp, #24]
 80137b8:	210a      	movle	r1, #10
 80137ba:	fb01 2200 	mlale	r2, r1, r0, r2
 80137be:	9206      	strle	r2, [sp, #24]
 80137c0:	e7e0      	b.n	8013784 <_strtod_l+0x23c>
 80137c2:	2700      	movs	r7, #0
 80137c4:	2101      	movs	r1, #1
 80137c6:	e77d      	b.n	80136c4 <_strtod_l+0x17c>
 80137c8:	f04f 0e00 	mov.w	lr, #0
 80137cc:	f108 0202 	add.w	r2, r8, #2
 80137d0:	9211      	str	r2, [sp, #68]	@ 0x44
 80137d2:	f898 2002 	ldrb.w	r2, [r8, #2]
 80137d6:	e786      	b.n	80136e6 <_strtod_l+0x19e>
 80137d8:	f04f 0e01 	mov.w	lr, #1
 80137dc:	e7f6      	b.n	80137cc <_strtod_l+0x284>
 80137de:	bf00      	nop
 80137e0:	08016e74 	.word	0x08016e74
 80137e4:	08016c8d 	.word	0x08016c8d
 80137e8:	7ff00000 	.word	0x7ff00000
 80137ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80137ee:	1c54      	adds	r4, r2, #1
 80137f0:	9411      	str	r4, [sp, #68]	@ 0x44
 80137f2:	7852      	ldrb	r2, [r2, #1]
 80137f4:	2a30      	cmp	r2, #48	@ 0x30
 80137f6:	d0f9      	beq.n	80137ec <_strtod_l+0x2a4>
 80137f8:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80137fc:	2c08      	cmp	r4, #8
 80137fe:	f63f af79 	bhi.w	80136f4 <_strtod_l+0x1ac>
 8013802:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8013806:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013808:	9209      	str	r2, [sp, #36]	@ 0x24
 801380a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801380c:	1c54      	adds	r4, r2, #1
 801380e:	9411      	str	r4, [sp, #68]	@ 0x44
 8013810:	7852      	ldrb	r2, [r2, #1]
 8013812:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8013816:	2e09      	cmp	r6, #9
 8013818:	d937      	bls.n	801388a <_strtod_l+0x342>
 801381a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801381c:	1ba4      	subs	r4, r4, r6
 801381e:	2c08      	cmp	r4, #8
 8013820:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8013824:	dc02      	bgt.n	801382c <_strtod_l+0x2e4>
 8013826:	4564      	cmp	r4, ip
 8013828:	bfa8      	it	ge
 801382a:	4664      	movge	r4, ip
 801382c:	f1be 0f00 	cmp.w	lr, #0
 8013830:	d000      	beq.n	8013834 <_strtod_l+0x2ec>
 8013832:	4264      	negs	r4, r4
 8013834:	2b00      	cmp	r3, #0
 8013836:	d14d      	bne.n	80138d4 <_strtod_l+0x38c>
 8013838:	9b07      	ldr	r3, [sp, #28]
 801383a:	4318      	orrs	r0, r3
 801383c:	f47f aebf 	bne.w	80135be <_strtod_l+0x76>
 8013840:	2900      	cmp	r1, #0
 8013842:	f47f aed8 	bne.w	80135f6 <_strtod_l+0xae>
 8013846:	2a69      	cmp	r2, #105	@ 0x69
 8013848:	d027      	beq.n	801389a <_strtod_l+0x352>
 801384a:	dc24      	bgt.n	8013896 <_strtod_l+0x34e>
 801384c:	2a49      	cmp	r2, #73	@ 0x49
 801384e:	d024      	beq.n	801389a <_strtod_l+0x352>
 8013850:	2a4e      	cmp	r2, #78	@ 0x4e
 8013852:	f47f aed0 	bne.w	80135f6 <_strtod_l+0xae>
 8013856:	4997      	ldr	r1, [pc, #604]	@ (8013ab4 <_strtod_l+0x56c>)
 8013858:	a811      	add	r0, sp, #68	@ 0x44
 801385a:	f001 fef5 	bl	8015648 <__match>
 801385e:	2800      	cmp	r0, #0
 8013860:	f43f aec9 	beq.w	80135f6 <_strtod_l+0xae>
 8013864:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013866:	781b      	ldrb	r3, [r3, #0]
 8013868:	2b28      	cmp	r3, #40	@ 0x28
 801386a:	d12d      	bne.n	80138c8 <_strtod_l+0x380>
 801386c:	4992      	ldr	r1, [pc, #584]	@ (8013ab8 <_strtod_l+0x570>)
 801386e:	aa14      	add	r2, sp, #80	@ 0x50
 8013870:	a811      	add	r0, sp, #68	@ 0x44
 8013872:	f001 fefd 	bl	8015670 <__hexnan>
 8013876:	2805      	cmp	r0, #5
 8013878:	d126      	bne.n	80138c8 <_strtod_l+0x380>
 801387a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801387c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8013880:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013884:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013888:	e699      	b.n	80135be <_strtod_l+0x76>
 801388a:	240a      	movs	r4, #10
 801388c:	fb04 2c0c 	mla	ip, r4, ip, r2
 8013890:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8013894:	e7b9      	b.n	801380a <_strtod_l+0x2c2>
 8013896:	2a6e      	cmp	r2, #110	@ 0x6e
 8013898:	e7db      	b.n	8013852 <_strtod_l+0x30a>
 801389a:	4988      	ldr	r1, [pc, #544]	@ (8013abc <_strtod_l+0x574>)
 801389c:	a811      	add	r0, sp, #68	@ 0x44
 801389e:	f001 fed3 	bl	8015648 <__match>
 80138a2:	2800      	cmp	r0, #0
 80138a4:	f43f aea7 	beq.w	80135f6 <_strtod_l+0xae>
 80138a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80138aa:	4985      	ldr	r1, [pc, #532]	@ (8013ac0 <_strtod_l+0x578>)
 80138ac:	3b01      	subs	r3, #1
 80138ae:	a811      	add	r0, sp, #68	@ 0x44
 80138b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80138b2:	f001 fec9 	bl	8015648 <__match>
 80138b6:	b910      	cbnz	r0, 80138be <_strtod_l+0x376>
 80138b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80138ba:	3301      	adds	r3, #1
 80138bc:	9311      	str	r3, [sp, #68]	@ 0x44
 80138be:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8013ad4 <_strtod_l+0x58c>
 80138c2:	f04f 0a00 	mov.w	sl, #0
 80138c6:	e67a      	b.n	80135be <_strtod_l+0x76>
 80138c8:	487e      	ldr	r0, [pc, #504]	@ (8013ac4 <_strtod_l+0x57c>)
 80138ca:	f001 fbf9 	bl	80150c0 <nan>
 80138ce:	ec5b ab10 	vmov	sl, fp, d0
 80138d2:	e674      	b.n	80135be <_strtod_l+0x76>
 80138d4:	ee07 9a90 	vmov	s15, r9
 80138d8:	1be2      	subs	r2, r4, r7
 80138da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80138de:	2d00      	cmp	r5, #0
 80138e0:	bf08      	it	eq
 80138e2:	461d      	moveq	r5, r3
 80138e4:	2b10      	cmp	r3, #16
 80138e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80138e8:	461a      	mov	r2, r3
 80138ea:	bfa8      	it	ge
 80138ec:	2210      	movge	r2, #16
 80138ee:	2b09      	cmp	r3, #9
 80138f0:	ec5b ab17 	vmov	sl, fp, d7
 80138f4:	dc15      	bgt.n	8013922 <_strtod_l+0x3da>
 80138f6:	1be1      	subs	r1, r4, r7
 80138f8:	2900      	cmp	r1, #0
 80138fa:	f43f ae60 	beq.w	80135be <_strtod_l+0x76>
 80138fe:	eba4 0107 	sub.w	r1, r4, r7
 8013902:	dd72      	ble.n	80139ea <_strtod_l+0x4a2>
 8013904:	2916      	cmp	r1, #22
 8013906:	dc59      	bgt.n	80139bc <_strtod_l+0x474>
 8013908:	4b6f      	ldr	r3, [pc, #444]	@ (8013ac8 <_strtod_l+0x580>)
 801390a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801390c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013910:	ed93 7b00 	vldr	d7, [r3]
 8013914:	ec4b ab16 	vmov	d6, sl, fp
 8013918:	ee27 7b06 	vmul.f64	d7, d7, d6
 801391c:	ec5b ab17 	vmov	sl, fp, d7
 8013920:	e64d      	b.n	80135be <_strtod_l+0x76>
 8013922:	4969      	ldr	r1, [pc, #420]	@ (8013ac8 <_strtod_l+0x580>)
 8013924:	eddd 6a06 	vldr	s13, [sp, #24]
 8013928:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801392c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8013930:	2b0f      	cmp	r3, #15
 8013932:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8013936:	eea7 6b05 	vfma.f64	d6, d7, d5
 801393a:	ec5b ab16 	vmov	sl, fp, d6
 801393e:	ddda      	ble.n	80138f6 <_strtod_l+0x3ae>
 8013940:	1a9a      	subs	r2, r3, r2
 8013942:	1be1      	subs	r1, r4, r7
 8013944:	440a      	add	r2, r1
 8013946:	2a00      	cmp	r2, #0
 8013948:	f340 8094 	ble.w	8013a74 <_strtod_l+0x52c>
 801394c:	f012 000f 	ands.w	r0, r2, #15
 8013950:	d00a      	beq.n	8013968 <_strtod_l+0x420>
 8013952:	495d      	ldr	r1, [pc, #372]	@ (8013ac8 <_strtod_l+0x580>)
 8013954:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013958:	ed91 7b00 	vldr	d7, [r1]
 801395c:	ec4b ab16 	vmov	d6, sl, fp
 8013960:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013964:	ec5b ab17 	vmov	sl, fp, d7
 8013968:	f032 020f 	bics.w	r2, r2, #15
 801396c:	d073      	beq.n	8013a56 <_strtod_l+0x50e>
 801396e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8013972:	dd47      	ble.n	8013a04 <_strtod_l+0x4bc>
 8013974:	2400      	movs	r4, #0
 8013976:	4625      	mov	r5, r4
 8013978:	9407      	str	r4, [sp, #28]
 801397a:	4626      	mov	r6, r4
 801397c:	9a05      	ldr	r2, [sp, #20]
 801397e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013ad4 <_strtod_l+0x58c>
 8013982:	2322      	movs	r3, #34	@ 0x22
 8013984:	6013      	str	r3, [r2, #0]
 8013986:	f04f 0a00 	mov.w	sl, #0
 801398a:	9b07      	ldr	r3, [sp, #28]
 801398c:	2b00      	cmp	r3, #0
 801398e:	f43f ae16 	beq.w	80135be <_strtod_l+0x76>
 8013992:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013994:	9805      	ldr	r0, [sp, #20]
 8013996:	f7ff f955 	bl	8012c44 <_Bfree>
 801399a:	9805      	ldr	r0, [sp, #20]
 801399c:	4631      	mov	r1, r6
 801399e:	f7ff f951 	bl	8012c44 <_Bfree>
 80139a2:	9805      	ldr	r0, [sp, #20]
 80139a4:	4629      	mov	r1, r5
 80139a6:	f7ff f94d 	bl	8012c44 <_Bfree>
 80139aa:	9907      	ldr	r1, [sp, #28]
 80139ac:	9805      	ldr	r0, [sp, #20]
 80139ae:	f7ff f949 	bl	8012c44 <_Bfree>
 80139b2:	9805      	ldr	r0, [sp, #20]
 80139b4:	4621      	mov	r1, r4
 80139b6:	f7ff f945 	bl	8012c44 <_Bfree>
 80139ba:	e600      	b.n	80135be <_strtod_l+0x76>
 80139bc:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80139c0:	1be0      	subs	r0, r4, r7
 80139c2:	4281      	cmp	r1, r0
 80139c4:	dbbc      	blt.n	8013940 <_strtod_l+0x3f8>
 80139c6:	4a40      	ldr	r2, [pc, #256]	@ (8013ac8 <_strtod_l+0x580>)
 80139c8:	f1c3 030f 	rsb	r3, r3, #15
 80139cc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80139d0:	ed91 7b00 	vldr	d7, [r1]
 80139d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80139d6:	ec4b ab16 	vmov	d6, sl, fp
 80139da:	1acb      	subs	r3, r1, r3
 80139dc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80139e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80139e4:	ed92 6b00 	vldr	d6, [r2]
 80139e8:	e796      	b.n	8013918 <_strtod_l+0x3d0>
 80139ea:	3116      	adds	r1, #22
 80139ec:	dba8      	blt.n	8013940 <_strtod_l+0x3f8>
 80139ee:	4b36      	ldr	r3, [pc, #216]	@ (8013ac8 <_strtod_l+0x580>)
 80139f0:	1b3c      	subs	r4, r7, r4
 80139f2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80139f6:	ed94 7b00 	vldr	d7, [r4]
 80139fa:	ec4b ab16 	vmov	d6, sl, fp
 80139fe:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013a02:	e78b      	b.n	801391c <_strtod_l+0x3d4>
 8013a04:	2000      	movs	r0, #0
 8013a06:	ec4b ab17 	vmov	d7, sl, fp
 8013a0a:	4e30      	ldr	r6, [pc, #192]	@ (8013acc <_strtod_l+0x584>)
 8013a0c:	1112      	asrs	r2, r2, #4
 8013a0e:	4601      	mov	r1, r0
 8013a10:	2a01      	cmp	r2, #1
 8013a12:	dc23      	bgt.n	8013a5c <_strtod_l+0x514>
 8013a14:	b108      	cbz	r0, 8013a1a <_strtod_l+0x4d2>
 8013a16:	ec5b ab17 	vmov	sl, fp, d7
 8013a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8013acc <_strtod_l+0x584>)
 8013a1c:	482c      	ldr	r0, [pc, #176]	@ (8013ad0 <_strtod_l+0x588>)
 8013a1e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013a22:	ed92 7b00 	vldr	d7, [r2]
 8013a26:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013a2a:	ec4b ab16 	vmov	d6, sl, fp
 8013a2e:	4a29      	ldr	r2, [pc, #164]	@ (8013ad4 <_strtod_l+0x58c>)
 8013a30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a34:	ee17 1a90 	vmov	r1, s15
 8013a38:	400a      	ands	r2, r1
 8013a3a:	4282      	cmp	r2, r0
 8013a3c:	ec5b ab17 	vmov	sl, fp, d7
 8013a40:	d898      	bhi.n	8013974 <_strtod_l+0x42c>
 8013a42:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8013a46:	4282      	cmp	r2, r0
 8013a48:	bf86      	itte	hi
 8013a4a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8013ad8 <_strtod_l+0x590>
 8013a4e:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8013a52:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8013a56:	2200      	movs	r2, #0
 8013a58:	9206      	str	r2, [sp, #24]
 8013a5a:	e076      	b.n	8013b4a <_strtod_l+0x602>
 8013a5c:	f012 0f01 	tst.w	r2, #1
 8013a60:	d004      	beq.n	8013a6c <_strtod_l+0x524>
 8013a62:	ed96 6b00 	vldr	d6, [r6]
 8013a66:	2001      	movs	r0, #1
 8013a68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a6c:	3101      	adds	r1, #1
 8013a6e:	1052      	asrs	r2, r2, #1
 8013a70:	3608      	adds	r6, #8
 8013a72:	e7cd      	b.n	8013a10 <_strtod_l+0x4c8>
 8013a74:	d0ef      	beq.n	8013a56 <_strtod_l+0x50e>
 8013a76:	4252      	negs	r2, r2
 8013a78:	f012 000f 	ands.w	r0, r2, #15
 8013a7c:	d00a      	beq.n	8013a94 <_strtod_l+0x54c>
 8013a7e:	4912      	ldr	r1, [pc, #72]	@ (8013ac8 <_strtod_l+0x580>)
 8013a80:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013a84:	ed91 7b00 	vldr	d7, [r1]
 8013a88:	ec4b ab16 	vmov	d6, sl, fp
 8013a8c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013a90:	ec5b ab17 	vmov	sl, fp, d7
 8013a94:	1112      	asrs	r2, r2, #4
 8013a96:	d0de      	beq.n	8013a56 <_strtod_l+0x50e>
 8013a98:	2a1f      	cmp	r2, #31
 8013a9a:	dd1f      	ble.n	8013adc <_strtod_l+0x594>
 8013a9c:	2400      	movs	r4, #0
 8013a9e:	4625      	mov	r5, r4
 8013aa0:	9407      	str	r4, [sp, #28]
 8013aa2:	4626      	mov	r6, r4
 8013aa4:	9a05      	ldr	r2, [sp, #20]
 8013aa6:	2322      	movs	r3, #34	@ 0x22
 8013aa8:	f04f 0a00 	mov.w	sl, #0
 8013aac:	f04f 0b00 	mov.w	fp, #0
 8013ab0:	6013      	str	r3, [r2, #0]
 8013ab2:	e76a      	b.n	801398a <_strtod_l+0x442>
 8013ab4:	08016b7d 	.word	0x08016b7d
 8013ab8:	08016e60 	.word	0x08016e60
 8013abc:	08016b75 	.word	0x08016b75
 8013ac0:	08016baa 	.word	0x08016baa
 8013ac4:	08016cfe 	.word	0x08016cfe
 8013ac8:	08016d98 	.word	0x08016d98
 8013acc:	08016d70 	.word	0x08016d70
 8013ad0:	7ca00000 	.word	0x7ca00000
 8013ad4:	7ff00000 	.word	0x7ff00000
 8013ad8:	7fefffff 	.word	0x7fefffff
 8013adc:	f012 0110 	ands.w	r1, r2, #16
 8013ae0:	bf18      	it	ne
 8013ae2:	216a      	movne	r1, #106	@ 0x6a
 8013ae4:	9106      	str	r1, [sp, #24]
 8013ae6:	ec4b ab17 	vmov	d7, sl, fp
 8013aea:	49af      	ldr	r1, [pc, #700]	@ (8013da8 <_strtod_l+0x860>)
 8013aec:	2000      	movs	r0, #0
 8013aee:	07d6      	lsls	r6, r2, #31
 8013af0:	d504      	bpl.n	8013afc <_strtod_l+0x5b4>
 8013af2:	ed91 6b00 	vldr	d6, [r1]
 8013af6:	2001      	movs	r0, #1
 8013af8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013afc:	1052      	asrs	r2, r2, #1
 8013afe:	f101 0108 	add.w	r1, r1, #8
 8013b02:	d1f4      	bne.n	8013aee <_strtod_l+0x5a6>
 8013b04:	b108      	cbz	r0, 8013b0a <_strtod_l+0x5c2>
 8013b06:	ec5b ab17 	vmov	sl, fp, d7
 8013b0a:	9a06      	ldr	r2, [sp, #24]
 8013b0c:	b1b2      	cbz	r2, 8013b3c <_strtod_l+0x5f4>
 8013b0e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8013b12:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8013b16:	2a00      	cmp	r2, #0
 8013b18:	4658      	mov	r0, fp
 8013b1a:	dd0f      	ble.n	8013b3c <_strtod_l+0x5f4>
 8013b1c:	2a1f      	cmp	r2, #31
 8013b1e:	dd55      	ble.n	8013bcc <_strtod_l+0x684>
 8013b20:	2a34      	cmp	r2, #52	@ 0x34
 8013b22:	bfde      	ittt	le
 8013b24:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 8013b28:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8013b2c:	408a      	lslle	r2, r1
 8013b2e:	f04f 0a00 	mov.w	sl, #0
 8013b32:	bfcc      	ite	gt
 8013b34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013b38:	ea02 0b00 	andle.w	fp, r2, r0
 8013b3c:	ec4b ab17 	vmov	d7, sl, fp
 8013b40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b48:	d0a8      	beq.n	8013a9c <_strtod_l+0x554>
 8013b4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013b4c:	9805      	ldr	r0, [sp, #20]
 8013b4e:	f8cd 9000 	str.w	r9, [sp]
 8013b52:	462a      	mov	r2, r5
 8013b54:	f7ff f8de 	bl	8012d14 <__s2b>
 8013b58:	9007      	str	r0, [sp, #28]
 8013b5a:	2800      	cmp	r0, #0
 8013b5c:	f43f af0a 	beq.w	8013974 <_strtod_l+0x42c>
 8013b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b62:	1b3f      	subs	r7, r7, r4
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	bfb4      	ite	lt
 8013b68:	463b      	movlt	r3, r7
 8013b6a:	2300      	movge	r3, #0
 8013b6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8013b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b70:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8013d98 <_strtod_l+0x850>
 8013b74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013b78:	2400      	movs	r4, #0
 8013b7a:	930d      	str	r3, [sp, #52]	@ 0x34
 8013b7c:	4625      	mov	r5, r4
 8013b7e:	9b07      	ldr	r3, [sp, #28]
 8013b80:	9805      	ldr	r0, [sp, #20]
 8013b82:	6859      	ldr	r1, [r3, #4]
 8013b84:	f7ff f81e 	bl	8012bc4 <_Balloc>
 8013b88:	4606      	mov	r6, r0
 8013b8a:	2800      	cmp	r0, #0
 8013b8c:	f43f aef6 	beq.w	801397c <_strtod_l+0x434>
 8013b90:	9b07      	ldr	r3, [sp, #28]
 8013b92:	691a      	ldr	r2, [r3, #16]
 8013b94:	ec4b ab19 	vmov	d9, sl, fp
 8013b98:	3202      	adds	r2, #2
 8013b9a:	f103 010c 	add.w	r1, r3, #12
 8013b9e:	0092      	lsls	r2, r2, #2
 8013ba0:	300c      	adds	r0, #12
 8013ba2:	f7fe f914 	bl	8011dce <memcpy>
 8013ba6:	eeb0 0b49 	vmov.f64	d0, d9
 8013baa:	9805      	ldr	r0, [sp, #20]
 8013bac:	aa14      	add	r2, sp, #80	@ 0x50
 8013bae:	a913      	add	r1, sp, #76	@ 0x4c
 8013bb0:	f7ff fbe4 	bl	801337c <__d2b>
 8013bb4:	9012      	str	r0, [sp, #72]	@ 0x48
 8013bb6:	2800      	cmp	r0, #0
 8013bb8:	f43f aee0 	beq.w	801397c <_strtod_l+0x434>
 8013bbc:	9805      	ldr	r0, [sp, #20]
 8013bbe:	2101      	movs	r1, #1
 8013bc0:	f7ff f93e 	bl	8012e40 <__i2b>
 8013bc4:	4605      	mov	r5, r0
 8013bc6:	b940      	cbnz	r0, 8013bda <_strtod_l+0x692>
 8013bc8:	2500      	movs	r5, #0
 8013bca:	e6d7      	b.n	801397c <_strtod_l+0x434>
 8013bcc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8013bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8013bd4:	ea02 0a0a 	and.w	sl, r2, sl
 8013bd8:	e7b0      	b.n	8013b3c <_strtod_l+0x5f4>
 8013bda:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8013bdc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013bde:	2f00      	cmp	r7, #0
 8013be0:	bfab      	itete	ge
 8013be2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8013be4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8013be6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8013bea:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8013bee:	bfac      	ite	ge
 8013bf0:	eb07 0903 	addge.w	r9, r7, r3
 8013bf4:	eba3 0807 	sublt.w	r8, r3, r7
 8013bf8:	9b06      	ldr	r3, [sp, #24]
 8013bfa:	1aff      	subs	r7, r7, r3
 8013bfc:	4417      	add	r7, r2
 8013bfe:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8013c02:	4a6a      	ldr	r2, [pc, #424]	@ (8013dac <_strtod_l+0x864>)
 8013c04:	3f01      	subs	r7, #1
 8013c06:	4297      	cmp	r7, r2
 8013c08:	da51      	bge.n	8013cae <_strtod_l+0x766>
 8013c0a:	1bd1      	subs	r1, r2, r7
 8013c0c:	291f      	cmp	r1, #31
 8013c0e:	eba3 0301 	sub.w	r3, r3, r1
 8013c12:	f04f 0201 	mov.w	r2, #1
 8013c16:	dc3e      	bgt.n	8013c96 <_strtod_l+0x74e>
 8013c18:	408a      	lsls	r2, r1
 8013c1a:	920c      	str	r2, [sp, #48]	@ 0x30
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013c20:	eb09 0703 	add.w	r7, r9, r3
 8013c24:	4498      	add	r8, r3
 8013c26:	9b06      	ldr	r3, [sp, #24]
 8013c28:	45b9      	cmp	r9, r7
 8013c2a:	4498      	add	r8, r3
 8013c2c:	464b      	mov	r3, r9
 8013c2e:	bfa8      	it	ge
 8013c30:	463b      	movge	r3, r7
 8013c32:	4543      	cmp	r3, r8
 8013c34:	bfa8      	it	ge
 8013c36:	4643      	movge	r3, r8
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	bfc2      	ittt	gt
 8013c3c:	1aff      	subgt	r7, r7, r3
 8013c3e:	eba8 0803 	subgt.w	r8, r8, r3
 8013c42:	eba9 0903 	subgt.w	r9, r9, r3
 8013c46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	dd16      	ble.n	8013c7a <_strtod_l+0x732>
 8013c4c:	4629      	mov	r1, r5
 8013c4e:	9805      	ldr	r0, [sp, #20]
 8013c50:	461a      	mov	r2, r3
 8013c52:	f7ff f9ad 	bl	8012fb0 <__pow5mult>
 8013c56:	4605      	mov	r5, r0
 8013c58:	2800      	cmp	r0, #0
 8013c5a:	d0b5      	beq.n	8013bc8 <_strtod_l+0x680>
 8013c5c:	4601      	mov	r1, r0
 8013c5e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013c60:	9805      	ldr	r0, [sp, #20]
 8013c62:	f7ff f903 	bl	8012e6c <__multiply>
 8013c66:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013c68:	2800      	cmp	r0, #0
 8013c6a:	f43f ae87 	beq.w	801397c <_strtod_l+0x434>
 8013c6e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013c70:	9805      	ldr	r0, [sp, #20]
 8013c72:	f7fe ffe7 	bl	8012c44 <_Bfree>
 8013c76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c78:	9312      	str	r3, [sp, #72]	@ 0x48
 8013c7a:	2f00      	cmp	r7, #0
 8013c7c:	dc1b      	bgt.n	8013cb6 <_strtod_l+0x76e>
 8013c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	dd21      	ble.n	8013cc8 <_strtod_l+0x780>
 8013c84:	4631      	mov	r1, r6
 8013c86:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013c88:	9805      	ldr	r0, [sp, #20]
 8013c8a:	f7ff f991 	bl	8012fb0 <__pow5mult>
 8013c8e:	4606      	mov	r6, r0
 8013c90:	b9d0      	cbnz	r0, 8013cc8 <_strtod_l+0x780>
 8013c92:	2600      	movs	r6, #0
 8013c94:	e672      	b.n	801397c <_strtod_l+0x434>
 8013c96:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8013c9a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8013c9e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8013ca2:	37e2      	adds	r7, #226	@ 0xe2
 8013ca4:	fa02 f107 	lsl.w	r1, r2, r7
 8013ca8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013caa:	920c      	str	r2, [sp, #48]	@ 0x30
 8013cac:	e7b8      	b.n	8013c20 <_strtod_l+0x6d8>
 8013cae:	2200      	movs	r2, #0
 8013cb0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013cb2:	2201      	movs	r2, #1
 8013cb4:	e7f9      	b.n	8013caa <_strtod_l+0x762>
 8013cb6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013cb8:	9805      	ldr	r0, [sp, #20]
 8013cba:	463a      	mov	r2, r7
 8013cbc:	f7ff f9d2 	bl	8013064 <__lshift>
 8013cc0:	9012      	str	r0, [sp, #72]	@ 0x48
 8013cc2:	2800      	cmp	r0, #0
 8013cc4:	d1db      	bne.n	8013c7e <_strtod_l+0x736>
 8013cc6:	e659      	b.n	801397c <_strtod_l+0x434>
 8013cc8:	f1b8 0f00 	cmp.w	r8, #0
 8013ccc:	dd07      	ble.n	8013cde <_strtod_l+0x796>
 8013cce:	4631      	mov	r1, r6
 8013cd0:	9805      	ldr	r0, [sp, #20]
 8013cd2:	4642      	mov	r2, r8
 8013cd4:	f7ff f9c6 	bl	8013064 <__lshift>
 8013cd8:	4606      	mov	r6, r0
 8013cda:	2800      	cmp	r0, #0
 8013cdc:	d0d9      	beq.n	8013c92 <_strtod_l+0x74a>
 8013cde:	f1b9 0f00 	cmp.w	r9, #0
 8013ce2:	dd08      	ble.n	8013cf6 <_strtod_l+0x7ae>
 8013ce4:	4629      	mov	r1, r5
 8013ce6:	9805      	ldr	r0, [sp, #20]
 8013ce8:	464a      	mov	r2, r9
 8013cea:	f7ff f9bb 	bl	8013064 <__lshift>
 8013cee:	4605      	mov	r5, r0
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	f43f ae43 	beq.w	801397c <_strtod_l+0x434>
 8013cf6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013cf8:	9805      	ldr	r0, [sp, #20]
 8013cfa:	4632      	mov	r2, r6
 8013cfc:	f7ff fa3a 	bl	8013174 <__mdiff>
 8013d00:	4604      	mov	r4, r0
 8013d02:	2800      	cmp	r0, #0
 8013d04:	f43f ae3a 	beq.w	801397c <_strtod_l+0x434>
 8013d08:	2300      	movs	r3, #0
 8013d0a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8013d0e:	60c3      	str	r3, [r0, #12]
 8013d10:	4629      	mov	r1, r5
 8013d12:	f7ff fa13 	bl	801313c <__mcmp>
 8013d16:	2800      	cmp	r0, #0
 8013d18:	da4c      	bge.n	8013db4 <_strtod_l+0x86c>
 8013d1a:	ea58 080a 	orrs.w	r8, r8, sl
 8013d1e:	d172      	bne.n	8013e06 <_strtod_l+0x8be>
 8013d20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d16e      	bne.n	8013e06 <_strtod_l+0x8be>
 8013d28:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013d2c:	0d1b      	lsrs	r3, r3, #20
 8013d2e:	051b      	lsls	r3, r3, #20
 8013d30:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013d34:	d967      	bls.n	8013e06 <_strtod_l+0x8be>
 8013d36:	6963      	ldr	r3, [r4, #20]
 8013d38:	b913      	cbnz	r3, 8013d40 <_strtod_l+0x7f8>
 8013d3a:	6923      	ldr	r3, [r4, #16]
 8013d3c:	2b01      	cmp	r3, #1
 8013d3e:	dd62      	ble.n	8013e06 <_strtod_l+0x8be>
 8013d40:	4621      	mov	r1, r4
 8013d42:	2201      	movs	r2, #1
 8013d44:	9805      	ldr	r0, [sp, #20]
 8013d46:	f7ff f98d 	bl	8013064 <__lshift>
 8013d4a:	4629      	mov	r1, r5
 8013d4c:	4604      	mov	r4, r0
 8013d4e:	f7ff f9f5 	bl	801313c <__mcmp>
 8013d52:	2800      	cmp	r0, #0
 8013d54:	dd57      	ble.n	8013e06 <_strtod_l+0x8be>
 8013d56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013d5a:	9a06      	ldr	r2, [sp, #24]
 8013d5c:	0d1b      	lsrs	r3, r3, #20
 8013d5e:	051b      	lsls	r3, r3, #20
 8013d60:	2a00      	cmp	r2, #0
 8013d62:	d06e      	beq.n	8013e42 <_strtod_l+0x8fa>
 8013d64:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013d68:	d86b      	bhi.n	8013e42 <_strtod_l+0x8fa>
 8013d6a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013d6e:	f67f ae99 	bls.w	8013aa4 <_strtod_l+0x55c>
 8013d72:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8013da0 <_strtod_l+0x858>
 8013d76:	ec4b ab16 	vmov	d6, sl, fp
 8013d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8013db0 <_strtod_l+0x868>)
 8013d7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013d80:	ee17 2a90 	vmov	r2, s15
 8013d84:	4013      	ands	r3, r2
 8013d86:	ec5b ab17 	vmov	sl, fp, d7
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	f47f ae01 	bne.w	8013992 <_strtod_l+0x44a>
 8013d90:	9a05      	ldr	r2, [sp, #20]
 8013d92:	2322      	movs	r3, #34	@ 0x22
 8013d94:	6013      	str	r3, [r2, #0]
 8013d96:	e5fc      	b.n	8013992 <_strtod_l+0x44a>
 8013d98:	ffc00000 	.word	0xffc00000
 8013d9c:	41dfffff 	.word	0x41dfffff
 8013da0:	00000000 	.word	0x00000000
 8013da4:	39500000 	.word	0x39500000
 8013da8:	08016e88 	.word	0x08016e88
 8013dac:	fffffc02 	.word	0xfffffc02
 8013db0:	7ff00000 	.word	0x7ff00000
 8013db4:	46d9      	mov	r9, fp
 8013db6:	d15d      	bne.n	8013e74 <_strtod_l+0x92c>
 8013db8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013dbc:	f1b8 0f00 	cmp.w	r8, #0
 8013dc0:	d02a      	beq.n	8013e18 <_strtod_l+0x8d0>
 8013dc2:	4aa9      	ldr	r2, [pc, #676]	@ (8014068 <_strtod_l+0xb20>)
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	d12a      	bne.n	8013e1e <_strtod_l+0x8d6>
 8013dc8:	9b06      	ldr	r3, [sp, #24]
 8013dca:	4652      	mov	r2, sl
 8013dcc:	b1fb      	cbz	r3, 8013e0e <_strtod_l+0x8c6>
 8013dce:	4ba7      	ldr	r3, [pc, #668]	@ (801406c <_strtod_l+0xb24>)
 8013dd0:	ea0b 0303 	and.w	r3, fp, r3
 8013dd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013dd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8013ddc:	d81a      	bhi.n	8013e14 <_strtod_l+0x8cc>
 8013dde:	0d1b      	lsrs	r3, r3, #20
 8013de0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013de4:	fa01 f303 	lsl.w	r3, r1, r3
 8013de8:	429a      	cmp	r2, r3
 8013dea:	d118      	bne.n	8013e1e <_strtod_l+0x8d6>
 8013dec:	4ba0      	ldr	r3, [pc, #640]	@ (8014070 <_strtod_l+0xb28>)
 8013dee:	4599      	cmp	r9, r3
 8013df0:	d102      	bne.n	8013df8 <_strtod_l+0x8b0>
 8013df2:	3201      	adds	r2, #1
 8013df4:	f43f adc2 	beq.w	801397c <_strtod_l+0x434>
 8013df8:	4b9c      	ldr	r3, [pc, #624]	@ (801406c <_strtod_l+0xb24>)
 8013dfa:	ea09 0303 	and.w	r3, r9, r3
 8013dfe:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8013e02:	f04f 0a00 	mov.w	sl, #0
 8013e06:	9b06      	ldr	r3, [sp, #24]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d1b2      	bne.n	8013d72 <_strtod_l+0x82a>
 8013e0c:	e5c1      	b.n	8013992 <_strtod_l+0x44a>
 8013e0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013e12:	e7e9      	b.n	8013de8 <_strtod_l+0x8a0>
 8013e14:	460b      	mov	r3, r1
 8013e16:	e7e7      	b.n	8013de8 <_strtod_l+0x8a0>
 8013e18:	ea53 030a 	orrs.w	r3, r3, sl
 8013e1c:	d09b      	beq.n	8013d56 <_strtod_l+0x80e>
 8013e1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013e20:	b1c3      	cbz	r3, 8013e54 <_strtod_l+0x90c>
 8013e22:	ea13 0f09 	tst.w	r3, r9
 8013e26:	d0ee      	beq.n	8013e06 <_strtod_l+0x8be>
 8013e28:	9a06      	ldr	r2, [sp, #24]
 8013e2a:	4650      	mov	r0, sl
 8013e2c:	4659      	mov	r1, fp
 8013e2e:	f1b8 0f00 	cmp.w	r8, #0
 8013e32:	d013      	beq.n	8013e5c <_strtod_l+0x914>
 8013e34:	f7ff fb6d 	bl	8013512 <sulp>
 8013e38:	ee39 7b00 	vadd.f64	d7, d9, d0
 8013e3c:	ec5b ab17 	vmov	sl, fp, d7
 8013e40:	e7e1      	b.n	8013e06 <_strtod_l+0x8be>
 8013e42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013e46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013e4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013e4e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013e52:	e7d8      	b.n	8013e06 <_strtod_l+0x8be>
 8013e54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013e56:	ea13 0f0a 	tst.w	r3, sl
 8013e5a:	e7e4      	b.n	8013e26 <_strtod_l+0x8de>
 8013e5c:	f7ff fb59 	bl	8013512 <sulp>
 8013e60:	ee39 0b40 	vsub.f64	d0, d9, d0
 8013e64:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e6c:	ec5b ab10 	vmov	sl, fp, d0
 8013e70:	d1c9      	bne.n	8013e06 <_strtod_l+0x8be>
 8013e72:	e617      	b.n	8013aa4 <_strtod_l+0x55c>
 8013e74:	4629      	mov	r1, r5
 8013e76:	4620      	mov	r0, r4
 8013e78:	f7ff fad8 	bl	801342c <__ratio>
 8013e7c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8013e80:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e88:	d85d      	bhi.n	8013f46 <_strtod_l+0x9fe>
 8013e8a:	f1b8 0f00 	cmp.w	r8, #0
 8013e8e:	d164      	bne.n	8013f5a <_strtod_l+0xa12>
 8013e90:	f1ba 0f00 	cmp.w	sl, #0
 8013e94:	d14b      	bne.n	8013f2e <_strtod_l+0x9e6>
 8013e96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e9a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d160      	bne.n	8013f64 <_strtod_l+0xa1c>
 8013ea2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8013ea6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8013eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eae:	d401      	bmi.n	8013eb4 <_strtod_l+0x96c>
 8013eb0:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013eb4:	eeb1 ab48 	vneg.f64	d10, d8
 8013eb8:	486c      	ldr	r0, [pc, #432]	@ (801406c <_strtod_l+0xb24>)
 8013eba:	496e      	ldr	r1, [pc, #440]	@ (8014074 <_strtod_l+0xb2c>)
 8013ebc:	ea09 0700 	and.w	r7, r9, r0
 8013ec0:	428f      	cmp	r7, r1
 8013ec2:	ec53 2b1a 	vmov	r2, r3, d10
 8013ec6:	d17d      	bne.n	8013fc4 <_strtod_l+0xa7c>
 8013ec8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8013ecc:	ec4b ab1c 	vmov	d12, sl, fp
 8013ed0:	eeb0 0b4c 	vmov.f64	d0, d12
 8013ed4:	f7ff f9e2 	bl	801329c <__ulp>
 8013ed8:	4864      	ldr	r0, [pc, #400]	@ (801406c <_strtod_l+0xb24>)
 8013eda:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8013ede:	ee1c 3a90 	vmov	r3, s25
 8013ee2:	4a65      	ldr	r2, [pc, #404]	@ (8014078 <_strtod_l+0xb30>)
 8013ee4:	ea03 0100 	and.w	r1, r3, r0
 8013ee8:	4291      	cmp	r1, r2
 8013eea:	ec5b ab1c 	vmov	sl, fp, d12
 8013eee:	d93c      	bls.n	8013f6a <_strtod_l+0xa22>
 8013ef0:	ee19 2a90 	vmov	r2, s19
 8013ef4:	4b5e      	ldr	r3, [pc, #376]	@ (8014070 <_strtod_l+0xb28>)
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d104      	bne.n	8013f04 <_strtod_l+0x9bc>
 8013efa:	ee19 3a10 	vmov	r3, s18
 8013efe:	3301      	adds	r3, #1
 8013f00:	f43f ad3c 	beq.w	801397c <_strtod_l+0x434>
 8013f04:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8014070 <_strtod_l+0xb28>
 8013f08:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013f0c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013f0e:	9805      	ldr	r0, [sp, #20]
 8013f10:	f7fe fe98 	bl	8012c44 <_Bfree>
 8013f14:	9805      	ldr	r0, [sp, #20]
 8013f16:	4631      	mov	r1, r6
 8013f18:	f7fe fe94 	bl	8012c44 <_Bfree>
 8013f1c:	9805      	ldr	r0, [sp, #20]
 8013f1e:	4629      	mov	r1, r5
 8013f20:	f7fe fe90 	bl	8012c44 <_Bfree>
 8013f24:	9805      	ldr	r0, [sp, #20]
 8013f26:	4621      	mov	r1, r4
 8013f28:	f7fe fe8c 	bl	8012c44 <_Bfree>
 8013f2c:	e627      	b.n	8013b7e <_strtod_l+0x636>
 8013f2e:	f1ba 0f01 	cmp.w	sl, #1
 8013f32:	d103      	bne.n	8013f3c <_strtod_l+0x9f4>
 8013f34:	f1bb 0f00 	cmp.w	fp, #0
 8013f38:	f43f adb4 	beq.w	8013aa4 <_strtod_l+0x55c>
 8013f3c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013f40:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8013f44:	e7b8      	b.n	8013eb8 <_strtod_l+0x970>
 8013f46:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8013f4a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013f4e:	f1b8 0f00 	cmp.w	r8, #0
 8013f52:	d0af      	beq.n	8013eb4 <_strtod_l+0x96c>
 8013f54:	eeb0 ab48 	vmov.f64	d10, d8
 8013f58:	e7ae      	b.n	8013eb8 <_strtod_l+0x970>
 8013f5a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8013f5e:	eeb0 8b4a 	vmov.f64	d8, d10
 8013f62:	e7a9      	b.n	8013eb8 <_strtod_l+0x970>
 8013f64:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013f68:	e7a6      	b.n	8013eb8 <_strtod_l+0x970>
 8013f6a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013f6e:	9b06      	ldr	r3, [sp, #24]
 8013f70:	46d9      	mov	r9, fp
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d1ca      	bne.n	8013f0c <_strtod_l+0x9c4>
 8013f76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013f7a:	0d1b      	lsrs	r3, r3, #20
 8013f7c:	051b      	lsls	r3, r3, #20
 8013f7e:	429f      	cmp	r7, r3
 8013f80:	d1c4      	bne.n	8013f0c <_strtod_l+0x9c4>
 8013f82:	ec51 0b18 	vmov	r0, r1, d8
 8013f86:	f7ec fbe7 	bl	8000758 <__aeabi_d2lz>
 8013f8a:	f7ec fbb7 	bl	80006fc <__aeabi_l2d>
 8013f8e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8013f92:	ec41 0b17 	vmov	d7, r0, r1
 8013f96:	ea49 090a 	orr.w	r9, r9, sl
 8013f9a:	ea59 0908 	orrs.w	r9, r9, r8
 8013f9e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8013fa2:	d03c      	beq.n	801401e <_strtod_l+0xad6>
 8013fa4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8014050 <_strtod_l+0xb08>
 8013fa8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fb0:	f53f acef 	bmi.w	8013992 <_strtod_l+0x44a>
 8013fb4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8014058 <_strtod_l+0xb10>
 8013fb8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc0:	dda4      	ble.n	8013f0c <_strtod_l+0x9c4>
 8013fc2:	e4e6      	b.n	8013992 <_strtod_l+0x44a>
 8013fc4:	9906      	ldr	r1, [sp, #24]
 8013fc6:	b1e1      	cbz	r1, 8014002 <_strtod_l+0xaba>
 8013fc8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8013fcc:	d819      	bhi.n	8014002 <_strtod_l+0xaba>
 8013fce:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8013fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fd6:	d811      	bhi.n	8013ffc <_strtod_l+0xab4>
 8013fd8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8013fdc:	ee18 3a10 	vmov	r3, s16
 8013fe0:	2b01      	cmp	r3, #1
 8013fe2:	bf38      	it	cc
 8013fe4:	2301      	movcc	r3, #1
 8013fe6:	ee08 3a10 	vmov	s16, r3
 8013fea:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8013fee:	f1b8 0f00 	cmp.w	r8, #0
 8013ff2:	d111      	bne.n	8014018 <_strtod_l+0xad0>
 8013ff4:	eeb1 7b48 	vneg.f64	d7, d8
 8013ff8:	ec53 2b17 	vmov	r2, r3, d7
 8013ffc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8014000:	1bcb      	subs	r3, r1, r7
 8014002:	eeb0 0b49 	vmov.f64	d0, d9
 8014006:	ec43 2b1a 	vmov	d10, r2, r3
 801400a:	f7ff f947 	bl	801329c <__ulp>
 801400e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8014012:	ec5b ab19 	vmov	sl, fp, d9
 8014016:	e7aa      	b.n	8013f6e <_strtod_l+0xa26>
 8014018:	eeb0 7b48 	vmov.f64	d7, d8
 801401c:	e7ec      	b.n	8013ff8 <_strtod_l+0xab0>
 801401e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8014060 <_strtod_l+0xb18>
 8014022:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801402a:	f57f af6f 	bpl.w	8013f0c <_strtod_l+0x9c4>
 801402e:	e4b0      	b.n	8013992 <_strtod_l+0x44a>
 8014030:	2300      	movs	r3, #0
 8014032:	9308      	str	r3, [sp, #32]
 8014034:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014036:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014038:	6013      	str	r3, [r2, #0]
 801403a:	f7ff bac4 	b.w	80135c6 <_strtod_l+0x7e>
 801403e:	2a65      	cmp	r2, #101	@ 0x65
 8014040:	f43f abbf 	beq.w	80137c2 <_strtod_l+0x27a>
 8014044:	2a45      	cmp	r2, #69	@ 0x45
 8014046:	f43f abbc 	beq.w	80137c2 <_strtod_l+0x27a>
 801404a:	2101      	movs	r1, #1
 801404c:	f7ff bbf4 	b.w	8013838 <_strtod_l+0x2f0>
 8014050:	94a03595 	.word	0x94a03595
 8014054:	3fdfffff 	.word	0x3fdfffff
 8014058:	35afe535 	.word	0x35afe535
 801405c:	3fe00000 	.word	0x3fe00000
 8014060:	94a03595 	.word	0x94a03595
 8014064:	3fcfffff 	.word	0x3fcfffff
 8014068:	000fffff 	.word	0x000fffff
 801406c:	7ff00000 	.word	0x7ff00000
 8014070:	7fefffff 	.word	0x7fefffff
 8014074:	7fe00000 	.word	0x7fe00000
 8014078:	7c9fffff 	.word	0x7c9fffff

0801407c <_strtod_r>:
 801407c:	4b01      	ldr	r3, [pc, #4]	@ (8014084 <_strtod_r+0x8>)
 801407e:	f7ff ba63 	b.w	8013548 <_strtod_l>
 8014082:	bf00      	nop
 8014084:	24000070 	.word	0x24000070

08014088 <_strtol_l.isra.0>:
 8014088:	2b24      	cmp	r3, #36	@ 0x24
 801408a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801408e:	4686      	mov	lr, r0
 8014090:	4690      	mov	r8, r2
 8014092:	d801      	bhi.n	8014098 <_strtol_l.isra.0+0x10>
 8014094:	2b01      	cmp	r3, #1
 8014096:	d106      	bne.n	80140a6 <_strtol_l.isra.0+0x1e>
 8014098:	f7fd fe6c 	bl	8011d74 <__errno>
 801409c:	2316      	movs	r3, #22
 801409e:	6003      	str	r3, [r0, #0]
 80140a0:	2000      	movs	r0, #0
 80140a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140a6:	4834      	ldr	r0, [pc, #208]	@ (8014178 <_strtol_l.isra.0+0xf0>)
 80140a8:	460d      	mov	r5, r1
 80140aa:	462a      	mov	r2, r5
 80140ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80140b0:	5d06      	ldrb	r6, [r0, r4]
 80140b2:	f016 0608 	ands.w	r6, r6, #8
 80140b6:	d1f8      	bne.n	80140aa <_strtol_l.isra.0+0x22>
 80140b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80140ba:	d110      	bne.n	80140de <_strtol_l.isra.0+0x56>
 80140bc:	782c      	ldrb	r4, [r5, #0]
 80140be:	2601      	movs	r6, #1
 80140c0:	1c95      	adds	r5, r2, #2
 80140c2:	f033 0210 	bics.w	r2, r3, #16
 80140c6:	d115      	bne.n	80140f4 <_strtol_l.isra.0+0x6c>
 80140c8:	2c30      	cmp	r4, #48	@ 0x30
 80140ca:	d10d      	bne.n	80140e8 <_strtol_l.isra.0+0x60>
 80140cc:	782a      	ldrb	r2, [r5, #0]
 80140ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80140d2:	2a58      	cmp	r2, #88	@ 0x58
 80140d4:	d108      	bne.n	80140e8 <_strtol_l.isra.0+0x60>
 80140d6:	786c      	ldrb	r4, [r5, #1]
 80140d8:	3502      	adds	r5, #2
 80140da:	2310      	movs	r3, #16
 80140dc:	e00a      	b.n	80140f4 <_strtol_l.isra.0+0x6c>
 80140de:	2c2b      	cmp	r4, #43	@ 0x2b
 80140e0:	bf04      	itt	eq
 80140e2:	782c      	ldrbeq	r4, [r5, #0]
 80140e4:	1c95      	addeq	r5, r2, #2
 80140e6:	e7ec      	b.n	80140c2 <_strtol_l.isra.0+0x3a>
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d1f6      	bne.n	80140da <_strtol_l.isra.0+0x52>
 80140ec:	2c30      	cmp	r4, #48	@ 0x30
 80140ee:	bf14      	ite	ne
 80140f0:	230a      	movne	r3, #10
 80140f2:	2308      	moveq	r3, #8
 80140f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80140f8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80140fc:	2200      	movs	r2, #0
 80140fe:	fbbc f9f3 	udiv	r9, ip, r3
 8014102:	4610      	mov	r0, r2
 8014104:	fb03 ca19 	mls	sl, r3, r9, ip
 8014108:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801410c:	2f09      	cmp	r7, #9
 801410e:	d80f      	bhi.n	8014130 <_strtol_l.isra.0+0xa8>
 8014110:	463c      	mov	r4, r7
 8014112:	42a3      	cmp	r3, r4
 8014114:	dd1b      	ble.n	801414e <_strtol_l.isra.0+0xc6>
 8014116:	1c57      	adds	r7, r2, #1
 8014118:	d007      	beq.n	801412a <_strtol_l.isra.0+0xa2>
 801411a:	4581      	cmp	r9, r0
 801411c:	d314      	bcc.n	8014148 <_strtol_l.isra.0+0xc0>
 801411e:	d101      	bne.n	8014124 <_strtol_l.isra.0+0x9c>
 8014120:	45a2      	cmp	sl, r4
 8014122:	db11      	blt.n	8014148 <_strtol_l.isra.0+0xc0>
 8014124:	fb00 4003 	mla	r0, r0, r3, r4
 8014128:	2201      	movs	r2, #1
 801412a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801412e:	e7eb      	b.n	8014108 <_strtol_l.isra.0+0x80>
 8014130:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014134:	2f19      	cmp	r7, #25
 8014136:	d801      	bhi.n	801413c <_strtol_l.isra.0+0xb4>
 8014138:	3c37      	subs	r4, #55	@ 0x37
 801413a:	e7ea      	b.n	8014112 <_strtol_l.isra.0+0x8a>
 801413c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014140:	2f19      	cmp	r7, #25
 8014142:	d804      	bhi.n	801414e <_strtol_l.isra.0+0xc6>
 8014144:	3c57      	subs	r4, #87	@ 0x57
 8014146:	e7e4      	b.n	8014112 <_strtol_l.isra.0+0x8a>
 8014148:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801414c:	e7ed      	b.n	801412a <_strtol_l.isra.0+0xa2>
 801414e:	1c53      	adds	r3, r2, #1
 8014150:	d108      	bne.n	8014164 <_strtol_l.isra.0+0xdc>
 8014152:	2322      	movs	r3, #34	@ 0x22
 8014154:	f8ce 3000 	str.w	r3, [lr]
 8014158:	4660      	mov	r0, ip
 801415a:	f1b8 0f00 	cmp.w	r8, #0
 801415e:	d0a0      	beq.n	80140a2 <_strtol_l.isra.0+0x1a>
 8014160:	1e69      	subs	r1, r5, #1
 8014162:	e006      	b.n	8014172 <_strtol_l.isra.0+0xea>
 8014164:	b106      	cbz	r6, 8014168 <_strtol_l.isra.0+0xe0>
 8014166:	4240      	negs	r0, r0
 8014168:	f1b8 0f00 	cmp.w	r8, #0
 801416c:	d099      	beq.n	80140a2 <_strtol_l.isra.0+0x1a>
 801416e:	2a00      	cmp	r2, #0
 8014170:	d1f6      	bne.n	8014160 <_strtol_l.isra.0+0xd8>
 8014172:	f8c8 1000 	str.w	r1, [r8]
 8014176:	e794      	b.n	80140a2 <_strtol_l.isra.0+0x1a>
 8014178:	08016eb1 	.word	0x08016eb1

0801417c <_strtol_r>:
 801417c:	f7ff bf84 	b.w	8014088 <_strtol_l.isra.0>

08014180 <__ssputs_r>:
 8014180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014184:	688e      	ldr	r6, [r1, #8]
 8014186:	461f      	mov	r7, r3
 8014188:	42be      	cmp	r6, r7
 801418a:	680b      	ldr	r3, [r1, #0]
 801418c:	4682      	mov	sl, r0
 801418e:	460c      	mov	r4, r1
 8014190:	4690      	mov	r8, r2
 8014192:	d82d      	bhi.n	80141f0 <__ssputs_r+0x70>
 8014194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014198:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801419c:	d026      	beq.n	80141ec <__ssputs_r+0x6c>
 801419e:	6965      	ldr	r5, [r4, #20]
 80141a0:	6909      	ldr	r1, [r1, #16]
 80141a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80141a6:	eba3 0901 	sub.w	r9, r3, r1
 80141aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80141ae:	1c7b      	adds	r3, r7, #1
 80141b0:	444b      	add	r3, r9
 80141b2:	106d      	asrs	r5, r5, #1
 80141b4:	429d      	cmp	r5, r3
 80141b6:	bf38      	it	cc
 80141b8:	461d      	movcc	r5, r3
 80141ba:	0553      	lsls	r3, r2, #21
 80141bc:	d527      	bpl.n	801420e <__ssputs_r+0x8e>
 80141be:	4629      	mov	r1, r5
 80141c0:	f7fe fc74 	bl	8012aac <_malloc_r>
 80141c4:	4606      	mov	r6, r0
 80141c6:	b360      	cbz	r0, 8014222 <__ssputs_r+0xa2>
 80141c8:	6921      	ldr	r1, [r4, #16]
 80141ca:	464a      	mov	r2, r9
 80141cc:	f7fd fdff 	bl	8011dce <memcpy>
 80141d0:	89a3      	ldrh	r3, [r4, #12]
 80141d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80141d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80141da:	81a3      	strh	r3, [r4, #12]
 80141dc:	6126      	str	r6, [r4, #16]
 80141de:	6165      	str	r5, [r4, #20]
 80141e0:	444e      	add	r6, r9
 80141e2:	eba5 0509 	sub.w	r5, r5, r9
 80141e6:	6026      	str	r6, [r4, #0]
 80141e8:	60a5      	str	r5, [r4, #8]
 80141ea:	463e      	mov	r6, r7
 80141ec:	42be      	cmp	r6, r7
 80141ee:	d900      	bls.n	80141f2 <__ssputs_r+0x72>
 80141f0:	463e      	mov	r6, r7
 80141f2:	6820      	ldr	r0, [r4, #0]
 80141f4:	4632      	mov	r2, r6
 80141f6:	4641      	mov	r1, r8
 80141f8:	f7fd fd30 	bl	8011c5c <memmove>
 80141fc:	68a3      	ldr	r3, [r4, #8]
 80141fe:	1b9b      	subs	r3, r3, r6
 8014200:	60a3      	str	r3, [r4, #8]
 8014202:	6823      	ldr	r3, [r4, #0]
 8014204:	4433      	add	r3, r6
 8014206:	6023      	str	r3, [r4, #0]
 8014208:	2000      	movs	r0, #0
 801420a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801420e:	462a      	mov	r2, r5
 8014210:	f001 fadb 	bl	80157ca <_realloc_r>
 8014214:	4606      	mov	r6, r0
 8014216:	2800      	cmp	r0, #0
 8014218:	d1e0      	bne.n	80141dc <__ssputs_r+0x5c>
 801421a:	6921      	ldr	r1, [r4, #16]
 801421c:	4650      	mov	r0, sl
 801421e:	f7fe fbd1 	bl	80129c4 <_free_r>
 8014222:	230c      	movs	r3, #12
 8014224:	f8ca 3000 	str.w	r3, [sl]
 8014228:	89a3      	ldrh	r3, [r4, #12]
 801422a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801422e:	81a3      	strh	r3, [r4, #12]
 8014230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014234:	e7e9      	b.n	801420a <__ssputs_r+0x8a>
	...

08014238 <_svfiprintf_r>:
 8014238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801423c:	4698      	mov	r8, r3
 801423e:	898b      	ldrh	r3, [r1, #12]
 8014240:	061b      	lsls	r3, r3, #24
 8014242:	b09d      	sub	sp, #116	@ 0x74
 8014244:	4607      	mov	r7, r0
 8014246:	460d      	mov	r5, r1
 8014248:	4614      	mov	r4, r2
 801424a:	d510      	bpl.n	801426e <_svfiprintf_r+0x36>
 801424c:	690b      	ldr	r3, [r1, #16]
 801424e:	b973      	cbnz	r3, 801426e <_svfiprintf_r+0x36>
 8014250:	2140      	movs	r1, #64	@ 0x40
 8014252:	f7fe fc2b 	bl	8012aac <_malloc_r>
 8014256:	6028      	str	r0, [r5, #0]
 8014258:	6128      	str	r0, [r5, #16]
 801425a:	b930      	cbnz	r0, 801426a <_svfiprintf_r+0x32>
 801425c:	230c      	movs	r3, #12
 801425e:	603b      	str	r3, [r7, #0]
 8014260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014264:	b01d      	add	sp, #116	@ 0x74
 8014266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801426a:	2340      	movs	r3, #64	@ 0x40
 801426c:	616b      	str	r3, [r5, #20]
 801426e:	2300      	movs	r3, #0
 8014270:	9309      	str	r3, [sp, #36]	@ 0x24
 8014272:	2320      	movs	r3, #32
 8014274:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014278:	f8cd 800c 	str.w	r8, [sp, #12]
 801427c:	2330      	movs	r3, #48	@ 0x30
 801427e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801441c <_svfiprintf_r+0x1e4>
 8014282:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014286:	f04f 0901 	mov.w	r9, #1
 801428a:	4623      	mov	r3, r4
 801428c:	469a      	mov	sl, r3
 801428e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014292:	b10a      	cbz	r2, 8014298 <_svfiprintf_r+0x60>
 8014294:	2a25      	cmp	r2, #37	@ 0x25
 8014296:	d1f9      	bne.n	801428c <_svfiprintf_r+0x54>
 8014298:	ebba 0b04 	subs.w	fp, sl, r4
 801429c:	d00b      	beq.n	80142b6 <_svfiprintf_r+0x7e>
 801429e:	465b      	mov	r3, fp
 80142a0:	4622      	mov	r2, r4
 80142a2:	4629      	mov	r1, r5
 80142a4:	4638      	mov	r0, r7
 80142a6:	f7ff ff6b 	bl	8014180 <__ssputs_r>
 80142aa:	3001      	adds	r0, #1
 80142ac:	f000 80a7 	beq.w	80143fe <_svfiprintf_r+0x1c6>
 80142b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142b2:	445a      	add	r2, fp
 80142b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80142b6:	f89a 3000 	ldrb.w	r3, [sl]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	f000 809f 	beq.w	80143fe <_svfiprintf_r+0x1c6>
 80142c0:	2300      	movs	r3, #0
 80142c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80142c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142ca:	f10a 0a01 	add.w	sl, sl, #1
 80142ce:	9304      	str	r3, [sp, #16]
 80142d0:	9307      	str	r3, [sp, #28]
 80142d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80142d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80142d8:	4654      	mov	r4, sl
 80142da:	2205      	movs	r2, #5
 80142dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142e0:	484e      	ldr	r0, [pc, #312]	@ (801441c <_svfiprintf_r+0x1e4>)
 80142e2:	f7ec f825 	bl	8000330 <memchr>
 80142e6:	9a04      	ldr	r2, [sp, #16]
 80142e8:	b9d8      	cbnz	r0, 8014322 <_svfiprintf_r+0xea>
 80142ea:	06d0      	lsls	r0, r2, #27
 80142ec:	bf44      	itt	mi
 80142ee:	2320      	movmi	r3, #32
 80142f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142f4:	0711      	lsls	r1, r2, #28
 80142f6:	bf44      	itt	mi
 80142f8:	232b      	movmi	r3, #43	@ 0x2b
 80142fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142fe:	f89a 3000 	ldrb.w	r3, [sl]
 8014302:	2b2a      	cmp	r3, #42	@ 0x2a
 8014304:	d015      	beq.n	8014332 <_svfiprintf_r+0xfa>
 8014306:	9a07      	ldr	r2, [sp, #28]
 8014308:	4654      	mov	r4, sl
 801430a:	2000      	movs	r0, #0
 801430c:	f04f 0c0a 	mov.w	ip, #10
 8014310:	4621      	mov	r1, r4
 8014312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014316:	3b30      	subs	r3, #48	@ 0x30
 8014318:	2b09      	cmp	r3, #9
 801431a:	d94b      	bls.n	80143b4 <_svfiprintf_r+0x17c>
 801431c:	b1b0      	cbz	r0, 801434c <_svfiprintf_r+0x114>
 801431e:	9207      	str	r2, [sp, #28]
 8014320:	e014      	b.n	801434c <_svfiprintf_r+0x114>
 8014322:	eba0 0308 	sub.w	r3, r0, r8
 8014326:	fa09 f303 	lsl.w	r3, r9, r3
 801432a:	4313      	orrs	r3, r2
 801432c:	9304      	str	r3, [sp, #16]
 801432e:	46a2      	mov	sl, r4
 8014330:	e7d2      	b.n	80142d8 <_svfiprintf_r+0xa0>
 8014332:	9b03      	ldr	r3, [sp, #12]
 8014334:	1d19      	adds	r1, r3, #4
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	9103      	str	r1, [sp, #12]
 801433a:	2b00      	cmp	r3, #0
 801433c:	bfbb      	ittet	lt
 801433e:	425b      	neglt	r3, r3
 8014340:	f042 0202 	orrlt.w	r2, r2, #2
 8014344:	9307      	strge	r3, [sp, #28]
 8014346:	9307      	strlt	r3, [sp, #28]
 8014348:	bfb8      	it	lt
 801434a:	9204      	strlt	r2, [sp, #16]
 801434c:	7823      	ldrb	r3, [r4, #0]
 801434e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014350:	d10a      	bne.n	8014368 <_svfiprintf_r+0x130>
 8014352:	7863      	ldrb	r3, [r4, #1]
 8014354:	2b2a      	cmp	r3, #42	@ 0x2a
 8014356:	d132      	bne.n	80143be <_svfiprintf_r+0x186>
 8014358:	9b03      	ldr	r3, [sp, #12]
 801435a:	1d1a      	adds	r2, r3, #4
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	9203      	str	r2, [sp, #12]
 8014360:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014364:	3402      	adds	r4, #2
 8014366:	9305      	str	r3, [sp, #20]
 8014368:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801442c <_svfiprintf_r+0x1f4>
 801436c:	7821      	ldrb	r1, [r4, #0]
 801436e:	2203      	movs	r2, #3
 8014370:	4650      	mov	r0, sl
 8014372:	f7eb ffdd 	bl	8000330 <memchr>
 8014376:	b138      	cbz	r0, 8014388 <_svfiprintf_r+0x150>
 8014378:	9b04      	ldr	r3, [sp, #16]
 801437a:	eba0 000a 	sub.w	r0, r0, sl
 801437e:	2240      	movs	r2, #64	@ 0x40
 8014380:	4082      	lsls	r2, r0
 8014382:	4313      	orrs	r3, r2
 8014384:	3401      	adds	r4, #1
 8014386:	9304      	str	r3, [sp, #16]
 8014388:	f814 1b01 	ldrb.w	r1, [r4], #1
 801438c:	4824      	ldr	r0, [pc, #144]	@ (8014420 <_svfiprintf_r+0x1e8>)
 801438e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014392:	2206      	movs	r2, #6
 8014394:	f7eb ffcc 	bl	8000330 <memchr>
 8014398:	2800      	cmp	r0, #0
 801439a:	d036      	beq.n	801440a <_svfiprintf_r+0x1d2>
 801439c:	4b21      	ldr	r3, [pc, #132]	@ (8014424 <_svfiprintf_r+0x1ec>)
 801439e:	bb1b      	cbnz	r3, 80143e8 <_svfiprintf_r+0x1b0>
 80143a0:	9b03      	ldr	r3, [sp, #12]
 80143a2:	3307      	adds	r3, #7
 80143a4:	f023 0307 	bic.w	r3, r3, #7
 80143a8:	3308      	adds	r3, #8
 80143aa:	9303      	str	r3, [sp, #12]
 80143ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143ae:	4433      	add	r3, r6
 80143b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80143b2:	e76a      	b.n	801428a <_svfiprintf_r+0x52>
 80143b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80143b8:	460c      	mov	r4, r1
 80143ba:	2001      	movs	r0, #1
 80143bc:	e7a8      	b.n	8014310 <_svfiprintf_r+0xd8>
 80143be:	2300      	movs	r3, #0
 80143c0:	3401      	adds	r4, #1
 80143c2:	9305      	str	r3, [sp, #20]
 80143c4:	4619      	mov	r1, r3
 80143c6:	f04f 0c0a 	mov.w	ip, #10
 80143ca:	4620      	mov	r0, r4
 80143cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143d0:	3a30      	subs	r2, #48	@ 0x30
 80143d2:	2a09      	cmp	r2, #9
 80143d4:	d903      	bls.n	80143de <_svfiprintf_r+0x1a6>
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d0c6      	beq.n	8014368 <_svfiprintf_r+0x130>
 80143da:	9105      	str	r1, [sp, #20]
 80143dc:	e7c4      	b.n	8014368 <_svfiprintf_r+0x130>
 80143de:	fb0c 2101 	mla	r1, ip, r1, r2
 80143e2:	4604      	mov	r4, r0
 80143e4:	2301      	movs	r3, #1
 80143e6:	e7f0      	b.n	80143ca <_svfiprintf_r+0x192>
 80143e8:	ab03      	add	r3, sp, #12
 80143ea:	9300      	str	r3, [sp, #0]
 80143ec:	462a      	mov	r2, r5
 80143ee:	4b0e      	ldr	r3, [pc, #56]	@ (8014428 <_svfiprintf_r+0x1f0>)
 80143f0:	a904      	add	r1, sp, #16
 80143f2:	4638      	mov	r0, r7
 80143f4:	f7fc fc24 	bl	8010c40 <_printf_float>
 80143f8:	1c42      	adds	r2, r0, #1
 80143fa:	4606      	mov	r6, r0
 80143fc:	d1d6      	bne.n	80143ac <_svfiprintf_r+0x174>
 80143fe:	89ab      	ldrh	r3, [r5, #12]
 8014400:	065b      	lsls	r3, r3, #25
 8014402:	f53f af2d 	bmi.w	8014260 <_svfiprintf_r+0x28>
 8014406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014408:	e72c      	b.n	8014264 <_svfiprintf_r+0x2c>
 801440a:	ab03      	add	r3, sp, #12
 801440c:	9300      	str	r3, [sp, #0]
 801440e:	462a      	mov	r2, r5
 8014410:	4b05      	ldr	r3, [pc, #20]	@ (8014428 <_svfiprintf_r+0x1f0>)
 8014412:	a904      	add	r1, sp, #16
 8014414:	4638      	mov	r0, r7
 8014416:	f7fc fe9b 	bl	8011150 <_printf_i>
 801441a:	e7ed      	b.n	80143f8 <_svfiprintf_r+0x1c0>
 801441c:	08016c8f 	.word	0x08016c8f
 8014420:	08016c99 	.word	0x08016c99
 8014424:	08010c41 	.word	0x08010c41
 8014428:	08014181 	.word	0x08014181
 801442c:	08016c95 	.word	0x08016c95

08014430 <_sungetc_r>:
 8014430:	b538      	push	{r3, r4, r5, lr}
 8014432:	1c4b      	adds	r3, r1, #1
 8014434:	4614      	mov	r4, r2
 8014436:	d103      	bne.n	8014440 <_sungetc_r+0x10>
 8014438:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801443c:	4628      	mov	r0, r5
 801443e:	bd38      	pop	{r3, r4, r5, pc}
 8014440:	8993      	ldrh	r3, [r2, #12]
 8014442:	f023 0320 	bic.w	r3, r3, #32
 8014446:	8193      	strh	r3, [r2, #12]
 8014448:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801444a:	6852      	ldr	r2, [r2, #4]
 801444c:	b2cd      	uxtb	r5, r1
 801444e:	b18b      	cbz	r3, 8014474 <_sungetc_r+0x44>
 8014450:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8014452:	4293      	cmp	r3, r2
 8014454:	dd08      	ble.n	8014468 <_sungetc_r+0x38>
 8014456:	6823      	ldr	r3, [r4, #0]
 8014458:	1e5a      	subs	r2, r3, #1
 801445a:	6022      	str	r2, [r4, #0]
 801445c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014460:	6863      	ldr	r3, [r4, #4]
 8014462:	3301      	adds	r3, #1
 8014464:	6063      	str	r3, [r4, #4]
 8014466:	e7e9      	b.n	801443c <_sungetc_r+0xc>
 8014468:	4621      	mov	r1, r4
 801446a:	f000 fdbc 	bl	8014fe6 <__submore>
 801446e:	2800      	cmp	r0, #0
 8014470:	d0f1      	beq.n	8014456 <_sungetc_r+0x26>
 8014472:	e7e1      	b.n	8014438 <_sungetc_r+0x8>
 8014474:	6921      	ldr	r1, [r4, #16]
 8014476:	6823      	ldr	r3, [r4, #0]
 8014478:	b151      	cbz	r1, 8014490 <_sungetc_r+0x60>
 801447a:	4299      	cmp	r1, r3
 801447c:	d208      	bcs.n	8014490 <_sungetc_r+0x60>
 801447e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8014482:	42a9      	cmp	r1, r5
 8014484:	d104      	bne.n	8014490 <_sungetc_r+0x60>
 8014486:	3b01      	subs	r3, #1
 8014488:	3201      	adds	r2, #1
 801448a:	6023      	str	r3, [r4, #0]
 801448c:	6062      	str	r2, [r4, #4]
 801448e:	e7d5      	b.n	801443c <_sungetc_r+0xc>
 8014490:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8014494:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014498:	6363      	str	r3, [r4, #52]	@ 0x34
 801449a:	2303      	movs	r3, #3
 801449c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801449e:	4623      	mov	r3, r4
 80144a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80144a4:	6023      	str	r3, [r4, #0]
 80144a6:	2301      	movs	r3, #1
 80144a8:	e7dc      	b.n	8014464 <_sungetc_r+0x34>

080144aa <__ssrefill_r>:
 80144aa:	b510      	push	{r4, lr}
 80144ac:	460c      	mov	r4, r1
 80144ae:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80144b0:	b169      	cbz	r1, 80144ce <__ssrefill_r+0x24>
 80144b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80144b6:	4299      	cmp	r1, r3
 80144b8:	d001      	beq.n	80144be <__ssrefill_r+0x14>
 80144ba:	f7fe fa83 	bl	80129c4 <_free_r>
 80144be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80144c0:	6063      	str	r3, [r4, #4]
 80144c2:	2000      	movs	r0, #0
 80144c4:	6360      	str	r0, [r4, #52]	@ 0x34
 80144c6:	b113      	cbz	r3, 80144ce <__ssrefill_r+0x24>
 80144c8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80144ca:	6023      	str	r3, [r4, #0]
 80144cc:	bd10      	pop	{r4, pc}
 80144ce:	6923      	ldr	r3, [r4, #16]
 80144d0:	6023      	str	r3, [r4, #0]
 80144d2:	2300      	movs	r3, #0
 80144d4:	6063      	str	r3, [r4, #4]
 80144d6:	89a3      	ldrh	r3, [r4, #12]
 80144d8:	f043 0320 	orr.w	r3, r3, #32
 80144dc:	81a3      	strh	r3, [r4, #12]
 80144de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80144e2:	e7f3      	b.n	80144cc <__ssrefill_r+0x22>

080144e4 <__ssvfiscanf_r>:
 80144e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144e8:	460c      	mov	r4, r1
 80144ea:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80144ee:	2100      	movs	r1, #0
 80144f0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80144f4:	49a6      	ldr	r1, [pc, #664]	@ (8014790 <__ssvfiscanf_r+0x2ac>)
 80144f6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80144f8:	f10d 0804 	add.w	r8, sp, #4
 80144fc:	49a5      	ldr	r1, [pc, #660]	@ (8014794 <__ssvfiscanf_r+0x2b0>)
 80144fe:	4fa6      	ldr	r7, [pc, #664]	@ (8014798 <__ssvfiscanf_r+0x2b4>)
 8014500:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8014504:	4606      	mov	r6, r0
 8014506:	91a1      	str	r1, [sp, #644]	@ 0x284
 8014508:	9300      	str	r3, [sp, #0]
 801450a:	f892 9000 	ldrb.w	r9, [r2]
 801450e:	f1b9 0f00 	cmp.w	r9, #0
 8014512:	f000 8158 	beq.w	80147c6 <__ssvfiscanf_r+0x2e2>
 8014516:	f817 3009 	ldrb.w	r3, [r7, r9]
 801451a:	f013 0308 	ands.w	r3, r3, #8
 801451e:	f102 0501 	add.w	r5, r2, #1
 8014522:	d019      	beq.n	8014558 <__ssvfiscanf_r+0x74>
 8014524:	6863      	ldr	r3, [r4, #4]
 8014526:	2b00      	cmp	r3, #0
 8014528:	dd0f      	ble.n	801454a <__ssvfiscanf_r+0x66>
 801452a:	6823      	ldr	r3, [r4, #0]
 801452c:	781a      	ldrb	r2, [r3, #0]
 801452e:	5cba      	ldrb	r2, [r7, r2]
 8014530:	0712      	lsls	r2, r2, #28
 8014532:	d401      	bmi.n	8014538 <__ssvfiscanf_r+0x54>
 8014534:	462a      	mov	r2, r5
 8014536:	e7e8      	b.n	801450a <__ssvfiscanf_r+0x26>
 8014538:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801453a:	3201      	adds	r2, #1
 801453c:	9245      	str	r2, [sp, #276]	@ 0x114
 801453e:	6862      	ldr	r2, [r4, #4]
 8014540:	3301      	adds	r3, #1
 8014542:	3a01      	subs	r2, #1
 8014544:	6062      	str	r2, [r4, #4]
 8014546:	6023      	str	r3, [r4, #0]
 8014548:	e7ec      	b.n	8014524 <__ssvfiscanf_r+0x40>
 801454a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801454c:	4621      	mov	r1, r4
 801454e:	4630      	mov	r0, r6
 8014550:	4798      	blx	r3
 8014552:	2800      	cmp	r0, #0
 8014554:	d0e9      	beq.n	801452a <__ssvfiscanf_r+0x46>
 8014556:	e7ed      	b.n	8014534 <__ssvfiscanf_r+0x50>
 8014558:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801455c:	f040 8085 	bne.w	801466a <__ssvfiscanf_r+0x186>
 8014560:	9341      	str	r3, [sp, #260]	@ 0x104
 8014562:	9343      	str	r3, [sp, #268]	@ 0x10c
 8014564:	7853      	ldrb	r3, [r2, #1]
 8014566:	2b2a      	cmp	r3, #42	@ 0x2a
 8014568:	bf02      	ittt	eq
 801456a:	2310      	moveq	r3, #16
 801456c:	1c95      	addeq	r5, r2, #2
 801456e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8014570:	220a      	movs	r2, #10
 8014572:	46aa      	mov	sl, r5
 8014574:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8014578:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801457c:	2b09      	cmp	r3, #9
 801457e:	d91e      	bls.n	80145be <__ssvfiscanf_r+0xda>
 8014580:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801479c <__ssvfiscanf_r+0x2b8>
 8014584:	2203      	movs	r2, #3
 8014586:	4658      	mov	r0, fp
 8014588:	f7eb fed2 	bl	8000330 <memchr>
 801458c:	b138      	cbz	r0, 801459e <__ssvfiscanf_r+0xba>
 801458e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014590:	eba0 000b 	sub.w	r0, r0, fp
 8014594:	2301      	movs	r3, #1
 8014596:	4083      	lsls	r3, r0
 8014598:	4313      	orrs	r3, r2
 801459a:	9341      	str	r3, [sp, #260]	@ 0x104
 801459c:	4655      	mov	r5, sl
 801459e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80145a2:	2b78      	cmp	r3, #120	@ 0x78
 80145a4:	d806      	bhi.n	80145b4 <__ssvfiscanf_r+0xd0>
 80145a6:	2b57      	cmp	r3, #87	@ 0x57
 80145a8:	d810      	bhi.n	80145cc <__ssvfiscanf_r+0xe8>
 80145aa:	2b25      	cmp	r3, #37	@ 0x25
 80145ac:	d05d      	beq.n	801466a <__ssvfiscanf_r+0x186>
 80145ae:	d857      	bhi.n	8014660 <__ssvfiscanf_r+0x17c>
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d075      	beq.n	80146a0 <__ssvfiscanf_r+0x1bc>
 80145b4:	2303      	movs	r3, #3
 80145b6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80145b8:	230a      	movs	r3, #10
 80145ba:	9342      	str	r3, [sp, #264]	@ 0x108
 80145bc:	e088      	b.n	80146d0 <__ssvfiscanf_r+0x1ec>
 80145be:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80145c0:	fb02 1103 	mla	r1, r2, r3, r1
 80145c4:	3930      	subs	r1, #48	@ 0x30
 80145c6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80145c8:	4655      	mov	r5, sl
 80145ca:	e7d2      	b.n	8014572 <__ssvfiscanf_r+0x8e>
 80145cc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80145d0:	2a20      	cmp	r2, #32
 80145d2:	d8ef      	bhi.n	80145b4 <__ssvfiscanf_r+0xd0>
 80145d4:	a101      	add	r1, pc, #4	@ (adr r1, 80145dc <__ssvfiscanf_r+0xf8>)
 80145d6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80145da:	bf00      	nop
 80145dc:	080146af 	.word	0x080146af
 80145e0:	080145b5 	.word	0x080145b5
 80145e4:	080145b5 	.word	0x080145b5
 80145e8:	08014709 	.word	0x08014709
 80145ec:	080145b5 	.word	0x080145b5
 80145f0:	080145b5 	.word	0x080145b5
 80145f4:	080145b5 	.word	0x080145b5
 80145f8:	080145b5 	.word	0x080145b5
 80145fc:	080145b5 	.word	0x080145b5
 8014600:	080145b5 	.word	0x080145b5
 8014604:	080145b5 	.word	0x080145b5
 8014608:	0801471f 	.word	0x0801471f
 801460c:	08014705 	.word	0x08014705
 8014610:	08014667 	.word	0x08014667
 8014614:	08014667 	.word	0x08014667
 8014618:	08014667 	.word	0x08014667
 801461c:	080145b5 	.word	0x080145b5
 8014620:	080146c1 	.word	0x080146c1
 8014624:	080145b5 	.word	0x080145b5
 8014628:	080145b5 	.word	0x080145b5
 801462c:	080145b5 	.word	0x080145b5
 8014630:	080145b5 	.word	0x080145b5
 8014634:	0801472f 	.word	0x0801472f
 8014638:	080146c9 	.word	0x080146c9
 801463c:	080146a7 	.word	0x080146a7
 8014640:	080145b5 	.word	0x080145b5
 8014644:	080145b5 	.word	0x080145b5
 8014648:	0801472b 	.word	0x0801472b
 801464c:	080145b5 	.word	0x080145b5
 8014650:	08014705 	.word	0x08014705
 8014654:	080145b5 	.word	0x080145b5
 8014658:	080145b5 	.word	0x080145b5
 801465c:	080146af 	.word	0x080146af
 8014660:	3b45      	subs	r3, #69	@ 0x45
 8014662:	2b02      	cmp	r3, #2
 8014664:	d8a6      	bhi.n	80145b4 <__ssvfiscanf_r+0xd0>
 8014666:	2305      	movs	r3, #5
 8014668:	e031      	b.n	80146ce <__ssvfiscanf_r+0x1ea>
 801466a:	6863      	ldr	r3, [r4, #4]
 801466c:	2b00      	cmp	r3, #0
 801466e:	dd0d      	ble.n	801468c <__ssvfiscanf_r+0x1a8>
 8014670:	6823      	ldr	r3, [r4, #0]
 8014672:	781a      	ldrb	r2, [r3, #0]
 8014674:	454a      	cmp	r2, r9
 8014676:	f040 80a6 	bne.w	80147c6 <__ssvfiscanf_r+0x2e2>
 801467a:	3301      	adds	r3, #1
 801467c:	6862      	ldr	r2, [r4, #4]
 801467e:	6023      	str	r3, [r4, #0]
 8014680:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8014682:	3a01      	subs	r2, #1
 8014684:	3301      	adds	r3, #1
 8014686:	6062      	str	r2, [r4, #4]
 8014688:	9345      	str	r3, [sp, #276]	@ 0x114
 801468a:	e753      	b.n	8014534 <__ssvfiscanf_r+0x50>
 801468c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801468e:	4621      	mov	r1, r4
 8014690:	4630      	mov	r0, r6
 8014692:	4798      	blx	r3
 8014694:	2800      	cmp	r0, #0
 8014696:	d0eb      	beq.n	8014670 <__ssvfiscanf_r+0x18c>
 8014698:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801469a:	2800      	cmp	r0, #0
 801469c:	f040 808b 	bne.w	80147b6 <__ssvfiscanf_r+0x2d2>
 80146a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80146a4:	e08b      	b.n	80147be <__ssvfiscanf_r+0x2da>
 80146a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80146a8:	f042 0220 	orr.w	r2, r2, #32
 80146ac:	9241      	str	r2, [sp, #260]	@ 0x104
 80146ae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80146b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80146b4:	9241      	str	r2, [sp, #260]	@ 0x104
 80146b6:	2210      	movs	r2, #16
 80146b8:	2b6e      	cmp	r3, #110	@ 0x6e
 80146ba:	9242      	str	r2, [sp, #264]	@ 0x108
 80146bc:	d902      	bls.n	80146c4 <__ssvfiscanf_r+0x1e0>
 80146be:	e005      	b.n	80146cc <__ssvfiscanf_r+0x1e8>
 80146c0:	2300      	movs	r3, #0
 80146c2:	9342      	str	r3, [sp, #264]	@ 0x108
 80146c4:	2303      	movs	r3, #3
 80146c6:	e002      	b.n	80146ce <__ssvfiscanf_r+0x1ea>
 80146c8:	2308      	movs	r3, #8
 80146ca:	9342      	str	r3, [sp, #264]	@ 0x108
 80146cc:	2304      	movs	r3, #4
 80146ce:	9347      	str	r3, [sp, #284]	@ 0x11c
 80146d0:	6863      	ldr	r3, [r4, #4]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	dd39      	ble.n	801474a <__ssvfiscanf_r+0x266>
 80146d6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80146d8:	0659      	lsls	r1, r3, #25
 80146da:	d404      	bmi.n	80146e6 <__ssvfiscanf_r+0x202>
 80146dc:	6823      	ldr	r3, [r4, #0]
 80146de:	781a      	ldrb	r2, [r3, #0]
 80146e0:	5cba      	ldrb	r2, [r7, r2]
 80146e2:	0712      	lsls	r2, r2, #28
 80146e4:	d438      	bmi.n	8014758 <__ssvfiscanf_r+0x274>
 80146e6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80146e8:	2b02      	cmp	r3, #2
 80146ea:	dc47      	bgt.n	801477c <__ssvfiscanf_r+0x298>
 80146ec:	466b      	mov	r3, sp
 80146ee:	4622      	mov	r2, r4
 80146f0:	a941      	add	r1, sp, #260	@ 0x104
 80146f2:	4630      	mov	r0, r6
 80146f4:	f000 f9ae 	bl	8014a54 <_scanf_chars>
 80146f8:	2801      	cmp	r0, #1
 80146fa:	d064      	beq.n	80147c6 <__ssvfiscanf_r+0x2e2>
 80146fc:	2802      	cmp	r0, #2
 80146fe:	f47f af19 	bne.w	8014534 <__ssvfiscanf_r+0x50>
 8014702:	e7c9      	b.n	8014698 <__ssvfiscanf_r+0x1b4>
 8014704:	220a      	movs	r2, #10
 8014706:	e7d7      	b.n	80146b8 <__ssvfiscanf_r+0x1d4>
 8014708:	4629      	mov	r1, r5
 801470a:	4640      	mov	r0, r8
 801470c:	f000 fc32 	bl	8014f74 <__sccl>
 8014710:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014716:	9341      	str	r3, [sp, #260]	@ 0x104
 8014718:	4605      	mov	r5, r0
 801471a:	2301      	movs	r3, #1
 801471c:	e7d7      	b.n	80146ce <__ssvfiscanf_r+0x1ea>
 801471e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014724:	9341      	str	r3, [sp, #260]	@ 0x104
 8014726:	2300      	movs	r3, #0
 8014728:	e7d1      	b.n	80146ce <__ssvfiscanf_r+0x1ea>
 801472a:	2302      	movs	r3, #2
 801472c:	e7cf      	b.n	80146ce <__ssvfiscanf_r+0x1ea>
 801472e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8014730:	06c3      	lsls	r3, r0, #27
 8014732:	f53f aeff 	bmi.w	8014534 <__ssvfiscanf_r+0x50>
 8014736:	9b00      	ldr	r3, [sp, #0]
 8014738:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801473a:	1d19      	adds	r1, r3, #4
 801473c:	9100      	str	r1, [sp, #0]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	07c0      	lsls	r0, r0, #31
 8014742:	bf4c      	ite	mi
 8014744:	801a      	strhmi	r2, [r3, #0]
 8014746:	601a      	strpl	r2, [r3, #0]
 8014748:	e6f4      	b.n	8014534 <__ssvfiscanf_r+0x50>
 801474a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801474c:	4621      	mov	r1, r4
 801474e:	4630      	mov	r0, r6
 8014750:	4798      	blx	r3
 8014752:	2800      	cmp	r0, #0
 8014754:	d0bf      	beq.n	80146d6 <__ssvfiscanf_r+0x1f2>
 8014756:	e79f      	b.n	8014698 <__ssvfiscanf_r+0x1b4>
 8014758:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801475a:	3201      	adds	r2, #1
 801475c:	9245      	str	r2, [sp, #276]	@ 0x114
 801475e:	6862      	ldr	r2, [r4, #4]
 8014760:	3a01      	subs	r2, #1
 8014762:	2a00      	cmp	r2, #0
 8014764:	6062      	str	r2, [r4, #4]
 8014766:	dd02      	ble.n	801476e <__ssvfiscanf_r+0x28a>
 8014768:	3301      	adds	r3, #1
 801476a:	6023      	str	r3, [r4, #0]
 801476c:	e7b6      	b.n	80146dc <__ssvfiscanf_r+0x1f8>
 801476e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014770:	4621      	mov	r1, r4
 8014772:	4630      	mov	r0, r6
 8014774:	4798      	blx	r3
 8014776:	2800      	cmp	r0, #0
 8014778:	d0b0      	beq.n	80146dc <__ssvfiscanf_r+0x1f8>
 801477a:	e78d      	b.n	8014698 <__ssvfiscanf_r+0x1b4>
 801477c:	2b04      	cmp	r3, #4
 801477e:	dc0f      	bgt.n	80147a0 <__ssvfiscanf_r+0x2bc>
 8014780:	466b      	mov	r3, sp
 8014782:	4622      	mov	r2, r4
 8014784:	a941      	add	r1, sp, #260	@ 0x104
 8014786:	4630      	mov	r0, r6
 8014788:	f000 f9be 	bl	8014b08 <_scanf_i>
 801478c:	e7b4      	b.n	80146f8 <__ssvfiscanf_r+0x214>
 801478e:	bf00      	nop
 8014790:	08014431 	.word	0x08014431
 8014794:	080144ab 	.word	0x080144ab
 8014798:	08016eb1 	.word	0x08016eb1
 801479c:	08016c95 	.word	0x08016c95
 80147a0:	4b0a      	ldr	r3, [pc, #40]	@ (80147cc <__ssvfiscanf_r+0x2e8>)
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	f43f aec6 	beq.w	8014534 <__ssvfiscanf_r+0x50>
 80147a8:	466b      	mov	r3, sp
 80147aa:	4622      	mov	r2, r4
 80147ac:	a941      	add	r1, sp, #260	@ 0x104
 80147ae:	4630      	mov	r0, r6
 80147b0:	f7fc fdec 	bl	801138c <_scanf_float>
 80147b4:	e7a0      	b.n	80146f8 <__ssvfiscanf_r+0x214>
 80147b6:	89a3      	ldrh	r3, [r4, #12]
 80147b8:	065b      	lsls	r3, r3, #25
 80147ba:	f53f af71 	bmi.w	80146a0 <__ssvfiscanf_r+0x1bc>
 80147be:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80147c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147c6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80147c8:	e7f9      	b.n	80147be <__ssvfiscanf_r+0x2da>
 80147ca:	bf00      	nop
 80147cc:	0801138d 	.word	0x0801138d

080147d0 <__sfputc_r>:
 80147d0:	6893      	ldr	r3, [r2, #8]
 80147d2:	3b01      	subs	r3, #1
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	b410      	push	{r4}
 80147d8:	6093      	str	r3, [r2, #8]
 80147da:	da08      	bge.n	80147ee <__sfputc_r+0x1e>
 80147dc:	6994      	ldr	r4, [r2, #24]
 80147de:	42a3      	cmp	r3, r4
 80147e0:	db01      	blt.n	80147e6 <__sfputc_r+0x16>
 80147e2:	290a      	cmp	r1, #10
 80147e4:	d103      	bne.n	80147ee <__sfputc_r+0x1e>
 80147e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147ea:	f7fd b9a2 	b.w	8011b32 <__swbuf_r>
 80147ee:	6813      	ldr	r3, [r2, #0]
 80147f0:	1c58      	adds	r0, r3, #1
 80147f2:	6010      	str	r0, [r2, #0]
 80147f4:	7019      	strb	r1, [r3, #0]
 80147f6:	4608      	mov	r0, r1
 80147f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147fc:	4770      	bx	lr

080147fe <__sfputs_r>:
 80147fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014800:	4606      	mov	r6, r0
 8014802:	460f      	mov	r7, r1
 8014804:	4614      	mov	r4, r2
 8014806:	18d5      	adds	r5, r2, r3
 8014808:	42ac      	cmp	r4, r5
 801480a:	d101      	bne.n	8014810 <__sfputs_r+0x12>
 801480c:	2000      	movs	r0, #0
 801480e:	e007      	b.n	8014820 <__sfputs_r+0x22>
 8014810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014814:	463a      	mov	r2, r7
 8014816:	4630      	mov	r0, r6
 8014818:	f7ff ffda 	bl	80147d0 <__sfputc_r>
 801481c:	1c43      	adds	r3, r0, #1
 801481e:	d1f3      	bne.n	8014808 <__sfputs_r+0xa>
 8014820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014824 <_vfiprintf_r>:
 8014824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014828:	460d      	mov	r5, r1
 801482a:	b09d      	sub	sp, #116	@ 0x74
 801482c:	4614      	mov	r4, r2
 801482e:	4698      	mov	r8, r3
 8014830:	4606      	mov	r6, r0
 8014832:	b118      	cbz	r0, 801483c <_vfiprintf_r+0x18>
 8014834:	6a03      	ldr	r3, [r0, #32]
 8014836:	b90b      	cbnz	r3, 801483c <_vfiprintf_r+0x18>
 8014838:	f7fd f83a 	bl	80118b0 <__sinit>
 801483c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801483e:	07d9      	lsls	r1, r3, #31
 8014840:	d405      	bmi.n	801484e <_vfiprintf_r+0x2a>
 8014842:	89ab      	ldrh	r3, [r5, #12]
 8014844:	059a      	lsls	r2, r3, #22
 8014846:	d402      	bmi.n	801484e <_vfiprintf_r+0x2a>
 8014848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801484a:	f7fd fabe 	bl	8011dca <__retarget_lock_acquire_recursive>
 801484e:	89ab      	ldrh	r3, [r5, #12]
 8014850:	071b      	lsls	r3, r3, #28
 8014852:	d501      	bpl.n	8014858 <_vfiprintf_r+0x34>
 8014854:	692b      	ldr	r3, [r5, #16]
 8014856:	b99b      	cbnz	r3, 8014880 <_vfiprintf_r+0x5c>
 8014858:	4629      	mov	r1, r5
 801485a:	4630      	mov	r0, r6
 801485c:	f7fd f9a8 	bl	8011bb0 <__swsetup_r>
 8014860:	b170      	cbz	r0, 8014880 <_vfiprintf_r+0x5c>
 8014862:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014864:	07dc      	lsls	r4, r3, #31
 8014866:	d504      	bpl.n	8014872 <_vfiprintf_r+0x4e>
 8014868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801486c:	b01d      	add	sp, #116	@ 0x74
 801486e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014872:	89ab      	ldrh	r3, [r5, #12]
 8014874:	0598      	lsls	r0, r3, #22
 8014876:	d4f7      	bmi.n	8014868 <_vfiprintf_r+0x44>
 8014878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801487a:	f7fd faa7 	bl	8011dcc <__retarget_lock_release_recursive>
 801487e:	e7f3      	b.n	8014868 <_vfiprintf_r+0x44>
 8014880:	2300      	movs	r3, #0
 8014882:	9309      	str	r3, [sp, #36]	@ 0x24
 8014884:	2320      	movs	r3, #32
 8014886:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801488a:	f8cd 800c 	str.w	r8, [sp, #12]
 801488e:	2330      	movs	r3, #48	@ 0x30
 8014890:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014a40 <_vfiprintf_r+0x21c>
 8014894:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014898:	f04f 0901 	mov.w	r9, #1
 801489c:	4623      	mov	r3, r4
 801489e:	469a      	mov	sl, r3
 80148a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148a4:	b10a      	cbz	r2, 80148aa <_vfiprintf_r+0x86>
 80148a6:	2a25      	cmp	r2, #37	@ 0x25
 80148a8:	d1f9      	bne.n	801489e <_vfiprintf_r+0x7a>
 80148aa:	ebba 0b04 	subs.w	fp, sl, r4
 80148ae:	d00b      	beq.n	80148c8 <_vfiprintf_r+0xa4>
 80148b0:	465b      	mov	r3, fp
 80148b2:	4622      	mov	r2, r4
 80148b4:	4629      	mov	r1, r5
 80148b6:	4630      	mov	r0, r6
 80148b8:	f7ff ffa1 	bl	80147fe <__sfputs_r>
 80148bc:	3001      	adds	r0, #1
 80148be:	f000 80a7 	beq.w	8014a10 <_vfiprintf_r+0x1ec>
 80148c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80148c4:	445a      	add	r2, fp
 80148c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80148c8:	f89a 3000 	ldrb.w	r3, [sl]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	f000 809f 	beq.w	8014a10 <_vfiprintf_r+0x1ec>
 80148d2:	2300      	movs	r3, #0
 80148d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80148d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148dc:	f10a 0a01 	add.w	sl, sl, #1
 80148e0:	9304      	str	r3, [sp, #16]
 80148e2:	9307      	str	r3, [sp, #28]
 80148e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80148e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80148ea:	4654      	mov	r4, sl
 80148ec:	2205      	movs	r2, #5
 80148ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148f2:	4853      	ldr	r0, [pc, #332]	@ (8014a40 <_vfiprintf_r+0x21c>)
 80148f4:	f7eb fd1c 	bl	8000330 <memchr>
 80148f8:	9a04      	ldr	r2, [sp, #16]
 80148fa:	b9d8      	cbnz	r0, 8014934 <_vfiprintf_r+0x110>
 80148fc:	06d1      	lsls	r1, r2, #27
 80148fe:	bf44      	itt	mi
 8014900:	2320      	movmi	r3, #32
 8014902:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014906:	0713      	lsls	r3, r2, #28
 8014908:	bf44      	itt	mi
 801490a:	232b      	movmi	r3, #43	@ 0x2b
 801490c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014910:	f89a 3000 	ldrb.w	r3, [sl]
 8014914:	2b2a      	cmp	r3, #42	@ 0x2a
 8014916:	d015      	beq.n	8014944 <_vfiprintf_r+0x120>
 8014918:	9a07      	ldr	r2, [sp, #28]
 801491a:	4654      	mov	r4, sl
 801491c:	2000      	movs	r0, #0
 801491e:	f04f 0c0a 	mov.w	ip, #10
 8014922:	4621      	mov	r1, r4
 8014924:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014928:	3b30      	subs	r3, #48	@ 0x30
 801492a:	2b09      	cmp	r3, #9
 801492c:	d94b      	bls.n	80149c6 <_vfiprintf_r+0x1a2>
 801492e:	b1b0      	cbz	r0, 801495e <_vfiprintf_r+0x13a>
 8014930:	9207      	str	r2, [sp, #28]
 8014932:	e014      	b.n	801495e <_vfiprintf_r+0x13a>
 8014934:	eba0 0308 	sub.w	r3, r0, r8
 8014938:	fa09 f303 	lsl.w	r3, r9, r3
 801493c:	4313      	orrs	r3, r2
 801493e:	9304      	str	r3, [sp, #16]
 8014940:	46a2      	mov	sl, r4
 8014942:	e7d2      	b.n	80148ea <_vfiprintf_r+0xc6>
 8014944:	9b03      	ldr	r3, [sp, #12]
 8014946:	1d19      	adds	r1, r3, #4
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	9103      	str	r1, [sp, #12]
 801494c:	2b00      	cmp	r3, #0
 801494e:	bfbb      	ittet	lt
 8014950:	425b      	neglt	r3, r3
 8014952:	f042 0202 	orrlt.w	r2, r2, #2
 8014956:	9307      	strge	r3, [sp, #28]
 8014958:	9307      	strlt	r3, [sp, #28]
 801495a:	bfb8      	it	lt
 801495c:	9204      	strlt	r2, [sp, #16]
 801495e:	7823      	ldrb	r3, [r4, #0]
 8014960:	2b2e      	cmp	r3, #46	@ 0x2e
 8014962:	d10a      	bne.n	801497a <_vfiprintf_r+0x156>
 8014964:	7863      	ldrb	r3, [r4, #1]
 8014966:	2b2a      	cmp	r3, #42	@ 0x2a
 8014968:	d132      	bne.n	80149d0 <_vfiprintf_r+0x1ac>
 801496a:	9b03      	ldr	r3, [sp, #12]
 801496c:	1d1a      	adds	r2, r3, #4
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	9203      	str	r2, [sp, #12]
 8014972:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014976:	3402      	adds	r4, #2
 8014978:	9305      	str	r3, [sp, #20]
 801497a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014a50 <_vfiprintf_r+0x22c>
 801497e:	7821      	ldrb	r1, [r4, #0]
 8014980:	2203      	movs	r2, #3
 8014982:	4650      	mov	r0, sl
 8014984:	f7eb fcd4 	bl	8000330 <memchr>
 8014988:	b138      	cbz	r0, 801499a <_vfiprintf_r+0x176>
 801498a:	9b04      	ldr	r3, [sp, #16]
 801498c:	eba0 000a 	sub.w	r0, r0, sl
 8014990:	2240      	movs	r2, #64	@ 0x40
 8014992:	4082      	lsls	r2, r0
 8014994:	4313      	orrs	r3, r2
 8014996:	3401      	adds	r4, #1
 8014998:	9304      	str	r3, [sp, #16]
 801499a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801499e:	4829      	ldr	r0, [pc, #164]	@ (8014a44 <_vfiprintf_r+0x220>)
 80149a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80149a4:	2206      	movs	r2, #6
 80149a6:	f7eb fcc3 	bl	8000330 <memchr>
 80149aa:	2800      	cmp	r0, #0
 80149ac:	d03f      	beq.n	8014a2e <_vfiprintf_r+0x20a>
 80149ae:	4b26      	ldr	r3, [pc, #152]	@ (8014a48 <_vfiprintf_r+0x224>)
 80149b0:	bb1b      	cbnz	r3, 80149fa <_vfiprintf_r+0x1d6>
 80149b2:	9b03      	ldr	r3, [sp, #12]
 80149b4:	3307      	adds	r3, #7
 80149b6:	f023 0307 	bic.w	r3, r3, #7
 80149ba:	3308      	adds	r3, #8
 80149bc:	9303      	str	r3, [sp, #12]
 80149be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149c0:	443b      	add	r3, r7
 80149c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80149c4:	e76a      	b.n	801489c <_vfiprintf_r+0x78>
 80149c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80149ca:	460c      	mov	r4, r1
 80149cc:	2001      	movs	r0, #1
 80149ce:	e7a8      	b.n	8014922 <_vfiprintf_r+0xfe>
 80149d0:	2300      	movs	r3, #0
 80149d2:	3401      	adds	r4, #1
 80149d4:	9305      	str	r3, [sp, #20]
 80149d6:	4619      	mov	r1, r3
 80149d8:	f04f 0c0a 	mov.w	ip, #10
 80149dc:	4620      	mov	r0, r4
 80149de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149e2:	3a30      	subs	r2, #48	@ 0x30
 80149e4:	2a09      	cmp	r2, #9
 80149e6:	d903      	bls.n	80149f0 <_vfiprintf_r+0x1cc>
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d0c6      	beq.n	801497a <_vfiprintf_r+0x156>
 80149ec:	9105      	str	r1, [sp, #20]
 80149ee:	e7c4      	b.n	801497a <_vfiprintf_r+0x156>
 80149f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80149f4:	4604      	mov	r4, r0
 80149f6:	2301      	movs	r3, #1
 80149f8:	e7f0      	b.n	80149dc <_vfiprintf_r+0x1b8>
 80149fa:	ab03      	add	r3, sp, #12
 80149fc:	9300      	str	r3, [sp, #0]
 80149fe:	462a      	mov	r2, r5
 8014a00:	4b12      	ldr	r3, [pc, #72]	@ (8014a4c <_vfiprintf_r+0x228>)
 8014a02:	a904      	add	r1, sp, #16
 8014a04:	4630      	mov	r0, r6
 8014a06:	f7fc f91b 	bl	8010c40 <_printf_float>
 8014a0a:	4607      	mov	r7, r0
 8014a0c:	1c78      	adds	r0, r7, #1
 8014a0e:	d1d6      	bne.n	80149be <_vfiprintf_r+0x19a>
 8014a10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a12:	07d9      	lsls	r1, r3, #31
 8014a14:	d405      	bmi.n	8014a22 <_vfiprintf_r+0x1fe>
 8014a16:	89ab      	ldrh	r3, [r5, #12]
 8014a18:	059a      	lsls	r2, r3, #22
 8014a1a:	d402      	bmi.n	8014a22 <_vfiprintf_r+0x1fe>
 8014a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a1e:	f7fd f9d5 	bl	8011dcc <__retarget_lock_release_recursive>
 8014a22:	89ab      	ldrh	r3, [r5, #12]
 8014a24:	065b      	lsls	r3, r3, #25
 8014a26:	f53f af1f 	bmi.w	8014868 <_vfiprintf_r+0x44>
 8014a2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014a2c:	e71e      	b.n	801486c <_vfiprintf_r+0x48>
 8014a2e:	ab03      	add	r3, sp, #12
 8014a30:	9300      	str	r3, [sp, #0]
 8014a32:	462a      	mov	r2, r5
 8014a34:	4b05      	ldr	r3, [pc, #20]	@ (8014a4c <_vfiprintf_r+0x228>)
 8014a36:	a904      	add	r1, sp, #16
 8014a38:	4630      	mov	r0, r6
 8014a3a:	f7fc fb89 	bl	8011150 <_printf_i>
 8014a3e:	e7e4      	b.n	8014a0a <_vfiprintf_r+0x1e6>
 8014a40:	08016c8f 	.word	0x08016c8f
 8014a44:	08016c99 	.word	0x08016c99
 8014a48:	08010c41 	.word	0x08010c41
 8014a4c:	080147ff 	.word	0x080147ff
 8014a50:	08016c95 	.word	0x08016c95

08014a54 <_scanf_chars>:
 8014a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a58:	4615      	mov	r5, r2
 8014a5a:	688a      	ldr	r2, [r1, #8]
 8014a5c:	4680      	mov	r8, r0
 8014a5e:	460c      	mov	r4, r1
 8014a60:	b932      	cbnz	r2, 8014a70 <_scanf_chars+0x1c>
 8014a62:	698a      	ldr	r2, [r1, #24]
 8014a64:	2a00      	cmp	r2, #0
 8014a66:	bf14      	ite	ne
 8014a68:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8014a6c:	2201      	moveq	r2, #1
 8014a6e:	608a      	str	r2, [r1, #8]
 8014a70:	6822      	ldr	r2, [r4, #0]
 8014a72:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8014b04 <_scanf_chars+0xb0>
 8014a76:	06d1      	lsls	r1, r2, #27
 8014a78:	bf5f      	itttt	pl
 8014a7a:	681a      	ldrpl	r2, [r3, #0]
 8014a7c:	1d11      	addpl	r1, r2, #4
 8014a7e:	6019      	strpl	r1, [r3, #0]
 8014a80:	6816      	ldrpl	r6, [r2, #0]
 8014a82:	2700      	movs	r7, #0
 8014a84:	69a0      	ldr	r0, [r4, #24]
 8014a86:	b188      	cbz	r0, 8014aac <_scanf_chars+0x58>
 8014a88:	2801      	cmp	r0, #1
 8014a8a:	d107      	bne.n	8014a9c <_scanf_chars+0x48>
 8014a8c:	682b      	ldr	r3, [r5, #0]
 8014a8e:	781a      	ldrb	r2, [r3, #0]
 8014a90:	6963      	ldr	r3, [r4, #20]
 8014a92:	5c9b      	ldrb	r3, [r3, r2]
 8014a94:	b953      	cbnz	r3, 8014aac <_scanf_chars+0x58>
 8014a96:	2f00      	cmp	r7, #0
 8014a98:	d031      	beq.n	8014afe <_scanf_chars+0xaa>
 8014a9a:	e022      	b.n	8014ae2 <_scanf_chars+0x8e>
 8014a9c:	2802      	cmp	r0, #2
 8014a9e:	d120      	bne.n	8014ae2 <_scanf_chars+0x8e>
 8014aa0:	682b      	ldr	r3, [r5, #0]
 8014aa2:	781b      	ldrb	r3, [r3, #0]
 8014aa4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8014aa8:	071b      	lsls	r3, r3, #28
 8014aaa:	d41a      	bmi.n	8014ae2 <_scanf_chars+0x8e>
 8014aac:	6823      	ldr	r3, [r4, #0]
 8014aae:	06da      	lsls	r2, r3, #27
 8014ab0:	bf5e      	ittt	pl
 8014ab2:	682b      	ldrpl	r3, [r5, #0]
 8014ab4:	781b      	ldrbpl	r3, [r3, #0]
 8014ab6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014aba:	682a      	ldr	r2, [r5, #0]
 8014abc:	686b      	ldr	r3, [r5, #4]
 8014abe:	3201      	adds	r2, #1
 8014ac0:	602a      	str	r2, [r5, #0]
 8014ac2:	68a2      	ldr	r2, [r4, #8]
 8014ac4:	3b01      	subs	r3, #1
 8014ac6:	3a01      	subs	r2, #1
 8014ac8:	606b      	str	r3, [r5, #4]
 8014aca:	3701      	adds	r7, #1
 8014acc:	60a2      	str	r2, [r4, #8]
 8014ace:	b142      	cbz	r2, 8014ae2 <_scanf_chars+0x8e>
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	dcd7      	bgt.n	8014a84 <_scanf_chars+0x30>
 8014ad4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014ad8:	4629      	mov	r1, r5
 8014ada:	4640      	mov	r0, r8
 8014adc:	4798      	blx	r3
 8014ade:	2800      	cmp	r0, #0
 8014ae0:	d0d0      	beq.n	8014a84 <_scanf_chars+0x30>
 8014ae2:	6823      	ldr	r3, [r4, #0]
 8014ae4:	f013 0310 	ands.w	r3, r3, #16
 8014ae8:	d105      	bne.n	8014af6 <_scanf_chars+0xa2>
 8014aea:	68e2      	ldr	r2, [r4, #12]
 8014aec:	3201      	adds	r2, #1
 8014aee:	60e2      	str	r2, [r4, #12]
 8014af0:	69a2      	ldr	r2, [r4, #24]
 8014af2:	b102      	cbz	r2, 8014af6 <_scanf_chars+0xa2>
 8014af4:	7033      	strb	r3, [r6, #0]
 8014af6:	6923      	ldr	r3, [r4, #16]
 8014af8:	443b      	add	r3, r7
 8014afa:	6123      	str	r3, [r4, #16]
 8014afc:	2000      	movs	r0, #0
 8014afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b02:	bf00      	nop
 8014b04:	08016eb1 	.word	0x08016eb1

08014b08 <_scanf_i>:
 8014b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b0c:	4698      	mov	r8, r3
 8014b0e:	4b74      	ldr	r3, [pc, #464]	@ (8014ce0 <_scanf_i+0x1d8>)
 8014b10:	460c      	mov	r4, r1
 8014b12:	4682      	mov	sl, r0
 8014b14:	4616      	mov	r6, r2
 8014b16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014b1a:	b087      	sub	sp, #28
 8014b1c:	ab03      	add	r3, sp, #12
 8014b1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014b22:	4b70      	ldr	r3, [pc, #448]	@ (8014ce4 <_scanf_i+0x1dc>)
 8014b24:	69a1      	ldr	r1, [r4, #24]
 8014b26:	4a70      	ldr	r2, [pc, #448]	@ (8014ce8 <_scanf_i+0x1e0>)
 8014b28:	2903      	cmp	r1, #3
 8014b2a:	bf08      	it	eq
 8014b2c:	461a      	moveq	r2, r3
 8014b2e:	68a3      	ldr	r3, [r4, #8]
 8014b30:	9201      	str	r2, [sp, #4]
 8014b32:	1e5a      	subs	r2, r3, #1
 8014b34:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014b38:	bf88      	it	hi
 8014b3a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014b3e:	4627      	mov	r7, r4
 8014b40:	bf82      	ittt	hi
 8014b42:	eb03 0905 	addhi.w	r9, r3, r5
 8014b46:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014b4a:	60a3      	strhi	r3, [r4, #8]
 8014b4c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014b50:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8014b54:	bf98      	it	ls
 8014b56:	f04f 0900 	movls.w	r9, #0
 8014b5a:	6023      	str	r3, [r4, #0]
 8014b5c:	463d      	mov	r5, r7
 8014b5e:	f04f 0b00 	mov.w	fp, #0
 8014b62:	6831      	ldr	r1, [r6, #0]
 8014b64:	ab03      	add	r3, sp, #12
 8014b66:	7809      	ldrb	r1, [r1, #0]
 8014b68:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014b6c:	2202      	movs	r2, #2
 8014b6e:	f7eb fbdf 	bl	8000330 <memchr>
 8014b72:	b328      	cbz	r0, 8014bc0 <_scanf_i+0xb8>
 8014b74:	f1bb 0f01 	cmp.w	fp, #1
 8014b78:	d159      	bne.n	8014c2e <_scanf_i+0x126>
 8014b7a:	6862      	ldr	r2, [r4, #4]
 8014b7c:	b92a      	cbnz	r2, 8014b8a <_scanf_i+0x82>
 8014b7e:	6822      	ldr	r2, [r4, #0]
 8014b80:	2108      	movs	r1, #8
 8014b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014b86:	6061      	str	r1, [r4, #4]
 8014b88:	6022      	str	r2, [r4, #0]
 8014b8a:	6822      	ldr	r2, [r4, #0]
 8014b8c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8014b90:	6022      	str	r2, [r4, #0]
 8014b92:	68a2      	ldr	r2, [r4, #8]
 8014b94:	1e51      	subs	r1, r2, #1
 8014b96:	60a1      	str	r1, [r4, #8]
 8014b98:	b192      	cbz	r2, 8014bc0 <_scanf_i+0xb8>
 8014b9a:	6832      	ldr	r2, [r6, #0]
 8014b9c:	1c51      	adds	r1, r2, #1
 8014b9e:	6031      	str	r1, [r6, #0]
 8014ba0:	7812      	ldrb	r2, [r2, #0]
 8014ba2:	f805 2b01 	strb.w	r2, [r5], #1
 8014ba6:	6872      	ldr	r2, [r6, #4]
 8014ba8:	3a01      	subs	r2, #1
 8014baa:	2a00      	cmp	r2, #0
 8014bac:	6072      	str	r2, [r6, #4]
 8014bae:	dc07      	bgt.n	8014bc0 <_scanf_i+0xb8>
 8014bb0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8014bb4:	4631      	mov	r1, r6
 8014bb6:	4650      	mov	r0, sl
 8014bb8:	4790      	blx	r2
 8014bba:	2800      	cmp	r0, #0
 8014bbc:	f040 8085 	bne.w	8014cca <_scanf_i+0x1c2>
 8014bc0:	f10b 0b01 	add.w	fp, fp, #1
 8014bc4:	f1bb 0f03 	cmp.w	fp, #3
 8014bc8:	d1cb      	bne.n	8014b62 <_scanf_i+0x5a>
 8014bca:	6863      	ldr	r3, [r4, #4]
 8014bcc:	b90b      	cbnz	r3, 8014bd2 <_scanf_i+0xca>
 8014bce:	230a      	movs	r3, #10
 8014bd0:	6063      	str	r3, [r4, #4]
 8014bd2:	6863      	ldr	r3, [r4, #4]
 8014bd4:	4945      	ldr	r1, [pc, #276]	@ (8014cec <_scanf_i+0x1e4>)
 8014bd6:	6960      	ldr	r0, [r4, #20]
 8014bd8:	1ac9      	subs	r1, r1, r3
 8014bda:	f000 f9cb 	bl	8014f74 <__sccl>
 8014bde:	f04f 0b00 	mov.w	fp, #0
 8014be2:	68a3      	ldr	r3, [r4, #8]
 8014be4:	6822      	ldr	r2, [r4, #0]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d03d      	beq.n	8014c66 <_scanf_i+0x15e>
 8014bea:	6831      	ldr	r1, [r6, #0]
 8014bec:	6960      	ldr	r0, [r4, #20]
 8014bee:	f891 c000 	ldrb.w	ip, [r1]
 8014bf2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014bf6:	2800      	cmp	r0, #0
 8014bf8:	d035      	beq.n	8014c66 <_scanf_i+0x15e>
 8014bfa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8014bfe:	d124      	bne.n	8014c4a <_scanf_i+0x142>
 8014c00:	0510      	lsls	r0, r2, #20
 8014c02:	d522      	bpl.n	8014c4a <_scanf_i+0x142>
 8014c04:	f10b 0b01 	add.w	fp, fp, #1
 8014c08:	f1b9 0f00 	cmp.w	r9, #0
 8014c0c:	d003      	beq.n	8014c16 <_scanf_i+0x10e>
 8014c0e:	3301      	adds	r3, #1
 8014c10:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8014c14:	60a3      	str	r3, [r4, #8]
 8014c16:	6873      	ldr	r3, [r6, #4]
 8014c18:	3b01      	subs	r3, #1
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	6073      	str	r3, [r6, #4]
 8014c1e:	dd1b      	ble.n	8014c58 <_scanf_i+0x150>
 8014c20:	6833      	ldr	r3, [r6, #0]
 8014c22:	3301      	adds	r3, #1
 8014c24:	6033      	str	r3, [r6, #0]
 8014c26:	68a3      	ldr	r3, [r4, #8]
 8014c28:	3b01      	subs	r3, #1
 8014c2a:	60a3      	str	r3, [r4, #8]
 8014c2c:	e7d9      	b.n	8014be2 <_scanf_i+0xda>
 8014c2e:	f1bb 0f02 	cmp.w	fp, #2
 8014c32:	d1ae      	bne.n	8014b92 <_scanf_i+0x8a>
 8014c34:	6822      	ldr	r2, [r4, #0]
 8014c36:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8014c3a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8014c3e:	d1c4      	bne.n	8014bca <_scanf_i+0xc2>
 8014c40:	2110      	movs	r1, #16
 8014c42:	6061      	str	r1, [r4, #4]
 8014c44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014c48:	e7a2      	b.n	8014b90 <_scanf_i+0x88>
 8014c4a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8014c4e:	6022      	str	r2, [r4, #0]
 8014c50:	780b      	ldrb	r3, [r1, #0]
 8014c52:	f805 3b01 	strb.w	r3, [r5], #1
 8014c56:	e7de      	b.n	8014c16 <_scanf_i+0x10e>
 8014c58:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014c5c:	4631      	mov	r1, r6
 8014c5e:	4650      	mov	r0, sl
 8014c60:	4798      	blx	r3
 8014c62:	2800      	cmp	r0, #0
 8014c64:	d0df      	beq.n	8014c26 <_scanf_i+0x11e>
 8014c66:	6823      	ldr	r3, [r4, #0]
 8014c68:	05d9      	lsls	r1, r3, #23
 8014c6a:	d50d      	bpl.n	8014c88 <_scanf_i+0x180>
 8014c6c:	42bd      	cmp	r5, r7
 8014c6e:	d909      	bls.n	8014c84 <_scanf_i+0x17c>
 8014c70:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014c74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014c78:	4632      	mov	r2, r6
 8014c7a:	4650      	mov	r0, sl
 8014c7c:	4798      	blx	r3
 8014c7e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8014c82:	464d      	mov	r5, r9
 8014c84:	42bd      	cmp	r5, r7
 8014c86:	d028      	beq.n	8014cda <_scanf_i+0x1d2>
 8014c88:	6822      	ldr	r2, [r4, #0]
 8014c8a:	f012 0210 	ands.w	r2, r2, #16
 8014c8e:	d113      	bne.n	8014cb8 <_scanf_i+0x1b0>
 8014c90:	702a      	strb	r2, [r5, #0]
 8014c92:	6863      	ldr	r3, [r4, #4]
 8014c94:	9e01      	ldr	r6, [sp, #4]
 8014c96:	4639      	mov	r1, r7
 8014c98:	4650      	mov	r0, sl
 8014c9a:	47b0      	blx	r6
 8014c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8014ca0:	6821      	ldr	r1, [r4, #0]
 8014ca2:	1d1a      	adds	r2, r3, #4
 8014ca4:	f8c8 2000 	str.w	r2, [r8]
 8014ca8:	f011 0f20 	tst.w	r1, #32
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	d00f      	beq.n	8014cd0 <_scanf_i+0x1c8>
 8014cb0:	6018      	str	r0, [r3, #0]
 8014cb2:	68e3      	ldr	r3, [r4, #12]
 8014cb4:	3301      	adds	r3, #1
 8014cb6:	60e3      	str	r3, [r4, #12]
 8014cb8:	6923      	ldr	r3, [r4, #16]
 8014cba:	1bed      	subs	r5, r5, r7
 8014cbc:	445d      	add	r5, fp
 8014cbe:	442b      	add	r3, r5
 8014cc0:	6123      	str	r3, [r4, #16]
 8014cc2:	2000      	movs	r0, #0
 8014cc4:	b007      	add	sp, #28
 8014cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cca:	f04f 0b00 	mov.w	fp, #0
 8014cce:	e7ca      	b.n	8014c66 <_scanf_i+0x15e>
 8014cd0:	07ca      	lsls	r2, r1, #31
 8014cd2:	bf4c      	ite	mi
 8014cd4:	8018      	strhmi	r0, [r3, #0]
 8014cd6:	6018      	strpl	r0, [r3, #0]
 8014cd8:	e7eb      	b.n	8014cb2 <_scanf_i+0x1aa>
 8014cda:	2001      	movs	r0, #1
 8014cdc:	e7f2      	b.n	8014cc4 <_scanf_i+0x1bc>
 8014cde:	bf00      	nop
 8014ce0:	08016aec 	.word	0x08016aec
 8014ce4:	0801417d 	.word	0x0801417d
 8014ce8:	08015905 	.word	0x08015905
 8014cec:	08016cb0 	.word	0x08016cb0

08014cf0 <__sflush_r>:
 8014cf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cf8:	0716      	lsls	r6, r2, #28
 8014cfa:	4605      	mov	r5, r0
 8014cfc:	460c      	mov	r4, r1
 8014cfe:	d454      	bmi.n	8014daa <__sflush_r+0xba>
 8014d00:	684b      	ldr	r3, [r1, #4]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	dc02      	bgt.n	8014d0c <__sflush_r+0x1c>
 8014d06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	dd48      	ble.n	8014d9e <__sflush_r+0xae>
 8014d0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d0e:	2e00      	cmp	r6, #0
 8014d10:	d045      	beq.n	8014d9e <__sflush_r+0xae>
 8014d12:	2300      	movs	r3, #0
 8014d14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014d18:	682f      	ldr	r7, [r5, #0]
 8014d1a:	6a21      	ldr	r1, [r4, #32]
 8014d1c:	602b      	str	r3, [r5, #0]
 8014d1e:	d030      	beq.n	8014d82 <__sflush_r+0x92>
 8014d20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014d22:	89a3      	ldrh	r3, [r4, #12]
 8014d24:	0759      	lsls	r1, r3, #29
 8014d26:	d505      	bpl.n	8014d34 <__sflush_r+0x44>
 8014d28:	6863      	ldr	r3, [r4, #4]
 8014d2a:	1ad2      	subs	r2, r2, r3
 8014d2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014d2e:	b10b      	cbz	r3, 8014d34 <__sflush_r+0x44>
 8014d30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014d32:	1ad2      	subs	r2, r2, r3
 8014d34:	2300      	movs	r3, #0
 8014d36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d38:	6a21      	ldr	r1, [r4, #32]
 8014d3a:	4628      	mov	r0, r5
 8014d3c:	47b0      	blx	r6
 8014d3e:	1c43      	adds	r3, r0, #1
 8014d40:	89a3      	ldrh	r3, [r4, #12]
 8014d42:	d106      	bne.n	8014d52 <__sflush_r+0x62>
 8014d44:	6829      	ldr	r1, [r5, #0]
 8014d46:	291d      	cmp	r1, #29
 8014d48:	d82b      	bhi.n	8014da2 <__sflush_r+0xb2>
 8014d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8014df4 <__sflush_r+0x104>)
 8014d4c:	40ca      	lsrs	r2, r1
 8014d4e:	07d6      	lsls	r6, r2, #31
 8014d50:	d527      	bpl.n	8014da2 <__sflush_r+0xb2>
 8014d52:	2200      	movs	r2, #0
 8014d54:	6062      	str	r2, [r4, #4]
 8014d56:	04d9      	lsls	r1, r3, #19
 8014d58:	6922      	ldr	r2, [r4, #16]
 8014d5a:	6022      	str	r2, [r4, #0]
 8014d5c:	d504      	bpl.n	8014d68 <__sflush_r+0x78>
 8014d5e:	1c42      	adds	r2, r0, #1
 8014d60:	d101      	bne.n	8014d66 <__sflush_r+0x76>
 8014d62:	682b      	ldr	r3, [r5, #0]
 8014d64:	b903      	cbnz	r3, 8014d68 <__sflush_r+0x78>
 8014d66:	6560      	str	r0, [r4, #84]	@ 0x54
 8014d68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014d6a:	602f      	str	r7, [r5, #0]
 8014d6c:	b1b9      	cbz	r1, 8014d9e <__sflush_r+0xae>
 8014d6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014d72:	4299      	cmp	r1, r3
 8014d74:	d002      	beq.n	8014d7c <__sflush_r+0x8c>
 8014d76:	4628      	mov	r0, r5
 8014d78:	f7fd fe24 	bl	80129c4 <_free_r>
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014d80:	e00d      	b.n	8014d9e <__sflush_r+0xae>
 8014d82:	2301      	movs	r3, #1
 8014d84:	4628      	mov	r0, r5
 8014d86:	47b0      	blx	r6
 8014d88:	4602      	mov	r2, r0
 8014d8a:	1c50      	adds	r0, r2, #1
 8014d8c:	d1c9      	bne.n	8014d22 <__sflush_r+0x32>
 8014d8e:	682b      	ldr	r3, [r5, #0]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d0c6      	beq.n	8014d22 <__sflush_r+0x32>
 8014d94:	2b1d      	cmp	r3, #29
 8014d96:	d001      	beq.n	8014d9c <__sflush_r+0xac>
 8014d98:	2b16      	cmp	r3, #22
 8014d9a:	d11e      	bne.n	8014dda <__sflush_r+0xea>
 8014d9c:	602f      	str	r7, [r5, #0]
 8014d9e:	2000      	movs	r0, #0
 8014da0:	e022      	b.n	8014de8 <__sflush_r+0xf8>
 8014da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014da6:	b21b      	sxth	r3, r3
 8014da8:	e01b      	b.n	8014de2 <__sflush_r+0xf2>
 8014daa:	690f      	ldr	r7, [r1, #16]
 8014dac:	2f00      	cmp	r7, #0
 8014dae:	d0f6      	beq.n	8014d9e <__sflush_r+0xae>
 8014db0:	0793      	lsls	r3, r2, #30
 8014db2:	680e      	ldr	r6, [r1, #0]
 8014db4:	bf08      	it	eq
 8014db6:	694b      	ldreq	r3, [r1, #20]
 8014db8:	600f      	str	r7, [r1, #0]
 8014dba:	bf18      	it	ne
 8014dbc:	2300      	movne	r3, #0
 8014dbe:	eba6 0807 	sub.w	r8, r6, r7
 8014dc2:	608b      	str	r3, [r1, #8]
 8014dc4:	f1b8 0f00 	cmp.w	r8, #0
 8014dc8:	dde9      	ble.n	8014d9e <__sflush_r+0xae>
 8014dca:	6a21      	ldr	r1, [r4, #32]
 8014dcc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014dce:	4643      	mov	r3, r8
 8014dd0:	463a      	mov	r2, r7
 8014dd2:	4628      	mov	r0, r5
 8014dd4:	47b0      	blx	r6
 8014dd6:	2800      	cmp	r0, #0
 8014dd8:	dc08      	bgt.n	8014dec <__sflush_r+0xfc>
 8014dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014de2:	81a3      	strh	r3, [r4, #12]
 8014de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dec:	4407      	add	r7, r0
 8014dee:	eba8 0800 	sub.w	r8, r8, r0
 8014df2:	e7e7      	b.n	8014dc4 <__sflush_r+0xd4>
 8014df4:	20400001 	.word	0x20400001

08014df8 <_fflush_r>:
 8014df8:	b538      	push	{r3, r4, r5, lr}
 8014dfa:	690b      	ldr	r3, [r1, #16]
 8014dfc:	4605      	mov	r5, r0
 8014dfe:	460c      	mov	r4, r1
 8014e00:	b913      	cbnz	r3, 8014e08 <_fflush_r+0x10>
 8014e02:	2500      	movs	r5, #0
 8014e04:	4628      	mov	r0, r5
 8014e06:	bd38      	pop	{r3, r4, r5, pc}
 8014e08:	b118      	cbz	r0, 8014e12 <_fflush_r+0x1a>
 8014e0a:	6a03      	ldr	r3, [r0, #32]
 8014e0c:	b90b      	cbnz	r3, 8014e12 <_fflush_r+0x1a>
 8014e0e:	f7fc fd4f 	bl	80118b0 <__sinit>
 8014e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d0f3      	beq.n	8014e02 <_fflush_r+0xa>
 8014e1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014e1c:	07d0      	lsls	r0, r2, #31
 8014e1e:	d404      	bmi.n	8014e2a <_fflush_r+0x32>
 8014e20:	0599      	lsls	r1, r3, #22
 8014e22:	d402      	bmi.n	8014e2a <_fflush_r+0x32>
 8014e24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e26:	f7fc ffd0 	bl	8011dca <__retarget_lock_acquire_recursive>
 8014e2a:	4628      	mov	r0, r5
 8014e2c:	4621      	mov	r1, r4
 8014e2e:	f7ff ff5f 	bl	8014cf0 <__sflush_r>
 8014e32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014e34:	07da      	lsls	r2, r3, #31
 8014e36:	4605      	mov	r5, r0
 8014e38:	d4e4      	bmi.n	8014e04 <_fflush_r+0xc>
 8014e3a:	89a3      	ldrh	r3, [r4, #12]
 8014e3c:	059b      	lsls	r3, r3, #22
 8014e3e:	d4e1      	bmi.n	8014e04 <_fflush_r+0xc>
 8014e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e42:	f7fc ffc3 	bl	8011dcc <__retarget_lock_release_recursive>
 8014e46:	e7dd      	b.n	8014e04 <_fflush_r+0xc>

08014e48 <__swhatbuf_r>:
 8014e48:	b570      	push	{r4, r5, r6, lr}
 8014e4a:	460c      	mov	r4, r1
 8014e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e50:	2900      	cmp	r1, #0
 8014e52:	b096      	sub	sp, #88	@ 0x58
 8014e54:	4615      	mov	r5, r2
 8014e56:	461e      	mov	r6, r3
 8014e58:	da0d      	bge.n	8014e76 <__swhatbuf_r+0x2e>
 8014e5a:	89a3      	ldrh	r3, [r4, #12]
 8014e5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014e60:	f04f 0100 	mov.w	r1, #0
 8014e64:	bf14      	ite	ne
 8014e66:	2340      	movne	r3, #64	@ 0x40
 8014e68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014e6c:	2000      	movs	r0, #0
 8014e6e:	6031      	str	r1, [r6, #0]
 8014e70:	602b      	str	r3, [r5, #0]
 8014e72:	b016      	add	sp, #88	@ 0x58
 8014e74:	bd70      	pop	{r4, r5, r6, pc}
 8014e76:	466a      	mov	r2, sp
 8014e78:	f000 f8f0 	bl	801505c <_fstat_r>
 8014e7c:	2800      	cmp	r0, #0
 8014e7e:	dbec      	blt.n	8014e5a <__swhatbuf_r+0x12>
 8014e80:	9901      	ldr	r1, [sp, #4]
 8014e82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014e86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014e8a:	4259      	negs	r1, r3
 8014e8c:	4159      	adcs	r1, r3
 8014e8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014e92:	e7eb      	b.n	8014e6c <__swhatbuf_r+0x24>

08014e94 <__smakebuf_r>:
 8014e94:	898b      	ldrh	r3, [r1, #12]
 8014e96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e98:	079d      	lsls	r5, r3, #30
 8014e9a:	4606      	mov	r6, r0
 8014e9c:	460c      	mov	r4, r1
 8014e9e:	d507      	bpl.n	8014eb0 <__smakebuf_r+0x1c>
 8014ea0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014ea4:	6023      	str	r3, [r4, #0]
 8014ea6:	6123      	str	r3, [r4, #16]
 8014ea8:	2301      	movs	r3, #1
 8014eaa:	6163      	str	r3, [r4, #20]
 8014eac:	b003      	add	sp, #12
 8014eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014eb0:	ab01      	add	r3, sp, #4
 8014eb2:	466a      	mov	r2, sp
 8014eb4:	f7ff ffc8 	bl	8014e48 <__swhatbuf_r>
 8014eb8:	9f00      	ldr	r7, [sp, #0]
 8014eba:	4605      	mov	r5, r0
 8014ebc:	4639      	mov	r1, r7
 8014ebe:	4630      	mov	r0, r6
 8014ec0:	f7fd fdf4 	bl	8012aac <_malloc_r>
 8014ec4:	b948      	cbnz	r0, 8014eda <__smakebuf_r+0x46>
 8014ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014eca:	059a      	lsls	r2, r3, #22
 8014ecc:	d4ee      	bmi.n	8014eac <__smakebuf_r+0x18>
 8014ece:	f023 0303 	bic.w	r3, r3, #3
 8014ed2:	f043 0302 	orr.w	r3, r3, #2
 8014ed6:	81a3      	strh	r3, [r4, #12]
 8014ed8:	e7e2      	b.n	8014ea0 <__smakebuf_r+0xc>
 8014eda:	89a3      	ldrh	r3, [r4, #12]
 8014edc:	6020      	str	r0, [r4, #0]
 8014ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014ee2:	81a3      	strh	r3, [r4, #12]
 8014ee4:	9b01      	ldr	r3, [sp, #4]
 8014ee6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014eea:	b15b      	cbz	r3, 8014f04 <__smakebuf_r+0x70>
 8014eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ef0:	4630      	mov	r0, r6
 8014ef2:	f000 f8c5 	bl	8015080 <_isatty_r>
 8014ef6:	b128      	cbz	r0, 8014f04 <__smakebuf_r+0x70>
 8014ef8:	89a3      	ldrh	r3, [r4, #12]
 8014efa:	f023 0303 	bic.w	r3, r3, #3
 8014efe:	f043 0301 	orr.w	r3, r3, #1
 8014f02:	81a3      	strh	r3, [r4, #12]
 8014f04:	89a3      	ldrh	r3, [r4, #12]
 8014f06:	431d      	orrs	r5, r3
 8014f08:	81a5      	strh	r5, [r4, #12]
 8014f0a:	e7cf      	b.n	8014eac <__smakebuf_r+0x18>

08014f0c <_putc_r>:
 8014f0c:	b570      	push	{r4, r5, r6, lr}
 8014f0e:	460d      	mov	r5, r1
 8014f10:	4614      	mov	r4, r2
 8014f12:	4606      	mov	r6, r0
 8014f14:	b118      	cbz	r0, 8014f1e <_putc_r+0x12>
 8014f16:	6a03      	ldr	r3, [r0, #32]
 8014f18:	b90b      	cbnz	r3, 8014f1e <_putc_r+0x12>
 8014f1a:	f7fc fcc9 	bl	80118b0 <__sinit>
 8014f1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f20:	07d8      	lsls	r0, r3, #31
 8014f22:	d405      	bmi.n	8014f30 <_putc_r+0x24>
 8014f24:	89a3      	ldrh	r3, [r4, #12]
 8014f26:	0599      	lsls	r1, r3, #22
 8014f28:	d402      	bmi.n	8014f30 <_putc_r+0x24>
 8014f2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f2c:	f7fc ff4d 	bl	8011dca <__retarget_lock_acquire_recursive>
 8014f30:	68a3      	ldr	r3, [r4, #8]
 8014f32:	3b01      	subs	r3, #1
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	60a3      	str	r3, [r4, #8]
 8014f38:	da05      	bge.n	8014f46 <_putc_r+0x3a>
 8014f3a:	69a2      	ldr	r2, [r4, #24]
 8014f3c:	4293      	cmp	r3, r2
 8014f3e:	db12      	blt.n	8014f66 <_putc_r+0x5a>
 8014f40:	b2eb      	uxtb	r3, r5
 8014f42:	2b0a      	cmp	r3, #10
 8014f44:	d00f      	beq.n	8014f66 <_putc_r+0x5a>
 8014f46:	6823      	ldr	r3, [r4, #0]
 8014f48:	1c5a      	adds	r2, r3, #1
 8014f4a:	6022      	str	r2, [r4, #0]
 8014f4c:	701d      	strb	r5, [r3, #0]
 8014f4e:	b2ed      	uxtb	r5, r5
 8014f50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f52:	07da      	lsls	r2, r3, #31
 8014f54:	d405      	bmi.n	8014f62 <_putc_r+0x56>
 8014f56:	89a3      	ldrh	r3, [r4, #12]
 8014f58:	059b      	lsls	r3, r3, #22
 8014f5a:	d402      	bmi.n	8014f62 <_putc_r+0x56>
 8014f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f5e:	f7fc ff35 	bl	8011dcc <__retarget_lock_release_recursive>
 8014f62:	4628      	mov	r0, r5
 8014f64:	bd70      	pop	{r4, r5, r6, pc}
 8014f66:	4629      	mov	r1, r5
 8014f68:	4622      	mov	r2, r4
 8014f6a:	4630      	mov	r0, r6
 8014f6c:	f7fc fde1 	bl	8011b32 <__swbuf_r>
 8014f70:	4605      	mov	r5, r0
 8014f72:	e7ed      	b.n	8014f50 <_putc_r+0x44>

08014f74 <__sccl>:
 8014f74:	b570      	push	{r4, r5, r6, lr}
 8014f76:	780b      	ldrb	r3, [r1, #0]
 8014f78:	4604      	mov	r4, r0
 8014f7a:	2b5e      	cmp	r3, #94	@ 0x5e
 8014f7c:	bf0b      	itete	eq
 8014f7e:	784b      	ldrbeq	r3, [r1, #1]
 8014f80:	1c4a      	addne	r2, r1, #1
 8014f82:	1c8a      	addeq	r2, r1, #2
 8014f84:	2100      	movne	r1, #0
 8014f86:	bf08      	it	eq
 8014f88:	2101      	moveq	r1, #1
 8014f8a:	3801      	subs	r0, #1
 8014f8c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8014f90:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014f94:	42a8      	cmp	r0, r5
 8014f96:	d1fb      	bne.n	8014f90 <__sccl+0x1c>
 8014f98:	b90b      	cbnz	r3, 8014f9e <__sccl+0x2a>
 8014f9a:	1e50      	subs	r0, r2, #1
 8014f9c:	bd70      	pop	{r4, r5, r6, pc}
 8014f9e:	f081 0101 	eor.w	r1, r1, #1
 8014fa2:	54e1      	strb	r1, [r4, r3]
 8014fa4:	4610      	mov	r0, r2
 8014fa6:	4602      	mov	r2, r0
 8014fa8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014fac:	2d2d      	cmp	r5, #45	@ 0x2d
 8014fae:	d005      	beq.n	8014fbc <__sccl+0x48>
 8014fb0:	2d5d      	cmp	r5, #93	@ 0x5d
 8014fb2:	d016      	beq.n	8014fe2 <__sccl+0x6e>
 8014fb4:	2d00      	cmp	r5, #0
 8014fb6:	d0f1      	beq.n	8014f9c <__sccl+0x28>
 8014fb8:	462b      	mov	r3, r5
 8014fba:	e7f2      	b.n	8014fa2 <__sccl+0x2e>
 8014fbc:	7846      	ldrb	r6, [r0, #1]
 8014fbe:	2e5d      	cmp	r6, #93	@ 0x5d
 8014fc0:	d0fa      	beq.n	8014fb8 <__sccl+0x44>
 8014fc2:	42b3      	cmp	r3, r6
 8014fc4:	dcf8      	bgt.n	8014fb8 <__sccl+0x44>
 8014fc6:	3002      	adds	r0, #2
 8014fc8:	461a      	mov	r2, r3
 8014fca:	3201      	adds	r2, #1
 8014fcc:	4296      	cmp	r6, r2
 8014fce:	54a1      	strb	r1, [r4, r2]
 8014fd0:	dcfb      	bgt.n	8014fca <__sccl+0x56>
 8014fd2:	1af2      	subs	r2, r6, r3
 8014fd4:	3a01      	subs	r2, #1
 8014fd6:	1c5d      	adds	r5, r3, #1
 8014fd8:	42b3      	cmp	r3, r6
 8014fda:	bfa8      	it	ge
 8014fdc:	2200      	movge	r2, #0
 8014fde:	18ab      	adds	r3, r5, r2
 8014fe0:	e7e1      	b.n	8014fa6 <__sccl+0x32>
 8014fe2:	4610      	mov	r0, r2
 8014fe4:	e7da      	b.n	8014f9c <__sccl+0x28>

08014fe6 <__submore>:
 8014fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fea:	460c      	mov	r4, r1
 8014fec:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014fee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014ff2:	4299      	cmp	r1, r3
 8014ff4:	d11d      	bne.n	8015032 <__submore+0x4c>
 8014ff6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8014ffa:	f7fd fd57 	bl	8012aac <_malloc_r>
 8014ffe:	b918      	cbnz	r0, 8015008 <__submore+0x22>
 8015000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015008:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801500c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801500e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8015012:	6360      	str	r0, [r4, #52]	@ 0x34
 8015014:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8015018:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801501c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8015020:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8015024:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8015028:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801502c:	6020      	str	r0, [r4, #0]
 801502e:	2000      	movs	r0, #0
 8015030:	e7e8      	b.n	8015004 <__submore+0x1e>
 8015032:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8015034:	0077      	lsls	r7, r6, #1
 8015036:	463a      	mov	r2, r7
 8015038:	f000 fbc7 	bl	80157ca <_realloc_r>
 801503c:	4605      	mov	r5, r0
 801503e:	2800      	cmp	r0, #0
 8015040:	d0de      	beq.n	8015000 <__submore+0x1a>
 8015042:	eb00 0806 	add.w	r8, r0, r6
 8015046:	4601      	mov	r1, r0
 8015048:	4632      	mov	r2, r6
 801504a:	4640      	mov	r0, r8
 801504c:	f7fc febf 	bl	8011dce <memcpy>
 8015050:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8015054:	f8c4 8000 	str.w	r8, [r4]
 8015058:	e7e9      	b.n	801502e <__submore+0x48>
	...

0801505c <_fstat_r>:
 801505c:	b538      	push	{r3, r4, r5, lr}
 801505e:	4d07      	ldr	r5, [pc, #28]	@ (801507c <_fstat_r+0x20>)
 8015060:	2300      	movs	r3, #0
 8015062:	4604      	mov	r4, r0
 8015064:	4608      	mov	r0, r1
 8015066:	4611      	mov	r1, r2
 8015068:	602b      	str	r3, [r5, #0]
 801506a:	f7ef f94b 	bl	8004304 <_fstat>
 801506e:	1c43      	adds	r3, r0, #1
 8015070:	d102      	bne.n	8015078 <_fstat_r+0x1c>
 8015072:	682b      	ldr	r3, [r5, #0]
 8015074:	b103      	cbz	r3, 8015078 <_fstat_r+0x1c>
 8015076:	6023      	str	r3, [r4, #0]
 8015078:	bd38      	pop	{r3, r4, r5, pc}
 801507a:	bf00      	nop
 801507c:	2400086c 	.word	0x2400086c

08015080 <_isatty_r>:
 8015080:	b538      	push	{r3, r4, r5, lr}
 8015082:	4d06      	ldr	r5, [pc, #24]	@ (801509c <_isatty_r+0x1c>)
 8015084:	2300      	movs	r3, #0
 8015086:	4604      	mov	r4, r0
 8015088:	4608      	mov	r0, r1
 801508a:	602b      	str	r3, [r5, #0]
 801508c:	f7ef f94a 	bl	8004324 <_isatty>
 8015090:	1c43      	adds	r3, r0, #1
 8015092:	d102      	bne.n	801509a <_isatty_r+0x1a>
 8015094:	682b      	ldr	r3, [r5, #0]
 8015096:	b103      	cbz	r3, 801509a <_isatty_r+0x1a>
 8015098:	6023      	str	r3, [r4, #0]
 801509a:	bd38      	pop	{r3, r4, r5, pc}
 801509c:	2400086c 	.word	0x2400086c

080150a0 <_sbrk_r>:
 80150a0:	b538      	push	{r3, r4, r5, lr}
 80150a2:	4d06      	ldr	r5, [pc, #24]	@ (80150bc <_sbrk_r+0x1c>)
 80150a4:	2300      	movs	r3, #0
 80150a6:	4604      	mov	r4, r0
 80150a8:	4608      	mov	r0, r1
 80150aa:	602b      	str	r3, [r5, #0]
 80150ac:	f7ef f952 	bl	8004354 <_sbrk>
 80150b0:	1c43      	adds	r3, r0, #1
 80150b2:	d102      	bne.n	80150ba <_sbrk_r+0x1a>
 80150b4:	682b      	ldr	r3, [r5, #0]
 80150b6:	b103      	cbz	r3, 80150ba <_sbrk_r+0x1a>
 80150b8:	6023      	str	r3, [r4, #0]
 80150ba:	bd38      	pop	{r3, r4, r5, pc}
 80150bc:	2400086c 	.word	0x2400086c

080150c0 <nan>:
 80150c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80150c8 <nan+0x8>
 80150c4:	4770      	bx	lr
 80150c6:	bf00      	nop
 80150c8:	00000000 	.word	0x00000000
 80150cc:	7ff80000 	.word	0x7ff80000

080150d0 <__assert_func>:
 80150d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80150d2:	4614      	mov	r4, r2
 80150d4:	461a      	mov	r2, r3
 80150d6:	4b09      	ldr	r3, [pc, #36]	@ (80150fc <__assert_func+0x2c>)
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	4605      	mov	r5, r0
 80150dc:	68d8      	ldr	r0, [r3, #12]
 80150de:	b14c      	cbz	r4, 80150f4 <__assert_func+0x24>
 80150e0:	4b07      	ldr	r3, [pc, #28]	@ (8015100 <__assert_func+0x30>)
 80150e2:	9100      	str	r1, [sp, #0]
 80150e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80150e8:	4906      	ldr	r1, [pc, #24]	@ (8015104 <__assert_func+0x34>)
 80150ea:	462b      	mov	r3, r5
 80150ec:	f000 fc1a 	bl	8015924 <fiprintf>
 80150f0:	f000 fc2a 	bl	8015948 <abort>
 80150f4:	4b04      	ldr	r3, [pc, #16]	@ (8015108 <__assert_func+0x38>)
 80150f6:	461c      	mov	r4, r3
 80150f8:	e7f3      	b.n	80150e2 <__assert_func+0x12>
 80150fa:	bf00      	nop
 80150fc:	24000020 	.word	0x24000020
 8015100:	08016cc3 	.word	0x08016cc3
 8015104:	08016cd0 	.word	0x08016cd0
 8015108:	08016cfe 	.word	0x08016cfe

0801510c <_calloc_r>:
 801510c:	b570      	push	{r4, r5, r6, lr}
 801510e:	fba1 5402 	umull	r5, r4, r1, r2
 8015112:	b934      	cbnz	r4, 8015122 <_calloc_r+0x16>
 8015114:	4629      	mov	r1, r5
 8015116:	f7fd fcc9 	bl	8012aac <_malloc_r>
 801511a:	4606      	mov	r6, r0
 801511c:	b928      	cbnz	r0, 801512a <_calloc_r+0x1e>
 801511e:	4630      	mov	r0, r6
 8015120:	bd70      	pop	{r4, r5, r6, pc}
 8015122:	220c      	movs	r2, #12
 8015124:	6002      	str	r2, [r0, #0]
 8015126:	2600      	movs	r6, #0
 8015128:	e7f9      	b.n	801511e <_calloc_r+0x12>
 801512a:	462a      	mov	r2, r5
 801512c:	4621      	mov	r1, r4
 801512e:	f7fc fdaf 	bl	8011c90 <memset>
 8015132:	e7f4      	b.n	801511e <_calloc_r+0x12>

08015134 <rshift>:
 8015134:	6903      	ldr	r3, [r0, #16]
 8015136:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801513a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801513e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015142:	f100 0414 	add.w	r4, r0, #20
 8015146:	dd45      	ble.n	80151d4 <rshift+0xa0>
 8015148:	f011 011f 	ands.w	r1, r1, #31
 801514c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015150:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015154:	d10c      	bne.n	8015170 <rshift+0x3c>
 8015156:	f100 0710 	add.w	r7, r0, #16
 801515a:	4629      	mov	r1, r5
 801515c:	42b1      	cmp	r1, r6
 801515e:	d334      	bcc.n	80151ca <rshift+0x96>
 8015160:	1a9b      	subs	r3, r3, r2
 8015162:	009b      	lsls	r3, r3, #2
 8015164:	1eea      	subs	r2, r5, #3
 8015166:	4296      	cmp	r6, r2
 8015168:	bf38      	it	cc
 801516a:	2300      	movcc	r3, #0
 801516c:	4423      	add	r3, r4
 801516e:	e015      	b.n	801519c <rshift+0x68>
 8015170:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015174:	f1c1 0820 	rsb	r8, r1, #32
 8015178:	40cf      	lsrs	r7, r1
 801517a:	f105 0e04 	add.w	lr, r5, #4
 801517e:	46a1      	mov	r9, r4
 8015180:	4576      	cmp	r6, lr
 8015182:	46f4      	mov	ip, lr
 8015184:	d815      	bhi.n	80151b2 <rshift+0x7e>
 8015186:	1a9a      	subs	r2, r3, r2
 8015188:	0092      	lsls	r2, r2, #2
 801518a:	3a04      	subs	r2, #4
 801518c:	3501      	adds	r5, #1
 801518e:	42ae      	cmp	r6, r5
 8015190:	bf38      	it	cc
 8015192:	2200      	movcc	r2, #0
 8015194:	18a3      	adds	r3, r4, r2
 8015196:	50a7      	str	r7, [r4, r2]
 8015198:	b107      	cbz	r7, 801519c <rshift+0x68>
 801519a:	3304      	adds	r3, #4
 801519c:	1b1a      	subs	r2, r3, r4
 801519e:	42a3      	cmp	r3, r4
 80151a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80151a4:	bf08      	it	eq
 80151a6:	2300      	moveq	r3, #0
 80151a8:	6102      	str	r2, [r0, #16]
 80151aa:	bf08      	it	eq
 80151ac:	6143      	streq	r3, [r0, #20]
 80151ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151b2:	f8dc c000 	ldr.w	ip, [ip]
 80151b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80151ba:	ea4c 0707 	orr.w	r7, ip, r7
 80151be:	f849 7b04 	str.w	r7, [r9], #4
 80151c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80151c6:	40cf      	lsrs	r7, r1
 80151c8:	e7da      	b.n	8015180 <rshift+0x4c>
 80151ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80151ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80151d2:	e7c3      	b.n	801515c <rshift+0x28>
 80151d4:	4623      	mov	r3, r4
 80151d6:	e7e1      	b.n	801519c <rshift+0x68>

080151d8 <__hexdig_fun>:
 80151d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80151dc:	2b09      	cmp	r3, #9
 80151de:	d802      	bhi.n	80151e6 <__hexdig_fun+0xe>
 80151e0:	3820      	subs	r0, #32
 80151e2:	b2c0      	uxtb	r0, r0
 80151e4:	4770      	bx	lr
 80151e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80151ea:	2b05      	cmp	r3, #5
 80151ec:	d801      	bhi.n	80151f2 <__hexdig_fun+0x1a>
 80151ee:	3847      	subs	r0, #71	@ 0x47
 80151f0:	e7f7      	b.n	80151e2 <__hexdig_fun+0xa>
 80151f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80151f6:	2b05      	cmp	r3, #5
 80151f8:	d801      	bhi.n	80151fe <__hexdig_fun+0x26>
 80151fa:	3827      	subs	r0, #39	@ 0x27
 80151fc:	e7f1      	b.n	80151e2 <__hexdig_fun+0xa>
 80151fe:	2000      	movs	r0, #0
 8015200:	4770      	bx	lr
	...

08015204 <__gethex>:
 8015204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015208:	b085      	sub	sp, #20
 801520a:	468a      	mov	sl, r1
 801520c:	9302      	str	r3, [sp, #8]
 801520e:	680b      	ldr	r3, [r1, #0]
 8015210:	9001      	str	r0, [sp, #4]
 8015212:	4690      	mov	r8, r2
 8015214:	1c9c      	adds	r4, r3, #2
 8015216:	46a1      	mov	r9, r4
 8015218:	f814 0b01 	ldrb.w	r0, [r4], #1
 801521c:	2830      	cmp	r0, #48	@ 0x30
 801521e:	d0fa      	beq.n	8015216 <__gethex+0x12>
 8015220:	eba9 0303 	sub.w	r3, r9, r3
 8015224:	f1a3 0b02 	sub.w	fp, r3, #2
 8015228:	f7ff ffd6 	bl	80151d8 <__hexdig_fun>
 801522c:	4605      	mov	r5, r0
 801522e:	2800      	cmp	r0, #0
 8015230:	d168      	bne.n	8015304 <__gethex+0x100>
 8015232:	49a0      	ldr	r1, [pc, #640]	@ (80154b4 <__gethex+0x2b0>)
 8015234:	2201      	movs	r2, #1
 8015236:	4648      	mov	r0, r9
 8015238:	f7fc fd3f 	bl	8011cba <strncmp>
 801523c:	4607      	mov	r7, r0
 801523e:	2800      	cmp	r0, #0
 8015240:	d167      	bne.n	8015312 <__gethex+0x10e>
 8015242:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015246:	4626      	mov	r6, r4
 8015248:	f7ff ffc6 	bl	80151d8 <__hexdig_fun>
 801524c:	2800      	cmp	r0, #0
 801524e:	d062      	beq.n	8015316 <__gethex+0x112>
 8015250:	4623      	mov	r3, r4
 8015252:	7818      	ldrb	r0, [r3, #0]
 8015254:	2830      	cmp	r0, #48	@ 0x30
 8015256:	4699      	mov	r9, r3
 8015258:	f103 0301 	add.w	r3, r3, #1
 801525c:	d0f9      	beq.n	8015252 <__gethex+0x4e>
 801525e:	f7ff ffbb 	bl	80151d8 <__hexdig_fun>
 8015262:	fab0 f580 	clz	r5, r0
 8015266:	096d      	lsrs	r5, r5, #5
 8015268:	f04f 0b01 	mov.w	fp, #1
 801526c:	464a      	mov	r2, r9
 801526e:	4616      	mov	r6, r2
 8015270:	3201      	adds	r2, #1
 8015272:	7830      	ldrb	r0, [r6, #0]
 8015274:	f7ff ffb0 	bl	80151d8 <__hexdig_fun>
 8015278:	2800      	cmp	r0, #0
 801527a:	d1f8      	bne.n	801526e <__gethex+0x6a>
 801527c:	498d      	ldr	r1, [pc, #564]	@ (80154b4 <__gethex+0x2b0>)
 801527e:	2201      	movs	r2, #1
 8015280:	4630      	mov	r0, r6
 8015282:	f7fc fd1a 	bl	8011cba <strncmp>
 8015286:	2800      	cmp	r0, #0
 8015288:	d13f      	bne.n	801530a <__gethex+0x106>
 801528a:	b944      	cbnz	r4, 801529e <__gethex+0x9a>
 801528c:	1c74      	adds	r4, r6, #1
 801528e:	4622      	mov	r2, r4
 8015290:	4616      	mov	r6, r2
 8015292:	3201      	adds	r2, #1
 8015294:	7830      	ldrb	r0, [r6, #0]
 8015296:	f7ff ff9f 	bl	80151d8 <__hexdig_fun>
 801529a:	2800      	cmp	r0, #0
 801529c:	d1f8      	bne.n	8015290 <__gethex+0x8c>
 801529e:	1ba4      	subs	r4, r4, r6
 80152a0:	00a7      	lsls	r7, r4, #2
 80152a2:	7833      	ldrb	r3, [r6, #0]
 80152a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80152a8:	2b50      	cmp	r3, #80	@ 0x50
 80152aa:	d13e      	bne.n	801532a <__gethex+0x126>
 80152ac:	7873      	ldrb	r3, [r6, #1]
 80152ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80152b0:	d033      	beq.n	801531a <__gethex+0x116>
 80152b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80152b4:	d034      	beq.n	8015320 <__gethex+0x11c>
 80152b6:	1c71      	adds	r1, r6, #1
 80152b8:	2400      	movs	r4, #0
 80152ba:	7808      	ldrb	r0, [r1, #0]
 80152bc:	f7ff ff8c 	bl	80151d8 <__hexdig_fun>
 80152c0:	1e43      	subs	r3, r0, #1
 80152c2:	b2db      	uxtb	r3, r3
 80152c4:	2b18      	cmp	r3, #24
 80152c6:	d830      	bhi.n	801532a <__gethex+0x126>
 80152c8:	f1a0 0210 	sub.w	r2, r0, #16
 80152cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80152d0:	f7ff ff82 	bl	80151d8 <__hexdig_fun>
 80152d4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80152d8:	fa5f fc8c 	uxtb.w	ip, ip
 80152dc:	f1bc 0f18 	cmp.w	ip, #24
 80152e0:	f04f 030a 	mov.w	r3, #10
 80152e4:	d91e      	bls.n	8015324 <__gethex+0x120>
 80152e6:	b104      	cbz	r4, 80152ea <__gethex+0xe6>
 80152e8:	4252      	negs	r2, r2
 80152ea:	4417      	add	r7, r2
 80152ec:	f8ca 1000 	str.w	r1, [sl]
 80152f0:	b1ed      	cbz	r5, 801532e <__gethex+0x12a>
 80152f2:	f1bb 0f00 	cmp.w	fp, #0
 80152f6:	bf0c      	ite	eq
 80152f8:	2506      	moveq	r5, #6
 80152fa:	2500      	movne	r5, #0
 80152fc:	4628      	mov	r0, r5
 80152fe:	b005      	add	sp, #20
 8015300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015304:	2500      	movs	r5, #0
 8015306:	462c      	mov	r4, r5
 8015308:	e7b0      	b.n	801526c <__gethex+0x68>
 801530a:	2c00      	cmp	r4, #0
 801530c:	d1c7      	bne.n	801529e <__gethex+0x9a>
 801530e:	4627      	mov	r7, r4
 8015310:	e7c7      	b.n	80152a2 <__gethex+0x9e>
 8015312:	464e      	mov	r6, r9
 8015314:	462f      	mov	r7, r5
 8015316:	2501      	movs	r5, #1
 8015318:	e7c3      	b.n	80152a2 <__gethex+0x9e>
 801531a:	2400      	movs	r4, #0
 801531c:	1cb1      	adds	r1, r6, #2
 801531e:	e7cc      	b.n	80152ba <__gethex+0xb6>
 8015320:	2401      	movs	r4, #1
 8015322:	e7fb      	b.n	801531c <__gethex+0x118>
 8015324:	fb03 0002 	mla	r0, r3, r2, r0
 8015328:	e7ce      	b.n	80152c8 <__gethex+0xc4>
 801532a:	4631      	mov	r1, r6
 801532c:	e7de      	b.n	80152ec <__gethex+0xe8>
 801532e:	eba6 0309 	sub.w	r3, r6, r9
 8015332:	3b01      	subs	r3, #1
 8015334:	4629      	mov	r1, r5
 8015336:	2b07      	cmp	r3, #7
 8015338:	dc0a      	bgt.n	8015350 <__gethex+0x14c>
 801533a:	9801      	ldr	r0, [sp, #4]
 801533c:	f7fd fc42 	bl	8012bc4 <_Balloc>
 8015340:	4604      	mov	r4, r0
 8015342:	b940      	cbnz	r0, 8015356 <__gethex+0x152>
 8015344:	4b5c      	ldr	r3, [pc, #368]	@ (80154b8 <__gethex+0x2b4>)
 8015346:	4602      	mov	r2, r0
 8015348:	21e4      	movs	r1, #228	@ 0xe4
 801534a:	485c      	ldr	r0, [pc, #368]	@ (80154bc <__gethex+0x2b8>)
 801534c:	f7ff fec0 	bl	80150d0 <__assert_func>
 8015350:	3101      	adds	r1, #1
 8015352:	105b      	asrs	r3, r3, #1
 8015354:	e7ef      	b.n	8015336 <__gethex+0x132>
 8015356:	f100 0a14 	add.w	sl, r0, #20
 801535a:	2300      	movs	r3, #0
 801535c:	4655      	mov	r5, sl
 801535e:	469b      	mov	fp, r3
 8015360:	45b1      	cmp	r9, r6
 8015362:	d337      	bcc.n	80153d4 <__gethex+0x1d0>
 8015364:	f845 bb04 	str.w	fp, [r5], #4
 8015368:	eba5 050a 	sub.w	r5, r5, sl
 801536c:	10ad      	asrs	r5, r5, #2
 801536e:	6125      	str	r5, [r4, #16]
 8015370:	4658      	mov	r0, fp
 8015372:	f7fd fd19 	bl	8012da8 <__hi0bits>
 8015376:	016d      	lsls	r5, r5, #5
 8015378:	f8d8 6000 	ldr.w	r6, [r8]
 801537c:	1a2d      	subs	r5, r5, r0
 801537e:	42b5      	cmp	r5, r6
 8015380:	dd54      	ble.n	801542c <__gethex+0x228>
 8015382:	1bad      	subs	r5, r5, r6
 8015384:	4629      	mov	r1, r5
 8015386:	4620      	mov	r0, r4
 8015388:	f7fe f8a2 	bl	80134d0 <__any_on>
 801538c:	4681      	mov	r9, r0
 801538e:	b178      	cbz	r0, 80153b0 <__gethex+0x1ac>
 8015390:	1e6b      	subs	r3, r5, #1
 8015392:	1159      	asrs	r1, r3, #5
 8015394:	f003 021f 	and.w	r2, r3, #31
 8015398:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801539c:	f04f 0901 	mov.w	r9, #1
 80153a0:	fa09 f202 	lsl.w	r2, r9, r2
 80153a4:	420a      	tst	r2, r1
 80153a6:	d003      	beq.n	80153b0 <__gethex+0x1ac>
 80153a8:	454b      	cmp	r3, r9
 80153aa:	dc36      	bgt.n	801541a <__gethex+0x216>
 80153ac:	f04f 0902 	mov.w	r9, #2
 80153b0:	4629      	mov	r1, r5
 80153b2:	4620      	mov	r0, r4
 80153b4:	f7ff febe 	bl	8015134 <rshift>
 80153b8:	442f      	add	r7, r5
 80153ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153be:	42bb      	cmp	r3, r7
 80153c0:	da42      	bge.n	8015448 <__gethex+0x244>
 80153c2:	9801      	ldr	r0, [sp, #4]
 80153c4:	4621      	mov	r1, r4
 80153c6:	f7fd fc3d 	bl	8012c44 <_Bfree>
 80153ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80153cc:	2300      	movs	r3, #0
 80153ce:	6013      	str	r3, [r2, #0]
 80153d0:	25a3      	movs	r5, #163	@ 0xa3
 80153d2:	e793      	b.n	80152fc <__gethex+0xf8>
 80153d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80153d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80153da:	d012      	beq.n	8015402 <__gethex+0x1fe>
 80153dc:	2b20      	cmp	r3, #32
 80153de:	d104      	bne.n	80153ea <__gethex+0x1e6>
 80153e0:	f845 bb04 	str.w	fp, [r5], #4
 80153e4:	f04f 0b00 	mov.w	fp, #0
 80153e8:	465b      	mov	r3, fp
 80153ea:	7830      	ldrb	r0, [r6, #0]
 80153ec:	9303      	str	r3, [sp, #12]
 80153ee:	f7ff fef3 	bl	80151d8 <__hexdig_fun>
 80153f2:	9b03      	ldr	r3, [sp, #12]
 80153f4:	f000 000f 	and.w	r0, r0, #15
 80153f8:	4098      	lsls	r0, r3
 80153fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80153fe:	3304      	adds	r3, #4
 8015400:	e7ae      	b.n	8015360 <__gethex+0x15c>
 8015402:	45b1      	cmp	r9, r6
 8015404:	d8ea      	bhi.n	80153dc <__gethex+0x1d8>
 8015406:	492b      	ldr	r1, [pc, #172]	@ (80154b4 <__gethex+0x2b0>)
 8015408:	9303      	str	r3, [sp, #12]
 801540a:	2201      	movs	r2, #1
 801540c:	4630      	mov	r0, r6
 801540e:	f7fc fc54 	bl	8011cba <strncmp>
 8015412:	9b03      	ldr	r3, [sp, #12]
 8015414:	2800      	cmp	r0, #0
 8015416:	d1e1      	bne.n	80153dc <__gethex+0x1d8>
 8015418:	e7a2      	b.n	8015360 <__gethex+0x15c>
 801541a:	1ea9      	subs	r1, r5, #2
 801541c:	4620      	mov	r0, r4
 801541e:	f7fe f857 	bl	80134d0 <__any_on>
 8015422:	2800      	cmp	r0, #0
 8015424:	d0c2      	beq.n	80153ac <__gethex+0x1a8>
 8015426:	f04f 0903 	mov.w	r9, #3
 801542a:	e7c1      	b.n	80153b0 <__gethex+0x1ac>
 801542c:	da09      	bge.n	8015442 <__gethex+0x23e>
 801542e:	1b75      	subs	r5, r6, r5
 8015430:	4621      	mov	r1, r4
 8015432:	9801      	ldr	r0, [sp, #4]
 8015434:	462a      	mov	r2, r5
 8015436:	f7fd fe15 	bl	8013064 <__lshift>
 801543a:	1b7f      	subs	r7, r7, r5
 801543c:	4604      	mov	r4, r0
 801543e:	f100 0a14 	add.w	sl, r0, #20
 8015442:	f04f 0900 	mov.w	r9, #0
 8015446:	e7b8      	b.n	80153ba <__gethex+0x1b6>
 8015448:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801544c:	42bd      	cmp	r5, r7
 801544e:	dd6f      	ble.n	8015530 <__gethex+0x32c>
 8015450:	1bed      	subs	r5, r5, r7
 8015452:	42ae      	cmp	r6, r5
 8015454:	dc34      	bgt.n	80154c0 <__gethex+0x2bc>
 8015456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801545a:	2b02      	cmp	r3, #2
 801545c:	d022      	beq.n	80154a4 <__gethex+0x2a0>
 801545e:	2b03      	cmp	r3, #3
 8015460:	d024      	beq.n	80154ac <__gethex+0x2a8>
 8015462:	2b01      	cmp	r3, #1
 8015464:	d115      	bne.n	8015492 <__gethex+0x28e>
 8015466:	42ae      	cmp	r6, r5
 8015468:	d113      	bne.n	8015492 <__gethex+0x28e>
 801546a:	2e01      	cmp	r6, #1
 801546c:	d10b      	bne.n	8015486 <__gethex+0x282>
 801546e:	9a02      	ldr	r2, [sp, #8]
 8015470:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015474:	6013      	str	r3, [r2, #0]
 8015476:	2301      	movs	r3, #1
 8015478:	6123      	str	r3, [r4, #16]
 801547a:	f8ca 3000 	str.w	r3, [sl]
 801547e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015480:	2562      	movs	r5, #98	@ 0x62
 8015482:	601c      	str	r4, [r3, #0]
 8015484:	e73a      	b.n	80152fc <__gethex+0xf8>
 8015486:	1e71      	subs	r1, r6, #1
 8015488:	4620      	mov	r0, r4
 801548a:	f7fe f821 	bl	80134d0 <__any_on>
 801548e:	2800      	cmp	r0, #0
 8015490:	d1ed      	bne.n	801546e <__gethex+0x26a>
 8015492:	9801      	ldr	r0, [sp, #4]
 8015494:	4621      	mov	r1, r4
 8015496:	f7fd fbd5 	bl	8012c44 <_Bfree>
 801549a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801549c:	2300      	movs	r3, #0
 801549e:	6013      	str	r3, [r2, #0]
 80154a0:	2550      	movs	r5, #80	@ 0x50
 80154a2:	e72b      	b.n	80152fc <__gethex+0xf8>
 80154a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d1f3      	bne.n	8015492 <__gethex+0x28e>
 80154aa:	e7e0      	b.n	801546e <__gethex+0x26a>
 80154ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d1dd      	bne.n	801546e <__gethex+0x26a>
 80154b2:	e7ee      	b.n	8015492 <__gethex+0x28e>
 80154b4:	08016c8d 	.word	0x08016c8d
 80154b8:	08016c23 	.word	0x08016c23
 80154bc:	08016cff 	.word	0x08016cff
 80154c0:	1e6f      	subs	r7, r5, #1
 80154c2:	f1b9 0f00 	cmp.w	r9, #0
 80154c6:	d130      	bne.n	801552a <__gethex+0x326>
 80154c8:	b127      	cbz	r7, 80154d4 <__gethex+0x2d0>
 80154ca:	4639      	mov	r1, r7
 80154cc:	4620      	mov	r0, r4
 80154ce:	f7fd ffff 	bl	80134d0 <__any_on>
 80154d2:	4681      	mov	r9, r0
 80154d4:	117a      	asrs	r2, r7, #5
 80154d6:	2301      	movs	r3, #1
 80154d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80154dc:	f007 071f 	and.w	r7, r7, #31
 80154e0:	40bb      	lsls	r3, r7
 80154e2:	4213      	tst	r3, r2
 80154e4:	4629      	mov	r1, r5
 80154e6:	4620      	mov	r0, r4
 80154e8:	bf18      	it	ne
 80154ea:	f049 0902 	orrne.w	r9, r9, #2
 80154ee:	f7ff fe21 	bl	8015134 <rshift>
 80154f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80154f6:	1b76      	subs	r6, r6, r5
 80154f8:	2502      	movs	r5, #2
 80154fa:	f1b9 0f00 	cmp.w	r9, #0
 80154fe:	d047      	beq.n	8015590 <__gethex+0x38c>
 8015500:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015504:	2b02      	cmp	r3, #2
 8015506:	d015      	beq.n	8015534 <__gethex+0x330>
 8015508:	2b03      	cmp	r3, #3
 801550a:	d017      	beq.n	801553c <__gethex+0x338>
 801550c:	2b01      	cmp	r3, #1
 801550e:	d109      	bne.n	8015524 <__gethex+0x320>
 8015510:	f019 0f02 	tst.w	r9, #2
 8015514:	d006      	beq.n	8015524 <__gethex+0x320>
 8015516:	f8da 3000 	ldr.w	r3, [sl]
 801551a:	ea49 0903 	orr.w	r9, r9, r3
 801551e:	f019 0f01 	tst.w	r9, #1
 8015522:	d10e      	bne.n	8015542 <__gethex+0x33e>
 8015524:	f045 0510 	orr.w	r5, r5, #16
 8015528:	e032      	b.n	8015590 <__gethex+0x38c>
 801552a:	f04f 0901 	mov.w	r9, #1
 801552e:	e7d1      	b.n	80154d4 <__gethex+0x2d0>
 8015530:	2501      	movs	r5, #1
 8015532:	e7e2      	b.n	80154fa <__gethex+0x2f6>
 8015534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015536:	f1c3 0301 	rsb	r3, r3, #1
 801553a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801553c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801553e:	2b00      	cmp	r3, #0
 8015540:	d0f0      	beq.n	8015524 <__gethex+0x320>
 8015542:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015546:	f104 0314 	add.w	r3, r4, #20
 801554a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801554e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015552:	f04f 0c00 	mov.w	ip, #0
 8015556:	4618      	mov	r0, r3
 8015558:	f853 2b04 	ldr.w	r2, [r3], #4
 801555c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8015560:	d01b      	beq.n	801559a <__gethex+0x396>
 8015562:	3201      	adds	r2, #1
 8015564:	6002      	str	r2, [r0, #0]
 8015566:	2d02      	cmp	r5, #2
 8015568:	f104 0314 	add.w	r3, r4, #20
 801556c:	d13c      	bne.n	80155e8 <__gethex+0x3e4>
 801556e:	f8d8 2000 	ldr.w	r2, [r8]
 8015572:	3a01      	subs	r2, #1
 8015574:	42b2      	cmp	r2, r6
 8015576:	d109      	bne.n	801558c <__gethex+0x388>
 8015578:	1171      	asrs	r1, r6, #5
 801557a:	2201      	movs	r2, #1
 801557c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015580:	f006 061f 	and.w	r6, r6, #31
 8015584:	fa02 f606 	lsl.w	r6, r2, r6
 8015588:	421e      	tst	r6, r3
 801558a:	d13a      	bne.n	8015602 <__gethex+0x3fe>
 801558c:	f045 0520 	orr.w	r5, r5, #32
 8015590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015592:	601c      	str	r4, [r3, #0]
 8015594:	9b02      	ldr	r3, [sp, #8]
 8015596:	601f      	str	r7, [r3, #0]
 8015598:	e6b0      	b.n	80152fc <__gethex+0xf8>
 801559a:	4299      	cmp	r1, r3
 801559c:	f843 cc04 	str.w	ip, [r3, #-4]
 80155a0:	d8d9      	bhi.n	8015556 <__gethex+0x352>
 80155a2:	68a3      	ldr	r3, [r4, #8]
 80155a4:	459b      	cmp	fp, r3
 80155a6:	db17      	blt.n	80155d8 <__gethex+0x3d4>
 80155a8:	6861      	ldr	r1, [r4, #4]
 80155aa:	9801      	ldr	r0, [sp, #4]
 80155ac:	3101      	adds	r1, #1
 80155ae:	f7fd fb09 	bl	8012bc4 <_Balloc>
 80155b2:	4681      	mov	r9, r0
 80155b4:	b918      	cbnz	r0, 80155be <__gethex+0x3ba>
 80155b6:	4b1a      	ldr	r3, [pc, #104]	@ (8015620 <__gethex+0x41c>)
 80155b8:	4602      	mov	r2, r0
 80155ba:	2184      	movs	r1, #132	@ 0x84
 80155bc:	e6c5      	b.n	801534a <__gethex+0x146>
 80155be:	6922      	ldr	r2, [r4, #16]
 80155c0:	3202      	adds	r2, #2
 80155c2:	f104 010c 	add.w	r1, r4, #12
 80155c6:	0092      	lsls	r2, r2, #2
 80155c8:	300c      	adds	r0, #12
 80155ca:	f7fc fc00 	bl	8011dce <memcpy>
 80155ce:	4621      	mov	r1, r4
 80155d0:	9801      	ldr	r0, [sp, #4]
 80155d2:	f7fd fb37 	bl	8012c44 <_Bfree>
 80155d6:	464c      	mov	r4, r9
 80155d8:	6923      	ldr	r3, [r4, #16]
 80155da:	1c5a      	adds	r2, r3, #1
 80155dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80155e0:	6122      	str	r2, [r4, #16]
 80155e2:	2201      	movs	r2, #1
 80155e4:	615a      	str	r2, [r3, #20]
 80155e6:	e7be      	b.n	8015566 <__gethex+0x362>
 80155e8:	6922      	ldr	r2, [r4, #16]
 80155ea:	455a      	cmp	r2, fp
 80155ec:	dd0b      	ble.n	8015606 <__gethex+0x402>
 80155ee:	2101      	movs	r1, #1
 80155f0:	4620      	mov	r0, r4
 80155f2:	f7ff fd9f 	bl	8015134 <rshift>
 80155f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80155fa:	3701      	adds	r7, #1
 80155fc:	42bb      	cmp	r3, r7
 80155fe:	f6ff aee0 	blt.w	80153c2 <__gethex+0x1be>
 8015602:	2501      	movs	r5, #1
 8015604:	e7c2      	b.n	801558c <__gethex+0x388>
 8015606:	f016 061f 	ands.w	r6, r6, #31
 801560a:	d0fa      	beq.n	8015602 <__gethex+0x3fe>
 801560c:	4453      	add	r3, sl
 801560e:	f1c6 0620 	rsb	r6, r6, #32
 8015612:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015616:	f7fd fbc7 	bl	8012da8 <__hi0bits>
 801561a:	42b0      	cmp	r0, r6
 801561c:	dbe7      	blt.n	80155ee <__gethex+0x3ea>
 801561e:	e7f0      	b.n	8015602 <__gethex+0x3fe>
 8015620:	08016c23 	.word	0x08016c23

08015624 <L_shift>:
 8015624:	f1c2 0208 	rsb	r2, r2, #8
 8015628:	0092      	lsls	r2, r2, #2
 801562a:	b570      	push	{r4, r5, r6, lr}
 801562c:	f1c2 0620 	rsb	r6, r2, #32
 8015630:	6843      	ldr	r3, [r0, #4]
 8015632:	6804      	ldr	r4, [r0, #0]
 8015634:	fa03 f506 	lsl.w	r5, r3, r6
 8015638:	432c      	orrs	r4, r5
 801563a:	40d3      	lsrs	r3, r2
 801563c:	6004      	str	r4, [r0, #0]
 801563e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015642:	4288      	cmp	r0, r1
 8015644:	d3f4      	bcc.n	8015630 <L_shift+0xc>
 8015646:	bd70      	pop	{r4, r5, r6, pc}

08015648 <__match>:
 8015648:	b530      	push	{r4, r5, lr}
 801564a:	6803      	ldr	r3, [r0, #0]
 801564c:	3301      	adds	r3, #1
 801564e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015652:	b914      	cbnz	r4, 801565a <__match+0x12>
 8015654:	6003      	str	r3, [r0, #0]
 8015656:	2001      	movs	r0, #1
 8015658:	bd30      	pop	{r4, r5, pc}
 801565a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801565e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015662:	2d19      	cmp	r5, #25
 8015664:	bf98      	it	ls
 8015666:	3220      	addls	r2, #32
 8015668:	42a2      	cmp	r2, r4
 801566a:	d0f0      	beq.n	801564e <__match+0x6>
 801566c:	2000      	movs	r0, #0
 801566e:	e7f3      	b.n	8015658 <__match+0x10>

08015670 <__hexnan>:
 8015670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015674:	680b      	ldr	r3, [r1, #0]
 8015676:	6801      	ldr	r1, [r0, #0]
 8015678:	115e      	asrs	r6, r3, #5
 801567a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801567e:	f013 031f 	ands.w	r3, r3, #31
 8015682:	b087      	sub	sp, #28
 8015684:	bf18      	it	ne
 8015686:	3604      	addne	r6, #4
 8015688:	2500      	movs	r5, #0
 801568a:	1f37      	subs	r7, r6, #4
 801568c:	4682      	mov	sl, r0
 801568e:	4690      	mov	r8, r2
 8015690:	9301      	str	r3, [sp, #4]
 8015692:	f846 5c04 	str.w	r5, [r6, #-4]
 8015696:	46b9      	mov	r9, r7
 8015698:	463c      	mov	r4, r7
 801569a:	9502      	str	r5, [sp, #8]
 801569c:	46ab      	mov	fp, r5
 801569e:	784a      	ldrb	r2, [r1, #1]
 80156a0:	1c4b      	adds	r3, r1, #1
 80156a2:	9303      	str	r3, [sp, #12]
 80156a4:	b342      	cbz	r2, 80156f8 <__hexnan+0x88>
 80156a6:	4610      	mov	r0, r2
 80156a8:	9105      	str	r1, [sp, #20]
 80156aa:	9204      	str	r2, [sp, #16]
 80156ac:	f7ff fd94 	bl	80151d8 <__hexdig_fun>
 80156b0:	2800      	cmp	r0, #0
 80156b2:	d151      	bne.n	8015758 <__hexnan+0xe8>
 80156b4:	9a04      	ldr	r2, [sp, #16]
 80156b6:	9905      	ldr	r1, [sp, #20]
 80156b8:	2a20      	cmp	r2, #32
 80156ba:	d818      	bhi.n	80156ee <__hexnan+0x7e>
 80156bc:	9b02      	ldr	r3, [sp, #8]
 80156be:	459b      	cmp	fp, r3
 80156c0:	dd13      	ble.n	80156ea <__hexnan+0x7a>
 80156c2:	454c      	cmp	r4, r9
 80156c4:	d206      	bcs.n	80156d4 <__hexnan+0x64>
 80156c6:	2d07      	cmp	r5, #7
 80156c8:	dc04      	bgt.n	80156d4 <__hexnan+0x64>
 80156ca:	462a      	mov	r2, r5
 80156cc:	4649      	mov	r1, r9
 80156ce:	4620      	mov	r0, r4
 80156d0:	f7ff ffa8 	bl	8015624 <L_shift>
 80156d4:	4544      	cmp	r4, r8
 80156d6:	d952      	bls.n	801577e <__hexnan+0x10e>
 80156d8:	2300      	movs	r3, #0
 80156da:	f1a4 0904 	sub.w	r9, r4, #4
 80156de:	f844 3c04 	str.w	r3, [r4, #-4]
 80156e2:	f8cd b008 	str.w	fp, [sp, #8]
 80156e6:	464c      	mov	r4, r9
 80156e8:	461d      	mov	r5, r3
 80156ea:	9903      	ldr	r1, [sp, #12]
 80156ec:	e7d7      	b.n	801569e <__hexnan+0x2e>
 80156ee:	2a29      	cmp	r2, #41	@ 0x29
 80156f0:	d157      	bne.n	80157a2 <__hexnan+0x132>
 80156f2:	3102      	adds	r1, #2
 80156f4:	f8ca 1000 	str.w	r1, [sl]
 80156f8:	f1bb 0f00 	cmp.w	fp, #0
 80156fc:	d051      	beq.n	80157a2 <__hexnan+0x132>
 80156fe:	454c      	cmp	r4, r9
 8015700:	d206      	bcs.n	8015710 <__hexnan+0xa0>
 8015702:	2d07      	cmp	r5, #7
 8015704:	dc04      	bgt.n	8015710 <__hexnan+0xa0>
 8015706:	462a      	mov	r2, r5
 8015708:	4649      	mov	r1, r9
 801570a:	4620      	mov	r0, r4
 801570c:	f7ff ff8a 	bl	8015624 <L_shift>
 8015710:	4544      	cmp	r4, r8
 8015712:	d936      	bls.n	8015782 <__hexnan+0x112>
 8015714:	f1a8 0204 	sub.w	r2, r8, #4
 8015718:	4623      	mov	r3, r4
 801571a:	f853 1b04 	ldr.w	r1, [r3], #4
 801571e:	f842 1f04 	str.w	r1, [r2, #4]!
 8015722:	429f      	cmp	r7, r3
 8015724:	d2f9      	bcs.n	801571a <__hexnan+0xaa>
 8015726:	1b3b      	subs	r3, r7, r4
 8015728:	f023 0303 	bic.w	r3, r3, #3
 801572c:	3304      	adds	r3, #4
 801572e:	3401      	adds	r4, #1
 8015730:	3e03      	subs	r6, #3
 8015732:	42b4      	cmp	r4, r6
 8015734:	bf88      	it	hi
 8015736:	2304      	movhi	r3, #4
 8015738:	4443      	add	r3, r8
 801573a:	2200      	movs	r2, #0
 801573c:	f843 2b04 	str.w	r2, [r3], #4
 8015740:	429f      	cmp	r7, r3
 8015742:	d2fb      	bcs.n	801573c <__hexnan+0xcc>
 8015744:	683b      	ldr	r3, [r7, #0]
 8015746:	b91b      	cbnz	r3, 8015750 <__hexnan+0xe0>
 8015748:	4547      	cmp	r7, r8
 801574a:	d128      	bne.n	801579e <__hexnan+0x12e>
 801574c:	2301      	movs	r3, #1
 801574e:	603b      	str	r3, [r7, #0]
 8015750:	2005      	movs	r0, #5
 8015752:	b007      	add	sp, #28
 8015754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015758:	3501      	adds	r5, #1
 801575a:	2d08      	cmp	r5, #8
 801575c:	f10b 0b01 	add.w	fp, fp, #1
 8015760:	dd06      	ble.n	8015770 <__hexnan+0x100>
 8015762:	4544      	cmp	r4, r8
 8015764:	d9c1      	bls.n	80156ea <__hexnan+0x7a>
 8015766:	2300      	movs	r3, #0
 8015768:	f844 3c04 	str.w	r3, [r4, #-4]
 801576c:	2501      	movs	r5, #1
 801576e:	3c04      	subs	r4, #4
 8015770:	6822      	ldr	r2, [r4, #0]
 8015772:	f000 000f 	and.w	r0, r0, #15
 8015776:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801577a:	6020      	str	r0, [r4, #0]
 801577c:	e7b5      	b.n	80156ea <__hexnan+0x7a>
 801577e:	2508      	movs	r5, #8
 8015780:	e7b3      	b.n	80156ea <__hexnan+0x7a>
 8015782:	9b01      	ldr	r3, [sp, #4]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d0dd      	beq.n	8015744 <__hexnan+0xd4>
 8015788:	f1c3 0320 	rsb	r3, r3, #32
 801578c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015790:	40da      	lsrs	r2, r3
 8015792:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015796:	4013      	ands	r3, r2
 8015798:	f846 3c04 	str.w	r3, [r6, #-4]
 801579c:	e7d2      	b.n	8015744 <__hexnan+0xd4>
 801579e:	3f04      	subs	r7, #4
 80157a0:	e7d0      	b.n	8015744 <__hexnan+0xd4>
 80157a2:	2004      	movs	r0, #4
 80157a4:	e7d5      	b.n	8015752 <__hexnan+0xe2>

080157a6 <__ascii_mbtowc>:
 80157a6:	b082      	sub	sp, #8
 80157a8:	b901      	cbnz	r1, 80157ac <__ascii_mbtowc+0x6>
 80157aa:	a901      	add	r1, sp, #4
 80157ac:	b142      	cbz	r2, 80157c0 <__ascii_mbtowc+0x1a>
 80157ae:	b14b      	cbz	r3, 80157c4 <__ascii_mbtowc+0x1e>
 80157b0:	7813      	ldrb	r3, [r2, #0]
 80157b2:	600b      	str	r3, [r1, #0]
 80157b4:	7812      	ldrb	r2, [r2, #0]
 80157b6:	1e10      	subs	r0, r2, #0
 80157b8:	bf18      	it	ne
 80157ba:	2001      	movne	r0, #1
 80157bc:	b002      	add	sp, #8
 80157be:	4770      	bx	lr
 80157c0:	4610      	mov	r0, r2
 80157c2:	e7fb      	b.n	80157bc <__ascii_mbtowc+0x16>
 80157c4:	f06f 0001 	mvn.w	r0, #1
 80157c8:	e7f8      	b.n	80157bc <__ascii_mbtowc+0x16>

080157ca <_realloc_r>:
 80157ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157ce:	4607      	mov	r7, r0
 80157d0:	4614      	mov	r4, r2
 80157d2:	460d      	mov	r5, r1
 80157d4:	b921      	cbnz	r1, 80157e0 <_realloc_r+0x16>
 80157d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157da:	4611      	mov	r1, r2
 80157dc:	f7fd b966 	b.w	8012aac <_malloc_r>
 80157e0:	b92a      	cbnz	r2, 80157ee <_realloc_r+0x24>
 80157e2:	f7fd f8ef 	bl	80129c4 <_free_r>
 80157e6:	4625      	mov	r5, r4
 80157e8:	4628      	mov	r0, r5
 80157ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157ee:	f000 f8b2 	bl	8015956 <_malloc_usable_size_r>
 80157f2:	4284      	cmp	r4, r0
 80157f4:	4606      	mov	r6, r0
 80157f6:	d802      	bhi.n	80157fe <_realloc_r+0x34>
 80157f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80157fc:	d8f4      	bhi.n	80157e8 <_realloc_r+0x1e>
 80157fe:	4621      	mov	r1, r4
 8015800:	4638      	mov	r0, r7
 8015802:	f7fd f953 	bl	8012aac <_malloc_r>
 8015806:	4680      	mov	r8, r0
 8015808:	b908      	cbnz	r0, 801580e <_realloc_r+0x44>
 801580a:	4645      	mov	r5, r8
 801580c:	e7ec      	b.n	80157e8 <_realloc_r+0x1e>
 801580e:	42b4      	cmp	r4, r6
 8015810:	4622      	mov	r2, r4
 8015812:	4629      	mov	r1, r5
 8015814:	bf28      	it	cs
 8015816:	4632      	movcs	r2, r6
 8015818:	f7fc fad9 	bl	8011dce <memcpy>
 801581c:	4629      	mov	r1, r5
 801581e:	4638      	mov	r0, r7
 8015820:	f7fd f8d0 	bl	80129c4 <_free_r>
 8015824:	e7f1      	b.n	801580a <_realloc_r+0x40>
	...

08015828 <_strtoul_l.isra.0>:
 8015828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801582c:	4e34      	ldr	r6, [pc, #208]	@ (8015900 <_strtoul_l.isra.0+0xd8>)
 801582e:	4686      	mov	lr, r0
 8015830:	460d      	mov	r5, r1
 8015832:	4628      	mov	r0, r5
 8015834:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015838:	5d37      	ldrb	r7, [r6, r4]
 801583a:	f017 0708 	ands.w	r7, r7, #8
 801583e:	d1f8      	bne.n	8015832 <_strtoul_l.isra.0+0xa>
 8015840:	2c2d      	cmp	r4, #45	@ 0x2d
 8015842:	d110      	bne.n	8015866 <_strtoul_l.isra.0+0x3e>
 8015844:	782c      	ldrb	r4, [r5, #0]
 8015846:	2701      	movs	r7, #1
 8015848:	1c85      	adds	r5, r0, #2
 801584a:	f033 0010 	bics.w	r0, r3, #16
 801584e:	d115      	bne.n	801587c <_strtoul_l.isra.0+0x54>
 8015850:	2c30      	cmp	r4, #48	@ 0x30
 8015852:	d10d      	bne.n	8015870 <_strtoul_l.isra.0+0x48>
 8015854:	7828      	ldrb	r0, [r5, #0]
 8015856:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801585a:	2858      	cmp	r0, #88	@ 0x58
 801585c:	d108      	bne.n	8015870 <_strtoul_l.isra.0+0x48>
 801585e:	786c      	ldrb	r4, [r5, #1]
 8015860:	3502      	adds	r5, #2
 8015862:	2310      	movs	r3, #16
 8015864:	e00a      	b.n	801587c <_strtoul_l.isra.0+0x54>
 8015866:	2c2b      	cmp	r4, #43	@ 0x2b
 8015868:	bf04      	itt	eq
 801586a:	782c      	ldrbeq	r4, [r5, #0]
 801586c:	1c85      	addeq	r5, r0, #2
 801586e:	e7ec      	b.n	801584a <_strtoul_l.isra.0+0x22>
 8015870:	2b00      	cmp	r3, #0
 8015872:	d1f6      	bne.n	8015862 <_strtoul_l.isra.0+0x3a>
 8015874:	2c30      	cmp	r4, #48	@ 0x30
 8015876:	bf14      	ite	ne
 8015878:	230a      	movne	r3, #10
 801587a:	2308      	moveq	r3, #8
 801587c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015880:	2600      	movs	r6, #0
 8015882:	fbb8 f8f3 	udiv	r8, r8, r3
 8015886:	fb03 f908 	mul.w	r9, r3, r8
 801588a:	ea6f 0909 	mvn.w	r9, r9
 801588e:	4630      	mov	r0, r6
 8015890:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8015894:	f1bc 0f09 	cmp.w	ip, #9
 8015898:	d810      	bhi.n	80158bc <_strtoul_l.isra.0+0x94>
 801589a:	4664      	mov	r4, ip
 801589c:	42a3      	cmp	r3, r4
 801589e:	dd1e      	ble.n	80158de <_strtoul_l.isra.0+0xb6>
 80158a0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80158a4:	d007      	beq.n	80158b6 <_strtoul_l.isra.0+0x8e>
 80158a6:	4580      	cmp	r8, r0
 80158a8:	d316      	bcc.n	80158d8 <_strtoul_l.isra.0+0xb0>
 80158aa:	d101      	bne.n	80158b0 <_strtoul_l.isra.0+0x88>
 80158ac:	45a1      	cmp	r9, r4
 80158ae:	db13      	blt.n	80158d8 <_strtoul_l.isra.0+0xb0>
 80158b0:	fb00 4003 	mla	r0, r0, r3, r4
 80158b4:	2601      	movs	r6, #1
 80158b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80158ba:	e7e9      	b.n	8015890 <_strtoul_l.isra.0+0x68>
 80158bc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80158c0:	f1bc 0f19 	cmp.w	ip, #25
 80158c4:	d801      	bhi.n	80158ca <_strtoul_l.isra.0+0xa2>
 80158c6:	3c37      	subs	r4, #55	@ 0x37
 80158c8:	e7e8      	b.n	801589c <_strtoul_l.isra.0+0x74>
 80158ca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80158ce:	f1bc 0f19 	cmp.w	ip, #25
 80158d2:	d804      	bhi.n	80158de <_strtoul_l.isra.0+0xb6>
 80158d4:	3c57      	subs	r4, #87	@ 0x57
 80158d6:	e7e1      	b.n	801589c <_strtoul_l.isra.0+0x74>
 80158d8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80158dc:	e7eb      	b.n	80158b6 <_strtoul_l.isra.0+0x8e>
 80158de:	1c73      	adds	r3, r6, #1
 80158e0:	d106      	bne.n	80158f0 <_strtoul_l.isra.0+0xc8>
 80158e2:	2322      	movs	r3, #34	@ 0x22
 80158e4:	f8ce 3000 	str.w	r3, [lr]
 80158e8:	4630      	mov	r0, r6
 80158ea:	b932      	cbnz	r2, 80158fa <_strtoul_l.isra.0+0xd2>
 80158ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158f0:	b107      	cbz	r7, 80158f4 <_strtoul_l.isra.0+0xcc>
 80158f2:	4240      	negs	r0, r0
 80158f4:	2a00      	cmp	r2, #0
 80158f6:	d0f9      	beq.n	80158ec <_strtoul_l.isra.0+0xc4>
 80158f8:	b106      	cbz	r6, 80158fc <_strtoul_l.isra.0+0xd4>
 80158fa:	1e69      	subs	r1, r5, #1
 80158fc:	6011      	str	r1, [r2, #0]
 80158fe:	e7f5      	b.n	80158ec <_strtoul_l.isra.0+0xc4>
 8015900:	08016eb1 	.word	0x08016eb1

08015904 <_strtoul_r>:
 8015904:	f7ff bf90 	b.w	8015828 <_strtoul_l.isra.0>

08015908 <__ascii_wctomb>:
 8015908:	4603      	mov	r3, r0
 801590a:	4608      	mov	r0, r1
 801590c:	b141      	cbz	r1, 8015920 <__ascii_wctomb+0x18>
 801590e:	2aff      	cmp	r2, #255	@ 0xff
 8015910:	d904      	bls.n	801591c <__ascii_wctomb+0x14>
 8015912:	228a      	movs	r2, #138	@ 0x8a
 8015914:	601a      	str	r2, [r3, #0]
 8015916:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801591a:	4770      	bx	lr
 801591c:	700a      	strb	r2, [r1, #0]
 801591e:	2001      	movs	r0, #1
 8015920:	4770      	bx	lr
	...

08015924 <fiprintf>:
 8015924:	b40e      	push	{r1, r2, r3}
 8015926:	b503      	push	{r0, r1, lr}
 8015928:	4601      	mov	r1, r0
 801592a:	ab03      	add	r3, sp, #12
 801592c:	4805      	ldr	r0, [pc, #20]	@ (8015944 <fiprintf+0x20>)
 801592e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015932:	6800      	ldr	r0, [r0, #0]
 8015934:	9301      	str	r3, [sp, #4]
 8015936:	f7fe ff75 	bl	8014824 <_vfiprintf_r>
 801593a:	b002      	add	sp, #8
 801593c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015940:	b003      	add	sp, #12
 8015942:	4770      	bx	lr
 8015944:	24000020 	.word	0x24000020

08015948 <abort>:
 8015948:	b508      	push	{r3, lr}
 801594a:	2006      	movs	r0, #6
 801594c:	f000 f834 	bl	80159b8 <raise>
 8015950:	2001      	movs	r0, #1
 8015952:	f7ee fca3 	bl	800429c <_exit>

08015956 <_malloc_usable_size_r>:
 8015956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801595a:	1f18      	subs	r0, r3, #4
 801595c:	2b00      	cmp	r3, #0
 801595e:	bfbc      	itt	lt
 8015960:	580b      	ldrlt	r3, [r1, r0]
 8015962:	18c0      	addlt	r0, r0, r3
 8015964:	4770      	bx	lr

08015966 <_raise_r>:
 8015966:	291f      	cmp	r1, #31
 8015968:	b538      	push	{r3, r4, r5, lr}
 801596a:	4605      	mov	r5, r0
 801596c:	460c      	mov	r4, r1
 801596e:	d904      	bls.n	801597a <_raise_r+0x14>
 8015970:	2316      	movs	r3, #22
 8015972:	6003      	str	r3, [r0, #0]
 8015974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015978:	bd38      	pop	{r3, r4, r5, pc}
 801597a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801597c:	b112      	cbz	r2, 8015984 <_raise_r+0x1e>
 801597e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015982:	b94b      	cbnz	r3, 8015998 <_raise_r+0x32>
 8015984:	4628      	mov	r0, r5
 8015986:	f000 f831 	bl	80159ec <_getpid_r>
 801598a:	4622      	mov	r2, r4
 801598c:	4601      	mov	r1, r0
 801598e:	4628      	mov	r0, r5
 8015990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015994:	f000 b818 	b.w	80159c8 <_kill_r>
 8015998:	2b01      	cmp	r3, #1
 801599a:	d00a      	beq.n	80159b2 <_raise_r+0x4c>
 801599c:	1c59      	adds	r1, r3, #1
 801599e:	d103      	bne.n	80159a8 <_raise_r+0x42>
 80159a0:	2316      	movs	r3, #22
 80159a2:	6003      	str	r3, [r0, #0]
 80159a4:	2001      	movs	r0, #1
 80159a6:	e7e7      	b.n	8015978 <_raise_r+0x12>
 80159a8:	2100      	movs	r1, #0
 80159aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80159ae:	4620      	mov	r0, r4
 80159b0:	4798      	blx	r3
 80159b2:	2000      	movs	r0, #0
 80159b4:	e7e0      	b.n	8015978 <_raise_r+0x12>
	...

080159b8 <raise>:
 80159b8:	4b02      	ldr	r3, [pc, #8]	@ (80159c4 <raise+0xc>)
 80159ba:	4601      	mov	r1, r0
 80159bc:	6818      	ldr	r0, [r3, #0]
 80159be:	f7ff bfd2 	b.w	8015966 <_raise_r>
 80159c2:	bf00      	nop
 80159c4:	24000020 	.word	0x24000020

080159c8 <_kill_r>:
 80159c8:	b538      	push	{r3, r4, r5, lr}
 80159ca:	4d07      	ldr	r5, [pc, #28]	@ (80159e8 <_kill_r+0x20>)
 80159cc:	2300      	movs	r3, #0
 80159ce:	4604      	mov	r4, r0
 80159d0:	4608      	mov	r0, r1
 80159d2:	4611      	mov	r1, r2
 80159d4:	602b      	str	r3, [r5, #0]
 80159d6:	f7ee fc51 	bl	800427c <_kill>
 80159da:	1c43      	adds	r3, r0, #1
 80159dc:	d102      	bne.n	80159e4 <_kill_r+0x1c>
 80159de:	682b      	ldr	r3, [r5, #0]
 80159e0:	b103      	cbz	r3, 80159e4 <_kill_r+0x1c>
 80159e2:	6023      	str	r3, [r4, #0]
 80159e4:	bd38      	pop	{r3, r4, r5, pc}
 80159e6:	bf00      	nop
 80159e8:	2400086c 	.word	0x2400086c

080159ec <_getpid_r>:
 80159ec:	f7ee bc3e 	b.w	800426c <_getpid>

080159f0 <_init>:
 80159f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159f2:	bf00      	nop
 80159f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159f6:	bc08      	pop	{r3}
 80159f8:	469e      	mov	lr, r3
 80159fa:	4770      	bx	lr

080159fc <_fini>:
 80159fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159fe:	bf00      	nop
 8015a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a02:	bc08      	pop	{r3}
 8015a04:	469e      	mov	lr, r3
 8015a06:	4770      	bx	lr
