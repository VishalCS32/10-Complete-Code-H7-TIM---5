
10-Complete Code H7 FreeRTOS - 5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000157d8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cb4  08015aa8  08015aa8  00016aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801775c  0801775c  0001875c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017764  08017764  00018764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017768  08017768  00018768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e4  24000000  0801776c  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006ac  240001e4  08017950  000191e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000890  08017950  00019890  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000191e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026c37  00000000  00000000  00019212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000051bd  00000000  00000000  0003fe49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fe8  00000000  00000000  00045008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000188b  00000000  00000000  00046ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000a0a0  00000000  00000000  0004887b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027196  00000000  00000000  0005291b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016ff81  00000000  00000000  00079ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e9a32  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009df8  00000000  00000000  001e9a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  001f3870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08015a90 	.word	0x08015a90

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e8 	.word	0x240001e8
 800030c:	08015a90 	.word	0x08015a90

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007cc:	f3bf 8f4f 	dsb	sy
}
 80007d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <__NVIC_SystemReset+0x24>)
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80007da:	4904      	ldr	r1, [pc, #16]	@ (80007ec <__NVIC_SystemReset+0x24>)
 80007dc:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <__NVIC_SystemReset+0x28>)
 80007de:	4313      	orrs	r3, r2
 80007e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80007e2:	f3bf 8f4f 	dsb	sy
}
 80007e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <__NVIC_SystemReset+0x20>
 80007ec:	e000ed00 	.word	0xe000ed00
 80007f0:	05fa0004 	.word	0x05fa0004

080007f4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000804:	2b40      	cmp	r3, #64	@ 0x40
 8000806:	d101      	bne.n	800080c <LL_USART_IsActiveFlag_TC+0x18>
 8000808:	2301      	movs	r3, #1
 800080a:	e000      	b.n	800080e <LL_USART_IsActiveFlag_TC+0x1a>
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <strip_brackets>:

uint8_t is_cmd_mode(void) {
    return cmd_mode;
}

void strip_brackets(char *str) {
 800081a:	b590      	push	{r4, r7, lr}
 800081c:	b085      	sub	sp, #20
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
    if (str[0] == '[') {
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b5b      	cmp	r3, #91	@ 0x5b
 8000828:	d10a      	bne.n	8000840 <strip_brackets+0x26>
        memmove(str, str + 1, strlen(str));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	1c5c      	adds	r4, r3, #1
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff fdce 	bl	80003d0 <strlen>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	4621      	mov	r1, r4
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f011 fa5e 	bl	8011cfc <memmove>
    }
    char *end = strchr(str, ']');
 8000840:	215d      	movs	r1, #93	@ 0x5d
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f011 fa7c 	bl	8011d40 <strchr>
 8000848:	60f8      	str	r0, [r7, #12]
    if (end) *end = '\0';
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <strip_brackets+0x3c>
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
}
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	bd90      	pop	{r4, r7, pc}
	...

08000860 <process_command>:

void process_command(char *cmd) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b0c4      	sub	sp, #272	@ 0x110
 8000864:	af0a      	add	r7, sp, #40	@ 0x28
 8000866:	6078      	str	r0, [r7, #4]
    strip_brackets(cmd);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ffd6 	bl	800081a <strip_brackets>

    if (strcmp(cmd, "CMD") == 0) {
 800086e:	49bc      	ldr	r1, [pc, #752]	@ (8000b60 <process_command+0x300>)
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff fd4d 	bl	8000310 <strcmp>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d10e      	bne.n	800089a <process_command+0x3a>
        cmd_mode = 1;
 800087c:	4bb9      	ldr	r3, [pc, #740]	@ (8000b64 <process_command+0x304>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
        printf("\r\n\r\nEntered command mode\r\n\r\n");
 8000882:	48b9      	ldr	r0, [pc, #740]	@ (8000b68 <process_command+0x308>)
 8000884:	f011 f90a 	bl	8011a9c <puts>
        main_led(0, 255, 0, 255, 1);
 8000888:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800088c:	23ff      	movs	r3, #255	@ 0xff
 800088e:	2200      	movs	r2, #0
 8000890:	21ff      	movs	r1, #255	@ 0xff
 8000892:	2000      	movs	r0, #0
 8000894:	f001 fcd0 	bl	8002238 <main_led>
        return;
 8000898:	e315      	b.n	8000ec6 <process_command+0x666>
    }

    if (!cmd_mode) {
 800089a:	4bb2      	ldr	r3, [pc, #712]	@ (8000b64 <process_command+0x304>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d103      	bne.n	80008ac <process_command+0x4c>
        printf("Not in command mode\n");
 80008a4:	48b1      	ldr	r0, [pc, #708]	@ (8000b6c <process_command+0x30c>)
 80008a6:	f011 f8f9 	bl	8011a9c <puts>
        return;
 80008aa:	e30c      	b.n	8000ec6 <process_command+0x666>
    }

    if (strcmp(cmd, "exit") == 0) {
 80008ac:	49b0      	ldr	r1, [pc, #704]	@ (8000b70 <process_command+0x310>)
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff fd2e 	bl	8000310 <strcmp>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d138      	bne.n	800092c <process_command+0xcc>
        cmd_mode = 0;
 80008ba:	4baa      	ldr	r3, [pc, #680]	@ (8000b64 <process_command+0x304>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
        printf("\r\nExiting command mode, rebooting...\r\n\r\n");
 80008c0:	48ac      	ldr	r0, [pc, #688]	@ (8000b74 <process_command+0x314>)
 80008c2:	f011 f8eb 	bl	8011a9c <puts>
        // Wait for UART transmission to complete
        while (!LL_USART_IsActiveFlag_TC(USART6)); // Ensure transmission complete
 80008c6:	bf00      	nop
 80008c8:	48ab      	ldr	r0, [pc, #684]	@ (8000b78 <process_command+0x318>)
 80008ca:	f7ff ff93 	bl	80007f4 <LL_USART_IsActiveFlag_TC>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d0f9      	beq.n	80008c8 <process_command+0x68>
        // Busy-wait instead of HAL_Delay
        for (volatile uint32_t i = 0; i < 1000000; i++); // ~200ms at 480MHz
 80008d4:	2300      	movs	r3, #0
 80008d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80008da:	e004      	b.n	80008e6 <process_command+0x86>
 80008dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80008e0:	3301      	adds	r3, #1
 80008e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80008e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80008ea:	4aa4      	ldr	r2, [pc, #656]	@ (8000b7c <process_command+0x31c>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d9f5      	bls.n	80008dc <process_command+0x7c>
        // Check for pending faults
        if (SCB->HFSR) {
 80008f0:	4ba3      	ldr	r3, [pc, #652]	@ (8000b80 <process_command+0x320>)
 80008f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d005      	beq.n	8000904 <process_command+0xa4>
            printf("Hard Fault pending: HFSR=0x%08lX\r\n", SCB->HFSR);
 80008f8:	4ba1      	ldr	r3, [pc, #644]	@ (8000b80 <process_command+0x320>)
 80008fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008fc:	4619      	mov	r1, r3
 80008fe:	48a1      	ldr	r0, [pc, #644]	@ (8000b84 <process_command+0x324>)
 8000900:	f011 f85c 	bl	80119bc <iprintf>
        }
        if (SCB->CFSR) {
 8000904:	4b9e      	ldr	r3, [pc, #632]	@ (8000b80 <process_command+0x320>)
 8000906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000908:	2b00      	cmp	r3, #0
 800090a:	d005      	beq.n	8000918 <process_command+0xb8>
            printf("Configurable Fault pending: CFSR=0x%08lX\r\n", SCB->CFSR);
 800090c:	4b9c      	ldr	r3, [pc, #624]	@ (8000b80 <process_command+0x320>)
 800090e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000910:	4619      	mov	r1, r3
 8000912:	489d      	ldr	r0, [pc, #628]	@ (8000b88 <process_command+0x328>)
 8000914:	f011 f852 	bl	80119bc <iprintf>
        }
        printf("Disabling interrupts\r\n"); // Debug
 8000918:	489c      	ldr	r0, [pc, #624]	@ (8000b8c <process_command+0x32c>)
 800091a:	f011 f8bf 	bl	8011a9c <puts>
  __ASM volatile ("cpsid i" : : : "memory");
 800091e:	b672      	cpsid	i
}
 8000920:	bf00      	nop
        __disable_irq(); // Disable all interrupts
        printf("Triggering NVIC_SystemReset\r\n"); // Debug
 8000922:	489b      	ldr	r0, [pc, #620]	@ (8000b90 <process_command+0x330>)
 8000924:	f011 f8ba 	bl	8011a9c <puts>
        NVIC_SystemReset(); // Primary reset
 8000928:	f7ff ff4e 	bl	80007c8 <__NVIC_SystemReset>
        printf("NVIC_SystemReset failed, trying SCB reset\r\n"); // Debug (should not reach)
        SCB->AIRCR = (0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk;
        printf("SCB reset triggered\r\n"); // Debug (should not reach)
        while (true); // Trap if reset fails
    }
    else if (strcmp(cmd, "cal_accel_gyro") == 0) {
 800092c:	4999      	ldr	r1, [pc, #612]	@ (8000b94 <process_command+0x334>)
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff fcee 	bl	8000310 <strcmp>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	f000 82c5 	beq.w	8000ec6 <process_command+0x666>
//        start_accel_and_gyro_calibration(&filter_state);
    }
    else if (strcmp(cmd, "cal_mag") == 0) {
 800093c:	4996      	ldr	r1, [pc, #600]	@ (8000b98 <process_command+0x338>)
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff fce6 	bl	8000310 <strcmp>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	f000 82bd 	beq.w	8000ec6 <process_command+0x666>
//        start_mag_calibration(&filter_state);
    }
    else if (strcmp(cmd, "cal_all") == 0) {
 800094c:	4993      	ldr	r1, [pc, #588]	@ (8000b9c <process_command+0x33c>)
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff fcde 	bl	8000310 <strcmp>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	f000 82b5 	beq.w	8000ec6 <process_command+0x666>
//        start_full_calibration(&filter_state);
    }
    else if (strcmp(cmd, "cancel_cal") == 0) {
 800095c:	4990      	ldr	r1, [pc, #576]	@ (8000ba0 <process_command+0x340>)
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff fcd6 	bl	8000310 <strcmp>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	f000 82ad 	beq.w	8000ec6 <process_command+0x666>
//        cancel_calibration();
    }
    else if (strcmp(cmd, "status") == 0) {
 800096c:	498d      	ldr	r1, [pc, #564]	@ (8000ba4 <process_command+0x344>)
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff fcce 	bl	8000310 <strcmp>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d103      	bne.n	8000982 <process_command+0x122>
        printf("Status OK\n");
 800097a:	488b      	ldr	r0, [pc, #556]	@ (8000ba8 <process_command+0x348>)
 800097c:	f011 f88e 	bl	8011a9c <puts>
 8000980:	e2a1      	b.n	8000ec6 <process_command+0x666>
    }
    else if (strcmp(cmd, "main_led_ON") == 0) {
 8000982:	498a      	ldr	r1, [pc, #552]	@ (8000bac <process_command+0x34c>)
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff fcc3 	bl	8000310 <strcmp>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d10e      	bne.n	80009ae <process_command+0x14e>
        printf("CMD: Executing main_led_ON command\n");
 8000990:	4887      	ldr	r0, [pc, #540]	@ (8000bb0 <process_command+0x350>)
 8000992:	f011 f883 	bl	8011a9c <puts>
        main_led(0, 255, 0, 255, 1);
 8000996:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800099a:	23ff      	movs	r3, #255	@ 0xff
 800099c:	2200      	movs	r2, #0
 800099e:	21ff      	movs	r1, #255	@ 0xff
 80009a0:	2000      	movs	r0, #0
 80009a2:	f001 fc49 	bl	8002238 <main_led>
        printf("Main LED ON\n");
 80009a6:	4883      	ldr	r0, [pc, #524]	@ (8000bb4 <process_command+0x354>)
 80009a8:	f011 f878 	bl	8011a9c <puts>
 80009ac:	e28b      	b.n	8000ec6 <process_command+0x666>
    }
    else if (strcmp(cmd, "main_led_OFF") == 0) {
 80009ae:	4982      	ldr	r1, [pc, #520]	@ (8000bb8 <process_command+0x358>)
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff fcad 	bl	8000310 <strcmp>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d10e      	bne.n	80009da <process_command+0x17a>
        printf("CMD: Executing main_led_OFF command\n");
 80009bc:	487f      	ldr	r0, [pc, #508]	@ (8000bbc <process_command+0x35c>)
 80009be:	f011 f86d 	bl	8011a9c <puts>
        main_led(0, 0, 0, 0, 0);
 80009c2:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8000bc0 <process_command+0x360>
 80009c6:	2300      	movs	r3, #0
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2000      	movs	r0, #0
 80009ce:	f001 fc33 	bl	8002238 <main_led>
        printf("Main LED OFF\n");
 80009d2:	487c      	ldr	r0, [pc, #496]	@ (8000bc4 <process_command+0x364>)
 80009d4:	f011 f862 	bl	8011a9c <puts>
 80009d8:	e275      	b.n	8000ec6 <process_command+0x666>
    }
    else if (strncmp(cmd, "set_main_led", 12) == 0) {
 80009da:	220c      	movs	r2, #12
 80009dc:	497a      	ldr	r1, [pc, #488]	@ (8000bc8 <process_command+0x368>)
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f011 f9bb 	bl	8011d5a <strncmp>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d13a      	bne.n	8000a60 <process_command+0x200>
        int index, r, g, b;
        float brightness;
        char *params_start = strchr(cmd, '(');
 80009ea:	2128      	movs	r1, #40	@ 0x28
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f011 f9a7 	bl	8011d40 <strchr>
 80009f2:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        if (params_start) {
 80009f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 8263 	beq.w	8000ec6 <process_command+0x666>
            if (sscanf(params_start, "(%d,%d,%d,%d,%f)", &index, &r, &g, &b, &brightness) == 5) {
 8000a00:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8000a04:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8000a08:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000a0c:	9302      	str	r3, [sp, #8]
 8000a0e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	496b      	ldr	r1, [pc, #428]	@ (8000bcc <process_command+0x36c>)
 8000a1e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8000a22:	f011 f865 	bl	8011af0 <siscanf>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b05      	cmp	r3, #5
 8000a2a:	d115      	bne.n	8000a58 <process_command+0x1f8>
                main_led(index, r, g, b, brightness);
 8000a2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a36:	b2d9      	uxtb	r1, r3
 8000a38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8000a48:	eeb0 0a67 	vmov.f32	s0, s15
 8000a4c:	f001 fbf4 	bl	8002238 <main_led>
                printf("Main LED Set\n");
 8000a50:	485f      	ldr	r0, [pc, #380]	@ (8000bd0 <process_command+0x370>)
 8000a52:	f011 f823 	bl	8011a9c <puts>
 8000a56:	e236      	b.n	8000ec6 <process_command+0x666>
            } else {
                printf("Invalid Parameters\n");
 8000a58:	485e      	ldr	r0, [pc, #376]	@ (8000bd4 <process_command+0x374>)
 8000a5a:	f011 f81f 	bl	8011a9c <puts>
 8000a5e:	e232      	b.n	8000ec6 <process_command+0x666>
            }
        }
    }
    else if (strncmp(cmd, "SetRollPID", 10) == 0) {
 8000a60:	220a      	movs	r2, #10
 8000a62:	495d      	ldr	r1, [pc, #372]	@ (8000bd8 <process_command+0x378>)
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f011 f978 	bl	8011d5a <strncmp>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	f040 80bf 	bne.w	8000bf0 <process_command+0x390>
        float outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd;
        char *params_start = strchr(cmd, '(');
 8000a72:	2128      	movs	r1, #40	@ 0x28
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f011 f963 	bl	8011d40 <strchr>
 8000a7a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (params_start) {
 8000a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d068      	beq.n	8000b58 <process_command+0x2f8>
            if (sscanf(params_start, "({%f,%f,%f},{%f,%f,%f})",
 8000a86:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8000a8a:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 8000a8e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000a92:	9303      	str	r3, [sp, #12]
 8000a94:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	494c      	ldr	r1, [pc, #304]	@ (8000bdc <process_command+0x37c>)
 8000aaa:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000aae:	f011 f81f 	bl	8011af0 <siscanf>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b06      	cmp	r3, #6
 8000ab6:	d14b      	bne.n	8000b50 <process_command+0x2f0>
                       &outer_kp, &outer_ki, &outer_kd, &inner_kp, &inner_ki, &inner_kd) == 6) {
                DualPID_t roll_pid = {
 8000ab8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000abc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000ac0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000ac4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000ac8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000acc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000ad0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000ad4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000adc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000ae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                    .out = {outer_kp, outer_ki, outer_kd},
                    .in = {inner_kp, inner_ki, inner_kd}
                };
                if (EEPROM_SetRollPID(&roll_pid) == W25Qxx_OK) {
 8000ae8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 fc0b 	bl	8001308 <EEPROM_SetRollPID>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d127      	bne.n	8000b48 <process_command+0x2e8>
                    printf("Roll PID Set: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000af8:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8000afc:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8000b00:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8000b04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b08:	edd7 6a2d 	vldr	s13, [r7, #180]	@ 0xb4
 8000b0c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000b10:	edd7 5a2c 	vldr	s11, [r7, #176]	@ 0xb0
 8000b14:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000b18:	edd7 4a2b 	vldr	s9, [r7, #172]	@ 0xac
 8000b1c:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000b20:	edd7 3a2a 	vldr	s7, [r7, #168]	@ 0xa8
 8000b24:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000b28:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000b2c:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000b30:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000b34:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000b38:	ed8d 7b00 	vstr	d7, [sp]
 8000b3c:	ec53 2b12 	vmov	r2, r3, d2
 8000b40:	4827      	ldr	r0, [pc, #156]	@ (8000be0 <process_command+0x380>)
 8000b42:	f010 ff3b 	bl	80119bc <iprintf>
 8000b46:	e1be      	b.n	8000ec6 <process_command+0x666>
                           outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd);
                } else {
                    printf("Failed to set Roll PID\n");
 8000b48:	4826      	ldr	r0, [pc, #152]	@ (8000be4 <process_command+0x384>)
 8000b4a:	f010 ffa7 	bl	8011a9c <puts>
 8000b4e:	e1ba      	b.n	8000ec6 <process_command+0x666>
                }
            } else {
                printf("Invalid Roll PID Parameters\n");
 8000b50:	4825      	ldr	r0, [pc, #148]	@ (8000be8 <process_command+0x388>)
 8000b52:	f010 ffa3 	bl	8011a9c <puts>
 8000b56:	e1b6      	b.n	8000ec6 <process_command+0x666>
            }
        } else {
            printf("Invalid Roll PID Command Format\n");
 8000b58:	4824      	ldr	r0, [pc, #144]	@ (8000bec <process_command+0x38c>)
 8000b5a:	f010 ff9f 	bl	8011a9c <puts>
 8000b5e:	e1b2      	b.n	8000ec6 <process_command+0x666>
 8000b60:	08015aa8 	.word	0x08015aa8
 8000b64:	24000200 	.word	0x24000200
 8000b68:	08015aac 	.word	0x08015aac
 8000b6c:	08015ac8 	.word	0x08015ac8
 8000b70:	08015adc 	.word	0x08015adc
 8000b74:	08015ae4 	.word	0x08015ae4
 8000b78:	40011400 	.word	0x40011400
 8000b7c:	000f423f 	.word	0x000f423f
 8000b80:	e000ed00 	.word	0xe000ed00
 8000b84:	08015b0c 	.word	0x08015b0c
 8000b88:	08015b30 	.word	0x08015b30
 8000b8c:	08015b5c 	.word	0x08015b5c
 8000b90:	08015b74 	.word	0x08015b74
 8000b94:	08015b94 	.word	0x08015b94
 8000b98:	08015ba4 	.word	0x08015ba4
 8000b9c:	08015bac 	.word	0x08015bac
 8000ba0:	08015bb4 	.word	0x08015bb4
 8000ba4:	08015bc0 	.word	0x08015bc0
 8000ba8:	08015bc8 	.word	0x08015bc8
 8000bac:	08015bd4 	.word	0x08015bd4
 8000bb0:	08015be0 	.word	0x08015be0
 8000bb4:	08015c04 	.word	0x08015c04
 8000bb8:	08015c10 	.word	0x08015c10
 8000bbc:	08015c20 	.word	0x08015c20
 8000bc0:	00000000 	.word	0x00000000
 8000bc4:	08015c44 	.word	0x08015c44
 8000bc8:	08015c54 	.word	0x08015c54
 8000bcc:	08015c64 	.word	0x08015c64
 8000bd0:	08015c78 	.word	0x08015c78
 8000bd4:	08015c88 	.word	0x08015c88
 8000bd8:	08015c9c 	.word	0x08015c9c
 8000bdc:	08015ca8 	.word	0x08015ca8
 8000be0:	08015cc0 	.word	0x08015cc0
 8000be4:	08015d0c 	.word	0x08015d0c
 8000be8:	08015d24 	.word	0x08015d24
 8000bec:	08015d40 	.word	0x08015d40
        }
    }
    else if (strncmp(cmd, "SetPitchPID", 11) == 0) {
 8000bf0:	220b      	movs	r2, #11
 8000bf2:	49b6      	ldr	r1, [pc, #728]	@ (8000ecc <process_command+0x66c>)
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f011 f8b0 	bl	8011d5a <strncmp>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d16e      	bne.n	8000cde <process_command+0x47e>
        float outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd;
        char *params_start = strchr(cmd, '(');
 8000c00:	2128      	movs	r1, #40	@ 0x28
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f011 f89c 	bl	8011d40 <strchr>
 8000c08:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
        if (params_start) {
 8000c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d060      	beq.n	8000cd6 <process_command+0x476>
            if (sscanf(params_start, "({%f,%f,%f},{%f,%f,%f})",
 8000c14:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8000c18:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8000c1c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000c20:	9303      	str	r3, [sp, #12]
 8000c22:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000c26:	9302      	str	r3, [sp, #8]
 8000c28:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	460b      	mov	r3, r1
 8000c36:	49a6      	ldr	r1, [pc, #664]	@ (8000ed0 <process_command+0x670>)
 8000c38:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8000c3c:	f010 ff58 	bl	8011af0 <siscanf>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d143      	bne.n	8000cce <process_command+0x46e>
                       &outer_kp, &outer_ki, &outer_kd, &inner_kp, &inner_ki, &inner_kd) == 6) {
                DualPID_t pitch_pid = {
 8000c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8000c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c50:	667b      	str	r3, [r7, #100]	@ 0x64
 8000c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000c56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000c58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000c5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c60:	673b      	str	r3, [r7, #112]	@ 0x70
 8000c62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000c64:	677b      	str	r3, [r7, #116]	@ 0x74
                    .out = {outer_kp, outer_ki, outer_kd},
                    .in = {inner_kp, inner_ki, inner_kd}
                };
                if (EEPROM_SetPitchPID(&pitch_pid) == W25Qxx_OK) {
 8000c66:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fb9e 	bl	80013ac <EEPROM_SetPitchPID>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d127      	bne.n	8000cc6 <process_command+0x466>
                    printf("Pitch PID Set: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000c76:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000c7a:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8000c7e:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000c82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c86:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8000c8a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c8e:	edd7 5a20 	vldr	s11, [r7, #128]	@ 0x80
 8000c92:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000c96:	edd7 4a1f 	vldr	s9, [r7, #124]	@ 0x7c
 8000c9a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000c9e:	edd7 3a1e 	vldr	s7, [r7, #120]	@ 0x78
 8000ca2:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000ca6:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000caa:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000cae:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000cb2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000cb6:	ed8d 7b00 	vstr	d7, [sp]
 8000cba:	ec53 2b12 	vmov	r2, r3, d2
 8000cbe:	4885      	ldr	r0, [pc, #532]	@ (8000ed4 <process_command+0x674>)
 8000cc0:	f010 fe7c 	bl	80119bc <iprintf>
 8000cc4:	e0ff      	b.n	8000ec6 <process_command+0x666>
                           outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd);
                } else {
                    printf("Failed to set Pitch PID\n");
 8000cc6:	4884      	ldr	r0, [pc, #528]	@ (8000ed8 <process_command+0x678>)
 8000cc8:	f010 fee8 	bl	8011a9c <puts>
 8000ccc:	e0fb      	b.n	8000ec6 <process_command+0x666>
                }
            } else {
                printf("Invalid Pitch PID Parameters\n");
 8000cce:	4883      	ldr	r0, [pc, #524]	@ (8000edc <process_command+0x67c>)
 8000cd0:	f010 fee4 	bl	8011a9c <puts>
 8000cd4:	e0f7      	b.n	8000ec6 <process_command+0x666>
            }
        } else {
            printf("Invalid Pitch PID Command Format\n");
 8000cd6:	4882      	ldr	r0, [pc, #520]	@ (8000ee0 <process_command+0x680>)
 8000cd8:	f010 fee0 	bl	8011a9c <puts>
 8000cdc:	e0f3      	b.n	8000ec6 <process_command+0x666>
        }
    }
    else if (strncmp(cmd, "SetYawRatePID", 13) == 0) {
 8000cde:	220d      	movs	r2, #13
 8000ce0:	4980      	ldr	r1, [pc, #512]	@ (8000ee4 <process_command+0x684>)
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f011 f839 	bl	8011d5a <strncmp>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d149      	bne.n	8000d82 <process_command+0x522>
        float kp, ki, kd;
        char *params_start = strchr(cmd, '(');
 8000cee:	2128      	movs	r1, #40	@ 0x28
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f011 f825 	bl	8011d40 <strchr>
 8000cf6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        if (params_start) {
 8000cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d03b      	beq.n	8000d7a <process_command+0x51a>
            if (sscanf(params_start, "({%f,%f,%f})", &kp, &ki, &kd) == 3) {
 8000d02:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000d06:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8000d0a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	460b      	mov	r3, r1
 8000d12:	4975      	ldr	r1, [pc, #468]	@ (8000ee8 <process_command+0x688>)
 8000d14:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8000d18:	f010 feea 	bl	8011af0 <siscanf>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d127      	bne.n	8000d72 <process_command+0x512>
                PID_t yaw_rate_pid = {kp, ki, kd};
 8000d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d2c:	653b      	str	r3, [r7, #80]	@ 0x50
                if (EEPROM_SetYawRatePID(&yaw_rate_pid) == W25Qxx_OK) {
 8000d2e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fb8c 	bl	8001450 <EEPROM_SetYawRatePID>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d115      	bne.n	8000d6a <process_command+0x50a>
                    printf("Yaw Rate PID Set: Kp=%.3f, Ki=%.3f, Kd=%.3f\n", kp, ki, kd);
 8000d3e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000d42:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d46:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000d4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d4e:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8000d52:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000d56:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000d5a:	ed8d 7b00 	vstr	d7, [sp]
 8000d5e:	ec53 2b15 	vmov	r2, r3, d5
 8000d62:	4862      	ldr	r0, [pc, #392]	@ (8000eec <process_command+0x68c>)
 8000d64:	f010 fe2a 	bl	80119bc <iprintf>
 8000d68:	e0ad      	b.n	8000ec6 <process_command+0x666>
                } else {
                    printf("Failed to set Yaw Rate PID\n");
 8000d6a:	4861      	ldr	r0, [pc, #388]	@ (8000ef0 <process_command+0x690>)
 8000d6c:	f010 fe96 	bl	8011a9c <puts>
 8000d70:	e0a9      	b.n	8000ec6 <process_command+0x666>
                }
            } else {
                printf("Invalid Yaw Rate PID Parameters\n");
 8000d72:	4860      	ldr	r0, [pc, #384]	@ (8000ef4 <process_command+0x694>)
 8000d74:	f010 fe92 	bl	8011a9c <puts>
 8000d78:	e0a5      	b.n	8000ec6 <process_command+0x666>
            }
        } else {
            printf("Invalid Yaw Rate PID Command Format\n");
 8000d7a:	485f      	ldr	r0, [pc, #380]	@ (8000ef8 <process_command+0x698>)
 8000d7c:	f010 fe8e 	bl	8011a9c <puts>
 8000d80:	e0a1      	b.n	8000ec6 <process_command+0x666>
        }
    }
    else if (strcmp(cmd, "get_roll_pid") == 0) {
 8000d82:	495e      	ldr	r1, [pc, #376]	@ (8000efc <process_command+0x69c>)
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fac3 	bl	8000310 <strcmp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d133      	bne.n	8000df8 <process_command+0x598>
        DualPID_t roll_pid;
        if (EEPROM_GetRollPID(&roll_pid) == W25Qxx_OK) {
 8000d90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 fa95 	bl	80012c4 <EEPROM_GetRollPID>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d127      	bne.n	8000df0 <process_command+0x590>
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8000da0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000da4:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8000da8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000dac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8000db0:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000db4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8000db8:	edd7 5a0f 	vldr	s11, [r7, #60]	@ 0x3c
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000dbc:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8000dc0:	edd7 4a10 	vldr	s9, [r7, #64]	@ 0x40
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000dc4:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8000dc8:	edd7 3a11 	vldr	s7, [r7, #68]	@ 0x44
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000dcc:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000dd0:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000dd4:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000dd8:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000ddc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000de0:	ed8d 7b00 	vstr	d7, [sp]
 8000de4:	ec53 2b12 	vmov	r2, r3, d2
 8000de8:	4845      	ldr	r0, [pc, #276]	@ (8000f00 <process_command+0x6a0>)
 8000dea:	f010 fde7 	bl	80119bc <iprintf>
 8000dee:	e06a      	b.n	8000ec6 <process_command+0x666>
        } else {
            printf("Failed to get Roll PID\n");
 8000df0:	4844      	ldr	r0, [pc, #272]	@ (8000f04 <process_command+0x6a4>)
 8000df2:	f010 fe53 	bl	8011a9c <puts>
 8000df6:	e066      	b.n	8000ec6 <process_command+0x666>
        }
    }
    else if (strcmp(cmd, "get_pitch_pid") == 0) {
 8000df8:	4943      	ldr	r1, [pc, #268]	@ (8000f08 <process_command+0x6a8>)
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fa88 	bl	8000310 <strcmp>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d133      	bne.n	8000e6e <process_command+0x60e>
        DualPID_t pitch_pid;
        if (EEPROM_GetPitchPID(&pitch_pid) == W25Qxx_OK) {
 8000e06:	f107 0318 	add.w	r3, r7, #24
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 faac 	bl	8001368 <EEPROM_GetPitchPID>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d127      	bne.n	8000e66 <process_command+0x606>
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 8000e16:	edd7 7a06 	vldr	s15, [r7, #24]
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e1a:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 8000e1e:	edd7 7a07 	vldr	s15, [r7, #28]
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 8000e26:	edd7 6a08 	vldr	s13, [r7, #32]
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e2a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 8000e2e:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e32:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 8000e36:	edd7 4a0a 	vldr	s9, [r7, #40]	@ 0x28
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e3a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 8000e3e:	edd7 3a0b 	vldr	s7, [r7, #44]	@ 0x2c
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e42:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000e46:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000e4a:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000e4e:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000e52:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000e56:	ed8d 7b00 	vstr	d7, [sp]
 8000e5a:	ec53 2b12 	vmov	r2, r3, d2
 8000e5e:	482b      	ldr	r0, [pc, #172]	@ (8000f0c <process_command+0x6ac>)
 8000e60:	f010 fdac 	bl	80119bc <iprintf>
 8000e64:	e02f      	b.n	8000ec6 <process_command+0x666>
        } else {
            printf("Failed to get Pitch PID\n");
 8000e66:	482a      	ldr	r0, [pc, #168]	@ (8000f10 <process_command+0x6b0>)
 8000e68:	f010 fe18 	bl	8011a9c <puts>
 8000e6c:	e02b      	b.n	8000ec6 <process_command+0x666>
        }
    }
    else if (strcmp(cmd, "get_yaw_rate_pid") == 0) {
 8000e6e:	4929      	ldr	r1, [pc, #164]	@ (8000f14 <process_command+0x6b4>)
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff fa4d 	bl	8000310 <strcmp>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d121      	bne.n	8000ec0 <process_command+0x660>
        PID_t yaw_rate_pid;
        if (EEPROM_GetYawRatePID(&yaw_rate_pid) == W25Qxx_OK) {
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fac3 	bl	800140c <EEPROM_GetYawRatePID>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d115      	bne.n	8000eb8 <process_command+0x658>
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8000e8c:	edd7 7a03 	vldr	s15, [r7, #12]
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e90:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8000e94:	edd7 7a04 	vldr	s15, [r7, #16]
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8000e9c:	edd7 6a05 	vldr	s13, [r7, #20]
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000ea0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ea4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000ea8:	ed8d 7b00 	vstr	d7, [sp]
 8000eac:	ec53 2b15 	vmov	r2, r3, d5
 8000eb0:	4819      	ldr	r0, [pc, #100]	@ (8000f18 <process_command+0x6b8>)
 8000eb2:	f010 fd83 	bl	80119bc <iprintf>
 8000eb6:	e006      	b.n	8000ec6 <process_command+0x666>
        } else {
            printf("Failed to get Yaw Rate PID\n");
 8000eb8:	4818      	ldr	r0, [pc, #96]	@ (8000f1c <process_command+0x6bc>)
 8000eba:	f010 fdef 	bl	8011a9c <puts>
 8000ebe:	e002      	b.n	8000ec6 <process_command+0x666>
        }
    }
    else {
        printf("Unknown Command\n");
 8000ec0:	4817      	ldr	r0, [pc, #92]	@ (8000f20 <process_command+0x6c0>)
 8000ec2:	f010 fdeb 	bl	8011a9c <puts>
    }
}
 8000ec6:	37e8      	adds	r7, #232	@ 0xe8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	08015d60 	.word	0x08015d60
 8000ed0:	08015ca8 	.word	0x08015ca8
 8000ed4:	08015d6c 	.word	0x08015d6c
 8000ed8:	08015db8 	.word	0x08015db8
 8000edc:	08015dd0 	.word	0x08015dd0
 8000ee0:	08015df0 	.word	0x08015df0
 8000ee4:	08015e14 	.word	0x08015e14
 8000ee8:	08015e24 	.word	0x08015e24
 8000eec:	08015e34 	.word	0x08015e34
 8000ef0:	08015e64 	.word	0x08015e64
 8000ef4:	08015e80 	.word	0x08015e80
 8000ef8:	08015ea0 	.word	0x08015ea0
 8000efc:	08015ec4 	.word	0x08015ec4
 8000f00:	08015ed4 	.word	0x08015ed4
 8000f04:	08015f1c 	.word	0x08015f1c
 8000f08:	08015f34 	.word	0x08015f34
 8000f0c:	08015f44 	.word	0x08015f44
 8000f10:	08015f8c 	.word	0x08015f8c
 8000f14:	08015fa4 	.word	0x08015fa4
 8000f18:	08015fb8 	.word	0x08015fb8
 8000f1c:	08015fe4 	.word	0x08015fe4
 8000f20:	08016000 	.word	0x08016000

08000f24 <EEPROM_Init>:

/**
  * @brief Initialize the W25Qxx flash memory
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_Init(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b096      	sub	sp, #88	@ 0x58
 8000f28:	af00      	add	r7, sp, #0
    uint8_t jedec_id[3];
    OSPI_RegularCmdTypeDef cmd = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2250      	movs	r2, #80	@ 0x50
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f010 fefd 	bl	8011d30 <memset>

    /* Configure command to read JEDEC ID */
    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
    cmd.Instruction = W25Qxx_CMD_JEDEC_ID;
 8000f3a:	239f      	movs	r3, #159	@ 0x9f
 8000f3c:	60fb      	str	r3, [r7, #12]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	613b      	str	r3, [r7, #16]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8000f4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    cmd.NbData = 3;
 8000f54:	2303      	movs	r3, #3
 8000f56:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.DummyCycles = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f66:	4619      	mov	r1, r3
 8000f68:	4815      	ldr	r0, [pc, #84]	@ (8000fc0 <EEPROM_Init+0x9c>)
 8000f6a:	f008 ff07 	bl	8009d7c <HAL_OSPI_Command>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d005      	beq.n	8000f80 <EEPROM_Init+0x5c>
        printf("Failed to configure JEDEC ID command\r\n");
 8000f74:	4813      	ldr	r0, [pc, #76]	@ (8000fc4 <EEPROM_Init+0xa0>)
 8000f76:	f010 fd91 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f7e:	e01b      	b.n	8000fb8 <EEPROM_Init+0x94>
    }

    if (HAL_OSPI_Receive(&hospi1, jedec_id, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	@ (8000fc0 <EEPROM_Init+0x9c>)
 8000f8c:	f008 fff6 	bl	8009f7c <HAL_OSPI_Receive>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <EEPROM_Init+0x7e>
        printf("Failed to read JEDEC ID\r\n");
 8000f96:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <EEPROM_Init+0xa4>)
 8000f98:	f010 fd80 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fa0:	e00a      	b.n	8000fb8 <EEPROM_Init+0x94>
    }

    /* Check for valid JEDEC ID (example: Winbond W25Q series) */
    if (jedec_id[0] != 0xEF) { // Manufacturer ID for Winbond
 8000fa2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000fa6:	2bef      	cmp	r3, #239	@ 0xef
 8000fa8:	d005      	beq.n	8000fb6 <EEPROM_Init+0x92>
        printf("Invalid JEDEC ID\r\n");
 8000faa:	4808      	ldr	r0, [pc, #32]	@ (8000fcc <EEPROM_Init+0xa8>)
 8000fac:	f010 fd76 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fb4:	e000      	b.n	8000fb8 <EEPROM_Init+0x94>
    }

    return W25Qxx_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3758      	adds	r7, #88	@ 0x58
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	24000544 	.word	0x24000544
 8000fc4:	08016010 	.word	0x08016010
 8000fc8:	08016038 	.word	0x08016038
 8000fcc:	08016054 	.word	0x08016054

08000fd0 <EEPROM_ReadConfig>:
/**
  * @brief Read configuration from EEPROM
  * @param config Pointer to DroneConfig_t structure
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_ReadConfig(DroneConfig_t *config) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0a8      	sub	sp, #160	@ 0xa0
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    uint8_t buffer[sizeof(DroneConfig_t)];
    if (W25Qxx_Read(W25Qxx_CONFIG_ADDRESS, buffer, sizeof(DroneConfig_t)) != W25Qxx_OK) {
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2290      	movs	r2, #144	@ 0x90
 8000fde:	4619      	mov	r1, r3
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 fad9 	bl	8001598 <W25Qxx_Read>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <EEPROM_ReadConfig+0x28>
        printf("Failed to read data from flash\r\n");
 8000fec:	4812      	ldr	r0, [pc, #72]	@ (8001038 <EEPROM_ReadConfig+0x68>)
 8000fee:	f010 fd55 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ff6:	e01b      	b.n	8001030 <EEPROM_ReadConfig+0x60>
    }

    memcpy(config, buffer, sizeof(DroneConfig_t));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2290      	movs	r2, #144	@ 0x90
 8001002:	4619      	mov	r1, r3
 8001004:	f010 ff33 	bl	8011e6e <memcpy>
    uint32_t calculated_crc = CalculateCRC32((uint8_t*)config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8001008:	218c      	movs	r1, #140	@ 0x8c
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f83c 	bl	8001088 <CalculateCRC32>
 8001010:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (calculated_crc != config->crc) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800101a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800101e:	429a      	cmp	r2, r3
 8001020:	d005      	beq.n	800102e <EEPROM_ReadConfig+0x5e>
        printf("EEPROM config CRC mismatch\r\n");
 8001022:	4806      	ldr	r0, [pc, #24]	@ (800103c <EEPROM_ReadConfig+0x6c>)
 8001024:	f010 fd3a 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 8001028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800102c:	e000      	b.n	8001030 <EEPROM_ReadConfig+0x60>
    }

    return W25Qxx_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	37a0      	adds	r7, #160	@ 0xa0
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	08016068 	.word	0x08016068
 800103c:	08016088 	.word	0x08016088

08001040 <EEPROM_WriteConfig>:
/**
  * @brief Write configuration to EEPROM
  * @param config Pointer to DroneConfig_t structure
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_WriteConfig(DroneConfig_t *config) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b0a6      	sub	sp, #152	@ 0x98
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    uint8_t buffer[sizeof(DroneConfig_t)];
    memcpy(buffer, config, sizeof(DroneConfig_t));
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	4611      	mov	r1, r2
 8001050:	2290      	movs	r2, #144	@ 0x90
 8001052:	4618      	mov	r0, r3
 8001054:	f010 ff0b 	bl	8011e6e <memcpy>

    if (W25Qxx_Write(W25Qxx_CONFIG_ADDRESS, buffer, sizeof(DroneConfig_t)) != W25Qxx_OK) {
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	2290      	movs	r2, #144	@ 0x90
 800105e:	4619      	mov	r1, r3
 8001060:	2000      	movs	r0, #0
 8001062:	f000 faed 	bl	8001640 <W25Qxx_Write>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <EEPROM_WriteConfig+0x38>
        printf("Failed to write data to flash\r\n");
 800106c:	4805      	ldr	r0, [pc, #20]	@ (8001084 <EEPROM_WriteConfig+0x44>)
 800106e:	f010 fd15 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001076:	e000      	b.n	800107a <EEPROM_WriteConfig+0x3a>
    }

    return W25Qxx_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3798      	adds	r7, #152	@ 0x98
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	080160a4 	.word	0x080160a4

08001088 <CalculateCRC32>:
  * @brief Calculate CRC32 for data integrity
  * @param data Pointer to data
  * @param length Length of data
  * @retval uint32_t CRC value
  */
uint32_t CalculateCRC32(const uint8_t *data, uint32_t length) {
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001096:	617b      	str	r3, [r7, #20]
    const uint32_t polynomial = 0x04C11DB7;
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <CalculateCRC32+0x70>)
 800109a:	60bb      	str	r3, [r7, #8]

    for (uint32_t i = 0; i < length; i++) {
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	e01f      	b.n	80010e2 <CalculateCRC32+0x5a>
        crc ^= (uint32_t)data[i] << 24;
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	061b      	lsls	r3, r3, #24
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	4053      	eors	r3, r2
 80010b0:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	e00e      	b.n	80010d6 <CalculateCRC32+0x4e>
            if (crc & 0x80000000) {
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da05      	bge.n	80010ca <CalculateCRC32+0x42>
                crc = (crc << 1) ^ polynomial;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	4053      	eors	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	e002      	b.n	80010d0 <CalculateCRC32+0x48>
            } else {
                crc <<= 1;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	3301      	adds	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	d9ed      	bls.n	80010b8 <CalculateCRC32+0x30>
    for (uint32_t i = 0; i < length; i++) {
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	3301      	adds	r3, #1
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d3db      	bcc.n	80010a2 <CalculateCRC32+0x1a>
            }
        }
    }
    return crc;
 80010ea:	697b      	ldr	r3, [r7, #20]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	04c11db7 	.word	0x04c11db7

080010fc <EEPROM_GetAccelCalibration>:
/**
  * @brief Get accelerometer calibration data
  * @param accel_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetAccelCalibration(float accel_cal[3]) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0aa      	sub	sp, #168	@ 0xa8
 8001100:	af04      	add	r7, sp, #16
 8001102:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff61 	bl	8000fd0 <EEPROM_ReadConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d012      	beq.n	800113a <EEPROM_GetAccelCalibration+0x3e>
        printf("Failed to read config during GetAccelCalibration\r\n");
 8001114:	481c      	ldr	r0, [pc, #112]	@ (8001188 <EEPROM_GetAccelCalibration+0x8c>)
 8001116:	f010 fcc1 	bl	8011a9c <puts>
        accel_cal[0] = accel_cal[1] = accel_cal[2] = 0.0f; // Initialize on error
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f103 0208 	add.w	r2, r3, #8
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3304      	adds	r3, #4
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 8001134:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001138:	e021      	b.n	800117e <EEPROM_GetAccelCalibration+0x82>
    }
    memcpy(accel_cal, config.accel_cal, 3 * sizeof(float));
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	220c      	movs	r2, #12
 8001140:	4619      	mov	r1, r3
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f010 fe93 	bl	8011e6e <memcpy>
    printf("Retrieved accel_cal: X=%f, Y=%f, Z=%f\r\n", accel_cal[0], accel_cal[1], accel_cal[2]);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3304      	adds	r3, #4
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3308      	adds	r3, #8
 8001162:	edd3 6a00 	vldr	s13, [r3]
 8001166:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800116a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800116e:	ed8d 7b00 	vstr	d7, [sp]
 8001172:	ec53 2b15 	vmov	r2, r3, d5
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <EEPROM_GetAccelCalibration+0x90>)
 8001178:	f010 fc20 	bl	80119bc <iprintf>
    return W25Qxx_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3798      	adds	r7, #152	@ 0x98
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	080160c4 	.word	0x080160c4
 800118c:	080160f8 	.word	0x080160f8

08001190 <EEPROM_GetGyroCalibration>:
/**
  * @brief Get gyroscope calibration data
  * @param gyro_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetGyroCalibration(float gyro_cal[3]) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b0aa      	sub	sp, #168	@ 0xa8
 8001194:	af04      	add	r7, sp, #16
 8001196:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff17 	bl	8000fd0 <EEPROM_ReadConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d012      	beq.n	80011ce <EEPROM_GetGyroCalibration+0x3e>
        printf("Failed to read config during GetGyroCalibration\r\n");
 80011a8:	481c      	ldr	r0, [pc, #112]	@ (800121c <EEPROM_GetGyroCalibration+0x8c>)
 80011aa:	f010 fc77 	bl	8011a9c <puts>
        gyro_cal[0] = gyro_cal[1] = gyro_cal[2] = 0.0f; // Initialize on error
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f103 0208 	add.w	r2, r3, #8
 80011b4:	f04f 0300 	mov.w	r3, #0
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3304      	adds	r3, #4
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011cc:	e022      	b.n	8001214 <EEPROM_GetGyroCalibration+0x84>
    }
    memcpy(gyro_cal, config.gyro_cal, 3 * sizeof(float));
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	330c      	adds	r3, #12
 80011d4:	220c      	movs	r2, #12
 80011d6:	4619      	mov	r1, r3
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f010 fe48 	bl	8011e6e <memcpy>
    printf("Retrieved gyro_cal: X=%f, Y=%f, Z=%f\r\n", gyro_cal[0], gyro_cal[1], gyro_cal[2]);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3304      	adds	r3, #4
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3308      	adds	r3, #8
 80011f8:	edd3 6a00 	vldr	s13, [r3]
 80011fc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001200:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001204:	ed8d 7b00 	vstr	d7, [sp]
 8001208:	ec53 2b15 	vmov	r2, r3, d5
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <EEPROM_GetGyroCalibration+0x90>)
 800120e:	f010 fbd5 	bl	80119bc <iprintf>
    return W25Qxx_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3798      	adds	r7, #152	@ 0x98
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	08016154 	.word	0x08016154
 8001220:	08016188 	.word	0x08016188

08001224 <EEPROM_GetMagCalibration>:
/**
  * @brief Get magnetometer calibration data
  * @param mag_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetMagCalibration(float mag_cal[3]) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b0a6      	sub	sp, #152	@ 0x98
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fecd 	bl	8000fd0 <EEPROM_ReadConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d012      	beq.n	8001262 <EEPROM_GetMagCalibration+0x3e>
        printf("Failed to read config during GetMagCalibration\r\n");
 800123c:	480f      	ldr	r0, [pc, #60]	@ (800127c <EEPROM_GetMagCalibration+0x58>)
 800123e:	f010 fc2d 	bl	8011a9c <puts>
        mag_cal[0] = mag_cal[1] = mag_cal[2] = 0.0f; // Initialize on error
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f103 0208 	add.w	r2, r3, #8
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3304      	adds	r3, #4
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001260:	e008      	b.n	8001274 <EEPROM_GetMagCalibration+0x50>
    }
    memcpy(mag_cal, config.mag_cal, 3 * sizeof(float));
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	3318      	adds	r3, #24
 8001268:	220c      	movs	r2, #12
 800126a:	4619      	mov	r1, r3
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f010 fdfe 	bl	8011e6e <memcpy>
    return W25Qxx_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3798      	adds	r7, #152	@ 0x98
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	080161e4 	.word	0x080161e4

08001280 <EEPROM_GetPID>:
/**
  * @brief Get legacy PID values
  * @param pid Array to store PID values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetPID(float pid[3]) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b0a6      	sub	sp, #152	@ 0x98
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fe9f 	bl	8000fd0 <EEPROM_ReadConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <EEPROM_GetPID+0x24>
        printf("Failed to read config during GetPID\r\n");
 8001298:	4809      	ldr	r0, [pc, #36]	@ (80012c0 <EEPROM_GetPID+0x40>)
 800129a:	f010 fbff 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012a2:	e008      	b.n	80012b6 <EEPROM_GetPID+0x36>
    }
    memcpy(pid, config.pid, 3 * sizeof(float));
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	3324      	adds	r3, #36	@ 0x24
 80012aa:	220c      	movs	r2, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f010 fddd 	bl	8011e6e <memcpy>
    return W25Qxx_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3798      	adds	r7, #152	@ 0x98
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	08016244 	.word	0x08016244

080012c4 <EEPROM_GetRollPID>:
/**
  * @brief Get roll PID values
  * @param roll_pid Pointer to store roll PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetRollPID(DualPID_t *roll_pid) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0a6      	sub	sp, #152	@ 0x98
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fe7d 	bl	8000fd0 <EEPROM_ReadConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <EEPROM_GetRollPID+0x24>
        printf("Failed to read config during GetRollPID\r\n");
 80012dc:	4809      	ldr	r0, [pc, #36]	@ (8001304 <EEPROM_GetRollPID+0x40>)
 80012de:	f010 fbdd 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012e6:	e008      	b.n	80012fa <EEPROM_GetRollPID+0x36>
    }
    memcpy(roll_pid, &config.roll_pid, sizeof(DualPID_t));
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	3340      	adds	r3, #64	@ 0x40
 80012ee:	2218      	movs	r2, #24
 80012f0:	4619      	mov	r1, r3
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f010 fdbb 	bl	8011e6e <memcpy>
    return W25Qxx_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3798      	adds	r7, #152	@ 0x98
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	0801633c 	.word	0x0801633c

08001308 <EEPROM_SetRollPID>:
/**
  * @brief Set roll PID values
  * @param roll_pid Pointer to roll PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetRollPID(const DualPID_t *roll_pid) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b0a6      	sub	sp, #152	@ 0x98
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fe5b 	bl	8000fd0 <EEPROM_ReadConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <EEPROM_SetRollPID+0x24>
        printf("Failed to read config during SetRollPID\r\n");
 8001320:	4810      	ldr	r0, [pc, #64]	@ (8001364 <EEPROM_SetRollPID+0x5c>)
 8001322:	f010 fbbb 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800132a:	e016      	b.n	800135a <EEPROM_SetRollPID+0x52>
    }
    memcpy(&config.roll_pid, roll_pid, sizeof(DualPID_t));
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	3340      	adds	r3, #64	@ 0x40
 8001332:	2218      	movs	r2, #24
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4618      	mov	r0, r3
 8001338:	f010 fd99 	bl	8011e6e <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	218c      	movs	r1, #140	@ 0x8c
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fea0 	bl	8001088 <CalculateCRC32>
 8001348:	4603      	mov	r3, r0
 800134a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fe74 	bl	8001040 <EEPROM_WriteConfig>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3798      	adds	r7, #152	@ 0x98
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	08016368 	.word	0x08016368

08001368 <EEPROM_GetPitchPID>:
/**
  * @brief Get pitch PID values
  * @param pitch_pid Pointer to store pitch PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetPitchPID(DualPID_t *pitch_pid) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b0a6      	sub	sp, #152	@ 0x98
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fe2b 	bl	8000fd0 <EEPROM_ReadConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <EEPROM_GetPitchPID+0x24>
        printf("Failed to read config during GetPitchPID\r\n");
 8001380:	4809      	ldr	r0, [pc, #36]	@ (80013a8 <EEPROM_GetPitchPID+0x40>)
 8001382:	f010 fb8b 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800138a:	e008      	b.n	800139e <EEPROM_GetPitchPID+0x36>
    }
    memcpy(pitch_pid, &config.pitch_pid, sizeof(DualPID_t));
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	3358      	adds	r3, #88	@ 0x58
 8001392:	2218      	movs	r2, #24
 8001394:	4619      	mov	r1, r3
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f010 fd69 	bl	8011e6e <memcpy>
    return W25Qxx_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3798      	adds	r7, #152	@ 0x98
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	08016394 	.word	0x08016394

080013ac <EEPROM_SetPitchPID>:
/**
  * @brief Set pitch PID values
  * @param pitch_pid Pointer to pitch PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetPitchPID(const DualPID_t *pitch_pid) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0a6      	sub	sp, #152	@ 0x98
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fe09 	bl	8000fd0 <EEPROM_ReadConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <EEPROM_SetPitchPID+0x24>
        printf("Failed to read config during SetPitchPID\r\n");
 80013c4:	4810      	ldr	r0, [pc, #64]	@ (8001408 <EEPROM_SetPitchPID+0x5c>)
 80013c6:	f010 fb69 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013ce:	e016      	b.n	80013fe <EEPROM_SetPitchPID+0x52>
    }
    memcpy(&config.pitch_pid, pitch_pid, sizeof(DualPID_t));
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	3358      	adds	r3, #88	@ 0x58
 80013d6:	2218      	movs	r2, #24
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	f010 fd47 	bl	8011e6e <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	218c      	movs	r1, #140	@ 0x8c
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fe4e 	bl	8001088 <CalculateCRC32>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fe22 	bl	8001040 <EEPROM_WriteConfig>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3798      	adds	r7, #152	@ 0x98
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	080163c0 	.word	0x080163c0

0800140c <EEPROM_GetYawRatePID>:
/**
  * @brief Get yaw rate PID values
  * @param yaw_rate_pid Pointer to store yaw rate PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetYawRatePID(PID_t *yaw_rate_pid) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b0a6      	sub	sp, #152	@ 0x98
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fdd9 	bl	8000fd0 <EEPROM_ReadConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <EEPROM_GetYawRatePID+0x24>
        printf("Failed to read config during GetYawRatePID\r\n");
 8001424:	4809      	ldr	r0, [pc, #36]	@ (800144c <EEPROM_GetYawRatePID+0x40>)
 8001426:	f010 fb39 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800142e:	e008      	b.n	8001442 <EEPROM_GetYawRatePID+0x36>
    }
    memcpy(yaw_rate_pid, &config.yaw_rate_pid, sizeof(PID_t));
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	3370      	adds	r3, #112	@ 0x70
 8001436:	220c      	movs	r2, #12
 8001438:	4619      	mov	r1, r3
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f010 fd17 	bl	8011e6e <memcpy>
    return W25Qxx_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3798      	adds	r7, #152	@ 0x98
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	080163ec 	.word	0x080163ec

08001450 <EEPROM_SetYawRatePID>:
/**
  * @brief Set yaw rate PID values
  * @param yaw_rate_pid Pointer to yaw rate PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetYawRatePID(const PID_t *yaw_rate_pid) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b0a6      	sub	sp, #152	@ 0x98
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fdb7 	bl	8000fd0 <EEPROM_ReadConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <EEPROM_SetYawRatePID+0x24>
        printf("Failed to read config during SetYawRatePID\r\n");
 8001468:	4810      	ldr	r0, [pc, #64]	@ (80014ac <EEPROM_SetYawRatePID+0x5c>)
 800146a:	f010 fb17 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001472:	e016      	b.n	80014a2 <EEPROM_SetYawRatePID+0x52>
    }
    memcpy(&config.yaw_rate_pid, yaw_rate_pid, sizeof(PID_t));
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	3370      	adds	r3, #112	@ 0x70
 800147a:	220c      	movs	r2, #12
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4618      	mov	r0, r3
 8001480:	f010 fcf5 	bl	8011e6e <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	218c      	movs	r1, #140	@ 0x8c
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fdfc 	bl	8001088 <CalculateCRC32>
 8001490:	4603      	mov	r3, r0
 8001492:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fdd0 	bl	8001040 <EEPROM_WriteConfig>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3798      	adds	r7, #152	@ 0x98
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	08016418 	.word	0x08016418

080014b0 <EEPROM_GetAircraftLights>:
/**
  * @brief Get aircraft lights configuration
  * @param lights Pointer to store lights configuration
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetAircraftLights(AircraftLights_t *lights) {
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b0a7      	sub	sp, #156	@ 0x9c
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fd87 	bl	8000fd0 <EEPROM_ReadConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <EEPROM_GetAircraftLights+0x24>
        printf("Failed to read config during GetAircraftLights\r\n");
 80014c8:	480a      	ldr	r0, [pc, #40]	@ (80014f4 <EEPROM_GetAircraftLights+0x44>)
 80014ca:	f010 fae7 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014d2:	e00a      	b.n	80014ea <EEPROM_GetAircraftLights+0x3a>
    }
    memcpy(lights, &config.lights, sizeof(AircraftLights_t));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	461c      	mov	r4, r3
 80014d8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80014dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014de:	6020      	str	r0, [r4, #0]
 80014e0:	6061      	str	r1, [r4, #4]
 80014e2:	60a2      	str	r2, [r4, #8]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	7323      	strb	r3, [r4, #12]
    return W25Qxx_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	379c      	adds	r7, #156	@ 0x9c
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	08016444 	.word	0x08016444

080014f8 <W25Qxx_WaitForWriteEnd>:

/**
  * @brief Wait for write operation to complete
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_WaitForWriteEnd(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b096      	sub	sp, #88	@ 0x58
 80014fc:	af00      	add	r7, sp, #0
    OSPI_RegularCmdTypeDef cmd = {0};
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	2250      	movs	r2, #80	@ 0x50
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f010 fc12 	bl	8011d30 <memset>
    uint8_t status;

    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
    cmd.Instruction = W25Qxx_CMD_READ_STATUS1;
 8001510:	2305      	movs	r3, #5
 8001512:	613b      	str	r3, [r7, #16]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8001514:	2301      	movs	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	@ 0x34
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8001524:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001528:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.NbData = 1;
 800152a:	2301      	movs	r3, #1
 800152c:	647b      	str	r3, [r7, #68]	@ 0x44
    cmd.DummyCycles = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	653b      	str	r3, [r7, #80]	@ 0x50

    do {
        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153e:	4619      	mov	r1, r3
 8001540:	4812      	ldr	r0, [pc, #72]	@ (800158c <W25Qxx_WaitForWriteEnd+0x94>)
 8001542:	f008 fc1b 	bl	8009d7c <HAL_OSPI_Command>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <W25Qxx_WaitForWriteEnd+0x60>
            printf("Failed to configure read status command\r\n");
 800154c:	4810      	ldr	r0, [pc, #64]	@ (8001590 <W25Qxx_WaitForWriteEnd+0x98>)
 800154e:	f010 faa5 	bl	8011a9c <puts>
            return W25Qxx_ERROR;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001556:	e015      	b.n	8001584 <W25Qxx_WaitForWriteEnd+0x8c>
        }
        if (HAL_OSPI_Receive(&hospi1, &status, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001558:	1dfb      	adds	r3, r7, #7
 800155a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155e:	4619      	mov	r1, r3
 8001560:	480a      	ldr	r0, [pc, #40]	@ (800158c <W25Qxx_WaitForWriteEnd+0x94>)
 8001562:	f008 fd0b 	bl	8009f7c <HAL_OSPI_Receive>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <W25Qxx_WaitForWriteEnd+0x80>
            printf("Failed to read status\r\n");
 800156c:	4809      	ldr	r0, [pc, #36]	@ (8001594 <W25Qxx_WaitForWriteEnd+0x9c>)
 800156e:	f010 fa95 	bl	8011a9c <puts>
            return W25Qxx_ERROR;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001576:	e005      	b.n	8001584 <W25Qxx_WaitForWriteEnd+0x8c>
        }
    } while (status & 0x01); // Busy bit
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1d9      	bne.n	8001536 <W25Qxx_WaitForWriteEnd+0x3e>

    return W25Qxx_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3758      	adds	r7, #88	@ 0x58
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	24000544 	.word	0x24000544
 8001590:	080164a4 	.word	0x080164a4
 8001594:	080164d0 	.word	0x080164d0

08001598 <W25Qxx_Read>:
  * @param address Start address
  * @param buffer Buffer to store data
  * @param length Length of data to read
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_Read(uint32_t address, uint8_t *buffer, uint32_t length) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b098      	sub	sp, #96	@ 0x60
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
    OSPI_RegularCmdTypeDef cmd = {0};
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	2250      	movs	r2, #80	@ 0x50
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f010 fbbf 	bl	8011d30 <memset>

    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
    cmd.Instruction = W25Qxx_CMD_READ_DATA;
 80015b6:	2303      	movs	r3, #3
 80015b8:	61bb      	str	r3, [r7, #24]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
    cmd.Address = address;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80015c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 80015cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015d0:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 80015d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015da:	64bb      	str	r3, [r7, #72]	@ 0x48
    cmd.NbData = length;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DummyCycles = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	657b      	str	r3, [r7, #84]	@ 0x54
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f0:	4619      	mov	r1, r3
 80015f2:	4810      	ldr	r0, [pc, #64]	@ (8001634 <W25Qxx_Read+0x9c>)
 80015f4:	f008 fbc2 	bl	8009d7c <HAL_OSPI_Command>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <W25Qxx_Read+0x72>
        printf("Failed to configure read command\r\n");
 80015fe:	480e      	ldr	r0, [pc, #56]	@ (8001638 <W25Qxx_Read+0xa0>)
 8001600:	f010 fa4c 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001608:	e00f      	b.n	800162a <W25Qxx_Read+0x92>
    }

    if (HAL_OSPI_Receive(&hospi1, buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800160a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	4808      	ldr	r0, [pc, #32]	@ (8001634 <W25Qxx_Read+0x9c>)
 8001612:	f008 fcb3 	bl	8009f7c <HAL_OSPI_Receive>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <W25Qxx_Read+0x90>
        printf("Failed to read data\r\n");
 800161c:	4807      	ldr	r0, [pc, #28]	@ (800163c <W25Qxx_Read+0xa4>)
 800161e:	f010 fa3d 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001626:	e000      	b.n	800162a <W25Qxx_Read+0x92>
    }

    return W25Qxx_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3760      	adds	r7, #96	@ 0x60
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	24000544 	.word	0x24000544
 8001638:	080164e8 	.word	0x080164e8
 800163c:	0801650c 	.word	0x0801650c

08001640 <W25Qxx_Write>:
  * @param address Start address
  * @param buffer Pointer to data
  * @param length Length of data to write
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_Write(uint32_t address, uint8_t *buffer, uint32_t length) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b09e      	sub	sp, #120	@ 0x78
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
    OSPI_RegularCmdTypeDef cmd = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2250      	movs	r2, #80	@ 0x50
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f010 fb6b 	bl	8011d30 <memset>
    uint32_t remaining = length;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	677b      	str	r3, [r7, #116]	@ 0x74
    uint32_t current_address = address;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	673b      	str	r3, [r7, #112]	@ 0x70
    uint8_t *current_buffer = buffer;
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* Erase sector if necessary */
    uint32_t sector = address / W25Qxx_SECTOR_SIZE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	0b1b      	lsrs	r3, r3, #12
 800166a:	66bb      	str	r3, [r7, #104]	@ 0x68
    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
    cmd.Instruction = W25Qxx_CMD_WRITE_ENABLE;
 8001670:	2306      	movs	r3, #6
 8001672:	61fb      	str	r3, [r7, #28]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8001674:	2301      	movs	r3, #1
 8001676:	623b      	str	r3, [r7, #32]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 800167c:	2300      	movs	r3, #0
 800167e:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001680:	2300      	movs	r3, #0
 8001682:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.DataMode = HAL_OSPI_DATA_NONE;
 8001684:	2300      	movs	r3, #0
 8001686:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DummyCycles = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	65bb      	str	r3, [r7, #88]	@ 0x58
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001698:	4619      	mov	r1, r3
 800169a:	484f      	ldr	r0, [pc, #316]	@ (80017d8 <W25Qxx_Write+0x198>)
 800169c:	f008 fb6e 	bl	8009d7c <HAL_OSPI_Command>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <W25Qxx_Write+0x72>
        printf("Failed to enable write for sector erase\r\n");
 80016a6:	484d      	ldr	r0, [pc, #308]	@ (80017dc <W25Qxx_Write+0x19c>)
 80016a8:	f010 f9f8 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016b0:	e08e      	b.n	80017d0 <W25Qxx_Write+0x190>
    }

    cmd.Instruction = W25Qxx_CMD_SECTOR_ERASE;
 80016b2:	2320      	movs	r3, #32
 80016b4:	61fb      	str	r3, [r7, #28]
    cmd.Address = sector * W25Qxx_SECTOR_SIZE;
 80016b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016b8:	031b      	lsls	r3, r3, #12
 80016ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80016bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016c0:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 80016c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c6:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d0:	4619      	mov	r1, r3
 80016d2:	4841      	ldr	r0, [pc, #260]	@ (80017d8 <W25Qxx_Write+0x198>)
 80016d4:	f008 fb52 	bl	8009d7c <HAL_OSPI_Command>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <W25Qxx_Write+0xaa>
        printf("Failed to erase sector\r\n");
 80016de:	4840      	ldr	r0, [pc, #256]	@ (80017e0 <W25Qxx_Write+0x1a0>)
 80016e0:	f010 f9dc 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016e8:	e072      	b.n	80017d0 <W25Qxx_Write+0x190>
    }

    if (W25Qxx_WaitForWriteEnd() != W25Qxx_OK) {
 80016ea:	f7ff ff05 	bl	80014f8 <W25Qxx_WaitForWriteEnd>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d069      	beq.n	80017c8 <W25Qxx_Write+0x188>
        printf("Timeout waiting for sector erase\r\n");
 80016f4:	483b      	ldr	r0, [pc, #236]	@ (80017e4 <W25Qxx_Write+0x1a4>)
 80016f6:	f010 f9d1 	bl	8011a9c <puts>
        return W25Qxx_ERROR;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016fe:	e067      	b.n	80017d0 <W25Qxx_Write+0x190>
    }

    /* Write data in pages */
    while (remaining > 0) {
        uint32_t page_size = (remaining > W25Qxx_PAGE_SIZE) ? W25Qxx_PAGE_SIZE : remaining;
 8001700:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001706:	bf28      	it	cs
 8001708:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800170c:	667b      	str	r3, [r7, #100]	@ 0x64

        cmd.Instruction = W25Qxx_CMD_WRITE_ENABLE;
 800170e:	2306      	movs	r3, #6
 8001710:	61fb      	str	r3, [r7, #28]
        cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8001712:	2300      	movs	r3, #0
 8001714:	633b      	str	r3, [r7, #48]	@ 0x30
        cmd.DataMode = HAL_OSPI_DATA_NONE;
 8001716:	2300      	movs	r3, #0
 8001718:	64fb      	str	r3, [r7, #76]	@ 0x4c

        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001722:	4619      	mov	r1, r3
 8001724:	482c      	ldr	r0, [pc, #176]	@ (80017d8 <W25Qxx_Write+0x198>)
 8001726:	f008 fb29 	bl	8009d7c <HAL_OSPI_Command>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <W25Qxx_Write+0xfc>
            printf("Failed to enable write for page program\r\n");
 8001730:	482d      	ldr	r0, [pc, #180]	@ (80017e8 <W25Qxx_Write+0x1a8>)
 8001732:	f010 f9b3 	bl	8011a9c <puts>
            return W25Qxx_ERROR;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800173a:	e049      	b.n	80017d0 <W25Qxx_Write+0x190>
        }

        cmd.Instruction = W25Qxx_CMD_PAGE_PROGRAM;
 800173c:	2302      	movs	r3, #2
 800173e:	61fb      	str	r3, [r7, #28]
        cmd.Address = current_address;
 8001740:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
        cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8001744:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001748:	633b      	str	r3, [r7, #48]	@ 0x30
        cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 800174a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800174e:	637b      	str	r3, [r7, #52]	@ 0x34
        cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8001750:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001754:	64fb      	str	r3, [r7, #76]	@ 0x4c
        cmd.NbData = page_size;
 8001756:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001758:	653b      	str	r3, [r7, #80]	@ 0x50

        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001762:	4619      	mov	r1, r3
 8001764:	481c      	ldr	r0, [pc, #112]	@ (80017d8 <W25Qxx_Write+0x198>)
 8001766:	f008 fb09 	bl	8009d7c <HAL_OSPI_Command>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <W25Qxx_Write+0x13c>
            printf("Failed to configure page program command\r\n");
 8001770:	481e      	ldr	r0, [pc, #120]	@ (80017ec <W25Qxx_Write+0x1ac>)
 8001772:	f010 f993 	bl	8011a9c <puts>
            return W25Qxx_ERROR;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800177a:	e029      	b.n	80017d0 <W25Qxx_Write+0x190>
        }

        if (HAL_OSPI_Transmit(&hospi1, current_buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800177c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001780:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001782:	4815      	ldr	r0, [pc, #84]	@ (80017d8 <W25Qxx_Write+0x198>)
 8001784:	f008 fb87 	bl	8009e96 <HAL_OSPI_Transmit>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <W25Qxx_Write+0x15a>
            printf("Failed to write page data\r\n");
 800178e:	4818      	ldr	r0, [pc, #96]	@ (80017f0 <W25Qxx_Write+0x1b0>)
 8001790:	f010 f984 	bl	8011a9c <puts>
            return W25Qxx_ERROR;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001798:	e01a      	b.n	80017d0 <W25Qxx_Write+0x190>
        }

        if (W25Qxx_WaitForWriteEnd() != W25Qxx_OK) {
 800179a:	f7ff fead 	bl	80014f8 <W25Qxx_WaitForWriteEnd>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <W25Qxx_Write+0x170>
            printf("Timeout waiting for page write\r\n");
 80017a4:	4813      	ldr	r0, [pc, #76]	@ (80017f4 <W25Qxx_Write+0x1b4>)
 80017a6:	f010 f979 	bl	8011a9c <puts>
            return W25Qxx_ERROR;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ae:	e00f      	b.n	80017d0 <W25Qxx_Write+0x190>
        }

        remaining -= page_size;
 80017b0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80017b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	677b      	str	r3, [r7, #116]	@ 0x74
        current_address += page_size;
 80017b8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80017ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017bc:	4413      	add	r3, r2
 80017be:	673b      	str	r3, [r7, #112]	@ 0x70
        current_buffer += page_size;
 80017c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80017c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017c4:	4413      	add	r3, r2
 80017c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    while (remaining > 0) {
 80017c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d198      	bne.n	8001700 <W25Qxx_Write+0xc0>
    }

    return W25Qxx_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3778      	adds	r7, #120	@ 0x78
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	24000544 	.word	0x24000544
 80017dc:	08016524 	.word	0x08016524
 80017e0:	08016550 	.word	0x08016550
 80017e4:	08016568 	.word	0x08016568
 80017e8:	0801658c 	.word	0x0801658c
 80017ec:	080165b8 	.word	0x080165b8
 80017f0:	080165e4 	.word	0x080165e4
 80017f4:	08016600 	.word	0x08016600

080017f8 <HMC5883L_WriteReg>:
static volatile uint8_t i2c_error = 0;
static uint32_t last_reset_time = 0;
static uint8_t reset_attempts = 0;
static const uint8_t max_reset_attempts = 5;

static void HMC5883L_WriteReg(uint8_t reg, uint8_t value) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	4603      	mov	r3, r0
 8001800:	460a      	mov	r2, r1
 8001802:	71fb      	strb	r3, [r7, #7]
 8001804:	4613      	mov	r3, r2
 8001806:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, value};
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	733b      	strb	r3, [r7, #12]
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, tx_data, 2, 100);
 8001810:	f107 020c 	add.w	r2, r7, #12
 8001814:	2364      	movs	r3, #100	@ 0x64
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2302      	movs	r3, #2
 800181a:	213c      	movs	r1, #60	@ 0x3c
 800181c:	4803      	ldr	r0, [pc, #12]	@ (800182c <HMC5883L_WriteReg+0x34>)
 800181e:	f006 fdcb 	bl	80083b8 <HAL_I2C_Master_Transmit>
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	24000384 	.word	0x24000384

08001830 <HMC5883L_ReadReg>:

uint8_t HMC5883L_ReadReg(uint8_t reg) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af02      	add	r7, sp, #8
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, &reg, 1, 100);
 800183a:	1dfa      	adds	r2, r7, #7
 800183c:	2364      	movs	r3, #100	@ 0x64
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2301      	movs	r3, #1
 8001842:	213c      	movs	r1, #60	@ 0x3c
 8001844:	4808      	ldr	r0, [pc, #32]	@ (8001868 <HMC5883L_ReadReg+0x38>)
 8001846:	f006 fdb7 	bl	80083b8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, HMC5883L_ADDR, &rx_data, 1, 100);
 800184a:	f107 020f 	add.w	r2, r7, #15
 800184e:	2364      	movs	r3, #100	@ 0x64
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2301      	movs	r3, #1
 8001854:	213c      	movs	r1, #60	@ 0x3c
 8001856:	4804      	ldr	r0, [pc, #16]	@ (8001868 <HMC5883L_ReadReg+0x38>)
 8001858:	f006 fec6 	bl	80085e8 <HAL_I2C_Master_Receive>
    return rx_data;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	24000384 	.word	0x24000384

0800186c <HMC5883L_Init>:

void HMC5883L_Init(void) {
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x80); // Soft reset
 8001870:	2180      	movs	r1, #128	@ 0x80
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff ffc0 	bl	80017f8 <HMC5883L_WriteReg>
    HAL_Delay(100);
 8001878:	2064      	movs	r0, #100	@ 0x64
 800187a:	f003 fe51 	bl	8005520 <HAL_Delay>
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x78); // 8-avg, 75 Hz, normal mode
 800187e:	2178      	movs	r1, #120	@ 0x78
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff ffb9 	bl	80017f8 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_CONFIG_B, 0x20); // ±1.3 Gauss
 8001886:	2120      	movs	r1, #32
 8001888:	2001      	movs	r0, #1
 800188a:	f7ff ffb5 	bl	80017f8 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_MODE, 0x00);     // Continuous mode
 800188e:	2100      	movs	r1, #0
 8001890:	2002      	movs	r0, #2
 8001892:	f7ff ffb1 	bl	80017f8 <HMC5883L_WriteReg>
    HAL_Delay(10);
 8001896:	200a      	movs	r0, #10
 8001898:	f003 fe42 	bl	8005520 <HAL_Delay>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	601a      	str	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 0201 	bic.w	r2, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	601a      	str	r2, [r3, #0]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_SPI_SetMode>:
  *         @arg @ref LL_SPI_MODE_MASTER
  *         @arg @ref LL_SPI_MODE_SLAVE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetMode(SPI_TypeDef *SPIx, uint32_t Mode)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_MASTER, Mode);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60da      	str	r2, [r3, #12]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <LL_SPI_StartMasterTransfer>:
  * @rmtoll CR1          CSTART        LL_SPI_StartMasterTransfer
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_StartMasterTransfer(SPI_TypeDef *SPIx)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	601a      	str	r2, [r3, #0]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_SPI_SetClockPhase>:
  *         @arg @ref LL_SPI_PHASE_1EDGE
  *         @arg @ref LL_SPI_PHASE_2EDGE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPhase(SPI_TypeDef *SPIx, uint32_t ClockPhase)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_CPHA, ClockPhase);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	60da      	str	r2, [r3, #12]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_SPI_SetClockPolarity>:
  *         @arg @ref LL_SPI_POLARITY_LOW
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_CPOL, ClockPolarity);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60da      	str	r2, [r3, #12]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t Baudrate)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR, Baudrate);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_SPI_SetTransferBitOrder>:
  *         @arg @ref LL_SPI_LSB_FIRST
  *         @arg @ref LL_SPI_MSB_FIRST
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferBitOrder(SPI_TypeDef *SPIx, uint32_t BitOrder)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_LSBFRST, BitOrder);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60da      	str	r2, [r3, #12]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_SPI_SetTransferDirection>:
  *         @arg @ref LL_SPI_HALF_DUPLEX_RX
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR,  TransferDirection & SPI_CR1_HDDIR);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_COMM, TransferDirection & SPI_CFG2_COMM);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_SPI_SetDataWidth>:
  *         @arg @ref LL_SPI_DATAWIDTH_31BIT
  *         @arg @ref LL_SPI_DATAWIDTH_32BIT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetDataWidth(SPI_TypeDef *SPIx, uint32_t DataWidth)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_DSIZE, DataWidth);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f023 021f 	bic.w	r2, r3, #31
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	609a      	str	r2, [r3, #8]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_SPI_SetFIFOThreshold>:
  *         @arg @ref LL_SPI_FIFO_TH_15DATA
  *         @arg @ref LL_SPI_FIFO_TH_16DATA
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_SPI_SetNSSMode>:
  *         @arg @ref LL_SPI_NSS_HARD_INPUT
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM | SPI_CFG2_SSOE, NSS);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f023 5210 	bic.w	r2, r3, #603979776	@ 0x24000000
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60da      	str	r2, [r3, #12]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_SPI_IsActiveFlag_RXP>:
  * @rmtoll SR           RXP           LL_SPI_IsActiveFlag_RXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXP(const SPI_TypeDef *SPIx)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <LL_SPI_IsActiveFlag_RXP+0x18>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <LL_SPI_IsActiveFlag_RXP+0x1a>
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_SPI_IsActiveFlag_TXP>:
  * @rmtoll SR           TXP           LL_SPI_IsActiveFlag_TXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXP(const SPI_TypeDef *SPIx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d101      	bne.n	8001aac <LL_SPI_IsActiveFlag_TXP+0x18>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <LL_SPI_IsActiveFlag_TXP+0x1a>
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_SPI_ReceiveData8>:
  * @rmtoll RXDR         .       LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval 0..0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3330      	adds	r3, #48	@ 0x30
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b2db      	uxtb	r3, r3
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3320      	adds	r3, #32
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	701a      	strb	r2, [r3, #0]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8001b00:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <LL_AHB4_GRP1_EnableClock+0x34>)
 8001b02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b06:	4909      	ldr	r1, [pc, #36]	@ (8001b2c <LL_AHB4_GRP1_EnableClock+0x34>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <LL_AHB4_GRP1_EnableClock+0x34>)
 8001b12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	58024400 	.word	0x58024400

08001b30 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8001b38:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <LL_APB1_GRP1_EnableClock+0x34>)
 8001b3a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001b3e:	4909      	ldr	r1, [pc, #36]	@ (8001b64 <LL_APB1_GRP1_EnableClock+0x34>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <LL_APB1_GRP1_EnableClock+0x34>)
 8001b4a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4013      	ands	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b54:	68fb      	ldr	r3, [r7, #12]
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	58024400 	.word	0x58024400

08001b68 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(const GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d101      	bne.n	8001b84 <LL_GPIO_IsInputPinSet+0x1c>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <LL_GPIO_IsInputPinSet+0x1e>
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	619a      	str	r2, [r3, #24]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	041a      	lsls	r2, r3, #16
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <ICM42688P_GPIO_SPI_Initialization>:
    if (value < -2048) return -2048;
    return (int16_t)value;
}

void ICM42688P_GPIO_SPI_Initialization(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b090      	sub	sp, #64	@ 0x40
 8001bd0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001bd2:	f107 0318 	add.w	r3, r7, #24
 8001bd6:	2228      	movs	r2, #40	@ 0x28
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f010 f8a8 	bl	8011d30 <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	463b      	mov	r3, r7
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]
 8001bee:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable for STM32H7 */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001bf0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001bf4:	f7ff ff9c 	bl	8001b30 <LL_APB1_GRP1_EnableClock>

	/* GPIO clock enable for STM32H7 */
	LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f7ff ff7d 	bl	8001af8 <LL_AHB4_GRP1_EnableClock>
	LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8001bfe:	2004      	movs	r0, #4
 8001c00:	f7ff ff7a 	bl	8001af8 <LL_AHB4_GRP1_EnableClock>
	/**SPI3 GPIO Configuration for STM32H7
	 * PC10  ------> SPI3_SCK
	 * PC11  ------> SPI3_MISO
	 * PC12  ------> SPI3_MOSI
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001c04:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001c08:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6; // SPI3 alternate function for STM32H7
 8001c1a:	2306      	movs	r3, #6
 8001c1c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1e:	463b      	mov	r3, r7
 8001c20:	4619      	mov	r1, r3
 8001c22:	4830      	ldr	r0, [pc, #192]	@ (8001ce4 <ICM42688P_GPIO_SPI_Initialization+0x118>)
 8001c24:	f00d fa50 	bl	800f0c8 <LL_GPIO_Init>
	 * PA15  ------> ICM42688P_SPI_CS_PIN (output)
	 * PC8   ------> ICM42688P_INT1_PIN (input)
	 */

	/* Chip Select Pin */
	LL_GPIO_SetOutputPin(ICM42688P_SPI_CS_PORT, ICM42688P_SPI_CS_PIN); // Start with CS high
 8001c28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c2c:	482e      	ldr	r0, [pc, #184]	@ (8001ce8 <ICM42688P_GPIO_SPI_Initialization+0x11c>)
 8001c2e:	f7ff ffb0 	bl	8001b92 <LL_GPIO_SetOutputPin>

	GPIO_InitStruct.Pin = ICM42688P_SPI_CS_PIN;
 8001c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c36:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688P_SPI_CS_PORT, &GPIO_InitStruct);
 8001c48:	463b      	mov	r3, r7
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4826      	ldr	r0, [pc, #152]	@ (8001ce8 <ICM42688P_GPIO_SPI_Initialization+0x11c>)
 8001c4e:	f00d fa3b 	bl	800f0c8 <LL_GPIO_Init>

	/* Interrupt Pin */
	GPIO_InitStruct.Pin = ICM42688P_INT1_PIN;
 8001c52:	2310      	movs	r3, #16
 8001c54:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688P_INT1_PORT, &GPIO_InitStruct);
 8001c5e:	463b      	mov	r3, r7
 8001c60:	4619      	mov	r1, r3
 8001c62:	4822      	ldr	r0, [pc, #136]	@ (8001cec <ICM42688P_GPIO_SPI_Initialization+0x120>)
 8001c64:	f00d fa30 	bl	800f0c8 <LL_GPIO_Init>

	/* STM32H7 SPI3 configuration - Fixed for proper LL driver usage */
	// Disable SPI first
	LL_SPI_Disable(ICM42688P_SPI_CHANNEL);
 8001c68:	4821      	ldr	r0, [pc, #132]	@ (8001cf0 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001c6a:	f7ff fe29 	bl	80018c0 <LL_SPI_Disable>

	// Configure SPI3 - STM32H7 style
	LL_SPI_SetBaudRatePrescaler(ICM42688P_SPI_CHANNEL, LL_SPI_BAUDRATEPRESCALER_DIV8);
 8001c6e:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
 8001c72:	481f      	ldr	r0, [pc, #124]	@ (8001cf0 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001c74:	f7ff fe7d 	bl	8001972 <LL_SPI_SetBaudRatePrescaler>
	LL_SPI_SetTransferDirection(ICM42688P_SPI_CHANNEL, LL_SPI_FULL_DUPLEX);
 8001c78:	2100      	movs	r1, #0
 8001c7a:	481d      	ldr	r0, [pc, #116]	@ (8001cf0 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001c7c:	f7ff fe9f 	bl	80019be <LL_SPI_SetTransferDirection>
	LL_SPI_SetClockPhase(ICM42688P_SPI_CHANNEL, LL_SPI_PHASE_2EDGE);
 8001c80:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001c84:	481a      	ldr	r0, [pc, #104]	@ (8001cf0 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001c86:	f7ff fe4e 	bl	8001926 <LL_SPI_SetClockPhase>
	LL_SPI_SetClockPolarity(ICM42688P_SPI_CHANNEL, LL_SPI_POLARITY_HIGH);
 8001c8a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c8e:	4818      	ldr	r0, [pc, #96]	@ (8001cf0 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001c90:	f7ff fe5c 	bl	800194c <LL_SPI_SetClockPolarity>
	LL_SPI_SetTransferBitOrder(ICM42688P_SPI_CHANNEL, LL_SPI_MSB_FIRST);
 8001c94:	2100      	movs	r1, #0
 8001c96:	4816      	ldr	r0, [pc, #88]	@ (8001cf0 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001c98:	f7ff fe7e 	bl	8001998 <LL_SPI_SetTransferBitOrder>
	LL_SPI_SetDataWidth(ICM42688P_SPI_CHANNEL, LL_SPI_DATAWIDTH_8BIT);
 8001c9c:	2107      	movs	r1, #7
 8001c9e:	4814      	ldr	r0, [pc, #80]	@ (8001cf0 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001ca0:	f7ff feac 	bl	80019fc <LL_SPI_SetDataWidth>
	LL_SPI_SetNSSMode(ICM42688P_SPI_CHANNEL, LL_SPI_NSS_SOFT);
 8001ca4:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001ca8:	4811      	ldr	r0, [pc, #68]	@ (8001cf0 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001caa:	f7ff fecd 	bl	8001a48 <LL_SPI_SetNSSMode>
	LL_SPI_SetMode(ICM42688P_SPI_CHANNEL, LL_SPI_MODE_MASTER);
 8001cae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001cb2:	480f      	ldr	r0, [pc, #60]	@ (8001cf0 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001cb4:	f7ff fe14 	bl	80018e0 <LL_SPI_SetMode>

	// STM32H7 specific settings
	LL_SPI_SetFIFOThreshold(ICM42688P_SPI_CHANNEL, LL_SPI_FIFO_TH_01DATA);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	480d      	ldr	r0, [pc, #52]	@ (8001cf0 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001cbc:	f7ff feb1 	bl	8001a22 <LL_SPI_SetFIFOThreshold>

	// Enable SPI
	LL_SPI_Enable(ICM42688P_SPI_CHANNEL);
 8001cc0:	480b      	ldr	r0, [pc, #44]	@ (8001cf0 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001cc2:	f7ff fded 	bl	80018a0 <LL_SPI_Enable>

	// Start SPI (STM32H7 requirement)
	LL_SPI_StartMasterTransfer(ICM42688P_SPI_CHANNEL);
 8001cc6:	480a      	ldr	r0, [pc, #40]	@ (8001cf0 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001cc8:	f7ff fe1d 	bl	8001906 <LL_SPI_StartMasterTransfer>

	CHIP_DESELECT(ICM42688P);
 8001ccc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cd0:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <ICM42688P_GPIO_SPI_Initialization+0x11c>)
 8001cd2:	f7ff ff5e 	bl	8001b92 <LL_GPIO_SetOutputPin>

	printf("SPI3 initialized for STM32H7\n");
 8001cd6:	4807      	ldr	r0, [pc, #28]	@ (8001cf4 <ICM42688P_GPIO_SPI_Initialization+0x128>)
 8001cd8:	f00f fee0 	bl	8011a9c <puts>
}
 8001cdc:	bf00      	nop
 8001cde:	3740      	adds	r7, #64	@ 0x40
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	58020800 	.word	0x58020800
 8001ce8:	58020000 	.word	0x58020000
 8001cec:	58021000 	.word	0x58021000
 8001cf0:	40003c00 	.word	0x40003c00
 8001cf4:	08016620 	.word	0x08016620

08001cf8 <ICM42688P_SelectBank>:

// ====== BANK SELECT ======
void ICM42688P_SelectBank(uint8_t bank)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
	printf("Selecting bank %d\n", bank);
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	4619      	mov	r1, r3
 8001d06:	4807      	ldr	r0, [pc, #28]	@ (8001d24 <ICM42688P_SelectBank+0x2c>)
 8001d08:	f00f fe58 	bl	80119bc <iprintf>
	ICM42688P_WriteByte(ICM42688P_REG_BANK_SEL, bank);
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	2076      	movs	r0, #118	@ 0x76
 8001d12:	f000 f87d 	bl	8001e10 <ICM42688P_WriteByte>
	HAL_Delay(1); // Small delay after bank selection
 8001d16:	2001      	movs	r0, #1
 8001d18:	f003 fc02 	bl	8005520 <HAL_Delay>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	08016640 	.word	0x08016640

08001d28 <SPI3_SendByte>:

uint8_t SPI3_SendByte(uint8_t data)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXP(ICM42688P_SPI_CHANNEL)==RESET);
 8001d32:	bf00      	nop
 8001d34:	480c      	ldr	r0, [pc, #48]	@ (8001d68 <SPI3_SendByte+0x40>)
 8001d36:	f7ff fead 	bl	8001a94 <LL_SPI_IsActiveFlag_TXP>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f9      	beq.n	8001d34 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(ICM42688P_SPI_CHANNEL, data);
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	4619      	mov	r1, r3
 8001d44:	4808      	ldr	r0, [pc, #32]	@ (8001d68 <SPI3_SendByte+0x40>)
 8001d46:	f7ff fec6 	bl	8001ad6 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXP(ICM42688P_SPI_CHANNEL)==RESET);
 8001d4a:	bf00      	nop
 8001d4c:	4806      	ldr	r0, [pc, #24]	@ (8001d68 <SPI3_SendByte+0x40>)
 8001d4e:	f7ff fe8e 	bl	8001a6e <LL_SPI_IsActiveFlag_RXP>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f9      	beq.n	8001d4c <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM42688P_SPI_CHANNEL);
 8001d58:	4803      	ldr	r0, [pc, #12]	@ (8001d68 <SPI3_SendByte+0x40>)
 8001d5a:	f7ff feae 	bl	8001aba <LL_SPI_ReceiveData8>
 8001d5e:	4603      	mov	r3, r0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40003c00 	.word	0x40003c00

08001d6c <ICM42688P_ReadByte>:
//	ICM42688P_WriteByte(ICM42688P_REG_BANK_SEL, bank);
//	HAL_Delay(1); // Small delay after bank selection
//}

uint8_t ICM42688P_ReadByte(uint8_t reg_addr)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM42688P);
 8001d76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d7a:	480c      	ldr	r0, [pc, #48]	@ (8001dac <ICM42688P_ReadByte+0x40>)
 8001d7c:	f7ff ff17 	bl	8001bae <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ffcd 	bl	8001d28 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY to read data
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f7ff ffca 	bl	8001d28 <SPI3_SendByte>
 8001d94:	4603      	mov	r3, r0
 8001d96:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM42688P);
 8001d98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d9c:	4803      	ldr	r0, [pc, #12]	@ (8001dac <ICM42688P_ReadByte+0x40>)
 8001d9e:	f7ff fef8 	bl	8001b92 <LL_GPIO_SetOutputPin>

//	printf("0x%02x\n", val);
	return val;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	58020000 	.word	0x58020000

08001db0 <ICM42688P_ReadBytes>:

void ICM42688P_ReadBytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	603a      	str	r2, [r7, #0]
 8001dba:	71fb      	strb	r3, [r7, #7]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM42688P);
 8001dc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dc8:	4810      	ldr	r0, [pc, #64]	@ (8001e0c <ICM42688P_ReadBytes+0x5c>)
 8001dca:	f7ff fef0 	bl	8001bae <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ffa6 	bl	8001d28 <SPI3_SendByte>
	while(i < len)
 8001ddc:	e009      	b.n	8001df2 <ICM42688P_ReadBytes+0x42>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY to read data
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	60fa      	str	r2, [r7, #12]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	18d4      	adds	r4, r2, r3
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff ff9d 	bl	8001d28 <SPI3_SendByte>
 8001dee:	4603      	mov	r3, r0
 8001df0:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8001df2:	79bb      	ldrb	r3, [r7, #6]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3f1      	bcc.n	8001dde <ICM42688P_ReadBytes+0x2e>
	}
	CHIP_DESELECT(ICM42688P);
 8001dfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dfe:	4803      	ldr	r0, [pc, #12]	@ (8001e0c <ICM42688P_ReadBytes+0x5c>)
 8001e00:	f7ff fec7 	bl	8001b92 <LL_GPIO_SetOutputPin>
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd90      	pop	{r4, r7, pc}
 8001e0c:	58020000 	.word	0x58020000

08001e10 <ICM42688P_WriteByte>:

void ICM42688P_WriteByte(uint8_t reg_addr, uint8_t val)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	460a      	mov	r2, r1
 8001e1a:	71fb      	strb	r3, [r7, #7]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM42688P);
 8001e20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e24:	480b      	ldr	r0, [pc, #44]	@ (8001e54 <ICM42688P_WriteByte+0x44>)
 8001e26:	f7ff fec2 	bl	8001bae <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff78 	bl	8001d28 <SPI3_SendByte>
	SPI3_SendByte(val); //Send Data to write
 8001e38:	79bb      	ldrb	r3, [r7, #6]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff74 	bl	8001d28 <SPI3_SendByte>
	CHIP_DESELECT(ICM42688P);
 8001e40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e44:	4803      	ldr	r0, [pc, #12]	@ (8001e54 <ICM42688P_WriteByte+0x44>)
 8001e46:	f7ff fea4 	bl	8001b92 <LL_GPIO_SetOutputPin>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	58020000 	.word	0x58020000

08001e58 <ICM42688P_Initialization>:
	}
	CHIP_DESELECT(ICM42688P);
}

int ICM42688P_Initialization(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
	uint8_t who_am_i = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	809a      	strh	r2, [r3, #4]

	ICM42688P_GPIO_SPI_Initialization();
 8001e74:	f7ff feaa 	bl	8001bcc <ICM42688P_GPIO_SPI_Initialization>

	printf("Checking ICM42688P...\n");
 8001e78:	483f      	ldr	r0, [pc, #252]	@ (8001f78 <ICM42688P_Initialization+0x120>)
 8001e7a:	f00f fe0f 	bl	8011a9c <puts>

	// check WHO_AM_I (0x75)
	who_am_i = ICM42688P_ReadByte(ICM42688P_WHO_AM_I);
 8001e7e:	2075      	movs	r0, #117	@ 0x75
 8001e80:	f7ff ff74 	bl	8001d6c <ICM42688P_ReadByte>
 8001e84:	4603      	mov	r3, r0
 8001e86:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x47
	if(who_am_i == 0x47)
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	2b47      	cmp	r3, #71	@ 0x47
 8001e8c:	d105      	bne.n	8001e9a <ICM42688P_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	4619      	mov	r1, r3
 8001e92:	483a      	ldr	r0, [pc, #232]	@ (8001f7c <ICM42688P_Initialization+0x124>)
 8001e94:	f00f fd92 	bl	80119bc <iprintf>
 8001e98:	e012      	b.n	8001ec0 <ICM42688P_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x47)
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	2b47      	cmp	r3, #71	@ 0x47
 8001e9e:	d00f      	beq.n	8001ec0 <ICM42688P_Initialization+0x68>
	{
		who_am_i = ICM42688P_ReadByte(ICM42688P_WHO_AM_I); // check again WHO_AM_I (0x75)
 8001ea0:	2075      	movs	r0, #117	@ 0x75
 8001ea2:	f7ff ff63 	bl	8001d6c <ICM42688P_ReadByte>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x47){
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	2b47      	cmp	r3, #71	@ 0x47
 8001eae:	d007      	beq.n	8001ec0 <ICM42688P_Initialization+0x68>
			printf( "ICM42688P Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x47);
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	2247      	movs	r2, #71	@ 0x47
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4832      	ldr	r0, [pc, #200]	@ (8001f80 <ICM42688P_Initialization+0x128>)
 8001eb8:	f00f fd80 	bl	80119bc <iprintf>
			return 1; //ERROR
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e056      	b.n	8001f6e <ICM42688P_Initialization+0x116>
		}
	}

	// Reset ICM42688P
	// DEVICE_CONFIG 0x11
	ICM42688P_WriteByte(ICM42688P_DEVICE_CONFIG, 0x01); // Software reset
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	2011      	movs	r0, #17
 8001ec4:	f7ff ffa4 	bl	8001e10 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001ec8:	2032      	movs	r0, #50	@ 0x32
 8001eca:	f003 fb29 	bl	8005520 <HAL_Delay>

	// Wait for reset to complete and switch to user bank 0
	ICM42688P_SelectBank(ICM42688P_BANK_SEL_0); // Select user bank 0
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7ff ff12 	bl	8001cf8 <ICM42688P_SelectBank>
	HAL_Delay(10);
 8001ed4:	200a      	movs	r0, #10
 8001ed6:	f003 fb23 	bl	8005520 <HAL_Delay>

	// PWR_MGMT0 0x4E - Main power management
	// Enable Gyro and Accel in Low Noise mode, keep temperature sensor enabled
	ICM42688P_WriteByte(ICM42688P_PWR_MGMT0, ICM42688P_PWR_MGMT0_GYRO_MODE_LN | ICM42688P_PWR_MGMT0_ACCEL_MODE_LN);
 8001eda:	210f      	movs	r1, #15
 8001edc:	204e      	movs	r0, #78	@ 0x4e
 8001ede:	f7ff ff97 	bl	8001e10 <ICM42688P_WriteByte>
	// 온도센서 끄면 자이로 값 이상하게 출력됨 (same as original comment)
	HAL_Delay(50);
 8001ee2:	2032      	movs	r0, #50	@ 0x32
 8001ee4:	f003 fb1c 	bl	8005520 <HAL_Delay>

	// GYRO_CONFIG0 0x4F - Gyro configuration
	// Set Gyro to ±2000dps and 1kHz ODR (equivalent to original 2000dps setting)
	ICM42688P_WriteByte(ICM42688P_GYRO_CONFIG0, (ICM42688P_GYRO_FS_SEL_2000DPS << 5) | ICM42688P_ODR_4KHZ);
 8001ee8:	2104      	movs	r1, #4
 8001eea:	204f      	movs	r0, #79	@ 0x4f
 8001eec:	f7ff ff90 	bl	8001e10 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001ef0:	2032      	movs	r0, #50	@ 0x32
 8001ef2:	f003 fb15 	bl	8005520 <HAL_Delay>

	// ACCEL_CONFIG0 0x50 - Accelerometer configuration
	// Set Accel to ±16g and 1kHz ODR (equivalent to original 16g setting)
	ICM42688P_WriteByte(ICM42688P_ACCEL_CONFIG0, (ICM42688P_ACCEL_FS_SEL_16G << 5) | ICM42688P_ODR_4KHZ);
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	2050      	movs	r0, #80	@ 0x50
 8001efa:	f7ff ff89 	bl	8001e10 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001efe:	2032      	movs	r0, #50	@ 0x32
 8001f00:	f003 fb0e 	bl	8005520 <HAL_Delay>

	// GYRO_CONFIG1 0x51 - Gyro filter configuration
	// Enable gyro DLPF with low-pass filter (equivalent to original 20Hz filter)
	ICM42688P_WriteByte(ICM42688P_GYRO_CONFIG1, 0x16); // DLPF enabled, ~53Hz bandwidth at 1kHz ODR
 8001f04:	2116      	movs	r1, #22
 8001f06:	2051      	movs	r0, #81	@ 0x51
 8001f08:	f7ff ff82 	bl	8001e10 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f0c:	2032      	movs	r0, #50	@ 0x32
 8001f0e:	f003 fb07 	bl	8005520 <HAL_Delay>

	// ACCEL_CONFIG1 0x53 - Accel filter configuration
	// Enable accel DLPF with low-pass filter (equivalent to original 44.8Hz filter)
	ICM42688P_WriteByte(ICM42688P_ACCEL_CONFIG1, 0x15); // DLPF enabled, ~53Hz bandwidth at 1kHz ODR
 8001f12:	2115      	movs	r1, #21
 8001f14:	2053      	movs	r0, #83	@ 0x53
 8001f16:	f7ff ff7b 	bl	8001e10 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f1a:	2032      	movs	r0, #50	@ 0x32
 8001f1c:	f003 fb00 	bl	8005520 <HAL_Delay>

	// TMST_CONFIG 0x54 - Timestamp configuration (optional)
	ICM42688P_WriteByte(ICM42688P_TMST_CONFIG, 0x23); // Enable timestamp, 1kHz resolution
 8001f20:	2123      	movs	r1, #35	@ 0x23
 8001f22:	2054      	movs	r0, #84	@ 0x54
 8001f24:	f7ff ff74 	bl	8001e10 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f28:	2032      	movs	r0, #50	@ 0x32
 8001f2a:	f003 faf9 	bl	8005520 <HAL_Delay>

	// FIFO_CONFIG 0x16 - FIFO configuration (disable for this setup, equivalent to original)
	ICM42688P_WriteByte(ICM42688P_FIFO_CONFIG, 0x00); // FIFO bypass mode
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2016      	movs	r0, #22
 8001f32:	f7ff ff6d 	bl	8001e10 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f36:	2032      	movs	r0, #50	@ 0x32
 8001f38:	f003 faf2 	bl	8005520 <HAL_Delay>

	// INT_CONFIG 0x14 - Interrupt configuration
	ICM42688P_WriteByte(ICM42688P_INT_CONFIG, 0x12); // INT1 push-pull, active high, pulse mode
 8001f3c:	2112      	movs	r1, #18
 8001f3e:	2014      	movs	r0, #20
 8001f40:	f7ff ff66 	bl	8001e10 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f44:	2032      	movs	r0, #50	@ 0x32
 8001f46:	f003 faeb 	bl	8005520 <HAL_Delay>

	// INT_CONFIG1 0x64 - Additional interrupt configuration
	ICM42688P_WriteByte(ICM42688P_INT_CONFIG1, 0x00); // Default settings
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2064      	movs	r0, #100	@ 0x64
 8001f4e:	f7ff ff5f 	bl	8001e10 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f52:	2032      	movs	r0, #50	@ 0x32
 8001f54:	f003 fae4 	bl	8005520 <HAL_Delay>

	// INT_SOURCE0 0x65 - Enable data ready interrupt (equivalent to original INT_ENABLE)
	ICM42688P_WriteByte(ICM42688P_INT_SOURCE0, 0x18); // Enable UI data ready interrupt for INT1
 8001f58:	2118      	movs	r1, #24
 8001f5a:	2065      	movs	r0, #101	@ 0x65
 8001f5c:	f7ff ff58 	bl	8001e10 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001f60:	2032      	movs	r0, #50	@ 0x32
 8001f62:	f003 fadd 	bl	8005520 <HAL_Delay>

	printf("ICM42688P initialized successfully!\n");
 8001f66:	4807      	ldr	r0, [pc, #28]	@ (8001f84 <ICM42688P_Initialization+0x12c>)
 8001f68:	f00f fd98 	bl	8011a9c <puts>

	return 0; //OK
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	08016654 	.word	0x08016654
 8001f7c:	0801666c 	.word	0x0801666c
 8001f80:	08016690 	.word	0x08016690
 8001f84:	080166bc 	.word	0x080166bc

08001f88 <ICM42688P_Get6AxisRawData>:

void ICM42688P_Get6AxisRawData(short* accel, short* gyro)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
	unsigned char data[14];
	ICM42688P_ReadBytes(ICM42688P_ACCEL_DATA_X1, 14, data);
 8001f92:	f107 0308 	add.w	r3, r7, #8
 8001f96:	461a      	mov	r2, r3
 8001f98:	210e      	movs	r1, #14
 8001f9a:	201f      	movs	r0, #31
 8001f9c:	f7ff ff08 	bl	8001db0 <ICM42688P_ReadBytes>

	accel[0] = (data[0] << 8) | data[1];
 8001fa0:	7a3b      	ldrb	r3, [r7, #8]
 8001fa2:	b21b      	sxth	r3, r3
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	7a7b      	ldrb	r3, [r7, #9]
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	4313      	orrs	r3, r2
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	801a      	strh	r2, [r3, #0]
	accel[1] = (data[2] << 8) | data[3];
 8001fb4:	7abb      	ldrb	r3, [r7, #10]
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	b219      	sxth	r1, r3
 8001fbc:	7afb      	ldrb	r3, [r7, #11]
 8001fbe:	b21a      	sxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	b212      	sxth	r2, r2
 8001fc8:	801a      	strh	r2, [r3, #0]
	accel[2] = (data[4] << 8) | data[5];
 8001fca:	7b3b      	ldrb	r3, [r7, #12]
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	b219      	sxth	r1, r3
 8001fd2:	7b7b      	ldrb	r3, [r7, #13]
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	b212      	sxth	r2, r2
 8001fde:	801a      	strh	r2, [r3, #0]

	gyro[0] = ((data[6] << 8) | data[7]);
 8001fe0:	7bbb      	ldrb	r3, [r7, #14]
 8001fe2:	b21b      	sxth	r3, r3
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	b21a      	sxth	r2, r3
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	b21b      	sxth	r3, r3
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[8] << 8) | data[9]);
 8001ff4:	7c3b      	ldrb	r3, [r7, #16]
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	b219      	sxth	r1, r3
 8001ffc:	7c7b      	ldrb	r3, [r7, #17]
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	3302      	adds	r3, #2
 8002004:	430a      	orrs	r2, r1
 8002006:	b212      	sxth	r2, r2
 8002008:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[10] << 8) | data[11]);
 800200a:	7cbb      	ldrb	r3, [r7, #18]
 800200c:	b21b      	sxth	r3, r3
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	b219      	sxth	r1, r3
 8002012:	7cfb      	ldrb	r3, [r7, #19]
 8002014:	b21a      	sxth	r2, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	3304      	adds	r3, #4
 800201a:	430a      	orrs	r2, r1
 800201c:	b212      	sxth	r2, r2
 800201e:	801a      	strh	r2, [r3, #0]
}
 8002020:	bf00      	nop
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <ICM42688P_DataReady>:
	gyro[1] = ((data[2] << 8) | data[3]);
	gyro[2] = ((data[4] << 8) | data[5]);
}

int ICM42688P_DataReady(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM42688P_INT1_PORT, ICM42688P_INT1_PIN);
 800202c:	2110      	movs	r1, #16
 800202e:	4803      	ldr	r0, [pc, #12]	@ (800203c <ICM42688P_DataReady+0x14>)
 8002030:	f7ff fd9a 	bl	8001b68 <LL_GPIO_IsInputPinSet>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	58021000 	.word	0x58021000

08002040 <WS2812_SetColor>:
    if (brightness < 0.0) brightness = 0.0;
    if (brightness > 1.0) brightness = 1.0;
    global_brightness = brightness;
}

void WS2812_SetColor(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002052:	4603      	mov	r3, r0
 8002054:	72fb      	strb	r3, [r7, #11]
 8002056:	460b      	mov	r3, r1
 8002058:	72bb      	strb	r3, [r7, #10]
 800205a:	4613      	mov	r3, r2
 800205c:	727b      	strb	r3, [r7, #9]
    if (led_index < LED_COUNT) {
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d165      	bne.n	8002130 <WS2812_SetColor+0xf0>
        // Clamp brightness between 0.0 and 1.0
        if (brightness < 0.0) brightness = 0.0;
 8002064:	edd7 7a01 	vldr	s15, [r7, #4]
 8002068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800206c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002070:	d502      	bpl.n	8002078 <WS2812_SetColor+0x38>
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	607b      	str	r3, [r7, #4]
        if (brightness > 1.0) brightness = 1.0;
 8002078:	edd7 7a01 	vldr	s15, [r7, #4]
 800207c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002088:	dd02      	ble.n	8002090 <WS2812_SetColor+0x50>
 800208a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800208e:	607b      	str	r3, [r7, #4]
        // Apply brightness scaling (combine with global brightness)
        float total_brightness = brightness * global_brightness;
 8002090:	4b2a      	ldr	r3, [pc, #168]	@ (800213c <WS2812_SetColor+0xfc>)
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	ed97 7a01 	vldr	s14, [r7, #4]
 800209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209e:	edc7 7a05 	vstr	s15, [r7, #20]
        led_data[led_index][0] = (uint8_t)(green * total_brightness); // GRB order
 80020a2:	7abb      	ldrb	r3, [r7, #10]
 80020a4:	ee07 3a90 	vmov	s15, r3
 80020a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80020b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020b8:	edc7 7a00 	vstr	s15, [r7]
 80020bc:	783b      	ldrb	r3, [r7, #0]
 80020be:	b2d8      	uxtb	r0, r3
 80020c0:	491f      	ldr	r1, [pc, #124]	@ (8002140 <WS2812_SetColor+0x100>)
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	4602      	mov	r2, r0
 80020ce:	701a      	strb	r2, [r3, #0]
        led_data[led_index][1] = (uint8_t)(red * total_brightness);
 80020d0:	7afb      	ldrb	r3, [r7, #11]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020da:	edd7 7a05 	vldr	s15, [r7, #20]
 80020de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020e6:	edc7 7a00 	vstr	s15, [r7]
 80020ea:	783b      	ldrb	r3, [r7, #0]
 80020ec:	b2d8      	uxtb	r0, r3
 80020ee:	4914      	ldr	r1, [pc, #80]	@ (8002140 <WS2812_SetColor+0x100>)
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4613      	mov	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	440b      	add	r3, r1
 80020fa:	3301      	adds	r3, #1
 80020fc:	4602      	mov	r2, r0
 80020fe:	701a      	strb	r2, [r3, #0]
        led_data[led_index][2] = (uint8_t)(blue * total_brightness);
 8002100:	7a7b      	ldrb	r3, [r7, #9]
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800210a:	edd7 7a05 	vldr	s15, [r7, #20]
 800210e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002116:	edc7 7a00 	vstr	s15, [r7]
 800211a:	783b      	ldrb	r3, [r7, #0]
 800211c:	b2d8      	uxtb	r0, r3
 800211e:	4908      	ldr	r1, [pc, #32]	@ (8002140 <WS2812_SetColor+0x100>)
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	440b      	add	r3, r1
 800212a:	3302      	adds	r3, #2
 800212c:	4602      	mov	r2, r0
 800212e:	701a      	strb	r2, [r3, #0]
//        printf("WS2812 SetColor: LED %lu, R=%d, G=%d, B=%d, Brightness=%.2f\n",
//               led_index, led_data[led_index][1], led_data[led_index][0], led_data[led_index][2], brightness);
    }
}
 8002130:	bf00      	nop
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	24000000 	.word	0x24000000
 8002140:	24000374 	.word	0x24000374

08002144 <WS2812_Send>:

void WS2812_Send(void) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
    uint32_t buffer_index = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]

    // Clear buffer to ensure no stale data
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	e007      	b.n	8002164 <WS2812_Send+0x20>
        pwm_buffer[i] = DUTY_RESET;
 8002154:	4a34      	ldr	r2, [pc, #208]	@ (8002228 <WS2812_Send+0xe4>)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2100      	movs	r1, #0
 800215a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	3301      	adds	r3, #1
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2b49      	cmp	r3, #73	@ 0x49
 8002168:	d9f4      	bls.n	8002154 <WS2812_Send+0x10>
    }

    // Convert LED data to PWM duty cycles
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	e039      	b.n	80021e4 <WS2812_Send+0xa0>
        for (uint32_t color = 0; color < 3; color++) { // GRB
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	e030      	b.n	80021d8 <WS2812_Send+0x94>
            for (int8_t bit = 7; bit >= 0; bit--) {
 8002176:	2307      	movs	r3, #7
 8002178:	71fb      	strb	r3, [r7, #7]
 800217a:	e026      	b.n	80021ca <WS2812_Send+0x86>
                if (led_data[led][color] & (1 << bit)) {
 800217c:	492b      	ldr	r1, [pc, #172]	@ (800222c <WS2812_Send+0xe8>)
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	18ca      	adds	r2, r1, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4413      	add	r3, r2
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	fa42 f303 	asr.w	r3, r2, r3
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d007      	beq.n	80021b0 <WS2812_Send+0x6c>
                    pwm_buffer[buffer_index++] = DUTY_1; // Logical 1
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	617a      	str	r2, [r7, #20]
 80021a6:	4a20      	ldr	r2, [pc, #128]	@ (8002228 <WS2812_Send+0xe4>)
 80021a8:	21a0      	movs	r1, #160	@ 0xa0
 80021aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80021ae:	e006      	b.n	80021be <WS2812_Send+0x7a>
                } else {
                    pwm_buffer[buffer_index++] = DUTY_0; // Logical 0
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	617a      	str	r2, [r7, #20]
 80021b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002228 <WS2812_Send+0xe4>)
 80021b8:	2150      	movs	r1, #80	@ 0x50
 80021ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            for (int8_t bit = 7; bit >= 0; bit--) {
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	71fb      	strb	r3, [r7, #7]
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	dad4      	bge.n	800217c <WS2812_Send+0x38>
        for (uint32_t color = 0; color < 3; color++) { // GRB
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	3301      	adds	r3, #1
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d9cb      	bls.n	8002176 <WS2812_Send+0x32>
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3301      	adds	r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0c2      	beq.n	8002170 <WS2812_Send+0x2c>
            }
        }
    }

    // Stop previous DMA and timer
    HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 80021ea:	2104      	movs	r1, #4
 80021ec:	4810      	ldr	r0, [pc, #64]	@ (8002230 <WS2812_Send+0xec>)
 80021ee:	f00b fdc5 	bl	800dd7c <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_Base_Stop(&WS2812_TIMER);
 80021f2:	480f      	ldr	r0, [pc, #60]	@ (8002230 <WS2812_Send+0xec>)
 80021f4:	f00b f9ea 	bl	800d5cc <HAL_TIM_Base_Stop>

    // Ensure DMA interrupt is enabled
    HAL_NVIC_SetPriority(WS2812_DMA_IRQn, 0, 0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2100      	movs	r1, #0
 80021fc:	200f      	movs	r0, #15
 80021fe:	f003 fa8e 	bl	800571e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WS2812_DMA_IRQn);
 8002202:	200f      	movs	r0, #15
 8002204:	f003 faa5 	bl	8005752 <HAL_NVIC_EnableIRQ>

    // Reset flag and start new DMA transfer
    data_sent_flag = 0;
 8002208:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <WS2812_Send+0xf0>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start(&WS2812_TIMER);
 800220e:	4808      	ldr	r0, [pc, #32]	@ (8002230 <WS2812_Send+0xec>)
 8002210:	f00b f95e 	bl	800d4d0 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL, pwm_buffer, BUFFER_SIZE);
 8002214:	234a      	movs	r3, #74	@ 0x4a
 8002216:	4a04      	ldr	r2, [pc, #16]	@ (8002228 <WS2812_Send+0xe4>)
 8002218:	2104      	movs	r1, #4
 800221a:	4805      	ldr	r0, [pc, #20]	@ (8002230 <WS2812_Send+0xec>)
 800221c:	f00b fb7a 	bl	800d914 <HAL_TIM_PWM_Start_DMA>
//    printf("WS2812 Send Started\n");
}
 8002220:	bf00      	nop
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2400024c 	.word	0x2400024c
 800222c:	24000374 	.word	0x24000374
 8002230:	24000630 	.word	0x24000630
 8002234:	24000248 	.word	0x24000248

08002238 <main_led>:

void main_led(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	4608      	mov	r0, r1
 8002242:	4611      	mov	r1, r2
 8002244:	461a      	mov	r2, r3
 8002246:	ed87 0a01 	vstr	s0, [r7, #4]
 800224a:	4603      	mov	r3, r0
 800224c:	72fb      	strb	r3, [r7, #11]
 800224e:	460b      	mov	r3, r1
 8002250:	72bb      	strb	r3, [r7, #10]
 8002252:	4613      	mov	r3, r2
 8002254:	727b      	strb	r3, [r7, #9]
    WS2812_SetColor(led_index, red, green, blue, brightness);
 8002256:	7a7b      	ldrb	r3, [r7, #9]
 8002258:	7aba      	ldrb	r2, [r7, #10]
 800225a:	7af9      	ldrb	r1, [r7, #11]
 800225c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f7ff feed 	bl	8002040 <WS2812_SetColor>
    WS2812_Send();
 8002266:	f7ff ff6d 	bl	8002144 <WS2812_Send>
    led_active = true;
 800226a:	4b07      	ldr	r3, [pc, #28]	@ (8002288 <main_led+0x50>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
    led_start_time = HAL_GetTick();
 8002270:	f003 f94a 	bl	8005508 <HAL_GetTick>
 8002274:	4603      	mov	r3, r0
 8002276:	4a05      	ldr	r2, [pc, #20]	@ (800228c <main_led+0x54>)
 8002278:	6013      	str	r3, [r2, #0]
    led_on_time = 100; // Default duration (100ms)
 800227a:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <main_led+0x58>)
 800227c:	2264      	movs	r2, #100	@ 0x64
 800227e:	601a      	str	r2, [r3, #0]
//    printf("main_led: LED %lu set, duration=%lu ms\n", led_index, led_on_time);
}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	24000380 	.word	0x24000380
 800228c:	2400037c 	.word	0x2400037c
 8002290:	24000378 	.word	0x24000378

08002294 <HAL_TIM_PWM_PulseFinishedCallback>:
//            printf("WS2812 LED turned off\n");
        }
    }
}

__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a08      	ldr	r2, [pc, #32]	@ (80022c4 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d109      	bne.n	80022ba <HAL_TIM_PWM_PulseFinishedCallback+0x26>
        HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 80022a6:	2104      	movs	r1, #4
 80022a8:	4807      	ldr	r0, [pc, #28]	@ (80022c8 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 80022aa:	f00b fd67 	bl	800dd7c <HAL_TIM_PWM_Stop_DMA>
        HAL_TIM_Base_Stop(&WS2812_TIMER);
 80022ae:	4806      	ldr	r0, [pc, #24]	@ (80022c8 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 80022b0:	f00b f98c 	bl	800d5cc <HAL_TIM_Base_Stop>
        data_sent_flag = 1;
 80022b4:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
//        printf("WS2812 DMA Transfer Complete\n");
    }
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40000400 	.word	0x40000400
 80022c8:	24000630 	.word	0x24000630
 80022cc:	24000248 	.word	0x24000248

080022d0 <__NVIC_GetPriorityGrouping>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d4:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <__NVIC_GetPriorityGrouping+0x18>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f003 0307 	and.w	r3, r3, #7
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_EnableIRQ>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	db0b      	blt.n	8002316 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	4907      	ldr	r1, [pc, #28]	@ (8002324 <__NVIC_EnableIRQ+0x38>)
 8002306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2001      	movs	r0, #1
 800230e:	fa00 f202 	lsl.w	r2, r0, r2
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000e100 	.word	0xe000e100

08002328 <__NVIC_SetPriority>:
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db0a      	blt.n	8002352 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	490c      	ldr	r1, [pc, #48]	@ (8002374 <__NVIC_SetPriority+0x4c>)
 8002342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	440b      	add	r3, r1
 800234c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002350:	e00a      	b.n	8002368 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4908      	ldr	r1, [pc, #32]	@ (8002378 <__NVIC_SetPriority+0x50>)
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3b04      	subs	r3, #4
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	440b      	add	r3, r1
 8002366:	761a      	strb	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <NVIC_EncodePriority>:
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	@ 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f1c3 0307 	rsb	r3, r3, #7
 8002396:	2b04      	cmp	r3, #4
 8002398:	bf28      	it	cs
 800239a:	2304      	movcs	r3, #4
 800239c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2b06      	cmp	r3, #6
 80023a4:	d902      	bls.n	80023ac <NVIC_EncodePriority+0x30>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3b03      	subs	r3, #3
 80023aa:	e000      	b.n	80023ae <NVIC_EncodePriority+0x32>
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	401a      	ands	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	43d9      	mvns	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	4313      	orrs	r3, r2
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	@ 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023ea:	4b35      	ldr	r3, [pc, #212]	@ (80024c0 <MX_DMA_Init+0xdc>)
 80023ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023f0:	4a33      	ldr	r2, [pc, #204]	@ (80024c0 <MX_DMA_Init+0xdc>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80023fa:	4b31      	ldr	r3, [pc, #196]	@ (80024c0 <MX_DMA_Init+0xdc>)
 80023fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	2100      	movs	r1, #0
 800240c:	200b      	movs	r0, #11
 800240e:	f003 f986 	bl	800571e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002412:	200b      	movs	r0, #11
 8002414:	f003 f99d 	bl	8005752 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002418:	2200      	movs	r2, #0
 800241a:	2100      	movs	r1, #0
 800241c:	200c      	movs	r0, #12
 800241e:	f003 f97e 	bl	800571e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002422:	200c      	movs	r0, #12
 8002424:	f003 f995 	bl	8005752 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002428:	2200      	movs	r2, #0
 800242a:	2100      	movs	r1, #0
 800242c:	200d      	movs	r0, #13
 800242e:	f003 f976 	bl	800571e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002432:	200d      	movs	r0, #13
 8002434:	f003 f98d 	bl	8005752 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002438:	f7ff ff4a 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 800243c:	4603      	mov	r3, r0
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff9a 	bl	800237c <NVIC_EncodePriority>
 8002448:	4603      	mov	r3, r0
 800244a:	4619      	mov	r1, r3
 800244c:	200e      	movs	r0, #14
 800244e:	f7ff ff6b 	bl	8002328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002452:	200e      	movs	r0, #14
 8002454:	f7ff ff4a 	bl	80022ec <__NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002458:	f7ff ff3a 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 800245c:	4603      	mov	r3, r0
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff8a 	bl	800237c <NVIC_EncodePriority>
 8002468:	4603      	mov	r3, r0
 800246a:	4619      	mov	r1, r3
 800246c:	200f      	movs	r0, #15
 800246e:	f7ff ff5b 	bl	8002328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002472:	200f      	movs	r0, #15
 8002474:	f7ff ff3a 	bl	80022ec <__NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002478:	f7ff ff2a 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 800247c:	4603      	mov	r3, r0
 800247e:	2200      	movs	r2, #0
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff7a 	bl	800237c <NVIC_EncodePriority>
 8002488:	4603      	mov	r3, r0
 800248a:	4619      	mov	r1, r3
 800248c:	2010      	movs	r0, #16
 800248e:	f7ff ff4b 	bl	8002328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002492:	2010      	movs	r0, #16
 8002494:	f7ff ff2a 	bl	80022ec <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002498:	f7ff ff1a 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 800249c:	4603      	mov	r3, r0
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff6a 	bl	800237c <NVIC_EncodePriority>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4619      	mov	r1, r3
 80024ac:	2011      	movs	r0, #17
 80024ae:	f7ff ff3b 	bl	8002328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80024b2:	2011      	movs	r0, #17
 80024b4:	f7ff ff1a 	bl	80022ec <__NVIC_EnableIRQ>

}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	58024400 	.word	0x58024400

080024c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08c      	sub	sp, #48	@ 0x30
 80024c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ca:	f107 031c 	add.w	r3, r7, #28
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
 80024d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024da:	4b50      	ldr	r3, [pc, #320]	@ (800261c <MX_GPIO_Init+0x158>)
 80024dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e0:	4a4e      	ldr	r2, [pc, #312]	@ (800261c <MX_GPIO_Init+0x158>)
 80024e2:	f043 0310 	orr.w	r3, r3, #16
 80024e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024ea:	4b4c      	ldr	r3, [pc, #304]	@ (800261c <MX_GPIO_Init+0x158>)
 80024ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f8:	4b48      	ldr	r3, [pc, #288]	@ (800261c <MX_GPIO_Init+0x158>)
 80024fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024fe:	4a47      	ldr	r2, [pc, #284]	@ (800261c <MX_GPIO_Init+0x158>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002508:	4b44      	ldr	r3, [pc, #272]	@ (800261c <MX_GPIO_Init+0x158>)
 800250a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002516:	4b41      	ldr	r3, [pc, #260]	@ (800261c <MX_GPIO_Init+0x158>)
 8002518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800251c:	4a3f      	ldr	r2, [pc, #252]	@ (800261c <MX_GPIO_Init+0x158>)
 800251e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002522:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002526:	4b3d      	ldr	r3, [pc, #244]	@ (800261c <MX_GPIO_Init+0x158>)
 8002528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800252c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	4b39      	ldr	r3, [pc, #228]	@ (800261c <MX_GPIO_Init+0x158>)
 8002536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800253a:	4a38      	ldr	r2, [pc, #224]	@ (800261c <MX_GPIO_Init+0x158>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002544:	4b35      	ldr	r3, [pc, #212]	@ (800261c <MX_GPIO_Init+0x158>)
 8002546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	4b32      	ldr	r3, [pc, #200]	@ (800261c <MX_GPIO_Init+0x158>)
 8002554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002558:	4a30      	ldr	r2, [pc, #192]	@ (800261c <MX_GPIO_Init+0x158>)
 800255a:	f043 0302 	orr.w	r3, r3, #2
 800255e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002562:	4b2e      	ldr	r3, [pc, #184]	@ (800261c <MX_GPIO_Init+0x158>)
 8002564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002570:	4b2a      	ldr	r3, [pc, #168]	@ (800261c <MX_GPIO_Init+0x158>)
 8002572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002576:	4a29      	ldr	r2, [pc, #164]	@ (800261c <MX_GPIO_Init+0x158>)
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002580:	4b26      	ldr	r3, [pc, #152]	@ (800261c <MX_GPIO_Init+0x158>)
 8002582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_1_Pin|LED_2_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 800258e:	2200      	movs	r2, #0
 8002590:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8002594:	4822      	ldr	r0, [pc, #136]	@ (8002620 <MX_GPIO_Init+0x15c>)
 8002596:	f005 fe3f 	bl	8008218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800259a:	2200      	movs	r2, #0
 800259c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025a0:	4820      	ldr	r0, [pc, #128]	@ (8002624 <MX_GPIO_Init+0x160>)
 80025a2:	f005 fe39 	bl	8008218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|SPI2_CS_Pin;
 80025a6:	f44f 7394 	mov.w	r3, #296	@ 0x128
 80025aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ac:	2301      	movs	r3, #1
 80025ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025b8:	f107 031c 	add.w	r3, r7, #28
 80025bc:	4619      	mov	r1, r3
 80025be:	4818      	ldr	r0, [pc, #96]	@ (8002620 <MX_GPIO_Init+0x15c>)
 80025c0:	f005 fc82 	bl	8007ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_INT_Pin */
  GPIO_InitStruct.Pin = SPI3_INT_Pin;
 80025c4:	2310      	movs	r3, #16
 80025c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI3_INT_GPIO_Port, &GPIO_InitStruct);
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	4812      	ldr	r0, [pc, #72]	@ (8002620 <MX_GPIO_Init+0x15c>)
 80025d8:	f005 fc76 	bl	8007ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_INT_Pin */
  GPIO_InitStruct.Pin = SPI2_INT_Pin;
 80025dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI2_INT_GPIO_Port, &GPIO_InitStruct);
 80025ea:	f107 031c 	add.w	r3, r7, #28
 80025ee:	4619      	mov	r1, r3
 80025f0:	480d      	ldr	r0, [pc, #52]	@ (8002628 <MX_GPIO_Init+0x164>)
 80025f2:	f005 fc69 	bl	8007ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80025f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	4619      	mov	r1, r3
 800260e:	4805      	ldr	r0, [pc, #20]	@ (8002624 <MX_GPIO_Init+0x160>)
 8002610:	f005 fc5a 	bl	8007ec8 <HAL_GPIO_Init>

}
 8002614:	bf00      	nop
 8002616:	3730      	adds	r7, #48	@ 0x30
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	58024400 	.word	0x58024400
 8002620:	58021000 	.word	0x58021000
 8002624:	58020000 	.word	0x58020000
 8002628:	58020800 	.word	0x58020800

0800262c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002630:	4b1b      	ldr	r3, [pc, #108]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002632:	4a1c      	ldr	r2, [pc, #112]	@ (80026a4 <MX_I2C1_Init+0x78>)
 8002634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00D049FB;
 8002636:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002638:	4a1b      	ldr	r2, [pc, #108]	@ (80026a8 <MX_I2C1_Init+0x7c>)
 800263a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800263c:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <MX_I2C1_Init+0x74>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002642:	4b17      	ldr	r3, [pc, #92]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002644:	2201      	movs	r2, #1
 8002646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002648:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <MX_I2C1_Init+0x74>)
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800264e:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002650:	2200      	movs	r2, #0
 8002652:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002654:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002656:	2200      	movs	r2, #0
 8002658:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800265a:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <MX_I2C1_Init+0x74>)
 800265c:	2200      	movs	r2, #0
 800265e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002660:	4b0f      	ldr	r3, [pc, #60]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002662:	2200      	movs	r2, #0
 8002664:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002666:	480e      	ldr	r0, [pc, #56]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002668:	f005 fe0a 	bl	8008280 <HAL_I2C_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002672:	f000 fddf 	bl	8003234 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002676:	2100      	movs	r1, #0
 8002678:	4809      	ldr	r0, [pc, #36]	@ (80026a0 <MX_I2C1_Init+0x74>)
 800267a:	f007 fa2b 	bl	8009ad4 <HAL_I2CEx_ConfigAnalogFilter>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002684:	f000 fdd6 	bl	8003234 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002688:	2100      	movs	r1, #0
 800268a:	4805      	ldr	r0, [pc, #20]	@ (80026a0 <MX_I2C1_Init+0x74>)
 800268c:	f007 fa6d 	bl	8009b6a <HAL_I2CEx_ConfigDigitalFilter>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002696:	f000 fdcd 	bl	8003234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	24000384 	.word	0x24000384
 80026a4:	40005400 	.word	0x40005400
 80026a8:	00d049fb 	.word	0x00d049fb

080026ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b0b8      	sub	sp, #224	@ 0xe0
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	22b8      	movs	r2, #184	@ 0xb8
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f00f fb2f 	bl	8011d30 <memset>
  if(i2cHandle->Instance==I2C1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002848 <HAL_I2C_MspInit+0x19c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	f040 80b1 	bne.w	8002840 <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026de:	f04f 0208 	mov.w	r2, #8
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f0:	f107 0310 	add.w	r3, r7, #16
 80026f4:	4618      	mov	r0, r3
 80026f6:	f009 fb8f 	bl	800be18 <HAL_RCCEx_PeriphCLKConfig>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002700:	f000 fd98 	bl	8003234 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002704:	4b51      	ldr	r3, [pc, #324]	@ (800284c <HAL_I2C_MspInit+0x1a0>)
 8002706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800270a:	4a50      	ldr	r2, [pc, #320]	@ (800284c <HAL_I2C_MspInit+0x1a0>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002714:	4b4d      	ldr	r3, [pc, #308]	@ (800284c <HAL_I2C_MspInit+0x1a0>)
 8002716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002722:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002726:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800272a:	2312      	movs	r3, #18
 800272c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800273c:	2304      	movs	r3, #4
 800273e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002742:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002746:	4619      	mov	r1, r3
 8002748:	4841      	ldr	r0, [pc, #260]	@ (8002850 <HAL_I2C_MspInit+0x1a4>)
 800274a:	f005 fbbd 	bl	8007ec8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800274e:	4b3f      	ldr	r3, [pc, #252]	@ (800284c <HAL_I2C_MspInit+0x1a0>)
 8002750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002754:	4a3d      	ldr	r2, [pc, #244]	@ (800284c <HAL_I2C_MspInit+0x1a0>)
 8002756:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800275a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800275e:	4b3b      	ldr	r3, [pc, #236]	@ (800284c <HAL_I2C_MspInit+0x1a0>)
 8002760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800276c:	4b39      	ldr	r3, [pc, #228]	@ (8002854 <HAL_I2C_MspInit+0x1a8>)
 800276e:	4a3a      	ldr	r2, [pc, #232]	@ (8002858 <HAL_I2C_MspInit+0x1ac>)
 8002770:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002772:	4b38      	ldr	r3, [pc, #224]	@ (8002854 <HAL_I2C_MspInit+0x1a8>)
 8002774:	2221      	movs	r2, #33	@ 0x21
 8002776:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002778:	4b36      	ldr	r3, [pc, #216]	@ (8002854 <HAL_I2C_MspInit+0x1a8>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800277e:	4b35      	ldr	r3, [pc, #212]	@ (8002854 <HAL_I2C_MspInit+0x1a8>)
 8002780:	2200      	movs	r2, #0
 8002782:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002784:	4b33      	ldr	r3, [pc, #204]	@ (8002854 <HAL_I2C_MspInit+0x1a8>)
 8002786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800278a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800278c:	4b31      	ldr	r3, [pc, #196]	@ (8002854 <HAL_I2C_MspInit+0x1a8>)
 800278e:	2200      	movs	r2, #0
 8002790:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002792:	4b30      	ldr	r3, [pc, #192]	@ (8002854 <HAL_I2C_MspInit+0x1a8>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002798:	4b2e      	ldr	r3, [pc, #184]	@ (8002854 <HAL_I2C_MspInit+0x1a8>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800279e:	4b2d      	ldr	r3, [pc, #180]	@ (8002854 <HAL_I2C_MspInit+0x1a8>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002854 <HAL_I2C_MspInit+0x1a8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80027aa:	482a      	ldr	r0, [pc, #168]	@ (8002854 <HAL_I2C_MspInit+0x1a8>)
 80027ac:	f003 f864 	bl	8005878 <HAL_DMA_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80027b6:	f000 fd3d 	bl	8003234 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a25      	ldr	r2, [pc, #148]	@ (8002854 <HAL_I2C_MspInit+0x1a8>)
 80027be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027c0:	4a24      	ldr	r2, [pc, #144]	@ (8002854 <HAL_I2C_MspInit+0x1a8>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80027c6:	4b25      	ldr	r3, [pc, #148]	@ (800285c <HAL_I2C_MspInit+0x1b0>)
 80027c8:	4a25      	ldr	r2, [pc, #148]	@ (8002860 <HAL_I2C_MspInit+0x1b4>)
 80027ca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80027cc:	4b23      	ldr	r3, [pc, #140]	@ (800285c <HAL_I2C_MspInit+0x1b0>)
 80027ce:	2222      	movs	r2, #34	@ 0x22
 80027d0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027d2:	4b22      	ldr	r3, [pc, #136]	@ (800285c <HAL_I2C_MspInit+0x1b0>)
 80027d4:	2240      	movs	r2, #64	@ 0x40
 80027d6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d8:	4b20      	ldr	r3, [pc, #128]	@ (800285c <HAL_I2C_MspInit+0x1b0>)
 80027da:	2200      	movs	r2, #0
 80027dc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027de:	4b1f      	ldr	r3, [pc, #124]	@ (800285c <HAL_I2C_MspInit+0x1b0>)
 80027e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027e4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027e6:	4b1d      	ldr	r3, [pc, #116]	@ (800285c <HAL_I2C_MspInit+0x1b0>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <HAL_I2C_MspInit+0x1b0>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80027f2:	4b1a      	ldr	r3, [pc, #104]	@ (800285c <HAL_I2C_MspInit+0x1b0>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027f8:	4b18      	ldr	r3, [pc, #96]	@ (800285c <HAL_I2C_MspInit+0x1b0>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027fe:	4b17      	ldr	r3, [pc, #92]	@ (800285c <HAL_I2C_MspInit+0x1b0>)
 8002800:	2200      	movs	r2, #0
 8002802:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002804:	4815      	ldr	r0, [pc, #84]	@ (800285c <HAL_I2C_MspInit+0x1b0>)
 8002806:	f003 f837 	bl	8005878 <HAL_DMA_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8002810:	f000 fd10 	bl	8003234 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a11      	ldr	r2, [pc, #68]	@ (800285c <HAL_I2C_MspInit+0x1b0>)
 8002818:	639a      	str	r2, [r3, #56]	@ 0x38
 800281a:	4a10      	ldr	r2, [pc, #64]	@ (800285c <HAL_I2C_MspInit+0x1b0>)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002820:	2200      	movs	r2, #0
 8002822:	2100      	movs	r1, #0
 8002824:	201f      	movs	r0, #31
 8002826:	f002 ff7a 	bl	800571e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800282a:	201f      	movs	r0, #31
 800282c:	f002 ff91 	bl	8005752 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002830:	2200      	movs	r2, #0
 8002832:	2100      	movs	r1, #0
 8002834:	2020      	movs	r0, #32
 8002836:	f002 ff72 	bl	800571e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800283a:	2020      	movs	r0, #32
 800283c:	f002 ff89 	bl	8005752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002840:	bf00      	nop
 8002842:	37e0      	adds	r7, #224	@ 0xe0
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40005400 	.word	0x40005400
 800284c:	58024400 	.word	0x58024400
 8002850:	58020400 	.word	0x58020400
 8002854:	240003d8 	.word	0x240003d8
 8002858:	40020010 	.word	0x40020010
 800285c:	24000450 	.word	0x24000450
 8002860:	40020028 	.word	0x40020028

08002864 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f043 0201 	orr.w	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	601a      	str	r2, [r3, #0]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f043 0201 	orr.w	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	60da      	str	r2, [r3, #12]
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_USART_IsActiveFlag_FE>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d101      	bne.n	80028bc <LL_USART_IsActiveFlag_FE+0x18>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <LL_USART_IsActiveFlag_FE+0x1a>
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <LL_USART_IsActiveFlag_ORE>:
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d101      	bne.n	80028e2 <LL_USART_IsActiveFlag_ORE+0x18>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <LL_USART_IsActiveFlag_ORE+0x1a>
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_USART_IsActiveFlag_TC>:
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002900:	2b40      	cmp	r3, #64	@ 0x40
 8002902:	d101      	bne.n	8002908 <LL_USART_IsActiveFlag_TC+0x18>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <LL_USART_IsActiveFlag_TC+0x1a>
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002926:	2b80      	cmp	r3, #128	@ 0x80
 8002928:	d101      	bne.n	800292e <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	621a      	str	r2, [r3, #32]
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2208      	movs	r2, #8
 8002962:	621a      	str	r2, [r3, #32]
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	@ 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	e853 3f00 	ldrex	r3, [r3]
 8002982:	60bb      	str	r3, [r7, #8]
   return(result);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f043 0320 	orr.w	r3, r3, #32
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	61ba      	str	r2, [r7, #24]
 8002992:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002994:	6979      	ldr	r1, [r7, #20]
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	e841 2300 	strex	r3, r2, [r1]
 800299c:	613b      	str	r3, [r7, #16]
   return(result);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e9      	bne.n	8002978 <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3724      	adds	r7, #36	@ 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <_write>:
/* USER CODE BEGIN PTD */

/* *********** USART6 printf function code ************ */

int _write(int file, char* p, int len)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	e025      	b.n	8002a2e <_write+0x5e>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
            if (LL_USART_IsActiveFlag_ORE(USART6) || LL_USART_IsActiveFlag_FE(USART6)) {
 80029e2:	481b      	ldr	r0, [pc, #108]	@ (8002a50 <_write+0x80>)
 80029e4:	f7ff ff71 	bl	80028ca <LL_USART_IsActiveFlag_ORE>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d105      	bne.n	80029fa <_write+0x2a>
 80029ee:	4818      	ldr	r0, [pc, #96]	@ (8002a50 <_write+0x80>)
 80029f0:	f7ff ff58 	bl	80028a4 <LL_USART_IsActiveFlag_FE>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <_write+0x3c>
                LL_USART_ClearFlag_ORE(USART6);
 80029fa:	4815      	ldr	r0, [pc, #84]	@ (8002a50 <_write+0x80>)
 80029fc:	f7ff ffab 	bl	8002956 <LL_USART_ClearFlag_ORE>
                LL_USART_ClearFlag_FE(USART6);
 8002a00:	4813      	ldr	r0, [pc, #76]	@ (8002a50 <_write+0x80>)
 8002a02:	f7ff ff9b 	bl	800293c <LL_USART_ClearFlag_FE>
                return -1; // Indicate error
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a0a:	e01c      	b.n	8002a46 <_write+0x76>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
 8002a0c:	4810      	ldr	r0, [pc, #64]	@ (8002a50 <_write+0x80>)
 8002a0e:	f7ff ff82 	bl	8002916 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0e4      	beq.n	80029e2 <_write+0x12>
            }
        }
        LL_USART_TransmitData8(USART6, *(p + i));
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	4619      	mov	r1, r3
 8002a22:	480b      	ldr	r0, [pc, #44]	@ (8002a50 <_write+0x80>)
 8002a24:	f7ff ffc5 	bl	80029b2 <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	dbea      	blt.n	8002a0c <_write+0x3c>
    }
    while (!LL_USART_IsActiveFlag_TC(USART6)) {}
 8002a36:	bf00      	nop
 8002a38:	4805      	ldr	r0, [pc, #20]	@ (8002a50 <_write+0x80>)
 8002a3a:	f7ff ff59 	bl	80028f0 <LL_USART_IsActiveFlag_TC>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f9      	beq.n	8002a38 <_write+0x68>
    return len;
 8002a44:	687b      	ldr	r3, [r7, #4]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40011400 	.word	0x40011400

08002a54 <HAL_I2C_ErrorCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
    HMC5883L_DMA_Complete_Callback(hi2c);
}

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
    printf("I2C Error: %lu\n", hi2c->ErrorCode);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a60:	4619      	mov	r1, r3
 8002a62:	4803      	ldr	r0, [pc, #12]	@ (8002a70 <HAL_I2C_ErrorCallback+0x1c>)
 8002a64:	f00e ffaa 	bl	80119bc <iprintf>
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	08016e20 	.word	0x08016e20

08002a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a78:	b0da      	sub	sp, #360	@ 0x168
 8002a7a:	af0a      	add	r7, sp, #40	@ 0x28

  /* USER CODE BEGIN 1 */

	static int16_t gyro_offsets_lsb[3] = {8, 4, -2}; // Initialize to zero

	unsigned char motor_arming_flag = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	unsigned short iBus_SwA_Prev = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
	unsigned char iBus_rx_cnt = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
	unsigned short ccr1, ccr2, ccr3, ccr4;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002a8e:	f000 fba5 	bl	80031dc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a92:	f002 fcb3 	bl	80053fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a96:	f000 fb33 	bl	8003100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a9a:	f7ff fd13 	bl	80024c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a9e:	f7ff fca1 	bl	80023e4 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8002aa2:	f002 fbe1 	bl	8005268 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8002aa6:	f002 f8b5 	bl	8004c14 <MX_TIM7_Init>
  MX_SPI3_Init();
 8002aaa:	f001 f867 	bl	8003b7c <MX_SPI3_Init>
  MX_TIM2_Init();
 8002aae:	f001 ff29 	bl	8004904 <MX_TIM2_Init>
  MX_OCTOSPI1_Init();
 8002ab2:	f000 fbc5 	bl	8003240 <MX_OCTOSPI1_Init>
  MX_TIM3_Init();
 8002ab6:	f001 ff9b 	bl	80049f0 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002aba:	f7ff fdb7 	bl	800262c <MX_I2C1_Init>
  MX_UART4_Init();
 8002abe:	f002 fb39 	bl	8005134 <MX_UART4_Init>
  MX_TIM5_Init();
 8002ac2:	f002 f80d 	bl	8004ae0 <MX_TIM5_Init>
  MX_SPI2_Init();
 8002ac6:	f000 ff49 	bl	800395c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  LL_USART_EnableIT_RXNE(USART6);
 8002aca:	48b2      	ldr	r0, [pc, #712]	@ (8002d94 <main+0x320>)
 8002acc:	f7ff ff50 	bl	8002970 <LL_USART_EnableIT_RXNE_RXFNE>
//  StartupTone();
  LL_USART_EnableIT_RXNE_RXFNE(UART4);
 8002ad0:	48b1      	ldr	r0, [pc, #708]	@ (8002d98 <main+0x324>)
 8002ad2:	f7ff ff4d 	bl	8002970 <LL_USART_EnableIT_RXNE_RXFNE>


  if (EEPROM_Init() != W25Qxx_OK) {
 8002ad6:	f7fe fa25 	bl	8000f24 <EEPROM_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <main+0x76>
	  printf("EEPROM Init Failed\r\n");
 8002ae0:	48ae      	ldr	r0, [pc, #696]	@ (8002d9c <main+0x328>)
 8002ae2:	f00e ffdb 	bl	8011a9c <puts>
	  Error_Handler();
 8002ae6:	f000 fba5 	bl	8003234 <Error_Handler>
  }

  DroneConfig_t config;
  if (EEPROM_ReadConfig(&config) == W25Qxx_OK) {
 8002aea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe fa6e 	bl	8000fd0 <EEPROM_ReadConfig>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10c      	bne.n	8002b14 <main+0xa0>
	  printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
			  config.flight_mode, config.pid[0]);
 8002afa:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
	  printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
 8002afe:	4619      	mov	r1, r3
			  config.flight_mode, config.pid[0]);
 8002b00:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
	  printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
 8002b04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b08:	ec53 2b17 	vmov	r2, r3, d7
 8002b0c:	48a4      	ldr	r0, [pc, #656]	@ (8002da0 <main+0x32c>)
 8002b0e:	f00e ff55 	bl	80119bc <iprintf>
 8002b12:	e02a      	b.n	8002b6a <main+0xf6>
  } else {
	  printf("No valid config found, loading defaults\r\n");
 8002b14:	48a3      	ldr	r0, [pc, #652]	@ (8002da4 <main+0x330>)
 8002b16:	f00e ffc1 	bl	8011a9c <puts>
	  DroneConfig_t default_config = {
 8002b1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b22:	4aa1      	ldr	r2, [pc, #644]	@ (8002da8 <main+0x334>)
 8002b24:	4618      	mov	r0, r3
 8002b26:	4611      	mov	r1, r2
 8002b28:	2390      	movs	r3, #144	@ 0x90
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f00f f99f 	bl	8011e6e <memcpy>
					  .rgb = {{255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}},
					  .mode = 0
			  },
			  .crc = 0
	  };
	  default_config.crc = CalculateCRC32((uint8_t*)&default_config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	218c      	movs	r1, #140	@ 0x8c
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe faa6 	bl	8001088 <CalculateCRC32>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	  if (EEPROM_WriteConfig(&default_config) != W25Qxx_OK) {
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fa76 	bl	8001040 <EEPROM_WriteConfig>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d004      	beq.n	8002b64 <main+0xf0>
		  printf("Failed to write default config\r\n");
 8002b5a:	4894      	ldr	r0, [pc, #592]	@ (8002dac <main+0x338>)
 8002b5c:	f00e ff9e 	bl	8011a9c <puts>
		  Error_Handler();
 8002b60:	f000 fb68 	bl	8003234 <Error_Handler>
	  }
	  printf("Default config written and verified\r\n");
 8002b64:	4892      	ldr	r0, [pc, #584]	@ (8002db0 <main+0x33c>)
 8002b66:	f00e ff99 	bl	8011a9c <puts>
  }

  if (EEPROM_GetPID(eeprom_pid_read) == W25Qxx_OK) {
 8002b6a:	4892      	ldr	r0, [pc, #584]	@ (8002db4 <main+0x340>)
 8002b6c:	f7fe fb88 	bl	8001280 <EEPROM_GetPID>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d118      	bne.n	8002ba8 <main+0x134>
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
			  eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 8002b76:	4b8f      	ldr	r3, [pc, #572]	@ (8002db4 <main+0x340>)
 8002b78:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 8002b7c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 8002b80:	4b8c      	ldr	r3, [pc, #560]	@ (8002db4 <main+0x340>)
 8002b82:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 8002b86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 8002b8a:	4b8a      	ldr	r3, [pc, #552]	@ (8002db4 <main+0x340>)
 8002b8c:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 8002b90:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002b94:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002b98:	ed8d 7b00 	vstr	d7, [sp]
 8002b9c:	ec53 2b15 	vmov	r2, r3, d5
 8002ba0:	4885      	ldr	r0, [pc, #532]	@ (8002db8 <main+0x344>)
 8002ba2:	f00e ff0b 	bl	80119bc <iprintf>
 8002ba6:	e002      	b.n	8002bae <main+0x13a>
  } else {
	  printf("Failed to read PID\r\n");
 8002ba8:	4884      	ldr	r0, [pc, #528]	@ (8002dbc <main+0x348>)
 8002baa:	f00e ff77 	bl	8011a9c <puts>
  }

  if (EEPROM_GetGyroCalibration(eeprom_gyro_read) == W25Qxx_OK) {
 8002bae:	4884      	ldr	r0, [pc, #528]	@ (8002dc0 <main+0x34c>)
 8002bb0:	f7fe faee 	bl	8001190 <EEPROM_GetGyroCalibration>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d118      	bne.n	8002bec <main+0x178>
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
			  eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8002bba:	4b81      	ldr	r3, [pc, #516]	@ (8002dc0 <main+0x34c>)
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002bc0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8002bc4:	4b7e      	ldr	r3, [pc, #504]	@ (8002dc0 <main+0x34c>)
 8002bc6:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002bca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8002bce:	4b7c      	ldr	r3, [pc, #496]	@ (8002dc0 <main+0x34c>)
 8002bd0:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002bd4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002bd8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002bdc:	ed8d 7b00 	vstr	d7, [sp]
 8002be0:	ec53 2b15 	vmov	r2, r3, d5
 8002be4:	4877      	ldr	r0, [pc, #476]	@ (8002dc4 <main+0x350>)
 8002be6:	f00e fee9 	bl	80119bc <iprintf>
 8002bea:	e002      	b.n	8002bf2 <main+0x17e>
  } else {
	  printf("Failed to read EEPROM Gyro Data\r\n");
 8002bec:	4876      	ldr	r0, [pc, #472]	@ (8002dc8 <main+0x354>)
 8002bee:	f00e ff55 	bl	8011a9c <puts>
  }

  if (EEPROM_GetAccelCalibration(eeprom_accel_read) == W25Qxx_OK) {
 8002bf2:	4876      	ldr	r0, [pc, #472]	@ (8002dcc <main+0x358>)
 8002bf4:	f7fe fa82 	bl	80010fc <EEPROM_GetAccelCalibration>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d118      	bne.n	8002c30 <main+0x1bc>
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
			  eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8002bfe:	4b73      	ldr	r3, [pc, #460]	@ (8002dcc <main+0x358>)
 8002c00:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002c04:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8002c08:	4b70      	ldr	r3, [pc, #448]	@ (8002dcc <main+0x358>)
 8002c0a:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002c0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8002c12:	4b6e      	ldr	r3, [pc, #440]	@ (8002dcc <main+0x358>)
 8002c14:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002c18:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002c1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002c20:	ed8d 7b00 	vstr	d7, [sp]
 8002c24:	ec53 2b15 	vmov	r2, r3, d5
 8002c28:	4869      	ldr	r0, [pc, #420]	@ (8002dd0 <main+0x35c>)
 8002c2a:	f00e fec7 	bl	80119bc <iprintf>
 8002c2e:	e002      	b.n	8002c36 <main+0x1c2>
  } else {
	  printf("Failed to read EEPROM Accel Data\r\n");
 8002c30:	4868      	ldr	r0, [pc, #416]	@ (8002dd4 <main+0x360>)
 8002c32:	f00e ff33 	bl	8011a9c <puts>
  }

  if (EEPROM_GetMagCalibration(eeprom_mag_read) == W25Qxx_OK) {
 8002c36:	4868      	ldr	r0, [pc, #416]	@ (8002dd8 <main+0x364>)
 8002c38:	f7fe faf4 	bl	8001224 <EEPROM_GetMagCalibration>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d118      	bne.n	8002c74 <main+0x200>
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
			  eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8002c42:	4b65      	ldr	r3, [pc, #404]	@ (8002dd8 <main+0x364>)
 8002c44:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002c48:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8002c4c:	4b62      	ldr	r3, [pc, #392]	@ (8002dd8 <main+0x364>)
 8002c4e:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002c52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8002c56:	4b60      	ldr	r3, [pc, #384]	@ (8002dd8 <main+0x364>)
 8002c58:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002c5c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002c60:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002c64:	ed8d 7b00 	vstr	d7, [sp]
 8002c68:	ec53 2b15 	vmov	r2, r3, d5
 8002c6c:	485b      	ldr	r0, [pc, #364]	@ (8002ddc <main+0x368>)
 8002c6e:	f00e fea5 	bl	80119bc <iprintf>
 8002c72:	e002      	b.n	8002c7a <main+0x206>
  } else {
	  printf("Failed to read EEPROM Mag Data\r\n");
 8002c74:	485a      	ldr	r0, [pc, #360]	@ (8002de0 <main+0x36c>)
 8002c76:	f00e ff11 	bl	8011a9c <puts>
  }

  if (EEPROM_GetRollPID(&eeprom_roll_pid_read) == W25Qxx_OK) {
 8002c7a:	485a      	ldr	r0, [pc, #360]	@ (8002de4 <main+0x370>)
 8002c7c:	f7fe fb22 	bl	80012c4 <EEPROM_GetRollPID>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d12d      	bne.n	8002ce2 <main+0x26e>
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
			  eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8002c86:	4b57      	ldr	r3, [pc, #348]	@ (8002de4 <main+0x370>)
 8002c88:	edd3 7a00 	vldr	s15, [r3]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002c8c:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
			  eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8002c90:	4b54      	ldr	r3, [pc, #336]	@ (8002de4 <main+0x370>)
 8002c92:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002c96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8002c9a:	4b52      	ldr	r3, [pc, #328]	@ (8002de4 <main+0x370>)
 8002c9c:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002ca0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			  eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8002ca4:	4b4f      	ldr	r3, [pc, #316]	@ (8002de4 <main+0x370>)
 8002ca6:	edd3 5a03 	vldr	s11, [r3, #12]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002caa:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			  eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8002cae:	4b4d      	ldr	r3, [pc, #308]	@ (8002de4 <main+0x370>)
 8002cb0:	edd3 4a04 	vldr	s9, [r3, #16]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002cb4:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			  eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8002cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8002de4 <main+0x370>)
 8002cba:	edd3 3a05 	vldr	s7, [r3, #20]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002cbe:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8002cc2:	ed8d 3b08 	vstr	d3, [sp, #32]
 8002cc6:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002cca:	ed8d 5b04 	vstr	d5, [sp, #16]
 8002cce:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002cd2:	ed8d 7b00 	vstr	d7, [sp]
 8002cd6:	ec53 2b12 	vmov	r2, r3, d2
 8002cda:	4843      	ldr	r0, [pc, #268]	@ (8002de8 <main+0x374>)
 8002cdc:	f00e fe6e 	bl	80119bc <iprintf>
 8002ce0:	e002      	b.n	8002ce8 <main+0x274>
  } else {
	  printf("Failed to read Roll PID\r\n");
 8002ce2:	4842      	ldr	r0, [pc, #264]	@ (8002dec <main+0x378>)
 8002ce4:	f00e feda 	bl	8011a9c <puts>
  }

  if (EEPROM_GetPitchPID(&eeprom_pitch_pid_read) == W25Qxx_OK) {
 8002ce8:	4841      	ldr	r0, [pc, #260]	@ (8002df0 <main+0x37c>)
 8002cea:	f7fe fb3d 	bl	8001368 <EEPROM_GetPitchPID>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d12d      	bne.n	8002d50 <main+0x2dc>
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
			  eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8002cf4:	4b3e      	ldr	r3, [pc, #248]	@ (8002df0 <main+0x37c>)
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002cfa:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
			  eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8002cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8002df0 <main+0x37c>)
 8002d00:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002d04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8002d08:	4b39      	ldr	r3, [pc, #228]	@ (8002df0 <main+0x37c>)
 8002d0a:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002d0e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			  eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 8002d12:	4b37      	ldr	r3, [pc, #220]	@ (8002df0 <main+0x37c>)
 8002d14:	edd3 5a03 	vldr	s11, [r3, #12]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002d18:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			  eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 8002d1c:	4b34      	ldr	r3, [pc, #208]	@ (8002df0 <main+0x37c>)
 8002d1e:	edd3 4a04 	vldr	s9, [r3, #16]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002d22:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			  eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 8002d26:	4b32      	ldr	r3, [pc, #200]	@ (8002df0 <main+0x37c>)
 8002d28:	edd3 3a05 	vldr	s7, [r3, #20]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002d2c:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8002d30:	ed8d 3b08 	vstr	d3, [sp, #32]
 8002d34:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002d38:	ed8d 5b04 	vstr	d5, [sp, #16]
 8002d3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002d40:	ed8d 7b00 	vstr	d7, [sp]
 8002d44:	ec53 2b12 	vmov	r2, r3, d2
 8002d48:	482a      	ldr	r0, [pc, #168]	@ (8002df4 <main+0x380>)
 8002d4a:	f00e fe37 	bl	80119bc <iprintf>
 8002d4e:	e002      	b.n	8002d56 <main+0x2e2>
  } else {
	  printf("Failed to read Pitch PID\r\n");
 8002d50:	4829      	ldr	r0, [pc, #164]	@ (8002df8 <main+0x384>)
 8002d52:	f00e fea3 	bl	8011a9c <puts>
  }

  if (EEPROM_GetYawRatePID(&eeprom_yaw_rate_pid_read) == W25Qxx_OK) {
 8002d56:	4829      	ldr	r0, [pc, #164]	@ (8002dfc <main+0x388>)
 8002d58:	f7fe fb58 	bl	800140c <EEPROM_GetYawRatePID>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d150      	bne.n	8002e04 <main+0x390>
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
			  eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8002d62:	4b26      	ldr	r3, [pc, #152]	@ (8002dfc <main+0x388>)
 8002d64:	edd3 7a00 	vldr	s15, [r3]
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8002d68:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8002d6c:	4b23      	ldr	r3, [pc, #140]	@ (8002dfc <main+0x388>)
 8002d6e:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8002d72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8002d76:	4b21      	ldr	r3, [pc, #132]	@ (8002dfc <main+0x388>)
 8002d78:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8002d7c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002d80:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002d84:	ed8d 7b00 	vstr	d7, [sp]
 8002d88:	ec53 2b15 	vmov	r2, r3, d5
 8002d8c:	481c      	ldr	r0, [pc, #112]	@ (8002e00 <main+0x38c>)
 8002d8e:	f00e fe15 	bl	80119bc <iprintf>
 8002d92:	e03a      	b.n	8002e0a <main+0x396>
 8002d94:	40011400 	.word	0x40011400
 8002d98:	40004c00 	.word	0x40004c00
 8002d9c:	08016e30 	.word	0x08016e30
 8002da0:	08016e44 	.word	0x08016e44
 8002da4:	08016e74 	.word	0x08016e74
 8002da8:	080171e0 	.word	0x080171e0
 8002dac:	08016ea0 	.word	0x08016ea0
 8002db0:	08016ec0 	.word	0x08016ec0
 8002db4:	240004c8 	.word	0x240004c8
 8002db8:	08016ee8 	.word	0x08016ee8
 8002dbc:	08016f14 	.word	0x08016f14
 8002dc0:	240004d4 	.word	0x240004d4
 8002dc4:	08016f28 	.word	0x08016f28
 8002dc8:	08016f54 	.word	0x08016f54
 8002dcc:	240004e0 	.word	0x240004e0
 8002dd0:	08016f78 	.word	0x08016f78
 8002dd4:	08016fa4 	.word	0x08016fa4
 8002dd8:	240004ec 	.word	0x240004ec
 8002ddc:	08016fc8 	.word	0x08016fc8
 8002de0:	08016ff4 	.word	0x08016ff4
 8002de4:	240004f8 	.word	0x240004f8
 8002de8:	08017014 	.word	0x08017014
 8002dec:	08017058 	.word	0x08017058
 8002df0:	24000510 	.word	0x24000510
 8002df4:	08017074 	.word	0x08017074
 8002df8:	080170b8 	.word	0x080170b8
 8002dfc:	24000528 	.word	0x24000528
 8002e00:	080170d4 	.word	0x080170d4
  } else {
	  printf("Failed to read Yaw Rate PID\r\n");
 8002e04:	48a8      	ldr	r0, [pc, #672]	@ (80030a8 <main+0x634>)
 8002e06:	f00e fe49 	bl	8011a9c <puts>
  }

  if (EEPROM_GetAircraftLights(&aircraft_lights) == W25Qxx_OK) {
 8002e0a:	48a8      	ldr	r0, [pc, #672]	@ (80030ac <main+0x638>)
 8002e0c:	f7fe fb50 	bl	80014b0 <EEPROM_GetAircraftLights>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d139      	bne.n	8002e8a <main+0x416>
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
			  aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 8002e16:	4ba5      	ldr	r3, [pc, #660]	@ (80030ac <main+0x638>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002e1a:	469c      	mov	ip, r3
			  aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 8002e1c:	4ba3      	ldr	r3, [pc, #652]	@ (80030ac <main+0x638>)
 8002e1e:	785b      	ldrb	r3, [r3, #1]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002e20:	469e      	mov	lr, r3
			  aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 8002e22:	4ba2      	ldr	r3, [pc, #648]	@ (80030ac <main+0x638>)
 8002e24:	789b      	ldrb	r3, [r3, #2]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002e26:	4698      	mov	r8, r3
			  aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8002e28:	4ba0      	ldr	r3, [pc, #640]	@ (80030ac <main+0x638>)
 8002e2a:	78db      	ldrb	r3, [r3, #3]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002e2c:	461a      	mov	r2, r3
			  aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8002e2e:	4b9f      	ldr	r3, [pc, #636]	@ (80030ac <main+0x638>)
 8002e30:	791b      	ldrb	r3, [r3, #4]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002e32:	4619      	mov	r1, r3
			  aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8002e34:	4b9d      	ldr	r3, [pc, #628]	@ (80030ac <main+0x638>)
 8002e36:	795b      	ldrb	r3, [r3, #5]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002e38:	4618      	mov	r0, r3
			  aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 8002e3a:	4b9c      	ldr	r3, [pc, #624]	@ (80030ac <main+0x638>)
 8002e3c:	799b      	ldrb	r3, [r3, #6]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002e3e:	461c      	mov	r4, r3
			  aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 8002e40:	4b9a      	ldr	r3, [pc, #616]	@ (80030ac <main+0x638>)
 8002e42:	79db      	ldrb	r3, [r3, #7]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002e44:	461d      	mov	r5, r3
			  aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 8002e46:	4b99      	ldr	r3, [pc, #612]	@ (80030ac <main+0x638>)
 8002e48:	7a1b      	ldrb	r3, [r3, #8]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002e4a:	461e      	mov	r6, r3
			  aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 8002e4c:	4b97      	ldr	r3, [pc, #604]	@ (80030ac <main+0x638>)
 8002e4e:	7a5b      	ldrb	r3, [r3, #9]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002e50:	60fb      	str	r3, [r7, #12]
			  aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 8002e52:	4b96      	ldr	r3, [pc, #600]	@ (80030ac <main+0x638>)
 8002e54:	7a9b      	ldrb	r3, [r3, #10]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002e56:	60bb      	str	r3, [r7, #8]
			  aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 8002e58:	4b94      	ldr	r3, [pc, #592]	@ (80030ac <main+0x638>)
 8002e5a:	7adb      	ldrb	r3, [r3, #11]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002e5c:	607b      	str	r3, [r7, #4]
			  aircraft_lights.mode);
 8002e5e:	4b93      	ldr	r3, [pc, #588]	@ (80030ac <main+0x638>)
 8002e60:	7b1b      	ldrb	r3, [r3, #12]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8002e62:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	9308      	str	r3, [sp, #32]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	9307      	str	r3, [sp, #28]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	9306      	str	r3, [sp, #24]
 8002e70:	9605      	str	r6, [sp, #20]
 8002e72:	9504      	str	r5, [sp, #16]
 8002e74:	9403      	str	r4, [sp, #12]
 8002e76:	9002      	str	r0, [sp, #8]
 8002e78:	9101      	str	r1, [sp, #4]
 8002e7a:	9200      	str	r2, [sp, #0]
 8002e7c:	4643      	mov	r3, r8
 8002e7e:	4672      	mov	r2, lr
 8002e80:	4661      	mov	r1, ip
 8002e82:	488b      	ldr	r0, [pc, #556]	@ (80030b0 <main+0x63c>)
 8002e84:	f00e fd9a 	bl	80119bc <iprintf>
 8002e88:	e002      	b.n	8002e90 <main+0x41c>
  } else {
	  printf("Failed to read Aircraft Lights\r\n");
 8002e8a:	488a      	ldr	r0, [pc, #552]	@ (80030b4 <main+0x640>)
 8002e8c:	f00e fe06 	bl	8011a9c <puts>
  //
  //          yaw_rate_pid.kp = eeprom_yaw_rate_pid_read.kp;
  //          yaw_rate_pid.ki = eeprom_yaw_rate_pid_read.ki;
  //          yaw_rate_pid.kd = eeprom_yaw_rate_pid_read.kd;

  printf("\n");
 8002e90:	200a      	movs	r0, #10
 8002e92:	f00e fda5 	bl	80119e0 <putchar>

  /* *********** ESC Startup Calibration ************ */
  HAL_Delay(3000);
 8002e96:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002e9a:	f002 fb41 	bl	8005520 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4885      	ldr	r0, [pc, #532]	@ (80030b8 <main+0x644>)
 8002ea2:	f00a fc1b 	bl	800d6dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002ea6:	2104      	movs	r1, #4
 8002ea8:	4883      	ldr	r0, [pc, #524]	@ (80030b8 <main+0x644>)
 8002eaa:	f00a fc17 	bl	800d6dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8002eae:	2108      	movs	r1, #8
 8002eb0:	4881      	ldr	r0, [pc, #516]	@ (80030b8 <main+0x644>)
 8002eb2:	f00a fc13 	bl	800d6dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8002eb6:	210c      	movs	r1, #12
 8002eb8:	487f      	ldr	r0, [pc, #508]	@ (80030b8 <main+0x644>)
 8002eba:	f00a fc0f 	bl	800d6dc <HAL_TIM_PWM_Start>
//  Buzzer_On(292);
//  HAL_Delay(100);
//  Buzzer_Off();
  /* *********** iBus Throttle Check END ************ */

  LL_TIM_EnableCounter(TIM7);
 8002ebe:	487f      	ldr	r0, [pc, #508]	@ (80030bc <main+0x648>)
 8002ec0:	f7ff fcd0 	bl	8002864 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 8002ec4:	487d      	ldr	r0, [pc, #500]	@ (80030bc <main+0x648>)
 8002ec6:	f7ff fcdd 	bl	8002884 <LL_TIM_EnableIT_UPDATE>

  if(ICM42688P_Initialization() == 0)
 8002eca:	f7fe ffc5 	bl	8001e58 <ICM42688P_Initialization>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <main+0x466>
  {
	  printf("=== Sensor Ready ===\n\n");
 8002ed4:	487a      	ldr	r0, [pc, #488]	@ (80030c0 <main+0x64c>)
 8002ed6:	f00e fde1 	bl	8011a9c <puts>

  }



  HMC5883L_Init();
 8002eda:	f7fe fcc7 	bl	800186c <HMC5883L_Init>
  uint8_t hmc_id = HMC5883L_ReadReg(HMC5883L_ID_A);
 8002ede:	200a      	movs	r0, #10
 8002ee0:	f7fe fca6 	bl	8001830 <HMC5883L_ReadReg>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
  printf("HMC5883L ID: %c\n", hmc_id);
 8002eea:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4874      	ldr	r0, [pc, #464]	@ (80030c4 <main+0x650>)
 8002ef2:	f00e fd63 	bl	80119bc <iprintf>
  printf("\n");
 8002ef6:	200a      	movs	r0, #10
 8002ef8:	f00e fd72 	bl	80119e0 <putchar>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(tim7_1ms_flag == 1)
 8002efc:	4b72      	ldr	r3, [pc, #456]	@ (80030c8 <main+0x654>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d102      	bne.n	8002f0a <main+0x496>
	  {
		  tim7_1ms_flag = 0;
 8002f04:	4b70      	ldr	r3, [pc, #448]	@ (80030c8 <main+0x654>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	801a      	strh	r2, [r3, #0]
//				  ICM42688P.acc_z);

//		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
	  }

	  if(tim7_20ms_flag == 1)
 8002f0a:	4b70      	ldr	r3, [pc, #448]	@ (80030cc <main+0x658>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d102      	bne.n	8002f18 <main+0x4a4>
	  {
		  tim7_20ms_flag = 0;
 8002f12:	4b6e      	ldr	r3, [pc, #440]	@ (80030cc <main+0x658>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	801a      	strh	r2, [r3, #0]


	  }

	  if(tim7_50ms_flag == 1)
 8002f18:	4b6d      	ldr	r3, [pc, #436]	@ (80030d0 <main+0x65c>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d102      	bne.n	8002f26 <main+0x4b2>
	  {
		  tim7_50ms_flag = 0;
 8002f20:	4b6b      	ldr	r3, [pc, #428]	@ (80030d0 <main+0x65c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	801a      	strh	r2, [r3, #0]

//		  main_led(0, 0, 255, 0, 0);

	  }

	  if(tim7_100ms_flag == 1)
 8002f26:	4b6b      	ldr	r3, [pc, #428]	@ (80030d4 <main+0x660>)
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d106      	bne.n	8002f3c <main+0x4c8>
	  {
		  tim7_100ms_flag = 0;
 8002f2e:	4b69      	ldr	r3, [pc, #420]	@ (80030d4 <main+0x660>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	801a      	strh	r2, [r3, #0]

		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8002f34:	2120      	movs	r1, #32
 8002f36:	4868      	ldr	r0, [pc, #416]	@ (80030d8 <main+0x664>)
 8002f38:	f005 f987 	bl	800824a <HAL_GPIO_TogglePin>


	  }

	  if(tim7_200ms_flag == 1)
 8002f3c:	4b67      	ldr	r3, [pc, #412]	@ (80030dc <main+0x668>)
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d102      	bne.n	8002f4a <main+0x4d6>
	  {
		  tim7_200ms_flag = 0;
 8002f44:	4b65      	ldr	r3, [pc, #404]	@ (80030dc <main+0x668>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	801a      	strh	r2, [r3, #0]

//		  main_led(0, 0, 255, 0, 1);
	  }

	  if(tim7_1000ms_flag == 1)
 8002f4a:	4b65      	ldr	r3, [pc, #404]	@ (80030e0 <main+0x66c>)
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d102      	bne.n	8002f58 <main+0x4e4>
	  {
		  tim7_1000ms_flag = 0;
 8002f52:	4b63      	ldr	r3, [pc, #396]	@ (80030e0 <main+0x66c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	801a      	strh	r2, [r3, #0]
//		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);

	  }


	  if(ICM42688P_DataReady() == 1)
 8002f58:	f7ff f866 	bl	8002028 <ICM42688P_DataReady>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d1cc      	bne.n	8002efc <main+0x488>
	  {

		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8002f62:	2108      	movs	r1, #8
 8002f64:	485c      	ldr	r0, [pc, #368]	@ (80030d8 <main+0x664>)
 8002f66:	f005 f970 	bl	800824a <HAL_GPIO_TogglePin>

		  ICM42688P_Get6AxisRawData(&ICM42688P.acc_x_raw, &ICM42688P.gyro_x_raw);
 8002f6a:	495e      	ldr	r1, [pc, #376]	@ (80030e4 <main+0x670>)
 8002f6c:	485e      	ldr	r0, [pc, #376]	@ (80030e8 <main+0x674>)
 8002f6e:	f7ff f80b 	bl	8001f88 <ICM42688P_Get6AxisRawData>

		  // Apply gyro offsets in software (subtract offsets from raw data)
		  int16_t gyro_x_corrected = ICM42688P.gyro_x_raw + gyro_offsets_lsb[0];	//  8
 8002f72:	4b5d      	ldr	r3, [pc, #372]	@ (80030e8 <main+0x674>)
 8002f74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80030ec <main+0x678>)
 8002f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
		  int16_t gyro_y_corrected = ICM42688P.gyro_y_raw + gyro_offsets_lsb[1];	//  4
 8002f8a:	4b57      	ldr	r3, [pc, #348]	@ (80030e8 <main+0x674>)
 8002f8c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	4b56      	ldr	r3, [pc, #344]	@ (80030ec <main+0x678>)
 8002f94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
		  int16_t gyro_z_corrected = ICM42688P.gyro_z_raw + gyro_offsets_lsb[2];	// -2
 8002fa2:	4b51      	ldr	r3, [pc, #324]	@ (80030e8 <main+0x674>)
 8002fa4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	4b50      	ldr	r3, [pc, #320]	@ (80030ec <main+0x678>)
 8002fac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134

		  ICM42688P.gyro_x = gyro_x_corrected * 2000.f / 32768.f;
 8002fba:	f9b7 3138 	ldrsh.w	r3, [r7, #312]	@ 0x138
 8002fbe:	ee07 3a90 	vmov	s15, r3
 8002fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fc6:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80030f0 <main+0x67c>
 8002fca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fce:	eddf 6a49 	vldr	s13, [pc, #292]	@ 80030f4 <main+0x680>
 8002fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fd6:	4b44      	ldr	r3, [pc, #272]	@ (80030e8 <main+0x674>)
 8002fd8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		  ICM42688P.gyro_y = gyro_y_corrected * 2000.f / 32768.f;
 8002fdc:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	@ 0x136
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe8:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80030f0 <main+0x67c>
 8002fec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ff0:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80030f4 <main+0x680>
 8002ff4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80030e8 <main+0x674>)
 8002ffa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		  ICM42688P.gyro_z = gyro_z_corrected * 2000.f / 32768.f;
 8002ffe:	f9b7 3134 	ldrsh.w	r3, [r7, #308]	@ 0x134
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800300a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80030f0 <main+0x67c>
 800300e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003012:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80030f4 <main+0x680>
 8003016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800301a:	4b33      	ldr	r3, [pc, #204]	@ (80030e8 <main+0x674>)
 800301c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		  ICM42688P.acc_x = ICM42688P.acc_x_raw * 0.0004883f;
 8003020:	4b31      	ldr	r3, [pc, #196]	@ (80030e8 <main+0x674>)
 8003022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800302e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80030f8 <main+0x684>
 8003032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003036:	4b2c      	ldr	r3, [pc, #176]	@ (80030e8 <main+0x674>)
 8003038:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM42688P.acc_y = ICM42688P.acc_y_raw * 0.0004883f;
 800303c:	4b2a      	ldr	r3, [pc, #168]	@ (80030e8 <main+0x674>)
 800303e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800304a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80030f8 <main+0x684>
 800304e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003052:	4b25      	ldr	r3, [pc, #148]	@ (80030e8 <main+0x674>)
 8003054:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM42688P.acc_z = ICM42688P.acc_z_raw * 0.0004883f;
 8003058:	4b23      	ldr	r3, [pc, #140]	@ (80030e8 <main+0x674>)
 800305a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003066:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80030f8 <main+0x684>
 800306a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800306e:	4b1e      	ldr	r3, [pc, #120]	@ (80030e8 <main+0x674>)
 8003070:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
//		  printf("%d, %d, %d, %d, %d, %d\n",
//				  (int)(ICM42688P.gyro_x*100), (int)(ICM42688P.gyro_y*100), (int)(ICM42688P.gyro_z*100),
//				  (int)(ICM42688P.acc_x), (int)(ICM42688P.acc_x), (int)(ICM42688P.acc_x));

		  printf("%d, %d, %d\n",
				  (int)(ICM42688P.gyro_x), (int)(ICM42688P.gyro_y), (int)(ICM42688P.gyro_z));
 8003074:	4b1c      	ldr	r3, [pc, #112]	@ (80030e8 <main+0x674>)
 8003076:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
		  printf("%d, %d, %d\n",
 800307a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
				  (int)(ICM42688P.gyro_x), (int)(ICM42688P.gyro_y), (int)(ICM42688P.gyro_z));
 800307e:	4b1a      	ldr	r3, [pc, #104]	@ (80030e8 <main+0x674>)
 8003080:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
		  printf("%d, %d, %d\n",
 8003084:	eefd 6ae7 	vcvt.s32.f32	s13, s15
				  (int)(ICM42688P.gyro_x), (int)(ICM42688P.gyro_y), (int)(ICM42688P.gyro_z));
 8003088:	4b17      	ldr	r3, [pc, #92]	@ (80030e8 <main+0x674>)
 800308a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
		  printf("%d, %d, %d\n",
 800308e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003092:	ee17 3a90 	vmov	r3, s15
 8003096:	ee16 2a90 	vmov	r2, s13
 800309a:	ee17 1a10 	vmov	r1, s14
 800309e:	4817      	ldr	r0, [pc, #92]	@ (80030fc <main+0x688>)
 80030a0:	f00e fc8c 	bl	80119bc <iprintf>
	  if(tim7_1ms_flag == 1)
 80030a4:	e72a      	b.n	8002efc <main+0x488>
 80030a6:	bf00      	nop
 80030a8:	080170fc 	.word	0x080170fc
 80030ac:	24000534 	.word	0x24000534
 80030b0:	0801711c 	.word	0x0801711c
 80030b4:	08017188 	.word	0x08017188
 80030b8:	2400067c 	.word	0x2400067c
 80030bc:	40001400 	.word	0x40001400
 80030c0:	080171a8 	.word	0x080171a8
 80030c4:	080171c0 	.word	0x080171c0
 80030c8:	240005c6 	.word	0x240005c6
 80030cc:	240005ca 	.word	0x240005ca
 80030d0:	240005cc 	.word	0x240005cc
 80030d4:	240005ce 	.word	0x240005ce
 80030d8:	58021000 	.word	0x58021000
 80030dc:	240005d0 	.word	0x240005d0
 80030e0:	240005d2 	.word	0x240005d2
 80030e4:	2400020c 	.word	0x2400020c
 80030e8:	24000204 	.word	0x24000204
 80030ec:	24000004 	.word	0x24000004
 80030f0:	44fa0000 	.word	0x44fa0000
 80030f4:	47000000 	.word	0x47000000
 80030f8:	3a000142 	.word	0x3a000142
 80030fc:	080171d4 	.word	0x080171d4

08003100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b09c      	sub	sp, #112	@ 0x70
 8003104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800310a:	224c      	movs	r2, #76	@ 0x4c
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f00e fe0e 	bl	8011d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003114:	1d3b      	adds	r3, r7, #4
 8003116:	2220      	movs	r2, #32
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f00e fe08 	bl	8011d30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003120:	2002      	movs	r0, #2
 8003122:	f007 ff35 	bl	800af90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003126:	2300      	movs	r3, #0
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	4b2b      	ldr	r3, [pc, #172]	@ (80031d8 <SystemClock_Config+0xd8>)
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	4a2a      	ldr	r2, [pc, #168]	@ (80031d8 <SystemClock_Config+0xd8>)
 8003130:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003134:	6193      	str	r3, [r2, #24]
 8003136:	4b28      	ldr	r3, [pc, #160]	@ (80031d8 <SystemClock_Config+0xd8>)
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003142:	bf00      	nop
 8003144:	4b24      	ldr	r3, [pc, #144]	@ (80031d8 <SystemClock_Config+0xd8>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800314c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003150:	d1f8      	bne.n	8003144 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003152:	2301      	movs	r3, #1
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003156:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800315a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800315c:	2302      	movs	r3, #2
 800315e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003160:	2302      	movs	r3, #2
 8003162:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003164:	2302      	movs	r3, #2
 8003166:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8003168:	232c      	movs	r3, #44	@ 0x2c
 800316a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800316c:	2301      	movs	r3, #1
 800316e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003170:	2303      	movs	r3, #3
 8003172:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003174:	2302      	movs	r3, #2
 8003176:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003178:	230c      	movs	r3, #12
 800317a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800317c:	2300      	movs	r3, #0
 800317e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003188:	4618      	mov	r0, r3
 800318a:	f007 ff3b 	bl	800b004 <HAL_RCC_OscConfig>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003194:	f000 f84e 	bl	8003234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003198:	233f      	movs	r3, #63	@ 0x3f
 800319a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800319c:	2303      	movs	r3, #3
 800319e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80031a4:	2308      	movs	r3, #8
 80031a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80031a8:	2340      	movs	r3, #64	@ 0x40
 80031aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80031ac:	2340      	movs	r3, #64	@ 0x40
 80031ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80031b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80031b6:	2340      	movs	r3, #64	@ 0x40
 80031b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	2103      	movs	r1, #3
 80031be:	4618      	mov	r0, r3
 80031c0:	f008 fafa 	bl	800b7b8 <HAL_RCC_ClockConfig>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <SystemClock_Config+0xce>
  {
    Error_Handler();
 80031ca:	f000 f833 	bl	8003234 <Error_Handler>
  }
}
 80031ce:	bf00      	nop
 80031d0:	3770      	adds	r7, #112	@ 0x70
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	58024800 	.word	0x58024800

080031dc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80031e2:	463b      	mov	r3, r7
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80031ee:	f002 facb 	bl	8005788 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80031f2:	2301      	movs	r3, #1
 80031f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80031fe:	231f      	movs	r3, #31
 8003200:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003202:	2387      	movs	r3, #135	@ 0x87
 8003204:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003206:	2300      	movs	r3, #0
 8003208:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800320a:	2300      	movs	r3, #0
 800320c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800320e:	2301      	movs	r3, #1
 8003210:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003212:	2301      	movs	r3, #1
 8003214:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003216:	2300      	movs	r3, #0
 8003218:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800321e:	463b      	mov	r3, r7
 8003220:	4618      	mov	r0, r3
 8003222:	f002 fae9 	bl	80057f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003226:	2004      	movs	r0, #4
 8003228:	f002 fac6 	bl	80057b8 <HAL_MPU_Enable>

}
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003238:	b672      	cpsid	i
}
 800323a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800323c:	bf00      	nop
 800323e:	e7fd      	b.n	800323c <Error_Handler+0x8>

08003240 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8003246:	463b      	mov	r3, r7
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
 8003254:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8003256:	4b28      	ldr	r3, [pc, #160]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 8003258:	4a28      	ldr	r2, [pc, #160]	@ (80032fc <MX_OCTOSPI1_Init+0xbc>)
 800325a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800325c:	4b26      	ldr	r3, [pc, #152]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 800325e:	2201      	movs	r2, #1
 8003260:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8003262:	4b25      	ldr	r3, [pc, #148]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8003268:	4b23      	ldr	r3, [pc, #140]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 800326e:	4b22      	ldr	r3, [pc, #136]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 8003270:	2217      	movs	r2, #23
 8003272:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8003274:	4b20      	ldr	r3, [pc, #128]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 8003276:	2202      	movs	r2, #2
 8003278:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800327a:	4b1f      	ldr	r3, [pc, #124]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 800327c:	2200      	movs	r2, #0
 800327e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_3;
 8003280:	4b1d      	ldr	r3, [pc, #116]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 8003282:	2201      	movs	r2, #1
 8003284:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8003286:	4b1c      	ldr	r3, [pc, #112]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 8003288:	2200      	movs	r2, #0
 800328a:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3-1;
 800328c:	4b1a      	ldr	r3, [pc, #104]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 800328e:	2202      	movs	r2, #2
 8003290:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003292:	4b19      	ldr	r3, [pc, #100]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 8003294:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003298:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800329a:	4b17      	ldr	r3, [pc, #92]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 800329c:	2200      	movs	r2, #0
 800329e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80032a0:	4b15      	ldr	r3, [pc, #84]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80032a6:	4b14      	ldr	r3, [pc, #80]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 80032a8:	2208      	movs	r2, #8
 80032aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 80032ac:	4b12      	ldr	r3, [pc, #72]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 80032b2:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80032b8:	480f      	ldr	r0, [pc, #60]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 80032ba:	f006 fca3 	bl	8009c04 <HAL_OSPI_Init>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 80032c4:	f7ff ffb6 	bl	8003234 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80032c8:	2301      	movs	r3, #1
 80032ca:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 80032cc:	2301      	movs	r3, #1
 80032ce:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80032d0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80032d4:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032d6:	463b      	mov	r3, r7
 80032d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032dc:	4619      	mov	r1, r3
 80032de:	4806      	ldr	r0, [pc, #24]	@ (80032f8 <MX_OCTOSPI1_Init+0xb8>)
 80032e0:	f006 fefe 	bl	800a0e0 <HAL_OSPIM_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 80032ea:	f7ff ffa3 	bl	8003234 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	24000544 	.word	0x24000544
 80032fc:	52005000 	.word	0x52005000

08003300 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b0bc      	sub	sp, #240	@ 0xf0
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003318:	f107 0320 	add.w	r3, r7, #32
 800331c:	22b8      	movs	r2, #184	@ 0xb8
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f00e fd05 	bl	8011d30 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a5d      	ldr	r2, [pc, #372]	@ (80034a0 <HAL_OSPI_MspInit+0x1a0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	f040 80b2 	bne.w	8003496 <HAL_OSPI_MspInit+0x196>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003332:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 800333e:	2300      	movs	r3, #0
 8003340:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003342:	f107 0320 	add.w	r3, r7, #32
 8003346:	4618      	mov	r0, r3
 8003348:	f008 fd66 	bl	800be18 <HAL_RCCEx_PeriphCLKConfig>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8003352:	f7ff ff6f 	bl	8003234 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8003356:	4b53      	ldr	r3, [pc, #332]	@ (80034a4 <HAL_OSPI_MspInit+0x1a4>)
 8003358:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800335c:	4a51      	ldr	r2, [pc, #324]	@ (80034a4 <HAL_OSPI_MspInit+0x1a4>)
 800335e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003362:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003366:	4b4f      	ldr	r3, [pc, #316]	@ (80034a4 <HAL_OSPI_MspInit+0x1a4>)
 8003368:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800336c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003374:	4b4b      	ldr	r3, [pc, #300]	@ (80034a4 <HAL_OSPI_MspInit+0x1a4>)
 8003376:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800337a:	4a4a      	ldr	r2, [pc, #296]	@ (80034a4 <HAL_OSPI_MspInit+0x1a4>)
 800337c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003380:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003384:	4b47      	ldr	r3, [pc, #284]	@ (80034a4 <HAL_OSPI_MspInit+0x1a4>)
 8003386:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800338a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800338e:	61bb      	str	r3, [r7, #24]
 8003390:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003392:	4b44      	ldr	r3, [pc, #272]	@ (80034a4 <HAL_OSPI_MspInit+0x1a4>)
 8003394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003398:	4a42      	ldr	r2, [pc, #264]	@ (80034a4 <HAL_OSPI_MspInit+0x1a4>)
 800339a:	f043 0310 	orr.w	r3, r3, #16
 800339e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033a2:	4b40      	ldr	r3, [pc, #256]	@ (80034a4 <HAL_OSPI_MspInit+0x1a4>)
 80033a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b0:	4b3c      	ldr	r3, [pc, #240]	@ (80034a4 <HAL_OSPI_MspInit+0x1a4>)
 80033b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033b6:	4a3b      	ldr	r2, [pc, #236]	@ (80034a4 <HAL_OSPI_MspInit+0x1a4>)
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033c0:	4b38      	ldr	r3, [pc, #224]	@ (80034a4 <HAL_OSPI_MspInit+0x1a4>)
 80033c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ce:	4b35      	ldr	r3, [pc, #212]	@ (80034a4 <HAL_OSPI_MspInit+0x1a4>)
 80033d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033d4:	4a33      	ldr	r2, [pc, #204]	@ (80034a4 <HAL_OSPI_MspInit+0x1a4>)
 80033d6:	f043 0308 	orr.w	r3, r3, #8
 80033da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033de:	4b31      	ldr	r3, [pc, #196]	@ (80034a4 <HAL_OSPI_MspInit+0x1a4>)
 80033e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PD13     ------> OCTOSPIM_P1_IO3
    PB6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033ec:	2304      	movs	r3, #4
 80033ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f2:	2302      	movs	r3, #2
 80033f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fe:	2303      	movs	r3, #3
 8003400:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8003404:	2309      	movs	r3, #9
 8003406:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800340a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800340e:	4619      	mov	r1, r3
 8003410:	4825      	ldr	r0, [pc, #148]	@ (80034a8 <HAL_OSPI_MspInit+0x1a8>)
 8003412:	f004 fd59 	bl	8007ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003416:	2304      	movs	r3, #4
 8003418:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003428:	2303      	movs	r3, #3
 800342a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800342e:	2309      	movs	r3, #9
 8003430:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003434:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003438:	4619      	mov	r1, r3
 800343a:	481c      	ldr	r0, [pc, #112]	@ (80034ac <HAL_OSPI_MspInit+0x1ac>)
 800343c:	f004 fd44 	bl	8007ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003440:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003444:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003448:	2302      	movs	r3, #2
 800344a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003454:	2303      	movs	r3, #3
 8003456:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800345a:	2309      	movs	r3, #9
 800345c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003460:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003464:	4619      	mov	r1, r3
 8003466:	4812      	ldr	r0, [pc, #72]	@ (80034b0 <HAL_OSPI_MspInit+0x1b0>)
 8003468:	f004 fd2e 	bl	8007ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800346c:	2340      	movs	r3, #64	@ 0x40
 800346e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003472:	2302      	movs	r3, #2
 8003474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800347e:	2303      	movs	r3, #3
 8003480:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8003484:	230a      	movs	r3, #10
 8003486:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800348e:	4619      	mov	r1, r3
 8003490:	4806      	ldr	r0, [pc, #24]	@ (80034ac <HAL_OSPI_MspInit+0x1ac>)
 8003492:	f004 fd19 	bl	8007ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8003496:	bf00      	nop
 8003498:	37f0      	adds	r7, #240	@ 0xf0
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	52005000 	.word	0x52005000
 80034a4:	58024400 	.word	0x58024400
 80034a8:	58021000 	.word	0x58021000
 80034ac:	58020400 	.word	0x58020400
 80034b0:	58020c00 	.word	0x58020c00

080034b4 <__NVIC_GetPriorityGrouping>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034b8:	4b04      	ldr	r3, [pc, #16]	@ (80034cc <__NVIC_GetPriorityGrouping+0x18>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	0a1b      	lsrs	r3, r3, #8
 80034be:	f003 0307 	and.w	r3, r3, #7
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <__NVIC_EnableIRQ>:
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	db0b      	blt.n	80034fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	f003 021f 	and.w	r2, r3, #31
 80034e8:	4907      	ldr	r1, [pc, #28]	@ (8003508 <__NVIC_EnableIRQ+0x38>)
 80034ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	2001      	movs	r0, #1
 80034f2:	fa00 f202 	lsl.w	r2, r0, r2
 80034f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	e000e100 	.word	0xe000e100

0800350c <__NVIC_SetPriority>:
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	6039      	str	r1, [r7, #0]
 8003516:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003518:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800351c:	2b00      	cmp	r3, #0
 800351e:	db0a      	blt.n	8003536 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	490c      	ldr	r1, [pc, #48]	@ (8003558 <__NVIC_SetPriority+0x4c>)
 8003526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800352a:	0112      	lsls	r2, r2, #4
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	440b      	add	r3, r1
 8003530:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003534:	e00a      	b.n	800354c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	b2da      	uxtb	r2, r3
 800353a:	4908      	ldr	r1, [pc, #32]	@ (800355c <__NVIC_SetPriority+0x50>)
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	3b04      	subs	r3, #4
 8003544:	0112      	lsls	r2, r2, #4
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	440b      	add	r3, r1
 800354a:	761a      	strb	r2, [r3, #24]
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000e100 	.word	0xe000e100
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <NVIC_EncodePriority>:
{
 8003560:	b480      	push	{r7}
 8003562:	b089      	sub	sp, #36	@ 0x24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f1c3 0307 	rsb	r3, r3, #7
 800357a:	2b04      	cmp	r3, #4
 800357c:	bf28      	it	cs
 800357e:	2304      	movcs	r3, #4
 8003580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3304      	adds	r3, #4
 8003586:	2b06      	cmp	r3, #6
 8003588:	d902      	bls.n	8003590 <NVIC_EncodePriority+0x30>
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3b03      	subs	r3, #3
 800358e:	e000      	b.n	8003592 <NVIC_EncodePriority+0x32>
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003594:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43da      	mvns	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	401a      	ands	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	fa01 f303 	lsl.w	r3, r1, r3
 80035b2:	43d9      	mvns	r1, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b8:	4313      	orrs	r3, r2
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3724      	adds	r7, #36	@ 0x24
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <LL_SPI_SetStandard>:
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	60da      	str	r2, [r3, #12]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_SPI_SetFIFOThreshold>:
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	609a      	str	r2, [r3, #8]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <LL_SPI_EnableNSSPulseMgt>:
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	60da      	str	r2, [r3, #12]
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <LL_AHB4_GRP1_EnableClock>:
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 800363c:	4b0a      	ldr	r3, [pc, #40]	@ (8003668 <LL_AHB4_GRP1_EnableClock+0x34>)
 800363e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003642:	4909      	ldr	r1, [pc, #36]	@ (8003668 <LL_AHB4_GRP1_EnableClock+0x34>)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 800364c:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <LL_AHB4_GRP1_EnableClock+0x34>)
 800364e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4013      	ands	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003658:	68fb      	ldr	r3, [r7, #12]
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	58024400 	.word	0x58024400

0800366c <LL_APB1_GRP1_EnableClock>:
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8003674:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <LL_APB1_GRP1_EnableClock+0x34>)
 8003676:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800367a:	4909      	ldr	r1, [pc, #36]	@ (80036a0 <LL_APB1_GRP1_EnableClock+0x34>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8003684:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <LL_APB1_GRP1_EnableClock+0x34>)
 8003686:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4013      	ands	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003690:	68fb      	ldr	r3, [r7, #12]
}
 8003692:	bf00      	nop
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	58024400 	.word	0x58024400

080036a4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 80036b4:	4a0d      	ldr	r2, [pc, #52]	@ (80036ec <LL_DMA_SetDataTransferDirection+0x48>)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	4413      	add	r3, r2
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	4413      	add	r3, r2
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036c8:	4908      	ldr	r1, [pc, #32]	@ (80036ec <LL_DMA_SetDataTransferDirection+0x48>)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	440b      	add	r3, r1
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	4619      	mov	r1, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	440b      	add	r3, r1
 80036d6:	4619      	mov	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]
}
 80036de:	bf00      	nop
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	080172a0 	.word	0x080172a0

080036f0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8003700:	4a0d      	ldr	r2, [pc, #52]	@ (8003738 <LL_DMA_SetMode+0x48>)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4413      	add	r3, r2
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	4413      	add	r3, r2
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8003714:	4908      	ldr	r1, [pc, #32]	@ (8003738 <LL_DMA_SetMode+0x48>)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	440b      	add	r3, r1
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	4619      	mov	r1, r3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	440b      	add	r3, r1
 8003722:	4619      	mov	r1, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]
}
 800372a:	bf00      	nop
 800372c:	371c      	adds	r7, #28
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	080172a0 	.word	0x080172a0

0800373c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 800374c:	4a0d      	ldr	r2, [pc, #52]	@ (8003784 <LL_DMA_SetPeriphIncMode+0x48>)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4413      	add	r3, r2
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	4413      	add	r3, r2
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003760:	4908      	ldr	r1, [pc, #32]	@ (8003784 <LL_DMA_SetPeriphIncMode+0x48>)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	440b      	add	r3, r1
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	4619      	mov	r1, r3
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	440b      	add	r3, r1
 800376e:	4619      	mov	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	080172a0 	.word	0x080172a0

08003788 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 8003798:	4a0d      	ldr	r2, [pc, #52]	@ (80037d0 <LL_DMA_SetMemoryIncMode+0x48>)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4413      	add	r3, r2
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	4413      	add	r3, r2
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80037ac:	4908      	ldr	r1, [pc, #32]	@ (80037d0 <LL_DMA_SetMemoryIncMode+0x48>)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	440b      	add	r3, r1
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	4619      	mov	r1, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	440b      	add	r3, r1
 80037ba:	4619      	mov	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	080172a0 	.word	0x080172a0

080037d4 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 80037e4:	4a0d      	ldr	r2, [pc, #52]	@ (800381c <LL_DMA_SetPeriphSize+0x48>)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	4413      	add	r3, r2
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	4413      	add	r3, r2
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80037f8:	4908      	ldr	r1, [pc, #32]	@ (800381c <LL_DMA_SetPeriphSize+0x48>)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	440b      	add	r3, r1
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	4619      	mov	r1, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	440b      	add	r3, r1
 8003806:	4619      	mov	r1, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]
}
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	080172a0 	.word	0x080172a0

08003820 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 8003830:	4a0d      	ldr	r2, [pc, #52]	@ (8003868 <LL_DMA_SetMemorySize+0x48>)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4413      	add	r3, r2
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	4413      	add	r3, r2
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8003844:	4908      	ldr	r1, [pc, #32]	@ (8003868 <LL_DMA_SetMemorySize+0x48>)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	440b      	add	r3, r1
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	4619      	mov	r1, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	440b      	add	r3, r1
 8003852:	4619      	mov	r1, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	080172a0 	.word	0x080172a0

0800386c <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 800387c:	4a0d      	ldr	r2, [pc, #52]	@ (80038b4 <LL_DMA_SetStreamPriorityLevel+0x48>)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4413      	add	r3, r2
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	4413      	add	r3, r2
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003890:	4908      	ldr	r1, [pc, #32]	@ (80038b4 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	440b      	add	r3, r1
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	4619      	mov	r1, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	440b      	add	r3, r1
 800389e:	4619      	mov	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]
}
 80038a6:	bf00      	nop
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	080172a0 	.word	0x080172a0

080038b8 <LL_DMA_SetPeriphRequest>:
  *
  * @note   (*) Availability depends on devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Request)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	4b12      	ldr	r3, [pc, #72]	@ (8003910 <LL_DMA_SetPeriphRequest+0x58>)
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4911      	ldr	r1, [pc, #68]	@ (8003914 <LL_DMA_SetPeriphRequest+0x5c>)
 80038d0:	428a      	cmp	r2, r1
 80038d2:	d101      	bne.n	80038d8 <LL_DMA_SetPeriphRequest+0x20>
 80038d4:	2200      	movs	r2, #0
 80038d6:	e000      	b.n	80038da <LL_DMA_SetPeriphRequest+0x22>
 80038d8:	2220      	movs	r2, #32
 80038da:	4413      	add	r3, r2
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003910 <LL_DMA_SetPeriphRequest+0x58>)
 80038e6:	440b      	add	r3, r1
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	68f9      	ldr	r1, [r7, #12]
 80038ec:	4809      	ldr	r0, [pc, #36]	@ (8003914 <LL_DMA_SetPeriphRequest+0x5c>)
 80038ee:	4281      	cmp	r1, r0
 80038f0:	d101      	bne.n	80038f6 <LL_DMA_SetPeriphRequest+0x3e>
 80038f2:	2100      	movs	r1, #0
 80038f4:	e000      	b.n	80038f8 <LL_DMA_SetPeriphRequest+0x40>
 80038f6:	2120      	movs	r1, #32
 80038f8:	440b      	add	r3, r1
 80038fa:	4619      	mov	r1, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4313      	orrs	r3, r2
 8003900:	600b      	str	r3, [r1, #0]
}
 8003902:	bf00      	nop
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	10008200 	.word	0x10008200
 8003914:	40020000 	.word	0x40020000

08003918 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 8003926:	4a0c      	ldr	r2, [pc, #48]	@ (8003958 <LL_DMA_DisableFifoMode+0x40>)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	4413      	add	r3, r2
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4413      	add	r3, r2
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4908      	ldr	r1, [pc, #32]	@ (8003958 <LL_DMA_DisableFifoMode+0x40>)
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	440a      	add	r2, r1
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	4611      	mov	r1, r2
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	440a      	add	r2, r1
 8003944:	f023 0304 	bic.w	r3, r3, #4
 8003948:	6153      	str	r3, [r2, #20]
}
 800394a:	bf00      	nop
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	080172a0 	.word	0x080172a0

0800395c <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b0be      	sub	sp, #248	@ 0xf8
 8003960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003962:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8003966:	2228      	movs	r2, #40	@ 0x28
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f00e f9e0 	bl	8011d30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003970:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	611a      	str	r2, [r3, #16]
 8003980:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003982:	463b      	mov	r3, r7
 8003984:	22b8      	movs	r2, #184	@ 0xb8
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f00e f9d1 	bl	8011d30 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800398e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800399a:	2300      	movs	r3, #0
 800399c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800399e:	463b      	mov	r3, r7
 80039a0:	4618      	mov	r0, r3
 80039a2:	f008 fa39 	bl	800be18 <HAL_RCCEx_PeriphCLKConfig>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <MX_SPI2_Init+0x54>
  {
    Error_Handler();
 80039ac:	f7ff fc42 	bl	8003234 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80039b0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80039b4:	f7ff fe5a 	bl	800366c <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 80039b8:	2004      	movs	r0, #4
 80039ba:	f7ff fe3b 	bl	8003634 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 80039be:	2002      	movs	r0, #2
 80039c0:	f7ff fe38 	bl	8003634 <LL_AHB4_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC1   ------> SPI2_MOSI
  PC2_C   ------> SPI2_MISO
  PB13   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 80039c4:	2306      	movs	r3, #6
 80039c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80039ca:	2302      	movs	r3, #2
 80039cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80039e2:	2305      	movs	r3, #5
 80039e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80039ec:	4619      	mov	r1, r3
 80039ee:	485f      	ldr	r0, [pc, #380]	@ (8003b6c <MX_SPI2_Init+0x210>)
 80039f0:	f00b fb6a 	bl	800f0c8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80039f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80039fc:	2302      	movs	r3, #2
 80039fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003a14:	2305      	movs	r3, #5
 8003a16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a1a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4853      	ldr	r0, [pc, #332]	@ (8003b70 <MX_SPI2_Init+0x214>)
 8003a22:	f00b fb51 	bl	800f0c8 <LL_GPIO_Init>

  /* SPI2 DMA Init */

  /* SPI2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_5, LL_DMAMUX1_REQ_SPI2_RX);
 8003a26:	2227      	movs	r2, #39	@ 0x27
 8003a28:	2105      	movs	r1, #5
 8003a2a:	4852      	ldr	r0, [pc, #328]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003a2c:	f7ff ff44 	bl	80038b8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003a30:	2200      	movs	r2, #0
 8003a32:	2105      	movs	r1, #5
 8003a34:	484f      	ldr	r0, [pc, #316]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003a36:	f7ff fe35 	bl	80036a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2105      	movs	r1, #5
 8003a3e:	484d      	ldr	r0, [pc, #308]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003a40:	f7ff ff14 	bl	800386c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 8003a44:	2200      	movs	r2, #0
 8003a46:	2105      	movs	r1, #5
 8003a48:	484a      	ldr	r0, [pc, #296]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003a4a:	f7ff fe51 	bl	80036f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2105      	movs	r1, #5
 8003a52:	4848      	ldr	r0, [pc, #288]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003a54:	f7ff fe72 	bl	800373c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8003a58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a5c:	2105      	movs	r1, #5
 8003a5e:	4845      	ldr	r0, [pc, #276]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003a60:	f7ff fe92 	bl	8003788 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8003a64:	2200      	movs	r2, #0
 8003a66:	2105      	movs	r1, #5
 8003a68:	4842      	ldr	r0, [pc, #264]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003a6a:	f7ff feb3 	bl	80037d4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2105      	movs	r1, #5
 8003a72:	4840      	ldr	r0, [pc, #256]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003a74:	f7ff fed4 	bl	8003820 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 8003a78:	2105      	movs	r1, #5
 8003a7a:	483e      	ldr	r0, [pc, #248]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003a7c:	f7ff ff4c 	bl	8003918 <LL_DMA_DisableFifoMode>

  /* SPI2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_6, LL_DMAMUX1_REQ_SPI2_TX);
 8003a80:	2228      	movs	r2, #40	@ 0x28
 8003a82:	2106      	movs	r1, #6
 8003a84:	483b      	ldr	r0, [pc, #236]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003a86:	f7ff ff17 	bl	80038b8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003a8a:	2240      	movs	r2, #64	@ 0x40
 8003a8c:	2106      	movs	r1, #6
 8003a8e:	4839      	ldr	r0, [pc, #228]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003a90:	f7ff fe08 	bl	80036a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8003a94:	2200      	movs	r2, #0
 8003a96:	2106      	movs	r1, #6
 8003a98:	4836      	ldr	r0, [pc, #216]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003a9a:	f7ff fee7 	bl	800386c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2106      	movs	r1, #6
 8003aa2:	4834      	ldr	r0, [pc, #208]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003aa4:	f7ff fe24 	bl	80036f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2106      	movs	r1, #6
 8003aac:	4831      	ldr	r0, [pc, #196]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003aae:	f7ff fe45 	bl	800373c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8003ab2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ab6:	2106      	movs	r1, #6
 8003ab8:	482e      	ldr	r0, [pc, #184]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003aba:	f7ff fe65 	bl	8003788 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2106      	movs	r1, #6
 8003ac2:	482c      	ldr	r0, [pc, #176]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003ac4:	f7ff fe86 	bl	80037d4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2106      	movs	r1, #6
 8003acc:	4829      	ldr	r0, [pc, #164]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003ace:	f7ff fea7 	bl	8003820 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 8003ad2:	2106      	movs	r1, #6
 8003ad4:	4827      	ldr	r0, [pc, #156]	@ (8003b74 <MX_SPI2_Init+0x218>)
 8003ad6:	f7ff ff1f 	bl	8003918 <LL_DMA_DisableFifoMode>

  /* SPI2 interrupt Init */
  NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003ada:	f7ff fceb 	bl	80034b4 <__NVIC_GetPriorityGrouping>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff fd3b 	bl	8003560 <NVIC_EncodePriority>
 8003aea:	4603      	mov	r3, r0
 8003aec:	4619      	mov	r1, r3
 8003aee:	2024      	movs	r0, #36	@ 0x24
 8003af0:	f7ff fd0c 	bl	800350c <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI2_IRQn);
 8003af4:	2024      	movs	r0, #36	@ 0x24
 8003af6:	f7ff fceb 	bl	80034d0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003b00:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003b08:	2307      	movs	r3, #7
 8003b0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003b0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003b16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003b1e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003b22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8003b26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  SPI_InitStruct.CRCPoly = 0x0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003b40:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8003b44:	4619      	mov	r1, r3
 8003b46:	480c      	ldr	r0, [pc, #48]	@ (8003b78 <MX_SPI2_Init+0x21c>)
 8003b48:	f00c fa10 	bl	800ff6c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	480a      	ldr	r0, [pc, #40]	@ (8003b78 <MX_SPI2_Init+0x21c>)
 8003b50:	f7ff fd39 	bl	80035c6 <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI2, LL_SPI_FIFO_TH_01DATA);
 8003b54:	2100      	movs	r1, #0
 8003b56:	4808      	ldr	r0, [pc, #32]	@ (8003b78 <MX_SPI2_Init+0x21c>)
 8003b58:	f7ff fd48 	bl	80035ec <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI2);
 8003b5c:	4806      	ldr	r0, [pc, #24]	@ (8003b78 <MX_SPI2_Init+0x21c>)
 8003b5e:	f7ff fd58 	bl	8003612 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003b62:	bf00      	nop
 8003b64:	37f8      	adds	r7, #248	@ 0xf8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	58020800 	.word	0x58020800
 8003b70:	58020400 	.word	0x58020400
 8003b74:	40020000 	.word	0x40020000
 8003b78:	40003800 	.word	0x40003800

08003b7c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b0be      	sub	sp, #248	@ 0xf8
 8003b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003b82:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8003b86:	2228      	movs	r2, #40	@ 0x28
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f00e f8d0 	bl	8011d30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b90:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	611a      	str	r2, [r3, #16]
 8003ba0:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ba2:	463b      	mov	r3, r7
 8003ba4:	22b8      	movs	r2, #184	@ 0xb8
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f00e f8c1 	bl	8011d30 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003bae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bbe:	463b      	mov	r3, r7
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f008 f929 	bl	800be18 <HAL_RCCEx_PeriphCLKConfig>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <MX_SPI3_Init+0x54>
  {
    Error_Handler();
 8003bcc:	f7ff fb32 	bl	8003234 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8003bd0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003bd4:	f7ff fd4a 	bl	800366c <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8003bd8:	2004      	movs	r0, #4
 8003bda:	f7ff fd2b 	bl	8003634 <LL_AHB4_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8003bde:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003be2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003be6:	2302      	movs	r3, #2
 8003be8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003bfe:	2306      	movs	r3, #6
 8003c00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c04:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4852      	ldr	r0, [pc, #328]	@ (8003d54 <MX_SPI3_Init+0x1d8>)
 8003c0c:	f00b fa5c 	bl	800f0c8 <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_4, LL_DMAMUX1_REQ_SPI3_RX);
 8003c10:	223d      	movs	r2, #61	@ 0x3d
 8003c12:	2104      	movs	r1, #4
 8003c14:	4850      	ldr	r0, [pc, #320]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003c16:	f7ff fe4f 	bl	80038b8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2104      	movs	r1, #4
 8003c1e:	484e      	ldr	r0, [pc, #312]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003c20:	f7ff fd40 	bl	80036a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 8003c24:	2200      	movs	r2, #0
 8003c26:	2104      	movs	r1, #4
 8003c28:	484b      	ldr	r0, [pc, #300]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003c2a:	f7ff fe1f 	bl	800386c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2104      	movs	r1, #4
 8003c32:	4849      	ldr	r0, [pc, #292]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003c34:	f7ff fd5c 	bl	80036f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2104      	movs	r1, #4
 8003c3c:	4846      	ldr	r0, [pc, #280]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003c3e:	f7ff fd7d 	bl	800373c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 8003c42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c46:	2104      	movs	r1, #4
 8003c48:	4843      	ldr	r0, [pc, #268]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003c4a:	f7ff fd9d 	bl	8003788 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2104      	movs	r1, #4
 8003c52:	4841      	ldr	r0, [pc, #260]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003c54:	f7ff fdbe 	bl	80037d4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2104      	movs	r1, #4
 8003c5c:	483e      	ldr	r0, [pc, #248]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003c5e:	f7ff fddf 	bl	8003820 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_4);
 8003c62:	2104      	movs	r1, #4
 8003c64:	483c      	ldr	r0, [pc, #240]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003c66:	f7ff fe57 	bl	8003918 <LL_DMA_DisableFifoMode>

  /* SPI3_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_3, LL_DMAMUX1_REQ_SPI3_TX);
 8003c6a:	223e      	movs	r2, #62	@ 0x3e
 8003c6c:	2103      	movs	r1, #3
 8003c6e:	483a      	ldr	r0, [pc, #232]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003c70:	f7ff fe22 	bl	80038b8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003c74:	2240      	movs	r2, #64	@ 0x40
 8003c76:	2103      	movs	r1, #3
 8003c78:	4837      	ldr	r0, [pc, #220]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003c7a:	f7ff fd13 	bl	80036a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_3, LL_DMA_PRIORITY_LOW);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2103      	movs	r1, #3
 8003c82:	4835      	ldr	r0, [pc, #212]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003c84:	f7ff fdf2 	bl	800386c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MODE_NORMAL);
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2103      	movs	r1, #3
 8003c8c:	4832      	ldr	r0, [pc, #200]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003c8e:	f7ff fd2f 	bl	80036f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_PERIPH_NOINCREMENT);
 8003c92:	2200      	movs	r2, #0
 8003c94:	2103      	movs	r1, #3
 8003c96:	4830      	ldr	r0, [pc, #192]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003c98:	f7ff fd50 	bl	800373c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MEMORY_INCREMENT);
 8003c9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ca0:	2103      	movs	r1, #3
 8003ca2:	482d      	ldr	r0, [pc, #180]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003ca4:	f7ff fd70 	bl	8003788 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_3, LL_DMA_PDATAALIGN_BYTE);
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2103      	movs	r1, #3
 8003cac:	482a      	ldr	r0, [pc, #168]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003cae:	f7ff fd91 	bl	80037d4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_3, LL_DMA_MDATAALIGN_BYTE);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2103      	movs	r1, #3
 8003cb6:	4828      	ldr	r0, [pc, #160]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003cb8:	f7ff fdb2 	bl	8003820 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_3);
 8003cbc:	2103      	movs	r1, #3
 8003cbe:	4826      	ldr	r0, [pc, #152]	@ (8003d58 <MX_SPI3_Init+0x1dc>)
 8003cc0:	f7ff fe2a 	bl	8003918 <LL_DMA_DisableFifoMode>

  /* SPI3 interrupt Init */
  NVIC_SetPriority(SPI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003cc4:	f7ff fbf6 	bl	80034b4 <__NVIC_GetPriorityGrouping>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fc46 	bl	8003560 <NVIC_EncodePriority>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	2033      	movs	r0, #51	@ 0x33
 8003cda:	f7ff fc17 	bl	800350c <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI3_IRQn);
 8003cde:	2033      	movs	r0, #51	@ 0x33
 8003ce0:	f7ff fbf6 	bl	80034d0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003cea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003cee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003cf2:	2307      	movs	r3, #7
 8003cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003cf8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cfc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003d00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003d08:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003d0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8003d10:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003d14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  SPI_InitStruct.CRCPoly = 0x0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8003d2a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8003d2e:	4619      	mov	r1, r3
 8003d30:	480a      	ldr	r0, [pc, #40]	@ (8003d5c <MX_SPI3_Init+0x1e0>)
 8003d32:	f00c f91b 	bl	800ff6c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8003d36:	2100      	movs	r1, #0
 8003d38:	4808      	ldr	r0, [pc, #32]	@ (8003d5c <MX_SPI3_Init+0x1e0>)
 8003d3a:	f7ff fc44 	bl	80035c6 <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI3, LL_SPI_FIFO_TH_01DATA);
 8003d3e:	2100      	movs	r1, #0
 8003d40:	4806      	ldr	r0, [pc, #24]	@ (8003d5c <MX_SPI3_Init+0x1e0>)
 8003d42:	f7ff fc53 	bl	80035ec <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI3);
 8003d46:	4805      	ldr	r0, [pc, #20]	@ (8003d5c <MX_SPI3_Init+0x1e0>)
 8003d48:	f7ff fc63 	bl	8003612 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003d4c:	bf00      	nop
 8003d4e:	37f8      	adds	r7, #248	@ 0xf8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	58020800 	.word	0x58020800
 8003d58:	40020000 	.word	0x40020000
 8003d5c:	40003c00 	.word	0x40003c00

08003d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d66:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <HAL_MspInit+0x30>)
 8003d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d6c:	4a08      	ldr	r2, [pc, #32]	@ (8003d90 <HAL_MspInit+0x30>)
 8003d6e:	f043 0302 	orr.w	r3, r3, #2
 8003d72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003d76:	4b06      	ldr	r3, [pc, #24]	@ (8003d90 <HAL_MspInit+0x30>)
 8003d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	607b      	str	r3, [r7, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	58024400 	.word	0x58024400

08003d94 <LL_TIM_ClearFlag_UPDATE>:
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f06f 0201 	mvn.w	r2, #1
 8003da2:	611a      	str	r2, [r3, #16]
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <LL_USART_IsActiveFlag_FE>:
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d101      	bne.n	8003dee <LL_USART_IsActiveFlag_FE+0x18>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <LL_USART_IsActiveFlag_FE+0x1a>
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <LL_USART_IsActiveFlag_NE>:
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d101      	bne.n	8003e14 <LL_USART_IsActiveFlag_NE+0x18>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <LL_USART_IsActiveFlag_NE+0x1a>
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <LL_USART_IsActiveFlag_ORE>:
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d101      	bne.n	8003e3a <LL_USART_IsActiveFlag_ORE+0x18>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <LL_USART_IsActiveFlag_ORE+0x1a>
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d101      	bne.n	8003e60 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <LL_USART_ClearFlag_FE>:
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	621a      	str	r2, [r3, #32]
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <LL_USART_ClearFlag_NE>:
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2204      	movs	r2, #4
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <LL_USART_ClearFlag_ORE>:
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2208      	movs	r2, #8
 8003eae:	621a      	str	r2, [r3, #32]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_USART_ReceiveData8>:
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	b2db      	uxtb	r3, r3
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003eda:	bf00      	nop
 8003edc:	e7fd      	b.n	8003eda <NMI_Handler+0x4>

08003ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ee2:	bf00      	nop
 8003ee4:	e7fd      	b.n	8003ee2 <HardFault_Handler+0x4>

08003ee6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eea:	bf00      	nop
 8003eec:	e7fd      	b.n	8003eea <MemManage_Handler+0x4>

08003eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ef2:	bf00      	nop
 8003ef4:	e7fd      	b.n	8003ef2 <BusFault_Handler+0x4>

08003ef6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003efa:	bf00      	nop
 8003efc:	e7fd      	b.n	8003efa <UsageFault_Handler+0x4>

08003efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003efe:	b480      	push	{r7}
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f2c:	f001 fad8 	bl	80054e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f30:	bf00      	nop
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003f38:	4802      	ldr	r0, [pc, #8]	@ (8003f44 <DMA1_Stream0_IRQHandler+0x10>)
 8003f3a:	f002 fca5 	bl	8006888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	240003d8 	.word	0x240003d8

08003f48 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003f4c:	4802      	ldr	r0, [pc, #8]	@ (8003f58 <DMA1_Stream1_IRQHandler+0x10>)
 8003f4e:	f002 fc9b 	bl	8006888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003f52:	bf00      	nop
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	24000450 	.word	0x24000450

08003f5c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003f60:	4802      	ldr	r0, [pc, #8]	@ (8003f6c <DMA1_Stream2_IRQHandler+0x10>)
 8003f62:	f002 fc91 	bl	8006888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	240006c8 	.word	0x240006c8

08003f70 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003fac:	4802      	ldr	r0, [pc, #8]	@ (8003fb8 <I2C1_EV_IRQHandler+0x10>)
 8003fae:	f004 fc11 	bl	80087d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	24000384 	.word	0x24000384

08003fbc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003fc0:	4802      	ldr	r0, [pc, #8]	@ (8003fcc <I2C1_ER_IRQHandler+0x10>)
 8003fc2:	f004 fc21 	bl	8008808 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	24000384 	.word	0x24000384

08003fd0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SPI2_IRQn 0 */
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SPI3_IRQn 0 */
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003fe2:	bf00      	nop
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

	static unsigned char cnt = 0;
	//    static uint8_t ibus_rx_buf[32];

	if (LL_USART_IsActiveFlag_RXNE(UART4)) {
 8003ff0:	483f      	ldr	r0, [pc, #252]	@ (80040f0 <UART4_IRQHandler+0x104>)
 8003ff2:	f7ff ff29 	bl	8003e48 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d059      	beq.n	80040b0 <UART4_IRQHandler+0xc4>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8003ffc:	483c      	ldr	r0, [pc, #240]	@ (80040f0 <UART4_IRQHandler+0x104>)
 8003ffe:	f7ff ff5d 	bl	8003ebc <LL_USART_ReceiveData8>
 8004002:	4603      	mov	r3, r0
 8004004:	461a      	mov	r2, r3
 8004006:	4b3b      	ldr	r3, [pc, #236]	@ (80040f4 <UART4_IRQHandler+0x108>)
 8004008:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 800400a:	4b3b      	ldr	r3, [pc, #236]	@ (80040f8 <UART4_IRQHandler+0x10c>)
 800400c:	2201      	movs	r2, #1
 800400e:	701a      	strb	r2, [r3, #0]

		switch (cnt) {
 8004010:	4b3a      	ldr	r3, [pc, #232]	@ (80040fc <UART4_IRQHandler+0x110>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b1f      	cmp	r3, #31
 8004016:	d02e      	beq.n	8004076 <UART4_IRQHandler+0x8a>
 8004018:	2b1f      	cmp	r3, #31
 800401a:	dc3a      	bgt.n	8004092 <UART4_IRQHandler+0xa6>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <UART4_IRQHandler+0x3a>
 8004020:	2b01      	cmp	r3, #1
 8004022:	d012      	beq.n	800404a <UART4_IRQHandler+0x5e>
 8004024:	e035      	b.n	8004092 <UART4_IRQHandler+0xa6>
		case 0:
			if (uart4_rx_data == 0x20) {
 8004026:	4b33      	ldr	r3, [pc, #204]	@ (80040f4 <UART4_IRQHandler+0x108>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b20      	cmp	r3, #32
 800402c:	d13f      	bne.n	80040ae <UART4_IRQHandler+0xc2>
				ibus_rx_buf[cnt] = uart4_rx_data;
 800402e:	4b33      	ldr	r3, [pc, #204]	@ (80040fc <UART4_IRQHandler+0x110>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	4b2f      	ldr	r3, [pc, #188]	@ (80040f4 <UART4_IRQHandler+0x108>)
 8004036:	7819      	ldrb	r1, [r3, #0]
 8004038:	4b31      	ldr	r3, [pc, #196]	@ (8004100 <UART4_IRQHandler+0x114>)
 800403a:	5499      	strb	r1, [r3, r2]
				cnt++;
 800403c:	4b2f      	ldr	r3, [pc, #188]	@ (80040fc <UART4_IRQHandler+0x110>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	b2da      	uxtb	r2, r3
 8004044:	4b2d      	ldr	r3, [pc, #180]	@ (80040fc <UART4_IRQHandler+0x110>)
 8004046:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004048:	e031      	b.n	80040ae <UART4_IRQHandler+0xc2>
		case 1:
			if (uart4_rx_data == 0x40) {
 800404a:	4b2a      	ldr	r3, [pc, #168]	@ (80040f4 <UART4_IRQHandler+0x108>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b40      	cmp	r3, #64	@ 0x40
 8004050:	d10d      	bne.n	800406e <UART4_IRQHandler+0x82>
				ibus_rx_buf[cnt] = uart4_rx_data;
 8004052:	4b2a      	ldr	r3, [pc, #168]	@ (80040fc <UART4_IRQHandler+0x110>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	4b26      	ldr	r3, [pc, #152]	@ (80040f4 <UART4_IRQHandler+0x108>)
 800405a:	7819      	ldrb	r1, [r3, #0]
 800405c:	4b28      	ldr	r3, [pc, #160]	@ (8004100 <UART4_IRQHandler+0x114>)
 800405e:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004060:	4b26      	ldr	r3, [pc, #152]	@ (80040fc <UART4_IRQHandler+0x110>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	b2da      	uxtb	r2, r3
 8004068:	4b24      	ldr	r3, [pc, #144]	@ (80040fc <UART4_IRQHandler+0x110>)
 800406a:	701a      	strb	r2, [r3, #0]
			} else {
				cnt = 0; // Reset if invalid header
			}
			break;
 800406c:	e020      	b.n	80040b0 <UART4_IRQHandler+0xc4>
				cnt = 0; // Reset if invalid header
 800406e:	4b23      	ldr	r3, [pc, #140]	@ (80040fc <UART4_IRQHandler+0x110>)
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]
			break;
 8004074:	e01c      	b.n	80040b0 <UART4_IRQHandler+0xc4>
		case 31:
			ibus_rx_buf[cnt] = uart4_rx_data;
 8004076:	4b21      	ldr	r3, [pc, #132]	@ (80040fc <UART4_IRQHandler+0x110>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	4b1d      	ldr	r3, [pc, #116]	@ (80040f4 <UART4_IRQHandler+0x108>)
 800407e:	7819      	ldrb	r1, [r3, #0]
 8004080:	4b1f      	ldr	r3, [pc, #124]	@ (8004100 <UART4_IRQHandler+0x114>)
 8004082:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8004084:	4b1d      	ldr	r3, [pc, #116]	@ (80040fc <UART4_IRQHandler+0x110>)
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 800408a:	4b1e      	ldr	r3, [pc, #120]	@ (8004104 <UART4_IRQHandler+0x118>)
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
			//	                for (uint8_t i = 0; i < len; i++) {
			//	                    while (!LL_USART_IsActiveFlag_TXE(USART6)) {}
			//	//                    LL_USART_TransmitData8(USART6, buffer[i]);
			//	                }
			//	                while (!LL_USART_IsActiveFlag_TC(USART6)) {}
			break;
 8004090:	e00e      	b.n	80040b0 <UART4_IRQHandler+0xc4>
		default:
			ibus_rx_buf[cnt] = uart4_rx_data;
 8004092:	4b1a      	ldr	r3, [pc, #104]	@ (80040fc <UART4_IRQHandler+0x110>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	4b16      	ldr	r3, [pc, #88]	@ (80040f4 <UART4_IRQHandler+0x108>)
 800409a:	7819      	ldrb	r1, [r3, #0]
 800409c:	4b18      	ldr	r3, [pc, #96]	@ (8004100 <UART4_IRQHandler+0x114>)
 800409e:	5499      	strb	r1, [r3, r2]
			cnt++;
 80040a0:	4b16      	ldr	r3, [pc, #88]	@ (80040fc <UART4_IRQHandler+0x110>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	3301      	adds	r3, #1
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	4b14      	ldr	r3, [pc, #80]	@ (80040fc <UART4_IRQHandler+0x110>)
 80040aa:	701a      	strb	r2, [r3, #0]
			break;
 80040ac:	e000      	b.n	80040b0 <UART4_IRQHandler+0xc4>
			break;
 80040ae:	bf00      	nop
		}
	}

	// Handle UART errors
	if (LL_USART_IsActiveFlag_ORE(UART4) || LL_USART_IsActiveFlag_FE(UART4) || LL_USART_IsActiveFlag_NE(UART4)) {
 80040b0:	480f      	ldr	r0, [pc, #60]	@ (80040f0 <UART4_IRQHandler+0x104>)
 80040b2:	f7ff feb6 	bl	8003e22 <LL_USART_IsActiveFlag_ORE>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10b      	bne.n	80040d4 <UART4_IRQHandler+0xe8>
 80040bc:	480c      	ldr	r0, [pc, #48]	@ (80040f0 <UART4_IRQHandler+0x104>)
 80040be:	f7ff fe8a 	bl	8003dd6 <LL_USART_IsActiveFlag_FE>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d105      	bne.n	80040d4 <UART4_IRQHandler+0xe8>
 80040c8:	4809      	ldr	r0, [pc, #36]	@ (80040f0 <UART4_IRQHandler+0x104>)
 80040ca:	f7ff fe97 	bl	8003dfc <LL_USART_IsActiveFlag_NE>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00b      	beq.n	80040ec <UART4_IRQHandler+0x100>
		LL_USART_ClearFlag_ORE(UART4);
 80040d4:	4806      	ldr	r0, [pc, #24]	@ (80040f0 <UART4_IRQHandler+0x104>)
 80040d6:	f7ff fee4 	bl	8003ea2 <LL_USART_ClearFlag_ORE>
		LL_USART_ClearFlag_FE(UART4);
 80040da:	4805      	ldr	r0, [pc, #20]	@ (80040f0 <UART4_IRQHandler+0x104>)
 80040dc:	f7ff fec7 	bl	8003e6e <LL_USART_ClearFlag_FE>
		LL_USART_ClearFlag_NE(UART4);
 80040e0:	4803      	ldr	r0, [pc, #12]	@ (80040f0 <UART4_IRQHandler+0x104>)
 80040e2:	f7ff fed1 	bl	8003e88 <LL_USART_ClearFlag_NE>
		cnt = 0; // Reset buffer on error
 80040e6:	4b05      	ldr	r3, [pc, #20]	@ (80040fc <UART4_IRQHandler+0x110>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80040ec:	bf00      	nop
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40004c00 	.word	0x40004c00
 80040f4:	240005a1 	.word	0x240005a1
 80040f8:	240005a0 	.word	0x240005a0
 80040fc:	2400061c 	.word	0x2400061c
 8004100:	240005a4 	.word	0x240005a4
 8004104:	240005c4 	.word	0x240005c4

08004108 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
	static uint16_t tim7_50ms_count   = 0;
	static uint16_t tim7_100ms_count  = 0;
	static uint16_t tim7_200ms_count  = 0;
	static uint16_t tim7_1000ms_count = 0;

	if (LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800410c:	483d      	ldr	r0, [pc, #244]	@ (8004204 <TIM7_IRQHandler+0xfc>)
 800410e:	f7ff fe4f 	bl	8003db0 <LL_TIM_IsActiveFlag_UPDATE>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d073      	beq.n	8004200 <TIM7_IRQHandler+0xf8>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8004118:	483a      	ldr	r0, [pc, #232]	@ (8004204 <TIM7_IRQHandler+0xfc>)
 800411a:	f7ff fe3b 	bl	8003d94 <LL_TIM_ClearFlag_UPDATE>

		if (++tim7_1ms_count >= 1) {
 800411e:	4b3a      	ldr	r3, [pc, #232]	@ (8004208 <TIM7_IRQHandler+0x100>)
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	3301      	adds	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	4b38      	ldr	r3, [pc, #224]	@ (8004208 <TIM7_IRQHandler+0x100>)
 8004128:	801a      	strh	r2, [r3, #0]
 800412a:	4b37      	ldr	r3, [pc, #220]	@ (8004208 <TIM7_IRQHandler+0x100>)
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <TIM7_IRQHandler+0x36>
			tim7_1ms_count = 0;
 8004132:	4b35      	ldr	r3, [pc, #212]	@ (8004208 <TIM7_IRQHandler+0x100>)
 8004134:	2200      	movs	r2, #0
 8004136:	801a      	strh	r2, [r3, #0]
			tim7_1ms_flag = 1;
 8004138:	4b34      	ldr	r3, [pc, #208]	@ (800420c <TIM7_IRQHandler+0x104>)
 800413a:	2201      	movs	r2, #1
 800413c:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_2ms_count >= 2) {
 800413e:	4b34      	ldr	r3, [pc, #208]	@ (8004210 <TIM7_IRQHandler+0x108>)
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	3301      	adds	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	4b32      	ldr	r3, [pc, #200]	@ (8004210 <TIM7_IRQHandler+0x108>)
 8004148:	801a      	strh	r2, [r3, #0]
 800414a:	4b31      	ldr	r3, [pc, #196]	@ (8004210 <TIM7_IRQHandler+0x108>)
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d905      	bls.n	800415e <TIM7_IRQHandler+0x56>
			tim7_2ms_count = 0;
 8004152:	4b2f      	ldr	r3, [pc, #188]	@ (8004210 <TIM7_IRQHandler+0x108>)
 8004154:	2200      	movs	r2, #0
 8004156:	801a      	strh	r2, [r3, #0]
			tim7_2ms_flag = 1;
 8004158:	4b2e      	ldr	r3, [pc, #184]	@ (8004214 <TIM7_IRQHandler+0x10c>)
 800415a:	2201      	movs	r2, #1
 800415c:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_20ms_count >= 20) {
 800415e:	4b2e      	ldr	r3, [pc, #184]	@ (8004218 <TIM7_IRQHandler+0x110>)
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	4b2c      	ldr	r3, [pc, #176]	@ (8004218 <TIM7_IRQHandler+0x110>)
 8004168:	801a      	strh	r2, [r3, #0]
 800416a:	4b2b      	ldr	r3, [pc, #172]	@ (8004218 <TIM7_IRQHandler+0x110>)
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	2b13      	cmp	r3, #19
 8004170:	d905      	bls.n	800417e <TIM7_IRQHandler+0x76>
			tim7_20ms_count = 0;
 8004172:	4b29      	ldr	r3, [pc, #164]	@ (8004218 <TIM7_IRQHandler+0x110>)
 8004174:	2200      	movs	r2, #0
 8004176:	801a      	strh	r2, [r3, #0]
			tim7_20ms_flag = 1;
 8004178:	4b28      	ldr	r3, [pc, #160]	@ (800421c <TIM7_IRQHandler+0x114>)
 800417a:	2201      	movs	r2, #1
 800417c:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_50ms_count >= 50) {
 800417e:	4b28      	ldr	r3, [pc, #160]	@ (8004220 <TIM7_IRQHandler+0x118>)
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	3301      	adds	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	4b26      	ldr	r3, [pc, #152]	@ (8004220 <TIM7_IRQHandler+0x118>)
 8004188:	801a      	strh	r2, [r3, #0]
 800418a:	4b25      	ldr	r3, [pc, #148]	@ (8004220 <TIM7_IRQHandler+0x118>)
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	2b31      	cmp	r3, #49	@ 0x31
 8004190:	d905      	bls.n	800419e <TIM7_IRQHandler+0x96>
			tim7_50ms_count = 0;
 8004192:	4b23      	ldr	r3, [pc, #140]	@ (8004220 <TIM7_IRQHandler+0x118>)
 8004194:	2200      	movs	r2, #0
 8004196:	801a      	strh	r2, [r3, #0]
			tim7_50ms_flag = 1;
 8004198:	4b22      	ldr	r3, [pc, #136]	@ (8004224 <TIM7_IRQHandler+0x11c>)
 800419a:	2201      	movs	r2, #1
 800419c:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_100ms_count >= 100) {
 800419e:	4b22      	ldr	r3, [pc, #136]	@ (8004228 <TIM7_IRQHandler+0x120>)
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	3301      	adds	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	4b20      	ldr	r3, [pc, #128]	@ (8004228 <TIM7_IRQHandler+0x120>)
 80041a8:	801a      	strh	r2, [r3, #0]
 80041aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004228 <TIM7_IRQHandler+0x120>)
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	2b63      	cmp	r3, #99	@ 0x63
 80041b0:	d905      	bls.n	80041be <TIM7_IRQHandler+0xb6>
			tim7_100ms_count = 0;
 80041b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004228 <TIM7_IRQHandler+0x120>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	801a      	strh	r2, [r3, #0]
			tim7_100ms_flag = 1;
 80041b8:	4b1c      	ldr	r3, [pc, #112]	@ (800422c <TIM7_IRQHandler+0x124>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_200ms_count >= 200) {
 80041be:	4b1c      	ldr	r3, [pc, #112]	@ (8004230 <TIM7_IRQHandler+0x128>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	3301      	adds	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004230 <TIM7_IRQHandler+0x128>)
 80041c8:	801a      	strh	r2, [r3, #0]
 80041ca:	4b19      	ldr	r3, [pc, #100]	@ (8004230 <TIM7_IRQHandler+0x128>)
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80041d0:	d905      	bls.n	80041de <TIM7_IRQHandler+0xd6>
			tim7_200ms_count = 0;
 80041d2:	4b17      	ldr	r3, [pc, #92]	@ (8004230 <TIM7_IRQHandler+0x128>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	801a      	strh	r2, [r3, #0]
			tim7_200ms_flag = 1;
 80041d8:	4b16      	ldr	r3, [pc, #88]	@ (8004234 <TIM7_IRQHandler+0x12c>)
 80041da:	2201      	movs	r2, #1
 80041dc:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_1000ms_count >= 1000) {
 80041de:	4b16      	ldr	r3, [pc, #88]	@ (8004238 <TIM7_IRQHandler+0x130>)
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	3301      	adds	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	4b14      	ldr	r3, [pc, #80]	@ (8004238 <TIM7_IRQHandler+0x130>)
 80041e8:	801a      	strh	r2, [r3, #0]
 80041ea:	4b13      	ldr	r3, [pc, #76]	@ (8004238 <TIM7_IRQHandler+0x130>)
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041f2:	d305      	bcc.n	8004200 <TIM7_IRQHandler+0xf8>
			tim7_1000ms_count = 0;
 80041f4:	4b10      	ldr	r3, [pc, #64]	@ (8004238 <TIM7_IRQHandler+0x130>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag = 1;
 80041fa:	4b10      	ldr	r3, [pc, #64]	@ (800423c <TIM7_IRQHandler+0x134>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40001400 	.word	0x40001400
 8004208:	2400061e 	.word	0x2400061e
 800420c:	240005c6 	.word	0x240005c6
 8004210:	24000620 	.word	0x24000620
 8004214:	240005c8 	.word	0x240005c8
 8004218:	24000622 	.word	0x24000622
 800421c:	240005ca 	.word	0x240005ca
 8004220:	24000624 	.word	0x24000624
 8004224:	240005cc 	.word	0x240005cc
 8004228:	24000626 	.word	0x24000626
 800422c:	240005ce 	.word	0x240005ce
 8004230:	24000628 	.word	0x24000628
 8004234:	240005d0 	.word	0x240005d0
 8004238:	2400062a 	.word	0x2400062a
 800423c:	240005d2 	.word	0x240005d2

08004240 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

	if (LL_USART_IsActiveFlag_RXNE(USART6)) {
 8004246:	482b      	ldr	r0, [pc, #172]	@ (80042f4 <USART6_IRQHandler+0xb4>)
 8004248:	f7ff fdfe 	bl	8003e48 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d04b      	beq.n	80042ea <USART6_IRQHandler+0xaa>
		char c = LL_USART_ReceiveData8(USART6);
 8004252:	4828      	ldr	r0, [pc, #160]	@ (80042f4 <USART6_IRQHandler+0xb4>)
 8004254:	f7ff fe32 	bl	8003ebc <LL_USART_ReceiveData8>
 8004258:	4603      	mov	r3, r0
 800425a:	71fb      	strb	r3, [r7, #7]
		last_char_time = HAL_GetTick();  // update timestamp
 800425c:	f001 f954 	bl	8005508 <HAL_GetTick>
 8004260:	4603      	mov	r3, r0
 8004262:	4a25      	ldr	r2, [pc, #148]	@ (80042f8 <USART6_IRQHandler+0xb8>)
 8004264:	6013      	str	r3, [r2, #0]

		if (!cmd_receiving) {
 8004266:	4b25      	ldr	r3, [pc, #148]	@ (80042fc <USART6_IRQHandler+0xbc>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f083 0301 	eor.w	r3, r3, #1
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <USART6_IRQHandler+0x4a>
			if (c == '[') {
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	2b5b      	cmp	r3, #91	@ 0x5b
 800427a:	d136      	bne.n	80042ea <USART6_IRQHandler+0xaa>
				cmd_receiving = true;
 800427c:	4b1f      	ldr	r3, [pc, #124]	@ (80042fc <USART6_IRQHandler+0xbc>)
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 8004282:	4b1f      	ldr	r3, [pc, #124]	@ (8004300 <USART6_IRQHandler+0xc0>)
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004288:	e02f      	b.n	80042ea <USART6_IRQHandler+0xaa>
			if (c == ']') {
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	2b5d      	cmp	r3, #93	@ 0x5d
 800428e:	d115      	bne.n	80042bc <USART6_IRQHandler+0x7c>
				if (cmd_index < CMD_BUFFER_SIZE) {
 8004290:	4b1b      	ldr	r3, [pc, #108]	@ (8004300 <USART6_IRQHandler+0xc0>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b3f      	cmp	r3, #63	@ 0x3f
 8004298:	d809      	bhi.n	80042ae <USART6_IRQHandler+0x6e>
					cmd_buffer[cmd_index] = '\0';  // null-terminate
 800429a:	4b19      	ldr	r3, [pc, #100]	@ (8004300 <USART6_IRQHandler+0xc0>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	4b18      	ldr	r3, [pc, #96]	@ (8004304 <USART6_IRQHandler+0xc4>)
 80042a4:	2100      	movs	r1, #0
 80042a6:	5499      	strb	r1, [r3, r2]
					process_command((char*)cmd_buffer);  // parse the command
 80042a8:	4816      	ldr	r0, [pc, #88]	@ (8004304 <USART6_IRQHandler+0xc4>)
 80042aa:	f7fc fad9 	bl	8000860 <process_command>
				cmd_receiving = false;
 80042ae:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <USART6_IRQHandler+0xbc>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 80042b4:	4b12      	ldr	r3, [pc, #72]	@ (8004300 <USART6_IRQHandler+0xc0>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
}
 80042ba:	e016      	b.n	80042ea <USART6_IRQHandler+0xaa>
				if (cmd_index < CMD_BUFFER_SIZE - 1) {
 80042bc:	4b10      	ldr	r3, [pc, #64]	@ (8004300 <USART6_IRQHandler+0xc0>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80042c4:	d80b      	bhi.n	80042de <USART6_IRQHandler+0x9e>
					cmd_buffer[cmd_index++] = c;
 80042c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004300 <USART6_IRQHandler+0xc0>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	b2d1      	uxtb	r1, r2
 80042d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004300 <USART6_IRQHandler+0xc0>)
 80042d2:	7011      	strb	r1, [r2, #0]
 80042d4:	4619      	mov	r1, r3
 80042d6:	4a0b      	ldr	r2, [pc, #44]	@ (8004304 <USART6_IRQHandler+0xc4>)
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	5453      	strb	r3, [r2, r1]
}
 80042dc:	e005      	b.n	80042ea <USART6_IRQHandler+0xaa>
					cmd_receiving = false;
 80042de:	4b07      	ldr	r3, [pc, #28]	@ (80042fc <USART6_IRQHandler+0xbc>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
					cmd_index = 0;
 80042e4:	4b06      	ldr	r3, [pc, #24]	@ (8004300 <USART6_IRQHandler+0xc0>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40011400 	.word	0x40011400
 80042f8:	24000618 	.word	0x24000618
 80042fc:	24000615 	.word	0x24000615
 8004300:	24000614 	.word	0x24000614
 8004304:	240005d4 	.word	0x240005d4

08004308 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  return 1;
 800430c:	2301      	movs	r3, #1
}
 800430e:	4618      	mov	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <_kill>:

int _kill(int pid, int sig)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004322:	f00d fd77 	bl	8011e14 <__errno>
 8004326:	4603      	mov	r3, r0
 8004328:	2216      	movs	r2, #22
 800432a:	601a      	str	r2, [r3, #0]
  return -1;
 800432c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <_exit>:

void _exit (int status)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004340:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff ffe7 	bl	8004318 <_kill>
  while (1) {}    /* Make sure we hang here */
 800434a:	bf00      	nop
 800434c:	e7fd      	b.n	800434a <_exit+0x12>

0800434e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b086      	sub	sp, #24
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e00a      	b.n	8004376 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004360:	f3af 8000 	nop.w
 8004364:	4601      	mov	r1, r0
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	60ba      	str	r2, [r7, #8]
 800436c:	b2ca      	uxtb	r2, r1
 800436e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3301      	adds	r3, #1
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	429a      	cmp	r2, r3
 800437c:	dbf0      	blt.n	8004360 <_read+0x12>
  }

  return len;
 800437e:	687b      	ldr	r3, [r7, #4]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004390:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043b0:	605a      	str	r2, [r3, #4]
  return 0;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <_isatty>:

int _isatty(int file)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043c8:	2301      	movs	r3, #1
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043f8:	4a14      	ldr	r2, [pc, #80]	@ (800444c <_sbrk+0x5c>)
 80043fa:	4b15      	ldr	r3, [pc, #84]	@ (8004450 <_sbrk+0x60>)
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004404:	4b13      	ldr	r3, [pc, #76]	@ (8004454 <_sbrk+0x64>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800440c:	4b11      	ldr	r3, [pc, #68]	@ (8004454 <_sbrk+0x64>)
 800440e:	4a12      	ldr	r2, [pc, #72]	@ (8004458 <_sbrk+0x68>)
 8004410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004412:	4b10      	ldr	r3, [pc, #64]	@ (8004454 <_sbrk+0x64>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4413      	add	r3, r2
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	429a      	cmp	r2, r3
 800441e:	d207      	bcs.n	8004430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004420:	f00d fcf8 	bl	8011e14 <__errno>
 8004424:	4603      	mov	r3, r0
 8004426:	220c      	movs	r2, #12
 8004428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800442a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800442e:	e009      	b.n	8004444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004430:	4b08      	ldr	r3, [pc, #32]	@ (8004454 <_sbrk+0x64>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004436:	4b07      	ldr	r3, [pc, #28]	@ (8004454 <_sbrk+0x64>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4413      	add	r3, r2
 800443e:	4a05      	ldr	r2, [pc, #20]	@ (8004454 <_sbrk+0x64>)
 8004440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004442:	68fb      	ldr	r3, [r7, #12]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	24050000 	.word	0x24050000
 8004450:	00000400 	.word	0x00000400
 8004454:	2400062c 	.word	0x2400062c
 8004458:	24000890 	.word	0x24000890

0800445c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004460:	4b3e      	ldr	r3, [pc, #248]	@ (800455c <SystemInit+0x100>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004466:	4a3d      	ldr	r2, [pc, #244]	@ (800455c <SystemInit+0x100>)
 8004468:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800446c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004470:	4b3b      	ldr	r3, [pc, #236]	@ (8004560 <SystemInit+0x104>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	2b06      	cmp	r3, #6
 800447a:	d807      	bhi.n	800448c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800447c:	4b38      	ldr	r3, [pc, #224]	@ (8004560 <SystemInit+0x104>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f023 030f 	bic.w	r3, r3, #15
 8004484:	4a36      	ldr	r2, [pc, #216]	@ (8004560 <SystemInit+0x104>)
 8004486:	f043 0307 	orr.w	r3, r3, #7
 800448a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800448c:	4b35      	ldr	r3, [pc, #212]	@ (8004564 <SystemInit+0x108>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a34      	ldr	r2, [pc, #208]	@ (8004564 <SystemInit+0x108>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004498:	4b32      	ldr	r3, [pc, #200]	@ (8004564 <SystemInit+0x108>)
 800449a:	2200      	movs	r2, #0
 800449c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800449e:	4b31      	ldr	r3, [pc, #196]	@ (8004564 <SystemInit+0x108>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4930      	ldr	r1, [pc, #192]	@ (8004564 <SystemInit+0x108>)
 80044a4:	4b30      	ldr	r3, [pc, #192]	@ (8004568 <SystemInit+0x10c>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80044aa:	4b2d      	ldr	r3, [pc, #180]	@ (8004560 <SystemInit+0x104>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80044b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004560 <SystemInit+0x104>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 030f 	bic.w	r3, r3, #15
 80044be:	4a28      	ldr	r2, [pc, #160]	@ (8004560 <SystemInit+0x104>)
 80044c0:	f043 0307 	orr.w	r3, r3, #7
 80044c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80044c6:	4b27      	ldr	r3, [pc, #156]	@ (8004564 <SystemInit+0x108>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80044cc:	4b25      	ldr	r3, [pc, #148]	@ (8004564 <SystemInit+0x108>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80044d2:	4b24      	ldr	r3, [pc, #144]	@ (8004564 <SystemInit+0x108>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80044d8:	4b22      	ldr	r3, [pc, #136]	@ (8004564 <SystemInit+0x108>)
 80044da:	4a24      	ldr	r2, [pc, #144]	@ (800456c <SystemInit+0x110>)
 80044dc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80044de:	4b21      	ldr	r3, [pc, #132]	@ (8004564 <SystemInit+0x108>)
 80044e0:	4a23      	ldr	r2, [pc, #140]	@ (8004570 <SystemInit+0x114>)
 80044e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80044e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004564 <SystemInit+0x108>)
 80044e6:	4a23      	ldr	r2, [pc, #140]	@ (8004574 <SystemInit+0x118>)
 80044e8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80044ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004564 <SystemInit+0x108>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80044f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004564 <SystemInit+0x108>)
 80044f2:	4a20      	ldr	r2, [pc, #128]	@ (8004574 <SystemInit+0x118>)
 80044f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80044f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004564 <SystemInit+0x108>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80044fc:	4b19      	ldr	r3, [pc, #100]	@ (8004564 <SystemInit+0x108>)
 80044fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004574 <SystemInit+0x118>)
 8004500:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004502:	4b18      	ldr	r3, [pc, #96]	@ (8004564 <SystemInit+0x108>)
 8004504:	2200      	movs	r2, #0
 8004506:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004508:	4b16      	ldr	r3, [pc, #88]	@ (8004564 <SystemInit+0x108>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a15      	ldr	r2, [pc, #84]	@ (8004564 <SystemInit+0x108>)
 800450e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004512:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004514:	4b13      	ldr	r3, [pc, #76]	@ (8004564 <SystemInit+0x108>)
 8004516:	2200      	movs	r2, #0
 8004518:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800451a:	4b12      	ldr	r3, [pc, #72]	@ (8004564 <SystemInit+0x108>)
 800451c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004520:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d113      	bne.n	8004550 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8004528:	4b0e      	ldr	r3, [pc, #56]	@ (8004564 <SystemInit+0x108>)
 800452a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800452e:	4a0d      	ldr	r2, [pc, #52]	@ (8004564 <SystemInit+0x108>)
 8004530:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004534:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004538:	4b0f      	ldr	r3, [pc, #60]	@ (8004578 <SystemInit+0x11c>)
 800453a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800453e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8004540:	4b08      	ldr	r3, [pc, #32]	@ (8004564 <SystemInit+0x108>)
 8004542:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004546:	4a07      	ldr	r2, [pc, #28]	@ (8004564 <SystemInit+0x108>)
 8004548:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800454c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	e000ed00 	.word	0xe000ed00
 8004560:	52002000 	.word	0x52002000
 8004564:	58024400 	.word	0x58024400
 8004568:	eaf6ed7f 	.word	0xeaf6ed7f
 800456c:	02020200 	.word	0x02020200
 8004570:	01ff0000 	.word	0x01ff0000
 8004574:	01010280 	.word	0x01010280
 8004578:	52004000 	.word	0x52004000

0800457c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8004580:	4b09      	ldr	r3, [pc, #36]	@ (80045a8 <ExitRun0Mode+0x2c>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4a08      	ldr	r2, [pc, #32]	@ (80045a8 <ExitRun0Mode+0x2c>)
 8004586:	f043 0302 	orr.w	r3, r3, #2
 800458a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800458c:	bf00      	nop
 800458e:	4b06      	ldr	r3, [pc, #24]	@ (80045a8 <ExitRun0Mode+0x2c>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f9      	beq.n	800458e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800459a:	bf00      	nop
 800459c:	bf00      	nop
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	58024800 	.word	0x58024800

080045ac <__NVIC_GetPriorityGrouping>:
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045b0:	4b04      	ldr	r3, [pc, #16]	@ (80045c4 <__NVIC_GetPriorityGrouping+0x18>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	0a1b      	lsrs	r3, r3, #8
 80045b6:	f003 0307 	and.w	r3, r3, #7
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	e000ed00 	.word	0xe000ed00

080045c8 <__NVIC_EnableIRQ>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	db0b      	blt.n	80045f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	f003 021f 	and.w	r2, r3, #31
 80045e0:	4907      	ldr	r1, [pc, #28]	@ (8004600 <__NVIC_EnableIRQ+0x38>)
 80045e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	2001      	movs	r0, #1
 80045ea:	fa00 f202 	lsl.w	r2, r0, r2
 80045ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	e000e100 	.word	0xe000e100

08004604 <__NVIC_SetPriority>:
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	6039      	str	r1, [r7, #0]
 800460e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004610:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004614:	2b00      	cmp	r3, #0
 8004616:	db0a      	blt.n	800462e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	b2da      	uxtb	r2, r3
 800461c:	490c      	ldr	r1, [pc, #48]	@ (8004650 <__NVIC_SetPriority+0x4c>)
 800461e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004622:	0112      	lsls	r2, r2, #4
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	440b      	add	r3, r1
 8004628:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800462c:	e00a      	b.n	8004644 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	b2da      	uxtb	r2, r3
 8004632:	4908      	ldr	r1, [pc, #32]	@ (8004654 <__NVIC_SetPriority+0x50>)
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	3b04      	subs	r3, #4
 800463c:	0112      	lsls	r2, r2, #4
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	440b      	add	r3, r1
 8004642:	761a      	strb	r2, [r3, #24]
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	e000e100 	.word	0xe000e100
 8004654:	e000ed00 	.word	0xe000ed00

08004658 <NVIC_EncodePriority>:
{
 8004658:	b480      	push	{r7}
 800465a:	b089      	sub	sp, #36	@ 0x24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f1c3 0307 	rsb	r3, r3, #7
 8004672:	2b04      	cmp	r3, #4
 8004674:	bf28      	it	cs
 8004676:	2304      	movcs	r3, #4
 8004678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	3304      	adds	r3, #4
 800467e:	2b06      	cmp	r3, #6
 8004680:	d902      	bls.n	8004688 <NVIC_EncodePriority+0x30>
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3b03      	subs	r3, #3
 8004686:	e000      	b.n	800468a <NVIC_EncodePriority+0x32>
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800468c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43da      	mvns	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	401a      	ands	r2, r3
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	fa01 f303 	lsl.w	r3, r1, r3
 80046aa:	43d9      	mvns	r1, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b0:	4313      	orrs	r3, r2
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3724      	adds	r7, #36	@ 0x24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <LL_TIM_EnableARRPreload>:
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	601a      	str	r2, [r3, #0]
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <LL_TIM_OC_EnableFast>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d028      	beq.n	8004742 <LL_TIM_OC_EnableFast+0x62>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d023      	beq.n	800473e <LL_TIM_OC_EnableFast+0x5e>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d01e      	beq.n	800473a <LL_TIM_OC_EnableFast+0x5a>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b40      	cmp	r3, #64	@ 0x40
 8004700:	d019      	beq.n	8004736 <LL_TIM_OC_EnableFast+0x56>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004708:	d013      	beq.n	8004732 <LL_TIM_OC_EnableFast+0x52>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004710:	d00d      	beq.n	800472e <LL_TIM_OC_EnableFast+0x4e>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004718:	d007      	beq.n	800472a <LL_TIM_OC_EnableFast+0x4a>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004720:	d101      	bne.n	8004726 <LL_TIM_OC_EnableFast+0x46>
 8004722:	2307      	movs	r3, #7
 8004724:	e00e      	b.n	8004744 <LL_TIM_OC_EnableFast+0x64>
 8004726:	2308      	movs	r3, #8
 8004728:	e00c      	b.n	8004744 <LL_TIM_OC_EnableFast+0x64>
 800472a:	2306      	movs	r3, #6
 800472c:	e00a      	b.n	8004744 <LL_TIM_OC_EnableFast+0x64>
 800472e:	2305      	movs	r3, #5
 8004730:	e008      	b.n	8004744 <LL_TIM_OC_EnableFast+0x64>
 8004732:	2304      	movs	r3, #4
 8004734:	e006      	b.n	8004744 <LL_TIM_OC_EnableFast+0x64>
 8004736:	2303      	movs	r3, #3
 8004738:	e004      	b.n	8004744 <LL_TIM_OC_EnableFast+0x64>
 800473a:	2302      	movs	r3, #2
 800473c:	e002      	b.n	8004744 <LL_TIM_OC_EnableFast+0x64>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <LL_TIM_OC_EnableFast+0x64>
 8004742:	2300      	movs	r3, #0
 8004744:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3318      	adds	r3, #24
 800474a:	4619      	mov	r1, r3
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	4a0a      	ldr	r2, [pc, #40]	@ (8004778 <LL_TIM_OC_EnableFast+0x98>)
 8004750:	5cd3      	ldrb	r3, [r2, r3]
 8004752:	440b      	add	r3, r1
 8004754:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	4907      	ldr	r1, [pc, #28]	@ (800477c <LL_TIM_OC_EnableFast+0x9c>)
 800475e:	5ccb      	ldrb	r3, [r1, r3]
 8004760:	4619      	mov	r1, r3
 8004762:	2304      	movs	r3, #4
 8004764:	408b      	lsls	r3, r1
 8004766:	431a      	orrs	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	601a      	str	r2, [r3, #0]
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	080172b8 	.word	0x080172b8
 800477c:	080172c4 	.word	0x080172c4

08004780 <LL_TIM_OC_EnablePreload>:
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d028      	beq.n	80047e2 <LL_TIM_OC_EnablePreload+0x62>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b04      	cmp	r3, #4
 8004794:	d023      	beq.n	80047de <LL_TIM_OC_EnablePreload+0x5e>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b10      	cmp	r3, #16
 800479a:	d01e      	beq.n	80047da <LL_TIM_OC_EnablePreload+0x5a>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b40      	cmp	r3, #64	@ 0x40
 80047a0:	d019      	beq.n	80047d6 <LL_TIM_OC_EnablePreload+0x56>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047a8:	d013      	beq.n	80047d2 <LL_TIM_OC_EnablePreload+0x52>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b0:	d00d      	beq.n	80047ce <LL_TIM_OC_EnablePreload+0x4e>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047b8:	d007      	beq.n	80047ca <LL_TIM_OC_EnablePreload+0x4a>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c0:	d101      	bne.n	80047c6 <LL_TIM_OC_EnablePreload+0x46>
 80047c2:	2307      	movs	r3, #7
 80047c4:	e00e      	b.n	80047e4 <LL_TIM_OC_EnablePreload+0x64>
 80047c6:	2308      	movs	r3, #8
 80047c8:	e00c      	b.n	80047e4 <LL_TIM_OC_EnablePreload+0x64>
 80047ca:	2306      	movs	r3, #6
 80047cc:	e00a      	b.n	80047e4 <LL_TIM_OC_EnablePreload+0x64>
 80047ce:	2305      	movs	r3, #5
 80047d0:	e008      	b.n	80047e4 <LL_TIM_OC_EnablePreload+0x64>
 80047d2:	2304      	movs	r3, #4
 80047d4:	e006      	b.n	80047e4 <LL_TIM_OC_EnablePreload+0x64>
 80047d6:	2303      	movs	r3, #3
 80047d8:	e004      	b.n	80047e4 <LL_TIM_OC_EnablePreload+0x64>
 80047da:	2302      	movs	r3, #2
 80047dc:	e002      	b.n	80047e4 <LL_TIM_OC_EnablePreload+0x64>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <LL_TIM_OC_EnablePreload+0x64>
 80047e2:	2300      	movs	r3, #0
 80047e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3318      	adds	r3, #24
 80047ea:	4619      	mov	r1, r3
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004818 <LL_TIM_OC_EnablePreload+0x98>)
 80047f0:	5cd3      	ldrb	r3, [r2, r3]
 80047f2:	440b      	add	r3, r1
 80047f4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	4907      	ldr	r1, [pc, #28]	@ (800481c <LL_TIM_OC_EnablePreload+0x9c>)
 80047fe:	5ccb      	ldrb	r3, [r1, r3]
 8004800:	4619      	mov	r1, r3
 8004802:	2308      	movs	r3, #8
 8004804:	408b      	lsls	r3, r1
 8004806:	431a      	orrs	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	601a      	str	r2, [r3, #0]
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	080172b8 	.word	0x080172b8
 800481c:	080172c4 	.word	0x080172c4

08004820 <LL_TIM_SetClockSource>:
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	4b06      	ldr	r3, [pc, #24]	@ (8004848 <LL_TIM_SetClockSource+0x28>)
 8004830:	4013      	ands	r3, r2
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	609a      	str	r2, [r3, #8]
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	fffebff8 	.word	0xfffebff8

0800484c <LL_TIM_SetTriggerOutput>:
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	605a      	str	r2, [r3, #4]
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <LL_TIM_DisableMasterSlaveMode>:
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	609a      	str	r2, [r3, #8]
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <LL_AHB4_GRP1_EnableClock>:
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 800489c:	4b0a      	ldr	r3, [pc, #40]	@ (80048c8 <LL_AHB4_GRP1_EnableClock+0x34>)
 800489e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80048a2:	4909      	ldr	r1, [pc, #36]	@ (80048c8 <LL_AHB4_GRP1_EnableClock+0x34>)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80048ac:	4b06      	ldr	r3, [pc, #24]	@ (80048c8 <LL_AHB4_GRP1_EnableClock+0x34>)
 80048ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4013      	ands	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80048b8:	68fb      	ldr	r3, [r7, #12]
}
 80048ba:	bf00      	nop
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	58024400 	.word	0x58024400

080048cc <LL_APB1_GRP1_EnableClock>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 80048d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004900 <LL_APB1_GRP1_EnableClock+0x34>)
 80048d6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80048da:	4909      	ldr	r1, [pc, #36]	@ (8004900 <LL_APB1_GRP1_EnableClock+0x34>)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 80048e4:	4b06      	ldr	r3, [pc, #24]	@ (8004900 <LL_APB1_GRP1_EnableClock+0x34>)
 80048e6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4013      	ands	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80048f0:	68fb      	ldr	r3, [r7, #12]
}
 80048f2:	bf00      	nop
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	58024400 	.word	0x58024400

08004904 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
DMA_HandleTypeDef hdma_tim3_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b094      	sub	sp, #80	@ 0x50
 8004908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800490a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	605a      	str	r2, [r3, #4]
 8004914:	609a      	str	r2, [r3, #8]
 8004916:	60da      	str	r2, [r3, #12]
 8004918:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800491a:	f107 031c 	add.w	r3, r7, #28
 800491e:	2220      	movs	r2, #32
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f00d fa04 	bl	8011d30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004928:	1d3b      	adds	r3, r7, #4
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	605a      	str	r2, [r3, #4]
 8004930:	609a      	str	r2, [r3, #8]
 8004932:	60da      	str	r2, [r3, #12]
 8004934:	611a      	str	r2, [r3, #16]
 8004936:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8004938:	2001      	movs	r0, #1
 800493a:	f7ff ffc7 	bl	80048cc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 546;
 800493e:	f240 2322 	movw	r3, #546	@ 0x222
 8004942:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004944:	2300      	movs	r3, #0
 8004946:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 249;
 8004948:	23f9      	movs	r3, #249	@ 0xf9
 800494a:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800494c:	2300      	movs	r3, #0
 800494e:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8004950:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004954:	4619      	mov	r1, r3
 8004956:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800495a:	f00b fc15 	bl	8010188 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 800495e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004962:	f7ff feac 	bl	80046be <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004966:	2100      	movs	r1, #0
 8004968:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800496c:	f7ff ff58 	bl	8004820 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8004970:	2101      	movs	r1, #1
 8004972:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004976:	f7ff ff03 	bl	8004780 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800497a:	2360      	movs	r3, #96	@ 0x60
 800497c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800497e:	2300      	movs	r3, #0
 8004980:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004982:	2300      	movs	r3, #0
 8004984:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 125;
 8004986:	237d      	movs	r3, #125	@ 0x7d
 8004988:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800498a:	2300      	movs	r3, #0
 800498c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800498e:	f107 031c 	add.w	r3, r7, #28
 8004992:	461a      	mov	r2, r3
 8004994:	2101      	movs	r1, #1
 8004996:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800499a:	f00b fc95 	bl	80102c8 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM2, LL_TIM_CHANNEL_CH1);
 800499e:	2101      	movs	r1, #1
 80049a0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80049a4:	f7ff fe9c 	bl	80046e0 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80049a8:	2100      	movs	r1, #0
 80049aa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80049ae:	f7ff ff4d 	bl	800484c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80049b2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80049b6:	f7ff ff5c 	bl	8004872 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 80049ba:	2001      	movs	r0, #1
 80049bc:	f7ff ff6a 	bl	8004894 <LL_AHB4_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80049c0:	2320      	movs	r3, #32
 80049c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80049c4:	2302      	movs	r3, #2
 80049c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80049c8:	2300      	movs	r3, #0
 80049ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80049d4:	2301      	movs	r3, #1
 80049d6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d8:	1d3b      	adds	r3, r7, #4
 80049da:	4619      	mov	r1, r3
 80049dc:	4803      	ldr	r0, [pc, #12]	@ (80049ec <MX_TIM2_Init+0xe8>)
 80049de:	f00a fb73 	bl	800f0c8 <LL_GPIO_Init>

}
 80049e2:	bf00      	nop
 80049e4:	3750      	adds	r7, #80	@ 0x50
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	58020000 	.word	0x58020000

080049f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08e      	sub	sp, #56	@ 0x38
 80049f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	609a      	str	r2, [r3, #8]
 8004a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a04:	f107 031c 	add.w	r3, r7, #28
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a10:	463b      	mov	r3, r7
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	605a      	str	r2, [r3, #4]
 8004a18:	609a      	str	r2, [r3, #8]
 8004a1a:	60da      	str	r2, [r3, #12]
 8004a1c:	611a      	str	r2, [r3, #16]
 8004a1e:	615a      	str	r2, [r3, #20]
 8004a20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004a22:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad8 <MX_TIM3_Init+0xe8>)
 8004a24:	4a2d      	ldr	r2, [pc, #180]	@ (8004adc <MX_TIM3_Init+0xec>)
 8004a26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004a28:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad8 <MX_TIM3_Init+0xe8>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad8 <MX_TIM3_Init+0xe8>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 343;
 8004a34:	4b28      	ldr	r3, [pc, #160]	@ (8004ad8 <MX_TIM3_Init+0xe8>)
 8004a36:	f240 1257 	movw	r2, #343	@ 0x157
 8004a3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a3c:	4b26      	ldr	r3, [pc, #152]	@ (8004ad8 <MX_TIM3_Init+0xe8>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a42:	4b25      	ldr	r3, [pc, #148]	@ (8004ad8 <MX_TIM3_Init+0xe8>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004a48:	4823      	ldr	r0, [pc, #140]	@ (8004ad8 <MX_TIM3_Init+0xe8>)
 8004a4a:	f008 fce9 	bl	800d420 <HAL_TIM_Base_Init>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004a54:	f7fe fbee 	bl	8003234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004a5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004a62:	4619      	mov	r1, r3
 8004a64:	481c      	ldr	r0, [pc, #112]	@ (8004ad8 <MX_TIM3_Init+0xe8>)
 8004a66:	f009 fb95 	bl	800e194 <HAL_TIM_ConfigClockSource>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004a70:	f7fe fbe0 	bl	8003234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004a74:	4818      	ldr	r0, [pc, #96]	@ (8004ad8 <MX_TIM3_Init+0xe8>)
 8004a76:	f008 fdd0 	bl	800d61a <HAL_TIM_PWM_Init>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004a80:	f7fe fbd8 	bl	8003234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a8c:	f107 031c 	add.w	r3, r7, #28
 8004a90:	4619      	mov	r1, r3
 8004a92:	4811      	ldr	r0, [pc, #68]	@ (8004ad8 <MX_TIM3_Init+0xe8>)
 8004a94:	f00a f9a2 	bl	800eddc <HAL_TIMEx_MasterConfigSynchronization>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004a9e:	f7fe fbc9 	bl	8003234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004aa2:	2360      	movs	r3, #96	@ 0x60
 8004aa4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ab2:	463b      	mov	r3, r7
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4807      	ldr	r0, [pc, #28]	@ (8004ad8 <MX_TIM3_Init+0xe8>)
 8004aba:	f009 fa57 	bl	800df6c <HAL_TIM_PWM_ConfigChannel>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004ac4:	f7fe fbb6 	bl	8003234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004ac8:	4803      	ldr	r0, [pc, #12]	@ (8004ad8 <MX_TIM3_Init+0xe8>)
 8004aca:	f000 f947 	bl	8004d5c <HAL_TIM_MspPostInit>

}
 8004ace:	bf00      	nop
 8004ad0:	3738      	adds	r7, #56	@ 0x38
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	24000630 	.word	0x24000630
 8004adc:	40000400 	.word	0x40000400

08004ae0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08e      	sub	sp, #56	@ 0x38
 8004ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ae6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	605a      	str	r2, [r3, #4]
 8004af0:	609a      	str	r2, [r3, #8]
 8004af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004af4:	f107 031c 	add.w	r3, r7, #28
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b00:	463b      	mov	r3, r7
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	605a      	str	r2, [r3, #4]
 8004b08:	609a      	str	r2, [r3, #8]
 8004b0a:	60da      	str	r2, [r3, #12]
 8004b0c:	611a      	str	r2, [r3, #16]
 8004b0e:	615a      	str	r2, [r3, #20]
 8004b10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004b12:	4b3e      	ldr	r3, [pc, #248]	@ (8004c0c <MX_TIM5_Init+0x12c>)
 8004b14:	4a3e      	ldr	r2, [pc, #248]	@ (8004c10 <MX_TIM5_Init+0x130>)
 8004b16:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 275-1;
 8004b18:	4b3c      	ldr	r3, [pc, #240]	@ (8004c0c <MX_TIM5_Init+0x12c>)
 8004b1a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8004b1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b20:	4b3a      	ldr	r3, [pc, #232]	@ (8004c0c <MX_TIM5_Init+0x12c>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2500-1;
 8004b26:	4b39      	ldr	r3, [pc, #228]	@ (8004c0c <MX_TIM5_Init+0x12c>)
 8004b28:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8004b2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b2e:	4b37      	ldr	r3, [pc, #220]	@ (8004c0c <MX_TIM5_Init+0x12c>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b34:	4b35      	ldr	r3, [pc, #212]	@ (8004c0c <MX_TIM5_Init+0x12c>)
 8004b36:	2280      	movs	r2, #128	@ 0x80
 8004b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004b3a:	4834      	ldr	r0, [pc, #208]	@ (8004c0c <MX_TIM5_Init+0x12c>)
 8004b3c:	f008 fc70 	bl	800d420 <HAL_TIM_Base_Init>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 8004b46:	f7fe fb75 	bl	8003234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004b50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004b54:	4619      	mov	r1, r3
 8004b56:	482d      	ldr	r0, [pc, #180]	@ (8004c0c <MX_TIM5_Init+0x12c>)
 8004b58:	f009 fb1c 	bl	800e194 <HAL_TIM_ConfigClockSource>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 8004b62:	f7fe fb67 	bl	8003234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004b66:	4829      	ldr	r0, [pc, #164]	@ (8004c0c <MX_TIM5_Init+0x12c>)
 8004b68:	f008 fd57 	bl	800d61a <HAL_TIM_PWM_Init>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8004b72:	f7fe fb5f 	bl	8003234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004b7e:	f107 031c 	add.w	r3, r7, #28
 8004b82:	4619      	mov	r1, r3
 8004b84:	4821      	ldr	r0, [pc, #132]	@ (8004c0c <MX_TIM5_Init+0x12c>)
 8004b86:	f00a f929 	bl	800eddc <HAL_TIMEx_MasterConfigSynchronization>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8004b90:	f7fe fb50 	bl	8003234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b94:	2360      	movs	r3, #96	@ 0x60
 8004b96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8004b98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ba6:	463b      	mov	r3, r7
 8004ba8:	2200      	movs	r2, #0
 8004baa:	4619      	mov	r1, r3
 8004bac:	4817      	ldr	r0, [pc, #92]	@ (8004c0c <MX_TIM5_Init+0x12c>)
 8004bae:	f009 f9dd 	bl	800df6c <HAL_TIM_PWM_ConfigChannel>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8004bb8:	f7fe fb3c 	bl	8003234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004bbc:	463b      	mov	r3, r7
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4812      	ldr	r0, [pc, #72]	@ (8004c0c <MX_TIM5_Init+0x12c>)
 8004bc4:	f009 f9d2 	bl	800df6c <HAL_TIM_PWM_ConfigChannel>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8004bce:	f7fe fb31 	bl	8003234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004bd2:	463b      	mov	r3, r7
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	480c      	ldr	r0, [pc, #48]	@ (8004c0c <MX_TIM5_Init+0x12c>)
 8004bda:	f009 f9c7 	bl	800df6c <HAL_TIM_PWM_ConfigChannel>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 8004be4:	f7fe fb26 	bl	8003234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004be8:	463b      	mov	r3, r7
 8004bea:	220c      	movs	r2, #12
 8004bec:	4619      	mov	r1, r3
 8004bee:	4807      	ldr	r0, [pc, #28]	@ (8004c0c <MX_TIM5_Init+0x12c>)
 8004bf0:	f009 f9bc 	bl	800df6c <HAL_TIM_PWM_ConfigChannel>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <MX_TIM5_Init+0x11e>
  {
    Error_Handler();
 8004bfa:	f7fe fb1b 	bl	8003234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8004bfe:	4803      	ldr	r0, [pc, #12]	@ (8004c0c <MX_TIM5_Init+0x12c>)
 8004c00:	f000 f8ac 	bl	8004d5c <HAL_TIM_MspPostInit>

}
 8004c04:	bf00      	nop
 8004c06:	3738      	adds	r7, #56	@ 0x38
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	2400067c 	.word	0x2400067c
 8004c10:	40000c00 	.word	0x40000c00

08004c14 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004c1a:	1d3b      	adds	r3, r7, #4
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	605a      	str	r2, [r3, #4]
 8004c22:	609a      	str	r2, [r3, #8]
 8004c24:	60da      	str	r2, [r3, #12]
 8004c26:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8004c28:	2020      	movs	r0, #32
 8004c2a:	f7ff fe4f 	bl	80048cc <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004c2e:	f7ff fcbd 	bl	80045ac <__NVIC_GetPriorityGrouping>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2200      	movs	r2, #0
 8004c36:	2100      	movs	r1, #0
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff fd0d 	bl	8004658 <NVIC_EncodePriority>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4619      	mov	r1, r3
 8004c42:	2037      	movs	r0, #55	@ 0x37
 8004c44:	f7ff fcde 	bl	8004604 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8004c48:	2037      	movs	r0, #55	@ 0x37
 8004c4a:	f7ff fcbd 	bl	80045c8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8004c4e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8004c52:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 274;
 8004c58:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8004c5c:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8004c5e:	1d3b      	adds	r3, r7, #4
 8004c60:	4619      	mov	r1, r3
 8004c62:	4808      	ldr	r0, [pc, #32]	@ (8004c84 <MX_TIM7_Init+0x70>)
 8004c64:	f00b fa90 	bl	8010188 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 8004c68:	4806      	ldr	r0, [pc, #24]	@ (8004c84 <MX_TIM7_Init+0x70>)
 8004c6a:	f7ff fd28 	bl	80046be <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8004c6e:	2100      	movs	r1, #0
 8004c70:	4804      	ldr	r0, [pc, #16]	@ (8004c84 <MX_TIM7_Init+0x70>)
 8004c72:	f7ff fdeb 	bl	800484c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8004c76:	4803      	ldr	r0, [pc, #12]	@ (8004c84 <MX_TIM7_Init+0x70>)
 8004c78:	f7ff fdfb 	bl	8004872 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004c7c:	bf00      	nop
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40001400 	.word	0x40001400

08004c88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a2c      	ldr	r2, [pc, #176]	@ (8004d48 <HAL_TIM_Base_MspInit+0xc0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d13e      	bne.n	8004d18 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8004d4c <HAL_TIM_Base_MspInit+0xc4>)
 8004c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8004d4c <HAL_TIM_Base_MspInit+0xc4>)
 8004ca2:	f043 0302 	orr.w	r3, r3, #2
 8004ca6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004caa:	4b28      	ldr	r3, [pc, #160]	@ (8004d4c <HAL_TIM_Base_MspInit+0xc4>)
 8004cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream2;
 8004cb8:	4b25      	ldr	r3, [pc, #148]	@ (8004d50 <HAL_TIM_Base_MspInit+0xc8>)
 8004cba:	4a26      	ldr	r2, [pc, #152]	@ (8004d54 <HAL_TIM_Base_MspInit+0xcc>)
 8004cbc:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8004cbe:	4b24      	ldr	r3, [pc, #144]	@ (8004d50 <HAL_TIM_Base_MspInit+0xc8>)
 8004cc0:	2218      	movs	r2, #24
 8004cc2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cc4:	4b22      	ldr	r3, [pc, #136]	@ (8004d50 <HAL_TIM_Base_MspInit+0xc8>)
 8004cc6:	2240      	movs	r2, #64	@ 0x40
 8004cc8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cca:	4b21      	ldr	r3, [pc, #132]	@ (8004d50 <HAL_TIM_Base_MspInit+0xc8>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d50 <HAL_TIM_Base_MspInit+0xc8>)
 8004cd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cd6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d50 <HAL_TIM_Base_MspInit+0xc8>)
 8004cda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004cde:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d50 <HAL_TIM_Base_MspInit+0xc8>)
 8004ce2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004ce6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8004ce8:	4b19      	ldr	r3, [pc, #100]	@ (8004d50 <HAL_TIM_Base_MspInit+0xc8>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004cee:	4b18      	ldr	r3, [pc, #96]	@ (8004d50 <HAL_TIM_Base_MspInit+0xc8>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cf4:	4b16      	ldr	r3, [pc, #88]	@ (8004d50 <HAL_TIM_Base_MspInit+0xc8>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8004cfa:	4815      	ldr	r0, [pc, #84]	@ (8004d50 <HAL_TIM_Base_MspInit+0xc8>)
 8004cfc:	f000 fdbc 	bl	8005878 <HAL_DMA_Init>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8004d06:	f7fe fa95 	bl	8003234 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a10      	ldr	r2, [pc, #64]	@ (8004d50 <HAL_TIM_Base_MspInit+0xc8>)
 8004d0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d10:	4a0f      	ldr	r2, [pc, #60]	@ (8004d50 <HAL_TIM_Base_MspInit+0xc8>)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004d16:	e013      	b.n	8004d40 <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM5)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a0e      	ldr	r2, [pc, #56]	@ (8004d58 <HAL_TIM_Base_MspInit+0xd0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d10e      	bne.n	8004d40 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d22:	4b0a      	ldr	r3, [pc, #40]	@ (8004d4c <HAL_TIM_Base_MspInit+0xc4>)
 8004d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d28:	4a08      	ldr	r2, [pc, #32]	@ (8004d4c <HAL_TIM_Base_MspInit+0xc4>)
 8004d2a:	f043 0308 	orr.w	r3, r3, #8
 8004d2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004d32:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <HAL_TIM_Base_MspInit+0xc4>)
 8004d34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
}
 8004d40:	bf00      	nop
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	58024400 	.word	0x58024400
 8004d50:	240006c8 	.word	0x240006c8
 8004d54:	40020040 	.word	0x40020040
 8004d58:	40000c00 	.word	0x40000c00

08004d5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08a      	sub	sp, #40	@ 0x28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d64:	f107 0314 	add.w	r3, r7, #20
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	60da      	str	r2, [r3, #12]
 8004d72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a25      	ldr	r2, [pc, #148]	@ (8004e10 <HAL_TIM_MspPostInit+0xb4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d11f      	bne.n	8004dbe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d7e:	4b25      	ldr	r3, [pc, #148]	@ (8004e14 <HAL_TIM_MspPostInit+0xb8>)
 8004d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d84:	4a23      	ldr	r2, [pc, #140]	@ (8004e14 <HAL_TIM_MspPostInit+0xb8>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d8e:	4b21      	ldr	r3, [pc, #132]	@ (8004e14 <HAL_TIM_MspPostInit+0xb8>)
 8004d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004d9c:	2380      	movs	r3, #128	@ 0x80
 8004d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da0:	2302      	movs	r3, #2
 8004da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da8:	2300      	movs	r3, #0
 8004daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004dac:	2302      	movs	r3, #2
 8004dae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004db0:	f107 0314 	add.w	r3, r7, #20
 8004db4:	4619      	mov	r1, r3
 8004db6:	4818      	ldr	r0, [pc, #96]	@ (8004e18 <HAL_TIM_MspPostInit+0xbc>)
 8004db8:	f003 f886 	bl	8007ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8004dbc:	e023      	b.n	8004e06 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a16      	ldr	r2, [pc, #88]	@ (8004e1c <HAL_TIM_MspPostInit+0xc0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d11e      	bne.n	8004e06 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dc8:	4b12      	ldr	r3, [pc, #72]	@ (8004e14 <HAL_TIM_MspPostInit+0xb8>)
 8004dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dce:	4a11      	ldr	r2, [pc, #68]	@ (8004e14 <HAL_TIM_MspPostInit+0xb8>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e14 <HAL_TIM_MspPostInit+0xb8>)
 8004dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004de6:	230f      	movs	r3, #15
 8004de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dea:	2302      	movs	r3, #2
 8004dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df2:	2300      	movs	r3, #0
 8004df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004df6:	2302      	movs	r3, #2
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dfa:	f107 0314 	add.w	r3, r7, #20
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4805      	ldr	r0, [pc, #20]	@ (8004e18 <HAL_TIM_MspPostInit+0xbc>)
 8004e02:	f003 f861 	bl	8007ec8 <HAL_GPIO_Init>
}
 8004e06:	bf00      	nop
 8004e08:	3728      	adds	r7, #40	@ 0x28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40000400 	.word	0x40000400
 8004e14:	58024400 	.word	0x58024400
 8004e18:	58020000 	.word	0x58020000
 8004e1c:	40000c00 	.word	0x40000c00

08004e20 <__NVIC_GetPriorityGrouping>:
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e24:	4b04      	ldr	r3, [pc, #16]	@ (8004e38 <__NVIC_GetPriorityGrouping+0x18>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	0a1b      	lsrs	r3, r3, #8
 8004e2a:	f003 0307 	and.w	r3, r3, #7
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	e000ed00 	.word	0xe000ed00

08004e3c <__NVIC_EnableIRQ>:
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	db0b      	blt.n	8004e66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	f003 021f 	and.w	r2, r3, #31
 8004e54:	4907      	ldr	r1, [pc, #28]	@ (8004e74 <__NVIC_EnableIRQ+0x38>)
 8004e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	e000e100 	.word	0xe000e100

08004e78 <__NVIC_SetPriority>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	6039      	str	r1, [r7, #0]
 8004e82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	db0a      	blt.n	8004ea2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	490c      	ldr	r1, [pc, #48]	@ (8004ec4 <__NVIC_SetPriority+0x4c>)
 8004e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e96:	0112      	lsls	r2, r2, #4
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004ea0:	e00a      	b.n	8004eb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	4908      	ldr	r1, [pc, #32]	@ (8004ec8 <__NVIC_SetPriority+0x50>)
 8004ea8:	88fb      	ldrh	r3, [r7, #6]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	3b04      	subs	r3, #4
 8004eb0:	0112      	lsls	r2, r2, #4
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	761a      	strb	r2, [r3, #24]
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	e000e100 	.word	0xe000e100
 8004ec8:	e000ed00 	.word	0xe000ed00

08004ecc <NVIC_EncodePriority>:
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b089      	sub	sp, #36	@ 0x24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	f1c3 0307 	rsb	r3, r3, #7
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	bf28      	it	cs
 8004eea:	2304      	movcs	r3, #4
 8004eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	2b06      	cmp	r3, #6
 8004ef4:	d902      	bls.n	8004efc <NVIC_EncodePriority+0x30>
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	3b03      	subs	r3, #3
 8004efa:	e000      	b.n	8004efe <NVIC_EncodePriority+0x32>
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43da      	mvns	r2, r3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	401a      	ands	r2, r3
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1e:	43d9      	mvns	r1, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f24:	4313      	orrs	r3, r2
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3724      	adds	r7, #36	@ 0x24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <LL_USART_Enable>:
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f043 0201 	orr.w	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	601a      	str	r2, [r3, #0]
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <LL_USART_DisableFIFO>:
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	601a      	str	r2, [r3, #0]
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <LL_USART_SetTXFIFOThreshold>:
{
 8004f72:	b480      	push	{r7}
 8004f74:	b089      	sub	sp, #36	@ 0x24
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3308      	adds	r3, #8
 8004f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	075b      	lsls	r3, r3, #29
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	61ba      	str	r2, [r7, #24]
 8004fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	6979      	ldr	r1, [r7, #20]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	613b      	str	r3, [r7, #16]
   return(result);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e4      	bne.n	8004f7c <LL_USART_SetTXFIFOThreshold+0xa>
}
 8004fb2:	bf00      	nop
 8004fb4:	bf00      	nop
 8004fb6:	3724      	adds	r7, #36	@ 0x24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <LL_USART_SetRXFIFOThreshold>:
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b089      	sub	sp, #36	@ 0x24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3308      	adds	r3, #8
 8004fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	065b      	lsls	r3, r3, #25
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3308      	adds	r3, #8
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	61ba      	str	r2, [r7, #24]
 8004fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6979      	ldr	r1, [r7, #20]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e4      	bne.n	8004fca <LL_USART_SetRXFIFOThreshold+0xa>
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	3724      	adds	r7, #36	@ 0x24
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <LL_USART_ConfigAsyncMode>:
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	609a      	str	r2, [r3, #8]
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <LL_USART_IsActiveFlag_TEACK>:
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800504a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800504e:	d101      	bne.n	8005054 <LL_USART_IsActiveFlag_TEACK+0x1a>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <LL_USART_IsActiveFlag_REACK>:
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005072:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005076:	d101      	bne.n	800507c <LL_USART_IsActiveFlag_REACK+0x1a>
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <LL_USART_IsActiveFlag_REACK+0x1c>
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <LL_AHB4_GRP1_EnableClock>:
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8005094:	4b0a      	ldr	r3, [pc, #40]	@ (80050c0 <LL_AHB4_GRP1_EnableClock+0x34>)
 8005096:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800509a:	4909      	ldr	r1, [pc, #36]	@ (80050c0 <LL_AHB4_GRP1_EnableClock+0x34>)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80050a4:	4b06      	ldr	r3, [pc, #24]	@ (80050c0 <LL_AHB4_GRP1_EnableClock+0x34>)
 80050a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4013      	ands	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80050b0:	68fb      	ldr	r3, [r7, #12]
}
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	58024400 	.word	0x58024400

080050c4 <LL_APB1_GRP1_EnableClock>:
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 80050cc:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <LL_APB1_GRP1_EnableClock+0x34>)
 80050ce:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80050d2:	4909      	ldr	r1, [pc, #36]	@ (80050f8 <LL_APB1_GRP1_EnableClock+0x34>)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 80050dc:	4b06      	ldr	r3, [pc, #24]	@ (80050f8 <LL_APB1_GRP1_EnableClock+0x34>)
 80050de:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4013      	ands	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80050e8:	68fb      	ldr	r3, [r7, #12]
}
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	58024400 	.word	0x58024400

080050fc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005104:	4b0a      	ldr	r3, [pc, #40]	@ (8005130 <LL_APB2_GRP1_EnableClock+0x34>)
 8005106:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800510a:	4909      	ldr	r1, [pc, #36]	@ (8005130 <LL_APB2_GRP1_EnableClock+0x34>)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4313      	orrs	r3, r2
 8005110:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005114:	4b06      	ldr	r3, [pc, #24]	@ (8005130 <LL_APB2_GRP1_EnableClock+0x34>)
 8005116:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4013      	ands	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005120:	68fb      	ldr	r3, [r7, #12]
}
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	58024400 	.word	0x58024400

08005134 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b0bc      	sub	sp, #240	@ 0xf0
 8005138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 800513a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800513e:	2220      	movs	r2, #32
 8005140:	2100      	movs	r1, #0
 8005142:	4618      	mov	r0, r3
 8005144:	f00c fdf4 	bl	8011d30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005148:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	605a      	str	r2, [r3, #4]
 8005152:	609a      	str	r2, [r3, #8]
 8005154:	60da      	str	r2, [r3, #12]
 8005156:	611a      	str	r2, [r3, #16]
 8005158:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800515a:	463b      	mov	r3, r7
 800515c:	22b8      	movs	r2, #184	@ 0xb8
 800515e:	2100      	movs	r1, #0
 8005160:	4618      	mov	r0, r3
 8005162:	f00c fde5 	bl	8011d30 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005166:	f04f 0202 	mov.w	r2, #2
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005172:	2300      	movs	r3, #0
 8005174:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005176:	463b      	mov	r3, r7
 8005178:	4618      	mov	r0, r3
 800517a:	f006 fe4d 	bl	800be18 <HAL_RCCEx_PeriphCLKConfig>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 8005184:	f7fe f856 	bl	8003234 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8005188:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800518c:	f7ff ff9a 	bl	80050c4 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 8005190:	2008      	movs	r0, #8
 8005192:	f7ff ff7b 	bl	800508c <LL_AHB4_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PD0   ------> UART4_RX
  PD1   ------> UART4_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8005196:	2303      	movs	r3, #3
 8005198:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800519c:	2302      	movs	r3, #2
 800519e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80051a2:	2300      	movs	r3, #0
 80051a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80051ae:	2300      	movs	r3, #0
 80051b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80051b4:	2308      	movs	r3, #8
 80051b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051ba:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80051be:	4619      	mov	r1, r3
 80051c0:	4827      	ldr	r0, [pc, #156]	@ (8005260 <MX_UART4_Init+0x12c>)
 80051c2:	f009 ff81 	bl	800f0c8 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80051c6:	f7ff fe2b 	bl	8004e20 <__NVIC_GetPriorityGrouping>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2200      	movs	r2, #0
 80051ce:	2100      	movs	r1, #0
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fe7b 	bl	8004ecc <NVIC_EncodePriority>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4619      	mov	r1, r3
 80051da:	2034      	movs	r0, #52	@ 0x34
 80051dc:	f7ff fe4c 	bl	8004e78 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 80051e0:	2034      	movs	r0, #52	@ 0x34
 80051e2:	f7ff fe2b 	bl	8004e3c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80051e6:	2300      	movs	r3, #0
 80051e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  UART_InitStruct.BaudRate = 115200;
 80051ec:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80051f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80051f4:	2300      	movs	r3, #0
 80051f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80051fa:	2300      	movs	r3, #0
 80051fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005200:	2300      	movs	r3, #0
 8005202:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8005206:	2304      	movs	r3, #4
 8005208:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800520c:	2300      	movs	r3, #0
 800520e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005212:	2300      	movs	r3, #0
 8005214:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  LL_USART_Init(UART4, &UART_InitStruct);
 8005218:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800521c:	4619      	mov	r1, r3
 800521e:	4811      	ldr	r0, [pc, #68]	@ (8005264 <MX_UART4_Init+0x130>)
 8005220:	f00b fc0c 	bl	8010a3c <LL_USART_Init>
  LL_USART_DisableFIFO(UART4);
 8005224:	480f      	ldr	r0, [pc, #60]	@ (8005264 <MX_UART4_Init+0x130>)
 8005226:	f7ff fe94 	bl	8004f52 <LL_USART_DisableFIFO>
  LL_USART_SetTXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 800522a:	2100      	movs	r1, #0
 800522c:	480d      	ldr	r0, [pc, #52]	@ (8005264 <MX_UART4_Init+0x130>)
 800522e:	f7ff fea0 	bl	8004f72 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 8005232:	2100      	movs	r1, #0
 8005234:	480b      	ldr	r0, [pc, #44]	@ (8005264 <MX_UART4_Init+0x130>)
 8005236:	f7ff fec3 	bl	8004fc0 <LL_USART_SetRXFIFOThreshold>
  LL_USART_ConfigAsyncMode(UART4);
 800523a:	480a      	ldr	r0, [pc, #40]	@ (8005264 <MX_UART4_Init+0x130>)
 800523c:	f7ff fee7 	bl	800500e <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType UART4 */

  /* USER CODE END WKUPType UART4 */

  LL_USART_Enable(UART4);
 8005240:	4808      	ldr	r0, [pc, #32]	@ (8005264 <MX_UART4_Init+0x130>)
 8005242:	f7ff fe76 	bl	8004f32 <LL_USART_Enable>

  /* Polling UART4 initialisation */
  while(!(LL_USART_IsActiveFlag_REACK(UART4)))
 8005246:	bf00      	nop
 8005248:	4806      	ldr	r0, [pc, #24]	@ (8005264 <MX_UART4_Init+0x130>)
 800524a:	f7ff ff0a 	bl	8005062 <LL_USART_IsActiveFlag_REACK>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f9      	beq.n	8005248 <MX_UART4_Init+0x114>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005254:	bf00      	nop
 8005256:	bf00      	nop
 8005258:	37f0      	adds	r7, #240	@ 0xf0
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	58020c00 	.word	0x58020c00
 8005264:	40004c00 	.word	0x40004c00

08005268 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b0bc      	sub	sp, #240	@ 0xf0
 800526c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800526e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8005272:	2220      	movs	r2, #32
 8005274:	2100      	movs	r1, #0
 8005276:	4618      	mov	r0, r3
 8005278:	f00c fd5a 	bl	8011d30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800527c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	609a      	str	r2, [r3, #8]
 8005288:	60da      	str	r2, [r3, #12]
 800528a:	611a      	str	r2, [r3, #16]
 800528c:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800528e:	463b      	mov	r3, r7
 8005290:	22b8      	movs	r2, #184	@ 0xb8
 8005292:	2100      	movs	r1, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f00c fd4b 	bl	8011d30 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800529a:	f04f 0201 	mov.w	r2, #1
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80052a6:	2300      	movs	r3, #0
 80052a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052aa:	463b      	mov	r3, r7
 80052ac:	4618      	mov	r0, r3
 80052ae:	f006 fdb3 	bl	800be18 <HAL_RCCEx_PeriphCLKConfig>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
 80052b8:	f7fd ffbc 	bl	8003234 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80052bc:	2020      	movs	r0, #32
 80052be:	f7ff ff1d 	bl	80050fc <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 80052c2:	2004      	movs	r0, #4
 80052c4:	f7ff fee2 	bl	800508c <LL_AHB4_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80052c8:	23c0      	movs	r3, #192	@ 0xc0
 80052ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80052ce:	2302      	movs	r3, #2
 80052d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80052d4:	2300      	movs	r3, #0
 80052d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80052e0:	2300      	movs	r3, #0
 80052e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80052e6:	2307      	movs	r3, #7
 80052e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052ec:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80052f0:	4619      	mov	r1, r3
 80052f2:	482a      	ldr	r0, [pc, #168]	@ (800539c <MX_USART6_UART_Init+0x134>)
 80052f4:	f009 fee8 	bl	800f0c8 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80052f8:	f7ff fd92 	bl	8004e20 <__NVIC_GetPriorityGrouping>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2200      	movs	r2, #0
 8005300:	2100      	movs	r1, #0
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff fde2 	bl	8004ecc <NVIC_EncodePriority>
 8005308:	4603      	mov	r3, r0
 800530a:	4619      	mov	r1, r3
 800530c:	2047      	movs	r0, #71	@ 0x47
 800530e:	f7ff fdb3 	bl	8004e78 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8005312:	2047      	movs	r0, #71	@ 0x47
 8005314:	f7ff fd92 	bl	8004e3c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8005318:	2300      	movs	r3, #0
 800531a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  USART_InitStruct.BaudRate = 115200;
 800531e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8005322:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005326:	2300      	movs	r3, #0
 8005328:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800532c:	2300      	movs	r3, #0
 800532e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005332:	2300      	movs	r3, #0
 8005334:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005338:	230c      	movs	r3, #12
 800533a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800533e:	2300      	movs	r3, #0
 8005340:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005344:	2300      	movs	r3, #0
 8005346:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  LL_USART_Init(USART6, &USART_InitStruct);
 800534a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800534e:	4619      	mov	r1, r3
 8005350:	4813      	ldr	r0, [pc, #76]	@ (80053a0 <MX_USART6_UART_Init+0x138>)
 8005352:	f00b fb73 	bl	8010a3c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8005356:	2100      	movs	r1, #0
 8005358:	4811      	ldr	r0, [pc, #68]	@ (80053a0 <MX_USART6_UART_Init+0x138>)
 800535a:	f7ff fe0a 	bl	8004f72 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 800535e:	2100      	movs	r1, #0
 8005360:	480f      	ldr	r0, [pc, #60]	@ (80053a0 <MX_USART6_UART_Init+0x138>)
 8005362:	f7ff fe2d 	bl	8004fc0 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART6);
 8005366:	480e      	ldr	r0, [pc, #56]	@ (80053a0 <MX_USART6_UART_Init+0x138>)
 8005368:	f7ff fdf3 	bl	8004f52 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART6);
 800536c:	480c      	ldr	r0, [pc, #48]	@ (80053a0 <MX_USART6_UART_Init+0x138>)
 800536e:	f7ff fe4e 	bl	800500e <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART6 */

  /* USER CODE END WKUPType USART6 */

  LL_USART_Enable(USART6);
 8005372:	480b      	ldr	r0, [pc, #44]	@ (80053a0 <MX_USART6_UART_Init+0x138>)
 8005374:	f7ff fddd 	bl	8004f32 <LL_USART_Enable>

  /* Polling USART6 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART6))) || (!(LL_USART_IsActiveFlag_REACK(USART6))))
 8005378:	bf00      	nop
 800537a:	4809      	ldr	r0, [pc, #36]	@ (80053a0 <MX_USART6_UART_Init+0x138>)
 800537c:	f7ff fe5d 	bl	800503a <LL_USART_IsActiveFlag_TEACK>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0f9      	beq.n	800537a <MX_USART6_UART_Init+0x112>
 8005386:	4806      	ldr	r0, [pc, #24]	@ (80053a0 <MX_USART6_UART_Init+0x138>)
 8005388:	f7ff fe6b 	bl	8005062 <LL_USART_IsActiveFlag_REACK>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0f3      	beq.n	800537a <MX_USART6_UART_Init+0x112>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005392:	bf00      	nop
 8005394:	bf00      	nop
 8005396:	37f0      	adds	r7, #240	@ 0xf0
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	58020800 	.word	0x58020800
 80053a0:	40011400 	.word	0x40011400

080053a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80053a4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80053e0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80053a8:	f7ff f8e8 	bl	800457c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80053ac:	f7ff f856 	bl	800445c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053b0:	480c      	ldr	r0, [pc, #48]	@ (80053e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80053b2:	490d      	ldr	r1, [pc, #52]	@ (80053e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80053b4:	4a0d      	ldr	r2, [pc, #52]	@ (80053ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80053b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053b8:	e002      	b.n	80053c0 <LoopCopyDataInit>

080053ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053be:	3304      	adds	r3, #4

080053c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053c4:	d3f9      	bcc.n	80053ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053c6:	4a0a      	ldr	r2, [pc, #40]	@ (80053f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80053c8:	4c0a      	ldr	r4, [pc, #40]	@ (80053f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80053ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053cc:	e001      	b.n	80053d2 <LoopFillZerobss>

080053ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053d0:	3204      	adds	r2, #4

080053d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053d4:	d3fb      	bcc.n	80053ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80053d6:	f00c fd23 	bl	8011e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053da:	f7fd fb4b 	bl	8002a74 <main>
  bx  lr
 80053de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80053e0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80053e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80053e8:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 80053ec:	0801776c 	.word	0x0801776c
  ldr r2, =_sbss
 80053f0:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 80053f4:	24000890 	.word	0x24000890

080053f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053f8:	e7fe      	b.n	80053f8 <ADC3_IRQHandler>
	...

080053fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005402:	2003      	movs	r0, #3
 8005404:	f000 f980 	bl	8005708 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005408:	f006 fb8c 	bl	800bb24 <HAL_RCC_GetSysClockFreq>
 800540c:	4602      	mov	r2, r0
 800540e:	4b15      	ldr	r3, [pc, #84]	@ (8005464 <HAL_Init+0x68>)
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	0a1b      	lsrs	r3, r3, #8
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	4913      	ldr	r1, [pc, #76]	@ (8005468 <HAL_Init+0x6c>)
 800541a:	5ccb      	ldrb	r3, [r1, r3]
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
 8005424:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005426:	4b0f      	ldr	r3, [pc, #60]	@ (8005464 <HAL_Init+0x68>)
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	4a0e      	ldr	r2, [pc, #56]	@ (8005468 <HAL_Init+0x6c>)
 8005430:	5cd3      	ldrb	r3, [r2, r3]
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
 800543c:	4a0b      	ldr	r2, [pc, #44]	@ (800546c <HAL_Init+0x70>)
 800543e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005440:	4a0b      	ldr	r2, [pc, #44]	@ (8005470 <HAL_Init+0x74>)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005446:	200f      	movs	r0, #15
 8005448:	f000 f814 	bl	8005474 <HAL_InitTick>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e002      	b.n	800545c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005456:	f7fe fc83 	bl	8003d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	58024400 	.word	0x58024400
 8005468:	080172a8 	.word	0x080172a8
 800546c:	24000010 	.word	0x24000010
 8005470:	2400000c 	.word	0x2400000c

08005474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800547c:	4b15      	ldr	r3, [pc, #84]	@ (80054d4 <HAL_InitTick+0x60>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e021      	b.n	80054cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005488:	4b13      	ldr	r3, [pc, #76]	@ (80054d8 <HAL_InitTick+0x64>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	4b11      	ldr	r3, [pc, #68]	@ (80054d4 <HAL_InitTick+0x60>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	4619      	mov	r1, r3
 8005492:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005496:	fbb3 f3f1 	udiv	r3, r3, r1
 800549a:	fbb2 f3f3 	udiv	r3, r2, r3
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f965 	bl	800576e <HAL_SYSTICK_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e00e      	b.n	80054cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b0f      	cmp	r3, #15
 80054b2:	d80a      	bhi.n	80054ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054b4:	2200      	movs	r2, #0
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054bc:	f000 f92f 	bl	800571e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054c0:	4a06      	ldr	r2, [pc, #24]	@ (80054dc <HAL_InitTick+0x68>)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e000      	b.n	80054cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	24000018 	.word	0x24000018
 80054d8:	2400000c 	.word	0x2400000c
 80054dc:	24000014 	.word	0x24000014

080054e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80054e4:	4b06      	ldr	r3, [pc, #24]	@ (8005500 <HAL_IncTick+0x20>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	4b06      	ldr	r3, [pc, #24]	@ (8005504 <HAL_IncTick+0x24>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4413      	add	r3, r2
 80054f0:	4a04      	ldr	r2, [pc, #16]	@ (8005504 <HAL_IncTick+0x24>)
 80054f2:	6013      	str	r3, [r2, #0]
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	24000018 	.word	0x24000018
 8005504:	24000740 	.word	0x24000740

08005508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  return uwTick;
 800550c:	4b03      	ldr	r3, [pc, #12]	@ (800551c <HAL_GetTick+0x14>)
 800550e:	681b      	ldr	r3, [r3, #0]
}
 8005510:	4618      	mov	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	24000740 	.word	0x24000740

08005520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005528:	f7ff ffee 	bl	8005508 <HAL_GetTick>
 800552c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005538:	d005      	beq.n	8005546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800553a:	4b0a      	ldr	r3, [pc, #40]	@ (8005564 <HAL_Delay+0x44>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005546:	bf00      	nop
 8005548:	f7ff ffde 	bl	8005508 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	429a      	cmp	r2, r3
 8005556:	d8f7      	bhi.n	8005548 <HAL_Delay+0x28>
  {
  }
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	24000018 	.word	0x24000018

08005568 <__NVIC_SetPriorityGrouping>:
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005578:	4b0b      	ldr	r3, [pc, #44]	@ (80055a8 <__NVIC_SetPriorityGrouping+0x40>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005584:	4013      	ands	r3, r2
 8005586:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005590:	4b06      	ldr	r3, [pc, #24]	@ (80055ac <__NVIC_SetPriorityGrouping+0x44>)
 8005592:	4313      	orrs	r3, r2
 8005594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005596:	4a04      	ldr	r2, [pc, #16]	@ (80055a8 <__NVIC_SetPriorityGrouping+0x40>)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	60d3      	str	r3, [r2, #12]
}
 800559c:	bf00      	nop
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	e000ed00 	.word	0xe000ed00
 80055ac:	05fa0000 	.word	0x05fa0000

080055b0 <__NVIC_GetPriorityGrouping>:
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055b4:	4b04      	ldr	r3, [pc, #16]	@ (80055c8 <__NVIC_GetPriorityGrouping+0x18>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	0a1b      	lsrs	r3, r3, #8
 80055ba:	f003 0307 	and.w	r3, r3, #7
}
 80055be:	4618      	mov	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	e000ed00 	.word	0xe000ed00

080055cc <__NVIC_EnableIRQ>:
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80055d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	db0b      	blt.n	80055f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	f003 021f 	and.w	r2, r3, #31
 80055e4:	4907      	ldr	r1, [pc, #28]	@ (8005604 <__NVIC_EnableIRQ+0x38>)
 80055e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	2001      	movs	r0, #1
 80055ee:	fa00 f202 	lsl.w	r2, r0, r2
 80055f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	e000e100 	.word	0xe000e100

08005608 <__NVIC_SetPriority>:
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	6039      	str	r1, [r7, #0]
 8005612:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005618:	2b00      	cmp	r3, #0
 800561a:	db0a      	blt.n	8005632 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	b2da      	uxtb	r2, r3
 8005620:	490c      	ldr	r1, [pc, #48]	@ (8005654 <__NVIC_SetPriority+0x4c>)
 8005622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005626:	0112      	lsls	r2, r2, #4
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	440b      	add	r3, r1
 800562c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005630:	e00a      	b.n	8005648 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	b2da      	uxtb	r2, r3
 8005636:	4908      	ldr	r1, [pc, #32]	@ (8005658 <__NVIC_SetPriority+0x50>)
 8005638:	88fb      	ldrh	r3, [r7, #6]
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	3b04      	subs	r3, #4
 8005640:	0112      	lsls	r2, r2, #4
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	440b      	add	r3, r1
 8005646:	761a      	strb	r2, [r3, #24]
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	e000e100 	.word	0xe000e100
 8005658:	e000ed00 	.word	0xe000ed00

0800565c <NVIC_EncodePriority>:
{
 800565c:	b480      	push	{r7}
 800565e:	b089      	sub	sp, #36	@ 0x24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f1c3 0307 	rsb	r3, r3, #7
 8005676:	2b04      	cmp	r3, #4
 8005678:	bf28      	it	cs
 800567a:	2304      	movcs	r3, #4
 800567c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	3304      	adds	r3, #4
 8005682:	2b06      	cmp	r3, #6
 8005684:	d902      	bls.n	800568c <NVIC_EncodePriority+0x30>
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	3b03      	subs	r3, #3
 800568a:	e000      	b.n	800568e <NVIC_EncodePriority+0x32>
 800568c:	2300      	movs	r3, #0
 800568e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005690:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	43da      	mvns	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	401a      	ands	r2, r3
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	43d9      	mvns	r1, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056b4:	4313      	orrs	r3, r2
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3724      	adds	r7, #36	@ 0x24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056d4:	d301      	bcc.n	80056da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056d6:	2301      	movs	r3, #1
 80056d8:	e00f      	b.n	80056fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056da:	4a0a      	ldr	r2, [pc, #40]	@ (8005704 <SysTick_Config+0x40>)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3b01      	subs	r3, #1
 80056e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056e2:	210f      	movs	r1, #15
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056e8:	f7ff ff8e 	bl	8005608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056ec:	4b05      	ldr	r3, [pc, #20]	@ (8005704 <SysTick_Config+0x40>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056f2:	4b04      	ldr	r3, [pc, #16]	@ (8005704 <SysTick_Config+0x40>)
 80056f4:	2207      	movs	r2, #7
 80056f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	e000e010 	.word	0xe000e010

08005708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff ff29 	bl	8005568 <__NVIC_SetPriorityGrouping>
}
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b086      	sub	sp, #24
 8005722:	af00      	add	r7, sp, #0
 8005724:	4603      	mov	r3, r0
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
 800572a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800572c:	f7ff ff40 	bl	80055b0 <__NVIC_GetPriorityGrouping>
 8005730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	68b9      	ldr	r1, [r7, #8]
 8005736:	6978      	ldr	r0, [r7, #20]
 8005738:	f7ff ff90 	bl	800565c <NVIC_EncodePriority>
 800573c:	4602      	mov	r2, r0
 800573e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005742:	4611      	mov	r1, r2
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff ff5f 	bl	8005608 <__NVIC_SetPriority>
}
 800574a:	bf00      	nop
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b082      	sub	sp, #8
 8005756:	af00      	add	r7, sp, #0
 8005758:	4603      	mov	r3, r0
 800575a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800575c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff ff33 	bl	80055cc <__NVIC_EnableIRQ>
}
 8005766:	bf00      	nop
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b082      	sub	sp, #8
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff ffa4 	bl	80056c4 <SysTick_Config>
 800577c:	4603      	mov	r3, r0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800578c:	f3bf 8f5f 	dmb	sy
}
 8005790:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005792:	4b07      	ldr	r3, [pc, #28]	@ (80057b0 <HAL_MPU_Disable+0x28>)
 8005794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005796:	4a06      	ldr	r2, [pc, #24]	@ (80057b0 <HAL_MPU_Disable+0x28>)
 8005798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800579c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800579e:	4b05      	ldr	r3, [pc, #20]	@ (80057b4 <HAL_MPU_Disable+0x2c>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	605a      	str	r2, [r3, #4]
}
 80057a4:	bf00      	nop
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	e000ed00 	.word	0xe000ed00
 80057b4:	e000ed90 	.word	0xe000ed90

080057b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80057c0:	4a0b      	ldr	r2, [pc, #44]	@ (80057f0 <HAL_MPU_Enable+0x38>)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f043 0301 	orr.w	r3, r3, #1
 80057c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80057ca:	4b0a      	ldr	r3, [pc, #40]	@ (80057f4 <HAL_MPU_Enable+0x3c>)
 80057cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ce:	4a09      	ldr	r2, [pc, #36]	@ (80057f4 <HAL_MPU_Enable+0x3c>)
 80057d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80057d6:	f3bf 8f4f 	dsb	sy
}
 80057da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80057dc:	f3bf 8f6f 	isb	sy
}
 80057e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	e000ed90 	.word	0xe000ed90
 80057f4:	e000ed00 	.word	0xe000ed00

080057f8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	785a      	ldrb	r2, [r3, #1]
 8005804:	4b1b      	ldr	r3, [pc, #108]	@ (8005874 <HAL_MPU_ConfigRegion+0x7c>)
 8005806:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005808:	4b1a      	ldr	r3, [pc, #104]	@ (8005874 <HAL_MPU_ConfigRegion+0x7c>)
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	4a19      	ldr	r2, [pc, #100]	@ (8005874 <HAL_MPU_ConfigRegion+0x7c>)
 800580e:	f023 0301 	bic.w	r3, r3, #1
 8005812:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005814:	4a17      	ldr	r2, [pc, #92]	@ (8005874 <HAL_MPU_ConfigRegion+0x7c>)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	7b1b      	ldrb	r3, [r3, #12]
 8005820:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	7adb      	ldrb	r3, [r3, #11]
 8005826:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005828:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	7a9b      	ldrb	r3, [r3, #10]
 800582e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005830:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	7b5b      	ldrb	r3, [r3, #13]
 8005836:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005838:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	7b9b      	ldrb	r3, [r3, #14]
 800583e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005840:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	7bdb      	ldrb	r3, [r3, #15]
 8005846:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005848:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	7a5b      	ldrb	r3, [r3, #9]
 800584e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005850:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	7a1b      	ldrb	r3, [r3, #8]
 8005856:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005858:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	7812      	ldrb	r2, [r2, #0]
 800585e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005860:	4a04      	ldr	r2, [pc, #16]	@ (8005874 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005862:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005864:	6113      	str	r3, [r2, #16]
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	e000ed90 	.word	0xe000ed90

08005878 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005880:	f7ff fe42 	bl	8005508 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e312      	b.n	8005eb6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a66      	ldr	r2, [pc, #408]	@ (8005a30 <HAL_DMA_Init+0x1b8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d04a      	beq.n	8005930 <HAL_DMA_Init+0xb8>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a65      	ldr	r2, [pc, #404]	@ (8005a34 <HAL_DMA_Init+0x1bc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d045      	beq.n	8005930 <HAL_DMA_Init+0xb8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a63      	ldr	r2, [pc, #396]	@ (8005a38 <HAL_DMA_Init+0x1c0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d040      	beq.n	8005930 <HAL_DMA_Init+0xb8>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a62      	ldr	r2, [pc, #392]	@ (8005a3c <HAL_DMA_Init+0x1c4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d03b      	beq.n	8005930 <HAL_DMA_Init+0xb8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a60      	ldr	r2, [pc, #384]	@ (8005a40 <HAL_DMA_Init+0x1c8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d036      	beq.n	8005930 <HAL_DMA_Init+0xb8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a5f      	ldr	r2, [pc, #380]	@ (8005a44 <HAL_DMA_Init+0x1cc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d031      	beq.n	8005930 <HAL_DMA_Init+0xb8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a5d      	ldr	r2, [pc, #372]	@ (8005a48 <HAL_DMA_Init+0x1d0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d02c      	beq.n	8005930 <HAL_DMA_Init+0xb8>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a5c      	ldr	r2, [pc, #368]	@ (8005a4c <HAL_DMA_Init+0x1d4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d027      	beq.n	8005930 <HAL_DMA_Init+0xb8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a5a      	ldr	r2, [pc, #360]	@ (8005a50 <HAL_DMA_Init+0x1d8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d022      	beq.n	8005930 <HAL_DMA_Init+0xb8>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a59      	ldr	r2, [pc, #356]	@ (8005a54 <HAL_DMA_Init+0x1dc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d01d      	beq.n	8005930 <HAL_DMA_Init+0xb8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a57      	ldr	r2, [pc, #348]	@ (8005a58 <HAL_DMA_Init+0x1e0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d018      	beq.n	8005930 <HAL_DMA_Init+0xb8>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a56      	ldr	r2, [pc, #344]	@ (8005a5c <HAL_DMA_Init+0x1e4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d013      	beq.n	8005930 <HAL_DMA_Init+0xb8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a54      	ldr	r2, [pc, #336]	@ (8005a60 <HAL_DMA_Init+0x1e8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00e      	beq.n	8005930 <HAL_DMA_Init+0xb8>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a53      	ldr	r2, [pc, #332]	@ (8005a64 <HAL_DMA_Init+0x1ec>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d009      	beq.n	8005930 <HAL_DMA_Init+0xb8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a51      	ldr	r2, [pc, #324]	@ (8005a68 <HAL_DMA_Init+0x1f0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d004      	beq.n	8005930 <HAL_DMA_Init+0xb8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a50      	ldr	r2, [pc, #320]	@ (8005a6c <HAL_DMA_Init+0x1f4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d101      	bne.n	8005934 <HAL_DMA_Init+0xbc>
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <HAL_DMA_Init+0xbe>
 8005934:	2300      	movs	r3, #0
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 813c 	beq.w	8005bb4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a37      	ldr	r2, [pc, #220]	@ (8005a30 <HAL_DMA_Init+0x1b8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d04a      	beq.n	80059ec <HAL_DMA_Init+0x174>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a36      	ldr	r2, [pc, #216]	@ (8005a34 <HAL_DMA_Init+0x1bc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d045      	beq.n	80059ec <HAL_DMA_Init+0x174>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a34      	ldr	r2, [pc, #208]	@ (8005a38 <HAL_DMA_Init+0x1c0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d040      	beq.n	80059ec <HAL_DMA_Init+0x174>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a33      	ldr	r2, [pc, #204]	@ (8005a3c <HAL_DMA_Init+0x1c4>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d03b      	beq.n	80059ec <HAL_DMA_Init+0x174>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a31      	ldr	r2, [pc, #196]	@ (8005a40 <HAL_DMA_Init+0x1c8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d036      	beq.n	80059ec <HAL_DMA_Init+0x174>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a30      	ldr	r2, [pc, #192]	@ (8005a44 <HAL_DMA_Init+0x1cc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d031      	beq.n	80059ec <HAL_DMA_Init+0x174>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a2e      	ldr	r2, [pc, #184]	@ (8005a48 <HAL_DMA_Init+0x1d0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d02c      	beq.n	80059ec <HAL_DMA_Init+0x174>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a2d      	ldr	r2, [pc, #180]	@ (8005a4c <HAL_DMA_Init+0x1d4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d027      	beq.n	80059ec <HAL_DMA_Init+0x174>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005a50 <HAL_DMA_Init+0x1d8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d022      	beq.n	80059ec <HAL_DMA_Init+0x174>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005a54 <HAL_DMA_Init+0x1dc>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d01d      	beq.n	80059ec <HAL_DMA_Init+0x174>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a28      	ldr	r2, [pc, #160]	@ (8005a58 <HAL_DMA_Init+0x1e0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d018      	beq.n	80059ec <HAL_DMA_Init+0x174>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a27      	ldr	r2, [pc, #156]	@ (8005a5c <HAL_DMA_Init+0x1e4>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d013      	beq.n	80059ec <HAL_DMA_Init+0x174>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a25      	ldr	r2, [pc, #148]	@ (8005a60 <HAL_DMA_Init+0x1e8>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00e      	beq.n	80059ec <HAL_DMA_Init+0x174>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a24      	ldr	r2, [pc, #144]	@ (8005a64 <HAL_DMA_Init+0x1ec>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d009      	beq.n	80059ec <HAL_DMA_Init+0x174>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a22      	ldr	r2, [pc, #136]	@ (8005a68 <HAL_DMA_Init+0x1f0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_DMA_Init+0x174>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a21      	ldr	r2, [pc, #132]	@ (8005a6c <HAL_DMA_Init+0x1f4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d108      	bne.n	80059fe <HAL_DMA_Init+0x186>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0201 	bic.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	e007      	b.n	8005a0e <HAL_DMA_Init+0x196>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0201 	bic.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a0e:	e02f      	b.n	8005a70 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a10:	f7ff fd7a 	bl	8005508 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b05      	cmp	r3, #5
 8005a1c:	d928      	bls.n	8005a70 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2203      	movs	r2, #3
 8005a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e242      	b.n	8005eb6 <HAL_DMA_Init+0x63e>
 8005a30:	40020010 	.word	0x40020010
 8005a34:	40020028 	.word	0x40020028
 8005a38:	40020040 	.word	0x40020040
 8005a3c:	40020058 	.word	0x40020058
 8005a40:	40020070 	.word	0x40020070
 8005a44:	40020088 	.word	0x40020088
 8005a48:	400200a0 	.word	0x400200a0
 8005a4c:	400200b8 	.word	0x400200b8
 8005a50:	40020410 	.word	0x40020410
 8005a54:	40020428 	.word	0x40020428
 8005a58:	40020440 	.word	0x40020440
 8005a5c:	40020458 	.word	0x40020458
 8005a60:	40020470 	.word	0x40020470
 8005a64:	40020488 	.word	0x40020488
 8005a68:	400204a0 	.word	0x400204a0
 8005a6c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1c8      	bne.n	8005a10 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4b83      	ldr	r3, [pc, #524]	@ (8005c98 <HAL_DMA_Init+0x420>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005a96:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aa2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d107      	bne.n	8005ad4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005acc:	4313      	orrs	r3, r2
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b28      	cmp	r3, #40	@ 0x28
 8005ada:	d903      	bls.n	8005ae4 <HAL_DMA_Init+0x26c>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ae2:	d91f      	bls.n	8005b24 <HAL_DMA_Init+0x2ac>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005aea:	d903      	bls.n	8005af4 <HAL_DMA_Init+0x27c>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b42      	cmp	r3, #66	@ 0x42
 8005af2:	d917      	bls.n	8005b24 <HAL_DMA_Init+0x2ac>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b46      	cmp	r3, #70	@ 0x46
 8005afa:	d903      	bls.n	8005b04 <HAL_DMA_Init+0x28c>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2b48      	cmp	r3, #72	@ 0x48
 8005b02:	d90f      	bls.n	8005b24 <HAL_DMA_Init+0x2ac>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2b4e      	cmp	r3, #78	@ 0x4e
 8005b0a:	d903      	bls.n	8005b14 <HAL_DMA_Init+0x29c>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b52      	cmp	r3, #82	@ 0x52
 8005b12:	d907      	bls.n	8005b24 <HAL_DMA_Init+0x2ac>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b73      	cmp	r3, #115	@ 0x73
 8005b1a:	d905      	bls.n	8005b28 <HAL_DMA_Init+0x2b0>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b77      	cmp	r3, #119	@ 0x77
 8005b22:	d801      	bhi.n	8005b28 <HAL_DMA_Init+0x2b0>
 8005b24:	2301      	movs	r3, #1
 8005b26:	e000      	b.n	8005b2a <HAL_DMA_Init+0x2b2>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b34:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f023 0307 	bic.w	r3, r3, #7
 8005b4c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d117      	bne.n	8005b90 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00e      	beq.n	8005b90 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f002 f81e 	bl	8007bb4 <DMA_CheckFifoParam>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d008      	beq.n	8005b90 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2240      	movs	r2, #64	@ 0x40
 8005b82:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e192      	b.n	8005eb6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f001 ff59 	bl	8007a50 <DMA_CalcBaseAndBitshift>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba6:	f003 031f 	and.w	r3, r3, #31
 8005baa:	223f      	movs	r2, #63	@ 0x3f
 8005bac:	409a      	lsls	r2, r3
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	609a      	str	r2, [r3, #8]
 8005bb2:	e0c8      	b.n	8005d46 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a38      	ldr	r2, [pc, #224]	@ (8005c9c <HAL_DMA_Init+0x424>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d022      	beq.n	8005c04 <HAL_DMA_Init+0x38c>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a37      	ldr	r2, [pc, #220]	@ (8005ca0 <HAL_DMA_Init+0x428>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d01d      	beq.n	8005c04 <HAL_DMA_Init+0x38c>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a35      	ldr	r2, [pc, #212]	@ (8005ca4 <HAL_DMA_Init+0x42c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d018      	beq.n	8005c04 <HAL_DMA_Init+0x38c>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a34      	ldr	r2, [pc, #208]	@ (8005ca8 <HAL_DMA_Init+0x430>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d013      	beq.n	8005c04 <HAL_DMA_Init+0x38c>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a32      	ldr	r2, [pc, #200]	@ (8005cac <HAL_DMA_Init+0x434>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00e      	beq.n	8005c04 <HAL_DMA_Init+0x38c>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a31      	ldr	r2, [pc, #196]	@ (8005cb0 <HAL_DMA_Init+0x438>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d009      	beq.n	8005c04 <HAL_DMA_Init+0x38c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8005cb4 <HAL_DMA_Init+0x43c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d004      	beq.n	8005c04 <HAL_DMA_Init+0x38c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8005cb8 <HAL_DMA_Init+0x440>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d101      	bne.n	8005c08 <HAL_DMA_Init+0x390>
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <HAL_DMA_Init+0x392>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 8092 	beq.w	8005d34 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a21      	ldr	r2, [pc, #132]	@ (8005c9c <HAL_DMA_Init+0x424>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d021      	beq.n	8005c5e <HAL_DMA_Init+0x3e6>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a20      	ldr	r2, [pc, #128]	@ (8005ca0 <HAL_DMA_Init+0x428>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d01c      	beq.n	8005c5e <HAL_DMA_Init+0x3e6>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a1e      	ldr	r2, [pc, #120]	@ (8005ca4 <HAL_DMA_Init+0x42c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d017      	beq.n	8005c5e <HAL_DMA_Init+0x3e6>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a1d      	ldr	r2, [pc, #116]	@ (8005ca8 <HAL_DMA_Init+0x430>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d012      	beq.n	8005c5e <HAL_DMA_Init+0x3e6>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cac <HAL_DMA_Init+0x434>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00d      	beq.n	8005c5e <HAL_DMA_Init+0x3e6>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a1a      	ldr	r2, [pc, #104]	@ (8005cb0 <HAL_DMA_Init+0x438>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d008      	beq.n	8005c5e <HAL_DMA_Init+0x3e6>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a18      	ldr	r2, [pc, #96]	@ (8005cb4 <HAL_DMA_Init+0x43c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <HAL_DMA_Init+0x3e6>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a17      	ldr	r2, [pc, #92]	@ (8005cb8 <HAL_DMA_Init+0x440>)
 8005c5c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2202      	movs	r2, #2
 8005c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4b10      	ldr	r3, [pc, #64]	@ (8005cbc <HAL_DMA_Init+0x444>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	2b40      	cmp	r3, #64	@ 0x40
 8005c84:	d01c      	beq.n	8005cc0 <HAL_DMA_Init+0x448>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b80      	cmp	r3, #128	@ 0x80
 8005c8c:	d102      	bne.n	8005c94 <HAL_DMA_Init+0x41c>
 8005c8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005c92:	e016      	b.n	8005cc2 <HAL_DMA_Init+0x44a>
 8005c94:	2300      	movs	r3, #0
 8005c96:	e014      	b.n	8005cc2 <HAL_DMA_Init+0x44a>
 8005c98:	fe10803f 	.word	0xfe10803f
 8005c9c:	58025408 	.word	0x58025408
 8005ca0:	5802541c 	.word	0x5802541c
 8005ca4:	58025430 	.word	0x58025430
 8005ca8:	58025444 	.word	0x58025444
 8005cac:	58025458 	.word	0x58025458
 8005cb0:	5802546c 	.word	0x5802546c
 8005cb4:	58025480 	.word	0x58025480
 8005cb8:	58025494 	.word	0x58025494
 8005cbc:	fffe000f 	.word	0xfffe000f
 8005cc0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	68d2      	ldr	r2, [r2, #12]
 8005cc6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005cc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005ce0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005ce8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005cf0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	4b6e      	ldr	r3, [pc, #440]	@ (8005ec0 <HAL_DMA_Init+0x648>)
 8005d08:	4413      	add	r3, r2
 8005d0a:	4a6e      	ldr	r2, [pc, #440]	@ (8005ec4 <HAL_DMA_Init+0x64c>)
 8005d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d10:	091b      	lsrs	r3, r3, #4
 8005d12:	009a      	lsls	r2, r3, #2
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f001 fe99 	bl	8007a50 <DMA_CalcBaseAndBitshift>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d26:	f003 031f 	and.w	r3, r3, #31
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	409a      	lsls	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	e008      	b.n	8005d46 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2240      	movs	r2, #64	@ 0x40
 8005d38:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e0b7      	b.n	8005eb6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a5f      	ldr	r2, [pc, #380]	@ (8005ec8 <HAL_DMA_Init+0x650>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d072      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a5d      	ldr	r2, [pc, #372]	@ (8005ecc <HAL_DMA_Init+0x654>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d06d      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a5c      	ldr	r2, [pc, #368]	@ (8005ed0 <HAL_DMA_Init+0x658>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d068      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a5a      	ldr	r2, [pc, #360]	@ (8005ed4 <HAL_DMA_Init+0x65c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d063      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a59      	ldr	r2, [pc, #356]	@ (8005ed8 <HAL_DMA_Init+0x660>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d05e      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a57      	ldr	r2, [pc, #348]	@ (8005edc <HAL_DMA_Init+0x664>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d059      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a56      	ldr	r2, [pc, #344]	@ (8005ee0 <HAL_DMA_Init+0x668>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d054      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a54      	ldr	r2, [pc, #336]	@ (8005ee4 <HAL_DMA_Init+0x66c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d04f      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a53      	ldr	r2, [pc, #332]	@ (8005ee8 <HAL_DMA_Init+0x670>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d04a      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a51      	ldr	r2, [pc, #324]	@ (8005eec <HAL_DMA_Init+0x674>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d045      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a50      	ldr	r2, [pc, #320]	@ (8005ef0 <HAL_DMA_Init+0x678>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d040      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a4e      	ldr	r2, [pc, #312]	@ (8005ef4 <HAL_DMA_Init+0x67c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d03b      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a4d      	ldr	r2, [pc, #308]	@ (8005ef8 <HAL_DMA_Init+0x680>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d036      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8005efc <HAL_DMA_Init+0x684>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d031      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a4a      	ldr	r2, [pc, #296]	@ (8005f00 <HAL_DMA_Init+0x688>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d02c      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a48      	ldr	r2, [pc, #288]	@ (8005f04 <HAL_DMA_Init+0x68c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d027      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a47      	ldr	r2, [pc, #284]	@ (8005f08 <HAL_DMA_Init+0x690>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d022      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a45      	ldr	r2, [pc, #276]	@ (8005f0c <HAL_DMA_Init+0x694>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d01d      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a44      	ldr	r2, [pc, #272]	@ (8005f10 <HAL_DMA_Init+0x698>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d018      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a42      	ldr	r2, [pc, #264]	@ (8005f14 <HAL_DMA_Init+0x69c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d013      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a41      	ldr	r2, [pc, #260]	@ (8005f18 <HAL_DMA_Init+0x6a0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00e      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f1c <HAL_DMA_Init+0x6a4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d009      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a3e      	ldr	r2, [pc, #248]	@ (8005f20 <HAL_DMA_Init+0x6a8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d004      	beq.n	8005e36 <HAL_DMA_Init+0x5be>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a3c      	ldr	r2, [pc, #240]	@ (8005f24 <HAL_DMA_Init+0x6ac>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d101      	bne.n	8005e3a <HAL_DMA_Init+0x5c2>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <HAL_DMA_Init+0x5c4>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d032      	beq.n	8005ea6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 ff33 	bl	8007cac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2b80      	cmp	r3, #128	@ 0x80
 8005e4c:	d102      	bne.n	8005e54 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e68:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d010      	beq.n	8005e94 <HAL_DMA_Init+0x61c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d80c      	bhi.n	8005e94 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f001 ffb0 	bl	8007de0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e90:	605a      	str	r2, [r3, #4]
 8005e92:	e008      	b.n	8005ea6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	a7fdabf8 	.word	0xa7fdabf8
 8005ec4:	cccccccd 	.word	0xcccccccd
 8005ec8:	40020010 	.word	0x40020010
 8005ecc:	40020028 	.word	0x40020028
 8005ed0:	40020040 	.word	0x40020040
 8005ed4:	40020058 	.word	0x40020058
 8005ed8:	40020070 	.word	0x40020070
 8005edc:	40020088 	.word	0x40020088
 8005ee0:	400200a0 	.word	0x400200a0
 8005ee4:	400200b8 	.word	0x400200b8
 8005ee8:	40020410 	.word	0x40020410
 8005eec:	40020428 	.word	0x40020428
 8005ef0:	40020440 	.word	0x40020440
 8005ef4:	40020458 	.word	0x40020458
 8005ef8:	40020470 	.word	0x40020470
 8005efc:	40020488 	.word	0x40020488
 8005f00:	400204a0 	.word	0x400204a0
 8005f04:	400204b8 	.word	0x400204b8
 8005f08:	58025408 	.word	0x58025408
 8005f0c:	5802541c 	.word	0x5802541c
 8005f10:	58025430 	.word	0x58025430
 8005f14:	58025444 	.word	0x58025444
 8005f18:	58025458 	.word	0x58025458
 8005f1c:	5802546c 	.word	0x5802546c
 8005f20:	58025480 	.word	0x58025480
 8005f24:	58025494 	.word	0x58025494

08005f28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e226      	b.n	8006392 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_DMA_Start_IT+0x2a>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e21f      	b.n	8006392 <HAL_DMA_Start_IT+0x46a>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	f040 820a 	bne.w	800637c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a68      	ldr	r2, [pc, #416]	@ (800611c <HAL_DMA_Start_IT+0x1f4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d04a      	beq.n	8006016 <HAL_DMA_Start_IT+0xee>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a66      	ldr	r2, [pc, #408]	@ (8006120 <HAL_DMA_Start_IT+0x1f8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d045      	beq.n	8006016 <HAL_DMA_Start_IT+0xee>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a65      	ldr	r2, [pc, #404]	@ (8006124 <HAL_DMA_Start_IT+0x1fc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d040      	beq.n	8006016 <HAL_DMA_Start_IT+0xee>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a63      	ldr	r2, [pc, #396]	@ (8006128 <HAL_DMA_Start_IT+0x200>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d03b      	beq.n	8006016 <HAL_DMA_Start_IT+0xee>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a62      	ldr	r2, [pc, #392]	@ (800612c <HAL_DMA_Start_IT+0x204>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d036      	beq.n	8006016 <HAL_DMA_Start_IT+0xee>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a60      	ldr	r2, [pc, #384]	@ (8006130 <HAL_DMA_Start_IT+0x208>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d031      	beq.n	8006016 <HAL_DMA_Start_IT+0xee>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a5f      	ldr	r2, [pc, #380]	@ (8006134 <HAL_DMA_Start_IT+0x20c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d02c      	beq.n	8006016 <HAL_DMA_Start_IT+0xee>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8006138 <HAL_DMA_Start_IT+0x210>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d027      	beq.n	8006016 <HAL_DMA_Start_IT+0xee>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a5c      	ldr	r2, [pc, #368]	@ (800613c <HAL_DMA_Start_IT+0x214>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d022      	beq.n	8006016 <HAL_DMA_Start_IT+0xee>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a5a      	ldr	r2, [pc, #360]	@ (8006140 <HAL_DMA_Start_IT+0x218>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d01d      	beq.n	8006016 <HAL_DMA_Start_IT+0xee>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a59      	ldr	r2, [pc, #356]	@ (8006144 <HAL_DMA_Start_IT+0x21c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d018      	beq.n	8006016 <HAL_DMA_Start_IT+0xee>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a57      	ldr	r2, [pc, #348]	@ (8006148 <HAL_DMA_Start_IT+0x220>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d013      	beq.n	8006016 <HAL_DMA_Start_IT+0xee>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a56      	ldr	r2, [pc, #344]	@ (800614c <HAL_DMA_Start_IT+0x224>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00e      	beq.n	8006016 <HAL_DMA_Start_IT+0xee>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a54      	ldr	r2, [pc, #336]	@ (8006150 <HAL_DMA_Start_IT+0x228>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d009      	beq.n	8006016 <HAL_DMA_Start_IT+0xee>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a53      	ldr	r2, [pc, #332]	@ (8006154 <HAL_DMA_Start_IT+0x22c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d004      	beq.n	8006016 <HAL_DMA_Start_IT+0xee>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a51      	ldr	r2, [pc, #324]	@ (8006158 <HAL_DMA_Start_IT+0x230>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d108      	bne.n	8006028 <HAL_DMA_Start_IT+0x100>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0201 	bic.w	r2, r2, #1
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	e007      	b.n	8006038 <HAL_DMA_Start_IT+0x110>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0201 	bic.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f001 fb5a 	bl	80076f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a34      	ldr	r2, [pc, #208]	@ (800611c <HAL_DMA_Start_IT+0x1f4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d04a      	beq.n	80060e4 <HAL_DMA_Start_IT+0x1bc>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a33      	ldr	r2, [pc, #204]	@ (8006120 <HAL_DMA_Start_IT+0x1f8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d045      	beq.n	80060e4 <HAL_DMA_Start_IT+0x1bc>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a31      	ldr	r2, [pc, #196]	@ (8006124 <HAL_DMA_Start_IT+0x1fc>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d040      	beq.n	80060e4 <HAL_DMA_Start_IT+0x1bc>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a30      	ldr	r2, [pc, #192]	@ (8006128 <HAL_DMA_Start_IT+0x200>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d03b      	beq.n	80060e4 <HAL_DMA_Start_IT+0x1bc>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a2e      	ldr	r2, [pc, #184]	@ (800612c <HAL_DMA_Start_IT+0x204>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d036      	beq.n	80060e4 <HAL_DMA_Start_IT+0x1bc>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a2d      	ldr	r2, [pc, #180]	@ (8006130 <HAL_DMA_Start_IT+0x208>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d031      	beq.n	80060e4 <HAL_DMA_Start_IT+0x1bc>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a2b      	ldr	r2, [pc, #172]	@ (8006134 <HAL_DMA_Start_IT+0x20c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d02c      	beq.n	80060e4 <HAL_DMA_Start_IT+0x1bc>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a2a      	ldr	r2, [pc, #168]	@ (8006138 <HAL_DMA_Start_IT+0x210>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d027      	beq.n	80060e4 <HAL_DMA_Start_IT+0x1bc>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a28      	ldr	r2, [pc, #160]	@ (800613c <HAL_DMA_Start_IT+0x214>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d022      	beq.n	80060e4 <HAL_DMA_Start_IT+0x1bc>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a27      	ldr	r2, [pc, #156]	@ (8006140 <HAL_DMA_Start_IT+0x218>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d01d      	beq.n	80060e4 <HAL_DMA_Start_IT+0x1bc>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a25      	ldr	r2, [pc, #148]	@ (8006144 <HAL_DMA_Start_IT+0x21c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d018      	beq.n	80060e4 <HAL_DMA_Start_IT+0x1bc>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a24      	ldr	r2, [pc, #144]	@ (8006148 <HAL_DMA_Start_IT+0x220>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d013      	beq.n	80060e4 <HAL_DMA_Start_IT+0x1bc>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a22      	ldr	r2, [pc, #136]	@ (800614c <HAL_DMA_Start_IT+0x224>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00e      	beq.n	80060e4 <HAL_DMA_Start_IT+0x1bc>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a21      	ldr	r2, [pc, #132]	@ (8006150 <HAL_DMA_Start_IT+0x228>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d009      	beq.n	80060e4 <HAL_DMA_Start_IT+0x1bc>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006154 <HAL_DMA_Start_IT+0x22c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_DMA_Start_IT+0x1bc>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a1e      	ldr	r2, [pc, #120]	@ (8006158 <HAL_DMA_Start_IT+0x230>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d101      	bne.n	80060e8 <HAL_DMA_Start_IT+0x1c0>
 80060e4:	2301      	movs	r3, #1
 80060e6:	e000      	b.n	80060ea <HAL_DMA_Start_IT+0x1c2>
 80060e8:	2300      	movs	r3, #0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d036      	beq.n	800615c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f023 021e 	bic.w	r2, r3, #30
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0216 	orr.w	r2, r2, #22
 8006100:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006106:	2b00      	cmp	r3, #0
 8006108:	d03e      	beq.n	8006188 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f042 0208 	orr.w	r2, r2, #8
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	e035      	b.n	8006188 <HAL_DMA_Start_IT+0x260>
 800611c:	40020010 	.word	0x40020010
 8006120:	40020028 	.word	0x40020028
 8006124:	40020040 	.word	0x40020040
 8006128:	40020058 	.word	0x40020058
 800612c:	40020070 	.word	0x40020070
 8006130:	40020088 	.word	0x40020088
 8006134:	400200a0 	.word	0x400200a0
 8006138:	400200b8 	.word	0x400200b8
 800613c:	40020410 	.word	0x40020410
 8006140:	40020428 	.word	0x40020428
 8006144:	40020440 	.word	0x40020440
 8006148:	40020458 	.word	0x40020458
 800614c:	40020470 	.word	0x40020470
 8006150:	40020488 	.word	0x40020488
 8006154:	400204a0 	.word	0x400204a0
 8006158:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f023 020e 	bic.w	r2, r3, #14
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 020a 	orr.w	r2, r2, #10
 800616e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0204 	orr.w	r2, r2, #4
 8006186:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a83      	ldr	r2, [pc, #524]	@ (800639c <HAL_DMA_Start_IT+0x474>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d072      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a82      	ldr	r2, [pc, #520]	@ (80063a0 <HAL_DMA_Start_IT+0x478>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d06d      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a80      	ldr	r2, [pc, #512]	@ (80063a4 <HAL_DMA_Start_IT+0x47c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d068      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a7f      	ldr	r2, [pc, #508]	@ (80063a8 <HAL_DMA_Start_IT+0x480>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d063      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a7d      	ldr	r2, [pc, #500]	@ (80063ac <HAL_DMA_Start_IT+0x484>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d05e      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a7c      	ldr	r2, [pc, #496]	@ (80063b0 <HAL_DMA_Start_IT+0x488>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d059      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a7a      	ldr	r2, [pc, #488]	@ (80063b4 <HAL_DMA_Start_IT+0x48c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d054      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a79      	ldr	r2, [pc, #484]	@ (80063b8 <HAL_DMA_Start_IT+0x490>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d04f      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a77      	ldr	r2, [pc, #476]	@ (80063bc <HAL_DMA_Start_IT+0x494>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d04a      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a76      	ldr	r2, [pc, #472]	@ (80063c0 <HAL_DMA_Start_IT+0x498>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d045      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a74      	ldr	r2, [pc, #464]	@ (80063c4 <HAL_DMA_Start_IT+0x49c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d040      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a73      	ldr	r2, [pc, #460]	@ (80063c8 <HAL_DMA_Start_IT+0x4a0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d03b      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a71      	ldr	r2, [pc, #452]	@ (80063cc <HAL_DMA_Start_IT+0x4a4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d036      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a70      	ldr	r2, [pc, #448]	@ (80063d0 <HAL_DMA_Start_IT+0x4a8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d031      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a6e      	ldr	r2, [pc, #440]	@ (80063d4 <HAL_DMA_Start_IT+0x4ac>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d02c      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a6d      	ldr	r2, [pc, #436]	@ (80063d8 <HAL_DMA_Start_IT+0x4b0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d027      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a6b      	ldr	r2, [pc, #428]	@ (80063dc <HAL_DMA_Start_IT+0x4b4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d022      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a6a      	ldr	r2, [pc, #424]	@ (80063e0 <HAL_DMA_Start_IT+0x4b8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d01d      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a68      	ldr	r2, [pc, #416]	@ (80063e4 <HAL_DMA_Start_IT+0x4bc>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d018      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a67      	ldr	r2, [pc, #412]	@ (80063e8 <HAL_DMA_Start_IT+0x4c0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d013      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a65      	ldr	r2, [pc, #404]	@ (80063ec <HAL_DMA_Start_IT+0x4c4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d00e      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a64      	ldr	r2, [pc, #400]	@ (80063f0 <HAL_DMA_Start_IT+0x4c8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d009      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a62      	ldr	r2, [pc, #392]	@ (80063f4 <HAL_DMA_Start_IT+0x4cc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d004      	beq.n	8006278 <HAL_DMA_Start_IT+0x350>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a61      	ldr	r2, [pc, #388]	@ (80063f8 <HAL_DMA_Start_IT+0x4d0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d101      	bne.n	800627c <HAL_DMA_Start_IT+0x354>
 8006278:	2301      	movs	r3, #1
 800627a:	e000      	b.n	800627e <HAL_DMA_Start_IT+0x356>
 800627c:	2300      	movs	r3, #0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d01a      	beq.n	80062b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d007      	beq.n	80062a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800629a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800629e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a37      	ldr	r2, [pc, #220]	@ (800639c <HAL_DMA_Start_IT+0x474>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d04a      	beq.n	8006358 <HAL_DMA_Start_IT+0x430>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a36      	ldr	r2, [pc, #216]	@ (80063a0 <HAL_DMA_Start_IT+0x478>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d045      	beq.n	8006358 <HAL_DMA_Start_IT+0x430>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a34      	ldr	r2, [pc, #208]	@ (80063a4 <HAL_DMA_Start_IT+0x47c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d040      	beq.n	8006358 <HAL_DMA_Start_IT+0x430>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a33      	ldr	r2, [pc, #204]	@ (80063a8 <HAL_DMA_Start_IT+0x480>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d03b      	beq.n	8006358 <HAL_DMA_Start_IT+0x430>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a31      	ldr	r2, [pc, #196]	@ (80063ac <HAL_DMA_Start_IT+0x484>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d036      	beq.n	8006358 <HAL_DMA_Start_IT+0x430>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a30      	ldr	r2, [pc, #192]	@ (80063b0 <HAL_DMA_Start_IT+0x488>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d031      	beq.n	8006358 <HAL_DMA_Start_IT+0x430>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a2e      	ldr	r2, [pc, #184]	@ (80063b4 <HAL_DMA_Start_IT+0x48c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d02c      	beq.n	8006358 <HAL_DMA_Start_IT+0x430>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a2d      	ldr	r2, [pc, #180]	@ (80063b8 <HAL_DMA_Start_IT+0x490>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d027      	beq.n	8006358 <HAL_DMA_Start_IT+0x430>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a2b      	ldr	r2, [pc, #172]	@ (80063bc <HAL_DMA_Start_IT+0x494>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d022      	beq.n	8006358 <HAL_DMA_Start_IT+0x430>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a2a      	ldr	r2, [pc, #168]	@ (80063c0 <HAL_DMA_Start_IT+0x498>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d01d      	beq.n	8006358 <HAL_DMA_Start_IT+0x430>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a28      	ldr	r2, [pc, #160]	@ (80063c4 <HAL_DMA_Start_IT+0x49c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d018      	beq.n	8006358 <HAL_DMA_Start_IT+0x430>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a27      	ldr	r2, [pc, #156]	@ (80063c8 <HAL_DMA_Start_IT+0x4a0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d013      	beq.n	8006358 <HAL_DMA_Start_IT+0x430>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a25      	ldr	r2, [pc, #148]	@ (80063cc <HAL_DMA_Start_IT+0x4a4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00e      	beq.n	8006358 <HAL_DMA_Start_IT+0x430>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a24      	ldr	r2, [pc, #144]	@ (80063d0 <HAL_DMA_Start_IT+0x4a8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d009      	beq.n	8006358 <HAL_DMA_Start_IT+0x430>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a22      	ldr	r2, [pc, #136]	@ (80063d4 <HAL_DMA_Start_IT+0x4ac>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d004      	beq.n	8006358 <HAL_DMA_Start_IT+0x430>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a21      	ldr	r2, [pc, #132]	@ (80063d8 <HAL_DMA_Start_IT+0x4b0>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d108      	bne.n	800636a <HAL_DMA_Start_IT+0x442>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	e012      	b.n	8006390 <HAL_DMA_Start_IT+0x468>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f042 0201 	orr.w	r2, r2, #1
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	e009      	b.n	8006390 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006382:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006390:	7dfb      	ldrb	r3, [r7, #23]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	40020010 	.word	0x40020010
 80063a0:	40020028 	.word	0x40020028
 80063a4:	40020040 	.word	0x40020040
 80063a8:	40020058 	.word	0x40020058
 80063ac:	40020070 	.word	0x40020070
 80063b0:	40020088 	.word	0x40020088
 80063b4:	400200a0 	.word	0x400200a0
 80063b8:	400200b8 	.word	0x400200b8
 80063bc:	40020410 	.word	0x40020410
 80063c0:	40020428 	.word	0x40020428
 80063c4:	40020440 	.word	0x40020440
 80063c8:	40020458 	.word	0x40020458
 80063cc:	40020470 	.word	0x40020470
 80063d0:	40020488 	.word	0x40020488
 80063d4:	400204a0 	.word	0x400204a0
 80063d8:	400204b8 	.word	0x400204b8
 80063dc:	58025408 	.word	0x58025408
 80063e0:	5802541c 	.word	0x5802541c
 80063e4:	58025430 	.word	0x58025430
 80063e8:	58025444 	.word	0x58025444
 80063ec:	58025458 	.word	0x58025458
 80063f0:	5802546c 	.word	0x5802546c
 80063f4:	58025480 	.word	0x58025480
 80063f8:	58025494 	.word	0x58025494

080063fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e237      	b.n	800687e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d004      	beq.n	8006424 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2280      	movs	r2, #128	@ 0x80
 800641e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e22c      	b.n	800687e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a5c      	ldr	r2, [pc, #368]	@ (800659c <HAL_DMA_Abort_IT+0x1a0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d04a      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a5b      	ldr	r2, [pc, #364]	@ (80065a0 <HAL_DMA_Abort_IT+0x1a4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d045      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a59      	ldr	r2, [pc, #356]	@ (80065a4 <HAL_DMA_Abort_IT+0x1a8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d040      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a58      	ldr	r2, [pc, #352]	@ (80065a8 <HAL_DMA_Abort_IT+0x1ac>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d03b      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a56      	ldr	r2, [pc, #344]	@ (80065ac <HAL_DMA_Abort_IT+0x1b0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d036      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a55      	ldr	r2, [pc, #340]	@ (80065b0 <HAL_DMA_Abort_IT+0x1b4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d031      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a53      	ldr	r2, [pc, #332]	@ (80065b4 <HAL_DMA_Abort_IT+0x1b8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d02c      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a52      	ldr	r2, [pc, #328]	@ (80065b8 <HAL_DMA_Abort_IT+0x1bc>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d027      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a50      	ldr	r2, [pc, #320]	@ (80065bc <HAL_DMA_Abort_IT+0x1c0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d022      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a4f      	ldr	r2, [pc, #316]	@ (80065c0 <HAL_DMA_Abort_IT+0x1c4>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d01d      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a4d      	ldr	r2, [pc, #308]	@ (80065c4 <HAL_DMA_Abort_IT+0x1c8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d018      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a4c      	ldr	r2, [pc, #304]	@ (80065c8 <HAL_DMA_Abort_IT+0x1cc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d013      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a4a      	ldr	r2, [pc, #296]	@ (80065cc <HAL_DMA_Abort_IT+0x1d0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00e      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a49      	ldr	r2, [pc, #292]	@ (80065d0 <HAL_DMA_Abort_IT+0x1d4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d009      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a47      	ldr	r2, [pc, #284]	@ (80065d4 <HAL_DMA_Abort_IT+0x1d8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d004      	beq.n	80064c4 <HAL_DMA_Abort_IT+0xc8>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a46      	ldr	r2, [pc, #280]	@ (80065d8 <HAL_DMA_Abort_IT+0x1dc>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d101      	bne.n	80064c8 <HAL_DMA_Abort_IT+0xcc>
 80064c4:	2301      	movs	r3, #1
 80064c6:	e000      	b.n	80064ca <HAL_DMA_Abort_IT+0xce>
 80064c8:	2300      	movs	r3, #0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8086 	beq.w	80065dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2204      	movs	r2, #4
 80064d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a2f      	ldr	r2, [pc, #188]	@ (800659c <HAL_DMA_Abort_IT+0x1a0>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d04a      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a2e      	ldr	r2, [pc, #184]	@ (80065a0 <HAL_DMA_Abort_IT+0x1a4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d045      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a2c      	ldr	r2, [pc, #176]	@ (80065a4 <HAL_DMA_Abort_IT+0x1a8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d040      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2b      	ldr	r2, [pc, #172]	@ (80065a8 <HAL_DMA_Abort_IT+0x1ac>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d03b      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a29      	ldr	r2, [pc, #164]	@ (80065ac <HAL_DMA_Abort_IT+0x1b0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d036      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a28      	ldr	r2, [pc, #160]	@ (80065b0 <HAL_DMA_Abort_IT+0x1b4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d031      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a26      	ldr	r2, [pc, #152]	@ (80065b4 <HAL_DMA_Abort_IT+0x1b8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d02c      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a25      	ldr	r2, [pc, #148]	@ (80065b8 <HAL_DMA_Abort_IT+0x1bc>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d027      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a23      	ldr	r2, [pc, #140]	@ (80065bc <HAL_DMA_Abort_IT+0x1c0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d022      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a22      	ldr	r2, [pc, #136]	@ (80065c0 <HAL_DMA_Abort_IT+0x1c4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d01d      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a20      	ldr	r2, [pc, #128]	@ (80065c4 <HAL_DMA_Abort_IT+0x1c8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d018      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1f      	ldr	r2, [pc, #124]	@ (80065c8 <HAL_DMA_Abort_IT+0x1cc>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d013      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1d      	ldr	r2, [pc, #116]	@ (80065cc <HAL_DMA_Abort_IT+0x1d0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00e      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1c      	ldr	r2, [pc, #112]	@ (80065d0 <HAL_DMA_Abort_IT+0x1d4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d009      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1a      	ldr	r2, [pc, #104]	@ (80065d4 <HAL_DMA_Abort_IT+0x1d8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <HAL_DMA_Abort_IT+0x17c>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a19      	ldr	r2, [pc, #100]	@ (80065d8 <HAL_DMA_Abort_IT+0x1dc>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d108      	bne.n	800658a <HAL_DMA_Abort_IT+0x18e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0201 	bic.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e178      	b.n	800687c <HAL_DMA_Abort_IT+0x480>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0201 	bic.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	e16f      	b.n	800687c <HAL_DMA_Abort_IT+0x480>
 800659c:	40020010 	.word	0x40020010
 80065a0:	40020028 	.word	0x40020028
 80065a4:	40020040 	.word	0x40020040
 80065a8:	40020058 	.word	0x40020058
 80065ac:	40020070 	.word	0x40020070
 80065b0:	40020088 	.word	0x40020088
 80065b4:	400200a0 	.word	0x400200a0
 80065b8:	400200b8 	.word	0x400200b8
 80065bc:	40020410 	.word	0x40020410
 80065c0:	40020428 	.word	0x40020428
 80065c4:	40020440 	.word	0x40020440
 80065c8:	40020458 	.word	0x40020458
 80065cc:	40020470 	.word	0x40020470
 80065d0:	40020488 	.word	0x40020488
 80065d4:	400204a0 	.word	0x400204a0
 80065d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 020e 	bic.w	r2, r2, #14
 80065ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a6c      	ldr	r2, [pc, #432]	@ (80067a4 <HAL_DMA_Abort_IT+0x3a8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d04a      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a6b      	ldr	r2, [pc, #428]	@ (80067a8 <HAL_DMA_Abort_IT+0x3ac>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d045      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a69      	ldr	r2, [pc, #420]	@ (80067ac <HAL_DMA_Abort_IT+0x3b0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d040      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a68      	ldr	r2, [pc, #416]	@ (80067b0 <HAL_DMA_Abort_IT+0x3b4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d03b      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a66      	ldr	r2, [pc, #408]	@ (80067b4 <HAL_DMA_Abort_IT+0x3b8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d036      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a65      	ldr	r2, [pc, #404]	@ (80067b8 <HAL_DMA_Abort_IT+0x3bc>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d031      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a63      	ldr	r2, [pc, #396]	@ (80067bc <HAL_DMA_Abort_IT+0x3c0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d02c      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a62      	ldr	r2, [pc, #392]	@ (80067c0 <HAL_DMA_Abort_IT+0x3c4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d027      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a60      	ldr	r2, [pc, #384]	@ (80067c4 <HAL_DMA_Abort_IT+0x3c8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d022      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a5f      	ldr	r2, [pc, #380]	@ (80067c8 <HAL_DMA_Abort_IT+0x3cc>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d01d      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a5d      	ldr	r2, [pc, #372]	@ (80067cc <HAL_DMA_Abort_IT+0x3d0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d018      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a5c      	ldr	r2, [pc, #368]	@ (80067d0 <HAL_DMA_Abort_IT+0x3d4>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d013      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a5a      	ldr	r2, [pc, #360]	@ (80067d4 <HAL_DMA_Abort_IT+0x3d8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00e      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a59      	ldr	r2, [pc, #356]	@ (80067d8 <HAL_DMA_Abort_IT+0x3dc>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d009      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a57      	ldr	r2, [pc, #348]	@ (80067dc <HAL_DMA_Abort_IT+0x3e0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d004      	beq.n	800668c <HAL_DMA_Abort_IT+0x290>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a56      	ldr	r2, [pc, #344]	@ (80067e0 <HAL_DMA_Abort_IT+0x3e4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d108      	bne.n	800669e <HAL_DMA_Abort_IT+0x2a2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0201 	bic.w	r2, r2, #1
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	e007      	b.n	80066ae <HAL_DMA_Abort_IT+0x2b2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0201 	bic.w	r2, r2, #1
 80066ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a3c      	ldr	r2, [pc, #240]	@ (80067a4 <HAL_DMA_Abort_IT+0x3a8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d072      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a3a      	ldr	r2, [pc, #232]	@ (80067a8 <HAL_DMA_Abort_IT+0x3ac>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d06d      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a39      	ldr	r2, [pc, #228]	@ (80067ac <HAL_DMA_Abort_IT+0x3b0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d068      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a37      	ldr	r2, [pc, #220]	@ (80067b0 <HAL_DMA_Abort_IT+0x3b4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d063      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a36      	ldr	r2, [pc, #216]	@ (80067b4 <HAL_DMA_Abort_IT+0x3b8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d05e      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a34      	ldr	r2, [pc, #208]	@ (80067b8 <HAL_DMA_Abort_IT+0x3bc>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d059      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a33      	ldr	r2, [pc, #204]	@ (80067bc <HAL_DMA_Abort_IT+0x3c0>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d054      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a31      	ldr	r2, [pc, #196]	@ (80067c0 <HAL_DMA_Abort_IT+0x3c4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d04f      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a30      	ldr	r2, [pc, #192]	@ (80067c4 <HAL_DMA_Abort_IT+0x3c8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d04a      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a2e      	ldr	r2, [pc, #184]	@ (80067c8 <HAL_DMA_Abort_IT+0x3cc>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d045      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a2d      	ldr	r2, [pc, #180]	@ (80067cc <HAL_DMA_Abort_IT+0x3d0>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d040      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a2b      	ldr	r2, [pc, #172]	@ (80067d0 <HAL_DMA_Abort_IT+0x3d4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d03b      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a2a      	ldr	r2, [pc, #168]	@ (80067d4 <HAL_DMA_Abort_IT+0x3d8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d036      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a28      	ldr	r2, [pc, #160]	@ (80067d8 <HAL_DMA_Abort_IT+0x3dc>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d031      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a27      	ldr	r2, [pc, #156]	@ (80067dc <HAL_DMA_Abort_IT+0x3e0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d02c      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a25      	ldr	r2, [pc, #148]	@ (80067e0 <HAL_DMA_Abort_IT+0x3e4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d027      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a24      	ldr	r2, [pc, #144]	@ (80067e4 <HAL_DMA_Abort_IT+0x3e8>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d022      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a22      	ldr	r2, [pc, #136]	@ (80067e8 <HAL_DMA_Abort_IT+0x3ec>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01d      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a21      	ldr	r2, [pc, #132]	@ (80067ec <HAL_DMA_Abort_IT+0x3f0>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d018      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a1f      	ldr	r2, [pc, #124]	@ (80067f0 <HAL_DMA_Abort_IT+0x3f4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d013      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1e      	ldr	r2, [pc, #120]	@ (80067f4 <HAL_DMA_Abort_IT+0x3f8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00e      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1c      	ldr	r2, [pc, #112]	@ (80067f8 <HAL_DMA_Abort_IT+0x3fc>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d009      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1b      	ldr	r2, [pc, #108]	@ (80067fc <HAL_DMA_Abort_IT+0x400>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d004      	beq.n	800679e <HAL_DMA_Abort_IT+0x3a2>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a19      	ldr	r2, [pc, #100]	@ (8006800 <HAL_DMA_Abort_IT+0x404>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d132      	bne.n	8006804 <HAL_DMA_Abort_IT+0x408>
 800679e:	2301      	movs	r3, #1
 80067a0:	e031      	b.n	8006806 <HAL_DMA_Abort_IT+0x40a>
 80067a2:	bf00      	nop
 80067a4:	40020010 	.word	0x40020010
 80067a8:	40020028 	.word	0x40020028
 80067ac:	40020040 	.word	0x40020040
 80067b0:	40020058 	.word	0x40020058
 80067b4:	40020070 	.word	0x40020070
 80067b8:	40020088 	.word	0x40020088
 80067bc:	400200a0 	.word	0x400200a0
 80067c0:	400200b8 	.word	0x400200b8
 80067c4:	40020410 	.word	0x40020410
 80067c8:	40020428 	.word	0x40020428
 80067cc:	40020440 	.word	0x40020440
 80067d0:	40020458 	.word	0x40020458
 80067d4:	40020470 	.word	0x40020470
 80067d8:	40020488 	.word	0x40020488
 80067dc:	400204a0 	.word	0x400204a0
 80067e0:	400204b8 	.word	0x400204b8
 80067e4:	58025408 	.word	0x58025408
 80067e8:	5802541c 	.word	0x5802541c
 80067ec:	58025430 	.word	0x58025430
 80067f0:	58025444 	.word	0x58025444
 80067f4:	58025458 	.word	0x58025458
 80067f8:	5802546c 	.word	0x5802546c
 80067fc:	58025480 	.word	0x58025480
 8006800:	58025494 	.word	0x58025494
 8006804:	2300      	movs	r3, #0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d028      	beq.n	800685c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006818:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800681e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006824:	f003 031f 	and.w	r3, r3, #31
 8006828:	2201      	movs	r2, #1
 800682a:	409a      	lsls	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006838:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00c      	beq.n	800685c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800684c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006850:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800685a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop

08006888 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	@ 0x28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006894:	4b67      	ldr	r3, [pc, #412]	@ (8006a34 <HAL_DMA_IRQHandler+0x1ac>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a67      	ldr	r2, [pc, #412]	@ (8006a38 <HAL_DMA_IRQHandler+0x1b0>)
 800689a:	fba2 2303 	umull	r2, r3, r2, r3
 800689e:	0a9b      	lsrs	r3, r3, #10
 80068a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a5f      	ldr	r2, [pc, #380]	@ (8006a3c <HAL_DMA_IRQHandler+0x1b4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d04a      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a5d      	ldr	r2, [pc, #372]	@ (8006a40 <HAL_DMA_IRQHandler+0x1b8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d045      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a5c      	ldr	r2, [pc, #368]	@ (8006a44 <HAL_DMA_IRQHandler+0x1bc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d040      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a5a      	ldr	r2, [pc, #360]	@ (8006a48 <HAL_DMA_IRQHandler+0x1c0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d03b      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a59      	ldr	r2, [pc, #356]	@ (8006a4c <HAL_DMA_IRQHandler+0x1c4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d036      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a57      	ldr	r2, [pc, #348]	@ (8006a50 <HAL_DMA_IRQHandler+0x1c8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d031      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a56      	ldr	r2, [pc, #344]	@ (8006a54 <HAL_DMA_IRQHandler+0x1cc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d02c      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a54      	ldr	r2, [pc, #336]	@ (8006a58 <HAL_DMA_IRQHandler+0x1d0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d027      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a53      	ldr	r2, [pc, #332]	@ (8006a5c <HAL_DMA_IRQHandler+0x1d4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d022      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a51      	ldr	r2, [pc, #324]	@ (8006a60 <HAL_DMA_IRQHandler+0x1d8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d01d      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a50      	ldr	r2, [pc, #320]	@ (8006a64 <HAL_DMA_IRQHandler+0x1dc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d018      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a4e      	ldr	r2, [pc, #312]	@ (8006a68 <HAL_DMA_IRQHandler+0x1e0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d013      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a4d      	ldr	r2, [pc, #308]	@ (8006a6c <HAL_DMA_IRQHandler+0x1e4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00e      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a4b      	ldr	r2, [pc, #300]	@ (8006a70 <HAL_DMA_IRQHandler+0x1e8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d009      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a4a      	ldr	r2, [pc, #296]	@ (8006a74 <HAL_DMA_IRQHandler+0x1ec>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d004      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a48      	ldr	r2, [pc, #288]	@ (8006a78 <HAL_DMA_IRQHandler+0x1f0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d101      	bne.n	800695e <HAL_DMA_IRQHandler+0xd6>
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <HAL_DMA_IRQHandler+0xd8>
 800695e:	2300      	movs	r3, #0
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 842b 	beq.w	80071bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800696a:	f003 031f 	and.w	r3, r3, #31
 800696e:	2208      	movs	r2, #8
 8006970:	409a      	lsls	r2, r3
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	4013      	ands	r3, r2
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80a2 	beq.w	8006ac0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a2e      	ldr	r2, [pc, #184]	@ (8006a3c <HAL_DMA_IRQHandler+0x1b4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d04a      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a2d      	ldr	r2, [pc, #180]	@ (8006a40 <HAL_DMA_IRQHandler+0x1b8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d045      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a2b      	ldr	r2, [pc, #172]	@ (8006a44 <HAL_DMA_IRQHandler+0x1bc>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d040      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a2a      	ldr	r2, [pc, #168]	@ (8006a48 <HAL_DMA_IRQHandler+0x1c0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d03b      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a28      	ldr	r2, [pc, #160]	@ (8006a4c <HAL_DMA_IRQHandler+0x1c4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d036      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a27      	ldr	r2, [pc, #156]	@ (8006a50 <HAL_DMA_IRQHandler+0x1c8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d031      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a25      	ldr	r2, [pc, #148]	@ (8006a54 <HAL_DMA_IRQHandler+0x1cc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d02c      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a24      	ldr	r2, [pc, #144]	@ (8006a58 <HAL_DMA_IRQHandler+0x1d0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d027      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a22      	ldr	r2, [pc, #136]	@ (8006a5c <HAL_DMA_IRQHandler+0x1d4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d022      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a21      	ldr	r2, [pc, #132]	@ (8006a60 <HAL_DMA_IRQHandler+0x1d8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d01d      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a64 <HAL_DMA_IRQHandler+0x1dc>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d018      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006a68 <HAL_DMA_IRQHandler+0x1e0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d013      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a6c <HAL_DMA_IRQHandler+0x1e4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00e      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1b      	ldr	r2, [pc, #108]	@ (8006a70 <HAL_DMA_IRQHandler+0x1e8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d009      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a19      	ldr	r2, [pc, #100]	@ (8006a74 <HAL_DMA_IRQHandler+0x1ec>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d004      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a18      	ldr	r2, [pc, #96]	@ (8006a78 <HAL_DMA_IRQHandler+0x1f0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d12f      	bne.n	8006a7c <HAL_DMA_IRQHandler+0x1f4>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bf14      	ite	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	2300      	moveq	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	e02e      	b.n	8006a90 <HAL_DMA_IRQHandler+0x208>
 8006a32:	bf00      	nop
 8006a34:	2400000c 	.word	0x2400000c
 8006a38:	1b4e81b5 	.word	0x1b4e81b5
 8006a3c:	40020010 	.word	0x40020010
 8006a40:	40020028 	.word	0x40020028
 8006a44:	40020040 	.word	0x40020040
 8006a48:	40020058 	.word	0x40020058
 8006a4c:	40020070 	.word	0x40020070
 8006a50:	40020088 	.word	0x40020088
 8006a54:	400200a0 	.word	0x400200a0
 8006a58:	400200b8 	.word	0x400200b8
 8006a5c:	40020410 	.word	0x40020410
 8006a60:	40020428 	.word	0x40020428
 8006a64:	40020440 	.word	0x40020440
 8006a68:	40020458 	.word	0x40020458
 8006a6c:	40020470 	.word	0x40020470
 8006a70:	40020488 	.word	0x40020488
 8006a74:	400204a0 	.word	0x400204a0
 8006a78:	400204b8 	.word	0x400204b8
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	bf14      	ite	ne
 8006a8a:	2301      	movne	r3, #1
 8006a8c:	2300      	moveq	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d015      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0204 	bic.w	r2, r2, #4
 8006aa2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa8:	f003 031f 	and.w	r3, r3, #31
 8006aac:	2208      	movs	r2, #8
 8006aae:	409a      	lsls	r2, r3
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab8:	f043 0201 	orr.w	r2, r3, #1
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	fa22 f303 	lsr.w	r3, r2, r3
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d06e      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a69      	ldr	r2, [pc, #420]	@ (8006c80 <HAL_DMA_IRQHandler+0x3f8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d04a      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a67      	ldr	r2, [pc, #412]	@ (8006c84 <HAL_DMA_IRQHandler+0x3fc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d045      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a66      	ldr	r2, [pc, #408]	@ (8006c88 <HAL_DMA_IRQHandler+0x400>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d040      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a64      	ldr	r2, [pc, #400]	@ (8006c8c <HAL_DMA_IRQHandler+0x404>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d03b      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a63      	ldr	r2, [pc, #396]	@ (8006c90 <HAL_DMA_IRQHandler+0x408>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d036      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a61      	ldr	r2, [pc, #388]	@ (8006c94 <HAL_DMA_IRQHandler+0x40c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d031      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a60      	ldr	r2, [pc, #384]	@ (8006c98 <HAL_DMA_IRQHandler+0x410>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d02c      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a5e      	ldr	r2, [pc, #376]	@ (8006c9c <HAL_DMA_IRQHandler+0x414>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d027      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a5d      	ldr	r2, [pc, #372]	@ (8006ca0 <HAL_DMA_IRQHandler+0x418>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d022      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a5b      	ldr	r2, [pc, #364]	@ (8006ca4 <HAL_DMA_IRQHandler+0x41c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d01d      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a5a      	ldr	r2, [pc, #360]	@ (8006ca8 <HAL_DMA_IRQHandler+0x420>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d018      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a58      	ldr	r2, [pc, #352]	@ (8006cac <HAL_DMA_IRQHandler+0x424>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d013      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a57      	ldr	r2, [pc, #348]	@ (8006cb0 <HAL_DMA_IRQHandler+0x428>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00e      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a55      	ldr	r2, [pc, #340]	@ (8006cb4 <HAL_DMA_IRQHandler+0x42c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d009      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a54      	ldr	r2, [pc, #336]	@ (8006cb8 <HAL_DMA_IRQHandler+0x430>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d004      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a52      	ldr	r2, [pc, #328]	@ (8006cbc <HAL_DMA_IRQHandler+0x434>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d10a      	bne.n	8006b8c <HAL_DMA_IRQHandler+0x304>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	bf14      	ite	ne
 8006b84:	2301      	movne	r3, #1
 8006b86:	2300      	moveq	r3, #0
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	e003      	b.n	8006b94 <HAL_DMA_IRQHandler+0x30c>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2300      	movs	r3, #0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00d      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b9c:	f003 031f 	and.w	r3, r3, #31
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	409a      	lsls	r2, r3
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bac:	f043 0202 	orr.w	r2, r3, #2
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	409a      	lsls	r2, r3
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 808f 	beq.w	8006ce8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a2c      	ldr	r2, [pc, #176]	@ (8006c80 <HAL_DMA_IRQHandler+0x3f8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d04a      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8006c84 <HAL_DMA_IRQHandler+0x3fc>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d045      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a29      	ldr	r2, [pc, #164]	@ (8006c88 <HAL_DMA_IRQHandler+0x400>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d040      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a27      	ldr	r2, [pc, #156]	@ (8006c8c <HAL_DMA_IRQHandler+0x404>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d03b      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a26      	ldr	r2, [pc, #152]	@ (8006c90 <HAL_DMA_IRQHandler+0x408>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d036      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a24      	ldr	r2, [pc, #144]	@ (8006c94 <HAL_DMA_IRQHandler+0x40c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d031      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a23      	ldr	r2, [pc, #140]	@ (8006c98 <HAL_DMA_IRQHandler+0x410>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d02c      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a21      	ldr	r2, [pc, #132]	@ (8006c9c <HAL_DMA_IRQHandler+0x414>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d027      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a20      	ldr	r2, [pc, #128]	@ (8006ca0 <HAL_DMA_IRQHandler+0x418>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d022      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a1e      	ldr	r2, [pc, #120]	@ (8006ca4 <HAL_DMA_IRQHandler+0x41c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d01d      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a1d      	ldr	r2, [pc, #116]	@ (8006ca8 <HAL_DMA_IRQHandler+0x420>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d018      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006cac <HAL_DMA_IRQHandler+0x424>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d013      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a1a      	ldr	r2, [pc, #104]	@ (8006cb0 <HAL_DMA_IRQHandler+0x428>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00e      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a18      	ldr	r2, [pc, #96]	@ (8006cb4 <HAL_DMA_IRQHandler+0x42c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d009      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a17      	ldr	r2, [pc, #92]	@ (8006cb8 <HAL_DMA_IRQHandler+0x430>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d004      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a15      	ldr	r2, [pc, #84]	@ (8006cbc <HAL_DMA_IRQHandler+0x434>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d12a      	bne.n	8006cc0 <HAL_DMA_IRQHandler+0x438>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bf14      	ite	ne
 8006c78:	2301      	movne	r3, #1
 8006c7a:	2300      	moveq	r3, #0
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	e023      	b.n	8006cc8 <HAL_DMA_IRQHandler+0x440>
 8006c80:	40020010 	.word	0x40020010
 8006c84:	40020028 	.word	0x40020028
 8006c88:	40020040 	.word	0x40020040
 8006c8c:	40020058 	.word	0x40020058
 8006c90:	40020070 	.word	0x40020070
 8006c94:	40020088 	.word	0x40020088
 8006c98:	400200a0 	.word	0x400200a0
 8006c9c:	400200b8 	.word	0x400200b8
 8006ca0:	40020410 	.word	0x40020410
 8006ca4:	40020428 	.word	0x40020428
 8006ca8:	40020440 	.word	0x40020440
 8006cac:	40020458 	.word	0x40020458
 8006cb0:	40020470 	.word	0x40020470
 8006cb4:	40020488 	.word	0x40020488
 8006cb8:	400204a0 	.word	0x400204a0
 8006cbc:	400204b8 	.word	0x400204b8
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00d      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cd0:	f003 031f 	and.w	r3, r3, #31
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	409a      	lsls	r2, r3
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce0:	f043 0204 	orr.w	r2, r3, #4
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cec:	f003 031f 	and.w	r3, r3, #31
 8006cf0:	2210      	movs	r2, #16
 8006cf2:	409a      	lsls	r2, r3
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 80a6 	beq.w	8006e4a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a85      	ldr	r2, [pc, #532]	@ (8006f18 <HAL_DMA_IRQHandler+0x690>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d04a      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a83      	ldr	r2, [pc, #524]	@ (8006f1c <HAL_DMA_IRQHandler+0x694>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d045      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a82      	ldr	r2, [pc, #520]	@ (8006f20 <HAL_DMA_IRQHandler+0x698>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d040      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a80      	ldr	r2, [pc, #512]	@ (8006f24 <HAL_DMA_IRQHandler+0x69c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d03b      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a7f      	ldr	r2, [pc, #508]	@ (8006f28 <HAL_DMA_IRQHandler+0x6a0>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d036      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a7d      	ldr	r2, [pc, #500]	@ (8006f2c <HAL_DMA_IRQHandler+0x6a4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d031      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a7c      	ldr	r2, [pc, #496]	@ (8006f30 <HAL_DMA_IRQHandler+0x6a8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d02c      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a7a      	ldr	r2, [pc, #488]	@ (8006f34 <HAL_DMA_IRQHandler+0x6ac>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d027      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a79      	ldr	r2, [pc, #484]	@ (8006f38 <HAL_DMA_IRQHandler+0x6b0>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d022      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a77      	ldr	r2, [pc, #476]	@ (8006f3c <HAL_DMA_IRQHandler+0x6b4>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d01d      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a76      	ldr	r2, [pc, #472]	@ (8006f40 <HAL_DMA_IRQHandler+0x6b8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d018      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a74      	ldr	r2, [pc, #464]	@ (8006f44 <HAL_DMA_IRQHandler+0x6bc>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d013      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a73      	ldr	r2, [pc, #460]	@ (8006f48 <HAL_DMA_IRQHandler+0x6c0>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00e      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a71      	ldr	r2, [pc, #452]	@ (8006f4c <HAL_DMA_IRQHandler+0x6c4>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d009      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a70      	ldr	r2, [pc, #448]	@ (8006f50 <HAL_DMA_IRQHandler+0x6c8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d004      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a6e      	ldr	r2, [pc, #440]	@ (8006f54 <HAL_DMA_IRQHandler+0x6cc>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d10a      	bne.n	8006db4 <HAL_DMA_IRQHandler+0x52c>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	bf14      	ite	ne
 8006dac:	2301      	movne	r3, #1
 8006dae:	2300      	moveq	r3, #0
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	e009      	b.n	8006dc8 <HAL_DMA_IRQHandler+0x540>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0304 	and.w	r3, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	bf14      	ite	ne
 8006dc2:	2301      	movne	r3, #1
 8006dc4:	2300      	moveq	r3, #0
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d03e      	beq.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd0:	f003 031f 	and.w	r3, r3, #31
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	409a      	lsls	r2, r3
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d018      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d108      	bne.n	8006e0a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d024      	beq.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	4798      	blx	r3
 8006e08:	e01f      	b.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d01b      	beq.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	4798      	blx	r3
 8006e1a:	e016      	b.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d107      	bne.n	8006e3a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0208 	bic.w	r2, r2, #8
 8006e38:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	2220      	movs	r2, #32
 8006e54:	409a      	lsls	r2, r3
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 8110 	beq.w	8007080 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a2c      	ldr	r2, [pc, #176]	@ (8006f18 <HAL_DMA_IRQHandler+0x690>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d04a      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8006f1c <HAL_DMA_IRQHandler+0x694>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d045      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a29      	ldr	r2, [pc, #164]	@ (8006f20 <HAL_DMA_IRQHandler+0x698>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d040      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a28      	ldr	r2, [pc, #160]	@ (8006f24 <HAL_DMA_IRQHandler+0x69c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d03b      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a26      	ldr	r2, [pc, #152]	@ (8006f28 <HAL_DMA_IRQHandler+0x6a0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d036      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a25      	ldr	r2, [pc, #148]	@ (8006f2c <HAL_DMA_IRQHandler+0x6a4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d031      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a23      	ldr	r2, [pc, #140]	@ (8006f30 <HAL_DMA_IRQHandler+0x6a8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d02c      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a22      	ldr	r2, [pc, #136]	@ (8006f34 <HAL_DMA_IRQHandler+0x6ac>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d027      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a20      	ldr	r2, [pc, #128]	@ (8006f38 <HAL_DMA_IRQHandler+0x6b0>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d022      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8006f3c <HAL_DMA_IRQHandler+0x6b4>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d01d      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f40 <HAL_DMA_IRQHandler+0x6b8>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d018      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8006f44 <HAL_DMA_IRQHandler+0x6bc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1a      	ldr	r2, [pc, #104]	@ (8006f48 <HAL_DMA_IRQHandler+0x6c0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00e      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a19      	ldr	r2, [pc, #100]	@ (8006f4c <HAL_DMA_IRQHandler+0x6c4>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d009      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a17      	ldr	r2, [pc, #92]	@ (8006f50 <HAL_DMA_IRQHandler+0x6c8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d004      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a16      	ldr	r2, [pc, #88]	@ (8006f54 <HAL_DMA_IRQHandler+0x6cc>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d12b      	bne.n	8006f58 <HAL_DMA_IRQHandler+0x6d0>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	bf14      	ite	ne
 8006f0e:	2301      	movne	r3, #1
 8006f10:	2300      	moveq	r3, #0
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	e02a      	b.n	8006f6c <HAL_DMA_IRQHandler+0x6e4>
 8006f16:	bf00      	nop
 8006f18:	40020010 	.word	0x40020010
 8006f1c:	40020028 	.word	0x40020028
 8006f20:	40020040 	.word	0x40020040
 8006f24:	40020058 	.word	0x40020058
 8006f28:	40020070 	.word	0x40020070
 8006f2c:	40020088 	.word	0x40020088
 8006f30:	400200a0 	.word	0x400200a0
 8006f34:	400200b8 	.word	0x400200b8
 8006f38:	40020410 	.word	0x40020410
 8006f3c:	40020428 	.word	0x40020428
 8006f40:	40020440 	.word	0x40020440
 8006f44:	40020458 	.word	0x40020458
 8006f48:	40020470 	.word	0x40020470
 8006f4c:	40020488 	.word	0x40020488
 8006f50:	400204a0 	.word	0x400204a0
 8006f54:	400204b8 	.word	0x400204b8
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bf14      	ite	ne
 8006f66:	2301      	movne	r3, #1
 8006f68:	2300      	moveq	r3, #0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 8087 	beq.w	8007080 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	409a      	lsls	r2, r3
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	d139      	bne.n	8007002 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 0216 	bic.w	r2, r2, #22
 8006f9c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	695a      	ldr	r2, [r3, #20]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d103      	bne.n	8006fbe <HAL_DMA_IRQHandler+0x736>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d007      	beq.n	8006fce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0208 	bic.w	r2, r2, #8
 8006fcc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fd2:	f003 031f 	and.w	r3, r3, #31
 8006fd6:	223f      	movs	r2, #63	@ 0x3f
 8006fd8:	409a      	lsls	r2, r3
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 834a 	beq.w	800768c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	4798      	blx	r3
          }
          return;
 8007000:	e344      	b.n	800768c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d018      	beq.n	8007042 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d108      	bne.n	8007030 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007022:	2b00      	cmp	r3, #0
 8007024:	d02c      	beq.n	8007080 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	4798      	blx	r3
 800702e:	e027      	b.n	8007080 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d023      	beq.n	8007080 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
 8007040:	e01e      	b.n	8007080 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10f      	bne.n	8007070 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0210 	bic.w	r2, r2, #16
 800705e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 8306 	beq.w	8007696 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 8088 	beq.w	80071a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2204      	movs	r2, #4
 800709c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a7a      	ldr	r2, [pc, #488]	@ (8007290 <HAL_DMA_IRQHandler+0xa08>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d04a      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a79      	ldr	r2, [pc, #484]	@ (8007294 <HAL_DMA_IRQHandler+0xa0c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d045      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a77      	ldr	r2, [pc, #476]	@ (8007298 <HAL_DMA_IRQHandler+0xa10>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d040      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a76      	ldr	r2, [pc, #472]	@ (800729c <HAL_DMA_IRQHandler+0xa14>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d03b      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a74      	ldr	r2, [pc, #464]	@ (80072a0 <HAL_DMA_IRQHandler+0xa18>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d036      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a73      	ldr	r2, [pc, #460]	@ (80072a4 <HAL_DMA_IRQHandler+0xa1c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d031      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a71      	ldr	r2, [pc, #452]	@ (80072a8 <HAL_DMA_IRQHandler+0xa20>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d02c      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a70      	ldr	r2, [pc, #448]	@ (80072ac <HAL_DMA_IRQHandler+0xa24>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d027      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a6e      	ldr	r2, [pc, #440]	@ (80072b0 <HAL_DMA_IRQHandler+0xa28>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d022      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a6d      	ldr	r2, [pc, #436]	@ (80072b4 <HAL_DMA_IRQHandler+0xa2c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d01d      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a6b      	ldr	r2, [pc, #428]	@ (80072b8 <HAL_DMA_IRQHandler+0xa30>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d018      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a6a      	ldr	r2, [pc, #424]	@ (80072bc <HAL_DMA_IRQHandler+0xa34>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d013      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a68      	ldr	r2, [pc, #416]	@ (80072c0 <HAL_DMA_IRQHandler+0xa38>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00e      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a67      	ldr	r2, [pc, #412]	@ (80072c4 <HAL_DMA_IRQHandler+0xa3c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d009      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a65      	ldr	r2, [pc, #404]	@ (80072c8 <HAL_DMA_IRQHandler+0xa40>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d004      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a64      	ldr	r2, [pc, #400]	@ (80072cc <HAL_DMA_IRQHandler+0xa44>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d108      	bne.n	8007152 <HAL_DMA_IRQHandler+0x8ca>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0201 	bic.w	r2, r2, #1
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	e007      	b.n	8007162 <HAL_DMA_IRQHandler+0x8da>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0201 	bic.w	r2, r2, #1
 8007160:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800716a:	429a      	cmp	r2, r3
 800716c:	d307      	bcc.n	800717e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1f2      	bne.n	8007162 <HAL_DMA_IRQHandler+0x8da>
 800717c:	e000      	b.n	8007180 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800717e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d004      	beq.n	8007198 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2203      	movs	r2, #3
 8007192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007196:	e003      	b.n	80071a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 8272 	beq.w	8007696 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
 80071ba:	e26c      	b.n	8007696 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a43      	ldr	r2, [pc, #268]	@ (80072d0 <HAL_DMA_IRQHandler+0xa48>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d022      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a42      	ldr	r2, [pc, #264]	@ (80072d4 <HAL_DMA_IRQHandler+0xa4c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d01d      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a40      	ldr	r2, [pc, #256]	@ (80072d8 <HAL_DMA_IRQHandler+0xa50>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d018      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a3f      	ldr	r2, [pc, #252]	@ (80072dc <HAL_DMA_IRQHandler+0xa54>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d013      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a3d      	ldr	r2, [pc, #244]	@ (80072e0 <HAL_DMA_IRQHandler+0xa58>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00e      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a3c      	ldr	r2, [pc, #240]	@ (80072e4 <HAL_DMA_IRQHandler+0xa5c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d009      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a3a      	ldr	r2, [pc, #232]	@ (80072e8 <HAL_DMA_IRQHandler+0xa60>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d004      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a39      	ldr	r2, [pc, #228]	@ (80072ec <HAL_DMA_IRQHandler+0xa64>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d101      	bne.n	8007210 <HAL_DMA_IRQHandler+0x988>
 800720c:	2301      	movs	r3, #1
 800720e:	e000      	b.n	8007212 <HAL_DMA_IRQHandler+0x98a>
 8007210:	2300      	movs	r3, #0
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 823f 	beq.w	8007696 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007224:	f003 031f 	and.w	r3, r3, #31
 8007228:	2204      	movs	r2, #4
 800722a:	409a      	lsls	r2, r3
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	4013      	ands	r3, r2
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 80cd 	beq.w	80073d0 <HAL_DMA_IRQHandler+0xb48>
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80c7 	beq.w	80073d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007246:	f003 031f 	and.w	r3, r3, #31
 800724a:	2204      	movs	r2, #4
 800724c:	409a      	lsls	r2, r3
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d049      	beq.n	80072f0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d109      	bne.n	800727a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 8210 	beq.w	8007690 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007278:	e20a      	b.n	8007690 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 8206 	beq.w	8007690 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800728c:	e200      	b.n	8007690 <HAL_DMA_IRQHandler+0xe08>
 800728e:	bf00      	nop
 8007290:	40020010 	.word	0x40020010
 8007294:	40020028 	.word	0x40020028
 8007298:	40020040 	.word	0x40020040
 800729c:	40020058 	.word	0x40020058
 80072a0:	40020070 	.word	0x40020070
 80072a4:	40020088 	.word	0x40020088
 80072a8:	400200a0 	.word	0x400200a0
 80072ac:	400200b8 	.word	0x400200b8
 80072b0:	40020410 	.word	0x40020410
 80072b4:	40020428 	.word	0x40020428
 80072b8:	40020440 	.word	0x40020440
 80072bc:	40020458 	.word	0x40020458
 80072c0:	40020470 	.word	0x40020470
 80072c4:	40020488 	.word	0x40020488
 80072c8:	400204a0 	.word	0x400204a0
 80072cc:	400204b8 	.word	0x400204b8
 80072d0:	58025408 	.word	0x58025408
 80072d4:	5802541c 	.word	0x5802541c
 80072d8:	58025430 	.word	0x58025430
 80072dc:	58025444 	.word	0x58025444
 80072e0:	58025458 	.word	0x58025458
 80072e4:	5802546c 	.word	0x5802546c
 80072e8:	58025480 	.word	0x58025480
 80072ec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d160      	bne.n	80073bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a7f      	ldr	r2, [pc, #508]	@ (80074fc <HAL_DMA_IRQHandler+0xc74>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d04a      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a7d      	ldr	r2, [pc, #500]	@ (8007500 <HAL_DMA_IRQHandler+0xc78>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d045      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a7c      	ldr	r2, [pc, #496]	@ (8007504 <HAL_DMA_IRQHandler+0xc7c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d040      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a7a      	ldr	r2, [pc, #488]	@ (8007508 <HAL_DMA_IRQHandler+0xc80>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d03b      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a79      	ldr	r2, [pc, #484]	@ (800750c <HAL_DMA_IRQHandler+0xc84>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d036      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a77      	ldr	r2, [pc, #476]	@ (8007510 <HAL_DMA_IRQHandler+0xc88>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d031      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a76      	ldr	r2, [pc, #472]	@ (8007514 <HAL_DMA_IRQHandler+0xc8c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d02c      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a74      	ldr	r2, [pc, #464]	@ (8007518 <HAL_DMA_IRQHandler+0xc90>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d027      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a73      	ldr	r2, [pc, #460]	@ (800751c <HAL_DMA_IRQHandler+0xc94>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d022      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a71      	ldr	r2, [pc, #452]	@ (8007520 <HAL_DMA_IRQHandler+0xc98>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d01d      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a70      	ldr	r2, [pc, #448]	@ (8007524 <HAL_DMA_IRQHandler+0xc9c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d018      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a6e      	ldr	r2, [pc, #440]	@ (8007528 <HAL_DMA_IRQHandler+0xca0>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d013      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a6d      	ldr	r2, [pc, #436]	@ (800752c <HAL_DMA_IRQHandler+0xca4>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00e      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a6b      	ldr	r2, [pc, #428]	@ (8007530 <HAL_DMA_IRQHandler+0xca8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d009      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a6a      	ldr	r2, [pc, #424]	@ (8007534 <HAL_DMA_IRQHandler+0xcac>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d004      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a68      	ldr	r2, [pc, #416]	@ (8007538 <HAL_DMA_IRQHandler+0xcb0>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d108      	bne.n	80073ac <HAL_DMA_IRQHandler+0xb24>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0208 	bic.w	r2, r2, #8
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	e007      	b.n	80073bc <HAL_DMA_IRQHandler+0xb34>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0204 	bic.w	r2, r2, #4
 80073ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 8165 	beq.w	8007690 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073ce:	e15f      	b.n	8007690 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	2202      	movs	r2, #2
 80073da:	409a      	lsls	r2, r3
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	4013      	ands	r3, r2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 80c5 	beq.w	8007570 <HAL_DMA_IRQHandler+0xce8>
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 80bf 	beq.w	8007570 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073f6:	f003 031f 	and.w	r3, r3, #31
 80073fa:	2202      	movs	r2, #2
 80073fc:	409a      	lsls	r2, r3
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d018      	beq.n	800743e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d109      	bne.n	800742a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 813a 	beq.w	8007694 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007428:	e134      	b.n	8007694 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 8130 	beq.w	8007694 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800743c:	e12a      	b.n	8007694 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f003 0320 	and.w	r3, r3, #32
 8007444:	2b00      	cmp	r3, #0
 8007446:	f040 8089 	bne.w	800755c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a2b      	ldr	r2, [pc, #172]	@ (80074fc <HAL_DMA_IRQHandler+0xc74>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d04a      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a29      	ldr	r2, [pc, #164]	@ (8007500 <HAL_DMA_IRQHandler+0xc78>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d045      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a28      	ldr	r2, [pc, #160]	@ (8007504 <HAL_DMA_IRQHandler+0xc7c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d040      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a26      	ldr	r2, [pc, #152]	@ (8007508 <HAL_DMA_IRQHandler+0xc80>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d03b      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a25      	ldr	r2, [pc, #148]	@ (800750c <HAL_DMA_IRQHandler+0xc84>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d036      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a23      	ldr	r2, [pc, #140]	@ (8007510 <HAL_DMA_IRQHandler+0xc88>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d031      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a22      	ldr	r2, [pc, #136]	@ (8007514 <HAL_DMA_IRQHandler+0xc8c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d02c      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a20      	ldr	r2, [pc, #128]	@ (8007518 <HAL_DMA_IRQHandler+0xc90>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d027      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a1f      	ldr	r2, [pc, #124]	@ (800751c <HAL_DMA_IRQHandler+0xc94>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d022      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007520 <HAL_DMA_IRQHandler+0xc98>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d01d      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a1c      	ldr	r2, [pc, #112]	@ (8007524 <HAL_DMA_IRQHandler+0xc9c>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d018      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a1a      	ldr	r2, [pc, #104]	@ (8007528 <HAL_DMA_IRQHandler+0xca0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d013      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a19      	ldr	r2, [pc, #100]	@ (800752c <HAL_DMA_IRQHandler+0xca4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00e      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a17      	ldr	r2, [pc, #92]	@ (8007530 <HAL_DMA_IRQHandler+0xca8>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d009      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a16      	ldr	r2, [pc, #88]	@ (8007534 <HAL_DMA_IRQHandler+0xcac>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d004      	beq.n	80074ea <HAL_DMA_IRQHandler+0xc62>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a14      	ldr	r2, [pc, #80]	@ (8007538 <HAL_DMA_IRQHandler+0xcb0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d128      	bne.n	800753c <HAL_DMA_IRQHandler+0xcb4>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0214 	bic.w	r2, r2, #20
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	e027      	b.n	800754c <HAL_DMA_IRQHandler+0xcc4>
 80074fc:	40020010 	.word	0x40020010
 8007500:	40020028 	.word	0x40020028
 8007504:	40020040 	.word	0x40020040
 8007508:	40020058 	.word	0x40020058
 800750c:	40020070 	.word	0x40020070
 8007510:	40020088 	.word	0x40020088
 8007514:	400200a0 	.word	0x400200a0
 8007518:	400200b8 	.word	0x400200b8
 800751c:	40020410 	.word	0x40020410
 8007520:	40020428 	.word	0x40020428
 8007524:	40020440 	.word	0x40020440
 8007528:	40020458 	.word	0x40020458
 800752c:	40020470 	.word	0x40020470
 8007530:	40020488 	.word	0x40020488
 8007534:	400204a0 	.word	0x400204a0
 8007538:	400204b8 	.word	0x400204b8
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 020a 	bic.w	r2, r2, #10
 800754a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 8097 	beq.w	8007694 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800756e:	e091      	b.n	8007694 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007574:	f003 031f 	and.w	r3, r3, #31
 8007578:	2208      	movs	r2, #8
 800757a:	409a      	lsls	r2, r3
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	4013      	ands	r3, r2
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 8088 	beq.w	8007696 <HAL_DMA_IRQHandler+0xe0e>
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f003 0308 	and.w	r3, r3, #8
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 8082 	beq.w	8007696 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a41      	ldr	r2, [pc, #260]	@ (800769c <HAL_DMA_IRQHandler+0xe14>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d04a      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a3f      	ldr	r2, [pc, #252]	@ (80076a0 <HAL_DMA_IRQHandler+0xe18>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d045      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a3e      	ldr	r2, [pc, #248]	@ (80076a4 <HAL_DMA_IRQHandler+0xe1c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d040      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a3c      	ldr	r2, [pc, #240]	@ (80076a8 <HAL_DMA_IRQHandler+0xe20>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d03b      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a3b      	ldr	r2, [pc, #236]	@ (80076ac <HAL_DMA_IRQHandler+0xe24>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d036      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a39      	ldr	r2, [pc, #228]	@ (80076b0 <HAL_DMA_IRQHandler+0xe28>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d031      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a38      	ldr	r2, [pc, #224]	@ (80076b4 <HAL_DMA_IRQHandler+0xe2c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d02c      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a36      	ldr	r2, [pc, #216]	@ (80076b8 <HAL_DMA_IRQHandler+0xe30>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d027      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a35      	ldr	r2, [pc, #212]	@ (80076bc <HAL_DMA_IRQHandler+0xe34>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d022      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a33      	ldr	r2, [pc, #204]	@ (80076c0 <HAL_DMA_IRQHandler+0xe38>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d01d      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a32      	ldr	r2, [pc, #200]	@ (80076c4 <HAL_DMA_IRQHandler+0xe3c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d018      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a30      	ldr	r2, [pc, #192]	@ (80076c8 <HAL_DMA_IRQHandler+0xe40>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d013      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a2f      	ldr	r2, [pc, #188]	@ (80076cc <HAL_DMA_IRQHandler+0xe44>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00e      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a2d      	ldr	r2, [pc, #180]	@ (80076d0 <HAL_DMA_IRQHandler+0xe48>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d009      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a2c      	ldr	r2, [pc, #176]	@ (80076d4 <HAL_DMA_IRQHandler+0xe4c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d004      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a2a      	ldr	r2, [pc, #168]	@ (80076d8 <HAL_DMA_IRQHandler+0xe50>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d108      	bne.n	8007644 <HAL_DMA_IRQHandler+0xdbc>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 021c 	bic.w	r2, r2, #28
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	e007      	b.n	8007654 <HAL_DMA_IRQHandler+0xdcc>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 020e 	bic.w	r2, r2, #14
 8007652:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007658:	f003 031f 	and.w	r3, r3, #31
 800765c:	2201      	movs	r2, #1
 800765e:	409a      	lsls	r2, r3
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800767e:	2b00      	cmp	r3, #0
 8007680:	d009      	beq.n	8007696 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	4798      	blx	r3
 800768a:	e004      	b.n	8007696 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800768c:	bf00      	nop
 800768e:	e002      	b.n	8007696 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007690:	bf00      	nop
 8007692:	e000      	b.n	8007696 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007694:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007696:	3728      	adds	r7, #40	@ 0x28
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	40020010 	.word	0x40020010
 80076a0:	40020028 	.word	0x40020028
 80076a4:	40020040 	.word	0x40020040
 80076a8:	40020058 	.word	0x40020058
 80076ac:	40020070 	.word	0x40020070
 80076b0:	40020088 	.word	0x40020088
 80076b4:	400200a0 	.word	0x400200a0
 80076b8:	400200b8 	.word	0x400200b8
 80076bc:	40020410 	.word	0x40020410
 80076c0:	40020428 	.word	0x40020428
 80076c4:	40020440 	.word	0x40020440
 80076c8:	40020458 	.word	0x40020458
 80076cc:	40020470 	.word	0x40020470
 80076d0:	40020488 	.word	0x40020488
 80076d4:	400204a0 	.word	0x400204a0
 80076d8:	400204b8 	.word	0x400204b8

080076dc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076ea:	b2db      	uxtb	r3, r3
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
 8007704:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800770a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007710:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a7f      	ldr	r2, [pc, #508]	@ (8007914 <DMA_SetConfig+0x21c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d072      	beq.n	8007802 <DMA_SetConfig+0x10a>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a7d      	ldr	r2, [pc, #500]	@ (8007918 <DMA_SetConfig+0x220>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d06d      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a7c      	ldr	r2, [pc, #496]	@ (800791c <DMA_SetConfig+0x224>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d068      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a7a      	ldr	r2, [pc, #488]	@ (8007920 <DMA_SetConfig+0x228>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d063      	beq.n	8007802 <DMA_SetConfig+0x10a>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a79      	ldr	r2, [pc, #484]	@ (8007924 <DMA_SetConfig+0x22c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d05e      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a77      	ldr	r2, [pc, #476]	@ (8007928 <DMA_SetConfig+0x230>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d059      	beq.n	8007802 <DMA_SetConfig+0x10a>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a76      	ldr	r2, [pc, #472]	@ (800792c <DMA_SetConfig+0x234>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d054      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a74      	ldr	r2, [pc, #464]	@ (8007930 <DMA_SetConfig+0x238>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d04f      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a73      	ldr	r2, [pc, #460]	@ (8007934 <DMA_SetConfig+0x23c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d04a      	beq.n	8007802 <DMA_SetConfig+0x10a>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a71      	ldr	r2, [pc, #452]	@ (8007938 <DMA_SetConfig+0x240>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d045      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a70      	ldr	r2, [pc, #448]	@ (800793c <DMA_SetConfig+0x244>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d040      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a6e      	ldr	r2, [pc, #440]	@ (8007940 <DMA_SetConfig+0x248>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d03b      	beq.n	8007802 <DMA_SetConfig+0x10a>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a6d      	ldr	r2, [pc, #436]	@ (8007944 <DMA_SetConfig+0x24c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d036      	beq.n	8007802 <DMA_SetConfig+0x10a>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a6b      	ldr	r2, [pc, #428]	@ (8007948 <DMA_SetConfig+0x250>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d031      	beq.n	8007802 <DMA_SetConfig+0x10a>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a6a      	ldr	r2, [pc, #424]	@ (800794c <DMA_SetConfig+0x254>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d02c      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a68      	ldr	r2, [pc, #416]	@ (8007950 <DMA_SetConfig+0x258>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d027      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a67      	ldr	r2, [pc, #412]	@ (8007954 <DMA_SetConfig+0x25c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d022      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a65      	ldr	r2, [pc, #404]	@ (8007958 <DMA_SetConfig+0x260>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d01d      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a64      	ldr	r2, [pc, #400]	@ (800795c <DMA_SetConfig+0x264>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d018      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a62      	ldr	r2, [pc, #392]	@ (8007960 <DMA_SetConfig+0x268>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d013      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a61      	ldr	r2, [pc, #388]	@ (8007964 <DMA_SetConfig+0x26c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00e      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a5f      	ldr	r2, [pc, #380]	@ (8007968 <DMA_SetConfig+0x270>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d009      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a5e      	ldr	r2, [pc, #376]	@ (800796c <DMA_SetConfig+0x274>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d004      	beq.n	8007802 <DMA_SetConfig+0x10a>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a5c      	ldr	r2, [pc, #368]	@ (8007970 <DMA_SetConfig+0x278>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d101      	bne.n	8007806 <DMA_SetConfig+0x10e>
 8007802:	2301      	movs	r3, #1
 8007804:	e000      	b.n	8007808 <DMA_SetConfig+0x110>
 8007806:	2300      	movs	r3, #0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00d      	beq.n	8007828 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007814:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d004      	beq.n	8007828 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007826:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a39      	ldr	r2, [pc, #228]	@ (8007914 <DMA_SetConfig+0x21c>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d04a      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a38      	ldr	r2, [pc, #224]	@ (8007918 <DMA_SetConfig+0x220>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d045      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a36      	ldr	r2, [pc, #216]	@ (800791c <DMA_SetConfig+0x224>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d040      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a35      	ldr	r2, [pc, #212]	@ (8007920 <DMA_SetConfig+0x228>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d03b      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a33      	ldr	r2, [pc, #204]	@ (8007924 <DMA_SetConfig+0x22c>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d036      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a32      	ldr	r2, [pc, #200]	@ (8007928 <DMA_SetConfig+0x230>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d031      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a30      	ldr	r2, [pc, #192]	@ (800792c <DMA_SetConfig+0x234>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d02c      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a2f      	ldr	r2, [pc, #188]	@ (8007930 <DMA_SetConfig+0x238>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d027      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a2d      	ldr	r2, [pc, #180]	@ (8007934 <DMA_SetConfig+0x23c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d022      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a2c      	ldr	r2, [pc, #176]	@ (8007938 <DMA_SetConfig+0x240>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d01d      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a2a      	ldr	r2, [pc, #168]	@ (800793c <DMA_SetConfig+0x244>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d018      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a29      	ldr	r2, [pc, #164]	@ (8007940 <DMA_SetConfig+0x248>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d013      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a27      	ldr	r2, [pc, #156]	@ (8007944 <DMA_SetConfig+0x24c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d00e      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a26      	ldr	r2, [pc, #152]	@ (8007948 <DMA_SetConfig+0x250>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d009      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a24      	ldr	r2, [pc, #144]	@ (800794c <DMA_SetConfig+0x254>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d004      	beq.n	80078c8 <DMA_SetConfig+0x1d0>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a23      	ldr	r2, [pc, #140]	@ (8007950 <DMA_SetConfig+0x258>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d101      	bne.n	80078cc <DMA_SetConfig+0x1d4>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e000      	b.n	80078ce <DMA_SetConfig+0x1d6>
 80078cc:	2300      	movs	r3, #0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d059      	beq.n	8007986 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078d6:	f003 031f 	and.w	r3, r3, #31
 80078da:	223f      	movs	r2, #63	@ 0x3f
 80078dc:	409a      	lsls	r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80078f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b40      	cmp	r3, #64	@ 0x40
 8007900:	d138      	bne.n	8007974 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007912:	e086      	b.n	8007a22 <DMA_SetConfig+0x32a>
 8007914:	40020010 	.word	0x40020010
 8007918:	40020028 	.word	0x40020028
 800791c:	40020040 	.word	0x40020040
 8007920:	40020058 	.word	0x40020058
 8007924:	40020070 	.word	0x40020070
 8007928:	40020088 	.word	0x40020088
 800792c:	400200a0 	.word	0x400200a0
 8007930:	400200b8 	.word	0x400200b8
 8007934:	40020410 	.word	0x40020410
 8007938:	40020428 	.word	0x40020428
 800793c:	40020440 	.word	0x40020440
 8007940:	40020458 	.word	0x40020458
 8007944:	40020470 	.word	0x40020470
 8007948:	40020488 	.word	0x40020488
 800794c:	400204a0 	.word	0x400204a0
 8007950:	400204b8 	.word	0x400204b8
 8007954:	58025408 	.word	0x58025408
 8007958:	5802541c 	.word	0x5802541c
 800795c:	58025430 	.word	0x58025430
 8007960:	58025444 	.word	0x58025444
 8007964:	58025458 	.word	0x58025458
 8007968:	5802546c 	.word	0x5802546c
 800796c:	58025480 	.word	0x58025480
 8007970:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	60da      	str	r2, [r3, #12]
}
 8007984:	e04d      	b.n	8007a22 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a29      	ldr	r2, [pc, #164]	@ (8007a30 <DMA_SetConfig+0x338>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d022      	beq.n	80079d6 <DMA_SetConfig+0x2de>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a27      	ldr	r2, [pc, #156]	@ (8007a34 <DMA_SetConfig+0x33c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d01d      	beq.n	80079d6 <DMA_SetConfig+0x2de>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a26      	ldr	r2, [pc, #152]	@ (8007a38 <DMA_SetConfig+0x340>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d018      	beq.n	80079d6 <DMA_SetConfig+0x2de>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a24      	ldr	r2, [pc, #144]	@ (8007a3c <DMA_SetConfig+0x344>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d013      	beq.n	80079d6 <DMA_SetConfig+0x2de>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a23      	ldr	r2, [pc, #140]	@ (8007a40 <DMA_SetConfig+0x348>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d00e      	beq.n	80079d6 <DMA_SetConfig+0x2de>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a21      	ldr	r2, [pc, #132]	@ (8007a44 <DMA_SetConfig+0x34c>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d009      	beq.n	80079d6 <DMA_SetConfig+0x2de>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a20      	ldr	r2, [pc, #128]	@ (8007a48 <DMA_SetConfig+0x350>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d004      	beq.n	80079d6 <DMA_SetConfig+0x2de>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a1e      	ldr	r2, [pc, #120]	@ (8007a4c <DMA_SetConfig+0x354>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d101      	bne.n	80079da <DMA_SetConfig+0x2e2>
 80079d6:	2301      	movs	r3, #1
 80079d8:	e000      	b.n	80079dc <DMA_SetConfig+0x2e4>
 80079da:	2300      	movs	r3, #0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d020      	beq.n	8007a22 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079e4:	f003 031f 	and.w	r3, r3, #31
 80079e8:	2201      	movs	r2, #1
 80079ea:	409a      	lsls	r2, r3
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	2b40      	cmp	r3, #64	@ 0x40
 80079fe:	d108      	bne.n	8007a12 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	60da      	str	r2, [r3, #12]
}
 8007a10:	e007      	b.n	8007a22 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	60da      	str	r2, [r3, #12]
}
 8007a22:	bf00      	nop
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	58025408 	.word	0x58025408
 8007a34:	5802541c 	.word	0x5802541c
 8007a38:	58025430 	.word	0x58025430
 8007a3c:	58025444 	.word	0x58025444
 8007a40:	58025458 	.word	0x58025458
 8007a44:	5802546c 	.word	0x5802546c
 8007a48:	58025480 	.word	0x58025480
 8007a4c:	58025494 	.word	0x58025494

08007a50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a42      	ldr	r2, [pc, #264]	@ (8007b68 <DMA_CalcBaseAndBitshift+0x118>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d04a      	beq.n	8007af8 <DMA_CalcBaseAndBitshift+0xa8>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a41      	ldr	r2, [pc, #260]	@ (8007b6c <DMA_CalcBaseAndBitshift+0x11c>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d045      	beq.n	8007af8 <DMA_CalcBaseAndBitshift+0xa8>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a3f      	ldr	r2, [pc, #252]	@ (8007b70 <DMA_CalcBaseAndBitshift+0x120>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d040      	beq.n	8007af8 <DMA_CalcBaseAndBitshift+0xa8>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a3e      	ldr	r2, [pc, #248]	@ (8007b74 <DMA_CalcBaseAndBitshift+0x124>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d03b      	beq.n	8007af8 <DMA_CalcBaseAndBitshift+0xa8>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a3c      	ldr	r2, [pc, #240]	@ (8007b78 <DMA_CalcBaseAndBitshift+0x128>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d036      	beq.n	8007af8 <DMA_CalcBaseAndBitshift+0xa8>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a3b      	ldr	r2, [pc, #236]	@ (8007b7c <DMA_CalcBaseAndBitshift+0x12c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d031      	beq.n	8007af8 <DMA_CalcBaseAndBitshift+0xa8>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a39      	ldr	r2, [pc, #228]	@ (8007b80 <DMA_CalcBaseAndBitshift+0x130>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d02c      	beq.n	8007af8 <DMA_CalcBaseAndBitshift+0xa8>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a38      	ldr	r2, [pc, #224]	@ (8007b84 <DMA_CalcBaseAndBitshift+0x134>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d027      	beq.n	8007af8 <DMA_CalcBaseAndBitshift+0xa8>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a36      	ldr	r2, [pc, #216]	@ (8007b88 <DMA_CalcBaseAndBitshift+0x138>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d022      	beq.n	8007af8 <DMA_CalcBaseAndBitshift+0xa8>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a35      	ldr	r2, [pc, #212]	@ (8007b8c <DMA_CalcBaseAndBitshift+0x13c>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d01d      	beq.n	8007af8 <DMA_CalcBaseAndBitshift+0xa8>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a33      	ldr	r2, [pc, #204]	@ (8007b90 <DMA_CalcBaseAndBitshift+0x140>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d018      	beq.n	8007af8 <DMA_CalcBaseAndBitshift+0xa8>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a32      	ldr	r2, [pc, #200]	@ (8007b94 <DMA_CalcBaseAndBitshift+0x144>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d013      	beq.n	8007af8 <DMA_CalcBaseAndBitshift+0xa8>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a30      	ldr	r2, [pc, #192]	@ (8007b98 <DMA_CalcBaseAndBitshift+0x148>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d00e      	beq.n	8007af8 <DMA_CalcBaseAndBitshift+0xa8>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a2f      	ldr	r2, [pc, #188]	@ (8007b9c <DMA_CalcBaseAndBitshift+0x14c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d009      	beq.n	8007af8 <DMA_CalcBaseAndBitshift+0xa8>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8007ba0 <DMA_CalcBaseAndBitshift+0x150>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d004      	beq.n	8007af8 <DMA_CalcBaseAndBitshift+0xa8>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a2c      	ldr	r2, [pc, #176]	@ (8007ba4 <DMA_CalcBaseAndBitshift+0x154>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d101      	bne.n	8007afc <DMA_CalcBaseAndBitshift+0xac>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e000      	b.n	8007afe <DMA_CalcBaseAndBitshift+0xae>
 8007afc:	2300      	movs	r3, #0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d024      	beq.n	8007b4c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	3b10      	subs	r3, #16
 8007b0a:	4a27      	ldr	r2, [pc, #156]	@ (8007ba8 <DMA_CalcBaseAndBitshift+0x158>)
 8007b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b10:	091b      	lsrs	r3, r3, #4
 8007b12:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	4a24      	ldr	r2, [pc, #144]	@ (8007bac <DMA_CalcBaseAndBitshift+0x15c>)
 8007b1c:	5cd3      	ldrb	r3, [r2, r3]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d908      	bls.n	8007b3c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	4b1f      	ldr	r3, [pc, #124]	@ (8007bb0 <DMA_CalcBaseAndBitshift+0x160>)
 8007b32:	4013      	ands	r3, r2
 8007b34:	1d1a      	adds	r2, r3, #4
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b3a:	e00d      	b.n	8007b58 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	461a      	mov	r2, r3
 8007b42:	4b1b      	ldr	r3, [pc, #108]	@ (8007bb0 <DMA_CalcBaseAndBitshift+0x160>)
 8007b44:	4013      	ands	r3, r2
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b4a:	e005      	b.n	8007b58 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	40020010 	.word	0x40020010
 8007b6c:	40020028 	.word	0x40020028
 8007b70:	40020040 	.word	0x40020040
 8007b74:	40020058 	.word	0x40020058
 8007b78:	40020070 	.word	0x40020070
 8007b7c:	40020088 	.word	0x40020088
 8007b80:	400200a0 	.word	0x400200a0
 8007b84:	400200b8 	.word	0x400200b8
 8007b88:	40020410 	.word	0x40020410
 8007b8c:	40020428 	.word	0x40020428
 8007b90:	40020440 	.word	0x40020440
 8007b94:	40020458 	.word	0x40020458
 8007b98:	40020470 	.word	0x40020470
 8007b9c:	40020488 	.word	0x40020488
 8007ba0:	400204a0 	.word	0x400204a0
 8007ba4:	400204b8 	.word	0x400204b8
 8007ba8:	aaaaaaab 	.word	0xaaaaaaab
 8007bac:	080172d0 	.word	0x080172d0
 8007bb0:	fffffc00 	.word	0xfffffc00

08007bb4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d120      	bne.n	8007c0a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	d858      	bhi.n	8007c82 <DMA_CheckFifoParam+0xce>
 8007bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd8 <DMA_CheckFifoParam+0x24>)
 8007bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd6:	bf00      	nop
 8007bd8:	08007be9 	.word	0x08007be9
 8007bdc:	08007bfb 	.word	0x08007bfb
 8007be0:	08007be9 	.word	0x08007be9
 8007be4:	08007c83 	.word	0x08007c83
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d048      	beq.n	8007c86 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bf8:	e045      	b.n	8007c86 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007c02:	d142      	bne.n	8007c8a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c08:	e03f      	b.n	8007c8a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c12:	d123      	bne.n	8007c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d838      	bhi.n	8007c8e <DMA_CheckFifoParam+0xda>
 8007c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c24 <DMA_CheckFifoParam+0x70>)
 8007c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c22:	bf00      	nop
 8007c24:	08007c35 	.word	0x08007c35
 8007c28:	08007c3b 	.word	0x08007c3b
 8007c2c:	08007c35 	.word	0x08007c35
 8007c30:	08007c4d 	.word	0x08007c4d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	73fb      	strb	r3, [r7, #15]
        break;
 8007c38:	e030      	b.n	8007c9c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d025      	beq.n	8007c92 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c4a:	e022      	b.n	8007c92 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007c54:	d11f      	bne.n	8007c96 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c5a:	e01c      	b.n	8007c96 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d902      	bls.n	8007c6a <DMA_CheckFifoParam+0xb6>
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d003      	beq.n	8007c70 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007c68:	e018      	b.n	8007c9c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	73fb      	strb	r3, [r7, #15]
        break;
 8007c6e:	e015      	b.n	8007c9c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00e      	beq.n	8007c9a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c80:	e00b      	b.n	8007c9a <DMA_CheckFifoParam+0xe6>
        break;
 8007c82:	bf00      	nop
 8007c84:	e00a      	b.n	8007c9c <DMA_CheckFifoParam+0xe8>
        break;
 8007c86:	bf00      	nop
 8007c88:	e008      	b.n	8007c9c <DMA_CheckFifoParam+0xe8>
        break;
 8007c8a:	bf00      	nop
 8007c8c:	e006      	b.n	8007c9c <DMA_CheckFifoParam+0xe8>
        break;
 8007c8e:	bf00      	nop
 8007c90:	e004      	b.n	8007c9c <DMA_CheckFifoParam+0xe8>
        break;
 8007c92:	bf00      	nop
 8007c94:	e002      	b.n	8007c9c <DMA_CheckFifoParam+0xe8>
        break;
 8007c96:	bf00      	nop
 8007c98:	e000      	b.n	8007c9c <DMA_CheckFifoParam+0xe8>
    break;
 8007c9a:	bf00      	nop
    }
  }

  return status;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop

08007cac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a38      	ldr	r2, [pc, #224]	@ (8007da0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d022      	beq.n	8007d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a36      	ldr	r2, [pc, #216]	@ (8007da4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d01d      	beq.n	8007d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a35      	ldr	r2, [pc, #212]	@ (8007da8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d018      	beq.n	8007d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a33      	ldr	r2, [pc, #204]	@ (8007dac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d013      	beq.n	8007d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a32      	ldr	r2, [pc, #200]	@ (8007db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d00e      	beq.n	8007d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a30      	ldr	r2, [pc, #192]	@ (8007db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d009      	beq.n	8007d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a2f      	ldr	r2, [pc, #188]	@ (8007db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d004      	beq.n	8007d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a2d      	ldr	r2, [pc, #180]	@ (8007dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d101      	bne.n	8007d0e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e000      	b.n	8007d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d01a      	beq.n	8007d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	3b08      	subs	r3, #8
 8007d1c:	4a28      	ldr	r2, [pc, #160]	@ (8007dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d22:	091b      	lsrs	r3, r3, #4
 8007d24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	4b26      	ldr	r3, [pc, #152]	@ (8007dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007d2a:	4413      	add	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	461a      	mov	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a24      	ldr	r2, [pc, #144]	@ (8007dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007d38:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f003 031f 	and.w	r3, r3, #31
 8007d40:	2201      	movs	r2, #1
 8007d42:	409a      	lsls	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007d48:	e024      	b.n	8007d94 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	3b10      	subs	r3, #16
 8007d52:	4a1e      	ldr	r2, [pc, #120]	@ (8007dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007d54:	fba2 2303 	umull	r2, r3, r2, r3
 8007d58:	091b      	lsrs	r3, r3, #4
 8007d5a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8007dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d806      	bhi.n	8007d72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	4a1b      	ldr	r2, [pc, #108]	@ (8007dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d902      	bls.n	8007d72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3308      	adds	r3, #8
 8007d70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4b18      	ldr	r3, [pc, #96]	@ (8007dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007d76:	4413      	add	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a16      	ldr	r2, [pc, #88]	@ (8007ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007d84:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f003 031f 	and.w	r3, r3, #31
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	409a      	lsls	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007d94:	bf00      	nop
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	58025408 	.word	0x58025408
 8007da4:	5802541c 	.word	0x5802541c
 8007da8:	58025430 	.word	0x58025430
 8007dac:	58025444 	.word	0x58025444
 8007db0:	58025458 	.word	0x58025458
 8007db4:	5802546c 	.word	0x5802546c
 8007db8:	58025480 	.word	0x58025480
 8007dbc:	58025494 	.word	0x58025494
 8007dc0:	cccccccd 	.word	0xcccccccd
 8007dc4:	16009600 	.word	0x16009600
 8007dc8:	58025880 	.word	0x58025880
 8007dcc:	aaaaaaab 	.word	0xaaaaaaab
 8007dd0:	400204b8 	.word	0x400204b8
 8007dd4:	4002040f 	.word	0x4002040f
 8007dd8:	10008200 	.word	0x10008200
 8007ddc:	40020880 	.word	0x40020880

08007de0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d04a      	beq.n	8007e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b08      	cmp	r3, #8
 8007dfa:	d847      	bhi.n	8007e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a25      	ldr	r2, [pc, #148]	@ (8007e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d022      	beq.n	8007e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a24      	ldr	r2, [pc, #144]	@ (8007e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d01d      	beq.n	8007e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a22      	ldr	r2, [pc, #136]	@ (8007ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d018      	beq.n	8007e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a21      	ldr	r2, [pc, #132]	@ (8007ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d013      	beq.n	8007e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a1f      	ldr	r2, [pc, #124]	@ (8007ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00e      	beq.n	8007e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a1e      	ldr	r2, [pc, #120]	@ (8007eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d009      	beq.n	8007e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8007eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d004      	beq.n	8007e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a1b      	ldr	r2, [pc, #108]	@ (8007eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d101      	bne.n	8007e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e000      	b.n	8007e52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007e50:	2300      	movs	r3, #0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	4b17      	ldr	r3, [pc, #92]	@ (8007eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	461a      	mov	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a15      	ldr	r2, [pc, #84]	@ (8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007e68:	671a      	str	r2, [r3, #112]	@ 0x70
 8007e6a:	e009      	b.n	8007e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4b14      	ldr	r3, [pc, #80]	@ (8007ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007e70:	4413      	add	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	461a      	mov	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a11      	ldr	r2, [pc, #68]	@ (8007ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007e7e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	2201      	movs	r2, #1
 8007e86:	409a      	lsls	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007e8c:	bf00      	nop
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	58025408 	.word	0x58025408
 8007e9c:	5802541c 	.word	0x5802541c
 8007ea0:	58025430 	.word	0x58025430
 8007ea4:	58025444 	.word	0x58025444
 8007ea8:	58025458 	.word	0x58025458
 8007eac:	5802546c 	.word	0x5802546c
 8007eb0:	58025480 	.word	0x58025480
 8007eb4:	58025494 	.word	0x58025494
 8007eb8:	1600963f 	.word	0x1600963f
 8007ebc:	58025940 	.word	0x58025940
 8007ec0:	1000823f 	.word	0x1000823f
 8007ec4:	40020940 	.word	0x40020940

08007ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b089      	sub	sp, #36	@ 0x24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007ed6:	4b86      	ldr	r3, [pc, #536]	@ (80080f0 <HAL_GPIO_Init+0x228>)
 8007ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007eda:	e18c      	b.n	80081f6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee8:	4013      	ands	r3, r2
 8007eea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 817e 	beq.w	80081f0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f003 0303 	and.w	r3, r3, #3
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d005      	beq.n	8007f0c <HAL_GPIO_Init+0x44>
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f003 0303 	and.w	r3, r3, #3
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d130      	bne.n	8007f6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	2203      	movs	r2, #3
 8007f18:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1c:	43db      	mvns	r3, r3
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	4013      	ands	r3, r2
 8007f22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	68da      	ldr	r2, [r3, #12]
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f42:	2201      	movs	r2, #1
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4a:	43db      	mvns	r3, r3
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	4013      	ands	r3, r2
 8007f50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	091b      	lsrs	r3, r3, #4
 8007f58:	f003 0201 	and.w	r2, r3, #1
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f003 0303 	and.w	r3, r3, #3
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d017      	beq.n	8007faa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	005b      	lsls	r3, r3, #1
 8007f84:	2203      	movs	r2, #3
 8007f86:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8a:	43db      	mvns	r3, r3
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	4013      	ands	r3, r2
 8007f90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	689a      	ldr	r2, [r3, #8]
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d123      	bne.n	8007ffe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	08da      	lsrs	r2, r3, #3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3208      	adds	r2, #8
 8007fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	220f      	movs	r2, #15
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	43db      	mvns	r3, r3
 8007fd4:	69ba      	ldr	r2, [r7, #24]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	691a      	ldr	r2, [r3, #16]
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	f003 0307 	and.w	r3, r3, #7
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	08da      	lsrs	r2, r3, #3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	3208      	adds	r2, #8
 8007ff8:	69b9      	ldr	r1, [r7, #24]
 8007ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	2203      	movs	r2, #3
 800800a:	fa02 f303 	lsl.w	r3, r2, r3
 800800e:	43db      	mvns	r3, r3
 8008010:	69ba      	ldr	r2, [r7, #24]
 8008012:	4013      	ands	r3, r2
 8008014:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f003 0203 	and.w	r2, r3, #3
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	fa02 f303 	lsl.w	r3, r2, r3
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	4313      	orrs	r3, r2
 800802a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 80d8 	beq.w	80081f0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008040:	4b2c      	ldr	r3, [pc, #176]	@ (80080f4 <HAL_GPIO_Init+0x22c>)
 8008042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008046:	4a2b      	ldr	r2, [pc, #172]	@ (80080f4 <HAL_GPIO_Init+0x22c>)
 8008048:	f043 0302 	orr.w	r3, r3, #2
 800804c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008050:	4b28      	ldr	r3, [pc, #160]	@ (80080f4 <HAL_GPIO_Init+0x22c>)
 8008052:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800805e:	4a26      	ldr	r2, [pc, #152]	@ (80080f8 <HAL_GPIO_Init+0x230>)
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	089b      	lsrs	r3, r3, #2
 8008064:	3302      	adds	r3, #2
 8008066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800806a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	f003 0303 	and.w	r3, r3, #3
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	220f      	movs	r2, #15
 8008076:	fa02 f303 	lsl.w	r3, r2, r3
 800807a:	43db      	mvns	r3, r3
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	4013      	ands	r3, r2
 8008080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a1d      	ldr	r2, [pc, #116]	@ (80080fc <HAL_GPIO_Init+0x234>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d04a      	beq.n	8008120 <HAL_GPIO_Init+0x258>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a1c      	ldr	r2, [pc, #112]	@ (8008100 <HAL_GPIO_Init+0x238>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d02b      	beq.n	80080ea <HAL_GPIO_Init+0x222>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a1b      	ldr	r2, [pc, #108]	@ (8008104 <HAL_GPIO_Init+0x23c>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d025      	beq.n	80080e6 <HAL_GPIO_Init+0x21e>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a1a      	ldr	r2, [pc, #104]	@ (8008108 <HAL_GPIO_Init+0x240>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d01f      	beq.n	80080e2 <HAL_GPIO_Init+0x21a>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a19      	ldr	r2, [pc, #100]	@ (800810c <HAL_GPIO_Init+0x244>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d019      	beq.n	80080de <HAL_GPIO_Init+0x216>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a18      	ldr	r2, [pc, #96]	@ (8008110 <HAL_GPIO_Init+0x248>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d013      	beq.n	80080da <HAL_GPIO_Init+0x212>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a17      	ldr	r2, [pc, #92]	@ (8008114 <HAL_GPIO_Init+0x24c>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00d      	beq.n	80080d6 <HAL_GPIO_Init+0x20e>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a16      	ldr	r2, [pc, #88]	@ (8008118 <HAL_GPIO_Init+0x250>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d007      	beq.n	80080d2 <HAL_GPIO_Init+0x20a>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a15      	ldr	r2, [pc, #84]	@ (800811c <HAL_GPIO_Init+0x254>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d101      	bne.n	80080ce <HAL_GPIO_Init+0x206>
 80080ca:	2309      	movs	r3, #9
 80080cc:	e029      	b.n	8008122 <HAL_GPIO_Init+0x25a>
 80080ce:	230a      	movs	r3, #10
 80080d0:	e027      	b.n	8008122 <HAL_GPIO_Init+0x25a>
 80080d2:	2307      	movs	r3, #7
 80080d4:	e025      	b.n	8008122 <HAL_GPIO_Init+0x25a>
 80080d6:	2306      	movs	r3, #6
 80080d8:	e023      	b.n	8008122 <HAL_GPIO_Init+0x25a>
 80080da:	2305      	movs	r3, #5
 80080dc:	e021      	b.n	8008122 <HAL_GPIO_Init+0x25a>
 80080de:	2304      	movs	r3, #4
 80080e0:	e01f      	b.n	8008122 <HAL_GPIO_Init+0x25a>
 80080e2:	2303      	movs	r3, #3
 80080e4:	e01d      	b.n	8008122 <HAL_GPIO_Init+0x25a>
 80080e6:	2302      	movs	r3, #2
 80080e8:	e01b      	b.n	8008122 <HAL_GPIO_Init+0x25a>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e019      	b.n	8008122 <HAL_GPIO_Init+0x25a>
 80080ee:	bf00      	nop
 80080f0:	58000080 	.word	0x58000080
 80080f4:	58024400 	.word	0x58024400
 80080f8:	58000400 	.word	0x58000400
 80080fc:	58020000 	.word	0x58020000
 8008100:	58020400 	.word	0x58020400
 8008104:	58020800 	.word	0x58020800
 8008108:	58020c00 	.word	0x58020c00
 800810c:	58021000 	.word	0x58021000
 8008110:	58021400 	.word	0x58021400
 8008114:	58021800 	.word	0x58021800
 8008118:	58021c00 	.word	0x58021c00
 800811c:	58022400 	.word	0x58022400
 8008120:	2300      	movs	r3, #0
 8008122:	69fa      	ldr	r2, [r7, #28]
 8008124:	f002 0203 	and.w	r2, r2, #3
 8008128:	0092      	lsls	r2, r2, #2
 800812a:	4093      	lsls	r3, r2
 800812c:	69ba      	ldr	r2, [r7, #24]
 800812e:	4313      	orrs	r3, r2
 8008130:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008132:	4938      	ldr	r1, [pc, #224]	@ (8008214 <HAL_GPIO_Init+0x34c>)
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	089b      	lsrs	r3, r3, #2
 8008138:	3302      	adds	r3, #2
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	43db      	mvns	r3, r3
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	4013      	ands	r3, r2
 8008150:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	4313      	orrs	r3, r2
 8008164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008166:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800816e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	43db      	mvns	r3, r3
 800817a:	69ba      	ldr	r2, [r7, #24]
 800817c:	4013      	ands	r3, r2
 800817e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d003      	beq.n	8008194 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800818c:	69ba      	ldr	r2, [r7, #24]
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	4313      	orrs	r3, r2
 8008192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008194:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	43db      	mvns	r3, r3
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	4013      	ands	r3, r2
 80081aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	4313      	orrs	r3, r2
 80081be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	43db      	mvns	r3, r3
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	4013      	ands	r3, r2
 80081d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	3301      	adds	r3, #1
 80081f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	f47f ae6b 	bne.w	8007edc <HAL_GPIO_Init+0x14>
  }
}
 8008206:	bf00      	nop
 8008208:	bf00      	nop
 800820a:	3724      	adds	r7, #36	@ 0x24
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	58000400 	.word	0x58000400

08008218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	460b      	mov	r3, r1
 8008222:	807b      	strh	r3, [r7, #2]
 8008224:	4613      	mov	r3, r2
 8008226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008228:	787b      	ldrb	r3, [r7, #1]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800822e:	887a      	ldrh	r2, [r7, #2]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008234:	e003      	b.n	800823e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008236:	887b      	ldrh	r3, [r7, #2]
 8008238:	041a      	lsls	r2, r3, #16
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	619a      	str	r2, [r3, #24]
}
 800823e:	bf00      	nop
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800824a:	b480      	push	{r7}
 800824c:	b085      	sub	sp, #20
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800825c:	887a      	ldrh	r2, [r7, #2]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4013      	ands	r3, r2
 8008262:	041a      	lsls	r2, r3, #16
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	43d9      	mvns	r1, r3
 8008268:	887b      	ldrh	r3, [r7, #2]
 800826a:	400b      	ands	r3, r1
 800826c:	431a      	orrs	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	619a      	str	r2, [r3, #24]
}
 8008272:	bf00      	nop
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
	...

08008280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e08b      	b.n	80083aa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d106      	bne.n	80082ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7fa fa00 	bl	80026ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2224      	movs	r2, #36	@ 0x24
 80082b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 0201 	bic.w	r2, r2, #1
 80082c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80082d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	689a      	ldr	r2, [r3, #8]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d107      	bne.n	80082fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	689a      	ldr	r2, [r3, #8]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082f6:	609a      	str	r2, [r3, #8]
 80082f8:	e006      	b.n	8008308 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689a      	ldr	r2, [r3, #8]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008306:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	2b02      	cmp	r3, #2
 800830e:	d108      	bne.n	8008322 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800831e:	605a      	str	r2, [r3, #4]
 8008320:	e007      	b.n	8008332 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	685a      	ldr	r2, [r3, #4]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008330:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6859      	ldr	r1, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	4b1d      	ldr	r3, [pc, #116]	@ (80083b4 <HAL_I2C_Init+0x134>)
 800833e:	430b      	orrs	r3, r1
 8008340:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008350:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691a      	ldr	r2, [r3, #16]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	430a      	orrs	r2, r1
 800836a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	69d9      	ldr	r1, [r3, #28]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a1a      	ldr	r2, [r3, #32]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0201 	orr.w	r2, r2, #1
 800838a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2220      	movs	r2, #32
 8008396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	02008000 	.word	0x02008000

080083b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af02      	add	r7, sp, #8
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	607a      	str	r2, [r7, #4]
 80083c2:	461a      	mov	r2, r3
 80083c4:	460b      	mov	r3, r1
 80083c6:	817b      	strh	r3, [r7, #10]
 80083c8:	4613      	mov	r3, r2
 80083ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b20      	cmp	r3, #32
 80083d6:	f040 80fd 	bne.w	80085d4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d101      	bne.n	80083e8 <HAL_I2C_Master_Transmit+0x30>
 80083e4:	2302      	movs	r3, #2
 80083e6:	e0f6      	b.n	80085d6 <HAL_I2C_Master_Transmit+0x21e>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80083f0:	f7fd f88a 	bl	8005508 <HAL_GetTick>
 80083f4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	2319      	movs	r3, #25
 80083fc:	2201      	movs	r2, #1
 80083fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f001 f887 	bl	8009516 <I2C_WaitOnFlagUntilTimeout>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e0e1      	b.n	80085d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2221      	movs	r2, #33	@ 0x21
 8008416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2210      	movs	r2, #16
 800841e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	893a      	ldrh	r2, [r7, #8]
 8008432:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800843e:	b29b      	uxth	r3, r3
 8008440:	2bff      	cmp	r3, #255	@ 0xff
 8008442:	d906      	bls.n	8008452 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	22ff      	movs	r2, #255	@ 0xff
 8008448:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800844a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800844e:	617b      	str	r3, [r7, #20]
 8008450:	e007      	b.n	8008462 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008456:	b29a      	uxth	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800845c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008460:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008466:	2b00      	cmp	r3, #0
 8008468:	d024      	beq.n	80084b4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846e:	781a      	ldrb	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008484:	b29b      	uxth	r3, r3
 8008486:	3b01      	subs	r3, #1
 8008488:	b29a      	uxth	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008492:	3b01      	subs	r3, #1
 8008494:	b29a      	uxth	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	3301      	adds	r3, #1
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	8979      	ldrh	r1, [r7, #10]
 80084a6:	4b4e      	ldr	r3, [pc, #312]	@ (80085e0 <HAL_I2C_Master_Transmit+0x228>)
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f001 fa81 	bl	80099b4 <I2C_TransferConfig>
 80084b2:	e066      	b.n	8008582 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	8979      	ldrh	r1, [r7, #10]
 80084bc:	4b48      	ldr	r3, [pc, #288]	@ (80085e0 <HAL_I2C_Master_Transmit+0x228>)
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f001 fa76 	bl	80099b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80084c8:	e05b      	b.n	8008582 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	6a39      	ldr	r1, [r7, #32]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f001 f87a 	bl	80095c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e07b      	b.n	80085d6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e2:	781a      	ldrb	r2, [r3, #0]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	3b01      	subs	r3, #1
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008506:	3b01      	subs	r3, #1
 8008508:	b29a      	uxth	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008512:	b29b      	uxth	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d034      	beq.n	8008582 <HAL_I2C_Master_Transmit+0x1ca>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800851c:	2b00      	cmp	r3, #0
 800851e:	d130      	bne.n	8008582 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	2200      	movs	r2, #0
 8008528:	2180      	movs	r1, #128	@ 0x80
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 fff3 	bl	8009516 <I2C_WaitOnFlagUntilTimeout>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e04d      	b.n	80085d6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800853e:	b29b      	uxth	r3, r3
 8008540:	2bff      	cmp	r3, #255	@ 0xff
 8008542:	d90e      	bls.n	8008562 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	22ff      	movs	r2, #255	@ 0xff
 8008548:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800854e:	b2da      	uxtb	r2, r3
 8008550:	8979      	ldrh	r1, [r7, #10]
 8008552:	2300      	movs	r3, #0
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f001 fa2a 	bl	80099b4 <I2C_TransferConfig>
 8008560:	e00f      	b.n	8008582 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008566:	b29a      	uxth	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008570:	b2da      	uxtb	r2, r3
 8008572:	8979      	ldrh	r1, [r7, #10]
 8008574:	2300      	movs	r3, #0
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f001 fa19 	bl	80099b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008586:	b29b      	uxth	r3, r3
 8008588:	2b00      	cmp	r3, #0
 800858a:	d19e      	bne.n	80084ca <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	6a39      	ldr	r1, [r7, #32]
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f001 f860 	bl	8009656 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e01a      	b.n	80085d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2220      	movs	r2, #32
 80085a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6859      	ldr	r1, [r3, #4]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	4b0c      	ldr	r3, [pc, #48]	@ (80085e4 <HAL_I2C_Master_Transmit+0x22c>)
 80085b4:	400b      	ands	r3, r1
 80085b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	e000      	b.n	80085d6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80085d4:	2302      	movs	r3, #2
  }
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	80002000 	.word	0x80002000
 80085e4:	fe00e800 	.word	0xfe00e800

080085e8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	607a      	str	r2, [r7, #4]
 80085f2:	461a      	mov	r2, r3
 80085f4:	460b      	mov	r3, r1
 80085f6:	817b      	strh	r3, [r7, #10]
 80085f8:	4613      	mov	r3, r2
 80085fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b20      	cmp	r3, #32
 8008606:	f040 80db 	bne.w	80087c0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008610:	2b01      	cmp	r3, #1
 8008612:	d101      	bne.n	8008618 <HAL_I2C_Master_Receive+0x30>
 8008614:	2302      	movs	r3, #2
 8008616:	e0d4      	b.n	80087c2 <HAL_I2C_Master_Receive+0x1da>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008620:	f7fc ff72 	bl	8005508 <HAL_GetTick>
 8008624:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	2319      	movs	r3, #25
 800862c:	2201      	movs	r2, #1
 800862e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 ff6f 	bl	8009516 <I2C_WaitOnFlagUntilTimeout>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e0bf      	b.n	80087c2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2222      	movs	r2, #34	@ 0x22
 8008646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2210      	movs	r2, #16
 800864e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	893a      	ldrh	r2, [r7, #8]
 8008662:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800866e:	b29b      	uxth	r3, r3
 8008670:	2bff      	cmp	r3, #255	@ 0xff
 8008672:	d90e      	bls.n	8008692 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	22ff      	movs	r2, #255	@ 0xff
 8008678:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800867e:	b2da      	uxtb	r2, r3
 8008680:	8979      	ldrh	r1, [r7, #10]
 8008682:	4b52      	ldr	r3, [pc, #328]	@ (80087cc <HAL_I2C_Master_Receive+0x1e4>)
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f001 f992 	bl	80099b4 <I2C_TransferConfig>
 8008690:	e06d      	b.n	800876e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008696:	b29a      	uxth	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	8979      	ldrh	r1, [r7, #10]
 80086a4:	4b49      	ldr	r3, [pc, #292]	@ (80087cc <HAL_I2C_Master_Receive+0x1e4>)
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f001 f981 	bl	80099b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80086b2:	e05c      	b.n	800876e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	6a39      	ldr	r1, [r7, #32]
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f001 f80f 	bl	80096dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e07c      	b.n	80087c2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086da:	1c5a      	adds	r2, r3, #1
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086e4:	3b01      	subs	r3, #1
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	3b01      	subs	r3, #1
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086fe:	b29b      	uxth	r3, r3
 8008700:	2b00      	cmp	r3, #0
 8008702:	d034      	beq.n	800876e <HAL_I2C_Master_Receive+0x186>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008708:	2b00      	cmp	r3, #0
 800870a:	d130      	bne.n	800876e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	2200      	movs	r2, #0
 8008714:	2180      	movs	r1, #128	@ 0x80
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 fefd 	bl	8009516 <I2C_WaitOnFlagUntilTimeout>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e04d      	b.n	80087c2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800872a:	b29b      	uxth	r3, r3
 800872c:	2bff      	cmp	r3, #255	@ 0xff
 800872e:	d90e      	bls.n	800874e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	22ff      	movs	r2, #255	@ 0xff
 8008734:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800873a:	b2da      	uxtb	r2, r3
 800873c:	8979      	ldrh	r1, [r7, #10]
 800873e:	2300      	movs	r3, #0
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f001 f934 	bl	80099b4 <I2C_TransferConfig>
 800874c:	e00f      	b.n	800876e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008752:	b29a      	uxth	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800875c:	b2da      	uxtb	r2, r3
 800875e:	8979      	ldrh	r1, [r7, #10]
 8008760:	2300      	movs	r3, #0
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f001 f923 	bl	80099b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008772:	b29b      	uxth	r3, r3
 8008774:	2b00      	cmp	r3, #0
 8008776:	d19d      	bne.n	80086b4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	6a39      	ldr	r1, [r7, #32]
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 ff6a 	bl	8009656 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e01a      	b.n	80087c2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2220      	movs	r2, #32
 8008792:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6859      	ldr	r1, [r3, #4]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	4b0c      	ldr	r3, [pc, #48]	@ (80087d0 <HAL_I2C_Master_Receive+0x1e8>)
 80087a0:	400b      	ands	r3, r1
 80087a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2220      	movs	r2, #32
 80087a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	e000      	b.n	80087c2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80087c0:	2302      	movs	r3, #2
  }
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	80002400 	.word	0x80002400
 80087d0:	fe00e800 	.word	0xfe00e800

080087d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	68f9      	ldr	r1, [r7, #12]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	4798      	blx	r3
  }
}
 8008800:	bf00      	nop
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	0a1b      	lsrs	r3, r3, #8
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b00      	cmp	r3, #0
 800882a:	d010      	beq.n	800884e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	09db      	lsrs	r3, r3, #7
 8008830:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00a      	beq.n	800884e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800883c:	f043 0201 	orr.w	r2, r3, #1
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800884c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	0a9b      	lsrs	r3, r3, #10
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d010      	beq.n	800887c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	09db      	lsrs	r3, r3, #7
 800885e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00a      	beq.n	800887c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800886a:	f043 0208 	orr.w	r2, r3, #8
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800887a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	0a5b      	lsrs	r3, r3, #9
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d010      	beq.n	80088aa <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	09db      	lsrs	r3, r3, #7
 800888c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00a      	beq.n	80088aa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008898:	f043 0202 	orr.w	r2, r3, #2
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088a8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f003 030b 	and.w	r3, r3, #11
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d003      	beq.n	80088c2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80088ba:	68f9      	ldr	r1, [r7, #12]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fcd1 	bl	8009264 <I2C_ITError>
  }
}
 80088c2:	bf00      	nop
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80088d2:	bf00      	nop
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80088e6:	bf00      	nop
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	460b      	mov	r3, r1
 80088fc:	70fb      	strb	r3, [r7, #3]
 80088fe:	4613      	mov	r3, r2
 8008900:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008902:	bf00      	nop
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008916:	bf00      	nop
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008922:	b480      	push	{r7}
 8008924:	b083      	sub	sp, #12
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b086      	sub	sp, #24
 800893a:	af00      	add	r7, sp, #0
 800893c:	60f8      	str	r0, [r7, #12]
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008946:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008952:	2b01      	cmp	r3, #1
 8008954:	d101      	bne.n	800895a <I2C_Slave_ISR_IT+0x24>
 8008956:	2302      	movs	r3, #2
 8008958:	e0ed      	b.n	8008b36 <I2C_Slave_ISR_IT+0x200>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	095b      	lsrs	r3, r3, #5
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00a      	beq.n	8008984 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	095b      	lsrs	r3, r3, #5
 8008972:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008976:	2b00      	cmp	r3, #0
 8008978:	d004      	beq.n	8008984 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800897a:	6939      	ldr	r1, [r7, #16]
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 f9c1 	bl	8008d04 <I2C_ITSlaveCplt>
 8008982:	e0d3      	b.n	8008b2c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	091b      	lsrs	r3, r3, #4
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d04d      	beq.n	8008a2c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	091b      	lsrs	r3, r3, #4
 8008994:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008998:	2b00      	cmp	r3, #0
 800899a:	d047      	beq.n	8008a2c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d128      	bne.n	80089f8 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b28      	cmp	r3, #40	@ 0x28
 80089b0:	d108      	bne.n	80089c4 <I2C_Slave_ISR_IT+0x8e>
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089b8:	d104      	bne.n	80089c4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80089ba:	6939      	ldr	r1, [r7, #16]
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 fbfb 	bl	80091b8 <I2C_ITListenCplt>
 80089c2:	e032      	b.n	8008a2a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b29      	cmp	r3, #41	@ 0x29
 80089ce:	d10e      	bne.n	80089ee <I2C_Slave_ISR_IT+0xb8>
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80089d6:	d00a      	beq.n	80089ee <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2210      	movs	r2, #16
 80089de:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f000 fd56 	bl	8009492 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f000 f92d 	bl	8008c46 <I2C_ITSlaveSeqCplt>
 80089ec:	e01d      	b.n	8008a2a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2210      	movs	r2, #16
 80089f4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80089f6:	e096      	b.n	8008b26 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2210      	movs	r2, #16
 80089fe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a04:	f043 0204 	orr.w	r2, r3, #4
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d004      	beq.n	8008a1c <I2C_Slave_ISR_IT+0xe6>
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a18:	f040 8085 	bne.w	8008b26 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a20:	4619      	mov	r1, r3
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 fc1e 	bl	8009264 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008a28:	e07d      	b.n	8008b26 <I2C_Slave_ISR_IT+0x1f0>
 8008a2a:	e07c      	b.n	8008b26 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	089b      	lsrs	r3, r3, #2
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d030      	beq.n	8008a9a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	089b      	lsrs	r3, r3, #2
 8008a3c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d02a      	beq.n	8008a9a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d018      	beq.n	8008a80 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a58:	b2d2      	uxtb	r2, r2
 8008a5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d14f      	bne.n	8008b2a <I2C_Slave_ISR_IT+0x1f4>
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a90:	d04b      	beq.n	8008b2a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f000 f8d7 	bl	8008c46 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008a98:	e047      	b.n	8008b2a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	08db      	lsrs	r3, r3, #3
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00a      	beq.n	8008abc <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	08db      	lsrs	r3, r3, #3
 8008aaa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d004      	beq.n	8008abc <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008ab2:	6939      	ldr	r1, [r7, #16]
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 f842 	bl	8008b3e <I2C_ITAddrCplt>
 8008aba:	e037      	b.n	8008b2c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	085b      	lsrs	r3, r3, #1
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d031      	beq.n	8008b2c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	085b      	lsrs	r3, r3, #1
 8008acc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d02b      	beq.n	8008b2c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d018      	beq.n	8008b10 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae2:	781a      	ldrb	r2, [r3, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	3b01      	subs	r3, #1
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b06:	3b01      	subs	r3, #1
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008b0e:	e00d      	b.n	8008b2c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b16:	d002      	beq.n	8008b1e <I2C_Slave_ISR_IT+0x1e8>
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d106      	bne.n	8008b2c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 f891 	bl	8008c46 <I2C_ITSlaveSeqCplt>
 8008b24:	e002      	b.n	8008b2c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8008b26:	bf00      	nop
 8008b28:	e000      	b.n	8008b2c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8008b2a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3718      	adds	r7, #24
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008b54:	2b28      	cmp	r3, #40	@ 0x28
 8008b56:	d16a      	bne.n	8008c2e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	0c1b      	lsrs	r3, r3, #16
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	0c1b      	lsrs	r3, r3, #16
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008b76:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b84:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008b92:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d138      	bne.n	8008c0e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008b9c:	897b      	ldrh	r3, [r7, #10]
 8008b9e:	09db      	lsrs	r3, r3, #7
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	89bb      	ldrh	r3, [r7, #12]
 8008ba4:	4053      	eors	r3, r2
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	f003 0306 	and.w	r3, r3, #6
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d11c      	bne.n	8008bea <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008bb0:	897b      	ldrh	r3, [r7, #10]
 8008bb2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bb8:	1c5a      	adds	r2, r3, #1
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d13b      	bne.n	8008c3e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2208      	movs	r2, #8
 8008bd2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008bdc:	89ba      	ldrh	r2, [r7, #12]
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff fe85 	bl	80088f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008be8:	e029      	b.n	8008c3e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008bea:	893b      	ldrh	r3, [r7, #8]
 8008bec:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008bee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 ff10 	bl	8009a18 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008c00:	89ba      	ldrh	r2, [r7, #12]
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff fe73 	bl	80088f2 <HAL_I2C_AddrCallback>
}
 8008c0c:	e017      	b.n	8008c3e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008c0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 ff00 	bl	8009a18 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008c20:	89ba      	ldrh	r2, [r7, #12]
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
 8008c24:	4619      	mov	r1, r3
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff fe63 	bl	80088f2 <HAL_I2C_AddrCallback>
}
 8008c2c:	e007      	b.n	8008c3e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2208      	movs	r2, #8
 8008c34:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008c3e:	bf00      	nop
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	0b9b      	lsrs	r3, r3, #14
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d008      	beq.n	8008c7c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	e00d      	b.n	8008c98 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	0bdb      	lsrs	r3, r3, #15
 8008c80:	f003 0301 	and.w	r3, r3, #1
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d007      	beq.n	8008c98 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c96:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b29      	cmp	r3, #41	@ 0x29
 8008ca2:	d112      	bne.n	8008cca <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2228      	movs	r2, #40	@ 0x28
 8008ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2221      	movs	r2, #33	@ 0x21
 8008cb0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 feaf 	bl	8009a18 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff fe01 	bl	80088ca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008cc8:	e017      	b.n	8008cfa <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cd4:	d111      	bne.n	8008cfa <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2228      	movs	r2, #40	@ 0x28
 8008cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2222      	movs	r2, #34	@ 0x22
 8008ce2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008ce4:	2102      	movs	r1, #2
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fe96 	bl	8009a18 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff fdf2 	bl	80088de <HAL_I2C_SlaveRxCpltCallback>
}
 8008cfa:	bf00      	nop
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d26:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008d30:	7afb      	ldrb	r3, [r7, #11]
 8008d32:	2b21      	cmp	r3, #33	@ 0x21
 8008d34:	d002      	beq.n	8008d3c <I2C_ITSlaveCplt+0x38>
 8008d36:	7afb      	ldrb	r3, [r7, #11]
 8008d38:	2b29      	cmp	r3, #41	@ 0x29
 8008d3a:	d108      	bne.n	8008d4e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008d3c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fe69 	bl	8009a18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2221      	movs	r2, #33	@ 0x21
 8008d4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d4c:	e019      	b.n	8008d82 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008d4e:	7afb      	ldrb	r3, [r7, #11]
 8008d50:	2b22      	cmp	r3, #34	@ 0x22
 8008d52:	d002      	beq.n	8008d5a <I2C_ITSlaveCplt+0x56>
 8008d54:	7afb      	ldrb	r3, [r7, #11]
 8008d56:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d58:	d108      	bne.n	8008d6c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008d5a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fe5a 	bl	8009a18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2222      	movs	r2, #34	@ 0x22
 8008d68:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d6a:	e00a      	b.n	8008d82 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008d6c:	7afb      	ldrb	r3, [r7, #11]
 8008d6e:	2b28      	cmp	r3, #40	@ 0x28
 8008d70:	d107      	bne.n	8008d82 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008d72:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fe4e 	bl	8009a18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d90:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6859      	ldr	r1, [r3, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	4b80      	ldr	r3, [pc, #512]	@ (8008fa0 <I2C_ITSlaveCplt+0x29c>)
 8008d9e:	400b      	ands	r3, r1
 8008da0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fb75 	bl	8009492 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	0b9b      	lsrs	r3, r3, #14
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d07a      	beq.n	8008eaa <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008dc2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 8112 	beq.w	8008ff2 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a73      	ldr	r2, [pc, #460]	@ (8008fa4 <I2C_ITSlaveCplt+0x2a0>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d059      	beq.n	8008e8e <I2C_ITSlaveCplt+0x18a>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a71      	ldr	r2, [pc, #452]	@ (8008fa8 <I2C_ITSlaveCplt+0x2a4>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d053      	beq.n	8008e8e <I2C_ITSlaveCplt+0x18a>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a6f      	ldr	r2, [pc, #444]	@ (8008fac <I2C_ITSlaveCplt+0x2a8>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d04d      	beq.n	8008e8e <I2C_ITSlaveCplt+0x18a>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a6d      	ldr	r2, [pc, #436]	@ (8008fb0 <I2C_ITSlaveCplt+0x2ac>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d047      	beq.n	8008e8e <I2C_ITSlaveCplt+0x18a>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a6b      	ldr	r2, [pc, #428]	@ (8008fb4 <I2C_ITSlaveCplt+0x2b0>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d041      	beq.n	8008e8e <I2C_ITSlaveCplt+0x18a>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a69      	ldr	r2, [pc, #420]	@ (8008fb8 <I2C_ITSlaveCplt+0x2b4>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d03b      	beq.n	8008e8e <I2C_ITSlaveCplt+0x18a>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a67      	ldr	r2, [pc, #412]	@ (8008fbc <I2C_ITSlaveCplt+0x2b8>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d035      	beq.n	8008e8e <I2C_ITSlaveCplt+0x18a>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a65      	ldr	r2, [pc, #404]	@ (8008fc0 <I2C_ITSlaveCplt+0x2bc>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d02f      	beq.n	8008e8e <I2C_ITSlaveCplt+0x18a>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a63      	ldr	r2, [pc, #396]	@ (8008fc4 <I2C_ITSlaveCplt+0x2c0>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d029      	beq.n	8008e8e <I2C_ITSlaveCplt+0x18a>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a61      	ldr	r2, [pc, #388]	@ (8008fc8 <I2C_ITSlaveCplt+0x2c4>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d023      	beq.n	8008e8e <I2C_ITSlaveCplt+0x18a>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a5f      	ldr	r2, [pc, #380]	@ (8008fcc <I2C_ITSlaveCplt+0x2c8>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d01d      	beq.n	8008e8e <I2C_ITSlaveCplt+0x18a>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a5d      	ldr	r2, [pc, #372]	@ (8008fd0 <I2C_ITSlaveCplt+0x2cc>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d017      	beq.n	8008e8e <I2C_ITSlaveCplt+0x18a>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a5b      	ldr	r2, [pc, #364]	@ (8008fd4 <I2C_ITSlaveCplt+0x2d0>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d011      	beq.n	8008e8e <I2C_ITSlaveCplt+0x18a>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a59      	ldr	r2, [pc, #356]	@ (8008fd8 <I2C_ITSlaveCplt+0x2d4>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d00b      	beq.n	8008e8e <I2C_ITSlaveCplt+0x18a>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a57      	ldr	r2, [pc, #348]	@ (8008fdc <I2C_ITSlaveCplt+0x2d8>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d005      	beq.n	8008e8e <I2C_ITSlaveCplt+0x18a>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a55      	ldr	r2, [pc, #340]	@ (8008fe0 <I2C_ITSlaveCplt+0x2dc>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d105      	bne.n	8008e9a <I2C_ITSlaveCplt+0x196>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	e004      	b.n	8008ea4 <I2C_ITSlaveCplt+0x1a0>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8008ea8:	e0a3      	b.n	8008ff2 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	0bdb      	lsrs	r3, r3, #15
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 809d 	beq.w	8008ff2 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ec6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 8090 	beq.w	8008ff2 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a32      	ldr	r2, [pc, #200]	@ (8008fa4 <I2C_ITSlaveCplt+0x2a0>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d059      	beq.n	8008f92 <I2C_ITSlaveCplt+0x28e>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a30      	ldr	r2, [pc, #192]	@ (8008fa8 <I2C_ITSlaveCplt+0x2a4>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d053      	beq.n	8008f92 <I2C_ITSlaveCplt+0x28e>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8008fac <I2C_ITSlaveCplt+0x2a8>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d04d      	beq.n	8008f92 <I2C_ITSlaveCplt+0x28e>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a2c      	ldr	r2, [pc, #176]	@ (8008fb0 <I2C_ITSlaveCplt+0x2ac>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d047      	beq.n	8008f92 <I2C_ITSlaveCplt+0x28e>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a2a      	ldr	r2, [pc, #168]	@ (8008fb4 <I2C_ITSlaveCplt+0x2b0>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d041      	beq.n	8008f92 <I2C_ITSlaveCplt+0x28e>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a28      	ldr	r2, [pc, #160]	@ (8008fb8 <I2C_ITSlaveCplt+0x2b4>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d03b      	beq.n	8008f92 <I2C_ITSlaveCplt+0x28e>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a26      	ldr	r2, [pc, #152]	@ (8008fbc <I2C_ITSlaveCplt+0x2b8>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d035      	beq.n	8008f92 <I2C_ITSlaveCplt+0x28e>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a24      	ldr	r2, [pc, #144]	@ (8008fc0 <I2C_ITSlaveCplt+0x2bc>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d02f      	beq.n	8008f92 <I2C_ITSlaveCplt+0x28e>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a22      	ldr	r2, [pc, #136]	@ (8008fc4 <I2C_ITSlaveCplt+0x2c0>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d029      	beq.n	8008f92 <I2C_ITSlaveCplt+0x28e>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a20      	ldr	r2, [pc, #128]	@ (8008fc8 <I2C_ITSlaveCplt+0x2c4>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d023      	beq.n	8008f92 <I2C_ITSlaveCplt+0x28e>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a1e      	ldr	r2, [pc, #120]	@ (8008fcc <I2C_ITSlaveCplt+0x2c8>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d01d      	beq.n	8008f92 <I2C_ITSlaveCplt+0x28e>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8008fd0 <I2C_ITSlaveCplt+0x2cc>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d017      	beq.n	8008f92 <I2C_ITSlaveCplt+0x28e>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a1a      	ldr	r2, [pc, #104]	@ (8008fd4 <I2C_ITSlaveCplt+0x2d0>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d011      	beq.n	8008f92 <I2C_ITSlaveCplt+0x28e>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a18      	ldr	r2, [pc, #96]	@ (8008fd8 <I2C_ITSlaveCplt+0x2d4>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d00b      	beq.n	8008f92 <I2C_ITSlaveCplt+0x28e>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a16      	ldr	r2, [pc, #88]	@ (8008fdc <I2C_ITSlaveCplt+0x2d8>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d005      	beq.n	8008f92 <I2C_ITSlaveCplt+0x28e>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a14      	ldr	r2, [pc, #80]	@ (8008fe0 <I2C_ITSlaveCplt+0x2dc>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d128      	bne.n	8008fe4 <I2C_ITSlaveCplt+0x2e0>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	e027      	b.n	8008fee <I2C_ITSlaveCplt+0x2ea>
 8008f9e:	bf00      	nop
 8008fa0:	fe00e800 	.word	0xfe00e800
 8008fa4:	40020010 	.word	0x40020010
 8008fa8:	40020028 	.word	0x40020028
 8008fac:	40020040 	.word	0x40020040
 8008fb0:	40020058 	.word	0x40020058
 8008fb4:	40020070 	.word	0x40020070
 8008fb8:	40020088 	.word	0x40020088
 8008fbc:	400200a0 	.word	0x400200a0
 8008fc0:	400200b8 	.word	0x400200b8
 8008fc4:	40020410 	.word	0x40020410
 8008fc8:	40020428 	.word	0x40020428
 8008fcc:	40020440 	.word	0x40020440
 8008fd0:	40020458 	.word	0x40020458
 8008fd4:	40020470 	.word	0x40020470
 8008fd8:	40020488 	.word	0x40020488
 8008fdc:	400204a0 	.word	0x400204a0
 8008fe0:	400204b8 	.word	0x400204b8
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	089b      	lsrs	r3, r3, #2
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d020      	beq.n	8009040 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f023 0304 	bic.w	r3, r3, #4
 8009004:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009010:	b2d2      	uxtb	r2, r2
 8009012:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009018:	1c5a      	adds	r2, r3, #1
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00c      	beq.n	8009040 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800902a:	3b01      	subs	r3, #1
 800902c:	b29a      	uxth	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009036:	b29b      	uxth	r3, r3
 8009038:	3b01      	subs	r3, #1
 800903a:	b29a      	uxth	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009044:	b29b      	uxth	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	d005      	beq.n	8009056 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800904e:	f043 0204 	orr.w	r2, r3, #4
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	091b      	lsrs	r3, r3, #4
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d04a      	beq.n	80090f8 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	091b      	lsrs	r3, r3, #4
 8009066:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800906a:	2b00      	cmp	r3, #0
 800906c:	d044      	beq.n	80090f8 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009072:	b29b      	uxth	r3, r3
 8009074:	2b00      	cmp	r3, #0
 8009076:	d128      	bne.n	80090ca <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b28      	cmp	r3, #40	@ 0x28
 8009082:	d108      	bne.n	8009096 <I2C_ITSlaveCplt+0x392>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800908a:	d104      	bne.n	8009096 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800908c:	6979      	ldr	r1, [r7, #20]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f892 	bl	80091b8 <I2C_ITListenCplt>
 8009094:	e030      	b.n	80090f8 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800909c:	b2db      	uxtb	r3, r3
 800909e:	2b29      	cmp	r3, #41	@ 0x29
 80090a0:	d10e      	bne.n	80090c0 <I2C_ITSlaveCplt+0x3bc>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80090a8:	d00a      	beq.n	80090c0 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2210      	movs	r2, #16
 80090b0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f9ed 	bl	8009492 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7ff fdc4 	bl	8008c46 <I2C_ITSlaveSeqCplt>
 80090be:	e01b      	b.n	80090f8 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2210      	movs	r2, #16
 80090c6:	61da      	str	r2, [r3, #28]
 80090c8:	e016      	b.n	80090f8 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2210      	movs	r2, #16
 80090d0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090d6:	f043 0204 	orr.w	r2, r3, #4
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <I2C_ITSlaveCplt+0x3e8>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090ea:	d105      	bne.n	80090f8 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f8b6 	bl	8009264 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800910a:	2b00      	cmp	r3, #0
 800910c:	d010      	beq.n	8009130 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009112:	4619      	mov	r1, r3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f8a5 	bl	8009264 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b28      	cmp	r3, #40	@ 0x28
 8009124:	d141      	bne.n	80091aa <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009126:	6979      	ldr	r1, [r7, #20]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f845 	bl	80091b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800912e:	e03c      	b.n	80091aa <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009134:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009138:	d014      	beq.n	8009164 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7ff fd83 	bl	8008c46 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a1c      	ldr	r2, [pc, #112]	@ (80091b4 <I2C_ITSlaveCplt+0x4b0>)
 8009144:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2220      	movs	r2, #32
 800914a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff fbd6 	bl	800890e <HAL_I2C_ListenCpltCallback>
}
 8009162:	e022      	b.n	80091aa <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b22      	cmp	r3, #34	@ 0x22
 800916e:	d10e      	bne.n	800918e <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2220      	movs	r2, #32
 8009174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff fba9 	bl	80088de <HAL_I2C_SlaveRxCpltCallback>
}
 800918c:	e00d      	b.n	80091aa <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2220      	movs	r2, #32
 8009192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff fb90 	bl	80088ca <HAL_I2C_SlaveTxCpltCallback>
}
 80091aa:	bf00      	nop
 80091ac:	3718      	adds	r7, #24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	ffff0000 	.word	0xffff0000

080091b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a26      	ldr	r2, [pc, #152]	@ (8009260 <I2C_ITListenCplt+0xa8>)
 80091c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2220      	movs	r2, #32
 80091d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	089b      	lsrs	r3, r3, #2
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d022      	beq.n	8009236 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091fa:	b2d2      	uxtb	r2, r2
 80091fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009202:	1c5a      	adds	r2, r3, #1
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800920c:	2b00      	cmp	r3, #0
 800920e:	d012      	beq.n	8009236 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009214:	3b01      	subs	r3, #1
 8009216:	b29a      	uxth	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009220:	b29b      	uxth	r3, r3
 8009222:	3b01      	subs	r3, #1
 8009224:	b29a      	uxth	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800922e:	f043 0204 	orr.w	r2, r3, #4
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009236:	f248 0103 	movw	r1, #32771	@ 0x8003
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fbec 	bl	8009a18 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2210      	movs	r2, #16
 8009246:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff fb5c 	bl	800890e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009256:	bf00      	nop
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	ffff0000 	.word	0xffff0000

08009264 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009274:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a6d      	ldr	r2, [pc, #436]	@ (8009438 <I2C_ITError+0x1d4>)
 8009282:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	431a      	orrs	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009296:	7bfb      	ldrb	r3, [r7, #15]
 8009298:	2b28      	cmp	r3, #40	@ 0x28
 800929a:	d005      	beq.n	80092a8 <I2C_ITError+0x44>
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	2b29      	cmp	r3, #41	@ 0x29
 80092a0:	d002      	beq.n	80092a8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
 80092a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80092a6:	d10b      	bne.n	80092c0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80092a8:	2103      	movs	r1, #3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fbb4 	bl	8009a18 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2228      	movs	r2, #40	@ 0x28
 80092b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a60      	ldr	r2, [pc, #384]	@ (800943c <I2C_ITError+0x1d8>)
 80092bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80092be:	e030      	b.n	8009322 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80092c0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fba7 	bl	8009a18 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f8e1 	bl	8009492 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b60      	cmp	r3, #96	@ 0x60
 80092da:	d01f      	beq.n	800931c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2220      	movs	r2, #32
 80092e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	f003 0320 	and.w	r3, r3, #32
 80092ee:	2b20      	cmp	r3, #32
 80092f0:	d114      	bne.n	800931c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	f003 0310 	and.w	r3, r3, #16
 80092fc:	2b10      	cmp	r3, #16
 80092fe:	d109      	bne.n	8009314 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2210      	movs	r2, #16
 8009306:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800930c:	f043 0204 	orr.w	r2, r3, #4
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2220      	movs	r2, #32
 800931a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009326:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932c:	2b00      	cmp	r3, #0
 800932e:	d039      	beq.n	80093a4 <I2C_ITError+0x140>
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2b11      	cmp	r3, #17
 8009334:	d002      	beq.n	800933c <I2C_ITError+0xd8>
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2b21      	cmp	r3, #33	@ 0x21
 800933a:	d133      	bne.n	80093a4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009346:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800934a:	d107      	bne.n	800935c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800935a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe f9bb 	bl	80076dc <HAL_DMA_GetState>
 8009366:	4603      	mov	r3, r0
 8009368:	2b01      	cmp	r3, #1
 800936a:	d017      	beq.n	800939c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009370:	4a33      	ldr	r2, [pc, #204]	@ (8009440 <I2C_ITError+0x1dc>)
 8009372:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009380:	4618      	mov	r0, r3
 8009382:	f7fd f83b 	bl	80063fc <HAL_DMA_Abort_IT>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d04d      	beq.n	8009428 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009396:	4610      	mov	r0, r2
 8009398:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800939a:	e045      	b.n	8009428 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f851 	bl	8009444 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80093a2:	e041      	b.n	8009428 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d039      	beq.n	8009420 <I2C_ITError+0x1bc>
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2b12      	cmp	r3, #18
 80093b0:	d002      	beq.n	80093b8 <I2C_ITError+0x154>
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	2b22      	cmp	r3, #34	@ 0x22
 80093b6:	d133      	bne.n	8009420 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093c6:	d107      	bne.n	80093d8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80093d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fe f97d 	bl	80076dc <HAL_DMA_GetState>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d017      	beq.n	8009418 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ec:	4a14      	ldr	r2, [pc, #80]	@ (8009440 <I2C_ITError+0x1dc>)
 80093ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fc fffd 	bl	80063fc <HAL_DMA_Abort_IT>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d011      	beq.n	800942c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800940c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009412:	4610      	mov	r0, r2
 8009414:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009416:	e009      	b.n	800942c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f813 	bl	8009444 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800941e:	e005      	b.n	800942c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f80f 	bl	8009444 <I2C_TreatErrorCallback>
  }
}
 8009426:	e002      	b.n	800942e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009428:	bf00      	nop
 800942a:	e000      	b.n	800942e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800942c:	bf00      	nop
}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	ffff0000 	.word	0xffff0000
 800943c:	08008937 	.word	0x08008937
 8009440:	080094db 	.word	0x080094db

08009444 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b60      	cmp	r3, #96	@ 0x60
 8009456:	d10e      	bne.n	8009476 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2220      	movs	r2, #32
 800945c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7ff fa57 	bl	8008922 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009474:	e009      	b.n	800948a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7f9 fae5 	bl	8002a54 <HAL_I2C_ErrorCallback>
}
 800948a:	bf00      	nop
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d103      	bne.n	80094b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2200      	movs	r2, #0
 80094ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d007      	beq.n	80094ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	699a      	ldr	r2, [r3, #24]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f042 0201 	orr.w	r2, r2, #1
 80094cc:	619a      	str	r2, [r3, #24]
  }
}
 80094ce:	bf00      	nop
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr

080094da <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d003      	beq.n	80094f8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f4:	2200      	movs	r2, #0
 80094f6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d003      	beq.n	8009508 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009504:	2200      	movs	r2, #0
 8009506:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7ff ff9b 	bl	8009444 <I2C_TreatErrorCallback>
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b084      	sub	sp, #16
 800951a:	af00      	add	r7, sp, #0
 800951c:	60f8      	str	r0, [r7, #12]
 800951e:	60b9      	str	r1, [r7, #8]
 8009520:	603b      	str	r3, [r7, #0]
 8009522:	4613      	mov	r3, r2
 8009524:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009526:	e03b      	b.n	80095a0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 f961 	bl	80097f4 <I2C_IsErrorOccurred>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e041      	b.n	80095c0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009542:	d02d      	beq.n	80095a0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009544:	f7fb ffe0 	bl	8005508 <HAL_GetTick>
 8009548:	4602      	mov	r2, r0
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	429a      	cmp	r2, r3
 8009552:	d302      	bcc.n	800955a <I2C_WaitOnFlagUntilTimeout+0x44>
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d122      	bne.n	80095a0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	699a      	ldr	r2, [r3, #24]
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	4013      	ands	r3, r2
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	429a      	cmp	r2, r3
 8009568:	bf0c      	ite	eq
 800956a:	2301      	moveq	r3, #1
 800956c:	2300      	movne	r3, #0
 800956e:	b2db      	uxtb	r3, r3
 8009570:	461a      	mov	r2, r3
 8009572:	79fb      	ldrb	r3, [r7, #7]
 8009574:	429a      	cmp	r2, r3
 8009576:	d113      	bne.n	80095a0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800957c:	f043 0220 	orr.w	r2, r3, #32
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2220      	movs	r2, #32
 8009588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e00f      	b.n	80095c0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	699a      	ldr	r2, [r3, #24]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	4013      	ands	r3, r2
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	bf0c      	ite	eq
 80095b0:	2301      	moveq	r3, #1
 80095b2:	2300      	movne	r3, #0
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	461a      	mov	r2, r3
 80095b8:	79fb      	ldrb	r3, [r7, #7]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d0b4      	beq.n	8009528 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80095d4:	e033      	b.n	800963e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	68b9      	ldr	r1, [r7, #8]
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f000 f90a 	bl	80097f4 <I2C_IsErrorOccurred>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e031      	b.n	800964e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095f0:	d025      	beq.n	800963e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095f2:	f7fb ff89 	bl	8005508 <HAL_GetTick>
 80095f6:	4602      	mov	r2, r0
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d302      	bcc.n	8009608 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d11a      	bne.n	800963e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	699b      	ldr	r3, [r3, #24]
 800960e:	f003 0302 	and.w	r3, r3, #2
 8009612:	2b02      	cmp	r3, #2
 8009614:	d013      	beq.n	800963e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800961a:	f043 0220 	orr.w	r2, r3, #32
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2220      	movs	r2, #32
 8009626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e007      	b.n	800964e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	f003 0302 	and.w	r3, r3, #2
 8009648:	2b02      	cmp	r3, #2
 800964a:	d1c4      	bne.n	80095d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009662:	e02f      	b.n	80096c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	68b9      	ldr	r1, [r7, #8]
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 f8c3 	bl	80097f4 <I2C_IsErrorOccurred>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e02d      	b.n	80096d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009678:	f7fb ff46 	bl	8005508 <HAL_GetTick>
 800967c:	4602      	mov	r2, r0
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	429a      	cmp	r2, r3
 8009686:	d302      	bcc.n	800968e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d11a      	bne.n	80096c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	f003 0320 	and.w	r3, r3, #32
 8009698:	2b20      	cmp	r3, #32
 800969a:	d013      	beq.n	80096c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096a0:	f043 0220 	orr.w	r2, r3, #32
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e007      	b.n	80096d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	f003 0320 	and.w	r3, r3, #32
 80096ce:	2b20      	cmp	r3, #32
 80096d0:	d1c8      	bne.n	8009664 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80096ec:	e071      	b.n	80097d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	68b9      	ldr	r1, [r7, #8]
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f000 f87e 	bl	80097f4 <I2C_IsErrorOccurred>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	f003 0320 	and.w	r3, r3, #32
 800970c:	2b20      	cmp	r3, #32
 800970e:	d13b      	bne.n	8009788 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d138      	bne.n	8009788 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	f003 0304 	and.w	r3, r3, #4
 8009720:	2b04      	cmp	r3, #4
 8009722:	d105      	bne.n	8009730 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	f003 0310 	and.w	r3, r3, #16
 800973a:	2b10      	cmp	r3, #16
 800973c:	d121      	bne.n	8009782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2210      	movs	r2, #16
 8009744:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2204      	movs	r2, #4
 800974a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2220      	movs	r2, #32
 8009752:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6859      	ldr	r1, [r3, #4]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	4b24      	ldr	r3, [pc, #144]	@ (80097f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009760:	400b      	ands	r3, r1
 8009762:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2220      	movs	r2, #32
 8009768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	75fb      	strb	r3, [r7, #23]
 8009780:	e002      	b.n	8009788 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009788:	f7fb febe 	bl	8005508 <HAL_GetTick>
 800978c:	4602      	mov	r2, r0
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	429a      	cmp	r2, r3
 8009796:	d302      	bcc.n	800979e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d119      	bne.n	80097d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d116      	bne.n	80097d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	f003 0304 	and.w	r3, r3, #4
 80097ae:	2b04      	cmp	r3, #4
 80097b0:	d00f      	beq.n	80097d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097b6:	f043 0220 	orr.w	r2, r3, #32
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2220      	movs	r2, #32
 80097c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b04      	cmp	r3, #4
 80097de:	d002      	beq.n	80097e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d083      	beq.n	80096ee <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80097e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3718      	adds	r7, #24
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	fe00e800 	.word	0xfe00e800

080097f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b08a      	sub	sp, #40	@ 0x28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	f003 0310 	and.w	r3, r3, #16
 800981c:	2b00      	cmp	r3, #0
 800981e:	d068      	beq.n	80098f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2210      	movs	r2, #16
 8009826:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009828:	e049      	b.n	80098be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009830:	d045      	beq.n	80098be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009832:	f7fb fe69 	bl	8005508 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	429a      	cmp	r2, r3
 8009840:	d302      	bcc.n	8009848 <I2C_IsErrorOccurred+0x54>
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d13a      	bne.n	80098be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009852:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800985a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009866:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800986a:	d121      	bne.n	80098b0 <I2C_IsErrorOccurred+0xbc>
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009872:	d01d      	beq.n	80098b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009874:	7cfb      	ldrb	r3, [r7, #19]
 8009876:	2b20      	cmp	r3, #32
 8009878:	d01a      	beq.n	80098b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009888:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800988a:	f7fb fe3d 	bl	8005508 <HAL_GetTick>
 800988e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009890:	e00e      	b.n	80098b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009892:	f7fb fe39 	bl	8005508 <HAL_GetTick>
 8009896:	4602      	mov	r2, r0
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	2b19      	cmp	r3, #25
 800989e:	d907      	bls.n	80098b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80098a0:	6a3b      	ldr	r3, [r7, #32]
 80098a2:	f043 0320 	orr.w	r3, r3, #32
 80098a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80098ae:	e006      	b.n	80098be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	f003 0320 	and.w	r3, r3, #32
 80098ba:	2b20      	cmp	r3, #32
 80098bc:	d1e9      	bne.n	8009892 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	f003 0320 	and.w	r3, r3, #32
 80098c8:	2b20      	cmp	r3, #32
 80098ca:	d003      	beq.n	80098d4 <I2C_IsErrorOccurred+0xe0>
 80098cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d0aa      	beq.n	800982a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80098d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d103      	bne.n	80098e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2220      	movs	r2, #32
 80098e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	f043 0304 	orr.w	r3, r3, #4
 80098ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00b      	beq.n	800991c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	f043 0301 	orr.w	r3, r3, #1
 800990a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009914:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00b      	beq.n	800993e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	f043 0308 	orr.w	r3, r3, #8
 800992c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009936:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00b      	beq.n	8009960 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	f043 0302 	orr.w	r3, r3, #2
 800994e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009958:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009964:	2b00      	cmp	r3, #0
 8009966:	d01c      	beq.n	80099a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f7ff fd92 	bl	8009492 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6859      	ldr	r1, [r3, #4]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	4b0d      	ldr	r3, [pc, #52]	@ (80099b0 <I2C_IsErrorOccurred+0x1bc>)
 800997a:	400b      	ands	r3, r1
 800997c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009982:	6a3b      	ldr	r3, [r7, #32]
 8009984:	431a      	orrs	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2220      	movs	r2, #32
 800998e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80099a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3728      	adds	r7, #40	@ 0x28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	fe00e800 	.word	0xfe00e800

080099b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b087      	sub	sp, #28
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	607b      	str	r3, [r7, #4]
 80099be:	460b      	mov	r3, r1
 80099c0:	817b      	strh	r3, [r7, #10]
 80099c2:	4613      	mov	r3, r2
 80099c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099c6:	897b      	ldrh	r3, [r7, #10]
 80099c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80099cc:	7a7b      	ldrb	r3, [r7, #9]
 80099ce:	041b      	lsls	r3, r3, #16
 80099d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099d4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	4313      	orrs	r3, r2
 80099de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80099e2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	685a      	ldr	r2, [r3, #4]
 80099ea:	6a3b      	ldr	r3, [r7, #32]
 80099ec:	0d5b      	lsrs	r3, r3, #21
 80099ee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80099f2:	4b08      	ldr	r3, [pc, #32]	@ (8009a14 <I2C_TransferConfig+0x60>)
 80099f4:	430b      	orrs	r3, r1
 80099f6:	43db      	mvns	r3, r3
 80099f8:	ea02 0103 	and.w	r1, r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	697a      	ldr	r2, [r7, #20]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009a06:	bf00      	nop
 8009a08:	371c      	adds	r7, #28
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	03ff63ff 	.word	0x03ff63ff

08009a18 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	460b      	mov	r3, r1
 8009a22:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009a24:	2300      	movs	r3, #0
 8009a26:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009a28:	887b      	ldrh	r3, [r7, #2]
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00f      	beq.n	8009a52 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009a38:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009a46:	2b28      	cmp	r3, #40	@ 0x28
 8009a48:	d003      	beq.n	8009a52 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009a50:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009a52:	887b      	ldrh	r3, [r7, #2]
 8009a54:	f003 0302 	and.w	r3, r3, #2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00f      	beq.n	8009a7c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009a62:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009a70:	2b28      	cmp	r3, #40	@ 0x28
 8009a72:	d003      	beq.n	8009a7c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009a7a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009a7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	da03      	bge.n	8009a8c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009a8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009a8c:	887b      	ldrh	r3, [r7, #2]
 8009a8e:	2b10      	cmp	r3, #16
 8009a90:	d103      	bne.n	8009a9a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009a98:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009a9a:	887b      	ldrh	r3, [r7, #2]
 8009a9c:	2b20      	cmp	r3, #32
 8009a9e:	d103      	bne.n	8009aa8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f043 0320 	orr.w	r3, r3, #32
 8009aa6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009aa8:	887b      	ldrh	r3, [r7, #2]
 8009aaa:	2b40      	cmp	r3, #64	@ 0x40
 8009aac:	d103      	bne.n	8009ab6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ab4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6819      	ldr	r1, [r3, #0]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	43da      	mvns	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	400a      	ands	r2, r1
 8009ac6:	601a      	str	r2, [r3, #0]
}
 8009ac8:	bf00      	nop
 8009aca:	3714      	adds	r7, #20
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b20      	cmp	r3, #32
 8009ae8:	d138      	bne.n	8009b5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d101      	bne.n	8009af8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009af4:	2302      	movs	r3, #2
 8009af6:	e032      	b.n	8009b5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2224      	movs	r2, #36	@ 0x24
 8009b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f022 0201 	bic.w	r2, r2, #1
 8009b16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009b26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	6819      	ldr	r1, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	430a      	orrs	r2, r1
 8009b36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f042 0201 	orr.w	r2, r2, #1
 8009b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2220      	movs	r2, #32
 8009b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	e000      	b.n	8009b5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b5c:	2302      	movs	r3, #2
  }
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b085      	sub	sp, #20
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
 8009b72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b20      	cmp	r3, #32
 8009b7e:	d139      	bne.n	8009bf4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d101      	bne.n	8009b8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	e033      	b.n	8009bf6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2224      	movs	r2, #36	@ 0x24
 8009b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f022 0201 	bic.w	r2, r2, #1
 8009bac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009bbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	021b      	lsls	r3, r3, #8
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f042 0201 	orr.w	r2, r2, #1
 8009bde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2220      	movs	r2, #32
 8009be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	e000      	b.n	8009bf6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009bf4:	2302      	movs	r3, #2
  }
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
	...

08009c04 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af02      	add	r7, sp, #8
 8009c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8009c10:	f7fb fc7a 	bl	8005508 <HAL_GetTick>
 8009c14:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d102      	bne.n	8009c22 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	73fb      	strb	r3, [r7, #15]
 8009c20:	e0a5      	b.n	8009d6e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f040 809e 	bne.w	8009d6e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7f9 fb64 	bl	8003300 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8009c38:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fa40 	bl	800a0c2 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	4b4b      	ldr	r3, [pc, #300]	@ (8009d78 <HAL_OSPI_Init+0x174>)
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	68d1      	ldr	r1, [r2, #12]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	6912      	ldr	r2, [r2, #16]
 8009c54:	3a01      	subs	r2, #1
 8009c56:	0412      	lsls	r2, r2, #16
 8009c58:	4311      	orrs	r1, r2
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	6952      	ldr	r2, [r2, #20]
 8009c5e:	3a01      	subs	r2, #1
 8009c60:	0212      	lsls	r2, r2, #8
 8009c62:	4311      	orrs	r1, r2
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009c68:	4311      	orrs	r1, r2
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	69d2      	ldr	r2, [r2, #28]
 8009c6e:	4311      	orrs	r1, r2
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	6812      	ldr	r2, [r2, #0]
 8009c74:	430b      	orrs	r3, r1
 8009c76:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a1a      	ldr	r2, [r3, #32]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	430a      	orrs	r2, r1
 8009c8c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c92:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009ca8:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	021a      	lsls	r2, r3, #8
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2120      	movs	r1, #32
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fef1 	bl	800aab8 <OSPI_WaitFlagStateUntilTimeout>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d146      	bne.n	8009d6e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cee:	1e5a      	subs	r2, r3, #1
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	430a      	orrs	r2, r1
 8009cf6:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	689a      	ldr	r2, [r3, #8]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009d16:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d22:	431a      	orrs	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	430a      	orrs	r2, r1
 8009d2a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f042 0201 	orr.w	r2, r2, #1
 8009d3c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d107      	bne.n	8009d56 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	689a      	ldr	r2, [r3, #8]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f042 0202 	orr.w	r2, r2, #2
 8009d54:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d5e:	d103      	bne.n	8009d68 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d66:	e002      	b.n	8009d6e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2202      	movs	r2, #2
 8009d6c:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8009d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	f8e0f8f4 	.word	0xf8e0f8f4

08009d7c <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b08a      	sub	sp, #40	@ 0x28
 8009d80:	af02      	add	r7, sp, #8
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8009d88:	f7fb fbbe 	bl	8005508 <HAL_GetTick>
 8009d8c:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d92:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d98:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d104      	bne.n	8009daa <HAL_OSPI_Command+0x2e>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009da8:	d115      	bne.n	8009dd6 <HAL_OSPI_Command+0x5a>
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	2b14      	cmp	r3, #20
 8009dae:	d107      	bne.n	8009dc0 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d00e      	beq.n	8009dd6 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b03      	cmp	r3, #3
 8009dbe:	d00a      	beq.n	8009dd6 <HAL_OSPI_Command+0x5a>
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	2b24      	cmp	r3, #36	@ 0x24
 8009dc4:	d15b      	bne.n	8009e7e <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d003      	beq.n	8009dd6 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8009dd2:	2b03      	cmp	r3, #3
 8009dd4:	d153      	bne.n	8009e7e <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2120      	movs	r1, #32
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f000 fe69 	bl	800aab8 <OSPI_WaitFlagStateUntilTimeout>
 8009de6:	4603      	mov	r3, r0
 8009de8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8009dea:	7ffb      	ldrb	r3, [r7, #31]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d14c      	bne.n	8009e8a <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8009df6:	68b9      	ldr	r1, [r7, #8]
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 fe95 	bl	800ab28 <OSPI_ConfigCmd>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8009e02:	7ffb      	ldrb	r3, [r7, #31]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d140      	bne.n	8009e8a <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10e      	bne.n	8009e2e <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	2201      	movs	r2, #1
 8009e18:	2102      	movs	r1, #2
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f000 fe4c 	bl	800aab8 <OSPI_WaitFlagStateUntilTimeout>
 8009e20:	4603      	mov	r3, r0
 8009e22:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2202      	movs	r2, #2
 8009e2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8009e2c:	e02d      	b.n	8009e8a <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d103      	bne.n	8009e3e <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2204      	movs	r2, #4
 8009e3a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8009e3c:	e025      	b.n	8009e8a <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d10b      	bne.n	8009e5e <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e4a:	2b24      	cmp	r3, #36	@ 0x24
 8009e4c:	d103      	bne.n	8009e56 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2204      	movs	r2, #4
 8009e52:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8009e54:	e019      	b.n	8009e8a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2214      	movs	r2, #20
 8009e5a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8009e5c:	e015      	b.n	8009e8a <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d111      	bne.n	8009e8a <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e6a:	2b14      	cmp	r3, #20
 8009e6c:	d103      	bne.n	8009e76 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2204      	movs	r2, #4
 8009e72:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8009e74:	e009      	b.n	8009e8a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2224      	movs	r2, #36	@ 0x24
 8009e7a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8009e7c:	e005      	b.n	8009e8a <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2210      	movs	r2, #16
 8009e86:	655a      	str	r2, [r3, #84]	@ 0x54
 8009e88:	e000      	b.n	8009e8c <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8009e8a:	bf00      	nop
  }

  /* Return function status */
  return status;
 8009e8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3720      	adds	r7, #32
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b08a      	sub	sp, #40	@ 0x28
 8009e9a:	af02      	add	r7, sp, #8
 8009e9c:	60f8      	str	r0, [r7, #12]
 8009e9e:	60b9      	str	r1, [r7, #8]
 8009ea0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009ea2:	f7fb fb31 	bl	8005508 <HAL_GetTick>
 8009ea6:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3350      	adds	r3, #80	@ 0x50
 8009eae:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d105      	bne.n	8009ec2 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2208      	movs	r2, #8
 8009ebe:	655a      	str	r2, [r3, #84]	@ 0x54
 8009ec0:	e057      	b.n	8009f72 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ec6:	2b04      	cmp	r3, #4
 8009ec8:	d14e      	bne.n	8009f68 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed0:	1c5a      	adds	r2, r3, #1
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009ef2:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	2201      	movs	r2, #1
 8009efc:	2104      	movs	r1, #4
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f000 fdda 	bl	800aab8 <OSPI_WaitFlagStateUntilTimeout>
 8009f04:	4603      	mov	r3, r0
 8009f06:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8009f08:	7ffb      	ldrb	r3, [r7, #31]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d113      	bne.n	8009f36 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f12:	781a      	ldrb	r2, [r3, #0]
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f1c:	1c5a      	adds	r2, r3, #1
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f26:	1e5a      	subs	r2, r3, #1
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1df      	bne.n	8009ef4 <HAL_OSPI_Transmit+0x5e>
 8009f34:	e000      	b.n	8009f38 <HAL_OSPI_Transmit+0xa2>
          break;
 8009f36:	bf00      	nop

      if (status == HAL_OK)
 8009f38:	7ffb      	ldrb	r3, [r7, #31]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d119      	bne.n	8009f72 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	2201      	movs	r2, #1
 8009f46:	2102      	movs	r1, #2
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f000 fdb5 	bl	800aab8 <OSPI_WaitFlagStateUntilTimeout>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8009f52:	7ffb      	ldrb	r3, [r7, #31]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10c      	bne.n	8009f72 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2202      	movs	r2, #2
 8009f64:	651a      	str	r2, [r3, #80]	@ 0x50
 8009f66:	e004      	b.n	8009f72 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2210      	movs	r2, #16
 8009f70:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8009f72:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3720      	adds	r7, #32
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08c      	sub	sp, #48	@ 0x30
 8009f80:	af02      	add	r7, sp, #8
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009f88:	f7fb fabe 	bl	8005508 <HAL_GetTick>
 8009f8c:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3350      	adds	r3, #80	@ 0x50
 8009f94:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f9c:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8009fa6:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d106      	bne.n	8009fbc <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2208      	movs	r2, #8
 8009fb8:	655a      	str	r2, [r3, #84]	@ 0x54
 8009fba:	e07c      	b.n	800a0b6 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fc0:	2b04      	cmp	r3, #4
 8009fc2:	d172      	bne.n	800a0aa <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009ff0:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ffa:	d104      	bne.n	800a006 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	69ba      	ldr	r2, [r7, #24]
 800a002:	649a      	str	r2, [r3, #72]	@ 0x48
 800a004:	e011      	b.n	800a02a <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800a00e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a012:	2b00      	cmp	r3, #0
 800a014:	d004      	beq.n	800a020 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	69ba      	ldr	r2, [r7, #24]
 800a01c:	649a      	str	r2, [r3, #72]	@ 0x48
 800a01e:	e004      	b.n	800a02a <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	2201      	movs	r2, #1
 800a032:	2106      	movs	r1, #6
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f000 fd3f 	bl	800aab8 <OSPI_WaitFlagStateUntilTimeout>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800a040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a044:	2b00      	cmp	r3, #0
 800a046:	d114      	bne.n	800a072 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a04c:	69fa      	ldr	r2, [r7, #28]
 800a04e:	7812      	ldrb	r2, [r2, #0]
 800a050:	b2d2      	uxtb	r2, r2
 800a052:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a058:	1c5a      	adds	r2, r3, #1
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a062:	1e5a      	subs	r2, r3, #1
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1dc      	bne.n	800a02a <HAL_OSPI_Receive+0xae>
 800a070:	e000      	b.n	800a074 <HAL_OSPI_Receive+0xf8>
          break;
 800a072:	bf00      	nop

      if (status == HAL_OK)
 800a074:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d11c      	bne.n	800a0b6 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	2201      	movs	r2, #1
 800a084:	2102      	movs	r1, #2
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f000 fd16 	bl	800aab8 <OSPI_WaitFlagStateUntilTimeout>
 800a08c:	4603      	mov	r3, r0
 800a08e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800a092:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10d      	bne.n	800a0b6 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2202      	movs	r2, #2
 800a0a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2202      	movs	r2, #2
 800a0a6:	651a      	str	r2, [r3, #80]	@ 0x50
 800a0a8:	e005      	b.n	800a0b6 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2210      	movs	r2, #16
 800a0b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800a0b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3728      	adds	r7, #40	@ 0x28
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b083      	sub	sp, #12
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b094      	sub	sp, #80	@ 0x50
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a9d      	ldr	r2, [pc, #628]	@ (800a374 <HAL_OSPIM_Config+0x294>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d105      	bne.n	800a10e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800a102:	2300      	movs	r3, #0
 800a104:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 800a106:	2301      	movs	r3, #1
 800a108:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800a10c:	e004      	b.n	800a118 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800a10e:	2301      	movs	r3, #1
 800a110:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a118:	2300      	movs	r3, #0
 800a11a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a11e:	e01d      	b.n	800a15c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800a120:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a124:	3301      	adds	r3, #1
 800a126:	b2d8      	uxtb	r0, r3
 800a128:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a12c:	f107 0114 	add.w	r1, r7, #20
 800a130:	4613      	mov	r3, r2
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	4413      	add	r3, r2
 800a136:	00db      	lsls	r3, r3, #3
 800a138:	440b      	add	r3, r1
 800a13a:	4619      	mov	r1, r3
 800a13c:	f000 fe6e 	bl	800ae1c <OSPIM_GetConfig>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d005      	beq.n	800a152 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2208      	movs	r2, #8
 800a150:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a152:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a156:	3301      	adds	r3, #1
 800a158:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a15c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a160:	2b01      	cmp	r3, #1
 800a162:	d9dd      	bls.n	800a120 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800a164:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f040 8499 	bne.w	800aaa0 <HAL_OSPIM_Config+0x9c0>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800a16e:	4b81      	ldr	r3, [pc, #516]	@ (800a374 <HAL_OSPIM_Config+0x294>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00b      	beq.n	800a192 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a17a:	4b7e      	ldr	r3, [pc, #504]	@ (800a374 <HAL_OSPIM_Config+0x294>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a7d      	ldr	r2, [pc, #500]	@ (800a374 <HAL_OSPIM_Config+0x294>)
 800a180:	f023 0301 	bic.w	r3, r3, #1
 800a184:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800a186:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a18a:	f043 0301 	orr.w	r3, r3, #1
 800a18e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800a192:	4b79      	ldr	r3, [pc, #484]	@ (800a378 <HAL_OSPIM_Config+0x298>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00b      	beq.n	800a1b6 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a19e:	4b76      	ldr	r3, [pc, #472]	@ (800a378 <HAL_OSPIM_Config+0x298>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a75      	ldr	r2, [pc, #468]	@ (800a378 <HAL_OSPIM_Config+0x298>)
 800a1a4:	f023 0301 	bic.w	r3, r3, #1
 800a1a8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800a1aa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a1ae:	f043 0302 	orr.w	r3, r3, #2
 800a1b2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800a1b6:	4971      	ldr	r1, [pc, #452]	@ (800a37c <HAL_OSPIM_Config+0x29c>)
 800a1b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	4413      	add	r3, r2
 800a1c0:	00db      	lsls	r3, r3, #3
 800a1c2:	3350      	adds	r3, #80	@ 0x50
 800a1c4:	443b      	add	r3, r7
 800a1c6:	3b34      	subs	r3, #52	@ 0x34
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	440b      	add	r3, r1
 800a1d0:	6859      	ldr	r1, [r3, #4]
 800a1d2:	486a      	ldr	r0, [pc, #424]	@ (800a37c <HAL_OSPIM_Config+0x29c>)
 800a1d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	005b      	lsls	r3, r3, #1
 800a1da:	4413      	add	r3, r2
 800a1dc:	00db      	lsls	r3, r3, #3
 800a1de:	3350      	adds	r3, #80	@ 0x50
 800a1e0:	443b      	add	r3, r7
 800a1e2:	3b34      	subs	r3, #52	@ 0x34
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4403      	add	r3, r0
 800a1f0:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a1f2:	4b62      	ldr	r3, [pc, #392]	@ (800a37c <HAL_OSPIM_Config+0x29c>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 0301 	and.w	r3, r3, #1
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 80c0 	beq.w	800a380 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a200:	4b5e      	ldr	r3, [pc, #376]	@ (800a37c <HAL_OSPIM_Config+0x29c>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a5d      	ldr	r2, [pc, #372]	@ (800a37c <HAL_OSPIM_Config+0x29c>)
 800a206:	f023 0301 	bic.w	r3, r3, #1
 800a20a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800a20c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a210:	2b01      	cmp	r3, #1
 800a212:	f040 8162 	bne.w	800a4da <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800a216:	4959      	ldr	r1, [pc, #356]	@ (800a37c <HAL_OSPIM_Config+0x29c>)
 800a218:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a21c:	4613      	mov	r3, r2
 800a21e:	005b      	lsls	r3, r3, #1
 800a220:	4413      	add	r3, r2
 800a222:	00db      	lsls	r3, r3, #3
 800a224:	3350      	adds	r3, #80	@ 0x50
 800a226:	443b      	add	r3, r7
 800a228:	3b3c      	subs	r3, #60	@ 0x3c
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	440b      	add	r3, r1
 800a232:	6859      	ldr	r1, [r3, #4]
 800a234:	4851      	ldr	r0, [pc, #324]	@ (800a37c <HAL_OSPIM_Config+0x29c>)
 800a236:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a23a:	4613      	mov	r3, r2
 800a23c:	005b      	lsls	r3, r3, #1
 800a23e:	4413      	add	r3, r2
 800a240:	00db      	lsls	r3, r3, #3
 800a242:	3350      	adds	r3, #80	@ 0x50
 800a244:	443b      	add	r3, r7
 800a246:	3b3c      	subs	r3, #60	@ 0x3c
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3b01      	subs	r3, #1
 800a24c:	f041 0202 	orr.w	r2, r1, #2
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4403      	add	r3, r0
 800a254:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a256:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a25a:	4613      	mov	r3, r2
 800a25c:	005b      	lsls	r3, r3, #1
 800a25e:	4413      	add	r3, r2
 800a260:	00db      	lsls	r3, r3, #3
 800a262:	3350      	adds	r3, #80	@ 0x50
 800a264:	443b      	add	r3, r7
 800a266:	3b38      	subs	r3, #56	@ 0x38
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d01f      	beq.n	800a2ae <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800a26e:	4943      	ldr	r1, [pc, #268]	@ (800a37c <HAL_OSPIM_Config+0x29c>)
 800a270:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a274:	4613      	mov	r3, r2
 800a276:	005b      	lsls	r3, r3, #1
 800a278:	4413      	add	r3, r2
 800a27a:	00db      	lsls	r3, r3, #3
 800a27c:	3350      	adds	r3, #80	@ 0x50
 800a27e:	443b      	add	r3, r7
 800a280:	3b38      	subs	r3, #56	@ 0x38
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	3b01      	subs	r3, #1
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	440b      	add	r3, r1
 800a28a:	6859      	ldr	r1, [r3, #4]
 800a28c:	483b      	ldr	r0, [pc, #236]	@ (800a37c <HAL_OSPIM_Config+0x29c>)
 800a28e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a292:	4613      	mov	r3, r2
 800a294:	005b      	lsls	r3, r3, #1
 800a296:	4413      	add	r3, r2
 800a298:	00db      	lsls	r3, r3, #3
 800a29a:	3350      	adds	r3, #80	@ 0x50
 800a29c:	443b      	add	r3, r7
 800a29e:	3b38      	subs	r3, #56	@ 0x38
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	f041 0220 	orr.w	r2, r1, #32
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4403      	add	r3, r0
 800a2ac:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a2ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	4413      	add	r3, r2
 800a2b8:	00db      	lsls	r3, r3, #3
 800a2ba:	3350      	adds	r3, #80	@ 0x50
 800a2bc:	443b      	add	r3, r7
 800a2be:	3b30      	subs	r3, #48	@ 0x30
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d023      	beq.n	800a30e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800a2c6:	492d      	ldr	r1, [pc, #180]	@ (800a37c <HAL_OSPIM_Config+0x29c>)
 800a2c8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	005b      	lsls	r3, r3, #1
 800a2d0:	4413      	add	r3, r2
 800a2d2:	00db      	lsls	r3, r3, #3
 800a2d4:	3350      	adds	r3, #80	@ 0x50
 800a2d6:	443b      	add	r3, r7
 800a2d8:	3b30      	subs	r3, #48	@ 0x30
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	440b      	add	r3, r1
 800a2e6:	6859      	ldr	r1, [r3, #4]
 800a2e8:	4824      	ldr	r0, [pc, #144]	@ (800a37c <HAL_OSPIM_Config+0x29c>)
 800a2ea:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	4413      	add	r3, r2
 800a2f4:	00db      	lsls	r3, r3, #3
 800a2f6:	3350      	adds	r3, #80	@ 0x50
 800a2f8:	443b      	add	r3, r7
 800a2fa:	3b30      	subs	r3, #48	@ 0x30
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3b01      	subs	r3, #1
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	4403      	add	r3, r0
 800a30c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a30e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a312:	4613      	mov	r3, r2
 800a314:	005b      	lsls	r3, r3, #1
 800a316:	4413      	add	r3, r2
 800a318:	00db      	lsls	r3, r3, #3
 800a31a:	3350      	adds	r3, #80	@ 0x50
 800a31c:	443b      	add	r3, r7
 800a31e:	3b2c      	subs	r3, #44	@ 0x2c
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	f000 80d9 	beq.w	800a4da <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800a328:	4914      	ldr	r1, [pc, #80]	@ (800a37c <HAL_OSPIM_Config+0x29c>)
 800a32a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a32e:	4613      	mov	r3, r2
 800a330:	005b      	lsls	r3, r3, #1
 800a332:	4413      	add	r3, r2
 800a334:	00db      	lsls	r3, r3, #3
 800a336:	3350      	adds	r3, #80	@ 0x50
 800a338:	443b      	add	r3, r7
 800a33a:	3b2c      	subs	r3, #44	@ 0x2c
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3b01      	subs	r3, #1
 800a340:	f003 0301 	and.w	r3, r3, #1
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	440b      	add	r3, r1
 800a348:	6859      	ldr	r1, [r3, #4]
 800a34a:	480c      	ldr	r0, [pc, #48]	@ (800a37c <HAL_OSPIM_Config+0x29c>)
 800a34c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a350:	4613      	mov	r3, r2
 800a352:	005b      	lsls	r3, r3, #1
 800a354:	4413      	add	r3, r2
 800a356:	00db      	lsls	r3, r3, #3
 800a358:	3350      	adds	r3, #80	@ 0x50
 800a35a:	443b      	add	r3, r7
 800a35c:	3b2c      	subs	r3, #44	@ 0x2c
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3b01      	subs	r3, #1
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4403      	add	r3, r0
 800a36e:	605a      	str	r2, [r3, #4]
 800a370:	e0b3      	b.n	800a4da <HAL_OSPIM_Config+0x3fa>
 800a372:	bf00      	nop
 800a374:	52005000 	.word	0x52005000
 800a378:	5200a000 	.word	0x5200a000
 800a37c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800a380:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a382:	4613      	mov	r3, r2
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	4413      	add	r3, r2
 800a388:	00db      	lsls	r3, r3, #3
 800a38a:	3350      	adds	r3, #80	@ 0x50
 800a38c:	443b      	add	r3, r7
 800a38e:	3b3c      	subs	r3, #60	@ 0x3c
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	f000 80a1 	beq.w	800a4da <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800a398:	4995      	ldr	r1, [pc, #596]	@ (800a5f0 <HAL_OSPIM_Config+0x510>)
 800a39a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a39c:	4613      	mov	r3, r2
 800a39e:	005b      	lsls	r3, r3, #1
 800a3a0:	4413      	add	r3, r2
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	3350      	adds	r3, #80	@ 0x50
 800a3a6:	443b      	add	r3, r7
 800a3a8:	3b3c      	subs	r3, #60	@ 0x3c
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	440b      	add	r3, r1
 800a3b2:	6859      	ldr	r1, [r3, #4]
 800a3b4:	488e      	ldr	r0, [pc, #568]	@ (800a5f0 <HAL_OSPIM_Config+0x510>)
 800a3b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	005b      	lsls	r3, r3, #1
 800a3bc:	4413      	add	r3, r2
 800a3be:	00db      	lsls	r3, r3, #3
 800a3c0:	3350      	adds	r3, #80	@ 0x50
 800a3c2:	443b      	add	r3, r7
 800a3c4:	3b3c      	subs	r3, #60	@ 0x3c
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	f021 0201 	bic.w	r2, r1, #1
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4403      	add	r3, r0
 800a3d2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800a3d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	005b      	lsls	r3, r3, #1
 800a3da:	4413      	add	r3, r2
 800a3dc:	00db      	lsls	r3, r3, #3
 800a3de:	3350      	adds	r3, #80	@ 0x50
 800a3e0:	443b      	add	r3, r7
 800a3e2:	3b38      	subs	r3, #56	@ 0x38
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d01d      	beq.n	800a426 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a3ea:	4981      	ldr	r1, [pc, #516]	@ (800a5f0 <HAL_OSPIM_Config+0x510>)
 800a3ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	005b      	lsls	r3, r3, #1
 800a3f2:	4413      	add	r3, r2
 800a3f4:	00db      	lsls	r3, r3, #3
 800a3f6:	3350      	adds	r3, #80	@ 0x50
 800a3f8:	443b      	add	r3, r7
 800a3fa:	3b38      	subs	r3, #56	@ 0x38
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	440b      	add	r3, r1
 800a404:	6859      	ldr	r1, [r3, #4]
 800a406:	487a      	ldr	r0, [pc, #488]	@ (800a5f0 <HAL_OSPIM_Config+0x510>)
 800a408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a40a:	4613      	mov	r3, r2
 800a40c:	005b      	lsls	r3, r3, #1
 800a40e:	4413      	add	r3, r2
 800a410:	00db      	lsls	r3, r3, #3
 800a412:	3350      	adds	r3, #80	@ 0x50
 800a414:	443b      	add	r3, r7
 800a416:	3b38      	subs	r3, #56	@ 0x38
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3b01      	subs	r3, #1
 800a41c:	f021 0210 	bic.w	r2, r1, #16
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4403      	add	r3, r0
 800a424:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a426:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a428:	4613      	mov	r3, r2
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	4413      	add	r3, r2
 800a42e:	00db      	lsls	r3, r3, #3
 800a430:	3350      	adds	r3, #80	@ 0x50
 800a432:	443b      	add	r3, r7
 800a434:	3b30      	subs	r3, #48	@ 0x30
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d021      	beq.n	800a480 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800a43c:	496c      	ldr	r1, [pc, #432]	@ (800a5f0 <HAL_OSPIM_Config+0x510>)
 800a43e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a440:	4613      	mov	r3, r2
 800a442:	005b      	lsls	r3, r3, #1
 800a444:	4413      	add	r3, r2
 800a446:	00db      	lsls	r3, r3, #3
 800a448:	3350      	adds	r3, #80	@ 0x50
 800a44a:	443b      	add	r3, r7
 800a44c:	3b30      	subs	r3, #48	@ 0x30
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3b01      	subs	r3, #1
 800a452:	f003 0301 	and.w	r3, r3, #1
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	440b      	add	r3, r1
 800a45a:	6859      	ldr	r1, [r3, #4]
 800a45c:	4864      	ldr	r0, [pc, #400]	@ (800a5f0 <HAL_OSPIM_Config+0x510>)
 800a45e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a460:	4613      	mov	r3, r2
 800a462:	005b      	lsls	r3, r3, #1
 800a464:	4413      	add	r3, r2
 800a466:	00db      	lsls	r3, r3, #3
 800a468:	3350      	adds	r3, #80	@ 0x50
 800a46a:	443b      	add	r3, r7
 800a46c:	3b30      	subs	r3, #48	@ 0x30
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3b01      	subs	r3, #1
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4403      	add	r3, r0
 800a47e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a480:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a482:	4613      	mov	r3, r2
 800a484:	005b      	lsls	r3, r3, #1
 800a486:	4413      	add	r3, r2
 800a488:	00db      	lsls	r3, r3, #3
 800a48a:	3350      	adds	r3, #80	@ 0x50
 800a48c:	443b      	add	r3, r7
 800a48e:	3b2c      	subs	r3, #44	@ 0x2c
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d021      	beq.n	800a4da <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800a496:	4956      	ldr	r1, [pc, #344]	@ (800a5f0 <HAL_OSPIM_Config+0x510>)
 800a498:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a49a:	4613      	mov	r3, r2
 800a49c:	005b      	lsls	r3, r3, #1
 800a49e:	4413      	add	r3, r2
 800a4a0:	00db      	lsls	r3, r3, #3
 800a4a2:	3350      	adds	r3, #80	@ 0x50
 800a4a4:	443b      	add	r3, r7
 800a4a6:	3b2c      	subs	r3, #44	@ 0x2c
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	440b      	add	r3, r1
 800a4b4:	6859      	ldr	r1, [r3, #4]
 800a4b6:	484e      	ldr	r0, [pc, #312]	@ (800a5f0 <HAL_OSPIM_Config+0x510>)
 800a4b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	005b      	lsls	r3, r3, #1
 800a4be:	4413      	add	r3, r2
 800a4c0:	00db      	lsls	r3, r3, #3
 800a4c2:	3350      	adds	r3, #80	@ 0x50
 800a4c4:	443b      	add	r3, r7
 800a4c6:	3b2c      	subs	r3, #44	@ 0x2c
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	f003 0301 	and.w	r3, r3, #1
 800a4d0:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	4403      	add	r3, r0
 800a4d8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	6819      	ldr	r1, [r3, #0]
 800a4de:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	005b      	lsls	r3, r3, #1
 800a4e6:	4413      	add	r3, r2
 800a4e8:	00db      	lsls	r3, r3, #3
 800a4ea:	3350      	adds	r3, #80	@ 0x50
 800a4ec:	443b      	add	r3, r7
 800a4ee:	3b3c      	subs	r3, #60	@ 0x3c
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4299      	cmp	r1, r3
 800a4f4:	d03c      	beq.n	800a570 <HAL_OSPIM_Config+0x490>
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	6899      	ldr	r1, [r3, #8]
 800a4fa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a4fe:	4613      	mov	r3, r2
 800a500:	005b      	lsls	r3, r3, #1
 800a502:	4413      	add	r3, r2
 800a504:	00db      	lsls	r3, r3, #3
 800a506:	3350      	adds	r3, #80	@ 0x50
 800a508:	443b      	add	r3, r7
 800a50a:	3b34      	subs	r3, #52	@ 0x34
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4299      	cmp	r1, r3
 800a510:	d02e      	beq.n	800a570 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	6859      	ldr	r1, [r3, #4]
 800a516:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a51a:	4613      	mov	r3, r2
 800a51c:	005b      	lsls	r3, r3, #1
 800a51e:	4413      	add	r3, r2
 800a520:	00db      	lsls	r3, r3, #3
 800a522:	3350      	adds	r3, #80	@ 0x50
 800a524:	443b      	add	r3, r7
 800a526:	3b38      	subs	r3, #56	@ 0x38
 800a528:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800a52a:	4299      	cmp	r1, r3
 800a52c:	d103      	bne.n	800a536 <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d11c      	bne.n	800a570 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	68d9      	ldr	r1, [r3, #12]
 800a53a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a53e:	4613      	mov	r3, r2
 800a540:	005b      	lsls	r3, r3, #1
 800a542:	4413      	add	r3, r2
 800a544:	00db      	lsls	r3, r3, #3
 800a546:	3350      	adds	r3, #80	@ 0x50
 800a548:	443b      	add	r3, r7
 800a54a:	3b30      	subs	r3, #48	@ 0x30
 800a54c:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800a54e:	4299      	cmp	r1, r3
 800a550:	d00e      	beq.n	800a570 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	6919      	ldr	r1, [r3, #16]
 800a556:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a55a:	4613      	mov	r3, r2
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	4413      	add	r3, r2
 800a560:	00db      	lsls	r3, r3, #3
 800a562:	3350      	adds	r3, #80	@ 0x50
 800a564:	443b      	add	r3, r7
 800a566:	3b2c      	subs	r3, #44	@ 0x2c
 800a568:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a56a:	4299      	cmp	r1, r3
 800a56c:	f040 810e 	bne.w	800a78c <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	6819      	ldr	r1, [r3, #0]
 800a574:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a578:	4613      	mov	r3, r2
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	4413      	add	r3, r2
 800a57e:	00db      	lsls	r3, r3, #3
 800a580:	3350      	adds	r3, #80	@ 0x50
 800a582:	443b      	add	r3, r7
 800a584:	3b3c      	subs	r3, #60	@ 0x3c
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4299      	cmp	r1, r3
 800a58a:	d133      	bne.n	800a5f4 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	6859      	ldr	r1, [r3, #4]
 800a590:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a594:	4613      	mov	r3, r2
 800a596:	005b      	lsls	r3, r3, #1
 800a598:	4413      	add	r3, r2
 800a59a:	00db      	lsls	r3, r3, #3
 800a59c:	3350      	adds	r3, #80	@ 0x50
 800a59e:	443b      	add	r3, r7
 800a5a0:	3b38      	subs	r3, #56	@ 0x38
 800a5a2:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800a5a4:	4299      	cmp	r1, r3
 800a5a6:	d125      	bne.n	800a5f4 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	68d9      	ldr	r1, [r3, #12]
 800a5ac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	4413      	add	r3, r2
 800a5b6:	00db      	lsls	r3, r3, #3
 800a5b8:	3350      	adds	r3, #80	@ 0x50
 800a5ba:	443b      	add	r3, r7
 800a5bc:	3b30      	subs	r3, #48	@ 0x30
 800a5be:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800a5c0:	4299      	cmp	r1, r3
 800a5c2:	d117      	bne.n	800a5f4 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	6919      	ldr	r1, [r3, #16]
 800a5c8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	4413      	add	r3, r2
 800a5d2:	00db      	lsls	r3, r3, #3
 800a5d4:	3350      	adds	r3, #80	@ 0x50
 800a5d6:	443b      	add	r3, r7
 800a5d8:	3b2c      	subs	r3, #44	@ 0x2c
 800a5da:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800a5dc:	4299      	cmp	r1, r3
 800a5de:	d109      	bne.n	800a5f4 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a5e0:	4b03      	ldr	r3, [pc, #12]	@ (800a5f0 <HAL_OSPIM_Config+0x510>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a02      	ldr	r2, [pc, #8]	@ (800a5f0 <HAL_OSPIM_Config+0x510>)
 800a5e6:	f043 0301 	orr.w	r3, r3, #1
 800a5ea:	6013      	str	r3, [r2, #0]
 800a5ec:	e0ce      	b.n	800a78c <HAL_OSPIM_Config+0x6ac>
 800a5ee:	bf00      	nop
 800a5f0:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800a5f4:	49bb      	ldr	r1, [pc, #748]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a5f6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	4413      	add	r3, r2
 800a600:	00db      	lsls	r3, r3, #3
 800a602:	3350      	adds	r3, #80	@ 0x50
 800a604:	443b      	add	r3, r7
 800a606:	3b3c      	subs	r3, #60	@ 0x3c
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	440b      	add	r3, r1
 800a610:	6859      	ldr	r1, [r3, #4]
 800a612:	48b4      	ldr	r0, [pc, #720]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a614:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a618:	4613      	mov	r3, r2
 800a61a:	005b      	lsls	r3, r3, #1
 800a61c:	4413      	add	r3, r2
 800a61e:	00db      	lsls	r3, r3, #3
 800a620:	3350      	adds	r3, #80	@ 0x50
 800a622:	443b      	add	r3, r7
 800a624:	3b3c      	subs	r3, #60	@ 0x3c
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	3b01      	subs	r3, #1
 800a62a:	f021 0201 	bic.w	r2, r1, #1
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4403      	add	r3, r0
 800a632:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a634:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a638:	4613      	mov	r3, r2
 800a63a:	005b      	lsls	r3, r3, #1
 800a63c:	4413      	add	r3, r2
 800a63e:	00db      	lsls	r3, r3, #3
 800a640:	3350      	adds	r3, #80	@ 0x50
 800a642:	443b      	add	r3, r7
 800a644:	3b38      	subs	r3, #56	@ 0x38
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d01f      	beq.n	800a68c <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a64c:	49a5      	ldr	r1, [pc, #660]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a64e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a652:	4613      	mov	r3, r2
 800a654:	005b      	lsls	r3, r3, #1
 800a656:	4413      	add	r3, r2
 800a658:	00db      	lsls	r3, r3, #3
 800a65a:	3350      	adds	r3, #80	@ 0x50
 800a65c:	443b      	add	r3, r7
 800a65e:	3b38      	subs	r3, #56	@ 0x38
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	3b01      	subs	r3, #1
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	440b      	add	r3, r1
 800a668:	6859      	ldr	r1, [r3, #4]
 800a66a:	489e      	ldr	r0, [pc, #632]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a66c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a670:	4613      	mov	r3, r2
 800a672:	005b      	lsls	r3, r3, #1
 800a674:	4413      	add	r3, r2
 800a676:	00db      	lsls	r3, r3, #3
 800a678:	3350      	adds	r3, #80	@ 0x50
 800a67a:	443b      	add	r3, r7
 800a67c:	3b38      	subs	r3, #56	@ 0x38
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	3b01      	subs	r3, #1
 800a682:	f021 0210 	bic.w	r2, r1, #16
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4403      	add	r3, r0
 800a68a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800a68c:	4995      	ldr	r1, [pc, #596]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a68e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a692:	4613      	mov	r3, r2
 800a694:	005b      	lsls	r3, r3, #1
 800a696:	4413      	add	r3, r2
 800a698:	00db      	lsls	r3, r3, #3
 800a69a:	3350      	adds	r3, #80	@ 0x50
 800a69c:	443b      	add	r3, r7
 800a69e:	3b34      	subs	r3, #52	@ 0x34
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	440b      	add	r3, r1
 800a6a8:	6859      	ldr	r1, [r3, #4]
 800a6aa:	488e      	ldr	r0, [pc, #568]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a6ac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	005b      	lsls	r3, r3, #1
 800a6b4:	4413      	add	r3, r2
 800a6b6:	00db      	lsls	r3, r3, #3
 800a6b8:	3350      	adds	r3, #80	@ 0x50
 800a6ba:	443b      	add	r3, r7
 800a6bc:	3b34      	subs	r3, #52	@ 0x34
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4403      	add	r3, r0
 800a6ca:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a6cc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	005b      	lsls	r3, r3, #1
 800a6d4:	4413      	add	r3, r2
 800a6d6:	00db      	lsls	r3, r3, #3
 800a6d8:	3350      	adds	r3, #80	@ 0x50
 800a6da:	443b      	add	r3, r7
 800a6dc:	3b30      	subs	r3, #48	@ 0x30
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d023      	beq.n	800a72c <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a6e4:	497f      	ldr	r1, [pc, #508]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a6e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	005b      	lsls	r3, r3, #1
 800a6ee:	4413      	add	r3, r2
 800a6f0:	00db      	lsls	r3, r3, #3
 800a6f2:	3350      	adds	r3, #80	@ 0x50
 800a6f4:	443b      	add	r3, r7
 800a6f6:	3b30      	subs	r3, #48	@ 0x30
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	f003 0301 	and.w	r3, r3, #1
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	440b      	add	r3, r1
 800a704:	6859      	ldr	r1, [r3, #4]
 800a706:	4877      	ldr	r0, [pc, #476]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a708:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a70c:	4613      	mov	r3, r2
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	4413      	add	r3, r2
 800a712:	00db      	lsls	r3, r3, #3
 800a714:	3350      	adds	r3, #80	@ 0x50
 800a716:	443b      	add	r3, r7
 800a718:	3b30      	subs	r3, #48	@ 0x30
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	3b01      	subs	r3, #1
 800a71e:	f003 0301 	and.w	r3, r3, #1
 800a722:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4403      	add	r3, r0
 800a72a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a72c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a730:	4613      	mov	r3, r2
 800a732:	005b      	lsls	r3, r3, #1
 800a734:	4413      	add	r3, r2
 800a736:	00db      	lsls	r3, r3, #3
 800a738:	3350      	adds	r3, #80	@ 0x50
 800a73a:	443b      	add	r3, r7
 800a73c:	3b2c      	subs	r3, #44	@ 0x2c
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d023      	beq.n	800a78c <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a744:	4967      	ldr	r1, [pc, #412]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a746:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a74a:	4613      	mov	r3, r2
 800a74c:	005b      	lsls	r3, r3, #1
 800a74e:	4413      	add	r3, r2
 800a750:	00db      	lsls	r3, r3, #3
 800a752:	3350      	adds	r3, #80	@ 0x50
 800a754:	443b      	add	r3, r7
 800a756:	3b2c      	subs	r3, #44	@ 0x2c
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3b01      	subs	r3, #1
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	440b      	add	r3, r1
 800a764:	6859      	ldr	r1, [r3, #4]
 800a766:	485f      	ldr	r0, [pc, #380]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a768:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a76c:	4613      	mov	r3, r2
 800a76e:	005b      	lsls	r3, r3, #1
 800a770:	4413      	add	r3, r2
 800a772:	00db      	lsls	r3, r3, #3
 800a774:	3350      	adds	r3, #80	@ 0x50
 800a776:	443b      	add	r3, r7
 800a778:	3b2c      	subs	r3, #44	@ 0x2c
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	3b01      	subs	r3, #1
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4403      	add	r3, r0
 800a78a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800a78c:	4a55      	ldr	r2, [pc, #340]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	3b01      	subs	r3, #1
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4413      	add	r3, r2
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a79e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7a0:	025b      	lsls	r3, r3, #9
 800a7a2:	431a      	orrs	r2, r3
 800a7a4:	494f      	ldr	r1, [pc, #316]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	440b      	add	r3, r1
 800a7b4:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	1e5a      	subs	r2, r3, #1
 800a7bc:	4b49      	ldr	r3, [pc, #292]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	0c1b      	lsrs	r3, r3, #16
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d90a      	bls.n	800a7de <HAL_OSPIM_Config+0x6fe>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800a7c8:	4b46      	ldr	r3, [pc, #280]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	041b      	lsls	r3, r3, #16
 800a7d8:	4942      	ldr	r1, [pc, #264]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a7de:	4b41      	ldr	r3, [pc, #260]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 0301 	and.w	r3, r3, #1
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 809a 	beq.w	800a920 <HAL_OSPIM_Config+0x840>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800a7ec:	4a3d      	ldr	r2, [pc, #244]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	f023 0203 	bic.w	r2, r3, #3
 800a7fe:	4939      	ldr	r1, [pc, #228]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	3b01      	subs	r3, #1
 800a806:	f042 0201 	orr.w	r2, r2, #1
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	440b      	add	r3, r1
 800a80e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d011      	beq.n	800a83c <HAL_OSPIM_Config+0x75c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800a818:	4a32      	ldr	r2, [pc, #200]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	3b01      	subs	r3, #1
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	4413      	add	r3, r2
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a82a:	492e      	ldr	r1, [pc, #184]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	3b01      	subs	r3, #1
 800a832:	f042 0210 	orr.w	r2, r2, #16
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	440b      	add	r3, r1
 800a83a:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a844:	2b00      	cmp	r3, #0
 800a846:	d016      	beq.n	800a876 <HAL_OSPIM_Config+0x796>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a848:	4a26      	ldr	r2, [pc, #152]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	3b01      	subs	r3, #1
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a85e:	4921      	ldr	r1, [pc, #132]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	3b01      	subs	r3, #1
 800a866:	f003 0301 	and.w	r3, r3, #1
 800a86a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	440b      	add	r3, r1
 800a872:	605a      	str	r2, [r3, #4]
 800a874:	e019      	b.n	800a8aa <HAL_OSPIM_Config+0x7ca>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d015      	beq.n	800a8aa <HAL_OSPIM_Config+0x7ca>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a87e:	4a19      	ldr	r2, [pc, #100]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	3b01      	subs	r3, #1
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a894:	4913      	ldr	r1, [pc, #76]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	3b01      	subs	r3, #1
 800a89c:	f003 0301 	and.w	r3, r3, #1
 800a8a0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	440b      	add	r3, r1
 800a8a8:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d018      	beq.n	800a8e8 <HAL_OSPIM_Config+0x808>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a8b6:	4a0b      	ldr	r2, [pc, #44]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	f003 0301 	and.w	r3, r3, #1
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4413      	add	r3, r2
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a8cc:	4905      	ldr	r1, [pc, #20]	@ (800a8e4 <HAL_OSPIM_Config+0x804>)
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	440b      	add	r3, r1
 800a8e0:	605a      	str	r2, [r3, #4]
 800a8e2:	e0c5      	b.n	800aa70 <HAL_OSPIM_Config+0x990>
 800a8e4:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f000 80bf 	beq.w	800aa70 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a8f2:	4a6e      	ldr	r2, [pc, #440]	@ (800aaac <HAL_OSPIM_Config+0x9cc>)
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4413      	add	r3, r2
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a908:	4968      	ldr	r1, [pc, #416]	@ (800aaac <HAL_OSPIM_Config+0x9cc>)
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	3b01      	subs	r3, #1
 800a910:	f003 0301 	and.w	r3, r3, #1
 800a914:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	440b      	add	r3, r1
 800a91c:	605a      	str	r2, [r3, #4]
 800a91e:	e0a7      	b.n	800aa70 <HAL_OSPIM_Config+0x990>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800a920:	4a62      	ldr	r2, [pc, #392]	@ (800aaac <HAL_OSPIM_Config+0x9cc>)
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3b01      	subs	r3, #1
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	4413      	add	r3, r2
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	f023 0203 	bic.w	r2, r3, #3
 800a932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	431a      	orrs	r2, r3
 800a938:	495c      	ldr	r1, [pc, #368]	@ (800aaac <HAL_OSPIM_Config+0x9cc>)
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3b01      	subs	r3, #1
 800a940:	f042 0201 	orr.w	r2, r2, #1
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	440b      	add	r3, r1
 800a948:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d014      	beq.n	800a97c <HAL_OSPIM_Config+0x89c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800a952:	4a56      	ldr	r2, [pc, #344]	@ (800aaac <HAL_OSPIM_Config+0x9cc>)
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	3b01      	subs	r3, #1
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a966:	015b      	lsls	r3, r3, #5
 800a968:	431a      	orrs	r2, r3
 800a96a:	4950      	ldr	r1, [pc, #320]	@ (800aaac <HAL_OSPIM_Config+0x9cc>)
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	3b01      	subs	r3, #1
 800a972:	f042 0210 	orr.w	r2, r2, #16
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	440b      	add	r3, r1
 800a97a:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a984:	2b00      	cmp	r3, #0
 800a986:	d019      	beq.n	800a9bc <HAL_OSPIM_Config+0x8dc>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a988:	4a48      	ldr	r2, [pc, #288]	@ (800aaac <HAL_OSPIM_Config+0x9cc>)
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	3b01      	subs	r3, #1
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a99e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9a0:	049b      	lsls	r3, r3, #18
 800a9a2:	431a      	orrs	r2, r3
 800a9a4:	4941      	ldr	r1, [pc, #260]	@ (800aaac <HAL_OSPIM_Config+0x9cc>)
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	440b      	add	r3, r1
 800a9b8:	605a      	str	r2, [r3, #4]
 800a9ba:	e01c      	b.n	800a9f6 <HAL_OSPIM_Config+0x916>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d018      	beq.n	800a9f6 <HAL_OSPIM_Config+0x916>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a9c4:	4a39      	ldr	r2, [pc, #228]	@ (800aaac <HAL_OSPIM_Config+0x9cc>)
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	f003 0301 	and.w	r3, r3, #1
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4413      	add	r3, r2
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a9da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9dc:	069b      	lsls	r3, r3, #26
 800a9de:	431a      	orrs	r2, r3
 800a9e0:	4932      	ldr	r1, [pc, #200]	@ (800aaac <HAL_OSPIM_Config+0x9cc>)
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	f003 0301 	and.w	r3, r3, #1
 800a9ec:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	440b      	add	r3, r1
 800a9f4:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d019      	beq.n	800aa36 <HAL_OSPIM_Config+0x956>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800aa02:	4a2a      	ldr	r2, [pc, #168]	@ (800aaac <HAL_OSPIM_Config+0x9cc>)
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800aa18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa1a:	049b      	lsls	r3, r3, #18
 800aa1c:	431a      	orrs	r2, r3
 800aa1e:	4923      	ldr	r1, [pc, #140]	@ (800aaac <HAL_OSPIM_Config+0x9cc>)
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	3b01      	subs	r3, #1
 800aa26:	f003 0301 	and.w	r3, r3, #1
 800aa2a:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	440b      	add	r3, r1
 800aa32:	605a      	str	r2, [r3, #4]
 800aa34:	e01c      	b.n	800aa70 <HAL_OSPIM_Config+0x990>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d018      	beq.n	800aa70 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800aa3e:	4a1b      	ldr	r2, [pc, #108]	@ (800aaac <HAL_OSPIM_Config+0x9cc>)
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	3b01      	subs	r3, #1
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	4413      	add	r3, r2
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800aa54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa56:	069b      	lsls	r3, r3, #26
 800aa58:	431a      	orrs	r2, r3
 800aa5a:	4914      	ldr	r1, [pc, #80]	@ (800aaac <HAL_OSPIM_Config+0x9cc>)
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	440b      	add	r3, r1
 800aa6e:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800aa70:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800aa74:	f003 0301 	and.w	r3, r3, #1
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d005      	beq.n	800aa88 <HAL_OSPIM_Config+0x9a8>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800aa7c:	4b0c      	ldr	r3, [pc, #48]	@ (800aab0 <HAL_OSPIM_Config+0x9d0>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a0b      	ldr	r2, [pc, #44]	@ (800aab0 <HAL_OSPIM_Config+0x9d0>)
 800aa82:	f043 0301 	orr.w	r3, r3, #1
 800aa86:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800aa88:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800aa8c:	f003 0302 	and.w	r3, r3, #2
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d005      	beq.n	800aaa0 <HAL_OSPIM_Config+0x9c0>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800aa94:	4b07      	ldr	r3, [pc, #28]	@ (800aab4 <HAL_OSPIM_Config+0x9d4>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a06      	ldr	r2, [pc, #24]	@ (800aab4 <HAL_OSPIM_Config+0x9d4>)
 800aa9a:	f043 0301 	orr.w	r3, r3, #1
 800aa9e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800aaa0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3750      	adds	r7, #80	@ 0x50
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	5200b400 	.word	0x5200b400
 800aab0:	52005000 	.word	0x52005000
 800aab4:	5200a000 	.word	0x5200a000

0800aab8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	4613      	mov	r3, r2
 800aac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800aac8:	e01a      	b.n	800ab00 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aad0:	d016      	beq.n	800ab00 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aad2:	f7fa fd19 	bl	8005508 <HAL_GetTick>
 800aad6:	4602      	mov	r2, r0
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	1ad3      	subs	r3, r2, r3
 800aadc:	69ba      	ldr	r2, [r7, #24]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d302      	bcc.n	800aae8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10b      	bne.n	800ab00 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aaee:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaf4:	f043 0201 	orr.w	r2, r3, #1
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	e00e      	b.n	800ab1e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6a1a      	ldr	r2, [r3, #32]
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	4013      	ands	r3, r2
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	bf14      	ite	ne
 800ab0e:	2301      	movne	r3, #1
 800ab10:	2300      	moveq	r3, #0
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	461a      	mov	r2, r3
 800ab16:	79fb      	ldrb	r3, [r7, #7]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d1d6      	bne.n	800aaca <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
	...

0800ab28 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b089      	sub	sp, #36	@ 0x24
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ab44:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10a      	bne.n	800ab64 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	685a      	ldr	r2, [r3, #4]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	430a      	orrs	r2, r1
 800ab62:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d114      	bne.n	800ab96 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800ab74:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800ab7e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800ab88:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800ab92:	60fb      	str	r3, [r7, #12]
 800ab94:	e02c      	b.n	800abf0 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	d114      	bne.n	800abc8 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800aba6:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800abb0:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800abba:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800abc4:	60fb      	str	r3, [r7, #12]
 800abc6:	e013      	b.n	800abf0 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800abd0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800abda:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800abe4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800abee:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abf8:	431a      	orrs	r2, r3
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d012      	beq.n	800ac2c <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac1e:	4319      	orrs	r1, r3
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac24:	430b      	orrs	r3, r1
 800ac26:	431a      	orrs	r2, r3
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f023 021f 	bic.w	r2, r3, #31
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac38:	431a      	orrs	r2, r3
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d009      	beq.n	800ac5a <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d105      	bne.n	800ac5a <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3a01      	subs	r2, #1
 800ac58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f000 8095 	beq.w	800ad8e <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	69db      	ldr	r3, [r3, #28]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d053      	beq.n	800ad14 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d01e      	beq.n	800acb2 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	4b64      	ldr	r3, [pc, #400]	@ (800ae0c <OSPI_ConfigCmd+0x2e4>)
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	683a      	ldr	r2, [r7, #0]
 800ac7e:	68d1      	ldr	r1, [r2, #12]
 800ac80:	683a      	ldr	r2, [r7, #0]
 800ac82:	6952      	ldr	r2, [r2, #20]
 800ac84:	4311      	orrs	r1, r2
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	6912      	ldr	r2, [r2, #16]
 800ac8a:	4311      	orrs	r1, r2
 800ac8c:	683a      	ldr	r2, [r7, #0]
 800ac8e:	69d2      	ldr	r2, [r2, #28]
 800ac90:	4311      	orrs	r1, r2
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ac96:	4311      	orrs	r1, r2
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	6a12      	ldr	r2, [r2, #32]
 800ac9c:	4311      	orrs	r1, r2
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800aca2:	4311      	orrs	r1, r2
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800aca8:	430a      	orrs	r2, r1
 800acaa:	431a      	orrs	r2, r3
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	601a      	str	r2, [r3, #0]
 800acb0:	e026      	b.n	800ad00 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	4b56      	ldr	r3, [pc, #344]	@ (800ae10 <OSPI_ConfigCmd+0x2e8>)
 800acb8:	4013      	ands	r3, r2
 800acba:	683a      	ldr	r2, [r7, #0]
 800acbc:	68d1      	ldr	r1, [r2, #12]
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	6952      	ldr	r2, [r2, #20]
 800acc2:	4311      	orrs	r1, r2
 800acc4:	683a      	ldr	r2, [r7, #0]
 800acc6:	6912      	ldr	r2, [r2, #16]
 800acc8:	4311      	orrs	r1, r2
 800acca:	683a      	ldr	r2, [r7, #0]
 800accc:	69d2      	ldr	r2, [r2, #28]
 800acce:	4311      	orrs	r1, r2
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800acd4:	4311      	orrs	r1, r2
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	6a12      	ldr	r2, [r2, #32]
 800acda:	430a      	orrs	r2, r1
 800acdc:	431a      	orrs	r2, r3
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acea:	d109      	bne.n	800ad00 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800acf0:	2b08      	cmp	r3, #8
 800acf2:	d105      	bne.n	800ad00 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	689a      	ldr	r2, [r3, #8]
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	6992      	ldr	r2, [r2, #24]
 800ad10:	649a      	str	r2, [r3, #72]	@ 0x48
 800ad12:	e074      	b.n	800adfe <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d015      	beq.n	800ad48 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	4b3c      	ldr	r3, [pc, #240]	@ (800ae14 <OSPI_ConfigCmd+0x2ec>)
 800ad22:	4013      	ands	r3, r2
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	68d1      	ldr	r1, [r2, #12]
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	6952      	ldr	r2, [r2, #20]
 800ad2c:	4311      	orrs	r1, r2
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	6912      	ldr	r2, [r2, #16]
 800ad32:	4311      	orrs	r1, r2
 800ad34:	683a      	ldr	r2, [r7, #0]
 800ad36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ad38:	4311      	orrs	r1, r2
 800ad3a:	683a      	ldr	r2, [r7, #0]
 800ad3c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ad3e:	430a      	orrs	r2, r1
 800ad40:	431a      	orrs	r2, r3
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	601a      	str	r2, [r3, #0]
 800ad46:	e01d      	b.n	800ad84 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	68d9      	ldr	r1, [r3, #12]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	4319      	orrs	r1, r3
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	430b      	orrs	r3, r1
 800ad60:	431a      	orrs	r2, r3
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad6e:	d109      	bne.n	800ad84 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800ad74:	2b08      	cmp	r3, #8
 800ad76:	d105      	bne.n	800ad84 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	689a      	ldr	r2, [r3, #8]
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	601a      	str	r2, [r3, #0]
 800ad8c:	e037      	b.n	800adfe <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d02e      	beq.n	800adf4 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d015      	beq.n	800adca <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	4b1d      	ldr	r3, [pc, #116]	@ (800ae18 <OSPI_ConfigCmd+0x2f0>)
 800ada4:	4013      	ands	r3, r2
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	69d1      	ldr	r1, [r2, #28]
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800adae:	4311      	orrs	r1, r2
 800adb0:	683a      	ldr	r2, [r7, #0]
 800adb2:	6a12      	ldr	r2, [r2, #32]
 800adb4:	4311      	orrs	r1, r2
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800adba:	4311      	orrs	r1, r2
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800adc0:	430a      	orrs	r2, r1
 800adc2:	431a      	orrs	r2, r3
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	e00e      	b.n	800ade8 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	69d9      	ldr	r1, [r3, #28]
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adda:	4319      	orrs	r1, r3
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	6a1b      	ldr	r3, [r3, #32]
 800ade0:	430b      	orrs	r3, r1
 800ade2:	431a      	orrs	r2, r3
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	6992      	ldr	r2, [r2, #24]
 800adf0:	649a      	str	r2, [r3, #72]	@ 0x48
 800adf2:	e004      	b.n	800adfe <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800adf4:	2301      	movs	r3, #1
 800adf6:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2208      	movs	r2, #8
 800adfc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800adfe:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3724      	adds	r7, #36	@ 0x24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	f0ffc0c0 	.word	0xf0ffc0c0
 800ae10:	ffffc0c0 	.word	0xffffc0c0
 800ae14:	f0ffffc0 	.word	0xf0ffffc0
 800ae18:	f0ffc0ff 	.word	0xf0ffc0ff

0800ae1c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	4603      	mov	r3, r0
 800ae24:	6039      	str	r1, [r7, #0]
 800ae26:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800ae30:	79fb      	ldrb	r3, [r7, #7]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d005      	beq.n	800ae42 <OSPIM_GetConfig+0x26>
 800ae36:	79fb      	ldrb	r3, [r7, #7]
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d802      	bhi.n	800ae42 <OSPIM_GetConfig+0x26>
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d102      	bne.n	800ae48 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	75fb      	strb	r3, [r7, #23]
 800ae46:	e098      	b.n	800af7a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	2200      	movs	r2, #0
 800ae52:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2200      	movs	r2, #0
 800ae58:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	2200      	movs	r2, #0
 800ae64:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800ae66:	79fb      	ldrb	r3, [r7, #7]
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	d10b      	bne.n	800ae84 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800ae6c:	4b46      	ldr	r3, [pc, #280]	@ (800af88 <OSPIM_GetConfig+0x16c>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 0301 	and.w	r3, r3, #1
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d102      	bne.n	800ae7e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800ae78:	4b44      	ldr	r3, [pc, #272]	@ (800af8c <OSPIM_GetConfig+0x170>)
 800ae7a:	613b      	str	r3, [r7, #16]
 800ae7c:	e002      	b.n	800ae84 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800ae7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae82:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800ae84:	2300      	movs	r3, #0
 800ae86:	60fb      	str	r3, [r7, #12]
 800ae88:	e074      	b.n	800af74 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800ae8a:	4a3f      	ldr	r2, [pc, #252]	@ (800af88 <OSPIM_GetConfig+0x16c>)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4413      	add	r3, r2
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	f003 0301 	and.w	r3, r3, #1
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00a      	beq.n	800aeb6 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	4053      	eors	r3, r2
 800aea6:	f003 0302 	and.w	r3, r3, #2
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d103      	bne.n	800aeb6 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	1c5a      	adds	r2, r3, #1
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	f003 0310 	and.w	r3, r3, #16
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00a      	beq.n	800aed6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	4053      	eors	r3, r2
 800aec6:	f003 0320 	and.w	r3, r3, #32
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d103      	bne.n	800aed6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00a      	beq.n	800aef6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800aee0:	68ba      	ldr	r2, [r7, #8]
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	4053      	eors	r3, r2
 800aee6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d103      	bne.n	800aef6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	1c5a      	adds	r2, r3, #1
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d018      	beq.n	800af32 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	4053      	eors	r3, r2
 800af06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d111      	bne.n	800af32 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af14:	2b00      	cmp	r3, #0
 800af16:	d106      	bne.n	800af26 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	3301      	adds	r3, #1
 800af1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	60da      	str	r2, [r3, #12]
 800af24:	e005      	b.n	800af32 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	3301      	adds	r3, #1
 800af2a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d018      	beq.n	800af6e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	4053      	eors	r3, r2
 800af42:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800af46:	2b00      	cmp	r3, #0
 800af48:	d111      	bne.n	800af6e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af50:	2b00      	cmp	r3, #0
 800af52:	d106      	bne.n	800af62 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	3301      	adds	r3, #1
 800af58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	611a      	str	r2, [r3, #16]
 800af60:	e005      	b.n	800af6e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	3301      	adds	r3, #1
 800af66:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	3301      	adds	r3, #1
 800af72:	60fb      	str	r3, [r7, #12]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2b01      	cmp	r3, #1
 800af78:	d987      	bls.n	800ae8a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	371c      	adds	r7, #28
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	5200b400 	.word	0x5200b400
 800af8c:	04040222 	.word	0x04040222

0800af90 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800af98:	4b19      	ldr	r3, [pc, #100]	@ (800b000 <HAL_PWREx_ConfigSupply+0x70>)
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	f003 0304 	and.w	r3, r3, #4
 800afa0:	2b04      	cmp	r3, #4
 800afa2:	d00a      	beq.n	800afba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800afa4:	4b16      	ldr	r3, [pc, #88]	@ (800b000 <HAL_PWREx_ConfigSupply+0x70>)
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	f003 0307 	and.w	r3, r3, #7
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d001      	beq.n	800afb6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e01f      	b.n	800aff6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	e01d      	b.n	800aff6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800afba:	4b11      	ldr	r3, [pc, #68]	@ (800b000 <HAL_PWREx_ConfigSupply+0x70>)
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	f023 0207 	bic.w	r2, r3, #7
 800afc2:	490f      	ldr	r1, [pc, #60]	@ (800b000 <HAL_PWREx_ConfigSupply+0x70>)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800afca:	f7fa fa9d 	bl	8005508 <HAL_GetTick>
 800afce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800afd0:	e009      	b.n	800afe6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800afd2:	f7fa fa99 	bl	8005508 <HAL_GetTick>
 800afd6:	4602      	mov	r2, r0
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800afe0:	d901      	bls.n	800afe6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	e007      	b.n	800aff6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800afe6:	4b06      	ldr	r3, [pc, #24]	@ (800b000 <HAL_PWREx_ConfigSupply+0x70>)
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800afee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aff2:	d1ee      	bne.n	800afd2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	58024800 	.word	0x58024800

0800b004 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08c      	sub	sp, #48	@ 0x30
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e3c8      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f003 0301 	and.w	r3, r3, #1
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f000 8087 	beq.w	800b132 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b024:	4b88      	ldr	r3, [pc, #544]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b02c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b02e:	4b86      	ldr	r3, [pc, #536]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b032:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b036:	2b10      	cmp	r3, #16
 800b038:	d007      	beq.n	800b04a <HAL_RCC_OscConfig+0x46>
 800b03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b03c:	2b18      	cmp	r3, #24
 800b03e:	d110      	bne.n	800b062 <HAL_RCC_OscConfig+0x5e>
 800b040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b042:	f003 0303 	and.w	r3, r3, #3
 800b046:	2b02      	cmp	r3, #2
 800b048:	d10b      	bne.n	800b062 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b04a:	4b7f      	ldr	r3, [pc, #508]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d06c      	beq.n	800b130 <HAL_RCC_OscConfig+0x12c>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d168      	bne.n	800b130 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	e3a2      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b06a:	d106      	bne.n	800b07a <HAL_RCC_OscConfig+0x76>
 800b06c:	4b76      	ldr	r3, [pc, #472]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a75      	ldr	r2, [pc, #468]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b076:	6013      	str	r3, [r2, #0]
 800b078:	e02e      	b.n	800b0d8 <HAL_RCC_OscConfig+0xd4>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d10c      	bne.n	800b09c <HAL_RCC_OscConfig+0x98>
 800b082:	4b71      	ldr	r3, [pc, #452]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a70      	ldr	r2, [pc, #448]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b088:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b08c:	6013      	str	r3, [r2, #0]
 800b08e:	4b6e      	ldr	r3, [pc, #440]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a6d      	ldr	r2, [pc, #436]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b094:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b098:	6013      	str	r3, [r2, #0]
 800b09a:	e01d      	b.n	800b0d8 <HAL_RCC_OscConfig+0xd4>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b0a4:	d10c      	bne.n	800b0c0 <HAL_RCC_OscConfig+0xbc>
 800b0a6:	4b68      	ldr	r3, [pc, #416]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a67      	ldr	r2, [pc, #412]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b0ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b0b0:	6013      	str	r3, [r2, #0]
 800b0b2:	4b65      	ldr	r3, [pc, #404]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a64      	ldr	r2, [pc, #400]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b0b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b0bc:	6013      	str	r3, [r2, #0]
 800b0be:	e00b      	b.n	800b0d8 <HAL_RCC_OscConfig+0xd4>
 800b0c0:	4b61      	ldr	r3, [pc, #388]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a60      	ldr	r2, [pc, #384]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b0c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b0ca:	6013      	str	r3, [r2, #0]
 800b0cc:	4b5e      	ldr	r3, [pc, #376]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a5d      	ldr	r2, [pc, #372]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b0d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b0d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d013      	beq.n	800b108 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0e0:	f7fa fa12 	bl	8005508 <HAL_GetTick>
 800b0e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b0e6:	e008      	b.n	800b0fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b0e8:	f7fa fa0e 	bl	8005508 <HAL_GetTick>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	2b64      	cmp	r3, #100	@ 0x64
 800b0f4:	d901      	bls.n	800b0fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	e356      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b0fa:	4b53      	ldr	r3, [pc, #332]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b102:	2b00      	cmp	r3, #0
 800b104:	d0f0      	beq.n	800b0e8 <HAL_RCC_OscConfig+0xe4>
 800b106:	e014      	b.n	800b132 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b108:	f7fa f9fe 	bl	8005508 <HAL_GetTick>
 800b10c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b10e:	e008      	b.n	800b122 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b110:	f7fa f9fa 	bl	8005508 <HAL_GetTick>
 800b114:	4602      	mov	r2, r0
 800b116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	2b64      	cmp	r3, #100	@ 0x64
 800b11c:	d901      	bls.n	800b122 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b11e:	2303      	movs	r3, #3
 800b120:	e342      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b122:	4b49      	ldr	r3, [pc, #292]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1f0      	bne.n	800b110 <HAL_RCC_OscConfig+0x10c>
 800b12e:	e000      	b.n	800b132 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f003 0302 	and.w	r3, r3, #2
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 808c 	beq.w	800b258 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b140:	4b41      	ldr	r3, [pc, #260]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b148:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b14a:	4b3f      	ldr	r3, [pc, #252]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b14c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b14e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b150:	6a3b      	ldr	r3, [r7, #32]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d007      	beq.n	800b166 <HAL_RCC_OscConfig+0x162>
 800b156:	6a3b      	ldr	r3, [r7, #32]
 800b158:	2b18      	cmp	r3, #24
 800b15a:	d137      	bne.n	800b1cc <HAL_RCC_OscConfig+0x1c8>
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	f003 0303 	and.w	r3, r3, #3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d132      	bne.n	800b1cc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b166:	4b38      	ldr	r3, [pc, #224]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 0304 	and.w	r3, r3, #4
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d005      	beq.n	800b17e <HAL_RCC_OscConfig+0x17a>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d101      	bne.n	800b17e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	e314      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b17e:	4b32      	ldr	r3, [pc, #200]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f023 0219 	bic.w	r2, r3, #25
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	492f      	ldr	r1, [pc, #188]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b18c:	4313      	orrs	r3, r2
 800b18e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b190:	f7fa f9ba 	bl	8005508 <HAL_GetTick>
 800b194:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b196:	e008      	b.n	800b1aa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b198:	f7fa f9b6 	bl	8005508 <HAL_GetTick>
 800b19c:	4602      	mov	r2, r0
 800b19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d901      	bls.n	800b1aa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b1a6:	2303      	movs	r3, #3
 800b1a8:	e2fe      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b1aa:	4b27      	ldr	r3, [pc, #156]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f003 0304 	and.w	r3, r3, #4
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d0f0      	beq.n	800b198 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b1b6:	4b24      	ldr	r3, [pc, #144]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	061b      	lsls	r3, r3, #24
 800b1c4:	4920      	ldr	r1, [pc, #128]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b1ca:	e045      	b.n	800b258 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d026      	beq.n	800b222 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b1d4:	4b1c      	ldr	r3, [pc, #112]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f023 0219 	bic.w	r2, r3, #25
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	4919      	ldr	r1, [pc, #100]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1e6:	f7fa f98f 	bl	8005508 <HAL_GetTick>
 800b1ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b1ec:	e008      	b.n	800b200 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b1ee:	f7fa f98b 	bl	8005508 <HAL_GetTick>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d901      	bls.n	800b200 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e2d3      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b200:	4b11      	ldr	r3, [pc, #68]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0304 	and.w	r3, r3, #4
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d0f0      	beq.n	800b1ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b20c:	4b0e      	ldr	r3, [pc, #56]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	061b      	lsls	r3, r3, #24
 800b21a:	490b      	ldr	r1, [pc, #44]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b21c:	4313      	orrs	r3, r2
 800b21e:	604b      	str	r3, [r1, #4]
 800b220:	e01a      	b.n	800b258 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b222:	4b09      	ldr	r3, [pc, #36]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a08      	ldr	r2, [pc, #32]	@ (800b248 <HAL_RCC_OscConfig+0x244>)
 800b228:	f023 0301 	bic.w	r3, r3, #1
 800b22c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b22e:	f7fa f96b 	bl	8005508 <HAL_GetTick>
 800b232:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b234:	e00a      	b.n	800b24c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b236:	f7fa f967 	bl	8005508 <HAL_GetTick>
 800b23a:	4602      	mov	r2, r0
 800b23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23e:	1ad3      	subs	r3, r2, r3
 800b240:	2b02      	cmp	r3, #2
 800b242:	d903      	bls.n	800b24c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b244:	2303      	movs	r3, #3
 800b246:	e2af      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
 800b248:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b24c:	4b96      	ldr	r3, [pc, #600]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 0304 	and.w	r3, r3, #4
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1ee      	bne.n	800b236 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f003 0310 	and.w	r3, r3, #16
 800b260:	2b00      	cmp	r3, #0
 800b262:	d06a      	beq.n	800b33a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b264:	4b90      	ldr	r3, [pc, #576]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b266:	691b      	ldr	r3, [r3, #16]
 800b268:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b26c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b26e:	4b8e      	ldr	r3, [pc, #568]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b272:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	2b08      	cmp	r3, #8
 800b278:	d007      	beq.n	800b28a <HAL_RCC_OscConfig+0x286>
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	2b18      	cmp	r3, #24
 800b27e:	d11b      	bne.n	800b2b8 <HAL_RCC_OscConfig+0x2b4>
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	f003 0303 	and.w	r3, r3, #3
 800b286:	2b01      	cmp	r3, #1
 800b288:	d116      	bne.n	800b2b8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b28a:	4b87      	ldr	r3, [pc, #540]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b292:	2b00      	cmp	r3, #0
 800b294:	d005      	beq.n	800b2a2 <HAL_RCC_OscConfig+0x29e>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	69db      	ldr	r3, [r3, #28]
 800b29a:	2b80      	cmp	r3, #128	@ 0x80
 800b29c:	d001      	beq.n	800b2a2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e282      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b2a2:	4b81      	ldr	r3, [pc, #516]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	061b      	lsls	r3, r3, #24
 800b2b0:	497d      	ldr	r1, [pc, #500]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b2b6:	e040      	b.n	800b33a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	69db      	ldr	r3, [r3, #28]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d023      	beq.n	800b308 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b2c0:	4b79      	ldr	r3, [pc, #484]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a78      	ldr	r2, [pc, #480]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b2c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2cc:	f7fa f91c 	bl	8005508 <HAL_GetTick>
 800b2d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b2d2:	e008      	b.n	800b2e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b2d4:	f7fa f918 	bl	8005508 <HAL_GetTick>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d901      	bls.n	800b2e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	e260      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b2e6:	4b70      	ldr	r3, [pc, #448]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d0f0      	beq.n	800b2d4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b2f2:	4b6d      	ldr	r3, [pc, #436]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	061b      	lsls	r3, r3, #24
 800b300:	4969      	ldr	r1, [pc, #420]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b302:	4313      	orrs	r3, r2
 800b304:	60cb      	str	r3, [r1, #12]
 800b306:	e018      	b.n	800b33a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b308:	4b67      	ldr	r3, [pc, #412]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a66      	ldr	r2, [pc, #408]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b30e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b314:	f7fa f8f8 	bl	8005508 <HAL_GetTick>
 800b318:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b31a:	e008      	b.n	800b32e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b31c:	f7fa f8f4 	bl	8005508 <HAL_GetTick>
 800b320:	4602      	mov	r2, r0
 800b322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	2b02      	cmp	r3, #2
 800b328:	d901      	bls.n	800b32e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800b32a:	2303      	movs	r3, #3
 800b32c:	e23c      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b32e:	4b5e      	ldr	r3, [pc, #376]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1f0      	bne.n	800b31c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f003 0308 	and.w	r3, r3, #8
 800b342:	2b00      	cmp	r3, #0
 800b344:	d036      	beq.n	800b3b4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	695b      	ldr	r3, [r3, #20]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d019      	beq.n	800b382 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b34e:	4b56      	ldr	r3, [pc, #344]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b352:	4a55      	ldr	r2, [pc, #340]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b354:	f043 0301 	orr.w	r3, r3, #1
 800b358:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b35a:	f7fa f8d5 	bl	8005508 <HAL_GetTick>
 800b35e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b360:	e008      	b.n	800b374 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b362:	f7fa f8d1 	bl	8005508 <HAL_GetTick>
 800b366:	4602      	mov	r2, r0
 800b368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d901      	bls.n	800b374 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800b370:	2303      	movs	r3, #3
 800b372:	e219      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b374:	4b4c      	ldr	r3, [pc, #304]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b378:	f003 0302 	and.w	r3, r3, #2
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d0f0      	beq.n	800b362 <HAL_RCC_OscConfig+0x35e>
 800b380:	e018      	b.n	800b3b4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b382:	4b49      	ldr	r3, [pc, #292]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b386:	4a48      	ldr	r2, [pc, #288]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b388:	f023 0301 	bic.w	r3, r3, #1
 800b38c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b38e:	f7fa f8bb 	bl	8005508 <HAL_GetTick>
 800b392:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b394:	e008      	b.n	800b3a8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b396:	f7fa f8b7 	bl	8005508 <HAL_GetTick>
 800b39a:	4602      	mov	r2, r0
 800b39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39e:	1ad3      	subs	r3, r2, r3
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d901      	bls.n	800b3a8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e1ff      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b3a8:	4b3f      	ldr	r3, [pc, #252]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b3aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3ac:	f003 0302 	and.w	r3, r3, #2
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1f0      	bne.n	800b396 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f003 0320 	and.w	r3, r3, #32
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d036      	beq.n	800b42e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d019      	beq.n	800b3fc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b3c8:	4b37      	ldr	r3, [pc, #220]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a36      	ldr	r2, [pc, #216]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b3ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b3d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b3d4:	f7fa f898 	bl	8005508 <HAL_GetTick>
 800b3d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b3da:	e008      	b.n	800b3ee <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b3dc:	f7fa f894 	bl	8005508 <HAL_GetTick>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	d901      	bls.n	800b3ee <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800b3ea:	2303      	movs	r3, #3
 800b3ec:	e1dc      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b3ee:	4b2e      	ldr	r3, [pc, #184]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d0f0      	beq.n	800b3dc <HAL_RCC_OscConfig+0x3d8>
 800b3fa:	e018      	b.n	800b42e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b3fc:	4b2a      	ldr	r3, [pc, #168]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a29      	ldr	r2, [pc, #164]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b402:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b406:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b408:	f7fa f87e 	bl	8005508 <HAL_GetTick>
 800b40c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b40e:	e008      	b.n	800b422 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b410:	f7fa f87a 	bl	8005508 <HAL_GetTick>
 800b414:	4602      	mov	r2, r0
 800b416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b418:	1ad3      	subs	r3, r2, r3
 800b41a:	2b02      	cmp	r3, #2
 800b41c:	d901      	bls.n	800b422 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b41e:	2303      	movs	r3, #3
 800b420:	e1c2      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b422:	4b21      	ldr	r3, [pc, #132]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1f0      	bne.n	800b410 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 0304 	and.w	r3, r3, #4
 800b436:	2b00      	cmp	r3, #0
 800b438:	f000 8086 	beq.w	800b548 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b43c:	4b1b      	ldr	r3, [pc, #108]	@ (800b4ac <HAL_RCC_OscConfig+0x4a8>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a1a      	ldr	r2, [pc, #104]	@ (800b4ac <HAL_RCC_OscConfig+0x4a8>)
 800b442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b446:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b448:	f7fa f85e 	bl	8005508 <HAL_GetTick>
 800b44c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b44e:	e008      	b.n	800b462 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b450:	f7fa f85a 	bl	8005508 <HAL_GetTick>
 800b454:	4602      	mov	r2, r0
 800b456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	2b64      	cmp	r3, #100	@ 0x64
 800b45c:	d901      	bls.n	800b462 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b45e:	2303      	movs	r3, #3
 800b460:	e1a2      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b462:	4b12      	ldr	r3, [pc, #72]	@ (800b4ac <HAL_RCC_OscConfig+0x4a8>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d0f0      	beq.n	800b450 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d106      	bne.n	800b484 <HAL_RCC_OscConfig+0x480>
 800b476:	4b0c      	ldr	r3, [pc, #48]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b47a:	4a0b      	ldr	r2, [pc, #44]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b47c:	f043 0301 	orr.w	r3, r3, #1
 800b480:	6713      	str	r3, [r2, #112]	@ 0x70
 800b482:	e032      	b.n	800b4ea <HAL_RCC_OscConfig+0x4e6>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d111      	bne.n	800b4b0 <HAL_RCC_OscConfig+0x4ac>
 800b48c:	4b06      	ldr	r3, [pc, #24]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b48e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b490:	4a05      	ldr	r2, [pc, #20]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b492:	f023 0301 	bic.w	r3, r3, #1
 800b496:	6713      	str	r3, [r2, #112]	@ 0x70
 800b498:	4b03      	ldr	r3, [pc, #12]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b49a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b49c:	4a02      	ldr	r2, [pc, #8]	@ (800b4a8 <HAL_RCC_OscConfig+0x4a4>)
 800b49e:	f023 0304 	bic.w	r3, r3, #4
 800b4a2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b4a4:	e021      	b.n	800b4ea <HAL_RCC_OscConfig+0x4e6>
 800b4a6:	bf00      	nop
 800b4a8:	58024400 	.word	0x58024400
 800b4ac:	58024800 	.word	0x58024800
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	2b05      	cmp	r3, #5
 800b4b6:	d10c      	bne.n	800b4d2 <HAL_RCC_OscConfig+0x4ce>
 800b4b8:	4b83      	ldr	r3, [pc, #524]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b4ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4bc:	4a82      	ldr	r2, [pc, #520]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b4be:	f043 0304 	orr.w	r3, r3, #4
 800b4c2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b4c4:	4b80      	ldr	r3, [pc, #512]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b4c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4c8:	4a7f      	ldr	r2, [pc, #508]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b4ca:	f043 0301 	orr.w	r3, r3, #1
 800b4ce:	6713      	str	r3, [r2, #112]	@ 0x70
 800b4d0:	e00b      	b.n	800b4ea <HAL_RCC_OscConfig+0x4e6>
 800b4d2:	4b7d      	ldr	r3, [pc, #500]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b4d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4d6:	4a7c      	ldr	r2, [pc, #496]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b4d8:	f023 0301 	bic.w	r3, r3, #1
 800b4dc:	6713      	str	r3, [r2, #112]	@ 0x70
 800b4de:	4b7a      	ldr	r3, [pc, #488]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b4e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4e2:	4a79      	ldr	r2, [pc, #484]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b4e4:	f023 0304 	bic.w	r3, r3, #4
 800b4e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d015      	beq.n	800b51e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4f2:	f7fa f809 	bl	8005508 <HAL_GetTick>
 800b4f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b4f8:	e00a      	b.n	800b510 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4fa:	f7fa f805 	bl	8005508 <HAL_GetTick>
 800b4fe:	4602      	mov	r2, r0
 800b500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b508:	4293      	cmp	r3, r2
 800b50a:	d901      	bls.n	800b510 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b50c:	2303      	movs	r3, #3
 800b50e:	e14b      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b510:	4b6d      	ldr	r3, [pc, #436]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b514:	f003 0302 	and.w	r3, r3, #2
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d0ee      	beq.n	800b4fa <HAL_RCC_OscConfig+0x4f6>
 800b51c:	e014      	b.n	800b548 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b51e:	f7f9 fff3 	bl	8005508 <HAL_GetTick>
 800b522:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b524:	e00a      	b.n	800b53c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b526:	f7f9 ffef 	bl	8005508 <HAL_GetTick>
 800b52a:	4602      	mov	r2, r0
 800b52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b534:	4293      	cmp	r3, r2
 800b536:	d901      	bls.n	800b53c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b538:	2303      	movs	r3, #3
 800b53a:	e135      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b53c:	4b62      	ldr	r3, [pc, #392]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b53e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b540:	f003 0302 	and.w	r3, r3, #2
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1ee      	bne.n	800b526 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f000 812a 	beq.w	800b7a6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b552:	4b5d      	ldr	r3, [pc, #372]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b55a:	2b18      	cmp	r3, #24
 800b55c:	f000 80ba 	beq.w	800b6d4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b564:	2b02      	cmp	r3, #2
 800b566:	f040 8095 	bne.w	800b694 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b56a:	4b57      	ldr	r3, [pc, #348]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a56      	ldr	r2, [pc, #344]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b570:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b576:	f7f9 ffc7 	bl	8005508 <HAL_GetTick>
 800b57a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b57c:	e008      	b.n	800b590 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b57e:	f7f9 ffc3 	bl	8005508 <HAL_GetTick>
 800b582:	4602      	mov	r2, r0
 800b584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b586:	1ad3      	subs	r3, r2, r3
 800b588:	2b02      	cmp	r3, #2
 800b58a:	d901      	bls.n	800b590 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b58c:	2303      	movs	r3, #3
 800b58e:	e10b      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b590:	4b4d      	ldr	r3, [pc, #308]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1f0      	bne.n	800b57e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b59c:	4b4a      	ldr	r3, [pc, #296]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b59e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b5a0:	4b4a      	ldr	r3, [pc, #296]	@ (800b6cc <HAL_RCC_OscConfig+0x6c8>)
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b5ac:	0112      	lsls	r2, r2, #4
 800b5ae:	430a      	orrs	r2, r1
 800b5b0:	4945      	ldr	r1, [pc, #276]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	628b      	str	r3, [r1, #40]	@ 0x28
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	025b      	lsls	r3, r3, #9
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	431a      	orrs	r2, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	041b      	lsls	r3, r3, #16
 800b5d4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b5d8:	431a      	orrs	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	061b      	lsls	r3, r3, #24
 800b5e2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b5e6:	4938      	ldr	r1, [pc, #224]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b5ec:	4b36      	ldr	r3, [pc, #216]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f0:	4a35      	ldr	r2, [pc, #212]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b5f2:	f023 0301 	bic.w	r3, r3, #1
 800b5f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b5f8:	4b33      	ldr	r3, [pc, #204]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b5fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b5fc:	4b34      	ldr	r3, [pc, #208]	@ (800b6d0 <HAL_RCC_OscConfig+0x6cc>)
 800b5fe:	4013      	ands	r3, r2
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b604:	00d2      	lsls	r2, r2, #3
 800b606:	4930      	ldr	r1, [pc, #192]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b608:	4313      	orrs	r3, r2
 800b60a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b60c:	4b2e      	ldr	r3, [pc, #184]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b610:	f023 020c 	bic.w	r2, r3, #12
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b618:	492b      	ldr	r1, [pc, #172]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b61a:	4313      	orrs	r3, r2
 800b61c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b61e:	4b2a      	ldr	r3, [pc, #168]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b622:	f023 0202 	bic.w	r2, r3, #2
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b62a:	4927      	ldr	r1, [pc, #156]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b62c:	4313      	orrs	r3, r2
 800b62e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b630:	4b25      	ldr	r3, [pc, #148]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b634:	4a24      	ldr	r2, [pc, #144]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b63a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b63c:	4b22      	ldr	r3, [pc, #136]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b63e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b640:	4a21      	ldr	r2, [pc, #132]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b646:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b648:	4b1f      	ldr	r3, [pc, #124]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b64a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b64c:	4a1e      	ldr	r2, [pc, #120]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b64e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b654:	4b1c      	ldr	r3, [pc, #112]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b658:	4a1b      	ldr	r2, [pc, #108]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b65a:	f043 0301 	orr.w	r3, r3, #1
 800b65e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b660:	4b19      	ldr	r3, [pc, #100]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a18      	ldr	r2, [pc, #96]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b66a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b66c:	f7f9 ff4c 	bl	8005508 <HAL_GetTick>
 800b670:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b672:	e008      	b.n	800b686 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b674:	f7f9 ff48 	bl	8005508 <HAL_GetTick>
 800b678:	4602      	mov	r2, r0
 800b67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d901      	bls.n	800b686 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b682:	2303      	movs	r3, #3
 800b684:	e090      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b686:	4b10      	ldr	r3, [pc, #64]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d0f0      	beq.n	800b674 <HAL_RCC_OscConfig+0x670>
 800b692:	e088      	b.n	800b7a6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b694:	4b0c      	ldr	r3, [pc, #48]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a0b      	ldr	r2, [pc, #44]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b69a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b69e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6a0:	f7f9 ff32 	bl	8005508 <HAL_GetTick>
 800b6a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b6a6:	e008      	b.n	800b6ba <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6a8:	f7f9 ff2e 	bl	8005508 <HAL_GetTick>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d901      	bls.n	800b6ba <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	e076      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b6ba:	4b03      	ldr	r3, [pc, #12]	@ (800b6c8 <HAL_RCC_OscConfig+0x6c4>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1f0      	bne.n	800b6a8 <HAL_RCC_OscConfig+0x6a4>
 800b6c6:	e06e      	b.n	800b7a6 <HAL_RCC_OscConfig+0x7a2>
 800b6c8:	58024400 	.word	0x58024400
 800b6cc:	fffffc0c 	.word	0xfffffc0c
 800b6d0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b6d4:	4b36      	ldr	r3, [pc, #216]	@ (800b7b0 <HAL_RCC_OscConfig+0x7ac>)
 800b6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b6da:	4b35      	ldr	r3, [pc, #212]	@ (800b7b0 <HAL_RCC_OscConfig+0x7ac>)
 800b6dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d031      	beq.n	800b74c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	f003 0203 	and.w	r2, r3, #3
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d12a      	bne.n	800b74c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	091b      	lsrs	r3, r3, #4
 800b6fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b702:	429a      	cmp	r2, r3
 800b704:	d122      	bne.n	800b74c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b710:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b712:	429a      	cmp	r2, r3
 800b714:	d11a      	bne.n	800b74c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	0a5b      	lsrs	r3, r3, #9
 800b71a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b722:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b724:	429a      	cmp	r2, r3
 800b726:	d111      	bne.n	800b74c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	0c1b      	lsrs	r3, r3, #16
 800b72c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b734:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b736:	429a      	cmp	r2, r3
 800b738:	d108      	bne.n	800b74c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	0e1b      	lsrs	r3, r3, #24
 800b73e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b746:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b748:	429a      	cmp	r2, r3
 800b74a:	d001      	beq.n	800b750 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b74c:	2301      	movs	r3, #1
 800b74e:	e02b      	b.n	800b7a8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b750:	4b17      	ldr	r3, [pc, #92]	@ (800b7b0 <HAL_RCC_OscConfig+0x7ac>)
 800b752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b754:	08db      	lsrs	r3, r3, #3
 800b756:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b75a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	429a      	cmp	r2, r3
 800b764:	d01f      	beq.n	800b7a6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b766:	4b12      	ldr	r3, [pc, #72]	@ (800b7b0 <HAL_RCC_OscConfig+0x7ac>)
 800b768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b76a:	4a11      	ldr	r2, [pc, #68]	@ (800b7b0 <HAL_RCC_OscConfig+0x7ac>)
 800b76c:	f023 0301 	bic.w	r3, r3, #1
 800b770:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b772:	f7f9 fec9 	bl	8005508 <HAL_GetTick>
 800b776:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b778:	bf00      	nop
 800b77a:	f7f9 fec5 	bl	8005508 <HAL_GetTick>
 800b77e:	4602      	mov	r2, r0
 800b780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b782:	4293      	cmp	r3, r2
 800b784:	d0f9      	beq.n	800b77a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b786:	4b0a      	ldr	r3, [pc, #40]	@ (800b7b0 <HAL_RCC_OscConfig+0x7ac>)
 800b788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b78a:	4b0a      	ldr	r3, [pc, #40]	@ (800b7b4 <HAL_RCC_OscConfig+0x7b0>)
 800b78c:	4013      	ands	r3, r2
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b792:	00d2      	lsls	r2, r2, #3
 800b794:	4906      	ldr	r1, [pc, #24]	@ (800b7b0 <HAL_RCC_OscConfig+0x7ac>)
 800b796:	4313      	orrs	r3, r2
 800b798:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b79a:	4b05      	ldr	r3, [pc, #20]	@ (800b7b0 <HAL_RCC_OscConfig+0x7ac>)
 800b79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b79e:	4a04      	ldr	r2, [pc, #16]	@ (800b7b0 <HAL_RCC_OscConfig+0x7ac>)
 800b7a0:	f043 0301 	orr.w	r3, r3, #1
 800b7a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3730      	adds	r7, #48	@ 0x30
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	58024400 	.word	0x58024400
 800b7b4:	ffff0007 	.word	0xffff0007

0800b7b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d101      	bne.n	800b7cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e19c      	b.n	800bb06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b7cc:	4b8a      	ldr	r3, [pc, #552]	@ (800b9f8 <HAL_RCC_ClockConfig+0x240>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f003 030f 	and.w	r3, r3, #15
 800b7d4:	683a      	ldr	r2, [r7, #0]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d910      	bls.n	800b7fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7da:	4b87      	ldr	r3, [pc, #540]	@ (800b9f8 <HAL_RCC_ClockConfig+0x240>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f023 020f 	bic.w	r2, r3, #15
 800b7e2:	4985      	ldr	r1, [pc, #532]	@ (800b9f8 <HAL_RCC_ClockConfig+0x240>)
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7ea:	4b83      	ldr	r3, [pc, #524]	@ (800b9f8 <HAL_RCC_ClockConfig+0x240>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 030f 	and.w	r3, r3, #15
 800b7f2:	683a      	ldr	r2, [r7, #0]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d001      	beq.n	800b7fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e184      	b.n	800bb06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f003 0304 	and.w	r3, r3, #4
 800b804:	2b00      	cmp	r3, #0
 800b806:	d010      	beq.n	800b82a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	691a      	ldr	r2, [r3, #16]
 800b80c:	4b7b      	ldr	r3, [pc, #492]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b814:	429a      	cmp	r2, r3
 800b816:	d908      	bls.n	800b82a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b818:	4b78      	ldr	r3, [pc, #480]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	4975      	ldr	r1, [pc, #468]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b826:	4313      	orrs	r3, r2
 800b828:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f003 0308 	and.w	r3, r3, #8
 800b832:	2b00      	cmp	r3, #0
 800b834:	d010      	beq.n	800b858 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	695a      	ldr	r2, [r3, #20]
 800b83a:	4b70      	ldr	r3, [pc, #448]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b83c:	69db      	ldr	r3, [r3, #28]
 800b83e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b842:	429a      	cmp	r2, r3
 800b844:	d908      	bls.n	800b858 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b846:	4b6d      	ldr	r3, [pc, #436]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b848:	69db      	ldr	r3, [r3, #28]
 800b84a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	695b      	ldr	r3, [r3, #20]
 800b852:	496a      	ldr	r1, [pc, #424]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b854:	4313      	orrs	r3, r2
 800b856:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 0310 	and.w	r3, r3, #16
 800b860:	2b00      	cmp	r3, #0
 800b862:	d010      	beq.n	800b886 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	699a      	ldr	r2, [r3, #24]
 800b868:	4b64      	ldr	r3, [pc, #400]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b86a:	69db      	ldr	r3, [r3, #28]
 800b86c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b870:	429a      	cmp	r2, r3
 800b872:	d908      	bls.n	800b886 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b874:	4b61      	ldr	r3, [pc, #388]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b876:	69db      	ldr	r3, [r3, #28]
 800b878:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	699b      	ldr	r3, [r3, #24]
 800b880:	495e      	ldr	r1, [pc, #376]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b882:	4313      	orrs	r3, r2
 800b884:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f003 0320 	and.w	r3, r3, #32
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d010      	beq.n	800b8b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	69da      	ldr	r2, [r3, #28]
 800b896:	4b59      	ldr	r3, [pc, #356]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b898:	6a1b      	ldr	r3, [r3, #32]
 800b89a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d908      	bls.n	800b8b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b8a2:	4b56      	ldr	r3, [pc, #344]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b8a4:	6a1b      	ldr	r3, [r3, #32]
 800b8a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	69db      	ldr	r3, [r3, #28]
 800b8ae:	4953      	ldr	r1, [pc, #332]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f003 0302 	and.w	r3, r3, #2
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d010      	beq.n	800b8e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	68da      	ldr	r2, [r3, #12]
 800b8c4:	4b4d      	ldr	r3, [pc, #308]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	f003 030f 	and.w	r3, r3, #15
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d908      	bls.n	800b8e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b8d0:	4b4a      	ldr	r3, [pc, #296]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b8d2:	699b      	ldr	r3, [r3, #24]
 800b8d4:	f023 020f 	bic.w	r2, r3, #15
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	4947      	ldr	r1, [pc, #284]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f003 0301 	and.w	r3, r3, #1
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d055      	beq.n	800b99a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b8ee:	4b43      	ldr	r3, [pc, #268]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b8f0:	699b      	ldr	r3, [r3, #24]
 800b8f2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	4940      	ldr	r1, [pc, #256]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	2b02      	cmp	r3, #2
 800b906:	d107      	bne.n	800b918 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b908:	4b3c      	ldr	r3, [pc, #240]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b910:	2b00      	cmp	r3, #0
 800b912:	d121      	bne.n	800b958 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b914:	2301      	movs	r3, #1
 800b916:	e0f6      	b.n	800bb06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	2b03      	cmp	r3, #3
 800b91e:	d107      	bne.n	800b930 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b920:	4b36      	ldr	r3, [pc, #216]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d115      	bne.n	800b958 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b92c:	2301      	movs	r3, #1
 800b92e:	e0ea      	b.n	800bb06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	2b01      	cmp	r3, #1
 800b936:	d107      	bne.n	800b948 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b938:	4b30      	ldr	r3, [pc, #192]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b940:	2b00      	cmp	r3, #0
 800b942:	d109      	bne.n	800b958 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b944:	2301      	movs	r3, #1
 800b946:	e0de      	b.n	800bb06 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b948:	4b2c      	ldr	r3, [pc, #176]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f003 0304 	and.w	r3, r3, #4
 800b950:	2b00      	cmp	r3, #0
 800b952:	d101      	bne.n	800b958 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	e0d6      	b.n	800bb06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b958:	4b28      	ldr	r3, [pc, #160]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	f023 0207 	bic.w	r2, r3, #7
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	4925      	ldr	r1, [pc, #148]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b966:	4313      	orrs	r3, r2
 800b968:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b96a:	f7f9 fdcd 	bl	8005508 <HAL_GetTick>
 800b96e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b970:	e00a      	b.n	800b988 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b972:	f7f9 fdc9 	bl	8005508 <HAL_GetTick>
 800b976:	4602      	mov	r2, r0
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	1ad3      	subs	r3, r2, r3
 800b97c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b980:	4293      	cmp	r3, r2
 800b982:	d901      	bls.n	800b988 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e0be      	b.n	800bb06 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b988:	4b1c      	ldr	r3, [pc, #112]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b98a:	691b      	ldr	r3, [r3, #16]
 800b98c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	00db      	lsls	r3, r3, #3
 800b996:	429a      	cmp	r2, r3
 800b998:	d1eb      	bne.n	800b972 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 0302 	and.w	r3, r3, #2
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d010      	beq.n	800b9c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	68da      	ldr	r2, [r3, #12]
 800b9aa:	4b14      	ldr	r3, [pc, #80]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b9ac:	699b      	ldr	r3, [r3, #24]
 800b9ae:	f003 030f 	and.w	r3, r3, #15
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d208      	bcs.n	800b9c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b9b6:	4b11      	ldr	r3, [pc, #68]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b9b8:	699b      	ldr	r3, [r3, #24]
 800b9ba:	f023 020f 	bic.w	r2, r3, #15
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	490e      	ldr	r1, [pc, #56]	@ (800b9fc <HAL_RCC_ClockConfig+0x244>)
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b9c8:	4b0b      	ldr	r3, [pc, #44]	@ (800b9f8 <HAL_RCC_ClockConfig+0x240>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f003 030f 	and.w	r3, r3, #15
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d214      	bcs.n	800ba00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9d6:	4b08      	ldr	r3, [pc, #32]	@ (800b9f8 <HAL_RCC_ClockConfig+0x240>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f023 020f 	bic.w	r2, r3, #15
 800b9de:	4906      	ldr	r1, [pc, #24]	@ (800b9f8 <HAL_RCC_ClockConfig+0x240>)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9e6:	4b04      	ldr	r3, [pc, #16]	@ (800b9f8 <HAL_RCC_ClockConfig+0x240>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f003 030f 	and.w	r3, r3, #15
 800b9ee:	683a      	ldr	r2, [r7, #0]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d005      	beq.n	800ba00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e086      	b.n	800bb06 <HAL_RCC_ClockConfig+0x34e>
 800b9f8:	52002000 	.word	0x52002000
 800b9fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f003 0304 	and.w	r3, r3, #4
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d010      	beq.n	800ba2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	691a      	ldr	r2, [r3, #16]
 800ba10:	4b3f      	ldr	r3, [pc, #252]	@ (800bb10 <HAL_RCC_ClockConfig+0x358>)
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d208      	bcs.n	800ba2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ba1c:	4b3c      	ldr	r3, [pc, #240]	@ (800bb10 <HAL_RCC_ClockConfig+0x358>)
 800ba1e:	699b      	ldr	r3, [r3, #24]
 800ba20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	691b      	ldr	r3, [r3, #16]
 800ba28:	4939      	ldr	r1, [pc, #228]	@ (800bb10 <HAL_RCC_ClockConfig+0x358>)
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f003 0308 	and.w	r3, r3, #8
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d010      	beq.n	800ba5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	695a      	ldr	r2, [r3, #20]
 800ba3e:	4b34      	ldr	r3, [pc, #208]	@ (800bb10 <HAL_RCC_ClockConfig+0x358>)
 800ba40:	69db      	ldr	r3, [r3, #28]
 800ba42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d208      	bcs.n	800ba5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ba4a:	4b31      	ldr	r3, [pc, #196]	@ (800bb10 <HAL_RCC_ClockConfig+0x358>)
 800ba4c:	69db      	ldr	r3, [r3, #28]
 800ba4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	492e      	ldr	r1, [pc, #184]	@ (800bb10 <HAL_RCC_ClockConfig+0x358>)
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 0310 	and.w	r3, r3, #16
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d010      	beq.n	800ba8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	699a      	ldr	r2, [r3, #24]
 800ba6c:	4b28      	ldr	r3, [pc, #160]	@ (800bb10 <HAL_RCC_ClockConfig+0x358>)
 800ba6e:	69db      	ldr	r3, [r3, #28]
 800ba70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d208      	bcs.n	800ba8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ba78:	4b25      	ldr	r3, [pc, #148]	@ (800bb10 <HAL_RCC_ClockConfig+0x358>)
 800ba7a:	69db      	ldr	r3, [r3, #28]
 800ba7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	4922      	ldr	r1, [pc, #136]	@ (800bb10 <HAL_RCC_ClockConfig+0x358>)
 800ba86:	4313      	orrs	r3, r2
 800ba88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f003 0320 	and.w	r3, r3, #32
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d010      	beq.n	800bab8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	69da      	ldr	r2, [r3, #28]
 800ba9a:	4b1d      	ldr	r3, [pc, #116]	@ (800bb10 <HAL_RCC_ClockConfig+0x358>)
 800ba9c:	6a1b      	ldr	r3, [r3, #32]
 800ba9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d208      	bcs.n	800bab8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800baa6:	4b1a      	ldr	r3, [pc, #104]	@ (800bb10 <HAL_RCC_ClockConfig+0x358>)
 800baa8:	6a1b      	ldr	r3, [r3, #32]
 800baaa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	69db      	ldr	r3, [r3, #28]
 800bab2:	4917      	ldr	r1, [pc, #92]	@ (800bb10 <HAL_RCC_ClockConfig+0x358>)
 800bab4:	4313      	orrs	r3, r2
 800bab6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bab8:	f000 f834 	bl	800bb24 <HAL_RCC_GetSysClockFreq>
 800babc:	4602      	mov	r2, r0
 800babe:	4b14      	ldr	r3, [pc, #80]	@ (800bb10 <HAL_RCC_ClockConfig+0x358>)
 800bac0:	699b      	ldr	r3, [r3, #24]
 800bac2:	0a1b      	lsrs	r3, r3, #8
 800bac4:	f003 030f 	and.w	r3, r3, #15
 800bac8:	4912      	ldr	r1, [pc, #72]	@ (800bb14 <HAL_RCC_ClockConfig+0x35c>)
 800baca:	5ccb      	ldrb	r3, [r1, r3]
 800bacc:	f003 031f 	and.w	r3, r3, #31
 800bad0:	fa22 f303 	lsr.w	r3, r2, r3
 800bad4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bad6:	4b0e      	ldr	r3, [pc, #56]	@ (800bb10 <HAL_RCC_ClockConfig+0x358>)
 800bad8:	699b      	ldr	r3, [r3, #24]
 800bada:	f003 030f 	and.w	r3, r3, #15
 800bade:	4a0d      	ldr	r2, [pc, #52]	@ (800bb14 <HAL_RCC_ClockConfig+0x35c>)
 800bae0:	5cd3      	ldrb	r3, [r2, r3]
 800bae2:	f003 031f 	and.w	r3, r3, #31
 800bae6:	693a      	ldr	r2, [r7, #16]
 800bae8:	fa22 f303 	lsr.w	r3, r2, r3
 800baec:	4a0a      	ldr	r2, [pc, #40]	@ (800bb18 <HAL_RCC_ClockConfig+0x360>)
 800baee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800baf0:	4a0a      	ldr	r2, [pc, #40]	@ (800bb1c <HAL_RCC_ClockConfig+0x364>)
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800baf6:	4b0a      	ldr	r3, [pc, #40]	@ (800bb20 <HAL_RCC_ClockConfig+0x368>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7f9 fcba 	bl	8005474 <HAL_InitTick>
 800bb00:	4603      	mov	r3, r0
 800bb02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3718      	adds	r7, #24
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	58024400 	.word	0x58024400
 800bb14:	080172a8 	.word	0x080172a8
 800bb18:	24000010 	.word	0x24000010
 800bb1c:	2400000c 	.word	0x2400000c
 800bb20:	24000014 	.word	0x24000014

0800bb24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b089      	sub	sp, #36	@ 0x24
 800bb28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bb2a:	4bb3      	ldr	r3, [pc, #716]	@ (800bdf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb2c:	691b      	ldr	r3, [r3, #16]
 800bb2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb32:	2b18      	cmp	r3, #24
 800bb34:	f200 8155 	bhi.w	800bde2 <HAL_RCC_GetSysClockFreq+0x2be>
 800bb38:	a201      	add	r2, pc, #4	@ (adr r2, 800bb40 <HAL_RCC_GetSysClockFreq+0x1c>)
 800bb3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb3e:	bf00      	nop
 800bb40:	0800bba5 	.word	0x0800bba5
 800bb44:	0800bde3 	.word	0x0800bde3
 800bb48:	0800bde3 	.word	0x0800bde3
 800bb4c:	0800bde3 	.word	0x0800bde3
 800bb50:	0800bde3 	.word	0x0800bde3
 800bb54:	0800bde3 	.word	0x0800bde3
 800bb58:	0800bde3 	.word	0x0800bde3
 800bb5c:	0800bde3 	.word	0x0800bde3
 800bb60:	0800bbcb 	.word	0x0800bbcb
 800bb64:	0800bde3 	.word	0x0800bde3
 800bb68:	0800bde3 	.word	0x0800bde3
 800bb6c:	0800bde3 	.word	0x0800bde3
 800bb70:	0800bde3 	.word	0x0800bde3
 800bb74:	0800bde3 	.word	0x0800bde3
 800bb78:	0800bde3 	.word	0x0800bde3
 800bb7c:	0800bde3 	.word	0x0800bde3
 800bb80:	0800bbd1 	.word	0x0800bbd1
 800bb84:	0800bde3 	.word	0x0800bde3
 800bb88:	0800bde3 	.word	0x0800bde3
 800bb8c:	0800bde3 	.word	0x0800bde3
 800bb90:	0800bde3 	.word	0x0800bde3
 800bb94:	0800bde3 	.word	0x0800bde3
 800bb98:	0800bde3 	.word	0x0800bde3
 800bb9c:	0800bde3 	.word	0x0800bde3
 800bba0:	0800bbd7 	.word	0x0800bbd7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bba4:	4b94      	ldr	r3, [pc, #592]	@ (800bdf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f003 0320 	and.w	r3, r3, #32
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d009      	beq.n	800bbc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbb0:	4b91      	ldr	r3, [pc, #580]	@ (800bdf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	08db      	lsrs	r3, r3, #3
 800bbb6:	f003 0303 	and.w	r3, r3, #3
 800bbba:	4a90      	ldr	r2, [pc, #576]	@ (800bdfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bbbc:	fa22 f303 	lsr.w	r3, r2, r3
 800bbc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800bbc2:	e111      	b.n	800bde8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bbc4:	4b8d      	ldr	r3, [pc, #564]	@ (800bdfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bbc6:	61bb      	str	r3, [r7, #24]
      break;
 800bbc8:	e10e      	b.n	800bde8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800bbca:	4b8d      	ldr	r3, [pc, #564]	@ (800be00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bbcc:	61bb      	str	r3, [r7, #24]
      break;
 800bbce:	e10b      	b.n	800bde8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800bbd0:	4b8c      	ldr	r3, [pc, #560]	@ (800be04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800bbd2:	61bb      	str	r3, [r7, #24]
      break;
 800bbd4:	e108      	b.n	800bde8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbd6:	4b88      	ldr	r3, [pc, #544]	@ (800bdf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbda:	f003 0303 	and.w	r3, r3, #3
 800bbde:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800bbe0:	4b85      	ldr	r3, [pc, #532]	@ (800bdf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbe4:	091b      	lsrs	r3, r3, #4
 800bbe6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bbea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bbec:	4b82      	ldr	r3, [pc, #520]	@ (800bdf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf0:	f003 0301 	and.w	r3, r3, #1
 800bbf4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bbf6:	4b80      	ldr	r3, [pc, #512]	@ (800bdf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbfa:	08db      	lsrs	r3, r3, #3
 800bbfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	fb02 f303 	mul.w	r3, r2, r3
 800bc06:	ee07 3a90 	vmov	s15, r3
 800bc0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 80e1 	beq.w	800bddc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	f000 8083 	beq.w	800bd28 <HAL_RCC_GetSysClockFreq+0x204>
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	f200 80a1 	bhi.w	800bd6c <HAL_RCC_GetSysClockFreq+0x248>
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d003      	beq.n	800bc38 <HAL_RCC_GetSysClockFreq+0x114>
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d056      	beq.n	800bce4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800bc36:	e099      	b.n	800bd6c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc38:	4b6f      	ldr	r3, [pc, #444]	@ (800bdf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f003 0320 	and.w	r3, r3, #32
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d02d      	beq.n	800bca0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc44:	4b6c      	ldr	r3, [pc, #432]	@ (800bdf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	08db      	lsrs	r3, r3, #3
 800bc4a:	f003 0303 	and.w	r3, r3, #3
 800bc4e:	4a6b      	ldr	r2, [pc, #428]	@ (800bdfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bc50:	fa22 f303 	lsr.w	r3, r2, r3
 800bc54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	ee07 3a90 	vmov	s15, r3
 800bc5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	ee07 3a90 	vmov	s15, r3
 800bc66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc6e:	4b62      	ldr	r3, [pc, #392]	@ (800bdf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc76:	ee07 3a90 	vmov	s15, r3
 800bc7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc7e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bc82:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800be08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bc86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800bc9e:	e087      	b.n	800bdb0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	ee07 3a90 	vmov	s15, r3
 800bca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcaa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800be0c <HAL_RCC_GetSysClockFreq+0x2e8>
 800bcae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcb2:	4b51      	ldr	r3, [pc, #324]	@ (800bdf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bcb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcba:	ee07 3a90 	vmov	s15, r3
 800bcbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcc2:	ed97 6a02 	vldr	s12, [r7, #8]
 800bcc6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800be08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bcca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bce2:	e065      	b.n	800bdb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	ee07 3a90 	vmov	s15, r3
 800bcea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800be10 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bcf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcf6:	4b40      	ldr	r3, [pc, #256]	@ (800bdf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bcf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcfe:	ee07 3a90 	vmov	s15, r3
 800bd02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd06:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd0a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800be08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bd0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bd26:	e043      	b.n	800bdb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	ee07 3a90 	vmov	s15, r3
 800bd2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd32:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800be14 <HAL_RCC_GetSysClockFreq+0x2f0>
 800bd36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd3a:	4b2f      	ldr	r3, [pc, #188]	@ (800bdf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bd3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd42:	ee07 3a90 	vmov	s15, r3
 800bd46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd4a:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd4e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800be08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bd52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bd6a:	e021      	b.n	800bdb0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	ee07 3a90 	vmov	s15, r3
 800bd72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd76:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800be10 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bd7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd7e:	4b1e      	ldr	r3, [pc, #120]	@ (800bdf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bd80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd86:	ee07 3a90 	vmov	s15, r3
 800bd8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd8e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd92:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800be08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bd96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bda2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bdae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800bdb0:	4b11      	ldr	r3, [pc, #68]	@ (800bdf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bdb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdb4:	0a5b      	lsrs	r3, r3, #9
 800bdb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdba:	3301      	adds	r3, #1
 800bdbc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	ee07 3a90 	vmov	s15, r3
 800bdc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bdc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdd4:	ee17 3a90 	vmov	r3, s15
 800bdd8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800bdda:	e005      	b.n	800bde8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800bddc:	2300      	movs	r3, #0
 800bdde:	61bb      	str	r3, [r7, #24]
      break;
 800bde0:	e002      	b.n	800bde8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800bde2:	4b07      	ldr	r3, [pc, #28]	@ (800be00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bde4:	61bb      	str	r3, [r7, #24]
      break;
 800bde6:	bf00      	nop
  }

  return sysclockfreq;
 800bde8:	69bb      	ldr	r3, [r7, #24]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3724      	adds	r7, #36	@ 0x24
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	58024400 	.word	0x58024400
 800bdfc:	03d09000 	.word	0x03d09000
 800be00:	003d0900 	.word	0x003d0900
 800be04:	017d7840 	.word	0x017d7840
 800be08:	46000000 	.word	0x46000000
 800be0c:	4c742400 	.word	0x4c742400
 800be10:	4a742400 	.word	0x4a742400
 800be14:	4bbebc20 	.word	0x4bbebc20

0800be18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800be18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be1c:	b0c6      	sub	sp, #280	@ 0x118
 800be1e:	af00      	add	r7, sp, #0
 800be20:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800be24:	2300      	movs	r3, #0
 800be26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800be2a:	2300      	movs	r3, #0
 800be2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800be30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800be3c:	2500      	movs	r5, #0
 800be3e:	ea54 0305 	orrs.w	r3, r4, r5
 800be42:	d049      	beq.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800be44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800be4e:	d02f      	beq.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800be50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800be54:	d828      	bhi.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800be56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800be5a:	d01a      	beq.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800be5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800be60:	d822      	bhi.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800be62:	2b00      	cmp	r3, #0
 800be64:	d003      	beq.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800be66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be6a:	d007      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800be6c:	e01c      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be6e:	4bab      	ldr	r3, [pc, #684]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be72:	4aaa      	ldr	r2, [pc, #680]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800be7a:	e01a      	b.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be80:	3308      	adds	r3, #8
 800be82:	2102      	movs	r1, #2
 800be84:	4618      	mov	r0, r3
 800be86:	f001 f967 	bl	800d158 <RCCEx_PLL2_Config>
 800be8a:	4603      	mov	r3, r0
 800be8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800be90:	e00f      	b.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be96:	3328      	adds	r3, #40	@ 0x28
 800be98:	2102      	movs	r1, #2
 800be9a:	4618      	mov	r0, r3
 800be9c:	f001 fa0e 	bl	800d2bc <RCCEx_PLL3_Config>
 800bea0:	4603      	mov	r3, r0
 800bea2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bea6:	e004      	b.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800beae:	e000      	b.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800beb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10a      	bne.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800beba:	4b98      	ldr	r3, [pc, #608]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bebe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bec6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bec8:	4a94      	ldr	r2, [pc, #592]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800beca:	430b      	orrs	r3, r1
 800becc:	6513      	str	r3, [r2, #80]	@ 0x50
 800bece:	e003      	b.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bed0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bed4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800bee4:	f04f 0900 	mov.w	r9, #0
 800bee8:	ea58 0309 	orrs.w	r3, r8, r9
 800beec:	d047      	beq.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800beee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bef4:	2b04      	cmp	r3, #4
 800bef6:	d82a      	bhi.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800bef8:	a201      	add	r2, pc, #4	@ (adr r2, 800bf00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800befa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befe:	bf00      	nop
 800bf00:	0800bf15 	.word	0x0800bf15
 800bf04:	0800bf23 	.word	0x0800bf23
 800bf08:	0800bf39 	.word	0x0800bf39
 800bf0c:	0800bf57 	.word	0x0800bf57
 800bf10:	0800bf57 	.word	0x0800bf57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf14:	4b81      	ldr	r3, [pc, #516]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bf16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf18:	4a80      	ldr	r2, [pc, #512]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bf1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bf20:	e01a      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf26:	3308      	adds	r3, #8
 800bf28:	2100      	movs	r1, #0
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f001 f914 	bl	800d158 <RCCEx_PLL2_Config>
 800bf30:	4603      	mov	r3, r0
 800bf32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bf36:	e00f      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bf38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf3c:	3328      	adds	r3, #40	@ 0x28
 800bf3e:	2100      	movs	r1, #0
 800bf40:	4618      	mov	r0, r3
 800bf42:	f001 f9bb 	bl	800d2bc <RCCEx_PLL3_Config>
 800bf46:	4603      	mov	r3, r0
 800bf48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bf4c:	e004      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf54:	e000      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bf56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10a      	bne.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bf60:	4b6e      	ldr	r3, [pc, #440]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bf62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf64:	f023 0107 	bic.w	r1, r3, #7
 800bf68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf6e:	4a6b      	ldr	r2, [pc, #428]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bf70:	430b      	orrs	r3, r1
 800bf72:	6513      	str	r3, [r2, #80]	@ 0x50
 800bf74:	e003      	b.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bf7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf86:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800bf8a:	f04f 0b00 	mov.w	fp, #0
 800bf8e:	ea5a 030b 	orrs.w	r3, sl, fp
 800bf92:	d05b      	beq.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bf9c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bfa0:	d03b      	beq.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bfa2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bfa6:	d834      	bhi.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bfa8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bfac:	d037      	beq.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bfae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bfb2:	d82e      	bhi.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bfb4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bfb8:	d033      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bfba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bfbe:	d828      	bhi.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bfc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bfc4:	d01a      	beq.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800bfc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bfca:	d822      	bhi.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d003      	beq.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800bfd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bfd4:	d007      	beq.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800bfd6:	e01c      	b.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfd8:	4b50      	ldr	r3, [pc, #320]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bfda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfdc:	4a4f      	ldr	r2, [pc, #316]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bfde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bfe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bfe4:	e01e      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfea:	3308      	adds	r3, #8
 800bfec:	2100      	movs	r1, #0
 800bfee:	4618      	mov	r0, r3
 800bff0:	f001 f8b2 	bl	800d158 <RCCEx_PLL2_Config>
 800bff4:	4603      	mov	r3, r0
 800bff6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bffa:	e013      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c000:	3328      	adds	r3, #40	@ 0x28
 800c002:	2100      	movs	r1, #0
 800c004:	4618      	mov	r0, r3
 800c006:	f001 f959 	bl	800d2bc <RCCEx_PLL3_Config>
 800c00a:	4603      	mov	r3, r0
 800c00c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c010:	e008      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c018:	e004      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c01a:	bf00      	nop
 800c01c:	e002      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c01e:	bf00      	nop
 800c020:	e000      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c022:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c024:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10b      	bne.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c02c:	4b3b      	ldr	r3, [pc, #236]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c02e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c030:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c038:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c03c:	4a37      	ldr	r2, [pc, #220]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c03e:	430b      	orrs	r3, r1
 800c040:	6593      	str	r3, [r2, #88]	@ 0x58
 800c042:	e003      	b.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c048:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c054:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c058:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c05c:	2300      	movs	r3, #0
 800c05e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c062:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c066:	460b      	mov	r3, r1
 800c068:	4313      	orrs	r3, r2
 800c06a:	d05d      	beq.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c070:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c074:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c078:	d03b      	beq.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c07a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c07e:	d834      	bhi.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c080:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c084:	d037      	beq.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800c086:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c08a:	d82e      	bhi.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c08c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c090:	d033      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800c092:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c096:	d828      	bhi.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c098:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c09c:	d01a      	beq.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800c09e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c0a2:	d822      	bhi.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d003      	beq.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c0a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c0ac:	d007      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c0ae:	e01c      	b.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0b0:	4b1a      	ldr	r3, [pc, #104]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0b4:	4a19      	ldr	r2, [pc, #100]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c0b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c0ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c0bc:	e01e      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0c2:	3308      	adds	r3, #8
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f001 f846 	bl	800d158 <RCCEx_PLL2_Config>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c0d2:	e013      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0d8:	3328      	adds	r3, #40	@ 0x28
 800c0da:	2100      	movs	r1, #0
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f001 f8ed 	bl	800d2bc <RCCEx_PLL3_Config>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c0e8:	e008      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c0f0:	e004      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c0f2:	bf00      	nop
 800c0f4:	e002      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c0f6:	bf00      	nop
 800c0f8:	e000      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c0fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10d      	bne.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c104:	4b05      	ldr	r3, [pc, #20]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c108:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c110:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c114:	4a01      	ldr	r2, [pc, #4]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c116:	430b      	orrs	r3, r1
 800c118:	6593      	str	r3, [r2, #88]	@ 0x58
 800c11a:	e005      	b.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800c11c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c120:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c124:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c130:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c134:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c138:	2300      	movs	r3, #0
 800c13a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c13e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c142:	460b      	mov	r3, r1
 800c144:	4313      	orrs	r3, r2
 800c146:	d03a      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c14c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c14e:	2b30      	cmp	r3, #48	@ 0x30
 800c150:	d01f      	beq.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800c152:	2b30      	cmp	r3, #48	@ 0x30
 800c154:	d819      	bhi.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c156:	2b20      	cmp	r3, #32
 800c158:	d00c      	beq.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c15a:	2b20      	cmp	r3, #32
 800c15c:	d815      	bhi.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d019      	beq.n	800c196 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c162:	2b10      	cmp	r3, #16
 800c164:	d111      	bne.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c166:	4baa      	ldr	r3, [pc, #680]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c16a:	4aa9      	ldr	r2, [pc, #676]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c16c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c170:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c172:	e011      	b.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c178:	3308      	adds	r3, #8
 800c17a:	2102      	movs	r1, #2
 800c17c:	4618      	mov	r0, r3
 800c17e:	f000 ffeb 	bl	800d158 <RCCEx_PLL2_Config>
 800c182:	4603      	mov	r3, r0
 800c184:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c188:	e006      	b.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c190:	e002      	b.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c192:	bf00      	nop
 800c194:	e000      	b.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c196:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c198:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d10a      	bne.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c1a0:	4b9b      	ldr	r3, [pc, #620]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c1a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1ae:	4a98      	ldr	r2, [pc, #608]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c1b0:	430b      	orrs	r3, r1
 800c1b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c1b4:	e003      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c1be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c1ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c1d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800c1d8:	460b      	mov	r3, r1
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	d051      	beq.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c1e8:	d035      	beq.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800c1ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c1ee:	d82e      	bhi.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c1f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c1f4:	d031      	beq.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800c1f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c1fa:	d828      	bhi.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c1fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c200:	d01a      	beq.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800c202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c206:	d822      	bhi.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d003      	beq.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800c20c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c210:	d007      	beq.n	800c222 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800c212:	e01c      	b.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c214:	4b7e      	ldr	r3, [pc, #504]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c218:	4a7d      	ldr	r2, [pc, #500]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c21a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c21e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c220:	e01c      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c226:	3308      	adds	r3, #8
 800c228:	2100      	movs	r1, #0
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 ff94 	bl	800d158 <RCCEx_PLL2_Config>
 800c230:	4603      	mov	r3, r0
 800c232:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c236:	e011      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c23c:	3328      	adds	r3, #40	@ 0x28
 800c23e:	2100      	movs	r1, #0
 800c240:	4618      	mov	r0, r3
 800c242:	f001 f83b 	bl	800d2bc <RCCEx_PLL3_Config>
 800c246:	4603      	mov	r3, r0
 800c248:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c24c:	e006      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c24e:	2301      	movs	r3, #1
 800c250:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c254:	e002      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c256:	bf00      	nop
 800c258:	e000      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c25a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c25c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c260:	2b00      	cmp	r3, #0
 800c262:	d10a      	bne.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c264:	4b6a      	ldr	r3, [pc, #424]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c268:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c272:	4a67      	ldr	r2, [pc, #412]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c274:	430b      	orrs	r3, r1
 800c276:	6513      	str	r3, [r2, #80]	@ 0x50
 800c278:	e003      	b.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c27a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c27e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800c28e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c292:	2300      	movs	r3, #0
 800c294:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c298:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800c29c:	460b      	mov	r3, r1
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	d053      	beq.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c2ac:	d033      	beq.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800c2ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c2b2:	d82c      	bhi.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c2b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c2b8:	d02f      	beq.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800c2ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c2be:	d826      	bhi.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c2c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c2c4:	d02b      	beq.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c2c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c2ca:	d820      	bhi.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c2cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2d0:	d012      	beq.n	800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800c2d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2d6:	d81a      	bhi.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d022      	beq.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800c2dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2e0:	d115      	bne.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2e6:	3308      	adds	r3, #8
 800c2e8:	2101      	movs	r1, #1
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f000 ff34 	bl	800d158 <RCCEx_PLL2_Config>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c2f6:	e015      	b.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2fc:	3328      	adds	r3, #40	@ 0x28
 800c2fe:	2101      	movs	r1, #1
 800c300:	4618      	mov	r0, r3
 800c302:	f000 ffdb 	bl	800d2bc <RCCEx_PLL3_Config>
 800c306:	4603      	mov	r3, r0
 800c308:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c30c:	e00a      	b.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c30e:	2301      	movs	r3, #1
 800c310:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c314:	e006      	b.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c316:	bf00      	nop
 800c318:	e004      	b.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c31a:	bf00      	nop
 800c31c:	e002      	b.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c31e:	bf00      	nop
 800c320:	e000      	b.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c322:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10a      	bne.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c32c:	4b38      	ldr	r3, [pc, #224]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c32e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c330:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c33a:	4a35      	ldr	r2, [pc, #212]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c33c:	430b      	orrs	r3, r1
 800c33e:	6513      	str	r3, [r2, #80]	@ 0x50
 800c340:	e003      	b.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c342:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c346:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c352:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800c356:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c35a:	2300      	movs	r3, #0
 800c35c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c360:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c364:	460b      	mov	r3, r1
 800c366:	4313      	orrs	r3, r2
 800c368:	d058      	beq.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c36e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c372:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c376:	d033      	beq.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c378:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c37c:	d82c      	bhi.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c37e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c382:	d02f      	beq.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c388:	d826      	bhi.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c38a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c38e:	d02b      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c390:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c394:	d820      	bhi.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c39a:	d012      	beq.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c39c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3a0:	d81a      	bhi.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d022      	beq.n	800c3ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c3a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3aa:	d115      	bne.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b0:	3308      	adds	r3, #8
 800c3b2:	2101      	movs	r1, #1
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f000 fecf 	bl	800d158 <RCCEx_PLL2_Config>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c3c0:	e015      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3c6:	3328      	adds	r3, #40	@ 0x28
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 ff76 	bl	800d2bc <RCCEx_PLL3_Config>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c3d6:	e00a      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c3de:	e006      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c3e0:	bf00      	nop
 800c3e2:	e004      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c3e4:	bf00      	nop
 800c3e6:	e002      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c3e8:	bf00      	nop
 800c3ea:	e000      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c3ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d10e      	bne.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c3f6:	4b06      	ldr	r3, [pc, #24]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c3f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c402:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c406:	4a02      	ldr	r2, [pc, #8]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c408:	430b      	orrs	r3, r1
 800c40a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c40c:	e006      	b.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c40e:	bf00      	nop
 800c410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c418:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c424:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c428:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c42c:	2300      	movs	r3, #0
 800c42e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c432:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c436:	460b      	mov	r3, r1
 800c438:	4313      	orrs	r3, r2
 800c43a:	d037      	beq.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c442:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c446:	d00e      	beq.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c44c:	d816      	bhi.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d018      	beq.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c456:	d111      	bne.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c458:	4bc4      	ldr	r3, [pc, #784]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c45c:	4ac3      	ldr	r2, [pc, #780]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c45e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c464:	e00f      	b.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c46a:	3308      	adds	r3, #8
 800c46c:	2101      	movs	r1, #1
 800c46e:	4618      	mov	r0, r3
 800c470:	f000 fe72 	bl	800d158 <RCCEx_PLL2_Config>
 800c474:	4603      	mov	r3, r0
 800c476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c47a:	e004      	b.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c47c:	2301      	movs	r3, #1
 800c47e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c482:	e000      	b.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c484:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c486:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10a      	bne.n	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c48e:	4bb7      	ldr	r3, [pc, #732]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c492:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c49a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c49c:	4ab3      	ldr	r2, [pc, #716]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c49e:	430b      	orrs	r3, r1
 800c4a0:	6513      	str	r3, [r2, #80]	@ 0x50
 800c4a2:	e003      	b.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c4b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c4bc:	2300      	movs	r3, #0
 800c4be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c4c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c4c6:	460b      	mov	r3, r1
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	d039      	beq.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4d2:	2b03      	cmp	r3, #3
 800c4d4:	d81c      	bhi.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c4d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c4dc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4dc:	0800c519 	.word	0x0800c519
 800c4e0:	0800c4ed 	.word	0x0800c4ed
 800c4e4:	0800c4fb 	.word	0x0800c4fb
 800c4e8:	0800c519 	.word	0x0800c519
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4ec:	4b9f      	ldr	r3, [pc, #636]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4f0:	4a9e      	ldr	r2, [pc, #632]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c4f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c4f8:	e00f      	b.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4fe:	3308      	adds	r3, #8
 800c500:	2102      	movs	r1, #2
 800c502:	4618      	mov	r0, r3
 800c504:	f000 fe28 	bl	800d158 <RCCEx_PLL2_Config>
 800c508:	4603      	mov	r3, r0
 800c50a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c50e:	e004      	b.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c510:	2301      	movs	r3, #1
 800c512:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c516:	e000      	b.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c51a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10a      	bne.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c522:	4b92      	ldr	r3, [pc, #584]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c526:	f023 0103 	bic.w	r1, r3, #3
 800c52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c52e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c530:	4a8e      	ldr	r2, [pc, #568]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c532:	430b      	orrs	r3, r1
 800c534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c536:	e003      	b.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c53c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c548:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c54c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c550:	2300      	movs	r3, #0
 800c552:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c556:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c55a:	460b      	mov	r3, r1
 800c55c:	4313      	orrs	r3, r2
 800c55e:	f000 8099 	beq.w	800c694 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c562:	4b83      	ldr	r3, [pc, #524]	@ (800c770 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a82      	ldr	r2, [pc, #520]	@ (800c770 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c56c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c56e:	f7f8 ffcb 	bl	8005508 <HAL_GetTick>
 800c572:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c576:	e00b      	b.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c578:	f7f8 ffc6 	bl	8005508 <HAL_GetTick>
 800c57c:	4602      	mov	r2, r0
 800c57e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c582:	1ad3      	subs	r3, r2, r3
 800c584:	2b64      	cmp	r3, #100	@ 0x64
 800c586:	d903      	bls.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c588:	2303      	movs	r3, #3
 800c58a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c58e:	e005      	b.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c590:	4b77      	ldr	r3, [pc, #476]	@ (800c770 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d0ed      	beq.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c59c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d173      	bne.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c5a4:	4b71      	ldr	r3, [pc, #452]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c5b0:	4053      	eors	r3, r2
 800c5b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d015      	beq.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c5ba:	4b6c      	ldr	r3, [pc, #432]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c5c2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c5c6:	4b69      	ldr	r3, [pc, #420]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5ca:	4a68      	ldr	r2, [pc, #416]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c5d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c5d2:	4b66      	ldr	r3, [pc, #408]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5d6:	4a65      	ldr	r2, [pc, #404]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c5dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c5de:	4a63      	ldr	r2, [pc, #396]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c5ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5f2:	d118      	bne.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5f4:	f7f8 ff88 	bl	8005508 <HAL_GetTick>
 800c5f8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c5fc:	e00d      	b.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c5fe:	f7f8 ff83 	bl	8005508 <HAL_GetTick>
 800c602:	4602      	mov	r2, r0
 800c604:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c608:	1ad2      	subs	r2, r2, r3
 800c60a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c60e:	429a      	cmp	r2, r3
 800c610:	d903      	bls.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c612:	2303      	movs	r3, #3
 800c614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c618:	e005      	b.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c61a:	4b54      	ldr	r3, [pc, #336]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c61c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c61e:	f003 0302 	and.w	r3, r3, #2
 800c622:	2b00      	cmp	r3, #0
 800c624:	d0eb      	beq.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c626:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d129      	bne.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c632:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c63a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c63e:	d10e      	bne.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c640:	4b4a      	ldr	r3, [pc, #296]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c64c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c650:	091a      	lsrs	r2, r3, #4
 800c652:	4b48      	ldr	r3, [pc, #288]	@ (800c774 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c654:	4013      	ands	r3, r2
 800c656:	4a45      	ldr	r2, [pc, #276]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c658:	430b      	orrs	r3, r1
 800c65a:	6113      	str	r3, [r2, #16]
 800c65c:	e005      	b.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c65e:	4b43      	ldr	r3, [pc, #268]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c660:	691b      	ldr	r3, [r3, #16]
 800c662:	4a42      	ldr	r2, [pc, #264]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c664:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c668:	6113      	str	r3, [r2, #16]
 800c66a:	4b40      	ldr	r3, [pc, #256]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c66c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c66e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c672:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c67a:	4a3c      	ldr	r2, [pc, #240]	@ (800c76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c67c:	430b      	orrs	r3, r1
 800c67e:	6713      	str	r3, [r2, #112]	@ 0x70
 800c680:	e008      	b.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c682:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c686:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c68a:	e003      	b.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c68c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c690:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69c:	f002 0301 	and.w	r3, r2, #1
 800c6a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c6aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	f000 808f 	beq.w	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c6bc:	2b28      	cmp	r3, #40	@ 0x28
 800c6be:	d871      	bhi.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c6c0:	a201      	add	r2, pc, #4	@ (adr r2, 800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c6:	bf00      	nop
 800c6c8:	0800c7ad 	.word	0x0800c7ad
 800c6cc:	0800c7a5 	.word	0x0800c7a5
 800c6d0:	0800c7a5 	.word	0x0800c7a5
 800c6d4:	0800c7a5 	.word	0x0800c7a5
 800c6d8:	0800c7a5 	.word	0x0800c7a5
 800c6dc:	0800c7a5 	.word	0x0800c7a5
 800c6e0:	0800c7a5 	.word	0x0800c7a5
 800c6e4:	0800c7a5 	.word	0x0800c7a5
 800c6e8:	0800c779 	.word	0x0800c779
 800c6ec:	0800c7a5 	.word	0x0800c7a5
 800c6f0:	0800c7a5 	.word	0x0800c7a5
 800c6f4:	0800c7a5 	.word	0x0800c7a5
 800c6f8:	0800c7a5 	.word	0x0800c7a5
 800c6fc:	0800c7a5 	.word	0x0800c7a5
 800c700:	0800c7a5 	.word	0x0800c7a5
 800c704:	0800c7a5 	.word	0x0800c7a5
 800c708:	0800c78f 	.word	0x0800c78f
 800c70c:	0800c7a5 	.word	0x0800c7a5
 800c710:	0800c7a5 	.word	0x0800c7a5
 800c714:	0800c7a5 	.word	0x0800c7a5
 800c718:	0800c7a5 	.word	0x0800c7a5
 800c71c:	0800c7a5 	.word	0x0800c7a5
 800c720:	0800c7a5 	.word	0x0800c7a5
 800c724:	0800c7a5 	.word	0x0800c7a5
 800c728:	0800c7ad 	.word	0x0800c7ad
 800c72c:	0800c7a5 	.word	0x0800c7a5
 800c730:	0800c7a5 	.word	0x0800c7a5
 800c734:	0800c7a5 	.word	0x0800c7a5
 800c738:	0800c7a5 	.word	0x0800c7a5
 800c73c:	0800c7a5 	.word	0x0800c7a5
 800c740:	0800c7a5 	.word	0x0800c7a5
 800c744:	0800c7a5 	.word	0x0800c7a5
 800c748:	0800c7ad 	.word	0x0800c7ad
 800c74c:	0800c7a5 	.word	0x0800c7a5
 800c750:	0800c7a5 	.word	0x0800c7a5
 800c754:	0800c7a5 	.word	0x0800c7a5
 800c758:	0800c7a5 	.word	0x0800c7a5
 800c75c:	0800c7a5 	.word	0x0800c7a5
 800c760:	0800c7a5 	.word	0x0800c7a5
 800c764:	0800c7a5 	.word	0x0800c7a5
 800c768:	0800c7ad 	.word	0x0800c7ad
 800c76c:	58024400 	.word	0x58024400
 800c770:	58024800 	.word	0x58024800
 800c774:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c77c:	3308      	adds	r3, #8
 800c77e:	2101      	movs	r1, #1
 800c780:	4618      	mov	r0, r3
 800c782:	f000 fce9 	bl	800d158 <RCCEx_PLL2_Config>
 800c786:	4603      	mov	r3, r0
 800c788:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c78c:	e00f      	b.n	800c7ae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c792:	3328      	adds	r3, #40	@ 0x28
 800c794:	2101      	movs	r1, #1
 800c796:	4618      	mov	r0, r3
 800c798:	f000 fd90 	bl	800d2bc <RCCEx_PLL3_Config>
 800c79c:	4603      	mov	r3, r0
 800c79e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c7a2:	e004      	b.n	800c7ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7aa:	e000      	b.n	800c7ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c7ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10a      	bne.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c7b6:	4bbf      	ldr	r3, [pc, #764]	@ (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c7b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7ba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c7c4:	4abb      	ldr	r2, [pc, #748]	@ (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c7c6:	430b      	orrs	r3, r1
 800c7c8:	6553      	str	r3, [r2, #84]	@ 0x54
 800c7ca:	e003      	b.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	f002 0302 	and.w	r3, r2, #2
 800c7e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c7ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	d041      	beq.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7fa:	2b05      	cmp	r3, #5
 800c7fc:	d824      	bhi.n	800c848 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c7fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c804 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c804:	0800c851 	.word	0x0800c851
 800c808:	0800c81d 	.word	0x0800c81d
 800c80c:	0800c833 	.word	0x0800c833
 800c810:	0800c851 	.word	0x0800c851
 800c814:	0800c851 	.word	0x0800c851
 800c818:	0800c851 	.word	0x0800c851
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c820:	3308      	adds	r3, #8
 800c822:	2101      	movs	r1, #1
 800c824:	4618      	mov	r0, r3
 800c826:	f000 fc97 	bl	800d158 <RCCEx_PLL2_Config>
 800c82a:	4603      	mov	r3, r0
 800c82c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c830:	e00f      	b.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c836:	3328      	adds	r3, #40	@ 0x28
 800c838:	2101      	movs	r1, #1
 800c83a:	4618      	mov	r0, r3
 800c83c:	f000 fd3e 	bl	800d2bc <RCCEx_PLL3_Config>
 800c840:	4603      	mov	r3, r0
 800c842:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c846:	e004      	b.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c848:	2301      	movs	r3, #1
 800c84a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c84e:	e000      	b.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c850:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c852:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c856:	2b00      	cmp	r3, #0
 800c858:	d10a      	bne.n	800c870 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c85a:	4b96      	ldr	r3, [pc, #600]	@ (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c85c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c85e:	f023 0107 	bic.w	r1, r3, #7
 800c862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c868:	4a92      	ldr	r2, [pc, #584]	@ (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c86a:	430b      	orrs	r3, r1
 800c86c:	6553      	str	r3, [r2, #84]	@ 0x54
 800c86e:	e003      	b.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c874:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	f002 0304 	and.w	r3, r2, #4
 800c884:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c888:	2300      	movs	r3, #0
 800c88a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c88e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c892:	460b      	mov	r3, r1
 800c894:	4313      	orrs	r3, r2
 800c896:	d044      	beq.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c89c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8a0:	2b05      	cmp	r3, #5
 800c8a2:	d825      	bhi.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c8a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c8ac <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8aa:	bf00      	nop
 800c8ac:	0800c8f9 	.word	0x0800c8f9
 800c8b0:	0800c8c5 	.word	0x0800c8c5
 800c8b4:	0800c8db 	.word	0x0800c8db
 800c8b8:	0800c8f9 	.word	0x0800c8f9
 800c8bc:	0800c8f9 	.word	0x0800c8f9
 800c8c0:	0800c8f9 	.word	0x0800c8f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8c8:	3308      	adds	r3, #8
 800c8ca:	2101      	movs	r1, #1
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f000 fc43 	bl	800d158 <RCCEx_PLL2_Config>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c8d8:	e00f      	b.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8de:	3328      	adds	r3, #40	@ 0x28
 800c8e0:	2101      	movs	r1, #1
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f000 fcea 	bl	800d2bc <RCCEx_PLL3_Config>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c8ee:	e004      	b.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c8f6:	e000      	b.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c8f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10b      	bne.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c902:	4b6c      	ldr	r3, [pc, #432]	@ (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c906:	f023 0107 	bic.w	r1, r3, #7
 800c90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c90e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c912:	4a68      	ldr	r2, [pc, #416]	@ (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c914:	430b      	orrs	r3, r1
 800c916:	6593      	str	r3, [r2, #88]	@ 0x58
 800c918:	e003      	b.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c91a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c91e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92a:	f002 0320 	and.w	r3, r2, #32
 800c92e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c932:	2300      	movs	r3, #0
 800c934:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c938:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c93c:	460b      	mov	r3, r1
 800c93e:	4313      	orrs	r3, r2
 800c940:	d055      	beq.n	800c9ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c94a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c94e:	d033      	beq.n	800c9b8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c950:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c954:	d82c      	bhi.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c95a:	d02f      	beq.n	800c9bc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c95c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c960:	d826      	bhi.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c962:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c966:	d02b      	beq.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c968:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c96c:	d820      	bhi.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c96e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c972:	d012      	beq.n	800c99a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c974:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c978:	d81a      	bhi.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d022      	beq.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c97e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c982:	d115      	bne.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c988:	3308      	adds	r3, #8
 800c98a:	2100      	movs	r1, #0
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 fbe3 	bl	800d158 <RCCEx_PLL2_Config>
 800c992:	4603      	mov	r3, r0
 800c994:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c998:	e015      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c99e:	3328      	adds	r3, #40	@ 0x28
 800c9a0:	2102      	movs	r1, #2
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f000 fc8a 	bl	800d2bc <RCCEx_PLL3_Config>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c9ae:	e00a      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c9b6:	e006      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c9b8:	bf00      	nop
 800c9ba:	e004      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c9bc:	bf00      	nop
 800c9be:	e002      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c9c0:	bf00      	nop
 800c9c2:	e000      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c9c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d10b      	bne.n	800c9e6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c9ce:	4b39      	ldr	r3, [pc, #228]	@ (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c9d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c9de:	4a35      	ldr	r2, [pc, #212]	@ (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c9e0:	430b      	orrs	r3, r1
 800c9e2:	6553      	str	r3, [r2, #84]	@ 0x54
 800c9e4:	e003      	b.n	800c9ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c9fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c9fe:	2300      	movs	r3, #0
 800ca00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ca04:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	d058      	beq.n	800cac0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ca0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ca16:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ca1a:	d033      	beq.n	800ca84 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800ca1c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ca20:	d82c      	bhi.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ca22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca26:	d02f      	beq.n	800ca88 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ca28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca2c:	d826      	bhi.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ca2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ca32:	d02b      	beq.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800ca34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ca38:	d820      	bhi.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ca3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ca3e:	d012      	beq.n	800ca66 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800ca40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ca44:	d81a      	bhi.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d022      	beq.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ca4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca4e:	d115      	bne.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca54:	3308      	adds	r3, #8
 800ca56:	2100      	movs	r1, #0
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f000 fb7d 	bl	800d158 <RCCEx_PLL2_Config>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ca64:	e015      	b.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ca66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca6a:	3328      	adds	r3, #40	@ 0x28
 800ca6c:	2102      	movs	r1, #2
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f000 fc24 	bl	800d2bc <RCCEx_PLL3_Config>
 800ca74:	4603      	mov	r3, r0
 800ca76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ca7a:	e00a      	b.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ca82:	e006      	b.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ca84:	bf00      	nop
 800ca86:	e004      	b.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ca88:	bf00      	nop
 800ca8a:	e002      	b.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ca8c:	bf00      	nop
 800ca8e:	e000      	b.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ca90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10e      	bne.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ca9a:	4b06      	ldr	r3, [pc, #24]	@ (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ca9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca9e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800caa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800caaa:	4a02      	ldr	r2, [pc, #8]	@ (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800caac:	430b      	orrs	r3, r1
 800caae:	6593      	str	r3, [r2, #88]	@ 0x58
 800cab0:	e006      	b.n	800cac0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800cab2:	bf00      	nop
 800cab4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cab8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cabc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800cacc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cad0:	2300      	movs	r3, #0
 800cad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cad6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800cada:	460b      	mov	r3, r1
 800cadc:	4313      	orrs	r3, r2
 800cade:	d055      	beq.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800cae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cae4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cae8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800caec:	d033      	beq.n	800cb56 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800caee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800caf2:	d82c      	bhi.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800caf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800caf8:	d02f      	beq.n	800cb5a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800cafa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cafe:	d826      	bhi.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cb00:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800cb04:	d02b      	beq.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800cb06:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800cb0a:	d820      	bhi.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cb0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cb10:	d012      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800cb12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cb16:	d81a      	bhi.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d022      	beq.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800cb1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb20:	d115      	bne.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb26:	3308      	adds	r3, #8
 800cb28:	2100      	movs	r1, #0
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f000 fb14 	bl	800d158 <RCCEx_PLL2_Config>
 800cb30:	4603      	mov	r3, r0
 800cb32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cb36:	e015      	b.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb3c:	3328      	adds	r3, #40	@ 0x28
 800cb3e:	2102      	movs	r1, #2
 800cb40:	4618      	mov	r0, r3
 800cb42:	f000 fbbb 	bl	800d2bc <RCCEx_PLL3_Config>
 800cb46:	4603      	mov	r3, r0
 800cb48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cb4c:	e00a      	b.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cb54:	e006      	b.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cb56:	bf00      	nop
 800cb58:	e004      	b.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cb5a:	bf00      	nop
 800cb5c:	e002      	b.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cb5e:	bf00      	nop
 800cb60:	e000      	b.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cb62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d10b      	bne.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800cb6c:	4ba0      	ldr	r3, [pc, #640]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb70:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800cb74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cb7c:	4a9c      	ldr	r2, [pc, #624]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb7e:	430b      	orrs	r3, r1
 800cb80:	6593      	str	r3, [r2, #88]	@ 0x58
 800cb82:	e003      	b.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800cb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb94:	f002 0308 	and.w	r3, r2, #8
 800cb98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cba2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800cba6:	460b      	mov	r3, r1
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	d01e      	beq.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800cbac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbb8:	d10c      	bne.n	800cbd4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cbba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbbe:	3328      	adds	r3, #40	@ 0x28
 800cbc0:	2102      	movs	r1, #2
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f000 fb7a 	bl	800d2bc <RCCEx_PLL3_Config>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d002      	beq.n	800cbd4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800cbd4:	4b86      	ldr	r3, [pc, #536]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cbd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbd8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cbdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbe4:	4a82      	ldr	r2, [pc, #520]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cbe6:	430b      	orrs	r3, r1
 800cbe8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cbea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf2:	f002 0310 	and.w	r3, r2, #16
 800cbf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cc00:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800cc04:	460b      	mov	r3, r1
 800cc06:	4313      	orrs	r3, r2
 800cc08:	d01e      	beq.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800cc0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cc12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc16:	d10c      	bne.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cc18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc1c:	3328      	adds	r3, #40	@ 0x28
 800cc1e:	2102      	movs	r1, #2
 800cc20:	4618      	mov	r0, r3
 800cc22:	f000 fb4b 	bl	800d2bc <RCCEx_PLL3_Config>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d002      	beq.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cc32:	4b6f      	ldr	r3, [pc, #444]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cc34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cc3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cc42:	4a6b      	ldr	r2, [pc, #428]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cc44:	430b      	orrs	r3, r1
 800cc46:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cc48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800cc54:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cc56:	2300      	movs	r3, #0
 800cc58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cc5a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800cc5e:	460b      	mov	r3, r1
 800cc60:	4313      	orrs	r3, r2
 800cc62:	d03e      	beq.n	800cce2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800cc64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cc6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc70:	d022      	beq.n	800ccb8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800cc72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc76:	d81b      	bhi.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d003      	beq.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800cc7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc80:	d00b      	beq.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800cc82:	e015      	b.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc88:	3308      	adds	r3, #8
 800cc8a:	2100      	movs	r1, #0
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f000 fa63 	bl	800d158 <RCCEx_PLL2_Config>
 800cc92:	4603      	mov	r3, r0
 800cc94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800cc98:	e00f      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc9e:	3328      	adds	r3, #40	@ 0x28
 800cca0:	2102      	movs	r1, #2
 800cca2:	4618      	mov	r0, r3
 800cca4:	f000 fb0a 	bl	800d2bc <RCCEx_PLL3_Config>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ccae:	e004      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ccb6:	e000      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ccb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10b      	bne.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ccc2:	4b4b      	ldr	r3, [pc, #300]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ccc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccc6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ccca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ccd2:	4a47      	ldr	r2, [pc, #284]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ccd4:	430b      	orrs	r3, r1
 800ccd6:	6593      	str	r3, [r2, #88]	@ 0x58
 800ccd8:	e003      	b.n	800cce2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ccee:	673b      	str	r3, [r7, #112]	@ 0x70
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	677b      	str	r3, [r7, #116]	@ 0x74
 800ccf4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	d03b      	beq.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ccfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cd0a:	d01f      	beq.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800cd0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cd10:	d818      	bhi.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800cd12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cd16:	d003      	beq.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800cd18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cd1c:	d007      	beq.n	800cd2e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800cd1e:	e011      	b.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd20:	4b33      	ldr	r3, [pc, #204]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd24:	4a32      	ldr	r2, [pc, #200]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cd26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800cd2c:	e00f      	b.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd32:	3328      	adds	r3, #40	@ 0x28
 800cd34:	2101      	movs	r1, #1
 800cd36:	4618      	mov	r0, r3
 800cd38:	f000 fac0 	bl	800d2bc <RCCEx_PLL3_Config>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800cd42:	e004      	b.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cd4a:	e000      	b.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800cd4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10b      	bne.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cd56:	4b26      	ldr	r3, [pc, #152]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cd58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd5a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800cd5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd66:	4a22      	ldr	r2, [pc, #136]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cd68:	430b      	orrs	r3, r1
 800cd6a:	6553      	str	r3, [r2, #84]	@ 0x54
 800cd6c:	e003      	b.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800cd76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800cd82:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cd84:	2300      	movs	r3, #0
 800cd86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cd88:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	d034      	beq.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800cd92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d003      	beq.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800cd9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cda0:	d007      	beq.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800cda2:	e011      	b.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cda4:	4b12      	ldr	r3, [pc, #72]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cda8:	4a11      	ldr	r2, [pc, #68]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cdaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cdae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cdb0:	e00e      	b.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cdb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdb6:	3308      	adds	r3, #8
 800cdb8:	2102      	movs	r1, #2
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f000 f9cc 	bl	800d158 <RCCEx_PLL2_Config>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cdc6:	e003      	b.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cdce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d10d      	bne.n	800cdf4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cdd8:	4b05      	ldr	r3, [pc, #20]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cdda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cddc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cde0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cde4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cde6:	4a02      	ldr	r2, [pc, #8]	@ (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cde8:	430b      	orrs	r3, r1
 800cdea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cdec:	e006      	b.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800cdee:	bf00      	nop
 800cdf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cdfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce04:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ce08:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ce0e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ce12:	460b      	mov	r3, r1
 800ce14:	4313      	orrs	r3, r2
 800ce16:	d00c      	beq.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ce18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce1c:	3328      	adds	r3, #40	@ 0x28
 800ce1e:	2102      	movs	r1, #2
 800ce20:	4618      	mov	r0, r3
 800ce22:	f000 fa4b 	bl	800d2bc <RCCEx_PLL3_Config>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d002      	beq.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ce32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ce3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ce40:	2300      	movs	r3, #0
 800ce42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce44:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ce48:	460b      	mov	r3, r1
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	d036      	beq.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ce4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ce54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce58:	d018      	beq.n	800ce8c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ce5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce5e:	d811      	bhi.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ce60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce64:	d014      	beq.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ce66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce6a:	d80b      	bhi.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d011      	beq.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800ce70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce74:	d106      	bne.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce76:	4bb7      	ldr	r3, [pc, #732]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ce78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce7a:	4ab6      	ldr	r2, [pc, #728]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ce7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ce82:	e008      	b.n	800ce96 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce84:	2301      	movs	r3, #1
 800ce86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ce8a:	e004      	b.n	800ce96 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ce8c:	bf00      	nop
 800ce8e:	e002      	b.n	800ce96 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ce90:	bf00      	nop
 800ce92:	e000      	b.n	800ce96 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ce94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d10a      	bne.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ce9e:	4bad      	ldr	r3, [pc, #692]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cea2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ceac:	4aa9      	ldr	r2, [pc, #676]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ceae:	430b      	orrs	r3, r1
 800ceb0:	6553      	str	r3, [r2, #84]	@ 0x54
 800ceb2:	e003      	b.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ceb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ceb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800cec8:	653b      	str	r3, [r7, #80]	@ 0x50
 800ceca:	2300      	movs	r3, #0
 800cecc:	657b      	str	r3, [r7, #84]	@ 0x54
 800cece:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ced2:	460b      	mov	r3, r1
 800ced4:	4313      	orrs	r3, r2
 800ced6:	d009      	beq.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ced8:	4b9e      	ldr	r3, [pc, #632]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ceda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cedc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cee6:	4a9b      	ldr	r2, [pc, #620]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cee8:	430b      	orrs	r3, r1
 800ceea:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ceec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800cef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cefa:	2300      	movs	r3, #0
 800cefc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cefe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800cf02:	460b      	mov	r3, r1
 800cf04:	4313      	orrs	r3, r2
 800cf06:	d009      	beq.n	800cf1c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cf08:	4b92      	ldr	r3, [pc, #584]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf0c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800cf10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf16:	4a8f      	ldr	r2, [pc, #572]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf18:	430b      	orrs	r3, r1
 800cf1a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cf1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf24:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800cf28:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf2e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800cf32:	460b      	mov	r3, r1
 800cf34:	4313      	orrs	r3, r2
 800cf36:	d00e      	beq.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cf38:	4b86      	ldr	r3, [pc, #536]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf3a:	691b      	ldr	r3, [r3, #16]
 800cf3c:	4a85      	ldr	r2, [pc, #532]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cf42:	6113      	str	r3, [r2, #16]
 800cf44:	4b83      	ldr	r3, [pc, #524]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf46:	6919      	ldr	r1, [r3, #16]
 800cf48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cf50:	4a80      	ldr	r2, [pc, #512]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf52:	430b      	orrs	r3, r1
 800cf54:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cf56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800cf62:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf64:	2300      	movs	r3, #0
 800cf66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf68:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	d009      	beq.n	800cf86 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cf72:	4b78      	ldr	r3, [pc, #480]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf76:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cf7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf80:	4a74      	ldr	r2, [pc, #464]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf82:	430b      	orrs	r3, r1
 800cf84:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cf86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800cf92:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf94:	2300      	movs	r3, #0
 800cf96:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf98:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	d00a      	beq.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cfa2:	4b6c      	ldr	r3, [pc, #432]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cfa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfa6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cfaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfb2:	4a68      	ldr	r2, [pc, #416]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cfb4:	430b      	orrs	r3, r1
 800cfb6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cfb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc0:	2100      	movs	r1, #0
 800cfc2:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cfc4:	f003 0301 	and.w	r3, r3, #1
 800cfc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cfca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800cfce:	460b      	mov	r3, r1
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	d011      	beq.n	800cff8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cfd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfd8:	3308      	adds	r3, #8
 800cfda:	2100      	movs	r1, #0
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f000 f8bb 	bl	800d158 <RCCEx_PLL2_Config>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cfe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d003      	beq.n	800cff8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cff4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d000:	2100      	movs	r1, #0
 800d002:	6239      	str	r1, [r7, #32]
 800d004:	f003 0302 	and.w	r3, r3, #2
 800d008:	627b      	str	r3, [r7, #36]	@ 0x24
 800d00a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d00e:	460b      	mov	r3, r1
 800d010:	4313      	orrs	r3, r2
 800d012:	d011      	beq.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d018:	3308      	adds	r3, #8
 800d01a:	2101      	movs	r1, #1
 800d01c:	4618      	mov	r0, r3
 800d01e:	f000 f89b 	bl	800d158 <RCCEx_PLL2_Config>
 800d022:	4603      	mov	r3, r0
 800d024:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d003      	beq.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d034:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d040:	2100      	movs	r1, #0
 800d042:	61b9      	str	r1, [r7, #24]
 800d044:	f003 0304 	and.w	r3, r3, #4
 800d048:	61fb      	str	r3, [r7, #28]
 800d04a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d04e:	460b      	mov	r3, r1
 800d050:	4313      	orrs	r3, r2
 800d052:	d011      	beq.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d058:	3308      	adds	r3, #8
 800d05a:	2102      	movs	r1, #2
 800d05c:	4618      	mov	r0, r3
 800d05e:	f000 f87b 	bl	800d158 <RCCEx_PLL2_Config>
 800d062:	4603      	mov	r3, r0
 800d064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d003      	beq.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d074:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d080:	2100      	movs	r1, #0
 800d082:	6139      	str	r1, [r7, #16]
 800d084:	f003 0308 	and.w	r3, r3, #8
 800d088:	617b      	str	r3, [r7, #20]
 800d08a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d08e:	460b      	mov	r3, r1
 800d090:	4313      	orrs	r3, r2
 800d092:	d011      	beq.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d098:	3328      	adds	r3, #40	@ 0x28
 800d09a:	2100      	movs	r1, #0
 800d09c:	4618      	mov	r0, r3
 800d09e:	f000 f90d 	bl	800d2bc <RCCEx_PLL3_Config>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800d0a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d003      	beq.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d0b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c0:	2100      	movs	r1, #0
 800d0c2:	60b9      	str	r1, [r7, #8]
 800d0c4:	f003 0310 	and.w	r3, r3, #16
 800d0c8:	60fb      	str	r3, [r7, #12]
 800d0ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	d011      	beq.n	800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0d8:	3328      	adds	r3, #40	@ 0x28
 800d0da:	2101      	movs	r1, #1
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f000 f8ed 	bl	800d2bc <RCCEx_PLL3_Config>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d0e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d003      	beq.n	800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d100:	2100      	movs	r1, #0
 800d102:	6039      	str	r1, [r7, #0]
 800d104:	f003 0320 	and.w	r3, r3, #32
 800d108:	607b      	str	r3, [r7, #4]
 800d10a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d10e:	460b      	mov	r3, r1
 800d110:	4313      	orrs	r3, r2
 800d112:	d011      	beq.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d118:	3328      	adds	r3, #40	@ 0x28
 800d11a:	2102      	movs	r1, #2
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 f8cd 	bl	800d2bc <RCCEx_PLL3_Config>
 800d122:	4603      	mov	r3, r0
 800d124:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d128:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d003      	beq.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d130:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d134:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800d138:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d101      	bne.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800d140:	2300      	movs	r3, #0
 800d142:	e000      	b.n	800d146 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800d144:	2301      	movs	r3, #1
}
 800d146:	4618      	mov	r0, r3
 800d148:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800d14c:	46bd      	mov	sp, r7
 800d14e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d152:	bf00      	nop
 800d154:	58024400 	.word	0x58024400

0800d158 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d162:	2300      	movs	r3, #0
 800d164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d166:	4b53      	ldr	r3, [pc, #332]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d16a:	f003 0303 	and.w	r3, r3, #3
 800d16e:	2b03      	cmp	r3, #3
 800d170:	d101      	bne.n	800d176 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	e099      	b.n	800d2aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d176:	4b4f      	ldr	r3, [pc, #316]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4a4e      	ldr	r2, [pc, #312]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d17c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d182:	f7f8 f9c1 	bl	8005508 <HAL_GetTick>
 800d186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d188:	e008      	b.n	800d19c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d18a:	f7f8 f9bd 	bl	8005508 <HAL_GetTick>
 800d18e:	4602      	mov	r2, r0
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	1ad3      	subs	r3, r2, r3
 800d194:	2b02      	cmp	r3, #2
 800d196:	d901      	bls.n	800d19c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d198:	2303      	movs	r3, #3
 800d19a:	e086      	b.n	800d2aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d19c:	4b45      	ldr	r3, [pc, #276]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d1f0      	bne.n	800d18a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d1a8:	4b42      	ldr	r3, [pc, #264]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	031b      	lsls	r3, r3, #12
 800d1b6:	493f      	ldr	r1, [pc, #252]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	628b      	str	r3, [r1, #40]	@ 0x28
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	3b01      	subs	r3, #1
 800d1cc:	025b      	lsls	r3, r3, #9
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	431a      	orrs	r2, r3
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	041b      	lsls	r3, r3, #16
 800d1da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d1de:	431a      	orrs	r2, r3
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	691b      	ldr	r3, [r3, #16]
 800d1e4:	3b01      	subs	r3, #1
 800d1e6:	061b      	lsls	r3, r3, #24
 800d1e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d1ec:	4931      	ldr	r1, [pc, #196]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d1f2:	4b30      	ldr	r3, [pc, #192]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d1f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	695b      	ldr	r3, [r3, #20]
 800d1fe:	492d      	ldr	r1, [pc, #180]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d200:	4313      	orrs	r3, r2
 800d202:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d204:	4b2b      	ldr	r3, [pc, #172]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d208:	f023 0220 	bic.w	r2, r3, #32
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	699b      	ldr	r3, [r3, #24]
 800d210:	4928      	ldr	r1, [pc, #160]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d212:	4313      	orrs	r3, r2
 800d214:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d216:	4b27      	ldr	r3, [pc, #156]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d21a:	4a26      	ldr	r2, [pc, #152]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d21c:	f023 0310 	bic.w	r3, r3, #16
 800d220:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d222:	4b24      	ldr	r3, [pc, #144]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d224:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d226:	4b24      	ldr	r3, [pc, #144]	@ (800d2b8 <RCCEx_PLL2_Config+0x160>)
 800d228:	4013      	ands	r3, r2
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	69d2      	ldr	r2, [r2, #28]
 800d22e:	00d2      	lsls	r2, r2, #3
 800d230:	4920      	ldr	r1, [pc, #128]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d232:	4313      	orrs	r3, r2
 800d234:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d236:	4b1f      	ldr	r3, [pc, #124]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d23a:	4a1e      	ldr	r2, [pc, #120]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d23c:	f043 0310 	orr.w	r3, r3, #16
 800d240:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d106      	bne.n	800d256 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d248:	4b1a      	ldr	r3, [pc, #104]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d24c:	4a19      	ldr	r2, [pc, #100]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d24e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d252:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d254:	e00f      	b.n	800d276 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d106      	bne.n	800d26a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d25c:	4b15      	ldr	r3, [pc, #84]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d260:	4a14      	ldr	r2, [pc, #80]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d266:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d268:	e005      	b.n	800d276 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d26a:	4b12      	ldr	r3, [pc, #72]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d26c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d26e:	4a11      	ldr	r2, [pc, #68]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d270:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d274:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d276:	4b0f      	ldr	r3, [pc, #60]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a0e      	ldr	r2, [pc, #56]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d27c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d282:	f7f8 f941 	bl	8005508 <HAL_GetTick>
 800d286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d288:	e008      	b.n	800d29c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d28a:	f7f8 f93d 	bl	8005508 <HAL_GetTick>
 800d28e:	4602      	mov	r2, r0
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	1ad3      	subs	r3, r2, r3
 800d294:	2b02      	cmp	r3, #2
 800d296:	d901      	bls.n	800d29c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d298:	2303      	movs	r3, #3
 800d29a:	e006      	b.n	800d2aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d29c:	4b05      	ldr	r3, [pc, #20]	@ (800d2b4 <RCCEx_PLL2_Config+0x15c>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d0f0      	beq.n	800d28a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	58024400 	.word	0x58024400
 800d2b8:	ffff0007 	.word	0xffff0007

0800d2bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d2ca:	4b53      	ldr	r3, [pc, #332]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ce:	f003 0303 	and.w	r3, r3, #3
 800d2d2:	2b03      	cmp	r3, #3
 800d2d4:	d101      	bne.n	800d2da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e099      	b.n	800d40e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d2da:	4b4f      	ldr	r3, [pc, #316]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4a4e      	ldr	r2, [pc, #312]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d2e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d2e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2e6:	f7f8 f90f 	bl	8005508 <HAL_GetTick>
 800d2ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d2ec:	e008      	b.n	800d300 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d2ee:	f7f8 f90b 	bl	8005508 <HAL_GetTick>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	1ad3      	subs	r3, r2, r3
 800d2f8:	2b02      	cmp	r3, #2
 800d2fa:	d901      	bls.n	800d300 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d2fc:	2303      	movs	r3, #3
 800d2fe:	e086      	b.n	800d40e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d300:	4b45      	ldr	r3, [pc, #276]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d1f0      	bne.n	800d2ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d30c:	4b42      	ldr	r3, [pc, #264]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d30e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d310:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	051b      	lsls	r3, r3, #20
 800d31a:	493f      	ldr	r1, [pc, #252]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d31c:	4313      	orrs	r3, r2
 800d31e:	628b      	str	r3, [r1, #40]	@ 0x28
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	3b01      	subs	r3, #1
 800d326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	689b      	ldr	r3, [r3, #8]
 800d32e:	3b01      	subs	r3, #1
 800d330:	025b      	lsls	r3, r3, #9
 800d332:	b29b      	uxth	r3, r3
 800d334:	431a      	orrs	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	68db      	ldr	r3, [r3, #12]
 800d33a:	3b01      	subs	r3, #1
 800d33c:	041b      	lsls	r3, r3, #16
 800d33e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d342:	431a      	orrs	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	3b01      	subs	r3, #1
 800d34a:	061b      	lsls	r3, r3, #24
 800d34c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d350:	4931      	ldr	r1, [pc, #196]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d352:	4313      	orrs	r3, r2
 800d354:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d356:	4b30      	ldr	r3, [pc, #192]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d35a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	695b      	ldr	r3, [r3, #20]
 800d362:	492d      	ldr	r1, [pc, #180]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d364:	4313      	orrs	r3, r2
 800d366:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d368:	4b2b      	ldr	r3, [pc, #172]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d36c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	699b      	ldr	r3, [r3, #24]
 800d374:	4928      	ldr	r1, [pc, #160]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d376:	4313      	orrs	r3, r2
 800d378:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d37a:	4b27      	ldr	r3, [pc, #156]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d37e:	4a26      	ldr	r2, [pc, #152]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d384:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d386:	4b24      	ldr	r3, [pc, #144]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d38a:	4b24      	ldr	r3, [pc, #144]	@ (800d41c <RCCEx_PLL3_Config+0x160>)
 800d38c:	4013      	ands	r3, r2
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	69d2      	ldr	r2, [r2, #28]
 800d392:	00d2      	lsls	r2, r2, #3
 800d394:	4920      	ldr	r1, [pc, #128]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d396:	4313      	orrs	r3, r2
 800d398:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d39a:	4b1f      	ldr	r3, [pc, #124]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d39e:	4a1e      	ldr	r2, [pc, #120]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d3a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d3a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d106      	bne.n	800d3ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d3ac:	4b1a      	ldr	r3, [pc, #104]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3b0:	4a19      	ldr	r2, [pc, #100]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d3b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d3b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d3b8:	e00f      	b.n	800d3da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d106      	bne.n	800d3ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d3c0:	4b15      	ldr	r3, [pc, #84]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d3c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3c4:	4a14      	ldr	r2, [pc, #80]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d3c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d3ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d3cc:	e005      	b.n	800d3da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d3ce:	4b12      	ldr	r3, [pc, #72]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3d2:	4a11      	ldr	r2, [pc, #68]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d3d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d3d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d3da:	4b0f      	ldr	r3, [pc, #60]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4a0e      	ldr	r2, [pc, #56]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d3e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d3e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3e6:	f7f8 f88f 	bl	8005508 <HAL_GetTick>
 800d3ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d3ec:	e008      	b.n	800d400 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d3ee:	f7f8 f88b 	bl	8005508 <HAL_GetTick>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	2b02      	cmp	r3, #2
 800d3fa:	d901      	bls.n	800d400 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d3fc:	2303      	movs	r3, #3
 800d3fe:	e006      	b.n	800d40e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d400:	4b05      	ldr	r3, [pc, #20]	@ (800d418 <RCCEx_PLL3_Config+0x15c>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d0f0      	beq.n	800d3ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	58024400 	.word	0x58024400
 800d41c:	ffff0007 	.word	0xffff0007

0800d420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d101      	bne.n	800d432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d42e:	2301      	movs	r3, #1
 800d430:	e049      	b.n	800d4c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d106      	bne.n	800d44c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f7f7 fc1e 	bl	8004c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2202      	movs	r2, #2
 800d450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	3304      	adds	r3, #4
 800d45c:	4619      	mov	r1, r3
 800d45e:	4610      	mov	r0, r2
 800d460:	f001 f876 	bl	800e550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2201      	movs	r2, #1
 800d468:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2201      	movs	r2, #1
 800d470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2201      	movs	r2, #1
 800d478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2201      	movs	r2, #1
 800d480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2201      	movs	r2, #1
 800d488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2201      	movs	r2, #1
 800d490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2201      	movs	r2, #1
 800d498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2201      	movs	r2, #1
 800d4a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d4c4:	2300      	movs	r3, #0
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3708      	adds	r7, #8
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
	...

0800d4d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d001      	beq.n	800d4e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e056      	b.n	800d596 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2202      	movs	r2, #2
 800d4ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a2b      	ldr	r2, [pc, #172]	@ (800d5a4 <HAL_TIM_Base_Start+0xd4>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d02c      	beq.n	800d554 <HAL_TIM_Base_Start+0x84>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d502:	d027      	beq.n	800d554 <HAL_TIM_Base_Start+0x84>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a27      	ldr	r2, [pc, #156]	@ (800d5a8 <HAL_TIM_Base_Start+0xd8>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d022      	beq.n	800d554 <HAL_TIM_Base_Start+0x84>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4a26      	ldr	r2, [pc, #152]	@ (800d5ac <HAL_TIM_Base_Start+0xdc>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d01d      	beq.n	800d554 <HAL_TIM_Base_Start+0x84>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a24      	ldr	r2, [pc, #144]	@ (800d5b0 <HAL_TIM_Base_Start+0xe0>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d018      	beq.n	800d554 <HAL_TIM_Base_Start+0x84>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4a23      	ldr	r2, [pc, #140]	@ (800d5b4 <HAL_TIM_Base_Start+0xe4>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d013      	beq.n	800d554 <HAL_TIM_Base_Start+0x84>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a21      	ldr	r2, [pc, #132]	@ (800d5b8 <HAL_TIM_Base_Start+0xe8>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d00e      	beq.n	800d554 <HAL_TIM_Base_Start+0x84>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a20      	ldr	r2, [pc, #128]	@ (800d5bc <HAL_TIM_Base_Start+0xec>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d009      	beq.n	800d554 <HAL_TIM_Base_Start+0x84>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a1e      	ldr	r2, [pc, #120]	@ (800d5c0 <HAL_TIM_Base_Start+0xf0>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d004      	beq.n	800d554 <HAL_TIM_Base_Start+0x84>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a1d      	ldr	r2, [pc, #116]	@ (800d5c4 <HAL_TIM_Base_Start+0xf4>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d115      	bne.n	800d580 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	689a      	ldr	r2, [r3, #8]
 800d55a:	4b1b      	ldr	r3, [pc, #108]	@ (800d5c8 <HAL_TIM_Base_Start+0xf8>)
 800d55c:	4013      	ands	r3, r2
 800d55e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2b06      	cmp	r3, #6
 800d564:	d015      	beq.n	800d592 <HAL_TIM_Base_Start+0xc2>
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d56c:	d011      	beq.n	800d592 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f042 0201 	orr.w	r2, r2, #1
 800d57c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d57e:	e008      	b.n	800d592 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f042 0201 	orr.w	r2, r2, #1
 800d58e:	601a      	str	r2, [r3, #0]
 800d590:	e000      	b.n	800d594 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d592:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3714      	adds	r7, #20
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	40010000 	.word	0x40010000
 800d5a8:	40000400 	.word	0x40000400
 800d5ac:	40000800 	.word	0x40000800
 800d5b0:	40000c00 	.word	0x40000c00
 800d5b4:	40010400 	.word	0x40010400
 800d5b8:	40001800 	.word	0x40001800
 800d5bc:	40014000 	.word	0x40014000
 800d5c0:	4000e000 	.word	0x4000e000
 800d5c4:	4000e400 	.word	0x4000e400
 800d5c8:	00010007 	.word	0x00010007

0800d5cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6a1a      	ldr	r2, [r3, #32]
 800d5da:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d5de:	4013      	ands	r3, r2
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d10f      	bne.n	800d604 <HAL_TIM_Base_Stop+0x38>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6a1a      	ldr	r2, [r3, #32]
 800d5ea:	f240 4344 	movw	r3, #1092	@ 0x444
 800d5ee:	4013      	ands	r3, r2
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d107      	bne.n	800d604 <HAL_TIM_Base_Stop+0x38>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f022 0201 	bic.w	r2, r2, #1
 800d602:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2201      	movs	r2, #1
 800d608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800d60c:	2300      	movs	r3, #0
}
 800d60e:	4618      	mov	r0, r3
 800d610:	370c      	adds	r7, #12
 800d612:	46bd      	mov	sp, r7
 800d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d618:	4770      	bx	lr

0800d61a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b082      	sub	sp, #8
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d101      	bne.n	800d62c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d628:	2301      	movs	r3, #1
 800d62a:	e049      	b.n	800d6c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d632:	b2db      	uxtb	r3, r3
 800d634:	2b00      	cmp	r3, #0
 800d636:	d106      	bne.n	800d646 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 f841 	bl	800d6c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2202      	movs	r2, #2
 800d64a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	3304      	adds	r3, #4
 800d656:	4619      	mov	r1, r3
 800d658:	4610      	mov	r0, r2
 800d65a:	f000 ff79 	bl	800e550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2201      	movs	r2, #1
 800d662:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2201      	movs	r2, #1
 800d66a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2201      	movs	r2, #1
 800d672:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2201      	movs	r2, #1
 800d67a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2201      	movs	r2, #1
 800d682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2201      	movs	r2, #1
 800d68a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2201      	movs	r2, #1
 800d692:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2201      	movs	r2, #1
 800d69a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d6be:	2300      	movs	r3, #0
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d6d0:	bf00      	nop
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d109      	bne.n	800d700 <HAL_TIM_PWM_Start+0x24>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	bf14      	ite	ne
 800d6f8:	2301      	movne	r3, #1
 800d6fa:	2300      	moveq	r3, #0
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	e03c      	b.n	800d77a <HAL_TIM_PWM_Start+0x9e>
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	2b04      	cmp	r3, #4
 800d704:	d109      	bne.n	800d71a <HAL_TIM_PWM_Start+0x3e>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	2b01      	cmp	r3, #1
 800d710:	bf14      	ite	ne
 800d712:	2301      	movne	r3, #1
 800d714:	2300      	moveq	r3, #0
 800d716:	b2db      	uxtb	r3, r3
 800d718:	e02f      	b.n	800d77a <HAL_TIM_PWM_Start+0x9e>
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	2b08      	cmp	r3, #8
 800d71e:	d109      	bne.n	800d734 <HAL_TIM_PWM_Start+0x58>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b01      	cmp	r3, #1
 800d72a:	bf14      	ite	ne
 800d72c:	2301      	movne	r3, #1
 800d72e:	2300      	moveq	r3, #0
 800d730:	b2db      	uxtb	r3, r3
 800d732:	e022      	b.n	800d77a <HAL_TIM_PWM_Start+0x9e>
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	2b0c      	cmp	r3, #12
 800d738:	d109      	bne.n	800d74e <HAL_TIM_PWM_Start+0x72>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d740:	b2db      	uxtb	r3, r3
 800d742:	2b01      	cmp	r3, #1
 800d744:	bf14      	ite	ne
 800d746:	2301      	movne	r3, #1
 800d748:	2300      	moveq	r3, #0
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	e015      	b.n	800d77a <HAL_TIM_PWM_Start+0x9e>
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	2b10      	cmp	r3, #16
 800d752:	d109      	bne.n	800d768 <HAL_TIM_PWM_Start+0x8c>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	bf14      	ite	ne
 800d760:	2301      	movne	r3, #1
 800d762:	2300      	moveq	r3, #0
 800d764:	b2db      	uxtb	r3, r3
 800d766:	e008      	b.n	800d77a <HAL_TIM_PWM_Start+0x9e>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	2b01      	cmp	r3, #1
 800d772:	bf14      	ite	ne
 800d774:	2301      	movne	r3, #1
 800d776:	2300      	moveq	r3, #0
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d001      	beq.n	800d782 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d77e:	2301      	movs	r3, #1
 800d780:	e0ab      	b.n	800d8da <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d104      	bne.n	800d792 <HAL_TIM_PWM_Start+0xb6>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2202      	movs	r2, #2
 800d78c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d790:	e023      	b.n	800d7da <HAL_TIM_PWM_Start+0xfe>
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	2b04      	cmp	r3, #4
 800d796:	d104      	bne.n	800d7a2 <HAL_TIM_PWM_Start+0xc6>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2202      	movs	r2, #2
 800d79c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d7a0:	e01b      	b.n	800d7da <HAL_TIM_PWM_Start+0xfe>
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	2b08      	cmp	r3, #8
 800d7a6:	d104      	bne.n	800d7b2 <HAL_TIM_PWM_Start+0xd6>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2202      	movs	r2, #2
 800d7ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d7b0:	e013      	b.n	800d7da <HAL_TIM_PWM_Start+0xfe>
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	2b0c      	cmp	r3, #12
 800d7b6:	d104      	bne.n	800d7c2 <HAL_TIM_PWM_Start+0xe6>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2202      	movs	r2, #2
 800d7bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d7c0:	e00b      	b.n	800d7da <HAL_TIM_PWM_Start+0xfe>
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	2b10      	cmp	r3, #16
 800d7c6:	d104      	bne.n	800d7d2 <HAL_TIM_PWM_Start+0xf6>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2202      	movs	r2, #2
 800d7cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d7d0:	e003      	b.n	800d7da <HAL_TIM_PWM_Start+0xfe>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2202      	movs	r2, #2
 800d7d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	6839      	ldr	r1, [r7, #0]
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f001 fad4 	bl	800ed90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a3d      	ldr	r2, [pc, #244]	@ (800d8e4 <HAL_TIM_PWM_Start+0x208>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d013      	beq.n	800d81a <HAL_TIM_PWM_Start+0x13e>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4a3c      	ldr	r2, [pc, #240]	@ (800d8e8 <HAL_TIM_PWM_Start+0x20c>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d00e      	beq.n	800d81a <HAL_TIM_PWM_Start+0x13e>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4a3a      	ldr	r2, [pc, #232]	@ (800d8ec <HAL_TIM_PWM_Start+0x210>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d009      	beq.n	800d81a <HAL_TIM_PWM_Start+0x13e>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4a39      	ldr	r2, [pc, #228]	@ (800d8f0 <HAL_TIM_PWM_Start+0x214>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d004      	beq.n	800d81a <HAL_TIM_PWM_Start+0x13e>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a37      	ldr	r2, [pc, #220]	@ (800d8f4 <HAL_TIM_PWM_Start+0x218>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d101      	bne.n	800d81e <HAL_TIM_PWM_Start+0x142>
 800d81a:	2301      	movs	r3, #1
 800d81c:	e000      	b.n	800d820 <HAL_TIM_PWM_Start+0x144>
 800d81e:	2300      	movs	r3, #0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d007      	beq.n	800d834 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d832:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a2a      	ldr	r2, [pc, #168]	@ (800d8e4 <HAL_TIM_PWM_Start+0x208>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d02c      	beq.n	800d898 <HAL_TIM_PWM_Start+0x1bc>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d846:	d027      	beq.n	800d898 <HAL_TIM_PWM_Start+0x1bc>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4a2a      	ldr	r2, [pc, #168]	@ (800d8f8 <HAL_TIM_PWM_Start+0x21c>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d022      	beq.n	800d898 <HAL_TIM_PWM_Start+0x1bc>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4a29      	ldr	r2, [pc, #164]	@ (800d8fc <HAL_TIM_PWM_Start+0x220>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d01d      	beq.n	800d898 <HAL_TIM_PWM_Start+0x1bc>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a27      	ldr	r2, [pc, #156]	@ (800d900 <HAL_TIM_PWM_Start+0x224>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d018      	beq.n	800d898 <HAL_TIM_PWM_Start+0x1bc>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a1f      	ldr	r2, [pc, #124]	@ (800d8e8 <HAL_TIM_PWM_Start+0x20c>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d013      	beq.n	800d898 <HAL_TIM_PWM_Start+0x1bc>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a23      	ldr	r2, [pc, #140]	@ (800d904 <HAL_TIM_PWM_Start+0x228>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d00e      	beq.n	800d898 <HAL_TIM_PWM_Start+0x1bc>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	4a1b      	ldr	r2, [pc, #108]	@ (800d8ec <HAL_TIM_PWM_Start+0x210>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d009      	beq.n	800d898 <HAL_TIM_PWM_Start+0x1bc>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a1f      	ldr	r2, [pc, #124]	@ (800d908 <HAL_TIM_PWM_Start+0x22c>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d004      	beq.n	800d898 <HAL_TIM_PWM_Start+0x1bc>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4a1e      	ldr	r2, [pc, #120]	@ (800d90c <HAL_TIM_PWM_Start+0x230>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d115      	bne.n	800d8c4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	689a      	ldr	r2, [r3, #8]
 800d89e:	4b1c      	ldr	r3, [pc, #112]	@ (800d910 <HAL_TIM_PWM_Start+0x234>)
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2b06      	cmp	r3, #6
 800d8a8:	d015      	beq.n	800d8d6 <HAL_TIM_PWM_Start+0x1fa>
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8b0:	d011      	beq.n	800d8d6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f042 0201 	orr.w	r2, r2, #1
 800d8c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8c2:	e008      	b.n	800d8d6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f042 0201 	orr.w	r2, r2, #1
 800d8d2:	601a      	str	r2, [r3, #0]
 800d8d4:	e000      	b.n	800d8d8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	40010000 	.word	0x40010000
 800d8e8:	40010400 	.word	0x40010400
 800d8ec:	40014000 	.word	0x40014000
 800d8f0:	40014400 	.word	0x40014400
 800d8f4:	40014800 	.word	0x40014800
 800d8f8:	40000400 	.word	0x40000400
 800d8fc:	40000800 	.word	0x40000800
 800d900:	40000c00 	.word	0x40000c00
 800d904:	40001800 	.word	0x40001800
 800d908:	4000e000 	.word	0x4000e000
 800d90c:	4000e400 	.word	0x4000e400
 800d910:	00010007 	.word	0x00010007

0800d914 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b086      	sub	sp, #24
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
 800d920:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800d922:	2300      	movs	r3, #0
 800d924:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d109      	bne.n	800d940 <HAL_TIM_PWM_Start_DMA+0x2c>
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d932:	b2db      	uxtb	r3, r3
 800d934:	2b02      	cmp	r3, #2
 800d936:	bf0c      	ite	eq
 800d938:	2301      	moveq	r3, #1
 800d93a:	2300      	movne	r3, #0
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	e03c      	b.n	800d9ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	2b04      	cmp	r3, #4
 800d944:	d109      	bne.n	800d95a <HAL_TIM_PWM_Start_DMA+0x46>
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	2b02      	cmp	r3, #2
 800d950:	bf0c      	ite	eq
 800d952:	2301      	moveq	r3, #1
 800d954:	2300      	movne	r3, #0
 800d956:	b2db      	uxtb	r3, r3
 800d958:	e02f      	b.n	800d9ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	2b08      	cmp	r3, #8
 800d95e:	d109      	bne.n	800d974 <HAL_TIM_PWM_Start_DMA+0x60>
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b02      	cmp	r3, #2
 800d96a:	bf0c      	ite	eq
 800d96c:	2301      	moveq	r3, #1
 800d96e:	2300      	movne	r3, #0
 800d970:	b2db      	uxtb	r3, r3
 800d972:	e022      	b.n	800d9ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	2b0c      	cmp	r3, #12
 800d978:	d109      	bne.n	800d98e <HAL_TIM_PWM_Start_DMA+0x7a>
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d980:	b2db      	uxtb	r3, r3
 800d982:	2b02      	cmp	r3, #2
 800d984:	bf0c      	ite	eq
 800d986:	2301      	moveq	r3, #1
 800d988:	2300      	movne	r3, #0
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	e015      	b.n	800d9ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	2b10      	cmp	r3, #16
 800d992:	d109      	bne.n	800d9a8 <HAL_TIM_PWM_Start_DMA+0x94>
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	bf0c      	ite	eq
 800d9a0:	2301      	moveq	r3, #1
 800d9a2:	2300      	movne	r3, #0
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	e008      	b.n	800d9ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	2b02      	cmp	r3, #2
 800d9b2:	bf0c      	ite	eq
 800d9b4:	2301      	moveq	r3, #1
 800d9b6:	2300      	movne	r3, #0
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d001      	beq.n	800d9c2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800d9be:	2302      	movs	r3, #2
 800d9c0:	e1ba      	b.n	800dd38 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d109      	bne.n	800d9dc <HAL_TIM_PWM_Start_DMA+0xc8>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	bf0c      	ite	eq
 800d9d4:	2301      	moveq	r3, #1
 800d9d6:	2300      	movne	r3, #0
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	e03c      	b.n	800da56 <HAL_TIM_PWM_Start_DMA+0x142>
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	2b04      	cmp	r3, #4
 800d9e0:	d109      	bne.n	800d9f6 <HAL_TIM_PWM_Start_DMA+0xe2>
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	bf0c      	ite	eq
 800d9ee:	2301      	moveq	r3, #1
 800d9f0:	2300      	movne	r3, #0
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	e02f      	b.n	800da56 <HAL_TIM_PWM_Start_DMA+0x142>
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	2b08      	cmp	r3, #8
 800d9fa:	d109      	bne.n	800da10 <HAL_TIM_PWM_Start_DMA+0xfc>
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800da02:	b2db      	uxtb	r3, r3
 800da04:	2b01      	cmp	r3, #1
 800da06:	bf0c      	ite	eq
 800da08:	2301      	moveq	r3, #1
 800da0a:	2300      	movne	r3, #0
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	e022      	b.n	800da56 <HAL_TIM_PWM_Start_DMA+0x142>
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	2b0c      	cmp	r3, #12
 800da14:	d109      	bne.n	800da2a <HAL_TIM_PWM_Start_DMA+0x116>
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	2b01      	cmp	r3, #1
 800da20:	bf0c      	ite	eq
 800da22:	2301      	moveq	r3, #1
 800da24:	2300      	movne	r3, #0
 800da26:	b2db      	uxtb	r3, r3
 800da28:	e015      	b.n	800da56 <HAL_TIM_PWM_Start_DMA+0x142>
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	2b10      	cmp	r3, #16
 800da2e:	d109      	bne.n	800da44 <HAL_TIM_PWM_Start_DMA+0x130>
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800da36:	b2db      	uxtb	r3, r3
 800da38:	2b01      	cmp	r3, #1
 800da3a:	bf0c      	ite	eq
 800da3c:	2301      	moveq	r3, #1
 800da3e:	2300      	movne	r3, #0
 800da40:	b2db      	uxtb	r3, r3
 800da42:	e008      	b.n	800da56 <HAL_TIM_PWM_Start_DMA+0x142>
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	bf0c      	ite	eq
 800da50:	2301      	moveq	r3, #1
 800da52:	2300      	movne	r3, #0
 800da54:	b2db      	uxtb	r3, r3
 800da56:	2b00      	cmp	r3, #0
 800da58:	d034      	beq.n	800dac4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d002      	beq.n	800da66 <HAL_TIM_PWM_Start_DMA+0x152>
 800da60:	887b      	ldrh	r3, [r7, #2]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d101      	bne.n	800da6a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800da66:	2301      	movs	r3, #1
 800da68:	e166      	b.n	800dd38 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d104      	bne.n	800da7a <HAL_TIM_PWM_Start_DMA+0x166>
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2202      	movs	r2, #2
 800da74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800da78:	e026      	b.n	800dac8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	2b04      	cmp	r3, #4
 800da7e:	d104      	bne.n	800da8a <HAL_TIM_PWM_Start_DMA+0x176>
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2202      	movs	r2, #2
 800da84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800da88:	e01e      	b.n	800dac8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	2b08      	cmp	r3, #8
 800da8e:	d104      	bne.n	800da9a <HAL_TIM_PWM_Start_DMA+0x186>
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2202      	movs	r2, #2
 800da94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800da98:	e016      	b.n	800dac8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	2b0c      	cmp	r3, #12
 800da9e:	d104      	bne.n	800daaa <HAL_TIM_PWM_Start_DMA+0x196>
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2202      	movs	r2, #2
 800daa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800daa8:	e00e      	b.n	800dac8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	2b10      	cmp	r3, #16
 800daae:	d104      	bne.n	800daba <HAL_TIM_PWM_Start_DMA+0x1a6>
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2202      	movs	r2, #2
 800dab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dab8:	e006      	b.n	800dac8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2202      	movs	r2, #2
 800dabe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dac2:	e001      	b.n	800dac8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800dac4:	2301      	movs	r3, #1
 800dac6:	e137      	b.n	800dd38 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	2b0c      	cmp	r3, #12
 800dacc:	f200 80ae 	bhi.w	800dc2c <HAL_TIM_PWM_Start_DMA+0x318>
 800dad0:	a201      	add	r2, pc, #4	@ (adr r2, 800dad8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800dad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad6:	bf00      	nop
 800dad8:	0800db0d 	.word	0x0800db0d
 800dadc:	0800dc2d 	.word	0x0800dc2d
 800dae0:	0800dc2d 	.word	0x0800dc2d
 800dae4:	0800dc2d 	.word	0x0800dc2d
 800dae8:	0800db55 	.word	0x0800db55
 800daec:	0800dc2d 	.word	0x0800dc2d
 800daf0:	0800dc2d 	.word	0x0800dc2d
 800daf4:	0800dc2d 	.word	0x0800dc2d
 800daf8:	0800db9d 	.word	0x0800db9d
 800dafc:	0800dc2d 	.word	0x0800dc2d
 800db00:	0800dc2d 	.word	0x0800dc2d
 800db04:	0800dc2d 	.word	0x0800dc2d
 800db08:	0800dbe5 	.word	0x0800dbe5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db10:	4a8b      	ldr	r2, [pc, #556]	@ (800dd40 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800db12:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db18:	4a8a      	ldr	r2, [pc, #552]	@ (800dd44 <HAL_TIM_PWM_Start_DMA+0x430>)
 800db1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db20:	4a89      	ldr	r2, [pc, #548]	@ (800dd48 <HAL_TIM_PWM_Start_DMA+0x434>)
 800db22:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800db28:	6879      	ldr	r1, [r7, #4]
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	3334      	adds	r3, #52	@ 0x34
 800db30:	461a      	mov	r2, r3
 800db32:	887b      	ldrh	r3, [r7, #2]
 800db34:	f7f8 f9f8 	bl	8005f28 <HAL_DMA_Start_IT>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d001      	beq.n	800db42 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800db3e:	2301      	movs	r3, #1
 800db40:	e0fa      	b.n	800dd38 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	68da      	ldr	r2, [r3, #12]
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800db50:	60da      	str	r2, [r3, #12]
      break;
 800db52:	e06e      	b.n	800dc32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db58:	4a79      	ldr	r2, [pc, #484]	@ (800dd40 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800db5a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db60:	4a78      	ldr	r2, [pc, #480]	@ (800dd44 <HAL_TIM_PWM_Start_DMA+0x430>)
 800db62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db68:	4a77      	ldr	r2, [pc, #476]	@ (800dd48 <HAL_TIM_PWM_Start_DMA+0x434>)
 800db6a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800db70:	6879      	ldr	r1, [r7, #4]
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	3338      	adds	r3, #56	@ 0x38
 800db78:	461a      	mov	r2, r3
 800db7a:	887b      	ldrh	r3, [r7, #2]
 800db7c:	f7f8 f9d4 	bl	8005f28 <HAL_DMA_Start_IT>
 800db80:	4603      	mov	r3, r0
 800db82:	2b00      	cmp	r3, #0
 800db84:	d001      	beq.n	800db8a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800db86:	2301      	movs	r3, #1
 800db88:	e0d6      	b.n	800dd38 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	68da      	ldr	r2, [r3, #12]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800db98:	60da      	str	r2, [r3, #12]
      break;
 800db9a:	e04a      	b.n	800dc32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dba0:	4a67      	ldr	r2, [pc, #412]	@ (800dd40 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800dba2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dba8:	4a66      	ldr	r2, [pc, #408]	@ (800dd44 <HAL_TIM_PWM_Start_DMA+0x430>)
 800dbaa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbb0:	4a65      	ldr	r2, [pc, #404]	@ (800dd48 <HAL_TIM_PWM_Start_DMA+0x434>)
 800dbb2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800dbb8:	6879      	ldr	r1, [r7, #4]
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	333c      	adds	r3, #60	@ 0x3c
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	887b      	ldrh	r3, [r7, #2]
 800dbc4:	f7f8 f9b0 	bl	8005f28 <HAL_DMA_Start_IT>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d001      	beq.n	800dbd2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e0b2      	b.n	800dd38 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	68da      	ldr	r2, [r3, #12]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dbe0:	60da      	str	r2, [r3, #12]
      break;
 800dbe2:	e026      	b.n	800dc32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbe8:	4a55      	ldr	r2, [pc, #340]	@ (800dd40 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800dbea:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbf0:	4a54      	ldr	r2, [pc, #336]	@ (800dd44 <HAL_TIM_PWM_Start_DMA+0x430>)
 800dbf2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbf8:	4a53      	ldr	r2, [pc, #332]	@ (800dd48 <HAL_TIM_PWM_Start_DMA+0x434>)
 800dbfa:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dc00:	6879      	ldr	r1, [r7, #4]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	3340      	adds	r3, #64	@ 0x40
 800dc08:	461a      	mov	r2, r3
 800dc0a:	887b      	ldrh	r3, [r7, #2]
 800dc0c:	f7f8 f98c 	bl	8005f28 <HAL_DMA_Start_IT>
 800dc10:	4603      	mov	r3, r0
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d001      	beq.n	800dc1a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800dc16:	2301      	movs	r3, #1
 800dc18:	e08e      	b.n	800dd38 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	68da      	ldr	r2, [r3, #12]
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800dc28:	60da      	str	r2, [r3, #12]
      break;
 800dc2a:	e002      	b.n	800dc32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	75fb      	strb	r3, [r7, #23]
      break;
 800dc30:	bf00      	nop
  }

  if (status == HAL_OK)
 800dc32:	7dfb      	ldrb	r3, [r7, #23]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d17e      	bne.n	800dd36 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	68b9      	ldr	r1, [r7, #8]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f001 f8a5 	bl	800ed90 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a40      	ldr	r2, [pc, #256]	@ (800dd4c <HAL_TIM_PWM_Start_DMA+0x438>)
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d013      	beq.n	800dc78 <HAL_TIM_PWM_Start_DMA+0x364>
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4a3e      	ldr	r2, [pc, #248]	@ (800dd50 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d00e      	beq.n	800dc78 <HAL_TIM_PWM_Start_DMA+0x364>
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	4a3d      	ldr	r2, [pc, #244]	@ (800dd54 <HAL_TIM_PWM_Start_DMA+0x440>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d009      	beq.n	800dc78 <HAL_TIM_PWM_Start_DMA+0x364>
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4a3b      	ldr	r2, [pc, #236]	@ (800dd58 <HAL_TIM_PWM_Start_DMA+0x444>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d004      	beq.n	800dc78 <HAL_TIM_PWM_Start_DMA+0x364>
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	4a3a      	ldr	r2, [pc, #232]	@ (800dd5c <HAL_TIM_PWM_Start_DMA+0x448>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d101      	bne.n	800dc7c <HAL_TIM_PWM_Start_DMA+0x368>
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e000      	b.n	800dc7e <HAL_TIM_PWM_Start_DMA+0x36a>
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d007      	beq.n	800dc92 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dc90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4a2d      	ldr	r2, [pc, #180]	@ (800dd4c <HAL_TIM_PWM_Start_DMA+0x438>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d02c      	beq.n	800dcf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dca4:	d027      	beq.n	800dcf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a2d      	ldr	r2, [pc, #180]	@ (800dd60 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d022      	beq.n	800dcf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a2b      	ldr	r2, [pc, #172]	@ (800dd64 <HAL_TIM_PWM_Start_DMA+0x450>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d01d      	beq.n	800dcf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4a2a      	ldr	r2, [pc, #168]	@ (800dd68 <HAL_TIM_PWM_Start_DMA+0x454>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d018      	beq.n	800dcf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	4a21      	ldr	r2, [pc, #132]	@ (800dd50 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d013      	beq.n	800dcf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a26      	ldr	r2, [pc, #152]	@ (800dd6c <HAL_TIM_PWM_Start_DMA+0x458>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d00e      	beq.n	800dcf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a1d      	ldr	r2, [pc, #116]	@ (800dd54 <HAL_TIM_PWM_Start_DMA+0x440>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d009      	beq.n	800dcf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4a22      	ldr	r2, [pc, #136]	@ (800dd70 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d004      	beq.n	800dcf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a20      	ldr	r2, [pc, #128]	@ (800dd74 <HAL_TIM_PWM_Start_DMA+0x460>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d115      	bne.n	800dd22 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	689a      	ldr	r2, [r3, #8]
 800dcfc:	4b1e      	ldr	r3, [pc, #120]	@ (800dd78 <HAL_TIM_PWM_Start_DMA+0x464>)
 800dcfe:	4013      	ands	r3, r2
 800dd00:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	2b06      	cmp	r3, #6
 800dd06:	d015      	beq.n	800dd34 <HAL_TIM_PWM_Start_DMA+0x420>
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd0e:	d011      	beq.n	800dd34 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f042 0201 	orr.w	r2, r2, #1
 800dd1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd20:	e008      	b.n	800dd34 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f042 0201 	orr.w	r2, r2, #1
 800dd30:	601a      	str	r2, [r3, #0]
 800dd32:	e000      	b.n	800dd36 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd34:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800dd36:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3718      	adds	r7, #24
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	0800e43f 	.word	0x0800e43f
 800dd44:	0800e4e7 	.word	0x0800e4e7
 800dd48:	0800e3ad 	.word	0x0800e3ad
 800dd4c:	40010000 	.word	0x40010000
 800dd50:	40010400 	.word	0x40010400
 800dd54:	40014000 	.word	0x40014000
 800dd58:	40014400 	.word	0x40014400
 800dd5c:	40014800 	.word	0x40014800
 800dd60:	40000400 	.word	0x40000400
 800dd64:	40000800 	.word	0x40000800
 800dd68:	40000c00 	.word	0x40000c00
 800dd6c:	40001800 	.word	0x40001800
 800dd70:	4000e000 	.word	0x4000e000
 800dd74:	4000e400 	.word	0x4000e400
 800dd78:	00010007 	.word	0x00010007

0800dd7c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	2b0c      	cmp	r3, #12
 800dd8e:	d855      	bhi.n	800de3c <HAL_TIM_PWM_Stop_DMA+0xc0>
 800dd90:	a201      	add	r2, pc, #4	@ (adr r2, 800dd98 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800dd92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd96:	bf00      	nop
 800dd98:	0800ddcd 	.word	0x0800ddcd
 800dd9c:	0800de3d 	.word	0x0800de3d
 800dda0:	0800de3d 	.word	0x0800de3d
 800dda4:	0800de3d 	.word	0x0800de3d
 800dda8:	0800dde9 	.word	0x0800dde9
 800ddac:	0800de3d 	.word	0x0800de3d
 800ddb0:	0800de3d 	.word	0x0800de3d
 800ddb4:	0800de3d 	.word	0x0800de3d
 800ddb8:	0800de05 	.word	0x0800de05
 800ddbc:	0800de3d 	.word	0x0800de3d
 800ddc0:	0800de3d 	.word	0x0800de3d
 800ddc4:	0800de3d 	.word	0x0800de3d
 800ddc8:	0800de21 	.word	0x0800de21
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	68da      	ldr	r2, [r3, #12]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ddda:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7f8 fb0b 	bl	80063fc <HAL_DMA_Abort_IT>
      break;
 800dde6:	e02c      	b.n	800de42 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	68da      	ldr	r2, [r3, #12]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ddf6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7f8 fafd 	bl	80063fc <HAL_DMA_Abort_IT>
      break;
 800de02:	e01e      	b.n	800de42 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	68da      	ldr	r2, [r3, #12]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800de12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de18:	4618      	mov	r0, r3
 800de1a:	f7f8 faef 	bl	80063fc <HAL_DMA_Abort_IT>
      break;
 800de1e:	e010      	b.n	800de42 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	68da      	ldr	r2, [r3, #12]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800de2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de34:	4618      	mov	r0, r3
 800de36:	f7f8 fae1 	bl	80063fc <HAL_DMA_Abort_IT>
      break;
 800de3a:	e002      	b.n	800de42 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800de3c:	2301      	movs	r3, #1
 800de3e:	73fb      	strb	r3, [r7, #15]
      break;
 800de40:	bf00      	nop
  }

  if (status == HAL_OK)
 800de42:	7bfb      	ldrb	r3, [r7, #15]
 800de44:	2b00      	cmp	r3, #0
 800de46:	f040 8081 	bne.w	800df4c <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2200      	movs	r2, #0
 800de50:	6839      	ldr	r1, [r7, #0]
 800de52:	4618      	mov	r0, r3
 800de54:	f000 ff9c 	bl	800ed90 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4a3e      	ldr	r2, [pc, #248]	@ (800df58 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800de5e:	4293      	cmp	r3, r2
 800de60:	d013      	beq.n	800de8a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	4a3d      	ldr	r2, [pc, #244]	@ (800df5c <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800de68:	4293      	cmp	r3, r2
 800de6a:	d00e      	beq.n	800de8a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4a3b      	ldr	r2, [pc, #236]	@ (800df60 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d009      	beq.n	800de8a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	4a3a      	ldr	r2, [pc, #232]	@ (800df64 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d004      	beq.n	800de8a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4a38      	ldr	r2, [pc, #224]	@ (800df68 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d101      	bne.n	800de8e <HAL_TIM_PWM_Stop_DMA+0x112>
 800de8a:	2301      	movs	r3, #1
 800de8c:	e000      	b.n	800de90 <HAL_TIM_PWM_Stop_DMA+0x114>
 800de8e:	2300      	movs	r3, #0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d017      	beq.n	800dec4 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	6a1a      	ldr	r2, [r3, #32]
 800de9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800de9e:	4013      	ands	r3, r2
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d10f      	bne.n	800dec4 <HAL_TIM_PWM_Stop_DMA+0x148>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	6a1a      	ldr	r2, [r3, #32]
 800deaa:	f240 4344 	movw	r3, #1092	@ 0x444
 800deae:	4013      	ands	r3, r2
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d107      	bne.n	800dec4 <HAL_TIM_PWM_Stop_DMA+0x148>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800dec2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	6a1a      	ldr	r2, [r3, #32]
 800deca:	f241 1311 	movw	r3, #4369	@ 0x1111
 800dece:	4013      	ands	r3, r2
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d10f      	bne.n	800def4 <HAL_TIM_PWM_Stop_DMA+0x178>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	6a1a      	ldr	r2, [r3, #32]
 800deda:	f240 4344 	movw	r3, #1092	@ 0x444
 800dede:	4013      	ands	r3, r2
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d107      	bne.n	800def4 <HAL_TIM_PWM_Stop_DMA+0x178>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f022 0201 	bic.w	r2, r2, #1
 800def2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d104      	bne.n	800df04 <HAL_TIM_PWM_Stop_DMA+0x188>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2201      	movs	r2, #1
 800defe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800df02:	e023      	b.n	800df4c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	2b04      	cmp	r3, #4
 800df08:	d104      	bne.n	800df14 <HAL_TIM_PWM_Stop_DMA+0x198>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2201      	movs	r2, #1
 800df0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800df12:	e01b      	b.n	800df4c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	2b08      	cmp	r3, #8
 800df18:	d104      	bne.n	800df24 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2201      	movs	r2, #1
 800df1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800df22:	e013      	b.n	800df4c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	2b0c      	cmp	r3, #12
 800df28:	d104      	bne.n	800df34 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2201      	movs	r2, #1
 800df2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800df32:	e00b      	b.n	800df4c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	2b10      	cmp	r3, #16
 800df38:	d104      	bne.n	800df44 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2201      	movs	r2, #1
 800df3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800df42:	e003      	b.n	800df4c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2201      	movs	r2, #1
 800df48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800df4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3710      	adds	r7, #16
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	40010000 	.word	0x40010000
 800df5c:	40010400 	.word	0x40010400
 800df60:	40014000 	.word	0x40014000
 800df64:	40014400 	.word	0x40014400
 800df68:	40014800 	.word	0x40014800

0800df6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b086      	sub	sp, #24
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df78:	2300      	movs	r3, #0
 800df7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df82:	2b01      	cmp	r3, #1
 800df84:	d101      	bne.n	800df8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800df86:	2302      	movs	r3, #2
 800df88:	e0ff      	b.n	800e18a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2201      	movs	r2, #1
 800df8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2b14      	cmp	r3, #20
 800df96:	f200 80f0 	bhi.w	800e17a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800df9a:	a201      	add	r2, pc, #4	@ (adr r2, 800dfa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800df9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa0:	0800dff5 	.word	0x0800dff5
 800dfa4:	0800e17b 	.word	0x0800e17b
 800dfa8:	0800e17b 	.word	0x0800e17b
 800dfac:	0800e17b 	.word	0x0800e17b
 800dfb0:	0800e035 	.word	0x0800e035
 800dfb4:	0800e17b 	.word	0x0800e17b
 800dfb8:	0800e17b 	.word	0x0800e17b
 800dfbc:	0800e17b 	.word	0x0800e17b
 800dfc0:	0800e077 	.word	0x0800e077
 800dfc4:	0800e17b 	.word	0x0800e17b
 800dfc8:	0800e17b 	.word	0x0800e17b
 800dfcc:	0800e17b 	.word	0x0800e17b
 800dfd0:	0800e0b7 	.word	0x0800e0b7
 800dfd4:	0800e17b 	.word	0x0800e17b
 800dfd8:	0800e17b 	.word	0x0800e17b
 800dfdc:	0800e17b 	.word	0x0800e17b
 800dfe0:	0800e0f9 	.word	0x0800e0f9
 800dfe4:	0800e17b 	.word	0x0800e17b
 800dfe8:	0800e17b 	.word	0x0800e17b
 800dfec:	0800e17b 	.word	0x0800e17b
 800dff0:	0800e139 	.word	0x0800e139
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	68b9      	ldr	r1, [r7, #8]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f000 fb54 	bl	800e6a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	699a      	ldr	r2, [r3, #24]
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f042 0208 	orr.w	r2, r2, #8
 800e00e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	699a      	ldr	r2, [r3, #24]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f022 0204 	bic.w	r2, r2, #4
 800e01e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	6999      	ldr	r1, [r3, #24]
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	691a      	ldr	r2, [r3, #16]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	430a      	orrs	r2, r1
 800e030:	619a      	str	r2, [r3, #24]
      break;
 800e032:	e0a5      	b.n	800e180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	68b9      	ldr	r1, [r7, #8]
 800e03a:	4618      	mov	r0, r3
 800e03c:	f000 fbc4 	bl	800e7c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	699a      	ldr	r2, [r3, #24]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e04e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	699a      	ldr	r2, [r3, #24]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e05e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	6999      	ldr	r1, [r3, #24]
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	691b      	ldr	r3, [r3, #16]
 800e06a:	021a      	lsls	r2, r3, #8
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	430a      	orrs	r2, r1
 800e072:	619a      	str	r2, [r3, #24]
      break;
 800e074:	e084      	b.n	800e180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	68b9      	ldr	r1, [r7, #8]
 800e07c:	4618      	mov	r0, r3
 800e07e:	f000 fc2d 	bl	800e8dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	69da      	ldr	r2, [r3, #28]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f042 0208 	orr.w	r2, r2, #8
 800e090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	69da      	ldr	r2, [r3, #28]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f022 0204 	bic.w	r2, r2, #4
 800e0a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	69d9      	ldr	r1, [r3, #28]
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	691a      	ldr	r2, [r3, #16]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	430a      	orrs	r2, r1
 800e0b2:	61da      	str	r2, [r3, #28]
      break;
 800e0b4:	e064      	b.n	800e180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	68b9      	ldr	r1, [r7, #8]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f000 fc95 	bl	800e9ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	69da      	ldr	r2, [r3, #28]
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e0d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	69da      	ldr	r2, [r3, #28]
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e0e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	69d9      	ldr	r1, [r3, #28]
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	691b      	ldr	r3, [r3, #16]
 800e0ec:	021a      	lsls	r2, r3, #8
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	430a      	orrs	r2, r1
 800e0f4:	61da      	str	r2, [r3, #28]
      break;
 800e0f6:	e043      	b.n	800e180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	68b9      	ldr	r1, [r7, #8]
 800e0fe:	4618      	mov	r0, r3
 800e100:	f000 fcde 	bl	800eac0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f042 0208 	orr.w	r2, r2, #8
 800e112:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f022 0204 	bic.w	r2, r2, #4
 800e122:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	691a      	ldr	r2, [r3, #16]
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	430a      	orrs	r2, r1
 800e134:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e136:	e023      	b.n	800e180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	68b9      	ldr	r1, [r7, #8]
 800e13e:	4618      	mov	r0, r3
 800e140:	f000 fd22 	bl	800eb88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e152:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e162:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	691b      	ldr	r3, [r3, #16]
 800e16e:	021a      	lsls	r2, r3, #8
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	430a      	orrs	r2, r1
 800e176:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e178:	e002      	b.n	800e180 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e17a:	2301      	movs	r3, #1
 800e17c:	75fb      	strb	r3, [r7, #23]
      break;
 800e17e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2200      	movs	r2, #0
 800e184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e188:	7dfb      	ldrb	r3, [r7, #23]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3718      	adds	r7, #24
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop

0800e194 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d101      	bne.n	800e1b0 <HAL_TIM_ConfigClockSource+0x1c>
 800e1ac:	2302      	movs	r3, #2
 800e1ae:	e0dc      	b.n	800e36a <HAL_TIM_ConfigClockSource+0x1d6>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2202      	movs	r2, #2
 800e1bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	689b      	ldr	r3, [r3, #8]
 800e1c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e1c8:	68ba      	ldr	r2, [r7, #8]
 800e1ca:	4b6a      	ldr	r3, [pc, #424]	@ (800e374 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e1cc:	4013      	ands	r3, r2
 800e1ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e1d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	68ba      	ldr	r2, [r7, #8]
 800e1de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	4a64      	ldr	r2, [pc, #400]	@ (800e378 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	f000 80a9 	beq.w	800e33e <HAL_TIM_ConfigClockSource+0x1aa>
 800e1ec:	4a62      	ldr	r2, [pc, #392]	@ (800e378 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	f200 80ae 	bhi.w	800e350 <HAL_TIM_ConfigClockSource+0x1bc>
 800e1f4:	4a61      	ldr	r2, [pc, #388]	@ (800e37c <HAL_TIM_ConfigClockSource+0x1e8>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	f000 80a1 	beq.w	800e33e <HAL_TIM_ConfigClockSource+0x1aa>
 800e1fc:	4a5f      	ldr	r2, [pc, #380]	@ (800e37c <HAL_TIM_ConfigClockSource+0x1e8>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	f200 80a6 	bhi.w	800e350 <HAL_TIM_ConfigClockSource+0x1bc>
 800e204:	4a5e      	ldr	r2, [pc, #376]	@ (800e380 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e206:	4293      	cmp	r3, r2
 800e208:	f000 8099 	beq.w	800e33e <HAL_TIM_ConfigClockSource+0x1aa>
 800e20c:	4a5c      	ldr	r2, [pc, #368]	@ (800e380 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	f200 809e 	bhi.w	800e350 <HAL_TIM_ConfigClockSource+0x1bc>
 800e214:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e218:	f000 8091 	beq.w	800e33e <HAL_TIM_ConfigClockSource+0x1aa>
 800e21c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e220:	f200 8096 	bhi.w	800e350 <HAL_TIM_ConfigClockSource+0x1bc>
 800e224:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e228:	f000 8089 	beq.w	800e33e <HAL_TIM_ConfigClockSource+0x1aa>
 800e22c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e230:	f200 808e 	bhi.w	800e350 <HAL_TIM_ConfigClockSource+0x1bc>
 800e234:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e238:	d03e      	beq.n	800e2b8 <HAL_TIM_ConfigClockSource+0x124>
 800e23a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e23e:	f200 8087 	bhi.w	800e350 <HAL_TIM_ConfigClockSource+0x1bc>
 800e242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e246:	f000 8086 	beq.w	800e356 <HAL_TIM_ConfigClockSource+0x1c2>
 800e24a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e24e:	d87f      	bhi.n	800e350 <HAL_TIM_ConfigClockSource+0x1bc>
 800e250:	2b70      	cmp	r3, #112	@ 0x70
 800e252:	d01a      	beq.n	800e28a <HAL_TIM_ConfigClockSource+0xf6>
 800e254:	2b70      	cmp	r3, #112	@ 0x70
 800e256:	d87b      	bhi.n	800e350 <HAL_TIM_ConfigClockSource+0x1bc>
 800e258:	2b60      	cmp	r3, #96	@ 0x60
 800e25a:	d050      	beq.n	800e2fe <HAL_TIM_ConfigClockSource+0x16a>
 800e25c:	2b60      	cmp	r3, #96	@ 0x60
 800e25e:	d877      	bhi.n	800e350 <HAL_TIM_ConfigClockSource+0x1bc>
 800e260:	2b50      	cmp	r3, #80	@ 0x50
 800e262:	d03c      	beq.n	800e2de <HAL_TIM_ConfigClockSource+0x14a>
 800e264:	2b50      	cmp	r3, #80	@ 0x50
 800e266:	d873      	bhi.n	800e350 <HAL_TIM_ConfigClockSource+0x1bc>
 800e268:	2b40      	cmp	r3, #64	@ 0x40
 800e26a:	d058      	beq.n	800e31e <HAL_TIM_ConfigClockSource+0x18a>
 800e26c:	2b40      	cmp	r3, #64	@ 0x40
 800e26e:	d86f      	bhi.n	800e350 <HAL_TIM_ConfigClockSource+0x1bc>
 800e270:	2b30      	cmp	r3, #48	@ 0x30
 800e272:	d064      	beq.n	800e33e <HAL_TIM_ConfigClockSource+0x1aa>
 800e274:	2b30      	cmp	r3, #48	@ 0x30
 800e276:	d86b      	bhi.n	800e350 <HAL_TIM_ConfigClockSource+0x1bc>
 800e278:	2b20      	cmp	r3, #32
 800e27a:	d060      	beq.n	800e33e <HAL_TIM_ConfigClockSource+0x1aa>
 800e27c:	2b20      	cmp	r3, #32
 800e27e:	d867      	bhi.n	800e350 <HAL_TIM_ConfigClockSource+0x1bc>
 800e280:	2b00      	cmp	r3, #0
 800e282:	d05c      	beq.n	800e33e <HAL_TIM_ConfigClockSource+0x1aa>
 800e284:	2b10      	cmp	r3, #16
 800e286:	d05a      	beq.n	800e33e <HAL_TIM_ConfigClockSource+0x1aa>
 800e288:	e062      	b.n	800e350 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e29a:	f000 fd59 	bl	800ed50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	689b      	ldr	r3, [r3, #8]
 800e2a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e2ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	68ba      	ldr	r2, [r7, #8]
 800e2b4:	609a      	str	r2, [r3, #8]
      break;
 800e2b6:	e04f      	b.n	800e358 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e2c8:	f000 fd42 	bl	800ed50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	689a      	ldr	r2, [r3, #8]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e2da:	609a      	str	r2, [r3, #8]
      break;
 800e2dc:	e03c      	b.n	800e358 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	f000 fcb2 	bl	800ec54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2150      	movs	r1, #80	@ 0x50
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f000 fd0c 	bl	800ed14 <TIM_ITRx_SetConfig>
      break;
 800e2fc:	e02c      	b.n	800e358 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e30a:	461a      	mov	r2, r3
 800e30c:	f000 fcd1 	bl	800ecb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	2160      	movs	r1, #96	@ 0x60
 800e316:	4618      	mov	r0, r3
 800e318:	f000 fcfc 	bl	800ed14 <TIM_ITRx_SetConfig>
      break;
 800e31c:	e01c      	b.n	800e358 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e32a:	461a      	mov	r2, r3
 800e32c:	f000 fc92 	bl	800ec54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	2140      	movs	r1, #64	@ 0x40
 800e336:	4618      	mov	r0, r3
 800e338:	f000 fcec 	bl	800ed14 <TIM_ITRx_SetConfig>
      break;
 800e33c:	e00c      	b.n	800e358 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	4619      	mov	r1, r3
 800e348:	4610      	mov	r0, r2
 800e34a:	f000 fce3 	bl	800ed14 <TIM_ITRx_SetConfig>
      break;
 800e34e:	e003      	b.n	800e358 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e350:	2301      	movs	r3, #1
 800e352:	73fb      	strb	r3, [r7, #15]
      break;
 800e354:	e000      	b.n	800e358 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2201      	movs	r2, #1
 800e35c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2200      	movs	r2, #0
 800e364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e368:	7bfb      	ldrb	r3, [r7, #15]
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	ffceff88 	.word	0xffceff88
 800e378:	00100040 	.word	0x00100040
 800e37c:	00100030 	.word	0x00100030
 800e380:	00100020 	.word	0x00100020

0800e384 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800e38c:	bf00      	nop
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e3a0:	bf00      	nop
 800e3a2:	370c      	adds	r7, #12
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d107      	bne.n	800e3d4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e3d2:	e02a      	b.n	800e42a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d107      	bne.n	800e3ee <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2202      	movs	r2, #2
 800e3e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e3ec:	e01d      	b.n	800e42a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d107      	bne.n	800e408 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2204      	movs	r2, #4
 800e3fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2201      	movs	r2, #1
 800e402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e406:	e010      	b.n	800e42a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	429a      	cmp	r2, r3
 800e410:	d107      	bne.n	800e422 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2208      	movs	r2, #8
 800e416:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2201      	movs	r2, #1
 800e41c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e420:	e003      	b.n	800e42a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2201      	movs	r2, #1
 800e426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800e42a:	68f8      	ldr	r0, [r7, #12]
 800e42c:	f7ff ffb4 	bl	800e398 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2200      	movs	r2, #0
 800e434:	771a      	strb	r2, [r3, #28]
}
 800e436:	bf00      	nop
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b084      	sub	sp, #16
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e44a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	429a      	cmp	r2, r3
 800e454:	d10b      	bne.n	800e46e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2201      	movs	r2, #1
 800e45a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	69db      	ldr	r3, [r3, #28]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d136      	bne.n	800e4d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2201      	movs	r2, #1
 800e468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e46c:	e031      	b.n	800e4d2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	429a      	cmp	r2, r3
 800e476:	d10b      	bne.n	800e490 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2202      	movs	r2, #2
 800e47c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	69db      	ldr	r3, [r3, #28]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d125      	bne.n	800e4d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2201      	movs	r2, #1
 800e48a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e48e:	e020      	b.n	800e4d2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	429a      	cmp	r2, r3
 800e498:	d10b      	bne.n	800e4b2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2204      	movs	r2, #4
 800e49e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	69db      	ldr	r3, [r3, #28]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d114      	bne.n	800e4d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e4b0:	e00f      	b.n	800e4d2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d10a      	bne.n	800e4d2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2208      	movs	r2, #8
 800e4c0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	69db      	ldr	r3, [r3, #28]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d103      	bne.n	800e4d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4d2:	68f8      	ldr	r0, [r7, #12]
 800e4d4:	f7f3 fede 	bl	8002294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	771a      	strb	r2, [r3, #28]
}
 800e4de:	bf00      	nop
 800e4e0:	3710      	adds	r7, #16
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}

0800e4e6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e4e6:	b580      	push	{r7, lr}
 800e4e8:	b084      	sub	sp, #16
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4f2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4f8:	687a      	ldr	r2, [r7, #4]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d103      	bne.n	800e506 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2201      	movs	r2, #1
 800e502:	771a      	strb	r2, [r3, #28]
 800e504:	e019      	b.n	800e53a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d103      	bne.n	800e518 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2202      	movs	r2, #2
 800e514:	771a      	strb	r2, [r3, #28]
 800e516:	e010      	b.n	800e53a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d103      	bne.n	800e52a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2204      	movs	r2, #4
 800e526:	771a      	strb	r2, [r3, #28]
 800e528:	e007      	b.n	800e53a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	429a      	cmp	r2, r3
 800e532:	d102      	bne.n	800e53a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2208      	movs	r2, #8
 800e538:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800e53a:	68f8      	ldr	r0, [r7, #12]
 800e53c:	f7ff ff22 	bl	800e384 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2200      	movs	r2, #0
 800e544:	771a      	strb	r2, [r3, #28]
}
 800e546:	bf00      	nop
 800e548:	3710      	adds	r7, #16
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
	...

0800e550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e550:	b480      	push	{r7}
 800e552:	b085      	sub	sp, #20
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	4a47      	ldr	r2, [pc, #284]	@ (800e680 <TIM_Base_SetConfig+0x130>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d013      	beq.n	800e590 <TIM_Base_SetConfig+0x40>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e56e:	d00f      	beq.n	800e590 <TIM_Base_SetConfig+0x40>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4a44      	ldr	r2, [pc, #272]	@ (800e684 <TIM_Base_SetConfig+0x134>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d00b      	beq.n	800e590 <TIM_Base_SetConfig+0x40>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	4a43      	ldr	r2, [pc, #268]	@ (800e688 <TIM_Base_SetConfig+0x138>)
 800e57c:	4293      	cmp	r3, r2
 800e57e:	d007      	beq.n	800e590 <TIM_Base_SetConfig+0x40>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	4a42      	ldr	r2, [pc, #264]	@ (800e68c <TIM_Base_SetConfig+0x13c>)
 800e584:	4293      	cmp	r3, r2
 800e586:	d003      	beq.n	800e590 <TIM_Base_SetConfig+0x40>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	4a41      	ldr	r2, [pc, #260]	@ (800e690 <TIM_Base_SetConfig+0x140>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d108      	bne.n	800e5a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	4313      	orrs	r3, r2
 800e5a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	4a36      	ldr	r2, [pc, #216]	@ (800e680 <TIM_Base_SetConfig+0x130>)
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	d027      	beq.n	800e5fa <TIM_Base_SetConfig+0xaa>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5b0:	d023      	beq.n	800e5fa <TIM_Base_SetConfig+0xaa>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	4a33      	ldr	r2, [pc, #204]	@ (800e684 <TIM_Base_SetConfig+0x134>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d01f      	beq.n	800e5fa <TIM_Base_SetConfig+0xaa>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4a32      	ldr	r2, [pc, #200]	@ (800e688 <TIM_Base_SetConfig+0x138>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d01b      	beq.n	800e5fa <TIM_Base_SetConfig+0xaa>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	4a31      	ldr	r2, [pc, #196]	@ (800e68c <TIM_Base_SetConfig+0x13c>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d017      	beq.n	800e5fa <TIM_Base_SetConfig+0xaa>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4a30      	ldr	r2, [pc, #192]	@ (800e690 <TIM_Base_SetConfig+0x140>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d013      	beq.n	800e5fa <TIM_Base_SetConfig+0xaa>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	4a2f      	ldr	r2, [pc, #188]	@ (800e694 <TIM_Base_SetConfig+0x144>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d00f      	beq.n	800e5fa <TIM_Base_SetConfig+0xaa>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	4a2e      	ldr	r2, [pc, #184]	@ (800e698 <TIM_Base_SetConfig+0x148>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d00b      	beq.n	800e5fa <TIM_Base_SetConfig+0xaa>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	4a2d      	ldr	r2, [pc, #180]	@ (800e69c <TIM_Base_SetConfig+0x14c>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d007      	beq.n	800e5fa <TIM_Base_SetConfig+0xaa>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	4a2c      	ldr	r2, [pc, #176]	@ (800e6a0 <TIM_Base_SetConfig+0x150>)
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d003      	beq.n	800e5fa <TIM_Base_SetConfig+0xaa>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	4a2b      	ldr	r2, [pc, #172]	@ (800e6a4 <TIM_Base_SetConfig+0x154>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d108      	bne.n	800e60c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	68fa      	ldr	r2, [r7, #12]
 800e608:	4313      	orrs	r3, r2
 800e60a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	695b      	ldr	r3, [r3, #20]
 800e616:	4313      	orrs	r3, r2
 800e618:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	689a      	ldr	r2, [r3, #8]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	681a      	ldr	r2, [r3, #0]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	4a14      	ldr	r2, [pc, #80]	@ (800e680 <TIM_Base_SetConfig+0x130>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d00f      	beq.n	800e652 <TIM_Base_SetConfig+0x102>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	4a16      	ldr	r2, [pc, #88]	@ (800e690 <TIM_Base_SetConfig+0x140>)
 800e636:	4293      	cmp	r3, r2
 800e638:	d00b      	beq.n	800e652 <TIM_Base_SetConfig+0x102>
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	4a15      	ldr	r2, [pc, #84]	@ (800e694 <TIM_Base_SetConfig+0x144>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d007      	beq.n	800e652 <TIM_Base_SetConfig+0x102>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	4a14      	ldr	r2, [pc, #80]	@ (800e698 <TIM_Base_SetConfig+0x148>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d003      	beq.n	800e652 <TIM_Base_SetConfig+0x102>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	4a13      	ldr	r2, [pc, #76]	@ (800e69c <TIM_Base_SetConfig+0x14c>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d103      	bne.n	800e65a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	691a      	ldr	r2, [r3, #16]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f043 0204 	orr.w	r2, r3, #4
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2201      	movs	r2, #1
 800e66a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	68fa      	ldr	r2, [r7, #12]
 800e670:	601a      	str	r2, [r3, #0]
}
 800e672:	bf00      	nop
 800e674:	3714      	adds	r7, #20
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr
 800e67e:	bf00      	nop
 800e680:	40010000 	.word	0x40010000
 800e684:	40000400 	.word	0x40000400
 800e688:	40000800 	.word	0x40000800
 800e68c:	40000c00 	.word	0x40000c00
 800e690:	40010400 	.word	0x40010400
 800e694:	40014000 	.word	0x40014000
 800e698:	40014400 	.word	0x40014400
 800e69c:	40014800 	.word	0x40014800
 800e6a0:	4000e000 	.word	0x4000e000
 800e6a4:	4000e400 	.word	0x4000e400

0800e6a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b087      	sub	sp, #28
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6a1b      	ldr	r3, [r3, #32]
 800e6b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6a1b      	ldr	r3, [r3, #32]
 800e6bc:	f023 0201 	bic.w	r2, r3, #1
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	699b      	ldr	r3, [r3, #24]
 800e6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e6d0:	68fa      	ldr	r2, [r7, #12]
 800e6d2:	4b37      	ldr	r3, [pc, #220]	@ (800e7b0 <TIM_OC1_SetConfig+0x108>)
 800e6d4:	4013      	ands	r3, r2
 800e6d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f023 0303 	bic.w	r3, r3, #3
 800e6de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	68fa      	ldr	r2, [r7, #12]
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	f023 0302 	bic.w	r3, r3, #2
 800e6f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	689b      	ldr	r3, [r3, #8]
 800e6f6:	697a      	ldr	r2, [r7, #20]
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4a2d      	ldr	r2, [pc, #180]	@ (800e7b4 <TIM_OC1_SetConfig+0x10c>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d00f      	beq.n	800e724 <TIM_OC1_SetConfig+0x7c>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	4a2c      	ldr	r2, [pc, #176]	@ (800e7b8 <TIM_OC1_SetConfig+0x110>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d00b      	beq.n	800e724 <TIM_OC1_SetConfig+0x7c>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	4a2b      	ldr	r2, [pc, #172]	@ (800e7bc <TIM_OC1_SetConfig+0x114>)
 800e710:	4293      	cmp	r3, r2
 800e712:	d007      	beq.n	800e724 <TIM_OC1_SetConfig+0x7c>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	4a2a      	ldr	r2, [pc, #168]	@ (800e7c0 <TIM_OC1_SetConfig+0x118>)
 800e718:	4293      	cmp	r3, r2
 800e71a:	d003      	beq.n	800e724 <TIM_OC1_SetConfig+0x7c>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	4a29      	ldr	r2, [pc, #164]	@ (800e7c4 <TIM_OC1_SetConfig+0x11c>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d10c      	bne.n	800e73e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	f023 0308 	bic.w	r3, r3, #8
 800e72a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	697a      	ldr	r2, [r7, #20]
 800e732:	4313      	orrs	r3, r2
 800e734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	f023 0304 	bic.w	r3, r3, #4
 800e73c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4a1c      	ldr	r2, [pc, #112]	@ (800e7b4 <TIM_OC1_SetConfig+0x10c>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d00f      	beq.n	800e766 <TIM_OC1_SetConfig+0xbe>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4a1b      	ldr	r2, [pc, #108]	@ (800e7b8 <TIM_OC1_SetConfig+0x110>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d00b      	beq.n	800e766 <TIM_OC1_SetConfig+0xbe>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4a1a      	ldr	r2, [pc, #104]	@ (800e7bc <TIM_OC1_SetConfig+0x114>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d007      	beq.n	800e766 <TIM_OC1_SetConfig+0xbe>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4a19      	ldr	r2, [pc, #100]	@ (800e7c0 <TIM_OC1_SetConfig+0x118>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d003      	beq.n	800e766 <TIM_OC1_SetConfig+0xbe>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	4a18      	ldr	r2, [pc, #96]	@ (800e7c4 <TIM_OC1_SetConfig+0x11c>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d111      	bne.n	800e78a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e76c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	695b      	ldr	r3, [r3, #20]
 800e77a:	693a      	ldr	r2, [r7, #16]
 800e77c:	4313      	orrs	r3, r2
 800e77e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	699b      	ldr	r3, [r3, #24]
 800e784:	693a      	ldr	r2, [r7, #16]
 800e786:	4313      	orrs	r3, r2
 800e788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	693a      	ldr	r2, [r7, #16]
 800e78e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	68fa      	ldr	r2, [r7, #12]
 800e794:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	685a      	ldr	r2, [r3, #4]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	697a      	ldr	r2, [r7, #20]
 800e7a2:	621a      	str	r2, [r3, #32]
}
 800e7a4:	bf00      	nop
 800e7a6:	371c      	adds	r7, #28
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr
 800e7b0:	fffeff8f 	.word	0xfffeff8f
 800e7b4:	40010000 	.word	0x40010000
 800e7b8:	40010400 	.word	0x40010400
 800e7bc:	40014000 	.word	0x40014000
 800e7c0:	40014400 	.word	0x40014400
 800e7c4:	40014800 	.word	0x40014800

0800e7c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b087      	sub	sp, #28
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6a1b      	ldr	r3, [r3, #32]
 800e7d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6a1b      	ldr	r3, [r3, #32]
 800e7dc:	f023 0210 	bic.w	r2, r3, #16
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	699b      	ldr	r3, [r3, #24]
 800e7ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e7f0:	68fa      	ldr	r2, [r7, #12]
 800e7f2:	4b34      	ldr	r3, [pc, #208]	@ (800e8c4 <TIM_OC2_SetConfig+0xfc>)
 800e7f4:	4013      	ands	r3, r2
 800e7f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e7fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	021b      	lsls	r3, r3, #8
 800e806:	68fa      	ldr	r2, [r7, #12]
 800e808:	4313      	orrs	r3, r2
 800e80a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	f023 0320 	bic.w	r3, r3, #32
 800e812:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	689b      	ldr	r3, [r3, #8]
 800e818:	011b      	lsls	r3, r3, #4
 800e81a:	697a      	ldr	r2, [r7, #20]
 800e81c:	4313      	orrs	r3, r2
 800e81e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	4a29      	ldr	r2, [pc, #164]	@ (800e8c8 <TIM_OC2_SetConfig+0x100>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d003      	beq.n	800e830 <TIM_OC2_SetConfig+0x68>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	4a28      	ldr	r2, [pc, #160]	@ (800e8cc <TIM_OC2_SetConfig+0x104>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d10d      	bne.n	800e84c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	68db      	ldr	r3, [r3, #12]
 800e83c:	011b      	lsls	r3, r3, #4
 800e83e:	697a      	ldr	r2, [r7, #20]
 800e840:	4313      	orrs	r3, r2
 800e842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e84a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	4a1e      	ldr	r2, [pc, #120]	@ (800e8c8 <TIM_OC2_SetConfig+0x100>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d00f      	beq.n	800e874 <TIM_OC2_SetConfig+0xac>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4a1d      	ldr	r2, [pc, #116]	@ (800e8cc <TIM_OC2_SetConfig+0x104>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d00b      	beq.n	800e874 <TIM_OC2_SetConfig+0xac>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	4a1c      	ldr	r2, [pc, #112]	@ (800e8d0 <TIM_OC2_SetConfig+0x108>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d007      	beq.n	800e874 <TIM_OC2_SetConfig+0xac>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	4a1b      	ldr	r2, [pc, #108]	@ (800e8d4 <TIM_OC2_SetConfig+0x10c>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d003      	beq.n	800e874 <TIM_OC2_SetConfig+0xac>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4a1a      	ldr	r2, [pc, #104]	@ (800e8d8 <TIM_OC2_SetConfig+0x110>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d113      	bne.n	800e89c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e87a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e882:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	695b      	ldr	r3, [r3, #20]
 800e888:	009b      	lsls	r3, r3, #2
 800e88a:	693a      	ldr	r2, [r7, #16]
 800e88c:	4313      	orrs	r3, r2
 800e88e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	699b      	ldr	r3, [r3, #24]
 800e894:	009b      	lsls	r3, r3, #2
 800e896:	693a      	ldr	r2, [r7, #16]
 800e898:	4313      	orrs	r3, r2
 800e89a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	693a      	ldr	r2, [r7, #16]
 800e8a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	68fa      	ldr	r2, [r7, #12]
 800e8a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	685a      	ldr	r2, [r3, #4]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	697a      	ldr	r2, [r7, #20]
 800e8b4:	621a      	str	r2, [r3, #32]
}
 800e8b6:	bf00      	nop
 800e8b8:	371c      	adds	r7, #28
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr
 800e8c2:	bf00      	nop
 800e8c4:	feff8fff 	.word	0xfeff8fff
 800e8c8:	40010000 	.word	0x40010000
 800e8cc:	40010400 	.word	0x40010400
 800e8d0:	40014000 	.word	0x40014000
 800e8d4:	40014400 	.word	0x40014400
 800e8d8:	40014800 	.word	0x40014800

0800e8dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b087      	sub	sp, #28
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6a1b      	ldr	r3, [r3, #32]
 800e8ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6a1b      	ldr	r3, [r3, #32]
 800e8f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	69db      	ldr	r3, [r3, #28]
 800e902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e904:	68fa      	ldr	r2, [r7, #12]
 800e906:	4b33      	ldr	r3, [pc, #204]	@ (800e9d4 <TIM_OC3_SetConfig+0xf8>)
 800e908:	4013      	ands	r3, r2
 800e90a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f023 0303 	bic.w	r3, r3, #3
 800e912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	68fa      	ldr	r2, [r7, #12]
 800e91a:	4313      	orrs	r3, r2
 800e91c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	689b      	ldr	r3, [r3, #8]
 800e92a:	021b      	lsls	r3, r3, #8
 800e92c:	697a      	ldr	r2, [r7, #20]
 800e92e:	4313      	orrs	r3, r2
 800e930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	4a28      	ldr	r2, [pc, #160]	@ (800e9d8 <TIM_OC3_SetConfig+0xfc>)
 800e936:	4293      	cmp	r3, r2
 800e938:	d003      	beq.n	800e942 <TIM_OC3_SetConfig+0x66>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4a27      	ldr	r2, [pc, #156]	@ (800e9dc <TIM_OC3_SetConfig+0x100>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d10d      	bne.n	800e95e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	68db      	ldr	r3, [r3, #12]
 800e94e:	021b      	lsls	r3, r3, #8
 800e950:	697a      	ldr	r2, [r7, #20]
 800e952:	4313      	orrs	r3, r2
 800e954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e95c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4a1d      	ldr	r2, [pc, #116]	@ (800e9d8 <TIM_OC3_SetConfig+0xfc>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d00f      	beq.n	800e986 <TIM_OC3_SetConfig+0xaa>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4a1c      	ldr	r2, [pc, #112]	@ (800e9dc <TIM_OC3_SetConfig+0x100>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d00b      	beq.n	800e986 <TIM_OC3_SetConfig+0xaa>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4a1b      	ldr	r2, [pc, #108]	@ (800e9e0 <TIM_OC3_SetConfig+0x104>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d007      	beq.n	800e986 <TIM_OC3_SetConfig+0xaa>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	4a1a      	ldr	r2, [pc, #104]	@ (800e9e4 <TIM_OC3_SetConfig+0x108>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d003      	beq.n	800e986 <TIM_OC3_SetConfig+0xaa>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	4a19      	ldr	r2, [pc, #100]	@ (800e9e8 <TIM_OC3_SetConfig+0x10c>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d113      	bne.n	800e9ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e98c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	695b      	ldr	r3, [r3, #20]
 800e99a:	011b      	lsls	r3, r3, #4
 800e99c:	693a      	ldr	r2, [r7, #16]
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	699b      	ldr	r3, [r3, #24]
 800e9a6:	011b      	lsls	r3, r3, #4
 800e9a8:	693a      	ldr	r2, [r7, #16]
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	693a      	ldr	r2, [r7, #16]
 800e9b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	68fa      	ldr	r2, [r7, #12]
 800e9b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	685a      	ldr	r2, [r3, #4]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	697a      	ldr	r2, [r7, #20]
 800e9c6:	621a      	str	r2, [r3, #32]
}
 800e9c8:	bf00      	nop
 800e9ca:	371c      	adds	r7, #28
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr
 800e9d4:	fffeff8f 	.word	0xfffeff8f
 800e9d8:	40010000 	.word	0x40010000
 800e9dc:	40010400 	.word	0x40010400
 800e9e0:	40014000 	.word	0x40014000
 800e9e4:	40014400 	.word	0x40014400
 800e9e8:	40014800 	.word	0x40014800

0800e9ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b087      	sub	sp, #28
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6a1b      	ldr	r3, [r3, #32]
 800e9fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6a1b      	ldr	r3, [r3, #32]
 800ea00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	69db      	ldr	r3, [r3, #28]
 800ea12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ea14:	68fa      	ldr	r2, [r7, #12]
 800ea16:	4b24      	ldr	r3, [pc, #144]	@ (800eaa8 <TIM_OC4_SetConfig+0xbc>)
 800ea18:	4013      	ands	r3, r2
 800ea1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ea22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	021b      	lsls	r3, r3, #8
 800ea2a:	68fa      	ldr	r2, [r7, #12]
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ea36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	689b      	ldr	r3, [r3, #8]
 800ea3c:	031b      	lsls	r3, r3, #12
 800ea3e:	693a      	ldr	r2, [r7, #16]
 800ea40:	4313      	orrs	r3, r2
 800ea42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4a19      	ldr	r2, [pc, #100]	@ (800eaac <TIM_OC4_SetConfig+0xc0>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d00f      	beq.n	800ea6c <TIM_OC4_SetConfig+0x80>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	4a18      	ldr	r2, [pc, #96]	@ (800eab0 <TIM_OC4_SetConfig+0xc4>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d00b      	beq.n	800ea6c <TIM_OC4_SetConfig+0x80>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	4a17      	ldr	r2, [pc, #92]	@ (800eab4 <TIM_OC4_SetConfig+0xc8>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d007      	beq.n	800ea6c <TIM_OC4_SetConfig+0x80>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4a16      	ldr	r2, [pc, #88]	@ (800eab8 <TIM_OC4_SetConfig+0xcc>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d003      	beq.n	800ea6c <TIM_OC4_SetConfig+0x80>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4a15      	ldr	r2, [pc, #84]	@ (800eabc <TIM_OC4_SetConfig+0xd0>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d109      	bne.n	800ea80 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ea72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	695b      	ldr	r3, [r3, #20]
 800ea78:	019b      	lsls	r3, r3, #6
 800ea7a:	697a      	ldr	r2, [r7, #20]
 800ea7c:	4313      	orrs	r3, r2
 800ea7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	697a      	ldr	r2, [r7, #20]
 800ea84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	685a      	ldr	r2, [r3, #4]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	693a      	ldr	r2, [r7, #16]
 800ea98:	621a      	str	r2, [r3, #32]
}
 800ea9a:	bf00      	nop
 800ea9c:	371c      	adds	r7, #28
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop
 800eaa8:	feff8fff 	.word	0xfeff8fff
 800eaac:	40010000 	.word	0x40010000
 800eab0:	40010400 	.word	0x40010400
 800eab4:	40014000 	.word	0x40014000
 800eab8:	40014400 	.word	0x40014400
 800eabc:	40014800 	.word	0x40014800

0800eac0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b087      	sub	sp, #28
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6a1b      	ldr	r3, [r3, #32]
 800eace:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6a1b      	ldr	r3, [r3, #32]
 800ead4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eae8:	68fa      	ldr	r2, [r7, #12]
 800eaea:	4b21      	ldr	r3, [pc, #132]	@ (800eb70 <TIM_OC5_SetConfig+0xb0>)
 800eaec:	4013      	ands	r3, r2
 800eaee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	68fa      	ldr	r2, [r7, #12]
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800eb00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	041b      	lsls	r3, r3, #16
 800eb08:	693a      	ldr	r2, [r7, #16]
 800eb0a:	4313      	orrs	r3, r2
 800eb0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	4a18      	ldr	r2, [pc, #96]	@ (800eb74 <TIM_OC5_SetConfig+0xb4>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d00f      	beq.n	800eb36 <TIM_OC5_SetConfig+0x76>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	4a17      	ldr	r2, [pc, #92]	@ (800eb78 <TIM_OC5_SetConfig+0xb8>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d00b      	beq.n	800eb36 <TIM_OC5_SetConfig+0x76>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	4a16      	ldr	r2, [pc, #88]	@ (800eb7c <TIM_OC5_SetConfig+0xbc>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d007      	beq.n	800eb36 <TIM_OC5_SetConfig+0x76>
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	4a15      	ldr	r2, [pc, #84]	@ (800eb80 <TIM_OC5_SetConfig+0xc0>)
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	d003      	beq.n	800eb36 <TIM_OC5_SetConfig+0x76>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	4a14      	ldr	r2, [pc, #80]	@ (800eb84 <TIM_OC5_SetConfig+0xc4>)
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d109      	bne.n	800eb4a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eb3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	695b      	ldr	r3, [r3, #20]
 800eb42:	021b      	lsls	r3, r3, #8
 800eb44:	697a      	ldr	r2, [r7, #20]
 800eb46:	4313      	orrs	r3, r2
 800eb48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	697a      	ldr	r2, [r7, #20]
 800eb4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	68fa      	ldr	r2, [r7, #12]
 800eb54:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	685a      	ldr	r2, [r3, #4]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	693a      	ldr	r2, [r7, #16]
 800eb62:	621a      	str	r2, [r3, #32]
}
 800eb64:	bf00      	nop
 800eb66:	371c      	adds	r7, #28
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr
 800eb70:	fffeff8f 	.word	0xfffeff8f
 800eb74:	40010000 	.word	0x40010000
 800eb78:	40010400 	.word	0x40010400
 800eb7c:	40014000 	.word	0x40014000
 800eb80:	40014400 	.word	0x40014400
 800eb84:	40014800 	.word	0x40014800

0800eb88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b087      	sub	sp, #28
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6a1b      	ldr	r3, [r3, #32]
 800eb96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6a1b      	ldr	r3, [r3, #32]
 800eb9c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	685b      	ldr	r3, [r3, #4]
 800eba8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	4b22      	ldr	r3, [pc, #136]	@ (800ec3c <TIM_OC6_SetConfig+0xb4>)
 800ebb4:	4013      	ands	r3, r2
 800ebb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	021b      	lsls	r3, r3, #8
 800ebbe:	68fa      	ldr	r2, [r7, #12]
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ebca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	689b      	ldr	r3, [r3, #8]
 800ebd0:	051b      	lsls	r3, r3, #20
 800ebd2:	693a      	ldr	r2, [r7, #16]
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	4a19      	ldr	r2, [pc, #100]	@ (800ec40 <TIM_OC6_SetConfig+0xb8>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d00f      	beq.n	800ec00 <TIM_OC6_SetConfig+0x78>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	4a18      	ldr	r2, [pc, #96]	@ (800ec44 <TIM_OC6_SetConfig+0xbc>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d00b      	beq.n	800ec00 <TIM_OC6_SetConfig+0x78>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	4a17      	ldr	r2, [pc, #92]	@ (800ec48 <TIM_OC6_SetConfig+0xc0>)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d007      	beq.n	800ec00 <TIM_OC6_SetConfig+0x78>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	4a16      	ldr	r2, [pc, #88]	@ (800ec4c <TIM_OC6_SetConfig+0xc4>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d003      	beq.n	800ec00 <TIM_OC6_SetConfig+0x78>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	4a15      	ldr	r2, [pc, #84]	@ (800ec50 <TIM_OC6_SetConfig+0xc8>)
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d109      	bne.n	800ec14 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ec06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	695b      	ldr	r3, [r3, #20]
 800ec0c:	029b      	lsls	r3, r3, #10
 800ec0e:	697a      	ldr	r2, [r7, #20]
 800ec10:	4313      	orrs	r3, r2
 800ec12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	697a      	ldr	r2, [r7, #20]
 800ec18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	68fa      	ldr	r2, [r7, #12]
 800ec1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	685a      	ldr	r2, [r3, #4]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	693a      	ldr	r2, [r7, #16]
 800ec2c:	621a      	str	r2, [r3, #32]
}
 800ec2e:	bf00      	nop
 800ec30:	371c      	adds	r7, #28
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	feff8fff 	.word	0xfeff8fff
 800ec40:	40010000 	.word	0x40010000
 800ec44:	40010400 	.word	0x40010400
 800ec48:	40014000 	.word	0x40014000
 800ec4c:	40014400 	.word	0x40014400
 800ec50:	40014800 	.word	0x40014800

0800ec54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ec54:	b480      	push	{r7}
 800ec56:	b087      	sub	sp, #28
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	6a1b      	ldr	r3, [r3, #32]
 800ec64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	6a1b      	ldr	r3, [r3, #32]
 800ec6a:	f023 0201 	bic.w	r2, r3, #1
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	699b      	ldr	r3, [r3, #24]
 800ec76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ec7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	011b      	lsls	r3, r3, #4
 800ec84:	693a      	ldr	r2, [r7, #16]
 800ec86:	4313      	orrs	r3, r2
 800ec88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	f023 030a 	bic.w	r3, r3, #10
 800ec90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ec92:	697a      	ldr	r2, [r7, #20]
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	4313      	orrs	r3, r2
 800ec98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	693a      	ldr	r2, [r7, #16]
 800ec9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	697a      	ldr	r2, [r7, #20]
 800eca4:	621a      	str	r2, [r3, #32]
}
 800eca6:	bf00      	nop
 800eca8:	371c      	adds	r7, #28
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr

0800ecb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ecb2:	b480      	push	{r7}
 800ecb4:	b087      	sub	sp, #28
 800ecb6:	af00      	add	r7, sp, #0
 800ecb8:	60f8      	str	r0, [r7, #12]
 800ecba:	60b9      	str	r1, [r7, #8]
 800ecbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	6a1b      	ldr	r3, [r3, #32]
 800ecc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6a1b      	ldr	r3, [r3, #32]
 800ecc8:	f023 0210 	bic.w	r2, r3, #16
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	699b      	ldr	r3, [r3, #24]
 800ecd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ecdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	031b      	lsls	r3, r3, #12
 800ece2:	693a      	ldr	r2, [r7, #16]
 800ece4:	4313      	orrs	r3, r2
 800ece6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ecee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	011b      	lsls	r3, r3, #4
 800ecf4:	697a      	ldr	r2, [r7, #20]
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	693a      	ldr	r2, [r7, #16]
 800ecfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	697a      	ldr	r2, [r7, #20]
 800ed04:	621a      	str	r2, [r3, #32]
}
 800ed06:	bf00      	nop
 800ed08:	371c      	adds	r7, #28
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
	...

0800ed14 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b085      	sub	sp, #20
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	689b      	ldr	r3, [r3, #8]
 800ed22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ed24:	68fa      	ldr	r2, [r7, #12]
 800ed26:	4b09      	ldr	r3, [pc, #36]	@ (800ed4c <TIM_ITRx_SetConfig+0x38>)
 800ed28:	4013      	ands	r3, r2
 800ed2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ed2c:	683a      	ldr	r2, [r7, #0]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	f043 0307 	orr.w	r3, r3, #7
 800ed36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	68fa      	ldr	r2, [r7, #12]
 800ed3c:	609a      	str	r2, [r3, #8]
}
 800ed3e:	bf00      	nop
 800ed40:	3714      	adds	r7, #20
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	ffcfff8f 	.word	0xffcfff8f

0800ed50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b087      	sub	sp, #28
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	60b9      	str	r1, [r7, #8]
 800ed5a:	607a      	str	r2, [r7, #4]
 800ed5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	689b      	ldr	r3, [r3, #8]
 800ed62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ed6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	021a      	lsls	r2, r3, #8
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	431a      	orrs	r2, r3
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	4313      	orrs	r3, r2
 800ed78:	697a      	ldr	r2, [r7, #20]
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	697a      	ldr	r2, [r7, #20]
 800ed82:	609a      	str	r2, [r3, #8]
}
 800ed84:	bf00      	nop
 800ed86:	371c      	adds	r7, #28
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b087      	sub	sp, #28
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	f003 031f 	and.w	r3, r3, #31
 800eda2:	2201      	movs	r2, #1
 800eda4:	fa02 f303 	lsl.w	r3, r2, r3
 800eda8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	6a1a      	ldr	r2, [r3, #32]
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	43db      	mvns	r3, r3
 800edb2:	401a      	ands	r2, r3
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	6a1a      	ldr	r2, [r3, #32]
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	f003 031f 	and.w	r3, r3, #31
 800edc2:	6879      	ldr	r1, [r7, #4]
 800edc4:	fa01 f303 	lsl.w	r3, r1, r3
 800edc8:	431a      	orrs	r2, r3
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	621a      	str	r2, [r3, #32]
}
 800edce:	bf00      	nop
 800edd0:	371c      	adds	r7, #28
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr
	...

0800eddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eddc:	b480      	push	{r7}
 800edde:	b085      	sub	sp, #20
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800edec:	2b01      	cmp	r3, #1
 800edee:	d101      	bne.n	800edf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800edf0:	2302      	movs	r3, #2
 800edf2:	e077      	b.n	800eee4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2201      	movs	r2, #1
 800edf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2202      	movs	r2, #2
 800ee00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	689b      	ldr	r3, [r3, #8]
 800ee12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	4a35      	ldr	r2, [pc, #212]	@ (800eef0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d004      	beq.n	800ee28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4a34      	ldr	r2, [pc, #208]	@ (800eef4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d108      	bne.n	800ee3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ee2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	68fa      	ldr	r2, [r7, #12]
 800ee36:	4313      	orrs	r3, r2
 800ee38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	68fa      	ldr	r2, [r7, #12]
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	68fa      	ldr	r2, [r7, #12]
 800ee52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4a25      	ldr	r2, [pc, #148]	@ (800eef0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d02c      	beq.n	800eeb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee66:	d027      	beq.n	800eeb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4a22      	ldr	r2, [pc, #136]	@ (800eef8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d022      	beq.n	800eeb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	4a21      	ldr	r2, [pc, #132]	@ (800eefc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d01d      	beq.n	800eeb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4a1f      	ldr	r2, [pc, #124]	@ (800ef00 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d018      	beq.n	800eeb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a1a      	ldr	r2, [pc, #104]	@ (800eef4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d013      	beq.n	800eeb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a1b      	ldr	r2, [pc, #108]	@ (800ef04 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d00e      	beq.n	800eeb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a1a      	ldr	r2, [pc, #104]	@ (800ef08 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d009      	beq.n	800eeb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a18      	ldr	r2, [pc, #96]	@ (800ef0c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d004      	beq.n	800eeb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4a17      	ldr	r2, [pc, #92]	@ (800ef10 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d10c      	bne.n	800eed2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eebe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	689b      	ldr	r3, [r3, #8]
 800eec4:	68ba      	ldr	r2, [r7, #8]
 800eec6:	4313      	orrs	r3, r2
 800eec8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	68ba      	ldr	r2, [r7, #8]
 800eed0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2201      	movs	r2, #1
 800eed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2200      	movs	r2, #0
 800eede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eee2:	2300      	movs	r3, #0
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3714      	adds	r7, #20
 800eee8:	46bd      	mov	sp, r7
 800eeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeee:	4770      	bx	lr
 800eef0:	40010000 	.word	0x40010000
 800eef4:	40010400 	.word	0x40010400
 800eef8:	40000400 	.word	0x40000400
 800eefc:	40000800 	.word	0x40000800
 800ef00:	40000c00 	.word	0x40000c00
 800ef04:	40001800 	.word	0x40001800
 800ef08:	40014000 	.word	0x40014000
 800ef0c:	4000e000 	.word	0x4000e000
 800ef10:	4000e400 	.word	0x4000e400

0800ef14 <LL_GPIO_SetPinMode>:
{
 800ef14:	b480      	push	{r7}
 800ef16:	b085      	sub	sp, #20
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	6819      	ldr	r1, [r3, #0]
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	fb03 f203 	mul.w	r2, r3, r3
 800ef2a:	4613      	mov	r3, r2
 800ef2c:	005b      	lsls	r3, r3, #1
 800ef2e:	4413      	add	r3, r2
 800ef30:	43db      	mvns	r3, r3
 800ef32:	ea01 0203 	and.w	r2, r1, r3
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	fb03 f303 	mul.w	r3, r3, r3
 800ef3c:	6879      	ldr	r1, [r7, #4]
 800ef3e:	fb01 f303 	mul.w	r3, r1, r3
 800ef42:	431a      	orrs	r2, r3
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	601a      	str	r2, [r3, #0]
}
 800ef48:	bf00      	nop
 800ef4a:	3714      	adds	r7, #20
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr

0800ef54 <LL_GPIO_SetPinOutputType>:
{
 800ef54:	b480      	push	{r7}
 800ef56:	b085      	sub	sp, #20
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	60b9      	str	r1, [r7, #8]
 800ef5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	685a      	ldr	r2, [r3, #4]
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	43db      	mvns	r3, r3
 800ef68:	401a      	ands	r2, r3
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	6879      	ldr	r1, [r7, #4]
 800ef6e:	fb01 f303 	mul.w	r3, r1, r3
 800ef72:	431a      	orrs	r2, r3
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	605a      	str	r2, [r3, #4]
}
 800ef78:	bf00      	nop
 800ef7a:	3714      	adds	r7, #20
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr

0800ef84 <LL_GPIO_SetPinSpeed>:
{
 800ef84:	b480      	push	{r7}
 800ef86:	b085      	sub	sp, #20
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	6899      	ldr	r1, [r3, #8]
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	fb03 f203 	mul.w	r2, r3, r3
 800ef9a:	4613      	mov	r3, r2
 800ef9c:	005b      	lsls	r3, r3, #1
 800ef9e:	4413      	add	r3, r2
 800efa0:	43db      	mvns	r3, r3
 800efa2:	ea01 0203 	and.w	r2, r1, r3
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	fb03 f303 	mul.w	r3, r3, r3
 800efac:	6879      	ldr	r1, [r7, #4]
 800efae:	fb01 f303 	mul.w	r3, r1, r3
 800efb2:	431a      	orrs	r2, r3
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	609a      	str	r2, [r3, #8]
}
 800efb8:	bf00      	nop
 800efba:	3714      	adds	r7, #20
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr

0800efc4 <LL_GPIO_SetPinPull>:
{
 800efc4:	b480      	push	{r7}
 800efc6:	b085      	sub	sp, #20
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	68d9      	ldr	r1, [r3, #12]
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	fb03 f203 	mul.w	r2, r3, r3
 800efda:	4613      	mov	r3, r2
 800efdc:	005b      	lsls	r3, r3, #1
 800efde:	4413      	add	r3, r2
 800efe0:	43db      	mvns	r3, r3
 800efe2:	ea01 0203 	and.w	r2, r1, r3
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	fb03 f303 	mul.w	r3, r3, r3
 800efec:	6879      	ldr	r1, [r7, #4]
 800efee:	fb01 f303 	mul.w	r3, r1, r3
 800eff2:	431a      	orrs	r2, r3
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	60da      	str	r2, [r3, #12]
}
 800eff8:	bf00      	nop
 800effa:	3714      	adds	r7, #20
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr

0800f004 <LL_GPIO_SetAFPin_0_7>:
{
 800f004:	b480      	push	{r7}
 800f006:	b085      	sub	sp, #20
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	6a19      	ldr	r1, [r3, #32]
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	fb03 f303 	mul.w	r3, r3, r3
 800f01a:	68ba      	ldr	r2, [r7, #8]
 800f01c:	fb02 f303 	mul.w	r3, r2, r3
 800f020:	68ba      	ldr	r2, [r7, #8]
 800f022:	fb03 f202 	mul.w	r2, r3, r2
 800f026:	4613      	mov	r3, r2
 800f028:	011b      	lsls	r3, r3, #4
 800f02a:	1a9b      	subs	r3, r3, r2
 800f02c:	43db      	mvns	r3, r3
 800f02e:	ea01 0203 	and.w	r2, r1, r3
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	fb03 f303 	mul.w	r3, r3, r3
 800f038:	68b9      	ldr	r1, [r7, #8]
 800f03a:	fb01 f303 	mul.w	r3, r1, r3
 800f03e:	68b9      	ldr	r1, [r7, #8]
 800f040:	fb01 f303 	mul.w	r3, r1, r3
 800f044:	6879      	ldr	r1, [r7, #4]
 800f046:	fb01 f303 	mul.w	r3, r1, r3
 800f04a:	431a      	orrs	r2, r3
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	621a      	str	r2, [r3, #32]
}
 800f050:	bf00      	nop
 800f052:	3714      	adds	r7, #20
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr

0800f05c <LL_GPIO_SetAFPin_8_15>:
{
 800f05c:	b480      	push	{r7}
 800f05e:	b085      	sub	sp, #20
 800f060:	af00      	add	r7, sp, #0
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	0a1b      	lsrs	r3, r3, #8
 800f070:	68ba      	ldr	r2, [r7, #8]
 800f072:	0a12      	lsrs	r2, r2, #8
 800f074:	fb02 f303 	mul.w	r3, r2, r3
 800f078:	68ba      	ldr	r2, [r7, #8]
 800f07a:	0a12      	lsrs	r2, r2, #8
 800f07c:	fb02 f303 	mul.w	r3, r2, r3
 800f080:	68ba      	ldr	r2, [r7, #8]
 800f082:	0a12      	lsrs	r2, r2, #8
 800f084:	fb03 f202 	mul.w	r2, r3, r2
 800f088:	4613      	mov	r3, r2
 800f08a:	011b      	lsls	r3, r3, #4
 800f08c:	1a9b      	subs	r3, r3, r2
 800f08e:	43db      	mvns	r3, r3
 800f090:	ea01 0203 	and.w	r2, r1, r3
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	0a1b      	lsrs	r3, r3, #8
 800f098:	68b9      	ldr	r1, [r7, #8]
 800f09a:	0a09      	lsrs	r1, r1, #8
 800f09c:	fb01 f303 	mul.w	r3, r1, r3
 800f0a0:	68b9      	ldr	r1, [r7, #8]
 800f0a2:	0a09      	lsrs	r1, r1, #8
 800f0a4:	fb01 f303 	mul.w	r3, r1, r3
 800f0a8:	68b9      	ldr	r1, [r7, #8]
 800f0aa:	0a09      	lsrs	r1, r1, #8
 800f0ac:	fb01 f303 	mul.w	r3, r1, r3
 800f0b0:	6879      	ldr	r1, [r7, #4]
 800f0b2:	fb01 f303 	mul.w	r3, r1, r3
 800f0b6:	431a      	orrs	r2, r3
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800f0bc:	bf00      	nop
 800f0be:	3714      	adds	r7, #20
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr

0800f0c8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b088      	sub	sp, #32
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	fa93 f3a3 	rbit	r3, r3
 800f0de:	60fb      	str	r3, [r7, #12]
  return result;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d101      	bne.n	800f0ee <LL_GPIO_Init+0x26>
    return 32U;
 800f0ea:	2320      	movs	r3, #32
 800f0ec:	e003      	b.n	800f0f6 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	fab3 f383 	clz	r3, r3
 800f0f4:	b2db      	uxtb	r3, r3
 800f0f6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f0f8:	e048      	b.n	800f18c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	681a      	ldr	r2, [r3, #0]
 800f0fe:	2101      	movs	r1, #1
 800f100:	69fb      	ldr	r3, [r7, #28]
 800f102:	fa01 f303 	lsl.w	r3, r1, r3
 800f106:	4013      	ands	r3, r2
 800f108:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d03a      	beq.n	800f186 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	2b01      	cmp	r3, #1
 800f116:	d003      	beq.n	800f120 <LL_GPIO_Init+0x58>
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d10e      	bne.n	800f13e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	461a      	mov	r2, r3
 800f126:	69b9      	ldr	r1, [r7, #24]
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f7ff ff2b 	bl	800ef84 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	6819      	ldr	r1, [r3, #0]
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	68db      	ldr	r3, [r3, #12]
 800f136:	461a      	mov	r2, r3
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f7ff ff0b 	bl	800ef54 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	691b      	ldr	r3, [r3, #16]
 800f142:	461a      	mov	r2, r3
 800f144:	69b9      	ldr	r1, [r7, #24]
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f7ff ff3c 	bl	800efc4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	2b02      	cmp	r3, #2
 800f152:	d111      	bne.n	800f178 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800f154:	69bb      	ldr	r3, [r7, #24]
 800f156:	2bff      	cmp	r3, #255	@ 0xff
 800f158:	d807      	bhi.n	800f16a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	695b      	ldr	r3, [r3, #20]
 800f15e:	461a      	mov	r2, r3
 800f160:	69b9      	ldr	r1, [r7, #24]
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f7ff ff4e 	bl	800f004 <LL_GPIO_SetAFPin_0_7>
 800f168:	e006      	b.n	800f178 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	695b      	ldr	r3, [r3, #20]
 800f16e:	461a      	mov	r2, r3
 800f170:	69b9      	ldr	r1, [r7, #24]
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f7ff ff72 	bl	800f05c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	685b      	ldr	r3, [r3, #4]
 800f17c:	461a      	mov	r2, r3
 800f17e:	69b9      	ldr	r1, [r7, #24]
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f7ff fec7 	bl	800ef14 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	3301      	adds	r3, #1
 800f18a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	69fb      	ldr	r3, [r7, #28]
 800f192:	fa22 f303 	lsr.w	r3, r2, r3
 800f196:	2b00      	cmp	r3, #0
 800f198:	d1af      	bne.n	800f0fa <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800f19a:	2300      	movs	r3, #0
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3720      	adds	r7, #32
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800f1a8:	4b07      	ldr	r3, [pc, #28]	@ (800f1c8 <LL_RCC_HSE_IsReady+0x24>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f1b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f1b4:	d101      	bne.n	800f1ba <LL_RCC_HSE_IsReady+0x16>
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	e000      	b.n	800f1bc <LL_RCC_HSE_IsReady+0x18>
 800f1ba:	2300      	movs	r3, #0
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c4:	4770      	bx	lr
 800f1c6:	bf00      	nop
 800f1c8:	58024400 	.word	0x58024400

0800f1cc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800f1d0:	4b06      	ldr	r3, [pc, #24]	@ (800f1ec <LL_RCC_HSI_IsReady+0x20>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f003 0304 	and.w	r3, r3, #4
 800f1d8:	2b04      	cmp	r3, #4
 800f1da:	d101      	bne.n	800f1e0 <LL_RCC_HSI_IsReady+0x14>
 800f1dc:	2301      	movs	r3, #1
 800f1de:	e000      	b.n	800f1e2 <LL_RCC_HSI_IsReady+0x16>
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr
 800f1ec:	58024400 	.word	0x58024400

0800f1f0 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 800f1f4:	4b04      	ldr	r3, [pc, #16]	@ (800f208 <LL_RCC_HSI_GetDivider+0x18>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	f003 0318 	and.w	r3, r3, #24
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr
 800f206:	bf00      	nop
 800f208:	58024400 	.word	0x58024400

0800f20c <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 800f20c:	b480      	push	{r7}
 800f20e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 800f210:	4b07      	ldr	r3, [pc, #28]	@ (800f230 <LL_RCC_CSI_IsReady+0x24>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f21c:	d101      	bne.n	800f222 <LL_RCC_CSI_IsReady+0x16>
 800f21e:	2301      	movs	r3, #1
 800f220:	e000      	b.n	800f224 <LL_RCC_CSI_IsReady+0x18>
 800f222:	2300      	movs	r3, #0
}
 800f224:	4618      	mov	r0, r3
 800f226:	46bd      	mov	sp, r7
 800f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22c:	4770      	bx	lr
 800f22e:	bf00      	nop
 800f230:	58024400 	.word	0x58024400

0800f234 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800f234:	b480      	push	{r7}
 800f236:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f238:	4b06      	ldr	r3, [pc, #24]	@ (800f254 <LL_RCC_LSE_IsReady+0x20>)
 800f23a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f23c:	f003 0302 	and.w	r3, r3, #2
 800f240:	2b02      	cmp	r3, #2
 800f242:	d101      	bne.n	800f248 <LL_RCC_LSE_IsReady+0x14>
 800f244:	2301      	movs	r3, #1
 800f246:	e000      	b.n	800f24a <LL_RCC_LSE_IsReady+0x16>
 800f248:	2300      	movs	r3, #0
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr
 800f254:	58024400 	.word	0x58024400

0800f258 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800f258:	b480      	push	{r7}
 800f25a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f25c:	4b04      	ldr	r3, [pc, #16]	@ (800f270 <LL_RCC_GetSysClkSource+0x18>)
 800f25e:	691b      	ldr	r3, [r3, #16]
 800f260:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 800f264:	4618      	mov	r0, r3
 800f266:	46bd      	mov	sp, r7
 800f268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop
 800f270:	58024400 	.word	0x58024400

0800f274 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 800f274:	b480      	push	{r7}
 800f276:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 800f278:	4b04      	ldr	r3, [pc, #16]	@ (800f28c <LL_RCC_GetSysPrescaler+0x18>)
 800f27a:	699b      	ldr	r3, [r3, #24]
 800f27c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 800f280:	4618      	mov	r0, r3
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop
 800f28c:	58024400 	.word	0x58024400

0800f290 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800f290:	b480      	push	{r7}
 800f292:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 800f294:	4b04      	ldr	r3, [pc, #16]	@ (800f2a8 <LL_RCC_GetAHBPrescaler+0x18>)
 800f296:	699b      	ldr	r3, [r3, #24]
 800f298:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop
 800f2a8:	58024400 	.word	0x58024400

0800f2ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 800f2b0:	4b04      	ldr	r3, [pc, #16]	@ (800f2c4 <LL_RCC_GetAPB1Prescaler+0x18>)
 800f2b2:	69db      	ldr	r3, [r3, #28]
 800f2b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr
 800f2c2:	bf00      	nop
 800f2c4:	58024400 	.word	0x58024400

0800f2c8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 800f2cc:	4b04      	ldr	r3, [pc, #16]	@ (800f2e0 <LL_RCC_GetAPB2Prescaler+0x18>)
 800f2ce:	69db      	ldr	r3, [r3, #28]
 800f2d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr
 800f2de:	bf00      	nop
 800f2e0:	58024400 	.word	0x58024400

0800f2e4 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b085      	sub	sp, #20
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	b2da      	uxtb	r2, r3
 800f2f0:	4b0e      	ldr	r3, [pc, #56]	@ (800f32c <LL_RCC_GetClockSource+0x48>)
 800f2f2:	4413      	add	r3, r2
 800f2f4:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681a      	ldr	r2, [r3, #0]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	0e19      	lsrs	r1, r3, #24
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	0a1b      	lsrs	r3, r3, #8
 800f302:	f003 031f 	and.w	r3, r3, #31
 800f306:	fa01 f303 	lsl.w	r3, r1, r3
 800f30a:	401a      	ands	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	0a1b      	lsrs	r3, r3, #8
 800f310:	f003 031f 	and.w	r3, r3, #31
 800f314:	fa22 f303 	lsr.w	r3, r2, r3
 800f318:	041a      	lsls	r2, r3, #16
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	4313      	orrs	r3, r2
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3714      	adds	r7, #20
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr
 800f32a:	bf00      	nop
 800f32c:	5802444c 	.word	0x5802444c

0800f330 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f7ff ffd3 	bl	800f2e4 <LL_RCC_GetClockSource>
 800f33e:	4603      	mov	r3, r0
}
 800f340:	4618      	mov	r0, r3
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 800f348:	b480      	push	{r7}
 800f34a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 800f34c:	4b04      	ldr	r3, [pc, #16]	@ (800f360 <LL_RCC_PLL_GetSource+0x18>)
 800f34e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f350:	f003 0303 	and.w	r3, r3, #3
}
 800f354:	4618      	mov	r0, r3
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	58024400 	.word	0x58024400

0800f364 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 800f364:	b480      	push	{r7}
 800f366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 800f368:	4b07      	ldr	r3, [pc, #28]	@ (800f388 <LL_RCC_PLL1P_IsEnabled+0x24>)
 800f36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f36c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f374:	d101      	bne.n	800f37a <LL_RCC_PLL1P_IsEnabled+0x16>
 800f376:	2301      	movs	r3, #1
 800f378:	e000      	b.n	800f37c <LL_RCC_PLL1P_IsEnabled+0x18>
 800f37a:	2300      	movs	r3, #0
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	46bd      	mov	sp, r7
 800f380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f384:	4770      	bx	lr
 800f386:	bf00      	nop
 800f388:	58024400 	.word	0x58024400

0800f38c <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 800f38c:	b480      	push	{r7}
 800f38e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 800f390:	4b07      	ldr	r3, [pc, #28]	@ (800f3b0 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 800f392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f39c:	d101      	bne.n	800f3a2 <LL_RCC_PLL1Q_IsEnabled+0x16>
 800f39e:	2301      	movs	r3, #1
 800f3a0:	e000      	b.n	800f3a4 <LL_RCC_PLL1Q_IsEnabled+0x18>
 800f3a2:	2300      	movs	r3, #0
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr
 800f3ae:	bf00      	nop
 800f3b0:	58024400 	.word	0x58024400

0800f3b4 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 800f3b8:	4b07      	ldr	r3, [pc, #28]	@ (800f3d8 <LL_RCC_PLL1R_IsEnabled+0x24>)
 800f3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f3c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f3c4:	d101      	bne.n	800f3ca <LL_RCC_PLL1R_IsEnabled+0x16>
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	e000      	b.n	800f3cc <LL_RCC_PLL1R_IsEnabled+0x18>
 800f3ca:	2300      	movs	r3, #0
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr
 800f3d6:	bf00      	nop
 800f3d8:	58024400 	.word	0x58024400

0800f3dc <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 800f3e0:	4b06      	ldr	r3, [pc, #24]	@ (800f3fc <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 800f3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3e4:	f003 0301 	and.w	r3, r3, #1
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d101      	bne.n	800f3f0 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	e000      	b.n	800f3f2 <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 800f3f0:	2300      	movs	r3, #0
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr
 800f3fc:	58024400 	.word	0x58024400

0800f400 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 800f400:	b480      	push	{r7}
 800f402:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 800f404:	4b04      	ldr	r3, [pc, #16]	@ (800f418 <LL_RCC_PLL1_GetN+0x18>)
 800f406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f40c:	3301      	adds	r3, #1
}
 800f40e:	4618      	mov	r0, r3
 800f410:	46bd      	mov	sp, r7
 800f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f416:	4770      	bx	lr
 800f418:	58024400 	.word	0x58024400

0800f41c <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 800f41c:	b480      	push	{r7}
 800f41e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 800f420:	4b04      	ldr	r3, [pc, #16]	@ (800f434 <LL_RCC_PLL1_GetM+0x18>)
 800f422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f424:	091b      	lsrs	r3, r3, #4
 800f426:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr
 800f434:	58024400 	.word	0x58024400

0800f438 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 800f438:	b480      	push	{r7}
 800f43a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 800f43c:	4b05      	ldr	r3, [pc, #20]	@ (800f454 <LL_RCC_PLL1_GetP+0x1c>)
 800f43e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f440:	0a5b      	lsrs	r3, r3, #9
 800f442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f446:	3301      	adds	r3, #1
}
 800f448:	4618      	mov	r0, r3
 800f44a:	46bd      	mov	sp, r7
 800f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f450:	4770      	bx	lr
 800f452:	bf00      	nop
 800f454:	58024400 	.word	0x58024400

0800f458 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 800f458:	b480      	push	{r7}
 800f45a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 800f45c:	4b05      	ldr	r3, [pc, #20]	@ (800f474 <LL_RCC_PLL1_GetQ+0x1c>)
 800f45e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f460:	0c1b      	lsrs	r3, r3, #16
 800f462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f466:	3301      	adds	r3, #1
}
 800f468:	4618      	mov	r0, r3
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr
 800f472:	bf00      	nop
 800f474:	58024400 	.word	0x58024400

0800f478 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 800f478:	b480      	push	{r7}
 800f47a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 800f47c:	4b05      	ldr	r3, [pc, #20]	@ (800f494 <LL_RCC_PLL1_GetR+0x1c>)
 800f47e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f480:	0e1b      	lsrs	r3, r3, #24
 800f482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f486:	3301      	adds	r3, #1
}
 800f488:	4618      	mov	r0, r3
 800f48a:	46bd      	mov	sp, r7
 800f48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f490:	4770      	bx	lr
 800f492:	bf00      	nop
 800f494:	58024400 	.word	0x58024400

0800f498 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 800f498:	b480      	push	{r7}
 800f49a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 800f49c:	4b04      	ldr	r3, [pc, #16]	@ (800f4b0 <LL_RCC_PLL1_GetFRACN+0x18>)
 800f49e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4a0:	08db      	lsrs	r3, r3, #3
 800f4a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr
 800f4b0:	58024400 	.word	0x58024400

0800f4b4 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 800f4b8:	4b07      	ldr	r3, [pc, #28]	@ (800f4d8 <LL_RCC_PLL2_IsReady+0x24>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f4c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f4c4:	d101      	bne.n	800f4ca <LL_RCC_PLL2_IsReady+0x16>
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	e000      	b.n	800f4cc <LL_RCC_PLL2_IsReady+0x18>
 800f4ca:	2300      	movs	r3, #0
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d4:	4770      	bx	lr
 800f4d6:	bf00      	nop
 800f4d8:	58024400 	.word	0x58024400

0800f4dc <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 800f4e0:	4b07      	ldr	r3, [pc, #28]	@ (800f500 <LL_RCC_PLL2P_IsEnabled+0x24>)
 800f4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f4e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800f4ec:	d101      	bne.n	800f4f2 <LL_RCC_PLL2P_IsEnabled+0x16>
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	e000      	b.n	800f4f4 <LL_RCC_PLL2P_IsEnabled+0x18>
 800f4f2:	2300      	movs	r3, #0
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop
 800f500:	58024400 	.word	0x58024400

0800f504 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 800f504:	b480      	push	{r7}
 800f506:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 800f508:	4b07      	ldr	r3, [pc, #28]	@ (800f528 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 800f50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f50c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f510:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f514:	d101      	bne.n	800f51a <LL_RCC_PLL2Q_IsEnabled+0x16>
 800f516:	2301      	movs	r3, #1
 800f518:	e000      	b.n	800f51c <LL_RCC_PLL2Q_IsEnabled+0x18>
 800f51a:	2300      	movs	r3, #0
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr
 800f526:	bf00      	nop
 800f528:	58024400 	.word	0x58024400

0800f52c <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 800f52c:	b480      	push	{r7}
 800f52e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 800f530:	4b07      	ldr	r3, [pc, #28]	@ (800f550 <LL_RCC_PLL2R_IsEnabled+0x24>)
 800f532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f538:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f53c:	d101      	bne.n	800f542 <LL_RCC_PLL2R_IsEnabled+0x16>
 800f53e:	2301      	movs	r3, #1
 800f540:	e000      	b.n	800f544 <LL_RCC_PLL2R_IsEnabled+0x18>
 800f542:	2300      	movs	r3, #0
}
 800f544:	4618      	mov	r0, r3
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop
 800f550:	58024400 	.word	0x58024400

0800f554 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 800f554:	b480      	push	{r7}
 800f556:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 800f558:	4b06      	ldr	r3, [pc, #24]	@ (800f574 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 800f55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f55c:	f003 0310 	and.w	r3, r3, #16
 800f560:	2b10      	cmp	r3, #16
 800f562:	d101      	bne.n	800f568 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 800f564:	2301      	movs	r3, #1
 800f566:	e000      	b.n	800f56a <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 800f568:	2300      	movs	r3, #0
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	46bd      	mov	sp, r7
 800f56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f572:	4770      	bx	lr
 800f574:	58024400 	.word	0x58024400

0800f578 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 800f578:	b480      	push	{r7}
 800f57a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 800f57c:	4b04      	ldr	r3, [pc, #16]	@ (800f590 <LL_RCC_PLL2_GetN+0x18>)
 800f57e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f584:	3301      	adds	r3, #1
}
 800f586:	4618      	mov	r0, r3
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr
 800f590:	58024400 	.word	0x58024400

0800f594 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 800f594:	b480      	push	{r7}
 800f596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 800f598:	4b04      	ldr	r3, [pc, #16]	@ (800f5ac <LL_RCC_PLL2_GetM+0x18>)
 800f59a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f59c:	0b1b      	lsrs	r3, r3, #12
 800f59e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr
 800f5ac:	58024400 	.word	0x58024400

0800f5b0 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 800f5b4:	4b05      	ldr	r3, [pc, #20]	@ (800f5cc <LL_RCC_PLL2_GetP+0x1c>)
 800f5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5b8:	0a5b      	lsrs	r3, r3, #9
 800f5ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f5be:	3301      	adds	r3, #1
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c8:	4770      	bx	lr
 800f5ca:	bf00      	nop
 800f5cc:	58024400 	.word	0x58024400

0800f5d0 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 800f5d4:	4b05      	ldr	r3, [pc, #20]	@ (800f5ec <LL_RCC_PLL2_GetQ+0x1c>)
 800f5d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5d8:	0c1b      	lsrs	r3, r3, #16
 800f5da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f5de:	3301      	adds	r3, #1
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e8:	4770      	bx	lr
 800f5ea:	bf00      	nop
 800f5ec:	58024400 	.word	0x58024400

0800f5f0 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 800f5f4:	4b05      	ldr	r3, [pc, #20]	@ (800f60c <LL_RCC_PLL2_GetR+0x1c>)
 800f5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5f8:	0e1b      	lsrs	r3, r3, #24
 800f5fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f5fe:	3301      	adds	r3, #1
}
 800f600:	4618      	mov	r0, r3
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr
 800f60a:	bf00      	nop
 800f60c:	58024400 	.word	0x58024400

0800f610 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 800f610:	b480      	push	{r7}
 800f612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 800f614:	4b04      	ldr	r3, [pc, #16]	@ (800f628 <LL_RCC_PLL2_GetFRACN+0x18>)
 800f616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f618:	08db      	lsrs	r3, r3, #3
 800f61a:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800f61e:	4618      	mov	r0, r3
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr
 800f628:	58024400 	.word	0x58024400

0800f62c <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 800f62c:	b480      	push	{r7}
 800f62e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 800f630:	4b07      	ldr	r3, [pc, #28]	@ (800f650 <LL_RCC_PLL3_IsReady+0x24>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f63c:	d101      	bne.n	800f642 <LL_RCC_PLL3_IsReady+0x16>
 800f63e:	2301      	movs	r3, #1
 800f640:	e000      	b.n	800f644 <LL_RCC_PLL3_IsReady+0x18>
 800f642:	2300      	movs	r3, #0
}
 800f644:	4618      	mov	r0, r3
 800f646:	46bd      	mov	sp, r7
 800f648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64c:	4770      	bx	lr
 800f64e:	bf00      	nop
 800f650:	58024400 	.word	0x58024400

0800f654 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 800f654:	b480      	push	{r7}
 800f656:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 800f658:	4b07      	ldr	r3, [pc, #28]	@ (800f678 <LL_RCC_PLL3P_IsEnabled+0x24>)
 800f65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f65c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f660:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f664:	d101      	bne.n	800f66a <LL_RCC_PLL3P_IsEnabled+0x16>
 800f666:	2301      	movs	r3, #1
 800f668:	e000      	b.n	800f66c <LL_RCC_PLL3P_IsEnabled+0x18>
 800f66a:	2300      	movs	r3, #0
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	46bd      	mov	sp, r7
 800f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f674:	4770      	bx	lr
 800f676:	bf00      	nop
 800f678:	58024400 	.word	0x58024400

0800f67c <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 800f67c:	b480      	push	{r7}
 800f67e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 800f680:	4b07      	ldr	r3, [pc, #28]	@ (800f6a0 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 800f682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f684:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f688:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f68c:	d101      	bne.n	800f692 <LL_RCC_PLL3Q_IsEnabled+0x16>
 800f68e:	2301      	movs	r3, #1
 800f690:	e000      	b.n	800f694 <LL_RCC_PLL3Q_IsEnabled+0x18>
 800f692:	2300      	movs	r3, #0
}
 800f694:	4618      	mov	r0, r3
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop
 800f6a0:	58024400 	.word	0x58024400

0800f6a4 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 800f6a8:	4b07      	ldr	r3, [pc, #28]	@ (800f6c8 <LL_RCC_PLL3R_IsEnabled+0x24>)
 800f6aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f6b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f6b4:	d101      	bne.n	800f6ba <LL_RCC_PLL3R_IsEnabled+0x16>
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	e000      	b.n	800f6bc <LL_RCC_PLL3R_IsEnabled+0x18>
 800f6ba:	2300      	movs	r3, #0
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c4:	4770      	bx	lr
 800f6c6:	bf00      	nop
 800f6c8:	58024400 	.word	0x58024400

0800f6cc <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 800f6d0:	4b07      	ldr	r3, [pc, #28]	@ (800f6f0 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 800f6d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f6d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f6dc:	d101      	bne.n	800f6e2 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 800f6de:	2301      	movs	r3, #1
 800f6e0:	e000      	b.n	800f6e4 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 800f6e2:	2300      	movs	r3, #0
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr
 800f6ee:	bf00      	nop
 800f6f0:	58024400 	.word	0x58024400

0800f6f4 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 800f6f8:	4b04      	ldr	r3, [pc, #16]	@ (800f70c <LL_RCC_PLL3_GetN+0x18>)
 800f6fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f700:	3301      	adds	r3, #1
}
 800f702:	4618      	mov	r0, r3
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr
 800f70c:	58024400 	.word	0x58024400

0800f710 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 800f710:	b480      	push	{r7}
 800f712:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 800f714:	4b04      	ldr	r3, [pc, #16]	@ (800f728 <LL_RCC_PLL3_GetM+0x18>)
 800f716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f718:	0d1b      	lsrs	r3, r3, #20
 800f71a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800f71e:	4618      	mov	r0, r3
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr
 800f728:	58024400 	.word	0x58024400

0800f72c <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 800f72c:	b480      	push	{r7}
 800f72e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 800f730:	4b05      	ldr	r3, [pc, #20]	@ (800f748 <LL_RCC_PLL3_GetP+0x1c>)
 800f732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f734:	0a5b      	lsrs	r3, r3, #9
 800f736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f73a:	3301      	adds	r3, #1
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	46bd      	mov	sp, r7
 800f740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f744:	4770      	bx	lr
 800f746:	bf00      	nop
 800f748:	58024400 	.word	0x58024400

0800f74c <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 800f74c:	b480      	push	{r7}
 800f74e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 800f750:	4b05      	ldr	r3, [pc, #20]	@ (800f768 <LL_RCC_PLL3_GetQ+0x1c>)
 800f752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f754:	0c1b      	lsrs	r3, r3, #16
 800f756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f75a:	3301      	adds	r3, #1
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	46bd      	mov	sp, r7
 800f760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f764:	4770      	bx	lr
 800f766:	bf00      	nop
 800f768:	58024400 	.word	0x58024400

0800f76c <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 800f76c:	b480      	push	{r7}
 800f76e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 800f770:	4b05      	ldr	r3, [pc, #20]	@ (800f788 <LL_RCC_PLL3_GetR+0x1c>)
 800f772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f774:	0e1b      	lsrs	r3, r3, #24
 800f776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f77a:	3301      	adds	r3, #1
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	46bd      	mov	sp, r7
 800f780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f784:	4770      	bx	lr
 800f786:	bf00      	nop
 800f788:	58024400 	.word	0x58024400

0800f78c <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 800f78c:	b480      	push	{r7}
 800f78e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 800f790:	4b04      	ldr	r3, [pc, #16]	@ (800f7a4 <LL_RCC_PLL3_GetFRACN+0x18>)
 800f792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f794:	08db      	lsrs	r3, r3, #3
 800f796:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr
 800f7a4:	58024400 	.word	0x58024400

0800f7a8 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b08a      	sub	sp, #40	@ 0x28
 800f7ac:	af02      	add	r7, sp, #8
 800f7ae:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800f7b8:	f7ff fdc6 	bl	800f348 <LL_RCC_PLL_GetSource>
 800f7bc:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	2b02      	cmp	r3, #2
 800f7c2:	d01f      	beq.n	800f804 <LL_RCC_GetPLL1ClockFreq+0x5c>
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	2b02      	cmp	r3, #2
 800f7c8:	d824      	bhi.n	800f814 <LL_RCC_GetPLL1ClockFreq+0x6c>
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d003      	beq.n	800f7d8 <LL_RCC_GetPLL1ClockFreq+0x30>
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d00e      	beq.n	800f7f4 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800f7d6:	e01d      	b.n	800f814 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800f7d8:	f7ff fcf8 	bl	800f1cc <LL_RCC_HSI_IsReady>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d01a      	beq.n	800f818 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800f7e2:	f7ff fd05 	bl	800f1f0 <LL_RCC_HSI_GetDivider>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	08db      	lsrs	r3, r3, #3
 800f7ea:	4a38      	ldr	r2, [pc, #224]	@ (800f8cc <LL_RCC_GetPLL1ClockFreq+0x124>)
 800f7ec:	fa22 f303 	lsr.w	r3, r2, r3
 800f7f0:	61fb      	str	r3, [r7, #28]
      break;
 800f7f2:	e011      	b.n	800f818 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800f7f4:	f7ff fd0a 	bl	800f20c <LL_RCC_CSI_IsReady>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00e      	beq.n	800f81c <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800f7fe:	4b34      	ldr	r3, [pc, #208]	@ (800f8d0 <LL_RCC_GetPLL1ClockFreq+0x128>)
 800f800:	61fb      	str	r3, [r7, #28]
      break;
 800f802:	e00b      	b.n	800f81c <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800f804:	f7ff fcce 	bl	800f1a4 <LL_RCC_HSE_IsReady>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d008      	beq.n	800f820 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800f80e:	4b31      	ldr	r3, [pc, #196]	@ (800f8d4 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 800f810:	61fb      	str	r3, [r7, #28]
      break;
 800f812:	e005      	b.n	800f820 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 800f814:	bf00      	nop
 800f816:	e004      	b.n	800f822 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800f818:	bf00      	nop
 800f81a:	e002      	b.n	800f822 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800f81c:	bf00      	nop
 800f81e:	e000      	b.n	800f822 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800f820:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2200      	movs	r2, #0
 800f826:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2200      	movs	r2, #0
 800f82c:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2200      	movs	r2, #0
 800f832:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 800f834:	f7ff fdf2 	bl	800f41c <LL_RCC_PLL1_GetM>
 800f838:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 800f83a:	f7ff fde1 	bl	800f400 <LL_RCC_PLL1_GetN>
 800f83e:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 800f840:	f7ff fdcc 	bl	800f3dc <LL_RCC_PLL1FRACN_IsEnabled>
 800f844:	4603      	mov	r3, r0
 800f846:	2b00      	cmp	r3, #0
 800f848:	d002      	beq.n	800f850 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 800f84a:	f7ff fe25 	bl	800f498 <LL_RCC_PLL1_GetFRACN>
 800f84e:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d035      	beq.n	800f8c2 <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 800f856:	f7ff fd85 	bl	800f364 <LL_RCC_PLL1P_IsEnabled>
 800f85a:	4603      	mov	r3, r0
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d00c      	beq.n	800f87a <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 800f860:	f7ff fdea 	bl	800f438 <LL_RCC_PLL1_GetP>
 800f864:	4603      	mov	r3, r0
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	69bb      	ldr	r3, [r7, #24]
 800f86a:	68fa      	ldr	r2, [r7, #12]
 800f86c:	6939      	ldr	r1, [r7, #16]
 800f86e:	69f8      	ldr	r0, [r7, #28]
 800f870:	f000 f964 	bl	800fb3c <LL_RCC_CalcPLLClockFreq>
 800f874:	4602      	mov	r2, r0
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 800f87a:	f7ff fd87 	bl	800f38c <LL_RCC_PLL1Q_IsEnabled>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b00      	cmp	r3, #0
 800f882:	d00c      	beq.n	800f89e <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 800f884:	f7ff fde8 	bl	800f458 <LL_RCC_PLL1_GetQ>
 800f888:	4603      	mov	r3, r0
 800f88a:	9300      	str	r3, [sp, #0]
 800f88c:	69bb      	ldr	r3, [r7, #24]
 800f88e:	68fa      	ldr	r2, [r7, #12]
 800f890:	6939      	ldr	r1, [r7, #16]
 800f892:	69f8      	ldr	r0, [r7, #28]
 800f894:	f000 f952 	bl	800fb3c <LL_RCC_CalcPLLClockFreq>
 800f898:	4602      	mov	r2, r0
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 800f89e:	f7ff fd89 	bl	800f3b4 <LL_RCC_PLL1R_IsEnabled>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d00c      	beq.n	800f8c2 <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 800f8a8:	f7ff fde6 	bl	800f478 <LL_RCC_PLL1_GetR>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	9300      	str	r3, [sp, #0]
 800f8b0:	69bb      	ldr	r3, [r7, #24]
 800f8b2:	68fa      	ldr	r2, [r7, #12]
 800f8b4:	6939      	ldr	r1, [r7, #16]
 800f8b6:	69f8      	ldr	r0, [r7, #28]
 800f8b8:	f000 f940 	bl	800fb3c <LL_RCC_CalcPLLClockFreq>
 800f8bc:	4602      	mov	r2, r0
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	609a      	str	r2, [r3, #8]
    }
  }
}
 800f8c2:	bf00      	nop
 800f8c4:	3720      	adds	r7, #32
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	03d09000 	.word	0x03d09000
 800f8d0:	003d0900 	.word	0x003d0900
 800f8d4:	017d7840 	.word	0x017d7840

0800f8d8 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b08a      	sub	sp, #40	@ 0x28
 800f8dc:	af02      	add	r7, sp, #8
 800f8de:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800f8e8:	f7ff fd2e 	bl	800f348 <LL_RCC_PLL_GetSource>
 800f8ec:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	2b02      	cmp	r3, #2
 800f8f2:	d01f      	beq.n	800f934 <LL_RCC_GetPLL2ClockFreq+0x5c>
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	2b02      	cmp	r3, #2
 800f8f8:	d824      	bhi.n	800f944 <LL_RCC_GetPLL2ClockFreq+0x6c>
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d003      	beq.n	800f908 <LL_RCC_GetPLL2ClockFreq+0x30>
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	2b01      	cmp	r3, #1
 800f904:	d00e      	beq.n	800f924 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800f906:	e01d      	b.n	800f944 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800f908:	f7ff fc60 	bl	800f1cc <LL_RCC_HSI_IsReady>
 800f90c:	4603      	mov	r3, r0
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d01a      	beq.n	800f948 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800f912:	f7ff fc6d 	bl	800f1f0 <LL_RCC_HSI_GetDivider>
 800f916:	4603      	mov	r3, r0
 800f918:	08db      	lsrs	r3, r3, #3
 800f91a:	4a38      	ldr	r2, [pc, #224]	@ (800f9fc <LL_RCC_GetPLL2ClockFreq+0x124>)
 800f91c:	fa22 f303 	lsr.w	r3, r2, r3
 800f920:	61fb      	str	r3, [r7, #28]
      break;
 800f922:	e011      	b.n	800f948 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800f924:	f7ff fc72 	bl	800f20c <LL_RCC_CSI_IsReady>
 800f928:	4603      	mov	r3, r0
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d00e      	beq.n	800f94c <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800f92e:	4b34      	ldr	r3, [pc, #208]	@ (800fa00 <LL_RCC_GetPLL2ClockFreq+0x128>)
 800f930:	61fb      	str	r3, [r7, #28]
      break;
 800f932:	e00b      	b.n	800f94c <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800f934:	f7ff fc36 	bl	800f1a4 <LL_RCC_HSE_IsReady>
 800f938:	4603      	mov	r3, r0
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d008      	beq.n	800f950 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800f93e:	4b31      	ldr	r3, [pc, #196]	@ (800fa04 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 800f940:	61fb      	str	r3, [r7, #28]
      break;
 800f942:	e005      	b.n	800f950 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 800f944:	bf00      	nop
 800f946:	e004      	b.n	800f952 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800f948:	bf00      	nop
 800f94a:	e002      	b.n	800f952 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800f94c:	bf00      	nop
 800f94e:	e000      	b.n	800f952 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800f950:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2200      	movs	r2, #0
 800f956:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2200      	movs	r2, #0
 800f95c:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 800f964:	f7ff fe16 	bl	800f594 <LL_RCC_PLL2_GetM>
 800f968:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 800f96a:	f7ff fe05 	bl	800f578 <LL_RCC_PLL2_GetN>
 800f96e:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 800f970:	f7ff fdf0 	bl	800f554 <LL_RCC_PLL2FRACN_IsEnabled>
 800f974:	4603      	mov	r3, r0
 800f976:	2b00      	cmp	r3, #0
 800f978:	d002      	beq.n	800f980 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 800f97a:	f7ff fe49 	bl	800f610 <LL_RCC_PLL2_GetFRACN>
 800f97e:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d035      	beq.n	800f9f2 <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 800f986:	f7ff fda9 	bl	800f4dc <LL_RCC_PLL2P_IsEnabled>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d00c      	beq.n	800f9aa <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 800f990:	f7ff fe0e 	bl	800f5b0 <LL_RCC_PLL2_GetP>
 800f994:	4603      	mov	r3, r0
 800f996:	9300      	str	r3, [sp, #0]
 800f998:	69bb      	ldr	r3, [r7, #24]
 800f99a:	68fa      	ldr	r2, [r7, #12]
 800f99c:	6939      	ldr	r1, [r7, #16]
 800f99e:	69f8      	ldr	r0, [r7, #28]
 800f9a0:	f000 f8cc 	bl	800fb3c <LL_RCC_CalcPLLClockFreq>
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800f9aa:	f7ff fdab 	bl	800f504 <LL_RCC_PLL2Q_IsEnabled>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d00c      	beq.n	800f9ce <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 800f9b4:	f7ff fe0c 	bl	800f5d0 <LL_RCC_PLL2_GetQ>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	9300      	str	r3, [sp, #0]
 800f9bc:	69bb      	ldr	r3, [r7, #24]
 800f9be:	68fa      	ldr	r2, [r7, #12]
 800f9c0:	6939      	ldr	r1, [r7, #16]
 800f9c2:	69f8      	ldr	r0, [r7, #28]
 800f9c4:	f000 f8ba 	bl	800fb3c <LL_RCC_CalcPLLClockFreq>
 800f9c8:	4602      	mov	r2, r0
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 800f9ce:	f7ff fdad 	bl	800f52c <LL_RCC_PLL2R_IsEnabled>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00c      	beq.n	800f9f2 <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 800f9d8:	f7ff fe0a 	bl	800f5f0 <LL_RCC_PLL2_GetR>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	69bb      	ldr	r3, [r7, #24]
 800f9e2:	68fa      	ldr	r2, [r7, #12]
 800f9e4:	6939      	ldr	r1, [r7, #16]
 800f9e6:	69f8      	ldr	r0, [r7, #28]
 800f9e8:	f000 f8a8 	bl	800fb3c <LL_RCC_CalcPLLClockFreq>
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	609a      	str	r2, [r3, #8]
    }
  }
}
 800f9f2:	bf00      	nop
 800f9f4:	3720      	adds	r7, #32
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	03d09000 	.word	0x03d09000
 800fa00:	003d0900 	.word	0x003d0900
 800fa04:	017d7840 	.word	0x017d7840

0800fa08 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b08a      	sub	sp, #40	@ 0x28
 800fa0c:	af02      	add	r7, sp, #8
 800fa0e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800fa10:	2300      	movs	r3, #0
 800fa12:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800fa14:	2300      	movs	r3, #0
 800fa16:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800fa18:	f7ff fc96 	bl	800f348 <LL_RCC_PLL_GetSource>
 800fa1c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	2b02      	cmp	r3, #2
 800fa22:	d01f      	beq.n	800fa64 <LL_RCC_GetPLL3ClockFreq+0x5c>
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	2b02      	cmp	r3, #2
 800fa28:	d824      	bhi.n	800fa74 <LL_RCC_GetPLL3ClockFreq+0x6c>
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d003      	beq.n	800fa38 <LL_RCC_GetPLL3ClockFreq+0x30>
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d00e      	beq.n	800fa54 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800fa36:	e01d      	b.n	800fa74 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800fa38:	f7ff fbc8 	bl	800f1cc <LL_RCC_HSI_IsReady>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d01a      	beq.n	800fa78 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800fa42:	f7ff fbd5 	bl	800f1f0 <LL_RCC_HSI_GetDivider>
 800fa46:	4603      	mov	r3, r0
 800fa48:	08db      	lsrs	r3, r3, #3
 800fa4a:	4a39      	ldr	r2, [pc, #228]	@ (800fb30 <LL_RCC_GetPLL3ClockFreq+0x128>)
 800fa4c:	fa22 f303 	lsr.w	r3, r2, r3
 800fa50:	61fb      	str	r3, [r7, #28]
      break;
 800fa52:	e011      	b.n	800fa78 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800fa54:	f7ff fbda 	bl	800f20c <LL_RCC_CSI_IsReady>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d00e      	beq.n	800fa7c <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800fa5e:	4b35      	ldr	r3, [pc, #212]	@ (800fb34 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 800fa60:	61fb      	str	r3, [r7, #28]
      break;
 800fa62:	e00b      	b.n	800fa7c <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800fa64:	f7ff fb9e 	bl	800f1a4 <LL_RCC_HSE_IsReady>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d008      	beq.n	800fa80 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800fa6e:	4b32      	ldr	r3, [pc, #200]	@ (800fb38 <LL_RCC_GetPLL3ClockFreq+0x130>)
 800fa70:	61fb      	str	r3, [r7, #28]
      break;
 800fa72:	e005      	b.n	800fa80 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 800fa74:	bf00      	nop
 800fa76:	e004      	b.n	800fa82 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800fa78:	bf00      	nop
 800fa7a:	e002      	b.n	800fa82 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800fa7c:	bf00      	nop
 800fa7e:	e000      	b.n	800fa82 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800fa80:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2200      	movs	r2, #0
 800fa86:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2200      	movs	r2, #0
 800fa92:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 800fa94:	f7ff fe3c 	bl	800f710 <LL_RCC_PLL3_GetM>
 800fa98:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 800fa9a:	f7ff fe2b 	bl	800f6f4 <LL_RCC_PLL3_GetN>
 800fa9e:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 800faa0:	f7ff fe14 	bl	800f6cc <LL_RCC_PLL3FRACN_IsEnabled>
 800faa4:	4603      	mov	r3, r0
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d002      	beq.n	800fab0 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 800faaa:	f7ff fe6f 	bl	800f78c <LL_RCC_PLL3_GetFRACN>
 800faae:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d038      	beq.n	800fb28 <LL_RCC_GetPLL3ClockFreq+0x120>
 800fab6:	69fb      	ldr	r3, [r7, #28]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d035      	beq.n	800fb28 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 800fabc:	f7ff fdca 	bl	800f654 <LL_RCC_PLL3P_IsEnabled>
 800fac0:	4603      	mov	r3, r0
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d00c      	beq.n	800fae0 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 800fac6:	f7ff fe31 	bl	800f72c <LL_RCC_PLL3_GetP>
 800faca:	4603      	mov	r3, r0
 800facc:	9300      	str	r3, [sp, #0]
 800face:	69bb      	ldr	r3, [r7, #24]
 800fad0:	68fa      	ldr	r2, [r7, #12]
 800fad2:	6939      	ldr	r1, [r7, #16]
 800fad4:	69f8      	ldr	r0, [r7, #28]
 800fad6:	f000 f831 	bl	800fb3c <LL_RCC_CalcPLLClockFreq>
 800fada:	4602      	mov	r2, r0
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800fae0:	f7ff fdcc 	bl	800f67c <LL_RCC_PLL3Q_IsEnabled>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d00c      	beq.n	800fb04 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 800faea:	f7ff fe2f 	bl	800f74c <LL_RCC_PLL3_GetQ>
 800faee:	4603      	mov	r3, r0
 800faf0:	9300      	str	r3, [sp, #0]
 800faf2:	69bb      	ldr	r3, [r7, #24]
 800faf4:	68fa      	ldr	r2, [r7, #12]
 800faf6:	6939      	ldr	r1, [r7, #16]
 800faf8:	69f8      	ldr	r0, [r7, #28]
 800fafa:	f000 f81f 	bl	800fb3c <LL_RCC_CalcPLLClockFreq>
 800fafe:	4602      	mov	r2, r0
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 800fb04:	f7ff fdce 	bl	800f6a4 <LL_RCC_PLL3R_IsEnabled>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d00c      	beq.n	800fb28 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 800fb0e:	f7ff fe2d 	bl	800f76c <LL_RCC_PLL3_GetR>
 800fb12:	4603      	mov	r3, r0
 800fb14:	9300      	str	r3, [sp, #0]
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	68fa      	ldr	r2, [r7, #12]
 800fb1a:	6939      	ldr	r1, [r7, #16]
 800fb1c:	69f8      	ldr	r0, [r7, #28]
 800fb1e:	f000 f80d 	bl	800fb3c <LL_RCC_CalcPLLClockFreq>
 800fb22:	4602      	mov	r2, r0
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	609a      	str	r2, [r3, #8]
    }
  }
}
 800fb28:	bf00      	nop
 800fb2a:	3720      	adds	r7, #32
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}
 800fb30:	03d09000 	.word	0x03d09000
 800fb34:	003d0900 	.word	0x003d0900
 800fb38:	017d7840 	.word	0x017d7840

0800fb3c <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b087      	sub	sp, #28
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	60f8      	str	r0, [r7, #12]
 800fb44:	60b9      	str	r1, [r7, #8]
 800fb46:	607a      	str	r2, [r7, #4]
 800fb48:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	ee07 3a90 	vmov	s15, r3
 800fb50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	ee07 3a90 	vmov	s15, r3
 800fb5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	ee07 3a90 	vmov	s15, r3
 800fb68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	ee07 3a90 	vmov	s15, r3
 800fb72:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800fb76:	eddf 5a10 	vldr	s11, [pc, #64]	@ 800fbb8 <LL_RCC_CalcPLLClockFreq+0x7c>
 800fb7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb86:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 800fb8a:	6a3b      	ldr	r3, [r7, #32]
 800fb8c:	ee07 3a90 	vmov	s15, r3
 800fb90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fb94:	edd7 6a05 	vldr	s13, [r7, #20]
 800fb98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb9c:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 800fba0:	edd7 7a05 	vldr	s15, [r7, #20]
 800fba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fba8:	ee17 3a90 	vmov	r3, s15
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	371c      	adds	r7, #28
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb6:	4770      	bx	lr
 800fbb8:	46000000 	.word	0x46000000

0800fbbc <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800fbbc:	b590      	push	{r4, r7, lr}
 800fbbe:	b087      	sub	sp, #28
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f7ff fbb1 	bl	800f330 <LL_RCC_GetUSARTClockSource>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	4a62      	ldr	r2, [pc, #392]	@ (800fd5c <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	f000 80a9 	beq.w	800fd2a <LL_RCC_GetUSARTClockFreq+0x16e>
 800fbd8:	4a60      	ldr	r2, [pc, #384]	@ (800fd5c <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	f200 80ae 	bhi.w	800fd3c <LL_RCC_GetUSARTClockFreq+0x180>
 800fbe0:	4a5f      	ldr	r2, [pc, #380]	@ (800fd60 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	f000 80a1 	beq.w	800fd2a <LL_RCC_GetUSARTClockFreq+0x16e>
 800fbe8:	4a5d      	ldr	r2, [pc, #372]	@ (800fd60 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	f200 80a6 	bhi.w	800fd3c <LL_RCC_GetUSARTClockFreq+0x180>
 800fbf0:	4a5c      	ldr	r2, [pc, #368]	@ (800fd64 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	f000 8091 	beq.w	800fd1a <LL_RCC_GetUSARTClockFreq+0x15e>
 800fbf8:	4a5a      	ldr	r2, [pc, #360]	@ (800fd64 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	f200 809e 	bhi.w	800fd3c <LL_RCC_GetUSARTClockFreq+0x180>
 800fc00:	4a59      	ldr	r2, [pc, #356]	@ (800fd68 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	f000 8089 	beq.w	800fd1a <LL_RCC_GetUSARTClockFreq+0x15e>
 800fc08:	4a57      	ldr	r2, [pc, #348]	@ (800fd68 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	f200 8096 	bhi.w	800fd3c <LL_RCC_GetUSARTClockFreq+0x180>
 800fc10:	4a56      	ldr	r2, [pc, #344]	@ (800fd6c <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d073      	beq.n	800fcfe <LL_RCC_GetUSARTClockFreq+0x142>
 800fc16:	4a55      	ldr	r2, [pc, #340]	@ (800fd6c <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	f200 808f 	bhi.w	800fd3c <LL_RCC_GetUSARTClockFreq+0x180>
 800fc1e:	4a54      	ldr	r2, [pc, #336]	@ (800fd70 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d06c      	beq.n	800fcfe <LL_RCC_GetUSARTClockFreq+0x142>
 800fc24:	4a52      	ldr	r2, [pc, #328]	@ (800fd70 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	f200 8088 	bhi.w	800fd3c <LL_RCC_GetUSARTClockFreq+0x180>
 800fc2c:	4a51      	ldr	r2, [pc, #324]	@ (800fd74 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d058      	beq.n	800fce4 <LL_RCC_GetUSARTClockFreq+0x128>
 800fc32:	4a50      	ldr	r2, [pc, #320]	@ (800fd74 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800fc34:	4293      	cmp	r3, r2
 800fc36:	f200 8081 	bhi.w	800fd3c <LL_RCC_GetUSARTClockFreq+0x180>
 800fc3a:	4a4f      	ldr	r2, [pc, #316]	@ (800fd78 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800fc3c:	4293      	cmp	r3, r2
 800fc3e:	d051      	beq.n	800fce4 <LL_RCC_GetUSARTClockFreq+0x128>
 800fc40:	4a4d      	ldr	r2, [pc, #308]	@ (800fd78 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d87a      	bhi.n	800fd3c <LL_RCC_GetUSARTClockFreq+0x180>
 800fc46:	4a4d      	ldr	r2, [pc, #308]	@ (800fd7c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800fc48:	4293      	cmp	r3, r2
 800fc4a:	d03e      	beq.n	800fcca <LL_RCC_GetUSARTClockFreq+0x10e>
 800fc4c:	4a4b      	ldr	r2, [pc, #300]	@ (800fd7c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	d874      	bhi.n	800fd3c <LL_RCC_GetUSARTClockFreq+0x180>
 800fc52:	4a4b      	ldr	r2, [pc, #300]	@ (800fd80 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d038      	beq.n	800fcca <LL_RCC_GetUSARTClockFreq+0x10e>
 800fc58:	4a49      	ldr	r2, [pc, #292]	@ (800fd80 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d86e      	bhi.n	800fd3c <LL_RCC_GetUSARTClockFreq+0x180>
 800fc5e:	4a49      	ldr	r2, [pc, #292]	@ (800fd84 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 800fc60:	4293      	cmp	r3, r2
 800fc62:	d01a      	beq.n	800fc9a <LL_RCC_GetUSARTClockFreq+0xde>
 800fc64:	4a48      	ldr	r2, [pc, #288]	@ (800fd88 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800fc66:	4293      	cmp	r3, r2
 800fc68:	d168      	bne.n	800fd3c <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 800fc6a:	f000 f895 	bl	800fd98 <RCC_GetSystemClockFreq>
 800fc6e:	4604      	mov	r4, r0
 800fc70:	f7ff fb00 	bl	800f274 <LL_RCC_GetSysPrescaler>
 800fc74:	4603      	mov	r3, r0
 800fc76:	0a1b      	lsrs	r3, r3, #8
 800fc78:	f003 030f 	and.w	r3, r3, #15
 800fc7c:	4a43      	ldr	r2, [pc, #268]	@ (800fd8c <LL_RCC_GetUSARTClockFreq+0x1d0>)
 800fc7e:	5cd3      	ldrb	r3, [r2, r3]
 800fc80:	f003 031f 	and.w	r3, r3, #31
 800fc84:	fa24 f303 	lsr.w	r3, r4, r3
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f000 f8e7 	bl	800fe5c <RCC_GetHCLKClockFreq>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	4618      	mov	r0, r3
 800fc92:	f000 f911 	bl	800feb8 <RCC_GetPCLK2ClockFreq>
 800fc96:	6178      	str	r0, [r7, #20]
      break;
 800fc98:	e05b      	b.n	800fd52 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 800fc9a:	f000 f87d 	bl	800fd98 <RCC_GetSystemClockFreq>
 800fc9e:	4604      	mov	r4, r0
 800fca0:	f7ff fae8 	bl	800f274 <LL_RCC_GetSysPrescaler>
 800fca4:	4603      	mov	r3, r0
 800fca6:	0a1b      	lsrs	r3, r3, #8
 800fca8:	f003 030f 	and.w	r3, r3, #15
 800fcac:	4a37      	ldr	r2, [pc, #220]	@ (800fd8c <LL_RCC_GetUSARTClockFreq+0x1d0>)
 800fcae:	5cd3      	ldrb	r3, [r2, r3]
 800fcb0:	f003 031f 	and.w	r3, r3, #31
 800fcb4:	fa24 f303 	lsr.w	r3, r4, r3
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f000 f8cf 	bl	800fe5c <RCC_GetHCLKClockFreq>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f000 f8e1 	bl	800fe88 <RCC_GetPCLK1ClockFreq>
 800fcc6:	6178      	str	r0, [r7, #20]
      break;
 800fcc8:	e043      	b.n	800fd52 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 800fcca:	f7ff fbf3 	bl	800f4b4 <LL_RCC_PLL2_IsReady>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d035      	beq.n	800fd40 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800fcd4:	f107 0308 	add.w	r3, r7, #8
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7ff fdfd 	bl	800f8d8 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	617b      	str	r3, [r7, #20]
      }
      break;
 800fce2:	e02d      	b.n	800fd40 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 800fce4:	f7ff fca2 	bl	800f62c <LL_RCC_PLL3_IsReady>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d02a      	beq.n	800fd44 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800fcee:	f107 0308 	add.w	r3, r7, #8
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7ff fe88 	bl	800fa08 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	617b      	str	r3, [r7, #20]
      }
      break;
 800fcfc:	e022      	b.n	800fd44 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 800fcfe:	f7ff fa65 	bl	800f1cc <LL_RCC_HSI_IsReady>
 800fd02:	4603      	mov	r3, r0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d01f      	beq.n	800fd48 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800fd08:	f7ff fa72 	bl	800f1f0 <LL_RCC_HSI_GetDivider>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	08db      	lsrs	r3, r3, #3
 800fd10:	4a1f      	ldr	r2, [pc, #124]	@ (800fd90 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 800fd12:	fa22 f303 	lsr.w	r3, r2, r3
 800fd16:	617b      	str	r3, [r7, #20]
      }
      break;
 800fd18:	e016      	b.n	800fd48 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 800fd1a:	f7ff fa77 	bl	800f20c <LL_RCC_CSI_IsReady>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d013      	beq.n	800fd4c <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 800fd24:	4b1b      	ldr	r3, [pc, #108]	@ (800fd94 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 800fd26:	617b      	str	r3, [r7, #20]
      }
      break;
 800fd28:	e010      	b.n	800fd4c <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 800fd2a:	f7ff fa83 	bl	800f234 <LL_RCC_LSE_IsReady>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d00d      	beq.n	800fd50 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 800fd34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd38:	617b      	str	r3, [r7, #20]
      }
      break;
 800fd3a:	e009      	b.n	800fd50 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 800fd3c:	bf00      	nop
 800fd3e:	e008      	b.n	800fd52 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800fd40:	bf00      	nop
 800fd42:	e006      	b.n	800fd52 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800fd44:	bf00      	nop
 800fd46:	e004      	b.n	800fd52 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800fd48:	bf00      	nop
 800fd4a:	e002      	b.n	800fd52 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800fd4c:	bf00      	nop
 800fd4e:	e000      	b.n	800fd52 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800fd50:	bf00      	nop
  }

  return usart_frequency;
 800fd52:	697b      	ldr	r3, [r7, #20]
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	371c      	adds	r7, #28
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd90      	pop	{r4, r7, pc}
 800fd5c:	07050308 	.word	0x07050308
 800fd60:	07050008 	.word	0x07050008
 800fd64:	07040308 	.word	0x07040308
 800fd68:	07040008 	.word	0x07040008
 800fd6c:	07030308 	.word	0x07030308
 800fd70:	07030008 	.word	0x07030008
 800fd74:	07020308 	.word	0x07020308
 800fd78:	07020008 	.word	0x07020008
 800fd7c:	07010308 	.word	0x07010308
 800fd80:	07010008 	.word	0x07010008
 800fd84:	07000008 	.word	0x07000008
 800fd88:	07000308 	.word	0x07000308
 800fd8c:	080172d8 	.word	0x080172d8
 800fd90:	03d09000 	.word	0x03d09000
 800fd94:	003d0900 	.word	0x003d0900

0800fd98 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800fda2:	f7ff fa59 	bl	800f258 <LL_RCC_GetSysClkSource>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b18      	cmp	r3, #24
 800fdaa:	d84b      	bhi.n	800fe44 <RCC_GetSystemClockFreq+0xac>
 800fdac:	a201      	add	r2, pc, #4	@ (adr r2, 800fdb4 <RCC_GetSystemClockFreq+0x1c>)
 800fdae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdb2:	bf00      	nop
 800fdb4:	0800fe19 	.word	0x0800fe19
 800fdb8:	0800fe45 	.word	0x0800fe45
 800fdbc:	0800fe45 	.word	0x0800fe45
 800fdc0:	0800fe45 	.word	0x0800fe45
 800fdc4:	0800fe45 	.word	0x0800fe45
 800fdc8:	0800fe45 	.word	0x0800fe45
 800fdcc:	0800fe45 	.word	0x0800fe45
 800fdd0:	0800fe45 	.word	0x0800fe45
 800fdd4:	0800fe2b 	.word	0x0800fe2b
 800fdd8:	0800fe45 	.word	0x0800fe45
 800fddc:	0800fe45 	.word	0x0800fe45
 800fde0:	0800fe45 	.word	0x0800fe45
 800fde4:	0800fe45 	.word	0x0800fe45
 800fde8:	0800fe45 	.word	0x0800fe45
 800fdec:	0800fe45 	.word	0x0800fe45
 800fdf0:	0800fe45 	.word	0x0800fe45
 800fdf4:	0800fe31 	.word	0x0800fe31
 800fdf8:	0800fe45 	.word	0x0800fe45
 800fdfc:	0800fe45 	.word	0x0800fe45
 800fe00:	0800fe45 	.word	0x0800fe45
 800fe04:	0800fe45 	.word	0x0800fe45
 800fe08:	0800fe45 	.word	0x0800fe45
 800fe0c:	0800fe45 	.word	0x0800fe45
 800fe10:	0800fe45 	.word	0x0800fe45
 800fe14:	0800fe37 	.word	0x0800fe37
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800fe18:	f7ff f9ea 	bl	800f1f0 <LL_RCC_HSI_GetDivider>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	08db      	lsrs	r3, r3, #3
 800fe20:	4a0b      	ldr	r2, [pc, #44]	@ (800fe50 <RCC_GetSystemClockFreq+0xb8>)
 800fe22:	fa22 f303 	lsr.w	r3, r2, r3
 800fe26:	60fb      	str	r3, [r7, #12]
      break;
 800fe28:	e00d      	b.n	800fe46 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 800fe2a:	4b0a      	ldr	r3, [pc, #40]	@ (800fe54 <RCC_GetSystemClockFreq+0xbc>)
 800fe2c:	60fb      	str	r3, [r7, #12]
      break;
 800fe2e:	e00a      	b.n	800fe46 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 800fe30:	4b09      	ldr	r3, [pc, #36]	@ (800fe58 <RCC_GetSystemClockFreq+0xc0>)
 800fe32:	60fb      	str	r3, [r7, #12]
      break;
 800fe34:	e007      	b.n	800fe46 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 800fe36:	463b      	mov	r3, r7
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f7ff fcb5 	bl	800f7a8 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	60fb      	str	r3, [r7, #12]
      break;
 800fe42:	e000      	b.n	800fe46 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 800fe44:	bf00      	nop
  }

  return frequency;
 800fe46:	68fb      	ldr	r3, [r7, #12]
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3710      	adds	r7, #16
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}
 800fe50:	03d09000 	.word	0x03d09000
 800fe54:	003d0900 	.word	0x003d0900
 800fe58:	017d7840 	.word	0x017d7840

0800fe5c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800fe64:	f7ff fa14 	bl	800f290 <LL_RCC_GetAHBPrescaler>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	f003 030f 	and.w	r3, r3, #15
 800fe6e:	4a05      	ldr	r2, [pc, #20]	@ (800fe84 <RCC_GetHCLKClockFreq+0x28>)
 800fe70:	5cd3      	ldrb	r3, [r2, r3]
 800fe72:	f003 031f 	and.w	r3, r3, #31
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3708      	adds	r7, #8
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	080172d8 	.word	0x080172d8

0800fe88 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800fe90:	f7ff fa0c 	bl	800f2ac <LL_RCC_GetAPB1Prescaler>
 800fe94:	4603      	mov	r3, r0
 800fe96:	091b      	lsrs	r3, r3, #4
 800fe98:	f003 0307 	and.w	r3, r3, #7
 800fe9c:	4a05      	ldr	r2, [pc, #20]	@ (800feb4 <RCC_GetPCLK1ClockFreq+0x2c>)
 800fe9e:	5cd3      	ldrb	r3, [r2, r3]
 800fea0:	f003 031f 	and.w	r3, r3, #31
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	fa22 f303 	lsr.w	r3, r2, r3
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3708      	adds	r7, #8
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	080172d8 	.word	0x080172d8

0800feb8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800fec0:	f7ff fa02 	bl	800f2c8 <LL_RCC_GetAPB2Prescaler>
 800fec4:	4603      	mov	r3, r0
 800fec6:	0a1b      	lsrs	r3, r3, #8
 800fec8:	f003 0307 	and.w	r3, r3, #7
 800fecc:	4a05      	ldr	r2, [pc, #20]	@ (800fee4 <RCC_GetPCLK2ClockFreq+0x2c>)
 800fece:	5cd3      	ldrb	r3, [r2, r3]
 800fed0:	f003 031f 	and.w	r3, r3, #31
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	fa22 f303 	lsr.w	r3, r2, r3
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3708      	adds	r7, #8
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop
 800fee4:	080172d8 	.word	0x080172d8

0800fee8 <LL_SPI_IsEnabled>:
{
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	f003 0301 	and.w	r3, r3, #1
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d101      	bne.n	800ff00 <LL_SPI_IsEnabled+0x18>
 800fefc:	2301      	movs	r3, #1
 800fefe:	e000      	b.n	800ff02 <LL_SPI_IsEnabled+0x1a>
 800ff00:	2300      	movs	r3, #0
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	370c      	adds	r7, #12
 800ff06:	46bd      	mov	sp, r7
 800ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0c:	4770      	bx	lr

0800ff0e <LL_SPI_SetInternalSSLevel>:
{
 800ff0e:	b480      	push	{r7}
 800ff10:	b083      	sub	sp, #12
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
 800ff16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	431a      	orrs	r2, r3
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	601a      	str	r2, [r3, #0]
}
 800ff28:	bf00      	nop
 800ff2a:	370c      	adds	r7, #12
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr

0800ff34 <LL_SPI_GetNSSPolarity>:
{
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	68db      	ldr	r3, [r3, #12]
 800ff40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	370c      	adds	r7, #12
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4e:	4770      	bx	lr

0800ff50 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	683a      	ldr	r2, [r7, #0]
 800ff5e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ff60:	bf00      	nop
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr

0800ff6c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b086      	sub	sp, #24
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800ff76:	2301      	movs	r3, #1
 800ff78:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f7ff ffb4 	bl	800fee8 <LL_SPI_IsEnabled>
 800ff80:	4603      	mov	r3, r0
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d167      	bne.n	8010056 <LL_SPI_Init+0xea>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	689a      	ldr	r2, [r3, #8]
 800ff8a:	4b35      	ldr	r3, [pc, #212]	@ (8010060 <LL_SPI_Init+0xf4>)
 800ff8c:	4013      	ands	r3, r2
 800ff8e:	683a      	ldr	r2, [r7, #0]
 800ff90:	6991      	ldr	r1, [r2, #24]
 800ff92:	683a      	ldr	r2, [r7, #0]
 800ff94:	6a12      	ldr	r2, [r2, #32]
 800ff96:	4311      	orrs	r1, r2
 800ff98:	683a      	ldr	r2, [r7, #0]
 800ff9a:	6892      	ldr	r2, [r2, #8]
 800ff9c:	430a      	orrs	r2, r1
 800ff9e:	431a      	orrs	r2, r3
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	695b      	ldr	r3, [r3, #20]
 800ffa8:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	685b      	ldr	r3, [r3, #4]
 800ffae:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f7ff ffbf 	bl	800ff34 <LL_SPI_GetNSSPolarity>
 800ffb6:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ffbe:	d112      	bne.n	800ffe6 <LL_SPI_Init+0x7a>
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d103      	bne.n	800ffce <LL_SPI_Init+0x62>
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ffcc:	d006      	beq.n	800ffdc <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ffd4:	d107      	bne.n	800ffe6 <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d104      	bne.n	800ffe6 <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 800ffdc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f7ff ff94 	bl	800ff0e <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	68da      	ldr	r2, [r3, #12]
 800ffea:	4b1e      	ldr	r3, [pc, #120]	@ (8010064 <LL_SPI_Init+0xf8>)
 800ffec:	4013      	ands	r3, r2
 800ffee:	683a      	ldr	r2, [r7, #0]
 800fff0:	6951      	ldr	r1, [r2, #20]
 800fff2:	683a      	ldr	r2, [r7, #0]
 800fff4:	68d2      	ldr	r2, [r2, #12]
 800fff6:	4311      	orrs	r1, r2
 800fff8:	683a      	ldr	r2, [r7, #0]
 800fffa:	6912      	ldr	r2, [r2, #16]
 800fffc:	4311      	orrs	r1, r2
 800fffe:	683a      	ldr	r2, [r7, #0]
 8010000:	69d2      	ldr	r2, [r2, #28]
 8010002:	4311      	orrs	r1, r2
 8010004:	683a      	ldr	r2, [r7, #0]
 8010006:	6852      	ldr	r2, [r2, #4]
 8010008:	4311      	orrs	r1, r2
 801000a:	683a      	ldr	r2, [r7, #0]
 801000c:	6812      	ldr	r2, [r2, #0]
 801000e:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 8010012:	430a      	orrs	r2, r1
 8010014:	431a      	orrs	r2, r3
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801002a:	431a      	orrs	r2, r3
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	6a1b      	ldr	r3, [r3, #32]
 8010034:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010038:	d105      	bne.n	8010046 <LL_SPI_Init+0xda>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801003e:	4619      	mov	r1, r3
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7ff ff85 	bl	800ff50 <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801004a:	f023 0201 	bic.w	r2, r3, #1
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 8010052:	2300      	movs	r3, #0
 8010054:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8010056:	7dfb      	ldrb	r3, [r7, #23]
}
 8010058:	4618      	mov	r0, r3
 801005a:	3718      	adds	r7, #24
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}
 8010060:	8fbfffe0 	.word	0x8fbfffe0
 8010064:	d839ffff 	.word	0xd839ffff

08010068 <LL_TIM_SetPrescaler>:
{
 8010068:	b480      	push	{r7}
 801006a:	b083      	sub	sp, #12
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	683a      	ldr	r2, [r7, #0]
 8010076:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010078:	bf00      	nop
 801007a:	370c      	adds	r7, #12
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr

08010084 <LL_TIM_SetAutoReload>:
{
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	683a      	ldr	r2, [r7, #0]
 8010092:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8010094:	bf00      	nop
 8010096:	370c      	adds	r7, #12
 8010098:	46bd      	mov	sp, r7
 801009a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009e:	4770      	bx	lr

080100a0 <LL_TIM_SetRepetitionCounter>:
{
 80100a0:	b480      	push	{r7}
 80100a2:	b083      	sub	sp, #12
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	683a      	ldr	r2, [r7, #0]
 80100ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80100b0:	bf00      	nop
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr

080100bc <LL_TIM_OC_SetCompareCH1>:
{
 80100bc:	b480      	push	{r7}
 80100be:	b083      	sub	sp, #12
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	683a      	ldr	r2, [r7, #0]
 80100ca:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80100cc:	bf00      	nop
 80100ce:	370c      	adds	r7, #12
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr

080100d8 <LL_TIM_OC_SetCompareCH2>:
{
 80100d8:	b480      	push	{r7}
 80100da:	b083      	sub	sp, #12
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	683a      	ldr	r2, [r7, #0]
 80100e6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80100e8:	bf00      	nop
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <LL_TIM_OC_SetCompareCH3>:
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	683a      	ldr	r2, [r7, #0]
 8010102:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8010104:	bf00      	nop
 8010106:	370c      	adds	r7, #12
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr

08010110 <LL_TIM_OC_SetCompareCH4>:
{
 8010110:	b480      	push	{r7}
 8010112:	b083      	sub	sp, #12
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	683a      	ldr	r2, [r7, #0]
 801011e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8010120:	bf00      	nop
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr

0801012c <LL_TIM_OC_SetCompareCH5>:
{
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	683a      	ldr	r2, [r7, #0]
 801013e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8010140:	bf00      	nop
 8010142:	370c      	adds	r7, #12
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr

0801014c <LL_TIM_OC_SetCompareCH6>:
{
 801014c:	b480      	push	{r7}
 801014e:	b083      	sub	sp, #12
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	683a      	ldr	r2, [r7, #0]
 801015a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 801015c:	bf00      	nop
 801015e:	370c      	adds	r7, #12
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr

08010168 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8010168:	b480      	push	{r7}
 801016a:	b083      	sub	sp, #12
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	695b      	ldr	r3, [r3, #20]
 8010174:	f043 0201 	orr.w	r2, r3, #1
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	615a      	str	r2, [r3, #20]
}
 801017c:	bf00      	nop
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	4a41      	ldr	r2, [pc, #260]	@ (80102a0 <LL_TIM_Init+0x118>)
 801019c:	4293      	cmp	r3, r2
 801019e:	d013      	beq.n	80101c8 <LL_TIM_Init+0x40>
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80101a6:	d00f      	beq.n	80101c8 <LL_TIM_Init+0x40>
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	4a3e      	ldr	r2, [pc, #248]	@ (80102a4 <LL_TIM_Init+0x11c>)
 80101ac:	4293      	cmp	r3, r2
 80101ae:	d00b      	beq.n	80101c8 <LL_TIM_Init+0x40>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	4a3d      	ldr	r2, [pc, #244]	@ (80102a8 <LL_TIM_Init+0x120>)
 80101b4:	4293      	cmp	r3, r2
 80101b6:	d007      	beq.n	80101c8 <LL_TIM_Init+0x40>
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	4a3c      	ldr	r2, [pc, #240]	@ (80102ac <LL_TIM_Init+0x124>)
 80101bc:	4293      	cmp	r3, r2
 80101be:	d003      	beq.n	80101c8 <LL_TIM_Init+0x40>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	4a3b      	ldr	r2, [pc, #236]	@ (80102b0 <LL_TIM_Init+0x128>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d106      	bne.n	80101d6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	4313      	orrs	r3, r2
 80101d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	4a31      	ldr	r2, [pc, #196]	@ (80102a0 <LL_TIM_Init+0x118>)
 80101da:	4293      	cmp	r3, r2
 80101dc:	d027      	beq.n	801022e <LL_TIM_Init+0xa6>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80101e4:	d023      	beq.n	801022e <LL_TIM_Init+0xa6>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	4a2e      	ldr	r2, [pc, #184]	@ (80102a4 <LL_TIM_Init+0x11c>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d01f      	beq.n	801022e <LL_TIM_Init+0xa6>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4a2d      	ldr	r2, [pc, #180]	@ (80102a8 <LL_TIM_Init+0x120>)
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d01b      	beq.n	801022e <LL_TIM_Init+0xa6>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	4a2c      	ldr	r2, [pc, #176]	@ (80102ac <LL_TIM_Init+0x124>)
 80101fa:	4293      	cmp	r3, r2
 80101fc:	d017      	beq.n	801022e <LL_TIM_Init+0xa6>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4a2b      	ldr	r2, [pc, #172]	@ (80102b0 <LL_TIM_Init+0x128>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d013      	beq.n	801022e <LL_TIM_Init+0xa6>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	4a2a      	ldr	r2, [pc, #168]	@ (80102b4 <LL_TIM_Init+0x12c>)
 801020a:	4293      	cmp	r3, r2
 801020c:	d00f      	beq.n	801022e <LL_TIM_Init+0xa6>
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	4a29      	ldr	r2, [pc, #164]	@ (80102b8 <LL_TIM_Init+0x130>)
 8010212:	4293      	cmp	r3, r2
 8010214:	d00b      	beq.n	801022e <LL_TIM_Init+0xa6>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	4a28      	ldr	r2, [pc, #160]	@ (80102bc <LL_TIM_Init+0x134>)
 801021a:	4293      	cmp	r3, r2
 801021c:	d007      	beq.n	801022e <LL_TIM_Init+0xa6>
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	4a27      	ldr	r2, [pc, #156]	@ (80102c0 <LL_TIM_Init+0x138>)
 8010222:	4293      	cmp	r3, r2
 8010224:	d003      	beq.n	801022e <LL_TIM_Init+0xa6>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	4a26      	ldr	r2, [pc, #152]	@ (80102c4 <LL_TIM_Init+0x13c>)
 801022a:	4293      	cmp	r3, r2
 801022c:	d106      	bne.n	801023c <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	4313      	orrs	r3, r2
 801023a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	68fa      	ldr	r2, [r7, #12]
 8010240:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	689b      	ldr	r3, [r3, #8]
 8010246:	4619      	mov	r1, r3
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f7ff ff1b 	bl	8010084 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	881b      	ldrh	r3, [r3, #0]
 8010252:	4619      	mov	r1, r3
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f7ff ff07 	bl	8010068 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	4a10      	ldr	r2, [pc, #64]	@ (80102a0 <LL_TIM_Init+0x118>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d00f      	beq.n	8010282 <LL_TIM_Init+0xfa>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	4a12      	ldr	r2, [pc, #72]	@ (80102b0 <LL_TIM_Init+0x128>)
 8010266:	4293      	cmp	r3, r2
 8010268:	d00b      	beq.n	8010282 <LL_TIM_Init+0xfa>
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	4a11      	ldr	r2, [pc, #68]	@ (80102b4 <LL_TIM_Init+0x12c>)
 801026e:	4293      	cmp	r3, r2
 8010270:	d007      	beq.n	8010282 <LL_TIM_Init+0xfa>
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	4a10      	ldr	r2, [pc, #64]	@ (80102b8 <LL_TIM_Init+0x130>)
 8010276:	4293      	cmp	r3, r2
 8010278:	d003      	beq.n	8010282 <LL_TIM_Init+0xfa>
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	4a0f      	ldr	r2, [pc, #60]	@ (80102bc <LL_TIM_Init+0x134>)
 801027e:	4293      	cmp	r3, r2
 8010280:	d105      	bne.n	801028e <LL_TIM_Init+0x106>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	691b      	ldr	r3, [r3, #16]
 8010286:	4619      	mov	r1, r3
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f7ff ff09 	bl	80100a0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f7ff ff6a 	bl	8010168 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8010294:	2300      	movs	r3, #0
}
 8010296:	4618      	mov	r0, r3
 8010298:	3710      	adds	r7, #16
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	40010000 	.word	0x40010000
 80102a4:	40000400 	.word	0x40000400
 80102a8:	40000800 	.word	0x40000800
 80102ac:	40000c00 	.word	0x40000c00
 80102b0:	40010400 	.word	0x40010400
 80102b4:	40014000 	.word	0x40014000
 80102b8:	40014400 	.word	0x40014400
 80102bc:	40014800 	.word	0x40014800
 80102c0:	4000e000 	.word	0x4000e000
 80102c4:	4000e400 	.word	0x4000e400

080102c8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b086      	sub	sp, #24
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	60f8      	str	r0, [r7, #12]
 80102d0:	60b9      	str	r1, [r7, #8]
 80102d2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80102d4:	2301      	movs	r3, #1
 80102d6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80102de:	d045      	beq.n	801036c <LL_TIM_OC_Init+0xa4>
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80102e6:	d848      	bhi.n	801037a <LL_TIM_OC_Init+0xb2>
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80102ee:	d036      	beq.n	801035e <LL_TIM_OC_Init+0x96>
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80102f6:	d840      	bhi.n	801037a <LL_TIM_OC_Init+0xb2>
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80102fe:	d027      	beq.n	8010350 <LL_TIM_OC_Init+0x88>
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010306:	d838      	bhi.n	801037a <LL_TIM_OC_Init+0xb2>
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801030e:	d018      	beq.n	8010342 <LL_TIM_OC_Init+0x7a>
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010316:	d830      	bhi.n	801037a <LL_TIM_OC_Init+0xb2>
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	2b01      	cmp	r3, #1
 801031c:	d003      	beq.n	8010326 <LL_TIM_OC_Init+0x5e>
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	2b10      	cmp	r3, #16
 8010322:	d007      	beq.n	8010334 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8010324:	e029      	b.n	801037a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8010326:	6879      	ldr	r1, [r7, #4]
 8010328:	68f8      	ldr	r0, [r7, #12]
 801032a:	f000 f82d 	bl	8010388 <OC1Config>
 801032e:	4603      	mov	r3, r0
 8010330:	75fb      	strb	r3, [r7, #23]
      break;
 8010332:	e023      	b.n	801037c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8010334:	6879      	ldr	r1, [r7, #4]
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	f000 f8a6 	bl	8010488 <OC2Config>
 801033c:	4603      	mov	r3, r0
 801033e:	75fb      	strb	r3, [r7, #23]
      break;
 8010340:	e01c      	b.n	801037c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8010342:	6879      	ldr	r1, [r7, #4]
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	f000 f923 	bl	8010590 <OC3Config>
 801034a:	4603      	mov	r3, r0
 801034c:	75fb      	strb	r3, [r7, #23]
      break;
 801034e:	e015      	b.n	801037c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8010350:	6879      	ldr	r1, [r7, #4]
 8010352:	68f8      	ldr	r0, [r7, #12]
 8010354:	f000 f9a0 	bl	8010698 <OC4Config>
 8010358:	4603      	mov	r3, r0
 801035a:	75fb      	strb	r3, [r7, #23]
      break;
 801035c:	e00e      	b.n	801037c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 801035e:	6879      	ldr	r1, [r7, #4]
 8010360:	68f8      	ldr	r0, [r7, #12]
 8010362:	f000 fa05 	bl	8010770 <OC5Config>
 8010366:	4603      	mov	r3, r0
 8010368:	75fb      	strb	r3, [r7, #23]
      break;
 801036a:	e007      	b.n	801037c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 801036c:	6879      	ldr	r1, [r7, #4]
 801036e:	68f8      	ldr	r0, [r7, #12]
 8010370:	f000 fa62 	bl	8010838 <OC6Config>
 8010374:	4603      	mov	r3, r0
 8010376:	75fb      	strb	r3, [r7, #23]
      break;
 8010378:	e000      	b.n	801037c <LL_TIM_OC_Init+0xb4>
      break;
 801037a:	bf00      	nop
  }

  return result;
 801037c:	7dfb      	ldrb	r3, [r7, #23]
}
 801037e:	4618      	mov	r0, r3
 8010380:	3718      	adds	r7, #24
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
	...

08010388 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b086      	sub	sp, #24
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6a1b      	ldr	r3, [r3, #32]
 8010396:	f023 0201 	bic.w	r2, r3, #1
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6a1b      	ldr	r3, [r3, #32]
 80103a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	699b      	ldr	r3, [r3, #24]
 80103ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	f023 0303 	bic.w	r3, r3, #3
 80103b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80103b8:	68fa      	ldr	r2, [r7, #12]
 80103ba:	4b2d      	ldr	r3, [pc, #180]	@ (8010470 <OC1Config+0xe8>)
 80103bc:	4013      	ands	r3, r2
 80103be:	683a      	ldr	r2, [r7, #0]
 80103c0:	6812      	ldr	r2, [r2, #0]
 80103c2:	4313      	orrs	r3, r2
 80103c4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	f023 0202 	bic.w	r2, r3, #2
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	691b      	ldr	r3, [r3, #16]
 80103d0:	4313      	orrs	r3, r2
 80103d2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	f023 0201 	bic.w	r2, r3, #1
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	4313      	orrs	r3, r2
 80103e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4a23      	ldr	r2, [pc, #140]	@ (8010474 <OC1Config+0xec>)
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d00f      	beq.n	801040a <OC1Config+0x82>
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	4a22      	ldr	r2, [pc, #136]	@ (8010478 <OC1Config+0xf0>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d00b      	beq.n	801040a <OC1Config+0x82>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	4a21      	ldr	r2, [pc, #132]	@ (801047c <OC1Config+0xf4>)
 80103f6:	4293      	cmp	r3, r2
 80103f8:	d007      	beq.n	801040a <OC1Config+0x82>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	4a20      	ldr	r2, [pc, #128]	@ (8010480 <OC1Config+0xf8>)
 80103fe:	4293      	cmp	r3, r2
 8010400:	d003      	beq.n	801040a <OC1Config+0x82>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	4a1f      	ldr	r2, [pc, #124]	@ (8010484 <OC1Config+0xfc>)
 8010406:	4293      	cmp	r3, r2
 8010408:	d11e      	bne.n	8010448 <OC1Config+0xc0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	f023 0208 	bic.w	r2, r3, #8
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	695b      	ldr	r3, [r3, #20]
 8010414:	009b      	lsls	r3, r3, #2
 8010416:	4313      	orrs	r3, r2
 8010418:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	f023 0204 	bic.w	r2, r3, #4
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	689b      	ldr	r3, [r3, #8]
 8010424:	009b      	lsls	r3, r3, #2
 8010426:	4313      	orrs	r3, r2
 8010428:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	699b      	ldr	r3, [r3, #24]
 8010434:	4313      	orrs	r3, r2
 8010436:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	69db      	ldr	r3, [r3, #28]
 8010442:	005b      	lsls	r3, r3, #1
 8010444:	4313      	orrs	r3, r2
 8010446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	693a      	ldr	r2, [r7, #16]
 801044c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	68fa      	ldr	r2, [r7, #12]
 8010452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	68db      	ldr	r3, [r3, #12]
 8010458:	4619      	mov	r1, r3
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f7ff fe2e 	bl	80100bc <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	697a      	ldr	r2, [r7, #20]
 8010464:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010466:	2300      	movs	r3, #0
}
 8010468:	4618      	mov	r0, r3
 801046a:	3718      	adds	r7, #24
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}
 8010470:	fffeff8f 	.word	0xfffeff8f
 8010474:	40010000 	.word	0x40010000
 8010478:	40010400 	.word	0x40010400
 801047c:	40014000 	.word	0x40014000
 8010480:	40014400 	.word	0x40014400
 8010484:	40014800 	.word	0x40014800

08010488 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b086      	sub	sp, #24
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6a1b      	ldr	r3, [r3, #32]
 8010496:	f023 0210 	bic.w	r2, r3, #16
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6a1b      	ldr	r3, [r3, #32]
 80104a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	685b      	ldr	r3, [r3, #4]
 80104a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	699b      	ldr	r3, [r3, #24]
 80104ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80104b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80104b8:	68fa      	ldr	r2, [r7, #12]
 80104ba:	4b2f      	ldr	r3, [pc, #188]	@ (8010578 <OC2Config+0xf0>)
 80104bc:	4013      	ands	r3, r2
 80104be:	683a      	ldr	r2, [r7, #0]
 80104c0:	6812      	ldr	r2, [r2, #0]
 80104c2:	0212      	lsls	r2, r2, #8
 80104c4:	4313      	orrs	r3, r2
 80104c6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	f023 0220 	bic.w	r2, r3, #32
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	691b      	ldr	r3, [r3, #16]
 80104d2:	011b      	lsls	r3, r3, #4
 80104d4:	4313      	orrs	r3, r2
 80104d6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	f023 0210 	bic.w	r2, r3, #16
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	011b      	lsls	r3, r3, #4
 80104e4:	4313      	orrs	r3, r2
 80104e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4a24      	ldr	r2, [pc, #144]	@ (801057c <OC2Config+0xf4>)
 80104ec:	4293      	cmp	r3, r2
 80104ee:	d00f      	beq.n	8010510 <OC2Config+0x88>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	4a23      	ldr	r2, [pc, #140]	@ (8010580 <OC2Config+0xf8>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d00b      	beq.n	8010510 <OC2Config+0x88>
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	4a22      	ldr	r2, [pc, #136]	@ (8010584 <OC2Config+0xfc>)
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d007      	beq.n	8010510 <OC2Config+0x88>
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	4a21      	ldr	r2, [pc, #132]	@ (8010588 <OC2Config+0x100>)
 8010504:	4293      	cmp	r3, r2
 8010506:	d003      	beq.n	8010510 <OC2Config+0x88>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	4a20      	ldr	r2, [pc, #128]	@ (801058c <OC2Config+0x104>)
 801050c:	4293      	cmp	r3, r2
 801050e:	d11f      	bne.n	8010550 <OC2Config+0xc8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8010510:	697b      	ldr	r3, [r7, #20]
 8010512:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	695b      	ldr	r3, [r3, #20]
 801051a:	019b      	lsls	r3, r3, #6
 801051c:	4313      	orrs	r3, r2
 801051e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	689b      	ldr	r3, [r3, #8]
 801052a:	019b      	lsls	r3, r3, #6
 801052c:	4313      	orrs	r3, r2
 801052e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	699b      	ldr	r3, [r3, #24]
 801053a:	009b      	lsls	r3, r3, #2
 801053c:	4313      	orrs	r3, r2
 801053e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	69db      	ldr	r3, [r3, #28]
 801054a:	00db      	lsls	r3, r3, #3
 801054c:	4313      	orrs	r3, r2
 801054e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	693a      	ldr	r2, [r7, #16]
 8010554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	68fa      	ldr	r2, [r7, #12]
 801055a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	4619      	mov	r1, r3
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f7ff fdb8 	bl	80100d8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	697a      	ldr	r2, [r7, #20]
 801056c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 801056e:	2300      	movs	r3, #0
}
 8010570:	4618      	mov	r0, r3
 8010572:	3718      	adds	r7, #24
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	feff8fff 	.word	0xfeff8fff
 801057c:	40010000 	.word	0x40010000
 8010580:	40010400 	.word	0x40010400
 8010584:	40014000 	.word	0x40014000
 8010588:	40014400 	.word	0x40014400
 801058c:	40014800 	.word	0x40014800

08010590 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b086      	sub	sp, #24
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6a1b      	ldr	r3, [r3, #32]
 801059e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6a1b      	ldr	r3, [r3, #32]
 80105aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	69db      	ldr	r3, [r3, #28]
 80105b6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	f023 0303 	bic.w	r3, r3, #3
 80105be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80105c0:	68fa      	ldr	r2, [r7, #12]
 80105c2:	4b2f      	ldr	r3, [pc, #188]	@ (8010680 <OC3Config+0xf0>)
 80105c4:	4013      	ands	r3, r2
 80105c6:	683a      	ldr	r2, [r7, #0]
 80105c8:	6812      	ldr	r2, [r2, #0]
 80105ca:	4313      	orrs	r3, r2
 80105cc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	691b      	ldr	r3, [r3, #16]
 80105d8:	021b      	lsls	r3, r3, #8
 80105da:	4313      	orrs	r3, r2
 80105dc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	021b      	lsls	r3, r3, #8
 80105ea:	4313      	orrs	r3, r2
 80105ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	4a24      	ldr	r2, [pc, #144]	@ (8010684 <OC3Config+0xf4>)
 80105f2:	4293      	cmp	r3, r2
 80105f4:	d00f      	beq.n	8010616 <OC3Config+0x86>
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	4a23      	ldr	r2, [pc, #140]	@ (8010688 <OC3Config+0xf8>)
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d00b      	beq.n	8010616 <OC3Config+0x86>
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	4a22      	ldr	r2, [pc, #136]	@ (801068c <OC3Config+0xfc>)
 8010602:	4293      	cmp	r3, r2
 8010604:	d007      	beq.n	8010616 <OC3Config+0x86>
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	4a21      	ldr	r2, [pc, #132]	@ (8010690 <OC3Config+0x100>)
 801060a:	4293      	cmp	r3, r2
 801060c:	d003      	beq.n	8010616 <OC3Config+0x86>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	4a20      	ldr	r2, [pc, #128]	@ (8010694 <OC3Config+0x104>)
 8010612:	4293      	cmp	r3, r2
 8010614:	d11f      	bne.n	8010656 <OC3Config+0xc6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8010616:	697b      	ldr	r3, [r7, #20]
 8010618:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	695b      	ldr	r3, [r3, #20]
 8010620:	029b      	lsls	r3, r3, #10
 8010622:	4313      	orrs	r3, r2
 8010624:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	689b      	ldr	r3, [r3, #8]
 8010630:	029b      	lsls	r3, r3, #10
 8010632:	4313      	orrs	r3, r2
 8010634:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	699b      	ldr	r3, [r3, #24]
 8010640:	011b      	lsls	r3, r3, #4
 8010642:	4313      	orrs	r3, r2
 8010644:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8010646:	693b      	ldr	r3, [r7, #16]
 8010648:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	69db      	ldr	r3, [r3, #28]
 8010650:	015b      	lsls	r3, r3, #5
 8010652:	4313      	orrs	r3, r2
 8010654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	693a      	ldr	r2, [r7, #16]
 801065a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	68fa      	ldr	r2, [r7, #12]
 8010660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	4619      	mov	r1, r3
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f7ff fd43 	bl	80100f4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	697a      	ldr	r2, [r7, #20]
 8010672:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010674:	2300      	movs	r3, #0
}
 8010676:	4618      	mov	r0, r3
 8010678:	3718      	adds	r7, #24
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	fffeff8f 	.word	0xfffeff8f
 8010684:	40010000 	.word	0x40010000
 8010688:	40010400 	.word	0x40010400
 801068c:	40014000 	.word	0x40014000
 8010690:	40014400 	.word	0x40014400
 8010694:	40014800 	.word	0x40014800

08010698 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b086      	sub	sp, #24
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6a1b      	ldr	r3, [r3, #32]
 80106a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6a1b      	ldr	r3, [r3, #32]
 80106b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	69db      	ldr	r3, [r3, #28]
 80106be:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80106c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80106c8:	68fa      	ldr	r2, [r7, #12]
 80106ca:	4b23      	ldr	r3, [pc, #140]	@ (8010758 <OC4Config+0xc0>)
 80106cc:	4013      	ands	r3, r2
 80106ce:	683a      	ldr	r2, [r7, #0]
 80106d0:	6812      	ldr	r2, [r2, #0]
 80106d2:	0212      	lsls	r2, r2, #8
 80106d4:	4313      	orrs	r3, r2
 80106d6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	691b      	ldr	r3, [r3, #16]
 80106e2:	031b      	lsls	r3, r3, #12
 80106e4:	4313      	orrs	r3, r2
 80106e6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	031b      	lsls	r3, r3, #12
 80106f4:	4313      	orrs	r3, r2
 80106f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	4a18      	ldr	r2, [pc, #96]	@ (801075c <OC4Config+0xc4>)
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d00f      	beq.n	8010720 <OC4Config+0x88>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	4a17      	ldr	r2, [pc, #92]	@ (8010760 <OC4Config+0xc8>)
 8010704:	4293      	cmp	r3, r2
 8010706:	d00b      	beq.n	8010720 <OC4Config+0x88>
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	4a16      	ldr	r2, [pc, #88]	@ (8010764 <OC4Config+0xcc>)
 801070c:	4293      	cmp	r3, r2
 801070e:	d007      	beq.n	8010720 <OC4Config+0x88>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	4a15      	ldr	r2, [pc, #84]	@ (8010768 <OC4Config+0xd0>)
 8010714:	4293      	cmp	r3, r2
 8010716:	d003      	beq.n	8010720 <OC4Config+0x88>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	4a14      	ldr	r2, [pc, #80]	@ (801076c <OC4Config+0xd4>)
 801071c:	4293      	cmp	r3, r2
 801071e:	d107      	bne.n	8010730 <OC4Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	699b      	ldr	r3, [r3, #24]
 801072a:	019b      	lsls	r3, r3, #6
 801072c:	4313      	orrs	r3, r2
 801072e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	697a      	ldr	r2, [r7, #20]
 8010734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	68fa      	ldr	r2, [r7, #12]
 801073a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	68db      	ldr	r3, [r3, #12]
 8010740:	4619      	mov	r1, r3
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f7ff fce4 	bl	8010110 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	693a      	ldr	r2, [r7, #16]
 801074c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 801074e:	2300      	movs	r3, #0
}
 8010750:	4618      	mov	r0, r3
 8010752:	3718      	adds	r7, #24
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	feff8fff 	.word	0xfeff8fff
 801075c:	40010000 	.word	0x40010000
 8010760:	40010400 	.word	0x40010400
 8010764:	40014000 	.word	0x40014000
 8010768:	40014400 	.word	0x40014400
 801076c:	40014800 	.word	0x40014800

08010770 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6a1b      	ldr	r3, [r3, #32]
 801077e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6a1b      	ldr	r3, [r3, #32]
 801078a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010790:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8010792:	68ba      	ldr	r2, [r7, #8]
 8010794:	4b22      	ldr	r3, [pc, #136]	@ (8010820 <OC5Config+0xb0>)
 8010796:	4013      	ands	r3, r2
 8010798:	683a      	ldr	r2, [r7, #0]
 801079a:	6812      	ldr	r2, [r2, #0]
 801079c:	4313      	orrs	r3, r2
 801079e:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	691b      	ldr	r3, [r3, #16]
 80107aa:	041b      	lsls	r3, r3, #16
 80107ac:	4313      	orrs	r3, r2
 80107ae:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	041b      	lsls	r3, r3, #16
 80107bc:	4313      	orrs	r3, r2
 80107be:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	4a18      	ldr	r2, [pc, #96]	@ (8010824 <OC5Config+0xb4>)
 80107c4:	4293      	cmp	r3, r2
 80107c6:	d00f      	beq.n	80107e8 <OC5Config+0x78>
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	4a17      	ldr	r2, [pc, #92]	@ (8010828 <OC5Config+0xb8>)
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d00b      	beq.n	80107e8 <OC5Config+0x78>
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	4a16      	ldr	r2, [pc, #88]	@ (801082c <OC5Config+0xbc>)
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d007      	beq.n	80107e8 <OC5Config+0x78>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4a15      	ldr	r2, [pc, #84]	@ (8010830 <OC5Config+0xc0>)
 80107dc:	4293      	cmp	r3, r2
 80107de:	d003      	beq.n	80107e8 <OC5Config+0x78>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	4a14      	ldr	r2, [pc, #80]	@ (8010834 <OC5Config+0xc4>)
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d109      	bne.n	80107fc <OC5Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	699b      	ldr	r3, [r3, #24]
 80107f4:	021b      	lsls	r3, r3, #8
 80107f6:	431a      	orrs	r2, r3
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	68ba      	ldr	r2, [r7, #8]
 8010800:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	68db      	ldr	r3, [r3, #12]
 8010806:	4619      	mov	r1, r3
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f7ff fc8f 	bl	801012c <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	68fa      	ldr	r2, [r7, #12]
 8010812:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8010814:	2300      	movs	r3, #0
}
 8010816:	4618      	mov	r0, r3
 8010818:	3710      	adds	r7, #16
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}
 801081e:	bf00      	nop
 8010820:	fffeff8f 	.word	0xfffeff8f
 8010824:	40010000 	.word	0x40010000
 8010828:	40010400 	.word	0x40010400
 801082c:	40014000 	.word	0x40014000
 8010830:	40014400 	.word	0x40014400
 8010834:	40014800 	.word	0x40014800

08010838 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b084      	sub	sp, #16
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6a1b      	ldr	r3, [r3, #32]
 8010846:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6a1b      	ldr	r3, [r3, #32]
 8010852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010858:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 801085a:	68ba      	ldr	r2, [r7, #8]
 801085c:	4b22      	ldr	r3, [pc, #136]	@ (80108e8 <OC6Config+0xb0>)
 801085e:	4013      	ands	r3, r2
 8010860:	683a      	ldr	r2, [r7, #0]
 8010862:	6812      	ldr	r2, [r2, #0]
 8010864:	0212      	lsls	r2, r2, #8
 8010866:	4313      	orrs	r3, r2
 8010868:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	691b      	ldr	r3, [r3, #16]
 8010874:	051b      	lsls	r3, r3, #20
 8010876:	4313      	orrs	r3, r2
 8010878:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	051b      	lsls	r3, r3, #20
 8010886:	4313      	orrs	r3, r2
 8010888:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	4a17      	ldr	r2, [pc, #92]	@ (80108ec <OC6Config+0xb4>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d00f      	beq.n	80108b2 <OC6Config+0x7a>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	4a16      	ldr	r2, [pc, #88]	@ (80108f0 <OC6Config+0xb8>)
 8010896:	4293      	cmp	r3, r2
 8010898:	d00b      	beq.n	80108b2 <OC6Config+0x7a>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	4a15      	ldr	r2, [pc, #84]	@ (80108f4 <OC6Config+0xbc>)
 801089e:	4293      	cmp	r3, r2
 80108a0:	d007      	beq.n	80108b2 <OC6Config+0x7a>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	4a14      	ldr	r2, [pc, #80]	@ (80108f8 <OC6Config+0xc0>)
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d003      	beq.n	80108b2 <OC6Config+0x7a>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	4a13      	ldr	r2, [pc, #76]	@ (80108fc <OC6Config+0xc4>)
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d109      	bne.n	80108c6 <OC6Config+0x8e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	699b      	ldr	r3, [r3, #24]
 80108be:	029b      	lsls	r3, r3, #10
 80108c0:	431a      	orrs	r2, r3
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	68ba      	ldr	r2, [r7, #8]
 80108ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	68db      	ldr	r3, [r3, #12]
 80108d0:	4619      	mov	r1, r3
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7ff fc3a 	bl	801014c <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	68fa      	ldr	r2, [r7, #12]
 80108dc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80108de:	2300      	movs	r3, #0
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3710      	adds	r7, #16
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	feff8fff 	.word	0xfeff8fff
 80108ec:	40010000 	.word	0x40010000
 80108f0:	40010400 	.word	0x40010400
 80108f4:	40014000 	.word	0x40014000
 80108f8:	40014400 	.word	0x40014400
 80108fc:	40014800 	.word	0x40014800

08010900 <LL_USART_IsEnabled>:
{
 8010900:	b480      	push	{r7}
 8010902:	b083      	sub	sp, #12
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	f003 0301 	and.w	r3, r3, #1
 8010910:	2b01      	cmp	r3, #1
 8010912:	d101      	bne.n	8010918 <LL_USART_IsEnabled+0x18>
 8010914:	2301      	movs	r3, #1
 8010916:	e000      	b.n	801091a <LL_USART_IsEnabled+0x1a>
 8010918:	2300      	movs	r3, #0
}
 801091a:	4618      	mov	r0, r3
 801091c:	370c      	adds	r7, #12
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr

08010926 <LL_USART_SetPrescaler>:
{
 8010926:	b480      	push	{r7}
 8010928:	b083      	sub	sp, #12
 801092a:	af00      	add	r7, sp, #0
 801092c:	6078      	str	r0, [r7, #4]
 801092e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010934:	f023 030f 	bic.w	r3, r3, #15
 8010938:	683a      	ldr	r2, [r7, #0]
 801093a:	b292      	uxth	r2, r2
 801093c:	431a      	orrs	r2, r3
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8010942:	bf00      	nop
 8010944:	370c      	adds	r7, #12
 8010946:	46bd      	mov	sp, r7
 8010948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094c:	4770      	bx	lr

0801094e <LL_USART_SetStopBitsLength>:
{
 801094e:	b480      	push	{r7}
 8010950:	b083      	sub	sp, #12
 8010952:	af00      	add	r7, sp, #0
 8010954:	6078      	str	r0, [r7, #4]
 8010956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	685b      	ldr	r3, [r3, #4]
 801095c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	431a      	orrs	r2, r3
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	605a      	str	r2, [r3, #4]
}
 8010968:	bf00      	nop
 801096a:	370c      	adds	r7, #12
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr

08010974 <LL_USART_SetHWFlowCtrl>:
{
 8010974:	b480      	push	{r7}
 8010976:	b083      	sub	sp, #12
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	689b      	ldr	r3, [r3, #8]
 8010982:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	431a      	orrs	r2, r3
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	609a      	str	r2, [r3, #8]
}
 801098e:	bf00      	nop
 8010990:	370c      	adds	r7, #12
 8010992:	46bd      	mov	sp, r7
 8010994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010998:	4770      	bx	lr
	...

0801099c <LL_USART_SetBaudRate>:
{
 801099c:	b480      	push	{r7}
 801099e:	b087      	sub	sp, #28
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	60f8      	str	r0, [r7, #12]
 80109a4:	60b9      	str	r1, [r7, #8]
 80109a6:	607a      	str	r2, [r7, #4]
 80109a8:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2b0b      	cmp	r3, #11
 80109ae:	d83c      	bhi.n	8010a2a <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 80109b0:	6a3b      	ldr	r3, [r7, #32]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d039      	beq.n	8010a2a <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80109bc:	d122      	bne.n	8010a04 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	b2db      	uxtb	r3, r3
 80109c2:	461a      	mov	r2, r3
 80109c4:	4b1c      	ldr	r3, [pc, #112]	@ (8010a38 <LL_USART_SetBaudRate+0x9c>)
 80109c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109ca:	68ba      	ldr	r2, [r7, #8]
 80109cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80109d0:	005a      	lsls	r2, r3, #1
 80109d2:	6a3b      	ldr	r3, [r7, #32]
 80109d4:	085b      	lsrs	r3, r3, #1
 80109d6:	441a      	add	r2, r3
 80109d8:	6a3b      	ldr	r3, [r7, #32]
 80109da:	fbb2 f3f3 	udiv	r3, r2, r3
 80109de:	b29b      	uxth	r3, r3
 80109e0:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80109e2:	697a      	ldr	r2, [r7, #20]
 80109e4:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80109e8:	4013      	ands	r3, r2
 80109ea:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	085b      	lsrs	r3, r3, #1
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	f003 0307 	and.w	r3, r3, #7
 80109f6:	693a      	ldr	r2, [r7, #16]
 80109f8:	4313      	orrs	r3, r2
 80109fa:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	693a      	ldr	r2, [r7, #16]
 8010a00:	60da      	str	r2, [r3, #12]
}
 8010a02:	e012      	b.n	8010a2a <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	b2db      	uxtb	r3, r3
 8010a08:	461a      	mov	r2, r3
 8010a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8010a38 <LL_USART_SetBaudRate+0x9c>)
 8010a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a10:	68ba      	ldr	r2, [r7, #8]
 8010a12:	fbb2 f2f3 	udiv	r2, r2, r3
 8010a16:	6a3b      	ldr	r3, [r7, #32]
 8010a18:	085b      	lsrs	r3, r3, #1
 8010a1a:	441a      	add	r2, r3
 8010a1c:	6a3b      	ldr	r3, [r7, #32]
 8010a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	461a      	mov	r2, r3
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	60da      	str	r2, [r3, #12]
}
 8010a2a:	bf00      	nop
 8010a2c:	371c      	adds	r7, #28
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a34:	4770      	bx	lr
 8010a36:	bf00      	nop
 8010a38:	080172e8 	.word	0x080172e8

08010a3c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b086      	sub	sp, #24
 8010a40:	af02      	add	r7, sp, #8
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8010a46:	2301      	movs	r3, #1
 8010a48:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f7ff ff56 	bl	8010900 <LL_USART_IsEnabled>
 8010a54:	4603      	mov	r3, r0
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	f040 8092 	bne.w	8010b80 <LL_USART_Init+0x144>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681a      	ldr	r2, [r3, #0]
 8010a60:	4b4a      	ldr	r3, [pc, #296]	@ (8010b8c <LL_USART_Init+0x150>)
 8010a62:	4013      	ands	r3, r2
 8010a64:	683a      	ldr	r2, [r7, #0]
 8010a66:	6891      	ldr	r1, [r2, #8]
 8010a68:	683a      	ldr	r2, [r7, #0]
 8010a6a:	6912      	ldr	r2, [r2, #16]
 8010a6c:	4311      	orrs	r1, r2
 8010a6e:	683a      	ldr	r2, [r7, #0]
 8010a70:	6952      	ldr	r2, [r2, #20]
 8010a72:	4311      	orrs	r1, r2
 8010a74:	683a      	ldr	r2, [r7, #0]
 8010a76:	69d2      	ldr	r2, [r2, #28]
 8010a78:	430a      	orrs	r2, r1
 8010a7a:	431a      	orrs	r2, r3
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	4619      	mov	r1, r3
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f7ff ff61 	bl	801094e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	699b      	ldr	r3, [r3, #24]
 8010a90:	4619      	mov	r1, r3
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f7ff ff6e 	bl	8010974 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	4a3d      	ldr	r2, [pc, #244]	@ (8010b90 <LL_USART_Init+0x154>)
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d104      	bne.n	8010aaa <LL_USART_Init+0x6e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010aa0:	483c      	ldr	r0, [pc, #240]	@ (8010b94 <LL_USART_Init+0x158>)
 8010aa2:	f7ff f88b 	bl	800fbbc <LL_RCC_GetUSARTClockFreq>
 8010aa6:	60b8      	str	r0, [r7, #8]
 8010aa8:	e04f      	b.n	8010b4a <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART2)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	4a3a      	ldr	r2, [pc, #232]	@ (8010b98 <LL_USART_Init+0x15c>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d104      	bne.n	8010abc <LL_USART_Init+0x80>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010ab2:	483a      	ldr	r0, [pc, #232]	@ (8010b9c <LL_USART_Init+0x160>)
 8010ab4:	f7ff f882 	bl	800fbbc <LL_RCC_GetUSARTClockFreq>
 8010ab8:	60b8      	str	r0, [r7, #8]
 8010aba:	e046      	b.n	8010b4a <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART3)
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	4a38      	ldr	r2, [pc, #224]	@ (8010ba0 <LL_USART_Init+0x164>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d104      	bne.n	8010ace <LL_USART_Init+0x92>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010ac4:	4835      	ldr	r0, [pc, #212]	@ (8010b9c <LL_USART_Init+0x160>)
 8010ac6:	f7ff f879 	bl	800fbbc <LL_RCC_GetUSARTClockFreq>
 8010aca:	60b8      	str	r0, [r7, #8]
 8010acc:	e03d      	b.n	8010b4a <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART4)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	4a34      	ldr	r2, [pc, #208]	@ (8010ba4 <LL_USART_Init+0x168>)
 8010ad2:	4293      	cmp	r3, r2
 8010ad4:	d104      	bne.n	8010ae0 <LL_USART_Init+0xa4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010ad6:	4831      	ldr	r0, [pc, #196]	@ (8010b9c <LL_USART_Init+0x160>)
 8010ad8:	f7ff f870 	bl	800fbbc <LL_RCC_GetUSARTClockFreq>
 8010adc:	60b8      	str	r0, [r7, #8]
 8010ade:	e034      	b.n	8010b4a <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART5)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	4a31      	ldr	r2, [pc, #196]	@ (8010ba8 <LL_USART_Init+0x16c>)
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	d104      	bne.n	8010af2 <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010ae8:	482c      	ldr	r0, [pc, #176]	@ (8010b9c <LL_USART_Init+0x160>)
 8010aea:	f7ff f867 	bl	800fbbc <LL_RCC_GetUSARTClockFreq>
 8010aee:	60b8      	str	r0, [r7, #8]
 8010af0:	e02b      	b.n	8010b4a <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART6)
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	4a2d      	ldr	r2, [pc, #180]	@ (8010bac <LL_USART_Init+0x170>)
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d104      	bne.n	8010b04 <LL_USART_Init+0xc8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010afa:	4826      	ldr	r0, [pc, #152]	@ (8010b94 <LL_USART_Init+0x158>)
 8010afc:	f7ff f85e 	bl	800fbbc <LL_RCC_GetUSARTClockFreq>
 8010b00:	60b8      	str	r0, [r7, #8]
 8010b02:	e022      	b.n	8010b4a <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART7)
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	4a2a      	ldr	r2, [pc, #168]	@ (8010bb0 <LL_USART_Init+0x174>)
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d104      	bne.n	8010b16 <LL_USART_Init+0xda>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010b0c:	4823      	ldr	r0, [pc, #140]	@ (8010b9c <LL_USART_Init+0x160>)
 8010b0e:	f7ff f855 	bl	800fbbc <LL_RCC_GetUSARTClockFreq>
 8010b12:	60b8      	str	r0, [r7, #8]
 8010b14:	e019      	b.n	8010b4a <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART8)
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	4a26      	ldr	r2, [pc, #152]	@ (8010bb4 <LL_USART_Init+0x178>)
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d104      	bne.n	8010b28 <LL_USART_Init+0xec>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010b1e:	481f      	ldr	r0, [pc, #124]	@ (8010b9c <LL_USART_Init+0x160>)
 8010b20:	f7ff f84c 	bl	800fbbc <LL_RCC_GetUSARTClockFreq>
 8010b24:	60b8      	str	r0, [r7, #8]
 8010b26:	e010      	b.n	8010b4a <LL_USART_Init+0x10e>
    }
#if defined(UART9)
    else if (USARTx == UART9)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	4a23      	ldr	r2, [pc, #140]	@ (8010bb8 <LL_USART_Init+0x17c>)
 8010b2c:	4293      	cmp	r3, r2
 8010b2e:	d104      	bne.n	8010b3a <LL_USART_Init+0xfe>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010b30:	4818      	ldr	r0, [pc, #96]	@ (8010b94 <LL_USART_Init+0x158>)
 8010b32:	f7ff f843 	bl	800fbbc <LL_RCC_GetUSARTClockFreq>
 8010b36:	60b8      	str	r0, [r7, #8]
 8010b38:	e007      	b.n	8010b4a <LL_USART_Init+0x10e>
    }
#endif /* UART9 */
#if defined(USART10)
    else if (USARTx == USART10)
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8010bbc <LL_USART_Init+0x180>)
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d103      	bne.n	8010b4a <LL_USART_Init+0x10e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010b42:	4814      	ldr	r0, [pc, #80]	@ (8010b94 <LL_USART_Init+0x158>)
 8010b44:	f7ff f83a 	bl	800fbbc <LL_RCC_GetUSARTClockFreq>
 8010b48:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d011      	beq.n	8010b74 <LL_USART_Init+0x138>
        && (USART_InitStruct->BaudRate != 0U))
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d00d      	beq.n	8010b74 <LL_USART_Init+0x138>
    {
      status = SUCCESS;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8010b68:	9300      	str	r3, [sp, #0]
 8010b6a:	460b      	mov	r3, r1
 8010b6c:	68b9      	ldr	r1, [r7, #8]
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f7ff ff14 	bl	801099c <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	4619      	mov	r1, r3
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f7ff fed3 	bl	8010926 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8010b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3710      	adds	r7, #16
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}
 8010b8a:	bf00      	nop
 8010b8c:	efff69f3 	.word	0xefff69f3
 8010b90:	40011000 	.word	0x40011000
 8010b94:	07000308 	.word	0x07000308
 8010b98:	40004400 	.word	0x40004400
 8010b9c:	07000008 	.word	0x07000008
 8010ba0:	40004800 	.word	0x40004800
 8010ba4:	40004c00 	.word	0x40004c00
 8010ba8:	40005000 	.word	0x40005000
 8010bac:	40011400 	.word	0x40011400
 8010bb0:	40007800 	.word	0x40007800
 8010bb4:	40007c00 	.word	0x40007c00
 8010bb8:	40011800 	.word	0x40011800
 8010bbc:	40011c00 	.word	0x40011c00

08010bc0 <__cvt>:
 8010bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bc2:	ed2d 8b02 	vpush	{d8}
 8010bc6:	eeb0 8b40 	vmov.f64	d8, d0
 8010bca:	b085      	sub	sp, #20
 8010bcc:	4617      	mov	r7, r2
 8010bce:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8010bd0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010bd2:	ee18 2a90 	vmov	r2, s17
 8010bd6:	f025 0520 	bic.w	r5, r5, #32
 8010bda:	2a00      	cmp	r2, #0
 8010bdc:	bfb6      	itet	lt
 8010bde:	222d      	movlt	r2, #45	@ 0x2d
 8010be0:	2200      	movge	r2, #0
 8010be2:	eeb1 8b40 	vneglt.f64	d8, d0
 8010be6:	2d46      	cmp	r5, #70	@ 0x46
 8010be8:	460c      	mov	r4, r1
 8010bea:	701a      	strb	r2, [r3, #0]
 8010bec:	d004      	beq.n	8010bf8 <__cvt+0x38>
 8010bee:	2d45      	cmp	r5, #69	@ 0x45
 8010bf0:	d100      	bne.n	8010bf4 <__cvt+0x34>
 8010bf2:	3401      	adds	r4, #1
 8010bf4:	2102      	movs	r1, #2
 8010bf6:	e000      	b.n	8010bfa <__cvt+0x3a>
 8010bf8:	2103      	movs	r1, #3
 8010bfa:	ab03      	add	r3, sp, #12
 8010bfc:	9301      	str	r3, [sp, #4]
 8010bfe:	ab02      	add	r3, sp, #8
 8010c00:	9300      	str	r3, [sp, #0]
 8010c02:	4622      	mov	r2, r4
 8010c04:	4633      	mov	r3, r6
 8010c06:	eeb0 0b48 	vmov.f64	d0, d8
 8010c0a:	f001 f9cd 	bl	8011fa8 <_dtoa_r>
 8010c0e:	2d47      	cmp	r5, #71	@ 0x47
 8010c10:	d114      	bne.n	8010c3c <__cvt+0x7c>
 8010c12:	07fb      	lsls	r3, r7, #31
 8010c14:	d50a      	bpl.n	8010c2c <__cvt+0x6c>
 8010c16:	1902      	adds	r2, r0, r4
 8010c18:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c20:	bf08      	it	eq
 8010c22:	9203      	streq	r2, [sp, #12]
 8010c24:	2130      	movs	r1, #48	@ 0x30
 8010c26:	9b03      	ldr	r3, [sp, #12]
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d319      	bcc.n	8010c60 <__cvt+0xa0>
 8010c2c:	9b03      	ldr	r3, [sp, #12]
 8010c2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c30:	1a1b      	subs	r3, r3, r0
 8010c32:	6013      	str	r3, [r2, #0]
 8010c34:	b005      	add	sp, #20
 8010c36:	ecbd 8b02 	vpop	{d8}
 8010c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c3c:	2d46      	cmp	r5, #70	@ 0x46
 8010c3e:	eb00 0204 	add.w	r2, r0, r4
 8010c42:	d1e9      	bne.n	8010c18 <__cvt+0x58>
 8010c44:	7803      	ldrb	r3, [r0, #0]
 8010c46:	2b30      	cmp	r3, #48	@ 0x30
 8010c48:	d107      	bne.n	8010c5a <__cvt+0x9a>
 8010c4a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c52:	bf1c      	itt	ne
 8010c54:	f1c4 0401 	rsbne	r4, r4, #1
 8010c58:	6034      	strne	r4, [r6, #0]
 8010c5a:	6833      	ldr	r3, [r6, #0]
 8010c5c:	441a      	add	r2, r3
 8010c5e:	e7db      	b.n	8010c18 <__cvt+0x58>
 8010c60:	1c5c      	adds	r4, r3, #1
 8010c62:	9403      	str	r4, [sp, #12]
 8010c64:	7019      	strb	r1, [r3, #0]
 8010c66:	e7de      	b.n	8010c26 <__cvt+0x66>

08010c68 <__exponent>:
 8010c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c6a:	2900      	cmp	r1, #0
 8010c6c:	bfba      	itte	lt
 8010c6e:	4249      	neglt	r1, r1
 8010c70:	232d      	movlt	r3, #45	@ 0x2d
 8010c72:	232b      	movge	r3, #43	@ 0x2b
 8010c74:	2909      	cmp	r1, #9
 8010c76:	7002      	strb	r2, [r0, #0]
 8010c78:	7043      	strb	r3, [r0, #1]
 8010c7a:	dd29      	ble.n	8010cd0 <__exponent+0x68>
 8010c7c:	f10d 0307 	add.w	r3, sp, #7
 8010c80:	461d      	mov	r5, r3
 8010c82:	270a      	movs	r7, #10
 8010c84:	461a      	mov	r2, r3
 8010c86:	fbb1 f6f7 	udiv	r6, r1, r7
 8010c8a:	fb07 1416 	mls	r4, r7, r6, r1
 8010c8e:	3430      	adds	r4, #48	@ 0x30
 8010c90:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010c94:	460c      	mov	r4, r1
 8010c96:	2c63      	cmp	r4, #99	@ 0x63
 8010c98:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010c9c:	4631      	mov	r1, r6
 8010c9e:	dcf1      	bgt.n	8010c84 <__exponent+0x1c>
 8010ca0:	3130      	adds	r1, #48	@ 0x30
 8010ca2:	1e94      	subs	r4, r2, #2
 8010ca4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010ca8:	1c41      	adds	r1, r0, #1
 8010caa:	4623      	mov	r3, r4
 8010cac:	42ab      	cmp	r3, r5
 8010cae:	d30a      	bcc.n	8010cc6 <__exponent+0x5e>
 8010cb0:	f10d 0309 	add.w	r3, sp, #9
 8010cb4:	1a9b      	subs	r3, r3, r2
 8010cb6:	42ac      	cmp	r4, r5
 8010cb8:	bf88      	it	hi
 8010cba:	2300      	movhi	r3, #0
 8010cbc:	3302      	adds	r3, #2
 8010cbe:	4403      	add	r3, r0
 8010cc0:	1a18      	subs	r0, r3, r0
 8010cc2:	b003      	add	sp, #12
 8010cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cc6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010cca:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010cce:	e7ed      	b.n	8010cac <__exponent+0x44>
 8010cd0:	2330      	movs	r3, #48	@ 0x30
 8010cd2:	3130      	adds	r1, #48	@ 0x30
 8010cd4:	7083      	strb	r3, [r0, #2]
 8010cd6:	70c1      	strb	r1, [r0, #3]
 8010cd8:	1d03      	adds	r3, r0, #4
 8010cda:	e7f1      	b.n	8010cc0 <__exponent+0x58>
 8010cdc:	0000      	movs	r0, r0
	...

08010ce0 <_printf_float>:
 8010ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce4:	b08d      	sub	sp, #52	@ 0x34
 8010ce6:	460c      	mov	r4, r1
 8010ce8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010cec:	4616      	mov	r6, r2
 8010cee:	461f      	mov	r7, r3
 8010cf0:	4605      	mov	r5, r0
 8010cf2:	f001 f845 	bl	8011d80 <_localeconv_r>
 8010cf6:	f8d0 b000 	ldr.w	fp, [r0]
 8010cfa:	4658      	mov	r0, fp
 8010cfc:	f7ef fb68 	bl	80003d0 <strlen>
 8010d00:	2300      	movs	r3, #0
 8010d02:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d04:	f8d8 3000 	ldr.w	r3, [r8]
 8010d08:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010d0c:	6822      	ldr	r2, [r4, #0]
 8010d0e:	9005      	str	r0, [sp, #20]
 8010d10:	3307      	adds	r3, #7
 8010d12:	f023 0307 	bic.w	r3, r3, #7
 8010d16:	f103 0108 	add.w	r1, r3, #8
 8010d1a:	f8c8 1000 	str.w	r1, [r8]
 8010d1e:	ed93 0b00 	vldr	d0, [r3]
 8010d22:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8010f80 <_printf_float+0x2a0>
 8010d26:	eeb0 7bc0 	vabs.f64	d7, d0
 8010d2a:	eeb4 7b46 	vcmp.f64	d7, d6
 8010d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d32:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8010d36:	dd24      	ble.n	8010d82 <_printf_float+0xa2>
 8010d38:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d40:	d502      	bpl.n	8010d48 <_printf_float+0x68>
 8010d42:	232d      	movs	r3, #45	@ 0x2d
 8010d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010d48:	498f      	ldr	r1, [pc, #572]	@ (8010f88 <_printf_float+0x2a8>)
 8010d4a:	4b90      	ldr	r3, [pc, #576]	@ (8010f8c <_printf_float+0x2ac>)
 8010d4c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8010d50:	bf8c      	ite	hi
 8010d52:	4688      	movhi	r8, r1
 8010d54:	4698      	movls	r8, r3
 8010d56:	f022 0204 	bic.w	r2, r2, #4
 8010d5a:	2303      	movs	r3, #3
 8010d5c:	6123      	str	r3, [r4, #16]
 8010d5e:	6022      	str	r2, [r4, #0]
 8010d60:	f04f 0a00 	mov.w	sl, #0
 8010d64:	9700      	str	r7, [sp, #0]
 8010d66:	4633      	mov	r3, r6
 8010d68:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010d6a:	4621      	mov	r1, r4
 8010d6c:	4628      	mov	r0, r5
 8010d6e:	f000 f9d1 	bl	8011114 <_printf_common>
 8010d72:	3001      	adds	r0, #1
 8010d74:	f040 8089 	bne.w	8010e8a <_printf_float+0x1aa>
 8010d78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d7c:	b00d      	add	sp, #52	@ 0x34
 8010d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d82:	eeb4 0b40 	vcmp.f64	d0, d0
 8010d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d8a:	d709      	bvc.n	8010da0 <_printf_float+0xc0>
 8010d8c:	ee10 3a90 	vmov	r3, s1
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	bfbc      	itt	lt
 8010d94:	232d      	movlt	r3, #45	@ 0x2d
 8010d96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010d9a:	497d      	ldr	r1, [pc, #500]	@ (8010f90 <_printf_float+0x2b0>)
 8010d9c:	4b7d      	ldr	r3, [pc, #500]	@ (8010f94 <_printf_float+0x2b4>)
 8010d9e:	e7d5      	b.n	8010d4c <_printf_float+0x6c>
 8010da0:	6863      	ldr	r3, [r4, #4]
 8010da2:	1c59      	adds	r1, r3, #1
 8010da4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8010da8:	d139      	bne.n	8010e1e <_printf_float+0x13e>
 8010daa:	2306      	movs	r3, #6
 8010dac:	6063      	str	r3, [r4, #4]
 8010dae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010db2:	2300      	movs	r3, #0
 8010db4:	6022      	str	r2, [r4, #0]
 8010db6:	9303      	str	r3, [sp, #12]
 8010db8:	ab0a      	add	r3, sp, #40	@ 0x28
 8010dba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010dbe:	ab09      	add	r3, sp, #36	@ 0x24
 8010dc0:	9300      	str	r3, [sp, #0]
 8010dc2:	6861      	ldr	r1, [r4, #4]
 8010dc4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010dc8:	4628      	mov	r0, r5
 8010dca:	f7ff fef9 	bl	8010bc0 <__cvt>
 8010dce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010dd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010dd4:	4680      	mov	r8, r0
 8010dd6:	d129      	bne.n	8010e2c <_printf_float+0x14c>
 8010dd8:	1cc8      	adds	r0, r1, #3
 8010dda:	db02      	blt.n	8010de2 <_printf_float+0x102>
 8010ddc:	6863      	ldr	r3, [r4, #4]
 8010dde:	4299      	cmp	r1, r3
 8010de0:	dd41      	ble.n	8010e66 <_printf_float+0x186>
 8010de2:	f1a9 0902 	sub.w	r9, r9, #2
 8010de6:	fa5f f989 	uxtb.w	r9, r9
 8010dea:	3901      	subs	r1, #1
 8010dec:	464a      	mov	r2, r9
 8010dee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010df2:	9109      	str	r1, [sp, #36]	@ 0x24
 8010df4:	f7ff ff38 	bl	8010c68 <__exponent>
 8010df8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010dfa:	1813      	adds	r3, r2, r0
 8010dfc:	2a01      	cmp	r2, #1
 8010dfe:	4682      	mov	sl, r0
 8010e00:	6123      	str	r3, [r4, #16]
 8010e02:	dc02      	bgt.n	8010e0a <_printf_float+0x12a>
 8010e04:	6822      	ldr	r2, [r4, #0]
 8010e06:	07d2      	lsls	r2, r2, #31
 8010e08:	d501      	bpl.n	8010e0e <_printf_float+0x12e>
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	6123      	str	r3, [r4, #16]
 8010e0e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d0a6      	beq.n	8010d64 <_printf_float+0x84>
 8010e16:	232d      	movs	r3, #45	@ 0x2d
 8010e18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010e1c:	e7a2      	b.n	8010d64 <_printf_float+0x84>
 8010e1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010e22:	d1c4      	bne.n	8010dae <_printf_float+0xce>
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d1c2      	bne.n	8010dae <_printf_float+0xce>
 8010e28:	2301      	movs	r3, #1
 8010e2a:	e7bf      	b.n	8010dac <_printf_float+0xcc>
 8010e2c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010e30:	d9db      	bls.n	8010dea <_printf_float+0x10a>
 8010e32:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8010e36:	d118      	bne.n	8010e6a <_printf_float+0x18a>
 8010e38:	2900      	cmp	r1, #0
 8010e3a:	6863      	ldr	r3, [r4, #4]
 8010e3c:	dd0b      	ble.n	8010e56 <_printf_float+0x176>
 8010e3e:	6121      	str	r1, [r4, #16]
 8010e40:	b913      	cbnz	r3, 8010e48 <_printf_float+0x168>
 8010e42:	6822      	ldr	r2, [r4, #0]
 8010e44:	07d0      	lsls	r0, r2, #31
 8010e46:	d502      	bpl.n	8010e4e <_printf_float+0x16e>
 8010e48:	3301      	adds	r3, #1
 8010e4a:	440b      	add	r3, r1
 8010e4c:	6123      	str	r3, [r4, #16]
 8010e4e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010e50:	f04f 0a00 	mov.w	sl, #0
 8010e54:	e7db      	b.n	8010e0e <_printf_float+0x12e>
 8010e56:	b913      	cbnz	r3, 8010e5e <_printf_float+0x17e>
 8010e58:	6822      	ldr	r2, [r4, #0]
 8010e5a:	07d2      	lsls	r2, r2, #31
 8010e5c:	d501      	bpl.n	8010e62 <_printf_float+0x182>
 8010e5e:	3302      	adds	r3, #2
 8010e60:	e7f4      	b.n	8010e4c <_printf_float+0x16c>
 8010e62:	2301      	movs	r3, #1
 8010e64:	e7f2      	b.n	8010e4c <_printf_float+0x16c>
 8010e66:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8010e6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e6c:	4299      	cmp	r1, r3
 8010e6e:	db05      	blt.n	8010e7c <_printf_float+0x19c>
 8010e70:	6823      	ldr	r3, [r4, #0]
 8010e72:	6121      	str	r1, [r4, #16]
 8010e74:	07d8      	lsls	r0, r3, #31
 8010e76:	d5ea      	bpl.n	8010e4e <_printf_float+0x16e>
 8010e78:	1c4b      	adds	r3, r1, #1
 8010e7a:	e7e7      	b.n	8010e4c <_printf_float+0x16c>
 8010e7c:	2900      	cmp	r1, #0
 8010e7e:	bfd4      	ite	le
 8010e80:	f1c1 0202 	rsble	r2, r1, #2
 8010e84:	2201      	movgt	r2, #1
 8010e86:	4413      	add	r3, r2
 8010e88:	e7e0      	b.n	8010e4c <_printf_float+0x16c>
 8010e8a:	6823      	ldr	r3, [r4, #0]
 8010e8c:	055a      	lsls	r2, r3, #21
 8010e8e:	d407      	bmi.n	8010ea0 <_printf_float+0x1c0>
 8010e90:	6923      	ldr	r3, [r4, #16]
 8010e92:	4642      	mov	r2, r8
 8010e94:	4631      	mov	r1, r6
 8010e96:	4628      	mov	r0, r5
 8010e98:	47b8      	blx	r7
 8010e9a:	3001      	adds	r0, #1
 8010e9c:	d12a      	bne.n	8010ef4 <_printf_float+0x214>
 8010e9e:	e76b      	b.n	8010d78 <_printf_float+0x98>
 8010ea0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010ea4:	f240 80e0 	bls.w	8011068 <_printf_float+0x388>
 8010ea8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8010eac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb4:	d133      	bne.n	8010f1e <_printf_float+0x23e>
 8010eb6:	4a38      	ldr	r2, [pc, #224]	@ (8010f98 <_printf_float+0x2b8>)
 8010eb8:	2301      	movs	r3, #1
 8010eba:	4631      	mov	r1, r6
 8010ebc:	4628      	mov	r0, r5
 8010ebe:	47b8      	blx	r7
 8010ec0:	3001      	adds	r0, #1
 8010ec2:	f43f af59 	beq.w	8010d78 <_printf_float+0x98>
 8010ec6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010eca:	4543      	cmp	r3, r8
 8010ecc:	db02      	blt.n	8010ed4 <_printf_float+0x1f4>
 8010ece:	6823      	ldr	r3, [r4, #0]
 8010ed0:	07d8      	lsls	r0, r3, #31
 8010ed2:	d50f      	bpl.n	8010ef4 <_printf_float+0x214>
 8010ed4:	9b05      	ldr	r3, [sp, #20]
 8010ed6:	465a      	mov	r2, fp
 8010ed8:	4631      	mov	r1, r6
 8010eda:	4628      	mov	r0, r5
 8010edc:	47b8      	blx	r7
 8010ede:	3001      	adds	r0, #1
 8010ee0:	f43f af4a 	beq.w	8010d78 <_printf_float+0x98>
 8010ee4:	f04f 0900 	mov.w	r9, #0
 8010ee8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8010eec:	f104 0a1a 	add.w	sl, r4, #26
 8010ef0:	45c8      	cmp	r8, r9
 8010ef2:	dc09      	bgt.n	8010f08 <_printf_float+0x228>
 8010ef4:	6823      	ldr	r3, [r4, #0]
 8010ef6:	079b      	lsls	r3, r3, #30
 8010ef8:	f100 8107 	bmi.w	801110a <_printf_float+0x42a>
 8010efc:	68e0      	ldr	r0, [r4, #12]
 8010efe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f00:	4298      	cmp	r0, r3
 8010f02:	bfb8      	it	lt
 8010f04:	4618      	movlt	r0, r3
 8010f06:	e739      	b.n	8010d7c <_printf_float+0x9c>
 8010f08:	2301      	movs	r3, #1
 8010f0a:	4652      	mov	r2, sl
 8010f0c:	4631      	mov	r1, r6
 8010f0e:	4628      	mov	r0, r5
 8010f10:	47b8      	blx	r7
 8010f12:	3001      	adds	r0, #1
 8010f14:	f43f af30 	beq.w	8010d78 <_printf_float+0x98>
 8010f18:	f109 0901 	add.w	r9, r9, #1
 8010f1c:	e7e8      	b.n	8010ef0 <_printf_float+0x210>
 8010f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	dc3b      	bgt.n	8010f9c <_printf_float+0x2bc>
 8010f24:	4a1c      	ldr	r2, [pc, #112]	@ (8010f98 <_printf_float+0x2b8>)
 8010f26:	2301      	movs	r3, #1
 8010f28:	4631      	mov	r1, r6
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	47b8      	blx	r7
 8010f2e:	3001      	adds	r0, #1
 8010f30:	f43f af22 	beq.w	8010d78 <_printf_float+0x98>
 8010f34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010f38:	ea59 0303 	orrs.w	r3, r9, r3
 8010f3c:	d102      	bne.n	8010f44 <_printf_float+0x264>
 8010f3e:	6823      	ldr	r3, [r4, #0]
 8010f40:	07d9      	lsls	r1, r3, #31
 8010f42:	d5d7      	bpl.n	8010ef4 <_printf_float+0x214>
 8010f44:	9b05      	ldr	r3, [sp, #20]
 8010f46:	465a      	mov	r2, fp
 8010f48:	4631      	mov	r1, r6
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	47b8      	blx	r7
 8010f4e:	3001      	adds	r0, #1
 8010f50:	f43f af12 	beq.w	8010d78 <_printf_float+0x98>
 8010f54:	f04f 0a00 	mov.w	sl, #0
 8010f58:	f104 0b1a 	add.w	fp, r4, #26
 8010f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f5e:	425b      	negs	r3, r3
 8010f60:	4553      	cmp	r3, sl
 8010f62:	dc01      	bgt.n	8010f68 <_printf_float+0x288>
 8010f64:	464b      	mov	r3, r9
 8010f66:	e794      	b.n	8010e92 <_printf_float+0x1b2>
 8010f68:	2301      	movs	r3, #1
 8010f6a:	465a      	mov	r2, fp
 8010f6c:	4631      	mov	r1, r6
 8010f6e:	4628      	mov	r0, r5
 8010f70:	47b8      	blx	r7
 8010f72:	3001      	adds	r0, #1
 8010f74:	f43f af00 	beq.w	8010d78 <_printf_float+0x98>
 8010f78:	f10a 0a01 	add.w	sl, sl, #1
 8010f7c:	e7ee      	b.n	8010f5c <_printf_float+0x27c>
 8010f7e:	bf00      	nop
 8010f80:	ffffffff 	.word	0xffffffff
 8010f84:	7fefffff 	.word	0x7fefffff
 8010f88:	0801731c 	.word	0x0801731c
 8010f8c:	08017318 	.word	0x08017318
 8010f90:	08017324 	.word	0x08017324
 8010f94:	08017320 	.word	0x08017320
 8010f98:	0801745e 	.word	0x0801745e
 8010f9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010f9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010fa2:	4553      	cmp	r3, sl
 8010fa4:	bfa8      	it	ge
 8010fa6:	4653      	movge	r3, sl
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	4699      	mov	r9, r3
 8010fac:	dc37      	bgt.n	801101e <_printf_float+0x33e>
 8010fae:	2300      	movs	r3, #0
 8010fb0:	9307      	str	r3, [sp, #28]
 8010fb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010fb6:	f104 021a 	add.w	r2, r4, #26
 8010fba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010fbc:	9907      	ldr	r1, [sp, #28]
 8010fbe:	9306      	str	r3, [sp, #24]
 8010fc0:	eba3 0309 	sub.w	r3, r3, r9
 8010fc4:	428b      	cmp	r3, r1
 8010fc6:	dc31      	bgt.n	801102c <_printf_float+0x34c>
 8010fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fca:	459a      	cmp	sl, r3
 8010fcc:	dc3b      	bgt.n	8011046 <_printf_float+0x366>
 8010fce:	6823      	ldr	r3, [r4, #0]
 8010fd0:	07da      	lsls	r2, r3, #31
 8010fd2:	d438      	bmi.n	8011046 <_printf_float+0x366>
 8010fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fd6:	ebaa 0903 	sub.w	r9, sl, r3
 8010fda:	9b06      	ldr	r3, [sp, #24]
 8010fdc:	ebaa 0303 	sub.w	r3, sl, r3
 8010fe0:	4599      	cmp	r9, r3
 8010fe2:	bfa8      	it	ge
 8010fe4:	4699      	movge	r9, r3
 8010fe6:	f1b9 0f00 	cmp.w	r9, #0
 8010fea:	dc34      	bgt.n	8011056 <_printf_float+0x376>
 8010fec:	f04f 0800 	mov.w	r8, #0
 8010ff0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ff4:	f104 0b1a 	add.w	fp, r4, #26
 8010ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ffa:	ebaa 0303 	sub.w	r3, sl, r3
 8010ffe:	eba3 0309 	sub.w	r3, r3, r9
 8011002:	4543      	cmp	r3, r8
 8011004:	f77f af76 	ble.w	8010ef4 <_printf_float+0x214>
 8011008:	2301      	movs	r3, #1
 801100a:	465a      	mov	r2, fp
 801100c:	4631      	mov	r1, r6
 801100e:	4628      	mov	r0, r5
 8011010:	47b8      	blx	r7
 8011012:	3001      	adds	r0, #1
 8011014:	f43f aeb0 	beq.w	8010d78 <_printf_float+0x98>
 8011018:	f108 0801 	add.w	r8, r8, #1
 801101c:	e7ec      	b.n	8010ff8 <_printf_float+0x318>
 801101e:	4642      	mov	r2, r8
 8011020:	4631      	mov	r1, r6
 8011022:	4628      	mov	r0, r5
 8011024:	47b8      	blx	r7
 8011026:	3001      	adds	r0, #1
 8011028:	d1c1      	bne.n	8010fae <_printf_float+0x2ce>
 801102a:	e6a5      	b.n	8010d78 <_printf_float+0x98>
 801102c:	2301      	movs	r3, #1
 801102e:	4631      	mov	r1, r6
 8011030:	4628      	mov	r0, r5
 8011032:	9206      	str	r2, [sp, #24]
 8011034:	47b8      	blx	r7
 8011036:	3001      	adds	r0, #1
 8011038:	f43f ae9e 	beq.w	8010d78 <_printf_float+0x98>
 801103c:	9b07      	ldr	r3, [sp, #28]
 801103e:	9a06      	ldr	r2, [sp, #24]
 8011040:	3301      	adds	r3, #1
 8011042:	9307      	str	r3, [sp, #28]
 8011044:	e7b9      	b.n	8010fba <_printf_float+0x2da>
 8011046:	9b05      	ldr	r3, [sp, #20]
 8011048:	465a      	mov	r2, fp
 801104a:	4631      	mov	r1, r6
 801104c:	4628      	mov	r0, r5
 801104e:	47b8      	blx	r7
 8011050:	3001      	adds	r0, #1
 8011052:	d1bf      	bne.n	8010fd4 <_printf_float+0x2f4>
 8011054:	e690      	b.n	8010d78 <_printf_float+0x98>
 8011056:	9a06      	ldr	r2, [sp, #24]
 8011058:	464b      	mov	r3, r9
 801105a:	4442      	add	r2, r8
 801105c:	4631      	mov	r1, r6
 801105e:	4628      	mov	r0, r5
 8011060:	47b8      	blx	r7
 8011062:	3001      	adds	r0, #1
 8011064:	d1c2      	bne.n	8010fec <_printf_float+0x30c>
 8011066:	e687      	b.n	8010d78 <_printf_float+0x98>
 8011068:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801106c:	f1b9 0f01 	cmp.w	r9, #1
 8011070:	dc01      	bgt.n	8011076 <_printf_float+0x396>
 8011072:	07db      	lsls	r3, r3, #31
 8011074:	d536      	bpl.n	80110e4 <_printf_float+0x404>
 8011076:	2301      	movs	r3, #1
 8011078:	4642      	mov	r2, r8
 801107a:	4631      	mov	r1, r6
 801107c:	4628      	mov	r0, r5
 801107e:	47b8      	blx	r7
 8011080:	3001      	adds	r0, #1
 8011082:	f43f ae79 	beq.w	8010d78 <_printf_float+0x98>
 8011086:	9b05      	ldr	r3, [sp, #20]
 8011088:	465a      	mov	r2, fp
 801108a:	4631      	mov	r1, r6
 801108c:	4628      	mov	r0, r5
 801108e:	47b8      	blx	r7
 8011090:	3001      	adds	r0, #1
 8011092:	f43f ae71 	beq.w	8010d78 <_printf_float+0x98>
 8011096:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801109a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80110a6:	d018      	beq.n	80110da <_printf_float+0x3fa>
 80110a8:	464b      	mov	r3, r9
 80110aa:	f108 0201 	add.w	r2, r8, #1
 80110ae:	4631      	mov	r1, r6
 80110b0:	4628      	mov	r0, r5
 80110b2:	47b8      	blx	r7
 80110b4:	3001      	adds	r0, #1
 80110b6:	d10c      	bne.n	80110d2 <_printf_float+0x3f2>
 80110b8:	e65e      	b.n	8010d78 <_printf_float+0x98>
 80110ba:	2301      	movs	r3, #1
 80110bc:	465a      	mov	r2, fp
 80110be:	4631      	mov	r1, r6
 80110c0:	4628      	mov	r0, r5
 80110c2:	47b8      	blx	r7
 80110c4:	3001      	adds	r0, #1
 80110c6:	f43f ae57 	beq.w	8010d78 <_printf_float+0x98>
 80110ca:	f108 0801 	add.w	r8, r8, #1
 80110ce:	45c8      	cmp	r8, r9
 80110d0:	dbf3      	blt.n	80110ba <_printf_float+0x3da>
 80110d2:	4653      	mov	r3, sl
 80110d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80110d8:	e6dc      	b.n	8010e94 <_printf_float+0x1b4>
 80110da:	f04f 0800 	mov.w	r8, #0
 80110de:	f104 0b1a 	add.w	fp, r4, #26
 80110e2:	e7f4      	b.n	80110ce <_printf_float+0x3ee>
 80110e4:	2301      	movs	r3, #1
 80110e6:	4642      	mov	r2, r8
 80110e8:	e7e1      	b.n	80110ae <_printf_float+0x3ce>
 80110ea:	2301      	movs	r3, #1
 80110ec:	464a      	mov	r2, r9
 80110ee:	4631      	mov	r1, r6
 80110f0:	4628      	mov	r0, r5
 80110f2:	47b8      	blx	r7
 80110f4:	3001      	adds	r0, #1
 80110f6:	f43f ae3f 	beq.w	8010d78 <_printf_float+0x98>
 80110fa:	f108 0801 	add.w	r8, r8, #1
 80110fe:	68e3      	ldr	r3, [r4, #12]
 8011100:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011102:	1a5b      	subs	r3, r3, r1
 8011104:	4543      	cmp	r3, r8
 8011106:	dcf0      	bgt.n	80110ea <_printf_float+0x40a>
 8011108:	e6f8      	b.n	8010efc <_printf_float+0x21c>
 801110a:	f04f 0800 	mov.w	r8, #0
 801110e:	f104 0919 	add.w	r9, r4, #25
 8011112:	e7f4      	b.n	80110fe <_printf_float+0x41e>

08011114 <_printf_common>:
 8011114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011118:	4616      	mov	r6, r2
 801111a:	4698      	mov	r8, r3
 801111c:	688a      	ldr	r2, [r1, #8]
 801111e:	690b      	ldr	r3, [r1, #16]
 8011120:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011124:	4293      	cmp	r3, r2
 8011126:	bfb8      	it	lt
 8011128:	4613      	movlt	r3, r2
 801112a:	6033      	str	r3, [r6, #0]
 801112c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011130:	4607      	mov	r7, r0
 8011132:	460c      	mov	r4, r1
 8011134:	b10a      	cbz	r2, 801113a <_printf_common+0x26>
 8011136:	3301      	adds	r3, #1
 8011138:	6033      	str	r3, [r6, #0]
 801113a:	6823      	ldr	r3, [r4, #0]
 801113c:	0699      	lsls	r1, r3, #26
 801113e:	bf42      	ittt	mi
 8011140:	6833      	ldrmi	r3, [r6, #0]
 8011142:	3302      	addmi	r3, #2
 8011144:	6033      	strmi	r3, [r6, #0]
 8011146:	6825      	ldr	r5, [r4, #0]
 8011148:	f015 0506 	ands.w	r5, r5, #6
 801114c:	d106      	bne.n	801115c <_printf_common+0x48>
 801114e:	f104 0a19 	add.w	sl, r4, #25
 8011152:	68e3      	ldr	r3, [r4, #12]
 8011154:	6832      	ldr	r2, [r6, #0]
 8011156:	1a9b      	subs	r3, r3, r2
 8011158:	42ab      	cmp	r3, r5
 801115a:	dc26      	bgt.n	80111aa <_printf_common+0x96>
 801115c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011160:	6822      	ldr	r2, [r4, #0]
 8011162:	3b00      	subs	r3, #0
 8011164:	bf18      	it	ne
 8011166:	2301      	movne	r3, #1
 8011168:	0692      	lsls	r2, r2, #26
 801116a:	d42b      	bmi.n	80111c4 <_printf_common+0xb0>
 801116c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011170:	4641      	mov	r1, r8
 8011172:	4638      	mov	r0, r7
 8011174:	47c8      	blx	r9
 8011176:	3001      	adds	r0, #1
 8011178:	d01e      	beq.n	80111b8 <_printf_common+0xa4>
 801117a:	6823      	ldr	r3, [r4, #0]
 801117c:	6922      	ldr	r2, [r4, #16]
 801117e:	f003 0306 	and.w	r3, r3, #6
 8011182:	2b04      	cmp	r3, #4
 8011184:	bf02      	ittt	eq
 8011186:	68e5      	ldreq	r5, [r4, #12]
 8011188:	6833      	ldreq	r3, [r6, #0]
 801118a:	1aed      	subeq	r5, r5, r3
 801118c:	68a3      	ldr	r3, [r4, #8]
 801118e:	bf0c      	ite	eq
 8011190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011194:	2500      	movne	r5, #0
 8011196:	4293      	cmp	r3, r2
 8011198:	bfc4      	itt	gt
 801119a:	1a9b      	subgt	r3, r3, r2
 801119c:	18ed      	addgt	r5, r5, r3
 801119e:	2600      	movs	r6, #0
 80111a0:	341a      	adds	r4, #26
 80111a2:	42b5      	cmp	r5, r6
 80111a4:	d11a      	bne.n	80111dc <_printf_common+0xc8>
 80111a6:	2000      	movs	r0, #0
 80111a8:	e008      	b.n	80111bc <_printf_common+0xa8>
 80111aa:	2301      	movs	r3, #1
 80111ac:	4652      	mov	r2, sl
 80111ae:	4641      	mov	r1, r8
 80111b0:	4638      	mov	r0, r7
 80111b2:	47c8      	blx	r9
 80111b4:	3001      	adds	r0, #1
 80111b6:	d103      	bne.n	80111c0 <_printf_common+0xac>
 80111b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80111bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111c0:	3501      	adds	r5, #1
 80111c2:	e7c6      	b.n	8011152 <_printf_common+0x3e>
 80111c4:	18e1      	adds	r1, r4, r3
 80111c6:	1c5a      	adds	r2, r3, #1
 80111c8:	2030      	movs	r0, #48	@ 0x30
 80111ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80111ce:	4422      	add	r2, r4
 80111d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80111d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80111d8:	3302      	adds	r3, #2
 80111da:	e7c7      	b.n	801116c <_printf_common+0x58>
 80111dc:	2301      	movs	r3, #1
 80111de:	4622      	mov	r2, r4
 80111e0:	4641      	mov	r1, r8
 80111e2:	4638      	mov	r0, r7
 80111e4:	47c8      	blx	r9
 80111e6:	3001      	adds	r0, #1
 80111e8:	d0e6      	beq.n	80111b8 <_printf_common+0xa4>
 80111ea:	3601      	adds	r6, #1
 80111ec:	e7d9      	b.n	80111a2 <_printf_common+0x8e>
	...

080111f0 <_printf_i>:
 80111f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80111f4:	7e0f      	ldrb	r7, [r1, #24]
 80111f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80111f8:	2f78      	cmp	r7, #120	@ 0x78
 80111fa:	4691      	mov	r9, r2
 80111fc:	4680      	mov	r8, r0
 80111fe:	460c      	mov	r4, r1
 8011200:	469a      	mov	sl, r3
 8011202:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011206:	d807      	bhi.n	8011218 <_printf_i+0x28>
 8011208:	2f62      	cmp	r7, #98	@ 0x62
 801120a:	d80a      	bhi.n	8011222 <_printf_i+0x32>
 801120c:	2f00      	cmp	r7, #0
 801120e:	f000 80d1 	beq.w	80113b4 <_printf_i+0x1c4>
 8011212:	2f58      	cmp	r7, #88	@ 0x58
 8011214:	f000 80b8 	beq.w	8011388 <_printf_i+0x198>
 8011218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801121c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011220:	e03a      	b.n	8011298 <_printf_i+0xa8>
 8011222:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011226:	2b15      	cmp	r3, #21
 8011228:	d8f6      	bhi.n	8011218 <_printf_i+0x28>
 801122a:	a101      	add	r1, pc, #4	@ (adr r1, 8011230 <_printf_i+0x40>)
 801122c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011230:	08011289 	.word	0x08011289
 8011234:	0801129d 	.word	0x0801129d
 8011238:	08011219 	.word	0x08011219
 801123c:	08011219 	.word	0x08011219
 8011240:	08011219 	.word	0x08011219
 8011244:	08011219 	.word	0x08011219
 8011248:	0801129d 	.word	0x0801129d
 801124c:	08011219 	.word	0x08011219
 8011250:	08011219 	.word	0x08011219
 8011254:	08011219 	.word	0x08011219
 8011258:	08011219 	.word	0x08011219
 801125c:	0801139b 	.word	0x0801139b
 8011260:	080112c7 	.word	0x080112c7
 8011264:	08011355 	.word	0x08011355
 8011268:	08011219 	.word	0x08011219
 801126c:	08011219 	.word	0x08011219
 8011270:	080113bd 	.word	0x080113bd
 8011274:	08011219 	.word	0x08011219
 8011278:	080112c7 	.word	0x080112c7
 801127c:	08011219 	.word	0x08011219
 8011280:	08011219 	.word	0x08011219
 8011284:	0801135d 	.word	0x0801135d
 8011288:	6833      	ldr	r3, [r6, #0]
 801128a:	1d1a      	adds	r2, r3, #4
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	6032      	str	r2, [r6, #0]
 8011290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011294:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011298:	2301      	movs	r3, #1
 801129a:	e09c      	b.n	80113d6 <_printf_i+0x1e6>
 801129c:	6833      	ldr	r3, [r6, #0]
 801129e:	6820      	ldr	r0, [r4, #0]
 80112a0:	1d19      	adds	r1, r3, #4
 80112a2:	6031      	str	r1, [r6, #0]
 80112a4:	0606      	lsls	r6, r0, #24
 80112a6:	d501      	bpl.n	80112ac <_printf_i+0xbc>
 80112a8:	681d      	ldr	r5, [r3, #0]
 80112aa:	e003      	b.n	80112b4 <_printf_i+0xc4>
 80112ac:	0645      	lsls	r5, r0, #25
 80112ae:	d5fb      	bpl.n	80112a8 <_printf_i+0xb8>
 80112b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80112b4:	2d00      	cmp	r5, #0
 80112b6:	da03      	bge.n	80112c0 <_printf_i+0xd0>
 80112b8:	232d      	movs	r3, #45	@ 0x2d
 80112ba:	426d      	negs	r5, r5
 80112bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80112c0:	4858      	ldr	r0, [pc, #352]	@ (8011424 <_printf_i+0x234>)
 80112c2:	230a      	movs	r3, #10
 80112c4:	e011      	b.n	80112ea <_printf_i+0xfa>
 80112c6:	6821      	ldr	r1, [r4, #0]
 80112c8:	6833      	ldr	r3, [r6, #0]
 80112ca:	0608      	lsls	r0, r1, #24
 80112cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80112d0:	d402      	bmi.n	80112d8 <_printf_i+0xe8>
 80112d2:	0649      	lsls	r1, r1, #25
 80112d4:	bf48      	it	mi
 80112d6:	b2ad      	uxthmi	r5, r5
 80112d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80112da:	4852      	ldr	r0, [pc, #328]	@ (8011424 <_printf_i+0x234>)
 80112dc:	6033      	str	r3, [r6, #0]
 80112de:	bf14      	ite	ne
 80112e0:	230a      	movne	r3, #10
 80112e2:	2308      	moveq	r3, #8
 80112e4:	2100      	movs	r1, #0
 80112e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80112ea:	6866      	ldr	r6, [r4, #4]
 80112ec:	60a6      	str	r6, [r4, #8]
 80112ee:	2e00      	cmp	r6, #0
 80112f0:	db05      	blt.n	80112fe <_printf_i+0x10e>
 80112f2:	6821      	ldr	r1, [r4, #0]
 80112f4:	432e      	orrs	r6, r5
 80112f6:	f021 0104 	bic.w	r1, r1, #4
 80112fa:	6021      	str	r1, [r4, #0]
 80112fc:	d04b      	beq.n	8011396 <_printf_i+0x1a6>
 80112fe:	4616      	mov	r6, r2
 8011300:	fbb5 f1f3 	udiv	r1, r5, r3
 8011304:	fb03 5711 	mls	r7, r3, r1, r5
 8011308:	5dc7      	ldrb	r7, [r0, r7]
 801130a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801130e:	462f      	mov	r7, r5
 8011310:	42bb      	cmp	r3, r7
 8011312:	460d      	mov	r5, r1
 8011314:	d9f4      	bls.n	8011300 <_printf_i+0x110>
 8011316:	2b08      	cmp	r3, #8
 8011318:	d10b      	bne.n	8011332 <_printf_i+0x142>
 801131a:	6823      	ldr	r3, [r4, #0]
 801131c:	07df      	lsls	r7, r3, #31
 801131e:	d508      	bpl.n	8011332 <_printf_i+0x142>
 8011320:	6923      	ldr	r3, [r4, #16]
 8011322:	6861      	ldr	r1, [r4, #4]
 8011324:	4299      	cmp	r1, r3
 8011326:	bfde      	ittt	le
 8011328:	2330      	movle	r3, #48	@ 0x30
 801132a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801132e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011332:	1b92      	subs	r2, r2, r6
 8011334:	6122      	str	r2, [r4, #16]
 8011336:	f8cd a000 	str.w	sl, [sp]
 801133a:	464b      	mov	r3, r9
 801133c:	aa03      	add	r2, sp, #12
 801133e:	4621      	mov	r1, r4
 8011340:	4640      	mov	r0, r8
 8011342:	f7ff fee7 	bl	8011114 <_printf_common>
 8011346:	3001      	adds	r0, #1
 8011348:	d14a      	bne.n	80113e0 <_printf_i+0x1f0>
 801134a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801134e:	b004      	add	sp, #16
 8011350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011354:	6823      	ldr	r3, [r4, #0]
 8011356:	f043 0320 	orr.w	r3, r3, #32
 801135a:	6023      	str	r3, [r4, #0]
 801135c:	4832      	ldr	r0, [pc, #200]	@ (8011428 <_printf_i+0x238>)
 801135e:	2778      	movs	r7, #120	@ 0x78
 8011360:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011364:	6823      	ldr	r3, [r4, #0]
 8011366:	6831      	ldr	r1, [r6, #0]
 8011368:	061f      	lsls	r7, r3, #24
 801136a:	f851 5b04 	ldr.w	r5, [r1], #4
 801136e:	d402      	bmi.n	8011376 <_printf_i+0x186>
 8011370:	065f      	lsls	r7, r3, #25
 8011372:	bf48      	it	mi
 8011374:	b2ad      	uxthmi	r5, r5
 8011376:	6031      	str	r1, [r6, #0]
 8011378:	07d9      	lsls	r1, r3, #31
 801137a:	bf44      	itt	mi
 801137c:	f043 0320 	orrmi.w	r3, r3, #32
 8011380:	6023      	strmi	r3, [r4, #0]
 8011382:	b11d      	cbz	r5, 801138c <_printf_i+0x19c>
 8011384:	2310      	movs	r3, #16
 8011386:	e7ad      	b.n	80112e4 <_printf_i+0xf4>
 8011388:	4826      	ldr	r0, [pc, #152]	@ (8011424 <_printf_i+0x234>)
 801138a:	e7e9      	b.n	8011360 <_printf_i+0x170>
 801138c:	6823      	ldr	r3, [r4, #0]
 801138e:	f023 0320 	bic.w	r3, r3, #32
 8011392:	6023      	str	r3, [r4, #0]
 8011394:	e7f6      	b.n	8011384 <_printf_i+0x194>
 8011396:	4616      	mov	r6, r2
 8011398:	e7bd      	b.n	8011316 <_printf_i+0x126>
 801139a:	6833      	ldr	r3, [r6, #0]
 801139c:	6825      	ldr	r5, [r4, #0]
 801139e:	6961      	ldr	r1, [r4, #20]
 80113a0:	1d18      	adds	r0, r3, #4
 80113a2:	6030      	str	r0, [r6, #0]
 80113a4:	062e      	lsls	r6, r5, #24
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	d501      	bpl.n	80113ae <_printf_i+0x1be>
 80113aa:	6019      	str	r1, [r3, #0]
 80113ac:	e002      	b.n	80113b4 <_printf_i+0x1c4>
 80113ae:	0668      	lsls	r0, r5, #25
 80113b0:	d5fb      	bpl.n	80113aa <_printf_i+0x1ba>
 80113b2:	8019      	strh	r1, [r3, #0]
 80113b4:	2300      	movs	r3, #0
 80113b6:	6123      	str	r3, [r4, #16]
 80113b8:	4616      	mov	r6, r2
 80113ba:	e7bc      	b.n	8011336 <_printf_i+0x146>
 80113bc:	6833      	ldr	r3, [r6, #0]
 80113be:	1d1a      	adds	r2, r3, #4
 80113c0:	6032      	str	r2, [r6, #0]
 80113c2:	681e      	ldr	r6, [r3, #0]
 80113c4:	6862      	ldr	r2, [r4, #4]
 80113c6:	2100      	movs	r1, #0
 80113c8:	4630      	mov	r0, r6
 80113ca:	f7ee ffb1 	bl	8000330 <memchr>
 80113ce:	b108      	cbz	r0, 80113d4 <_printf_i+0x1e4>
 80113d0:	1b80      	subs	r0, r0, r6
 80113d2:	6060      	str	r0, [r4, #4]
 80113d4:	6863      	ldr	r3, [r4, #4]
 80113d6:	6123      	str	r3, [r4, #16]
 80113d8:	2300      	movs	r3, #0
 80113da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80113de:	e7aa      	b.n	8011336 <_printf_i+0x146>
 80113e0:	6923      	ldr	r3, [r4, #16]
 80113e2:	4632      	mov	r2, r6
 80113e4:	4649      	mov	r1, r9
 80113e6:	4640      	mov	r0, r8
 80113e8:	47d0      	blx	sl
 80113ea:	3001      	adds	r0, #1
 80113ec:	d0ad      	beq.n	801134a <_printf_i+0x15a>
 80113ee:	6823      	ldr	r3, [r4, #0]
 80113f0:	079b      	lsls	r3, r3, #30
 80113f2:	d413      	bmi.n	801141c <_printf_i+0x22c>
 80113f4:	68e0      	ldr	r0, [r4, #12]
 80113f6:	9b03      	ldr	r3, [sp, #12]
 80113f8:	4298      	cmp	r0, r3
 80113fa:	bfb8      	it	lt
 80113fc:	4618      	movlt	r0, r3
 80113fe:	e7a6      	b.n	801134e <_printf_i+0x15e>
 8011400:	2301      	movs	r3, #1
 8011402:	4632      	mov	r2, r6
 8011404:	4649      	mov	r1, r9
 8011406:	4640      	mov	r0, r8
 8011408:	47d0      	blx	sl
 801140a:	3001      	adds	r0, #1
 801140c:	d09d      	beq.n	801134a <_printf_i+0x15a>
 801140e:	3501      	adds	r5, #1
 8011410:	68e3      	ldr	r3, [r4, #12]
 8011412:	9903      	ldr	r1, [sp, #12]
 8011414:	1a5b      	subs	r3, r3, r1
 8011416:	42ab      	cmp	r3, r5
 8011418:	dcf2      	bgt.n	8011400 <_printf_i+0x210>
 801141a:	e7eb      	b.n	80113f4 <_printf_i+0x204>
 801141c:	2500      	movs	r5, #0
 801141e:	f104 0619 	add.w	r6, r4, #25
 8011422:	e7f5      	b.n	8011410 <_printf_i+0x220>
 8011424:	08017328 	.word	0x08017328
 8011428:	08017339 	.word	0x08017339

0801142c <_scanf_float>:
 801142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011430:	b087      	sub	sp, #28
 8011432:	4691      	mov	r9, r2
 8011434:	9303      	str	r3, [sp, #12]
 8011436:	688b      	ldr	r3, [r1, #8]
 8011438:	1e5a      	subs	r2, r3, #1
 801143a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801143e:	bf81      	itttt	hi
 8011440:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011444:	eb03 0b05 	addhi.w	fp, r3, r5
 8011448:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801144c:	608b      	strhi	r3, [r1, #8]
 801144e:	680b      	ldr	r3, [r1, #0]
 8011450:	460a      	mov	r2, r1
 8011452:	f04f 0500 	mov.w	r5, #0
 8011456:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801145a:	f842 3b1c 	str.w	r3, [r2], #28
 801145e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011462:	4680      	mov	r8, r0
 8011464:	460c      	mov	r4, r1
 8011466:	bf98      	it	ls
 8011468:	f04f 0b00 	movls.w	fp, #0
 801146c:	9201      	str	r2, [sp, #4]
 801146e:	4616      	mov	r6, r2
 8011470:	46aa      	mov	sl, r5
 8011472:	462f      	mov	r7, r5
 8011474:	9502      	str	r5, [sp, #8]
 8011476:	68a2      	ldr	r2, [r4, #8]
 8011478:	b15a      	cbz	r2, 8011492 <_scanf_float+0x66>
 801147a:	f8d9 3000 	ldr.w	r3, [r9]
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	2b4e      	cmp	r3, #78	@ 0x4e
 8011482:	d863      	bhi.n	801154c <_scanf_float+0x120>
 8011484:	2b40      	cmp	r3, #64	@ 0x40
 8011486:	d83b      	bhi.n	8011500 <_scanf_float+0xd4>
 8011488:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801148c:	b2c8      	uxtb	r0, r1
 801148e:	280e      	cmp	r0, #14
 8011490:	d939      	bls.n	8011506 <_scanf_float+0xda>
 8011492:	b11f      	cbz	r7, 801149c <_scanf_float+0x70>
 8011494:	6823      	ldr	r3, [r4, #0]
 8011496:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801149a:	6023      	str	r3, [r4, #0]
 801149c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80114a0:	f1ba 0f01 	cmp.w	sl, #1
 80114a4:	f200 8114 	bhi.w	80116d0 <_scanf_float+0x2a4>
 80114a8:	9b01      	ldr	r3, [sp, #4]
 80114aa:	429e      	cmp	r6, r3
 80114ac:	f200 8105 	bhi.w	80116ba <_scanf_float+0x28e>
 80114b0:	2001      	movs	r0, #1
 80114b2:	b007      	add	sp, #28
 80114b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80114bc:	2a0d      	cmp	r2, #13
 80114be:	d8e8      	bhi.n	8011492 <_scanf_float+0x66>
 80114c0:	a101      	add	r1, pc, #4	@ (adr r1, 80114c8 <_scanf_float+0x9c>)
 80114c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80114c6:	bf00      	nop
 80114c8:	08011611 	.word	0x08011611
 80114cc:	08011493 	.word	0x08011493
 80114d0:	08011493 	.word	0x08011493
 80114d4:	08011493 	.word	0x08011493
 80114d8:	0801166d 	.word	0x0801166d
 80114dc:	08011647 	.word	0x08011647
 80114e0:	08011493 	.word	0x08011493
 80114e4:	08011493 	.word	0x08011493
 80114e8:	0801161f 	.word	0x0801161f
 80114ec:	08011493 	.word	0x08011493
 80114f0:	08011493 	.word	0x08011493
 80114f4:	08011493 	.word	0x08011493
 80114f8:	08011493 	.word	0x08011493
 80114fc:	080115db 	.word	0x080115db
 8011500:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8011504:	e7da      	b.n	80114bc <_scanf_float+0x90>
 8011506:	290e      	cmp	r1, #14
 8011508:	d8c3      	bhi.n	8011492 <_scanf_float+0x66>
 801150a:	a001      	add	r0, pc, #4	@ (adr r0, 8011510 <_scanf_float+0xe4>)
 801150c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011510:	080115cb 	.word	0x080115cb
 8011514:	08011493 	.word	0x08011493
 8011518:	080115cb 	.word	0x080115cb
 801151c:	0801165b 	.word	0x0801165b
 8011520:	08011493 	.word	0x08011493
 8011524:	0801156d 	.word	0x0801156d
 8011528:	080115b1 	.word	0x080115b1
 801152c:	080115b1 	.word	0x080115b1
 8011530:	080115b1 	.word	0x080115b1
 8011534:	080115b1 	.word	0x080115b1
 8011538:	080115b1 	.word	0x080115b1
 801153c:	080115b1 	.word	0x080115b1
 8011540:	080115b1 	.word	0x080115b1
 8011544:	080115b1 	.word	0x080115b1
 8011548:	080115b1 	.word	0x080115b1
 801154c:	2b6e      	cmp	r3, #110	@ 0x6e
 801154e:	d809      	bhi.n	8011564 <_scanf_float+0x138>
 8011550:	2b60      	cmp	r3, #96	@ 0x60
 8011552:	d8b1      	bhi.n	80114b8 <_scanf_float+0x8c>
 8011554:	2b54      	cmp	r3, #84	@ 0x54
 8011556:	d07b      	beq.n	8011650 <_scanf_float+0x224>
 8011558:	2b59      	cmp	r3, #89	@ 0x59
 801155a:	d19a      	bne.n	8011492 <_scanf_float+0x66>
 801155c:	2d07      	cmp	r5, #7
 801155e:	d198      	bne.n	8011492 <_scanf_float+0x66>
 8011560:	2508      	movs	r5, #8
 8011562:	e02f      	b.n	80115c4 <_scanf_float+0x198>
 8011564:	2b74      	cmp	r3, #116	@ 0x74
 8011566:	d073      	beq.n	8011650 <_scanf_float+0x224>
 8011568:	2b79      	cmp	r3, #121	@ 0x79
 801156a:	e7f6      	b.n	801155a <_scanf_float+0x12e>
 801156c:	6821      	ldr	r1, [r4, #0]
 801156e:	05c8      	lsls	r0, r1, #23
 8011570:	d51e      	bpl.n	80115b0 <_scanf_float+0x184>
 8011572:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011576:	6021      	str	r1, [r4, #0]
 8011578:	3701      	adds	r7, #1
 801157a:	f1bb 0f00 	cmp.w	fp, #0
 801157e:	d003      	beq.n	8011588 <_scanf_float+0x15c>
 8011580:	3201      	adds	r2, #1
 8011582:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8011586:	60a2      	str	r2, [r4, #8]
 8011588:	68a3      	ldr	r3, [r4, #8]
 801158a:	3b01      	subs	r3, #1
 801158c:	60a3      	str	r3, [r4, #8]
 801158e:	6923      	ldr	r3, [r4, #16]
 8011590:	3301      	adds	r3, #1
 8011592:	6123      	str	r3, [r4, #16]
 8011594:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011598:	3b01      	subs	r3, #1
 801159a:	2b00      	cmp	r3, #0
 801159c:	f8c9 3004 	str.w	r3, [r9, #4]
 80115a0:	f340 8082 	ble.w	80116a8 <_scanf_float+0x27c>
 80115a4:	f8d9 3000 	ldr.w	r3, [r9]
 80115a8:	3301      	adds	r3, #1
 80115aa:	f8c9 3000 	str.w	r3, [r9]
 80115ae:	e762      	b.n	8011476 <_scanf_float+0x4a>
 80115b0:	eb1a 0105 	adds.w	r1, sl, r5
 80115b4:	f47f af6d 	bne.w	8011492 <_scanf_float+0x66>
 80115b8:	6822      	ldr	r2, [r4, #0]
 80115ba:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80115be:	6022      	str	r2, [r4, #0]
 80115c0:	460d      	mov	r5, r1
 80115c2:	468a      	mov	sl, r1
 80115c4:	f806 3b01 	strb.w	r3, [r6], #1
 80115c8:	e7de      	b.n	8011588 <_scanf_float+0x15c>
 80115ca:	6822      	ldr	r2, [r4, #0]
 80115cc:	0610      	lsls	r0, r2, #24
 80115ce:	f57f af60 	bpl.w	8011492 <_scanf_float+0x66>
 80115d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80115d6:	6022      	str	r2, [r4, #0]
 80115d8:	e7f4      	b.n	80115c4 <_scanf_float+0x198>
 80115da:	f1ba 0f00 	cmp.w	sl, #0
 80115de:	d10c      	bne.n	80115fa <_scanf_float+0x1ce>
 80115e0:	b977      	cbnz	r7, 8011600 <_scanf_float+0x1d4>
 80115e2:	6822      	ldr	r2, [r4, #0]
 80115e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80115e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80115ec:	d108      	bne.n	8011600 <_scanf_float+0x1d4>
 80115ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80115f2:	6022      	str	r2, [r4, #0]
 80115f4:	f04f 0a01 	mov.w	sl, #1
 80115f8:	e7e4      	b.n	80115c4 <_scanf_float+0x198>
 80115fa:	f1ba 0f02 	cmp.w	sl, #2
 80115fe:	d050      	beq.n	80116a2 <_scanf_float+0x276>
 8011600:	2d01      	cmp	r5, #1
 8011602:	d002      	beq.n	801160a <_scanf_float+0x1de>
 8011604:	2d04      	cmp	r5, #4
 8011606:	f47f af44 	bne.w	8011492 <_scanf_float+0x66>
 801160a:	3501      	adds	r5, #1
 801160c:	b2ed      	uxtb	r5, r5
 801160e:	e7d9      	b.n	80115c4 <_scanf_float+0x198>
 8011610:	f1ba 0f01 	cmp.w	sl, #1
 8011614:	f47f af3d 	bne.w	8011492 <_scanf_float+0x66>
 8011618:	f04f 0a02 	mov.w	sl, #2
 801161c:	e7d2      	b.n	80115c4 <_scanf_float+0x198>
 801161e:	b975      	cbnz	r5, 801163e <_scanf_float+0x212>
 8011620:	2f00      	cmp	r7, #0
 8011622:	f47f af37 	bne.w	8011494 <_scanf_float+0x68>
 8011626:	6822      	ldr	r2, [r4, #0]
 8011628:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801162c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011630:	f040 80fc 	bne.w	801182c <_scanf_float+0x400>
 8011634:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011638:	6022      	str	r2, [r4, #0]
 801163a:	2501      	movs	r5, #1
 801163c:	e7c2      	b.n	80115c4 <_scanf_float+0x198>
 801163e:	2d03      	cmp	r5, #3
 8011640:	d0e3      	beq.n	801160a <_scanf_float+0x1de>
 8011642:	2d05      	cmp	r5, #5
 8011644:	e7df      	b.n	8011606 <_scanf_float+0x1da>
 8011646:	2d02      	cmp	r5, #2
 8011648:	f47f af23 	bne.w	8011492 <_scanf_float+0x66>
 801164c:	2503      	movs	r5, #3
 801164e:	e7b9      	b.n	80115c4 <_scanf_float+0x198>
 8011650:	2d06      	cmp	r5, #6
 8011652:	f47f af1e 	bne.w	8011492 <_scanf_float+0x66>
 8011656:	2507      	movs	r5, #7
 8011658:	e7b4      	b.n	80115c4 <_scanf_float+0x198>
 801165a:	6822      	ldr	r2, [r4, #0]
 801165c:	0591      	lsls	r1, r2, #22
 801165e:	f57f af18 	bpl.w	8011492 <_scanf_float+0x66>
 8011662:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011666:	6022      	str	r2, [r4, #0]
 8011668:	9702      	str	r7, [sp, #8]
 801166a:	e7ab      	b.n	80115c4 <_scanf_float+0x198>
 801166c:	6822      	ldr	r2, [r4, #0]
 801166e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011672:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011676:	d005      	beq.n	8011684 <_scanf_float+0x258>
 8011678:	0550      	lsls	r0, r2, #21
 801167a:	f57f af0a 	bpl.w	8011492 <_scanf_float+0x66>
 801167e:	2f00      	cmp	r7, #0
 8011680:	f000 80d4 	beq.w	801182c <_scanf_float+0x400>
 8011684:	0591      	lsls	r1, r2, #22
 8011686:	bf58      	it	pl
 8011688:	9902      	ldrpl	r1, [sp, #8]
 801168a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801168e:	bf58      	it	pl
 8011690:	1a79      	subpl	r1, r7, r1
 8011692:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011696:	bf58      	it	pl
 8011698:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801169c:	6022      	str	r2, [r4, #0]
 801169e:	2700      	movs	r7, #0
 80116a0:	e790      	b.n	80115c4 <_scanf_float+0x198>
 80116a2:	f04f 0a03 	mov.w	sl, #3
 80116a6:	e78d      	b.n	80115c4 <_scanf_float+0x198>
 80116a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80116ac:	4649      	mov	r1, r9
 80116ae:	4640      	mov	r0, r8
 80116b0:	4798      	blx	r3
 80116b2:	2800      	cmp	r0, #0
 80116b4:	f43f aedf 	beq.w	8011476 <_scanf_float+0x4a>
 80116b8:	e6eb      	b.n	8011492 <_scanf_float+0x66>
 80116ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80116be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80116c2:	464a      	mov	r2, r9
 80116c4:	4640      	mov	r0, r8
 80116c6:	4798      	blx	r3
 80116c8:	6923      	ldr	r3, [r4, #16]
 80116ca:	3b01      	subs	r3, #1
 80116cc:	6123      	str	r3, [r4, #16]
 80116ce:	e6eb      	b.n	80114a8 <_scanf_float+0x7c>
 80116d0:	1e6b      	subs	r3, r5, #1
 80116d2:	2b06      	cmp	r3, #6
 80116d4:	d824      	bhi.n	8011720 <_scanf_float+0x2f4>
 80116d6:	2d02      	cmp	r5, #2
 80116d8:	d836      	bhi.n	8011748 <_scanf_float+0x31c>
 80116da:	9b01      	ldr	r3, [sp, #4]
 80116dc:	429e      	cmp	r6, r3
 80116de:	f67f aee7 	bls.w	80114b0 <_scanf_float+0x84>
 80116e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80116e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80116ea:	464a      	mov	r2, r9
 80116ec:	4640      	mov	r0, r8
 80116ee:	4798      	blx	r3
 80116f0:	6923      	ldr	r3, [r4, #16]
 80116f2:	3b01      	subs	r3, #1
 80116f4:	6123      	str	r3, [r4, #16]
 80116f6:	e7f0      	b.n	80116da <_scanf_float+0x2ae>
 80116f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80116fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011700:	464a      	mov	r2, r9
 8011702:	4640      	mov	r0, r8
 8011704:	4798      	blx	r3
 8011706:	6923      	ldr	r3, [r4, #16]
 8011708:	3b01      	subs	r3, #1
 801170a:	6123      	str	r3, [r4, #16]
 801170c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011710:	fa5f fa8a 	uxtb.w	sl, sl
 8011714:	f1ba 0f02 	cmp.w	sl, #2
 8011718:	d1ee      	bne.n	80116f8 <_scanf_float+0x2cc>
 801171a:	3d03      	subs	r5, #3
 801171c:	b2ed      	uxtb	r5, r5
 801171e:	1b76      	subs	r6, r6, r5
 8011720:	6823      	ldr	r3, [r4, #0]
 8011722:	05da      	lsls	r2, r3, #23
 8011724:	d530      	bpl.n	8011788 <_scanf_float+0x35c>
 8011726:	055b      	lsls	r3, r3, #21
 8011728:	d511      	bpl.n	801174e <_scanf_float+0x322>
 801172a:	9b01      	ldr	r3, [sp, #4]
 801172c:	429e      	cmp	r6, r3
 801172e:	f67f aebf 	bls.w	80114b0 <_scanf_float+0x84>
 8011732:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011736:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801173a:	464a      	mov	r2, r9
 801173c:	4640      	mov	r0, r8
 801173e:	4798      	blx	r3
 8011740:	6923      	ldr	r3, [r4, #16]
 8011742:	3b01      	subs	r3, #1
 8011744:	6123      	str	r3, [r4, #16]
 8011746:	e7f0      	b.n	801172a <_scanf_float+0x2fe>
 8011748:	46aa      	mov	sl, r5
 801174a:	46b3      	mov	fp, r6
 801174c:	e7de      	b.n	801170c <_scanf_float+0x2e0>
 801174e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011752:	6923      	ldr	r3, [r4, #16]
 8011754:	2965      	cmp	r1, #101	@ 0x65
 8011756:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801175a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 801175e:	6123      	str	r3, [r4, #16]
 8011760:	d00c      	beq.n	801177c <_scanf_float+0x350>
 8011762:	2945      	cmp	r1, #69	@ 0x45
 8011764:	d00a      	beq.n	801177c <_scanf_float+0x350>
 8011766:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801176a:	464a      	mov	r2, r9
 801176c:	4640      	mov	r0, r8
 801176e:	4798      	blx	r3
 8011770:	6923      	ldr	r3, [r4, #16]
 8011772:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011776:	3b01      	subs	r3, #1
 8011778:	1eb5      	subs	r5, r6, #2
 801177a:	6123      	str	r3, [r4, #16]
 801177c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011780:	464a      	mov	r2, r9
 8011782:	4640      	mov	r0, r8
 8011784:	4798      	blx	r3
 8011786:	462e      	mov	r6, r5
 8011788:	6822      	ldr	r2, [r4, #0]
 801178a:	f012 0210 	ands.w	r2, r2, #16
 801178e:	d001      	beq.n	8011794 <_scanf_float+0x368>
 8011790:	2000      	movs	r0, #0
 8011792:	e68e      	b.n	80114b2 <_scanf_float+0x86>
 8011794:	7032      	strb	r2, [r6, #0]
 8011796:	6823      	ldr	r3, [r4, #0]
 8011798:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801179c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80117a0:	d123      	bne.n	80117ea <_scanf_float+0x3be>
 80117a2:	9b02      	ldr	r3, [sp, #8]
 80117a4:	429f      	cmp	r7, r3
 80117a6:	d00a      	beq.n	80117be <_scanf_float+0x392>
 80117a8:	1bda      	subs	r2, r3, r7
 80117aa:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80117ae:	429e      	cmp	r6, r3
 80117b0:	bf28      	it	cs
 80117b2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80117b6:	491e      	ldr	r1, [pc, #120]	@ (8011830 <_scanf_float+0x404>)
 80117b8:	4630      	mov	r0, r6
 80117ba:	f000 f977 	bl	8011aac <siprintf>
 80117be:	9901      	ldr	r1, [sp, #4]
 80117c0:	2200      	movs	r2, #0
 80117c2:	4640      	mov	r0, r8
 80117c4:	f002 fcaa 	bl	801411c <_strtod_r>
 80117c8:	9b03      	ldr	r3, [sp, #12]
 80117ca:	6821      	ldr	r1, [r4, #0]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	f011 0f02 	tst.w	r1, #2
 80117d2:	f103 0204 	add.w	r2, r3, #4
 80117d6:	d015      	beq.n	8011804 <_scanf_float+0x3d8>
 80117d8:	9903      	ldr	r1, [sp, #12]
 80117da:	600a      	str	r2, [r1, #0]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	ed83 0b00 	vstr	d0, [r3]
 80117e2:	68e3      	ldr	r3, [r4, #12]
 80117e4:	3301      	adds	r3, #1
 80117e6:	60e3      	str	r3, [r4, #12]
 80117e8:	e7d2      	b.n	8011790 <_scanf_float+0x364>
 80117ea:	9b04      	ldr	r3, [sp, #16]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d0e6      	beq.n	80117be <_scanf_float+0x392>
 80117f0:	9905      	ldr	r1, [sp, #20]
 80117f2:	230a      	movs	r3, #10
 80117f4:	3101      	adds	r1, #1
 80117f6:	4640      	mov	r0, r8
 80117f8:	f002 fd10 	bl	801421c <_strtol_r>
 80117fc:	9b04      	ldr	r3, [sp, #16]
 80117fe:	9e05      	ldr	r6, [sp, #20]
 8011800:	1ac2      	subs	r2, r0, r3
 8011802:	e7d2      	b.n	80117aa <_scanf_float+0x37e>
 8011804:	f011 0f04 	tst.w	r1, #4
 8011808:	9903      	ldr	r1, [sp, #12]
 801180a:	600a      	str	r2, [r1, #0]
 801180c:	d1e6      	bne.n	80117dc <_scanf_float+0x3b0>
 801180e:	eeb4 0b40 	vcmp.f64	d0, d0
 8011812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011816:	681d      	ldr	r5, [r3, #0]
 8011818:	d705      	bvc.n	8011826 <_scanf_float+0x3fa>
 801181a:	4806      	ldr	r0, [pc, #24]	@ (8011834 <_scanf_float+0x408>)
 801181c:	f000 fb36 	bl	8011e8c <nanf>
 8011820:	ed85 0a00 	vstr	s0, [r5]
 8011824:	e7dd      	b.n	80117e2 <_scanf_float+0x3b6>
 8011826:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801182a:	e7f9      	b.n	8011820 <_scanf_float+0x3f4>
 801182c:	2700      	movs	r7, #0
 801182e:	e635      	b.n	801149c <_scanf_float+0x70>
 8011830:	0801734a 	.word	0x0801734a
 8011834:	080174a6 	.word	0x080174a6

08011838 <std>:
 8011838:	2300      	movs	r3, #0
 801183a:	b510      	push	{r4, lr}
 801183c:	4604      	mov	r4, r0
 801183e:	e9c0 3300 	strd	r3, r3, [r0]
 8011842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011846:	6083      	str	r3, [r0, #8]
 8011848:	8181      	strh	r1, [r0, #12]
 801184a:	6643      	str	r3, [r0, #100]	@ 0x64
 801184c:	81c2      	strh	r2, [r0, #14]
 801184e:	6183      	str	r3, [r0, #24]
 8011850:	4619      	mov	r1, r3
 8011852:	2208      	movs	r2, #8
 8011854:	305c      	adds	r0, #92	@ 0x5c
 8011856:	f000 fa6b 	bl	8011d30 <memset>
 801185a:	4b0d      	ldr	r3, [pc, #52]	@ (8011890 <std+0x58>)
 801185c:	6263      	str	r3, [r4, #36]	@ 0x24
 801185e:	4b0d      	ldr	r3, [pc, #52]	@ (8011894 <std+0x5c>)
 8011860:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011862:	4b0d      	ldr	r3, [pc, #52]	@ (8011898 <std+0x60>)
 8011864:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011866:	4b0d      	ldr	r3, [pc, #52]	@ (801189c <std+0x64>)
 8011868:	6323      	str	r3, [r4, #48]	@ 0x30
 801186a:	4b0d      	ldr	r3, [pc, #52]	@ (80118a0 <std+0x68>)
 801186c:	6224      	str	r4, [r4, #32]
 801186e:	429c      	cmp	r4, r3
 8011870:	d006      	beq.n	8011880 <std+0x48>
 8011872:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011876:	4294      	cmp	r4, r2
 8011878:	d002      	beq.n	8011880 <std+0x48>
 801187a:	33d0      	adds	r3, #208	@ 0xd0
 801187c:	429c      	cmp	r4, r3
 801187e:	d105      	bne.n	801188c <std+0x54>
 8011880:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011888:	f000 baee 	b.w	8011e68 <__retarget_lock_init_recursive>
 801188c:	bd10      	pop	{r4, pc}
 801188e:	bf00      	nop
 8011890:	08011b49 	.word	0x08011b49
 8011894:	08011b6f 	.word	0x08011b6f
 8011898:	08011ba7 	.word	0x08011ba7
 801189c:	08011bcb 	.word	0x08011bcb
 80118a0:	24000744 	.word	0x24000744

080118a4 <stdio_exit_handler>:
 80118a4:	4a02      	ldr	r2, [pc, #8]	@ (80118b0 <stdio_exit_handler+0xc>)
 80118a6:	4903      	ldr	r1, [pc, #12]	@ (80118b4 <stdio_exit_handler+0x10>)
 80118a8:	4803      	ldr	r0, [pc, #12]	@ (80118b8 <stdio_exit_handler+0x14>)
 80118aa:	f000 b869 	b.w	8011980 <_fwalk_sglue>
 80118ae:	bf00      	nop
 80118b0:	2400001c 	.word	0x2400001c
 80118b4:	08014e99 	.word	0x08014e99
 80118b8:	2400002c 	.word	0x2400002c

080118bc <cleanup_stdio>:
 80118bc:	6841      	ldr	r1, [r0, #4]
 80118be:	4b0c      	ldr	r3, [pc, #48]	@ (80118f0 <cleanup_stdio+0x34>)
 80118c0:	4299      	cmp	r1, r3
 80118c2:	b510      	push	{r4, lr}
 80118c4:	4604      	mov	r4, r0
 80118c6:	d001      	beq.n	80118cc <cleanup_stdio+0x10>
 80118c8:	f003 fae6 	bl	8014e98 <_fflush_r>
 80118cc:	68a1      	ldr	r1, [r4, #8]
 80118ce:	4b09      	ldr	r3, [pc, #36]	@ (80118f4 <cleanup_stdio+0x38>)
 80118d0:	4299      	cmp	r1, r3
 80118d2:	d002      	beq.n	80118da <cleanup_stdio+0x1e>
 80118d4:	4620      	mov	r0, r4
 80118d6:	f003 fadf 	bl	8014e98 <_fflush_r>
 80118da:	68e1      	ldr	r1, [r4, #12]
 80118dc:	4b06      	ldr	r3, [pc, #24]	@ (80118f8 <cleanup_stdio+0x3c>)
 80118de:	4299      	cmp	r1, r3
 80118e0:	d004      	beq.n	80118ec <cleanup_stdio+0x30>
 80118e2:	4620      	mov	r0, r4
 80118e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118e8:	f003 bad6 	b.w	8014e98 <_fflush_r>
 80118ec:	bd10      	pop	{r4, pc}
 80118ee:	bf00      	nop
 80118f0:	24000744 	.word	0x24000744
 80118f4:	240007ac 	.word	0x240007ac
 80118f8:	24000814 	.word	0x24000814

080118fc <global_stdio_init.part.0>:
 80118fc:	b510      	push	{r4, lr}
 80118fe:	4b0b      	ldr	r3, [pc, #44]	@ (801192c <global_stdio_init.part.0+0x30>)
 8011900:	4c0b      	ldr	r4, [pc, #44]	@ (8011930 <global_stdio_init.part.0+0x34>)
 8011902:	4a0c      	ldr	r2, [pc, #48]	@ (8011934 <global_stdio_init.part.0+0x38>)
 8011904:	601a      	str	r2, [r3, #0]
 8011906:	4620      	mov	r0, r4
 8011908:	2200      	movs	r2, #0
 801190a:	2104      	movs	r1, #4
 801190c:	f7ff ff94 	bl	8011838 <std>
 8011910:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011914:	2201      	movs	r2, #1
 8011916:	2109      	movs	r1, #9
 8011918:	f7ff ff8e 	bl	8011838 <std>
 801191c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011920:	2202      	movs	r2, #2
 8011922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011926:	2112      	movs	r1, #18
 8011928:	f7ff bf86 	b.w	8011838 <std>
 801192c:	2400087c 	.word	0x2400087c
 8011930:	24000744 	.word	0x24000744
 8011934:	080118a5 	.word	0x080118a5

08011938 <__sfp_lock_acquire>:
 8011938:	4801      	ldr	r0, [pc, #4]	@ (8011940 <__sfp_lock_acquire+0x8>)
 801193a:	f000 ba96 	b.w	8011e6a <__retarget_lock_acquire_recursive>
 801193e:	bf00      	nop
 8011940:	24000885 	.word	0x24000885

08011944 <__sfp_lock_release>:
 8011944:	4801      	ldr	r0, [pc, #4]	@ (801194c <__sfp_lock_release+0x8>)
 8011946:	f000 ba91 	b.w	8011e6c <__retarget_lock_release_recursive>
 801194a:	bf00      	nop
 801194c:	24000885 	.word	0x24000885

08011950 <__sinit>:
 8011950:	b510      	push	{r4, lr}
 8011952:	4604      	mov	r4, r0
 8011954:	f7ff fff0 	bl	8011938 <__sfp_lock_acquire>
 8011958:	6a23      	ldr	r3, [r4, #32]
 801195a:	b11b      	cbz	r3, 8011964 <__sinit+0x14>
 801195c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011960:	f7ff bff0 	b.w	8011944 <__sfp_lock_release>
 8011964:	4b04      	ldr	r3, [pc, #16]	@ (8011978 <__sinit+0x28>)
 8011966:	6223      	str	r3, [r4, #32]
 8011968:	4b04      	ldr	r3, [pc, #16]	@ (801197c <__sinit+0x2c>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d1f5      	bne.n	801195c <__sinit+0xc>
 8011970:	f7ff ffc4 	bl	80118fc <global_stdio_init.part.0>
 8011974:	e7f2      	b.n	801195c <__sinit+0xc>
 8011976:	bf00      	nop
 8011978:	080118bd 	.word	0x080118bd
 801197c:	2400087c 	.word	0x2400087c

08011980 <_fwalk_sglue>:
 8011980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011984:	4607      	mov	r7, r0
 8011986:	4688      	mov	r8, r1
 8011988:	4614      	mov	r4, r2
 801198a:	2600      	movs	r6, #0
 801198c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011990:	f1b9 0901 	subs.w	r9, r9, #1
 8011994:	d505      	bpl.n	80119a2 <_fwalk_sglue+0x22>
 8011996:	6824      	ldr	r4, [r4, #0]
 8011998:	2c00      	cmp	r4, #0
 801199a:	d1f7      	bne.n	801198c <_fwalk_sglue+0xc>
 801199c:	4630      	mov	r0, r6
 801199e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119a2:	89ab      	ldrh	r3, [r5, #12]
 80119a4:	2b01      	cmp	r3, #1
 80119a6:	d907      	bls.n	80119b8 <_fwalk_sglue+0x38>
 80119a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80119ac:	3301      	adds	r3, #1
 80119ae:	d003      	beq.n	80119b8 <_fwalk_sglue+0x38>
 80119b0:	4629      	mov	r1, r5
 80119b2:	4638      	mov	r0, r7
 80119b4:	47c0      	blx	r8
 80119b6:	4306      	orrs	r6, r0
 80119b8:	3568      	adds	r5, #104	@ 0x68
 80119ba:	e7e9      	b.n	8011990 <_fwalk_sglue+0x10>

080119bc <iprintf>:
 80119bc:	b40f      	push	{r0, r1, r2, r3}
 80119be:	b507      	push	{r0, r1, r2, lr}
 80119c0:	4906      	ldr	r1, [pc, #24]	@ (80119dc <iprintf+0x20>)
 80119c2:	ab04      	add	r3, sp, #16
 80119c4:	6808      	ldr	r0, [r1, #0]
 80119c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80119ca:	6881      	ldr	r1, [r0, #8]
 80119cc:	9301      	str	r3, [sp, #4]
 80119ce:	f002 ff79 	bl	80148c4 <_vfiprintf_r>
 80119d2:	b003      	add	sp, #12
 80119d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80119d8:	b004      	add	sp, #16
 80119da:	4770      	bx	lr
 80119dc:	24000028 	.word	0x24000028

080119e0 <putchar>:
 80119e0:	4b02      	ldr	r3, [pc, #8]	@ (80119ec <putchar+0xc>)
 80119e2:	4601      	mov	r1, r0
 80119e4:	6818      	ldr	r0, [r3, #0]
 80119e6:	6882      	ldr	r2, [r0, #8]
 80119e8:	f003 bae0 	b.w	8014fac <_putc_r>
 80119ec:	24000028 	.word	0x24000028

080119f0 <_puts_r>:
 80119f0:	6a03      	ldr	r3, [r0, #32]
 80119f2:	b570      	push	{r4, r5, r6, lr}
 80119f4:	6884      	ldr	r4, [r0, #8]
 80119f6:	4605      	mov	r5, r0
 80119f8:	460e      	mov	r6, r1
 80119fa:	b90b      	cbnz	r3, 8011a00 <_puts_r+0x10>
 80119fc:	f7ff ffa8 	bl	8011950 <__sinit>
 8011a00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011a02:	07db      	lsls	r3, r3, #31
 8011a04:	d405      	bmi.n	8011a12 <_puts_r+0x22>
 8011a06:	89a3      	ldrh	r3, [r4, #12]
 8011a08:	0598      	lsls	r0, r3, #22
 8011a0a:	d402      	bmi.n	8011a12 <_puts_r+0x22>
 8011a0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a0e:	f000 fa2c 	bl	8011e6a <__retarget_lock_acquire_recursive>
 8011a12:	89a3      	ldrh	r3, [r4, #12]
 8011a14:	0719      	lsls	r1, r3, #28
 8011a16:	d502      	bpl.n	8011a1e <_puts_r+0x2e>
 8011a18:	6923      	ldr	r3, [r4, #16]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d135      	bne.n	8011a8a <_puts_r+0x9a>
 8011a1e:	4621      	mov	r1, r4
 8011a20:	4628      	mov	r0, r5
 8011a22:	f000 f915 	bl	8011c50 <__swsetup_r>
 8011a26:	b380      	cbz	r0, 8011a8a <_puts_r+0x9a>
 8011a28:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8011a2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011a2e:	07da      	lsls	r2, r3, #31
 8011a30:	d405      	bmi.n	8011a3e <_puts_r+0x4e>
 8011a32:	89a3      	ldrh	r3, [r4, #12]
 8011a34:	059b      	lsls	r3, r3, #22
 8011a36:	d402      	bmi.n	8011a3e <_puts_r+0x4e>
 8011a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a3a:	f000 fa17 	bl	8011e6c <__retarget_lock_release_recursive>
 8011a3e:	4628      	mov	r0, r5
 8011a40:	bd70      	pop	{r4, r5, r6, pc}
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	da04      	bge.n	8011a50 <_puts_r+0x60>
 8011a46:	69a2      	ldr	r2, [r4, #24]
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	dc17      	bgt.n	8011a7c <_puts_r+0x8c>
 8011a4c:	290a      	cmp	r1, #10
 8011a4e:	d015      	beq.n	8011a7c <_puts_r+0x8c>
 8011a50:	6823      	ldr	r3, [r4, #0]
 8011a52:	1c5a      	adds	r2, r3, #1
 8011a54:	6022      	str	r2, [r4, #0]
 8011a56:	7019      	strb	r1, [r3, #0]
 8011a58:	68a3      	ldr	r3, [r4, #8]
 8011a5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011a5e:	3b01      	subs	r3, #1
 8011a60:	60a3      	str	r3, [r4, #8]
 8011a62:	2900      	cmp	r1, #0
 8011a64:	d1ed      	bne.n	8011a42 <_puts_r+0x52>
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	da11      	bge.n	8011a8e <_puts_r+0x9e>
 8011a6a:	4622      	mov	r2, r4
 8011a6c:	210a      	movs	r1, #10
 8011a6e:	4628      	mov	r0, r5
 8011a70:	f000 f8af 	bl	8011bd2 <__swbuf_r>
 8011a74:	3001      	adds	r0, #1
 8011a76:	d0d7      	beq.n	8011a28 <_puts_r+0x38>
 8011a78:	250a      	movs	r5, #10
 8011a7a:	e7d7      	b.n	8011a2c <_puts_r+0x3c>
 8011a7c:	4622      	mov	r2, r4
 8011a7e:	4628      	mov	r0, r5
 8011a80:	f000 f8a7 	bl	8011bd2 <__swbuf_r>
 8011a84:	3001      	adds	r0, #1
 8011a86:	d1e7      	bne.n	8011a58 <_puts_r+0x68>
 8011a88:	e7ce      	b.n	8011a28 <_puts_r+0x38>
 8011a8a:	3e01      	subs	r6, #1
 8011a8c:	e7e4      	b.n	8011a58 <_puts_r+0x68>
 8011a8e:	6823      	ldr	r3, [r4, #0]
 8011a90:	1c5a      	adds	r2, r3, #1
 8011a92:	6022      	str	r2, [r4, #0]
 8011a94:	220a      	movs	r2, #10
 8011a96:	701a      	strb	r2, [r3, #0]
 8011a98:	e7ee      	b.n	8011a78 <_puts_r+0x88>
	...

08011a9c <puts>:
 8011a9c:	4b02      	ldr	r3, [pc, #8]	@ (8011aa8 <puts+0xc>)
 8011a9e:	4601      	mov	r1, r0
 8011aa0:	6818      	ldr	r0, [r3, #0]
 8011aa2:	f7ff bfa5 	b.w	80119f0 <_puts_r>
 8011aa6:	bf00      	nop
 8011aa8:	24000028 	.word	0x24000028

08011aac <siprintf>:
 8011aac:	b40e      	push	{r1, r2, r3}
 8011aae:	b510      	push	{r4, lr}
 8011ab0:	b09d      	sub	sp, #116	@ 0x74
 8011ab2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011ab4:	9002      	str	r0, [sp, #8]
 8011ab6:	9006      	str	r0, [sp, #24]
 8011ab8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011abc:	480a      	ldr	r0, [pc, #40]	@ (8011ae8 <siprintf+0x3c>)
 8011abe:	9107      	str	r1, [sp, #28]
 8011ac0:	9104      	str	r1, [sp, #16]
 8011ac2:	490a      	ldr	r1, [pc, #40]	@ (8011aec <siprintf+0x40>)
 8011ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ac8:	9105      	str	r1, [sp, #20]
 8011aca:	2400      	movs	r4, #0
 8011acc:	a902      	add	r1, sp, #8
 8011ace:	6800      	ldr	r0, [r0, #0]
 8011ad0:	9301      	str	r3, [sp, #4]
 8011ad2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011ad4:	f002 fc00 	bl	80142d8 <_svfiprintf_r>
 8011ad8:	9b02      	ldr	r3, [sp, #8]
 8011ada:	701c      	strb	r4, [r3, #0]
 8011adc:	b01d      	add	sp, #116	@ 0x74
 8011ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ae2:	b003      	add	sp, #12
 8011ae4:	4770      	bx	lr
 8011ae6:	bf00      	nop
 8011ae8:	24000028 	.word	0x24000028
 8011aec:	ffff0208 	.word	0xffff0208

08011af0 <siscanf>:
 8011af0:	b40e      	push	{r1, r2, r3}
 8011af2:	b570      	push	{r4, r5, r6, lr}
 8011af4:	b09d      	sub	sp, #116	@ 0x74
 8011af6:	ac21      	add	r4, sp, #132	@ 0x84
 8011af8:	2500      	movs	r5, #0
 8011afa:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011afe:	f854 6b04 	ldr.w	r6, [r4], #4
 8011b02:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011b06:	951b      	str	r5, [sp, #108]	@ 0x6c
 8011b08:	9002      	str	r0, [sp, #8]
 8011b0a:	9006      	str	r0, [sp, #24]
 8011b0c:	f7ee fc60 	bl	80003d0 <strlen>
 8011b10:	4b0b      	ldr	r3, [pc, #44]	@ (8011b40 <siscanf+0x50>)
 8011b12:	9003      	str	r0, [sp, #12]
 8011b14:	9007      	str	r0, [sp, #28]
 8011b16:	480b      	ldr	r0, [pc, #44]	@ (8011b44 <siscanf+0x54>)
 8011b18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011b1e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011b22:	4632      	mov	r2, r6
 8011b24:	4623      	mov	r3, r4
 8011b26:	a902      	add	r1, sp, #8
 8011b28:	6800      	ldr	r0, [r0, #0]
 8011b2a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8011b2c:	9514      	str	r5, [sp, #80]	@ 0x50
 8011b2e:	9401      	str	r4, [sp, #4]
 8011b30:	f002 fd28 	bl	8014584 <__ssvfiscanf_r>
 8011b34:	b01d      	add	sp, #116	@ 0x74
 8011b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b3a:	b003      	add	sp, #12
 8011b3c:	4770      	bx	lr
 8011b3e:	bf00      	nop
 8011b40:	08011b6b 	.word	0x08011b6b
 8011b44:	24000028 	.word	0x24000028

08011b48 <__sread>:
 8011b48:	b510      	push	{r4, lr}
 8011b4a:	460c      	mov	r4, r1
 8011b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b50:	f000 f93c 	bl	8011dcc <_read_r>
 8011b54:	2800      	cmp	r0, #0
 8011b56:	bfab      	itete	ge
 8011b58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011b5a:	89a3      	ldrhlt	r3, [r4, #12]
 8011b5c:	181b      	addge	r3, r3, r0
 8011b5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011b62:	bfac      	ite	ge
 8011b64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011b66:	81a3      	strhlt	r3, [r4, #12]
 8011b68:	bd10      	pop	{r4, pc}

08011b6a <__seofread>:
 8011b6a:	2000      	movs	r0, #0
 8011b6c:	4770      	bx	lr

08011b6e <__swrite>:
 8011b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b72:	461f      	mov	r7, r3
 8011b74:	898b      	ldrh	r3, [r1, #12]
 8011b76:	05db      	lsls	r3, r3, #23
 8011b78:	4605      	mov	r5, r0
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	4616      	mov	r6, r2
 8011b7e:	d505      	bpl.n	8011b8c <__swrite+0x1e>
 8011b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b84:	2302      	movs	r3, #2
 8011b86:	2200      	movs	r2, #0
 8011b88:	f000 f90e 	bl	8011da8 <_lseek_r>
 8011b8c:	89a3      	ldrh	r3, [r4, #12]
 8011b8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011b96:	81a3      	strh	r3, [r4, #12]
 8011b98:	4632      	mov	r2, r6
 8011b9a:	463b      	mov	r3, r7
 8011b9c:	4628      	mov	r0, r5
 8011b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba2:	f000 b925 	b.w	8011df0 <_write_r>

08011ba6 <__sseek>:
 8011ba6:	b510      	push	{r4, lr}
 8011ba8:	460c      	mov	r4, r1
 8011baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bae:	f000 f8fb 	bl	8011da8 <_lseek_r>
 8011bb2:	1c43      	adds	r3, r0, #1
 8011bb4:	89a3      	ldrh	r3, [r4, #12]
 8011bb6:	bf15      	itete	ne
 8011bb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011bba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011bbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011bc2:	81a3      	strheq	r3, [r4, #12]
 8011bc4:	bf18      	it	ne
 8011bc6:	81a3      	strhne	r3, [r4, #12]
 8011bc8:	bd10      	pop	{r4, pc}

08011bca <__sclose>:
 8011bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bce:	f000 b8db 	b.w	8011d88 <_close_r>

08011bd2 <__swbuf_r>:
 8011bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bd4:	460e      	mov	r6, r1
 8011bd6:	4614      	mov	r4, r2
 8011bd8:	4605      	mov	r5, r0
 8011bda:	b118      	cbz	r0, 8011be4 <__swbuf_r+0x12>
 8011bdc:	6a03      	ldr	r3, [r0, #32]
 8011bde:	b90b      	cbnz	r3, 8011be4 <__swbuf_r+0x12>
 8011be0:	f7ff feb6 	bl	8011950 <__sinit>
 8011be4:	69a3      	ldr	r3, [r4, #24]
 8011be6:	60a3      	str	r3, [r4, #8]
 8011be8:	89a3      	ldrh	r3, [r4, #12]
 8011bea:	071a      	lsls	r2, r3, #28
 8011bec:	d501      	bpl.n	8011bf2 <__swbuf_r+0x20>
 8011bee:	6923      	ldr	r3, [r4, #16]
 8011bf0:	b943      	cbnz	r3, 8011c04 <__swbuf_r+0x32>
 8011bf2:	4621      	mov	r1, r4
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	f000 f82b 	bl	8011c50 <__swsetup_r>
 8011bfa:	b118      	cbz	r0, 8011c04 <__swbuf_r+0x32>
 8011bfc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011c00:	4638      	mov	r0, r7
 8011c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c04:	6823      	ldr	r3, [r4, #0]
 8011c06:	6922      	ldr	r2, [r4, #16]
 8011c08:	1a98      	subs	r0, r3, r2
 8011c0a:	6963      	ldr	r3, [r4, #20]
 8011c0c:	b2f6      	uxtb	r6, r6
 8011c0e:	4283      	cmp	r3, r0
 8011c10:	4637      	mov	r7, r6
 8011c12:	dc05      	bgt.n	8011c20 <__swbuf_r+0x4e>
 8011c14:	4621      	mov	r1, r4
 8011c16:	4628      	mov	r0, r5
 8011c18:	f003 f93e 	bl	8014e98 <_fflush_r>
 8011c1c:	2800      	cmp	r0, #0
 8011c1e:	d1ed      	bne.n	8011bfc <__swbuf_r+0x2a>
 8011c20:	68a3      	ldr	r3, [r4, #8]
 8011c22:	3b01      	subs	r3, #1
 8011c24:	60a3      	str	r3, [r4, #8]
 8011c26:	6823      	ldr	r3, [r4, #0]
 8011c28:	1c5a      	adds	r2, r3, #1
 8011c2a:	6022      	str	r2, [r4, #0]
 8011c2c:	701e      	strb	r6, [r3, #0]
 8011c2e:	6962      	ldr	r2, [r4, #20]
 8011c30:	1c43      	adds	r3, r0, #1
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d004      	beq.n	8011c40 <__swbuf_r+0x6e>
 8011c36:	89a3      	ldrh	r3, [r4, #12]
 8011c38:	07db      	lsls	r3, r3, #31
 8011c3a:	d5e1      	bpl.n	8011c00 <__swbuf_r+0x2e>
 8011c3c:	2e0a      	cmp	r6, #10
 8011c3e:	d1df      	bne.n	8011c00 <__swbuf_r+0x2e>
 8011c40:	4621      	mov	r1, r4
 8011c42:	4628      	mov	r0, r5
 8011c44:	f003 f928 	bl	8014e98 <_fflush_r>
 8011c48:	2800      	cmp	r0, #0
 8011c4a:	d0d9      	beq.n	8011c00 <__swbuf_r+0x2e>
 8011c4c:	e7d6      	b.n	8011bfc <__swbuf_r+0x2a>
	...

08011c50 <__swsetup_r>:
 8011c50:	b538      	push	{r3, r4, r5, lr}
 8011c52:	4b29      	ldr	r3, [pc, #164]	@ (8011cf8 <__swsetup_r+0xa8>)
 8011c54:	4605      	mov	r5, r0
 8011c56:	6818      	ldr	r0, [r3, #0]
 8011c58:	460c      	mov	r4, r1
 8011c5a:	b118      	cbz	r0, 8011c64 <__swsetup_r+0x14>
 8011c5c:	6a03      	ldr	r3, [r0, #32]
 8011c5e:	b90b      	cbnz	r3, 8011c64 <__swsetup_r+0x14>
 8011c60:	f7ff fe76 	bl	8011950 <__sinit>
 8011c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c68:	0719      	lsls	r1, r3, #28
 8011c6a:	d422      	bmi.n	8011cb2 <__swsetup_r+0x62>
 8011c6c:	06da      	lsls	r2, r3, #27
 8011c6e:	d407      	bmi.n	8011c80 <__swsetup_r+0x30>
 8011c70:	2209      	movs	r2, #9
 8011c72:	602a      	str	r2, [r5, #0]
 8011c74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c78:	81a3      	strh	r3, [r4, #12]
 8011c7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c7e:	e033      	b.n	8011ce8 <__swsetup_r+0x98>
 8011c80:	0758      	lsls	r0, r3, #29
 8011c82:	d512      	bpl.n	8011caa <__swsetup_r+0x5a>
 8011c84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c86:	b141      	cbz	r1, 8011c9a <__swsetup_r+0x4a>
 8011c88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c8c:	4299      	cmp	r1, r3
 8011c8e:	d002      	beq.n	8011c96 <__swsetup_r+0x46>
 8011c90:	4628      	mov	r0, r5
 8011c92:	f000 fee7 	bl	8012a64 <_free_r>
 8011c96:	2300      	movs	r3, #0
 8011c98:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c9a:	89a3      	ldrh	r3, [r4, #12]
 8011c9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011ca0:	81a3      	strh	r3, [r4, #12]
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	6063      	str	r3, [r4, #4]
 8011ca6:	6923      	ldr	r3, [r4, #16]
 8011ca8:	6023      	str	r3, [r4, #0]
 8011caa:	89a3      	ldrh	r3, [r4, #12]
 8011cac:	f043 0308 	orr.w	r3, r3, #8
 8011cb0:	81a3      	strh	r3, [r4, #12]
 8011cb2:	6923      	ldr	r3, [r4, #16]
 8011cb4:	b94b      	cbnz	r3, 8011cca <__swsetup_r+0x7a>
 8011cb6:	89a3      	ldrh	r3, [r4, #12]
 8011cb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011cbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011cc0:	d003      	beq.n	8011cca <__swsetup_r+0x7a>
 8011cc2:	4621      	mov	r1, r4
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	f003 f935 	bl	8014f34 <__smakebuf_r>
 8011cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cce:	f013 0201 	ands.w	r2, r3, #1
 8011cd2:	d00a      	beq.n	8011cea <__swsetup_r+0x9a>
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	60a2      	str	r2, [r4, #8]
 8011cd8:	6962      	ldr	r2, [r4, #20]
 8011cda:	4252      	negs	r2, r2
 8011cdc:	61a2      	str	r2, [r4, #24]
 8011cde:	6922      	ldr	r2, [r4, #16]
 8011ce0:	b942      	cbnz	r2, 8011cf4 <__swsetup_r+0xa4>
 8011ce2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011ce6:	d1c5      	bne.n	8011c74 <__swsetup_r+0x24>
 8011ce8:	bd38      	pop	{r3, r4, r5, pc}
 8011cea:	0799      	lsls	r1, r3, #30
 8011cec:	bf58      	it	pl
 8011cee:	6962      	ldrpl	r2, [r4, #20]
 8011cf0:	60a2      	str	r2, [r4, #8]
 8011cf2:	e7f4      	b.n	8011cde <__swsetup_r+0x8e>
 8011cf4:	2000      	movs	r0, #0
 8011cf6:	e7f7      	b.n	8011ce8 <__swsetup_r+0x98>
 8011cf8:	24000028 	.word	0x24000028

08011cfc <memmove>:
 8011cfc:	4288      	cmp	r0, r1
 8011cfe:	b510      	push	{r4, lr}
 8011d00:	eb01 0402 	add.w	r4, r1, r2
 8011d04:	d902      	bls.n	8011d0c <memmove+0x10>
 8011d06:	4284      	cmp	r4, r0
 8011d08:	4623      	mov	r3, r4
 8011d0a:	d807      	bhi.n	8011d1c <memmove+0x20>
 8011d0c:	1e43      	subs	r3, r0, #1
 8011d0e:	42a1      	cmp	r1, r4
 8011d10:	d008      	beq.n	8011d24 <memmove+0x28>
 8011d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011d1a:	e7f8      	b.n	8011d0e <memmove+0x12>
 8011d1c:	4402      	add	r2, r0
 8011d1e:	4601      	mov	r1, r0
 8011d20:	428a      	cmp	r2, r1
 8011d22:	d100      	bne.n	8011d26 <memmove+0x2a>
 8011d24:	bd10      	pop	{r4, pc}
 8011d26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011d2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011d2e:	e7f7      	b.n	8011d20 <memmove+0x24>

08011d30 <memset>:
 8011d30:	4402      	add	r2, r0
 8011d32:	4603      	mov	r3, r0
 8011d34:	4293      	cmp	r3, r2
 8011d36:	d100      	bne.n	8011d3a <memset+0xa>
 8011d38:	4770      	bx	lr
 8011d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8011d3e:	e7f9      	b.n	8011d34 <memset+0x4>

08011d40 <strchr>:
 8011d40:	b2c9      	uxtb	r1, r1
 8011d42:	4603      	mov	r3, r0
 8011d44:	4618      	mov	r0, r3
 8011d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d4a:	b112      	cbz	r2, 8011d52 <strchr+0x12>
 8011d4c:	428a      	cmp	r2, r1
 8011d4e:	d1f9      	bne.n	8011d44 <strchr+0x4>
 8011d50:	4770      	bx	lr
 8011d52:	2900      	cmp	r1, #0
 8011d54:	bf18      	it	ne
 8011d56:	2000      	movne	r0, #0
 8011d58:	4770      	bx	lr

08011d5a <strncmp>:
 8011d5a:	b510      	push	{r4, lr}
 8011d5c:	b16a      	cbz	r2, 8011d7a <strncmp+0x20>
 8011d5e:	3901      	subs	r1, #1
 8011d60:	1884      	adds	r4, r0, r2
 8011d62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d66:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	d103      	bne.n	8011d76 <strncmp+0x1c>
 8011d6e:	42a0      	cmp	r0, r4
 8011d70:	d001      	beq.n	8011d76 <strncmp+0x1c>
 8011d72:	2a00      	cmp	r2, #0
 8011d74:	d1f5      	bne.n	8011d62 <strncmp+0x8>
 8011d76:	1ad0      	subs	r0, r2, r3
 8011d78:	bd10      	pop	{r4, pc}
 8011d7a:	4610      	mov	r0, r2
 8011d7c:	e7fc      	b.n	8011d78 <strncmp+0x1e>
	...

08011d80 <_localeconv_r>:
 8011d80:	4800      	ldr	r0, [pc, #0]	@ (8011d84 <_localeconv_r+0x4>)
 8011d82:	4770      	bx	lr
 8011d84:	24000168 	.word	0x24000168

08011d88 <_close_r>:
 8011d88:	b538      	push	{r3, r4, r5, lr}
 8011d8a:	4d06      	ldr	r5, [pc, #24]	@ (8011da4 <_close_r+0x1c>)
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	4604      	mov	r4, r0
 8011d90:	4608      	mov	r0, r1
 8011d92:	602b      	str	r3, [r5, #0]
 8011d94:	f7f2 faf8 	bl	8004388 <_close>
 8011d98:	1c43      	adds	r3, r0, #1
 8011d9a:	d102      	bne.n	8011da2 <_close_r+0x1a>
 8011d9c:	682b      	ldr	r3, [r5, #0]
 8011d9e:	b103      	cbz	r3, 8011da2 <_close_r+0x1a>
 8011da0:	6023      	str	r3, [r4, #0]
 8011da2:	bd38      	pop	{r3, r4, r5, pc}
 8011da4:	24000880 	.word	0x24000880

08011da8 <_lseek_r>:
 8011da8:	b538      	push	{r3, r4, r5, lr}
 8011daa:	4d07      	ldr	r5, [pc, #28]	@ (8011dc8 <_lseek_r+0x20>)
 8011dac:	4604      	mov	r4, r0
 8011dae:	4608      	mov	r0, r1
 8011db0:	4611      	mov	r1, r2
 8011db2:	2200      	movs	r2, #0
 8011db4:	602a      	str	r2, [r5, #0]
 8011db6:	461a      	mov	r2, r3
 8011db8:	f7f2 fb0d 	bl	80043d6 <_lseek>
 8011dbc:	1c43      	adds	r3, r0, #1
 8011dbe:	d102      	bne.n	8011dc6 <_lseek_r+0x1e>
 8011dc0:	682b      	ldr	r3, [r5, #0]
 8011dc2:	b103      	cbz	r3, 8011dc6 <_lseek_r+0x1e>
 8011dc4:	6023      	str	r3, [r4, #0]
 8011dc6:	bd38      	pop	{r3, r4, r5, pc}
 8011dc8:	24000880 	.word	0x24000880

08011dcc <_read_r>:
 8011dcc:	b538      	push	{r3, r4, r5, lr}
 8011dce:	4d07      	ldr	r5, [pc, #28]	@ (8011dec <_read_r+0x20>)
 8011dd0:	4604      	mov	r4, r0
 8011dd2:	4608      	mov	r0, r1
 8011dd4:	4611      	mov	r1, r2
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	602a      	str	r2, [r5, #0]
 8011dda:	461a      	mov	r2, r3
 8011ddc:	f7f2 fab7 	bl	800434e <_read>
 8011de0:	1c43      	adds	r3, r0, #1
 8011de2:	d102      	bne.n	8011dea <_read_r+0x1e>
 8011de4:	682b      	ldr	r3, [r5, #0]
 8011de6:	b103      	cbz	r3, 8011dea <_read_r+0x1e>
 8011de8:	6023      	str	r3, [r4, #0]
 8011dea:	bd38      	pop	{r3, r4, r5, pc}
 8011dec:	24000880 	.word	0x24000880

08011df0 <_write_r>:
 8011df0:	b538      	push	{r3, r4, r5, lr}
 8011df2:	4d07      	ldr	r5, [pc, #28]	@ (8011e10 <_write_r+0x20>)
 8011df4:	4604      	mov	r4, r0
 8011df6:	4608      	mov	r0, r1
 8011df8:	4611      	mov	r1, r2
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	602a      	str	r2, [r5, #0]
 8011dfe:	461a      	mov	r2, r3
 8011e00:	f7f0 fde6 	bl	80029d0 <_write>
 8011e04:	1c43      	adds	r3, r0, #1
 8011e06:	d102      	bne.n	8011e0e <_write_r+0x1e>
 8011e08:	682b      	ldr	r3, [r5, #0]
 8011e0a:	b103      	cbz	r3, 8011e0e <_write_r+0x1e>
 8011e0c:	6023      	str	r3, [r4, #0]
 8011e0e:	bd38      	pop	{r3, r4, r5, pc}
 8011e10:	24000880 	.word	0x24000880

08011e14 <__errno>:
 8011e14:	4b01      	ldr	r3, [pc, #4]	@ (8011e1c <__errno+0x8>)
 8011e16:	6818      	ldr	r0, [r3, #0]
 8011e18:	4770      	bx	lr
 8011e1a:	bf00      	nop
 8011e1c:	24000028 	.word	0x24000028

08011e20 <__libc_init_array>:
 8011e20:	b570      	push	{r4, r5, r6, lr}
 8011e22:	4d0d      	ldr	r5, [pc, #52]	@ (8011e58 <__libc_init_array+0x38>)
 8011e24:	4c0d      	ldr	r4, [pc, #52]	@ (8011e5c <__libc_init_array+0x3c>)
 8011e26:	1b64      	subs	r4, r4, r5
 8011e28:	10a4      	asrs	r4, r4, #2
 8011e2a:	2600      	movs	r6, #0
 8011e2c:	42a6      	cmp	r6, r4
 8011e2e:	d109      	bne.n	8011e44 <__libc_init_array+0x24>
 8011e30:	4d0b      	ldr	r5, [pc, #44]	@ (8011e60 <__libc_init_array+0x40>)
 8011e32:	4c0c      	ldr	r4, [pc, #48]	@ (8011e64 <__libc_init_array+0x44>)
 8011e34:	f003 fe2c 	bl	8015a90 <_init>
 8011e38:	1b64      	subs	r4, r4, r5
 8011e3a:	10a4      	asrs	r4, r4, #2
 8011e3c:	2600      	movs	r6, #0
 8011e3e:	42a6      	cmp	r6, r4
 8011e40:	d105      	bne.n	8011e4e <__libc_init_array+0x2e>
 8011e42:	bd70      	pop	{r4, r5, r6, pc}
 8011e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e48:	4798      	blx	r3
 8011e4a:	3601      	adds	r6, #1
 8011e4c:	e7ee      	b.n	8011e2c <__libc_init_array+0xc>
 8011e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e52:	4798      	blx	r3
 8011e54:	3601      	adds	r6, #1
 8011e56:	e7f2      	b.n	8011e3e <__libc_init_array+0x1e>
 8011e58:	08017764 	.word	0x08017764
 8011e5c:	08017764 	.word	0x08017764
 8011e60:	08017764 	.word	0x08017764
 8011e64:	08017768 	.word	0x08017768

08011e68 <__retarget_lock_init_recursive>:
 8011e68:	4770      	bx	lr

08011e6a <__retarget_lock_acquire_recursive>:
 8011e6a:	4770      	bx	lr

08011e6c <__retarget_lock_release_recursive>:
 8011e6c:	4770      	bx	lr

08011e6e <memcpy>:
 8011e6e:	440a      	add	r2, r1
 8011e70:	4291      	cmp	r1, r2
 8011e72:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011e76:	d100      	bne.n	8011e7a <memcpy+0xc>
 8011e78:	4770      	bx	lr
 8011e7a:	b510      	push	{r4, lr}
 8011e7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e84:	4291      	cmp	r1, r2
 8011e86:	d1f9      	bne.n	8011e7c <memcpy+0xe>
 8011e88:	bd10      	pop	{r4, pc}
	...

08011e8c <nanf>:
 8011e8c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011e94 <nanf+0x8>
 8011e90:	4770      	bx	lr
 8011e92:	bf00      	nop
 8011e94:	7fc00000 	.word	0x7fc00000

08011e98 <quorem>:
 8011e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e9c:	6903      	ldr	r3, [r0, #16]
 8011e9e:	690c      	ldr	r4, [r1, #16]
 8011ea0:	42a3      	cmp	r3, r4
 8011ea2:	4607      	mov	r7, r0
 8011ea4:	db7e      	blt.n	8011fa4 <quorem+0x10c>
 8011ea6:	3c01      	subs	r4, #1
 8011ea8:	f101 0814 	add.w	r8, r1, #20
 8011eac:	00a3      	lsls	r3, r4, #2
 8011eae:	f100 0514 	add.w	r5, r0, #20
 8011eb2:	9300      	str	r3, [sp, #0]
 8011eb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011eb8:	9301      	str	r3, [sp, #4]
 8011eba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011ebe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011eca:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ece:	d32e      	bcc.n	8011f2e <quorem+0x96>
 8011ed0:	f04f 0a00 	mov.w	sl, #0
 8011ed4:	46c4      	mov	ip, r8
 8011ed6:	46ae      	mov	lr, r5
 8011ed8:	46d3      	mov	fp, sl
 8011eda:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011ede:	b298      	uxth	r0, r3
 8011ee0:	fb06 a000 	mla	r0, r6, r0, sl
 8011ee4:	0c02      	lsrs	r2, r0, #16
 8011ee6:	0c1b      	lsrs	r3, r3, #16
 8011ee8:	fb06 2303 	mla	r3, r6, r3, r2
 8011eec:	f8de 2000 	ldr.w	r2, [lr]
 8011ef0:	b280      	uxth	r0, r0
 8011ef2:	b292      	uxth	r2, r2
 8011ef4:	1a12      	subs	r2, r2, r0
 8011ef6:	445a      	add	r2, fp
 8011ef8:	f8de 0000 	ldr.w	r0, [lr]
 8011efc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011f00:	b29b      	uxth	r3, r3
 8011f02:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011f06:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011f0a:	b292      	uxth	r2, r2
 8011f0c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011f10:	45e1      	cmp	r9, ip
 8011f12:	f84e 2b04 	str.w	r2, [lr], #4
 8011f16:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011f1a:	d2de      	bcs.n	8011eda <quorem+0x42>
 8011f1c:	9b00      	ldr	r3, [sp, #0]
 8011f1e:	58eb      	ldr	r3, [r5, r3]
 8011f20:	b92b      	cbnz	r3, 8011f2e <quorem+0x96>
 8011f22:	9b01      	ldr	r3, [sp, #4]
 8011f24:	3b04      	subs	r3, #4
 8011f26:	429d      	cmp	r5, r3
 8011f28:	461a      	mov	r2, r3
 8011f2a:	d32f      	bcc.n	8011f8c <quorem+0xf4>
 8011f2c:	613c      	str	r4, [r7, #16]
 8011f2e:	4638      	mov	r0, r7
 8011f30:	f001 f954 	bl	80131dc <__mcmp>
 8011f34:	2800      	cmp	r0, #0
 8011f36:	db25      	blt.n	8011f84 <quorem+0xec>
 8011f38:	4629      	mov	r1, r5
 8011f3a:	2000      	movs	r0, #0
 8011f3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f40:	f8d1 c000 	ldr.w	ip, [r1]
 8011f44:	fa1f fe82 	uxth.w	lr, r2
 8011f48:	fa1f f38c 	uxth.w	r3, ip
 8011f4c:	eba3 030e 	sub.w	r3, r3, lr
 8011f50:	4403      	add	r3, r0
 8011f52:	0c12      	lsrs	r2, r2, #16
 8011f54:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011f58:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011f5c:	b29b      	uxth	r3, r3
 8011f5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f62:	45c1      	cmp	r9, r8
 8011f64:	f841 3b04 	str.w	r3, [r1], #4
 8011f68:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011f6c:	d2e6      	bcs.n	8011f3c <quorem+0xa4>
 8011f6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f76:	b922      	cbnz	r2, 8011f82 <quorem+0xea>
 8011f78:	3b04      	subs	r3, #4
 8011f7a:	429d      	cmp	r5, r3
 8011f7c:	461a      	mov	r2, r3
 8011f7e:	d30b      	bcc.n	8011f98 <quorem+0x100>
 8011f80:	613c      	str	r4, [r7, #16]
 8011f82:	3601      	adds	r6, #1
 8011f84:	4630      	mov	r0, r6
 8011f86:	b003      	add	sp, #12
 8011f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f8c:	6812      	ldr	r2, [r2, #0]
 8011f8e:	3b04      	subs	r3, #4
 8011f90:	2a00      	cmp	r2, #0
 8011f92:	d1cb      	bne.n	8011f2c <quorem+0x94>
 8011f94:	3c01      	subs	r4, #1
 8011f96:	e7c6      	b.n	8011f26 <quorem+0x8e>
 8011f98:	6812      	ldr	r2, [r2, #0]
 8011f9a:	3b04      	subs	r3, #4
 8011f9c:	2a00      	cmp	r2, #0
 8011f9e:	d1ef      	bne.n	8011f80 <quorem+0xe8>
 8011fa0:	3c01      	subs	r4, #1
 8011fa2:	e7ea      	b.n	8011f7a <quorem+0xe2>
 8011fa4:	2000      	movs	r0, #0
 8011fa6:	e7ee      	b.n	8011f86 <quorem+0xee>

08011fa8 <_dtoa_r>:
 8011fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fac:	ed2d 8b02 	vpush	{d8}
 8011fb0:	69c7      	ldr	r7, [r0, #28]
 8011fb2:	b091      	sub	sp, #68	@ 0x44
 8011fb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011fb8:	ec55 4b10 	vmov	r4, r5, d0
 8011fbc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011fbe:	9107      	str	r1, [sp, #28]
 8011fc0:	4681      	mov	r9, r0
 8011fc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8011fc4:	930d      	str	r3, [sp, #52]	@ 0x34
 8011fc6:	b97f      	cbnz	r7, 8011fe8 <_dtoa_r+0x40>
 8011fc8:	2010      	movs	r0, #16
 8011fca:	f000 fd95 	bl	8012af8 <malloc>
 8011fce:	4602      	mov	r2, r0
 8011fd0:	f8c9 001c 	str.w	r0, [r9, #28]
 8011fd4:	b920      	cbnz	r0, 8011fe0 <_dtoa_r+0x38>
 8011fd6:	4ba0      	ldr	r3, [pc, #640]	@ (8012258 <_dtoa_r+0x2b0>)
 8011fd8:	21ef      	movs	r1, #239	@ 0xef
 8011fda:	48a0      	ldr	r0, [pc, #640]	@ (801225c <_dtoa_r+0x2b4>)
 8011fdc:	f003 f8c8 	bl	8015170 <__assert_func>
 8011fe0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011fe4:	6007      	str	r7, [r0, #0]
 8011fe6:	60c7      	str	r7, [r0, #12]
 8011fe8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011fec:	6819      	ldr	r1, [r3, #0]
 8011fee:	b159      	cbz	r1, 8012008 <_dtoa_r+0x60>
 8011ff0:	685a      	ldr	r2, [r3, #4]
 8011ff2:	604a      	str	r2, [r1, #4]
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	4093      	lsls	r3, r2
 8011ff8:	608b      	str	r3, [r1, #8]
 8011ffa:	4648      	mov	r0, r9
 8011ffc:	f000 fe72 	bl	8012ce4 <_Bfree>
 8012000:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012004:	2200      	movs	r2, #0
 8012006:	601a      	str	r2, [r3, #0]
 8012008:	1e2b      	subs	r3, r5, #0
 801200a:	bfbb      	ittet	lt
 801200c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012010:	9303      	strlt	r3, [sp, #12]
 8012012:	2300      	movge	r3, #0
 8012014:	2201      	movlt	r2, #1
 8012016:	bfac      	ite	ge
 8012018:	6033      	strge	r3, [r6, #0]
 801201a:	6032      	strlt	r2, [r6, #0]
 801201c:	4b90      	ldr	r3, [pc, #576]	@ (8012260 <_dtoa_r+0x2b8>)
 801201e:	9e03      	ldr	r6, [sp, #12]
 8012020:	43b3      	bics	r3, r6
 8012022:	d110      	bne.n	8012046 <_dtoa_r+0x9e>
 8012024:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012026:	f242 730f 	movw	r3, #9999	@ 0x270f
 801202a:	6013      	str	r3, [r2, #0]
 801202c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012030:	4323      	orrs	r3, r4
 8012032:	f000 84e6 	beq.w	8012a02 <_dtoa_r+0xa5a>
 8012036:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012038:	4f8a      	ldr	r7, [pc, #552]	@ (8012264 <_dtoa_r+0x2bc>)
 801203a:	2b00      	cmp	r3, #0
 801203c:	f000 84e8 	beq.w	8012a10 <_dtoa_r+0xa68>
 8012040:	1cfb      	adds	r3, r7, #3
 8012042:	f000 bce3 	b.w	8012a0c <_dtoa_r+0xa64>
 8012046:	ed9d 8b02 	vldr	d8, [sp, #8]
 801204a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012052:	d10a      	bne.n	801206a <_dtoa_r+0xc2>
 8012054:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012056:	2301      	movs	r3, #1
 8012058:	6013      	str	r3, [r2, #0]
 801205a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801205c:	b113      	cbz	r3, 8012064 <_dtoa_r+0xbc>
 801205e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012060:	4b81      	ldr	r3, [pc, #516]	@ (8012268 <_dtoa_r+0x2c0>)
 8012062:	6013      	str	r3, [r2, #0]
 8012064:	4f81      	ldr	r7, [pc, #516]	@ (801226c <_dtoa_r+0x2c4>)
 8012066:	f000 bcd3 	b.w	8012a10 <_dtoa_r+0xa68>
 801206a:	aa0e      	add	r2, sp, #56	@ 0x38
 801206c:	a90f      	add	r1, sp, #60	@ 0x3c
 801206e:	4648      	mov	r0, r9
 8012070:	eeb0 0b48 	vmov.f64	d0, d8
 8012074:	f001 f9d2 	bl	801341c <__d2b>
 8012078:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801207c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801207e:	9001      	str	r0, [sp, #4]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d045      	beq.n	8012110 <_dtoa_r+0x168>
 8012084:	eeb0 7b48 	vmov.f64	d7, d8
 8012088:	ee18 1a90 	vmov	r1, s17
 801208c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012090:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8012094:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012098:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801209c:	2500      	movs	r5, #0
 801209e:	ee07 1a90 	vmov	s15, r1
 80120a2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80120a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012240 <_dtoa_r+0x298>
 80120aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80120ae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012248 <_dtoa_r+0x2a0>
 80120b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80120b6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012250 <_dtoa_r+0x2a8>
 80120ba:	ee07 3a90 	vmov	s15, r3
 80120be:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80120c2:	eeb0 7b46 	vmov.f64	d7, d6
 80120c6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80120ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80120ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80120d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120d6:	ee16 8a90 	vmov	r8, s13
 80120da:	d508      	bpl.n	80120ee <_dtoa_r+0x146>
 80120dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80120e0:	eeb4 6b47 	vcmp.f64	d6, d7
 80120e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120e8:	bf18      	it	ne
 80120ea:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 80120ee:	f1b8 0f16 	cmp.w	r8, #22
 80120f2:	d82b      	bhi.n	801214c <_dtoa_r+0x1a4>
 80120f4:	495e      	ldr	r1, [pc, #376]	@ (8012270 <_dtoa_r+0x2c8>)
 80120f6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80120fa:	ed91 7b00 	vldr	d7, [r1]
 80120fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012106:	d501      	bpl.n	801210c <_dtoa_r+0x164>
 8012108:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801210c:	2100      	movs	r1, #0
 801210e:	e01e      	b.n	801214e <_dtoa_r+0x1a6>
 8012110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012112:	4413      	add	r3, r2
 8012114:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012118:	2920      	cmp	r1, #32
 801211a:	bfc1      	itttt	gt
 801211c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012120:	408e      	lslgt	r6, r1
 8012122:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8012126:	fa24 f101 	lsrgt.w	r1, r4, r1
 801212a:	bfd6      	itet	le
 801212c:	f1c1 0120 	rsble	r1, r1, #32
 8012130:	4331      	orrgt	r1, r6
 8012132:	fa04 f101 	lslle.w	r1, r4, r1
 8012136:	ee07 1a90 	vmov	s15, r1
 801213a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801213e:	3b01      	subs	r3, #1
 8012140:	ee17 1a90 	vmov	r1, s15
 8012144:	2501      	movs	r5, #1
 8012146:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801214a:	e7a8      	b.n	801209e <_dtoa_r+0xf6>
 801214c:	2101      	movs	r1, #1
 801214e:	1ad2      	subs	r2, r2, r3
 8012150:	1e53      	subs	r3, r2, #1
 8012152:	9306      	str	r3, [sp, #24]
 8012154:	bf45      	ittet	mi
 8012156:	f1c2 0301 	rsbmi	r3, r2, #1
 801215a:	9304      	strmi	r3, [sp, #16]
 801215c:	2300      	movpl	r3, #0
 801215e:	2300      	movmi	r3, #0
 8012160:	bf4c      	ite	mi
 8012162:	9306      	strmi	r3, [sp, #24]
 8012164:	9304      	strpl	r3, [sp, #16]
 8012166:	f1b8 0f00 	cmp.w	r8, #0
 801216a:	910c      	str	r1, [sp, #48]	@ 0x30
 801216c:	db18      	blt.n	80121a0 <_dtoa_r+0x1f8>
 801216e:	9b06      	ldr	r3, [sp, #24]
 8012170:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8012174:	4443      	add	r3, r8
 8012176:	9306      	str	r3, [sp, #24]
 8012178:	2300      	movs	r3, #0
 801217a:	9a07      	ldr	r2, [sp, #28]
 801217c:	2a09      	cmp	r2, #9
 801217e:	d845      	bhi.n	801220c <_dtoa_r+0x264>
 8012180:	2a05      	cmp	r2, #5
 8012182:	bfc4      	itt	gt
 8012184:	3a04      	subgt	r2, #4
 8012186:	9207      	strgt	r2, [sp, #28]
 8012188:	9a07      	ldr	r2, [sp, #28]
 801218a:	f1a2 0202 	sub.w	r2, r2, #2
 801218e:	bfcc      	ite	gt
 8012190:	2400      	movgt	r4, #0
 8012192:	2401      	movle	r4, #1
 8012194:	2a03      	cmp	r2, #3
 8012196:	d844      	bhi.n	8012222 <_dtoa_r+0x27a>
 8012198:	e8df f002 	tbb	[pc, r2]
 801219c:	0b173634 	.word	0x0b173634
 80121a0:	9b04      	ldr	r3, [sp, #16]
 80121a2:	2200      	movs	r2, #0
 80121a4:	eba3 0308 	sub.w	r3, r3, r8
 80121a8:	9304      	str	r3, [sp, #16]
 80121aa:	920a      	str	r2, [sp, #40]	@ 0x28
 80121ac:	f1c8 0300 	rsb	r3, r8, #0
 80121b0:	e7e3      	b.n	801217a <_dtoa_r+0x1d2>
 80121b2:	2201      	movs	r2, #1
 80121b4:	9208      	str	r2, [sp, #32]
 80121b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121b8:	eb08 0b02 	add.w	fp, r8, r2
 80121bc:	f10b 0a01 	add.w	sl, fp, #1
 80121c0:	4652      	mov	r2, sl
 80121c2:	2a01      	cmp	r2, #1
 80121c4:	bfb8      	it	lt
 80121c6:	2201      	movlt	r2, #1
 80121c8:	e006      	b.n	80121d8 <_dtoa_r+0x230>
 80121ca:	2201      	movs	r2, #1
 80121cc:	9208      	str	r2, [sp, #32]
 80121ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121d0:	2a00      	cmp	r2, #0
 80121d2:	dd29      	ble.n	8012228 <_dtoa_r+0x280>
 80121d4:	4693      	mov	fp, r2
 80121d6:	4692      	mov	sl, r2
 80121d8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80121dc:	2100      	movs	r1, #0
 80121de:	2004      	movs	r0, #4
 80121e0:	f100 0614 	add.w	r6, r0, #20
 80121e4:	4296      	cmp	r6, r2
 80121e6:	d926      	bls.n	8012236 <_dtoa_r+0x28e>
 80121e8:	6079      	str	r1, [r7, #4]
 80121ea:	4648      	mov	r0, r9
 80121ec:	9305      	str	r3, [sp, #20]
 80121ee:	f000 fd39 	bl	8012c64 <_Balloc>
 80121f2:	9b05      	ldr	r3, [sp, #20]
 80121f4:	4607      	mov	r7, r0
 80121f6:	2800      	cmp	r0, #0
 80121f8:	d13e      	bne.n	8012278 <_dtoa_r+0x2d0>
 80121fa:	4b1e      	ldr	r3, [pc, #120]	@ (8012274 <_dtoa_r+0x2cc>)
 80121fc:	4602      	mov	r2, r0
 80121fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8012202:	e6ea      	b.n	8011fda <_dtoa_r+0x32>
 8012204:	2200      	movs	r2, #0
 8012206:	e7e1      	b.n	80121cc <_dtoa_r+0x224>
 8012208:	2200      	movs	r2, #0
 801220a:	e7d3      	b.n	80121b4 <_dtoa_r+0x20c>
 801220c:	2401      	movs	r4, #1
 801220e:	2200      	movs	r2, #0
 8012210:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012214:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8012218:	2100      	movs	r1, #0
 801221a:	46da      	mov	sl, fp
 801221c:	2212      	movs	r2, #18
 801221e:	9109      	str	r1, [sp, #36]	@ 0x24
 8012220:	e7da      	b.n	80121d8 <_dtoa_r+0x230>
 8012222:	2201      	movs	r2, #1
 8012224:	9208      	str	r2, [sp, #32]
 8012226:	e7f5      	b.n	8012214 <_dtoa_r+0x26c>
 8012228:	f04f 0b01 	mov.w	fp, #1
 801222c:	46da      	mov	sl, fp
 801222e:	465a      	mov	r2, fp
 8012230:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012234:	e7d0      	b.n	80121d8 <_dtoa_r+0x230>
 8012236:	3101      	adds	r1, #1
 8012238:	0040      	lsls	r0, r0, #1
 801223a:	e7d1      	b.n	80121e0 <_dtoa_r+0x238>
 801223c:	f3af 8000 	nop.w
 8012240:	636f4361 	.word	0x636f4361
 8012244:	3fd287a7 	.word	0x3fd287a7
 8012248:	8b60c8b3 	.word	0x8b60c8b3
 801224c:	3fc68a28 	.word	0x3fc68a28
 8012250:	509f79fb 	.word	0x509f79fb
 8012254:	3fd34413 	.word	0x3fd34413
 8012258:	0801735c 	.word	0x0801735c
 801225c:	08017373 	.word	0x08017373
 8012260:	7ff00000 	.word	0x7ff00000
 8012264:	08017358 	.word	0x08017358
 8012268:	0801745f 	.word	0x0801745f
 801226c:	0801745e 	.word	0x0801745e
 8012270:	08017540 	.word	0x08017540
 8012274:	080173cb 	.word	0x080173cb
 8012278:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801227c:	f1ba 0f0e 	cmp.w	sl, #14
 8012280:	6010      	str	r0, [r2, #0]
 8012282:	d86e      	bhi.n	8012362 <_dtoa_r+0x3ba>
 8012284:	2c00      	cmp	r4, #0
 8012286:	d06c      	beq.n	8012362 <_dtoa_r+0x3ba>
 8012288:	f1b8 0f00 	cmp.w	r8, #0
 801228c:	f340 80b4 	ble.w	80123f8 <_dtoa_r+0x450>
 8012290:	4ac8      	ldr	r2, [pc, #800]	@ (80125b4 <_dtoa_r+0x60c>)
 8012292:	f008 010f 	and.w	r1, r8, #15
 8012296:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801229a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801229e:	ed92 7b00 	vldr	d7, [r2]
 80122a2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80122a6:	f000 809b 	beq.w	80123e0 <_dtoa_r+0x438>
 80122aa:	4ac3      	ldr	r2, [pc, #780]	@ (80125b8 <_dtoa_r+0x610>)
 80122ac:	ed92 6b08 	vldr	d6, [r2, #32]
 80122b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80122b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80122b8:	f001 010f 	and.w	r1, r1, #15
 80122bc:	2203      	movs	r2, #3
 80122be:	48be      	ldr	r0, [pc, #760]	@ (80125b8 <_dtoa_r+0x610>)
 80122c0:	2900      	cmp	r1, #0
 80122c2:	f040 808f 	bne.w	80123e4 <_dtoa_r+0x43c>
 80122c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80122ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80122ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80122d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80122d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80122d8:	2900      	cmp	r1, #0
 80122da:	f000 80b3 	beq.w	8012444 <_dtoa_r+0x49c>
 80122de:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80122e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80122e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ea:	f140 80ab 	bpl.w	8012444 <_dtoa_r+0x49c>
 80122ee:	f1ba 0f00 	cmp.w	sl, #0
 80122f2:	f000 80a7 	beq.w	8012444 <_dtoa_r+0x49c>
 80122f6:	f1bb 0f00 	cmp.w	fp, #0
 80122fa:	dd30      	ble.n	801235e <_dtoa_r+0x3b6>
 80122fc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012300:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012304:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012308:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 801230c:	9105      	str	r1, [sp, #20]
 801230e:	3201      	adds	r2, #1
 8012310:	465c      	mov	r4, fp
 8012312:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012316:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801231a:	ee07 2a90 	vmov	s15, r2
 801231e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012322:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012326:	ee15 2a90 	vmov	r2, s11
 801232a:	ec51 0b15 	vmov	r0, r1, d5
 801232e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8012332:	2c00      	cmp	r4, #0
 8012334:	f040 808a 	bne.w	801244c <_dtoa_r+0x4a4>
 8012338:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801233c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012340:	ec41 0b17 	vmov	d7, r0, r1
 8012344:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801234c:	f300 826a 	bgt.w	8012824 <_dtoa_r+0x87c>
 8012350:	eeb1 7b47 	vneg.f64	d7, d7
 8012354:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801235c:	d423      	bmi.n	80123a6 <_dtoa_r+0x3fe>
 801235e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012362:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012364:	2a00      	cmp	r2, #0
 8012366:	f2c0 8129 	blt.w	80125bc <_dtoa_r+0x614>
 801236a:	f1b8 0f0e 	cmp.w	r8, #14
 801236e:	f300 8125 	bgt.w	80125bc <_dtoa_r+0x614>
 8012372:	4b90      	ldr	r3, [pc, #576]	@ (80125b4 <_dtoa_r+0x60c>)
 8012374:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012378:	ed93 6b00 	vldr	d6, [r3]
 801237c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801237e:	2b00      	cmp	r3, #0
 8012380:	f280 80c8 	bge.w	8012514 <_dtoa_r+0x56c>
 8012384:	f1ba 0f00 	cmp.w	sl, #0
 8012388:	f300 80c4 	bgt.w	8012514 <_dtoa_r+0x56c>
 801238c:	d10b      	bne.n	80123a6 <_dtoa_r+0x3fe>
 801238e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012392:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012396:	ed9d 7b02 	vldr	d7, [sp, #8]
 801239a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801239e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a2:	f2c0 823c 	blt.w	801281e <_dtoa_r+0x876>
 80123a6:	2400      	movs	r4, #0
 80123a8:	4625      	mov	r5, r4
 80123aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123ac:	43db      	mvns	r3, r3
 80123ae:	9305      	str	r3, [sp, #20]
 80123b0:	463e      	mov	r6, r7
 80123b2:	f04f 0800 	mov.w	r8, #0
 80123b6:	4621      	mov	r1, r4
 80123b8:	4648      	mov	r0, r9
 80123ba:	f000 fc93 	bl	8012ce4 <_Bfree>
 80123be:	2d00      	cmp	r5, #0
 80123c0:	f000 80a2 	beq.w	8012508 <_dtoa_r+0x560>
 80123c4:	f1b8 0f00 	cmp.w	r8, #0
 80123c8:	d005      	beq.n	80123d6 <_dtoa_r+0x42e>
 80123ca:	45a8      	cmp	r8, r5
 80123cc:	d003      	beq.n	80123d6 <_dtoa_r+0x42e>
 80123ce:	4641      	mov	r1, r8
 80123d0:	4648      	mov	r0, r9
 80123d2:	f000 fc87 	bl	8012ce4 <_Bfree>
 80123d6:	4629      	mov	r1, r5
 80123d8:	4648      	mov	r0, r9
 80123da:	f000 fc83 	bl	8012ce4 <_Bfree>
 80123de:	e093      	b.n	8012508 <_dtoa_r+0x560>
 80123e0:	2202      	movs	r2, #2
 80123e2:	e76c      	b.n	80122be <_dtoa_r+0x316>
 80123e4:	07cc      	lsls	r4, r1, #31
 80123e6:	d504      	bpl.n	80123f2 <_dtoa_r+0x44a>
 80123e8:	ed90 6b00 	vldr	d6, [r0]
 80123ec:	3201      	adds	r2, #1
 80123ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80123f2:	1049      	asrs	r1, r1, #1
 80123f4:	3008      	adds	r0, #8
 80123f6:	e763      	b.n	80122c0 <_dtoa_r+0x318>
 80123f8:	d022      	beq.n	8012440 <_dtoa_r+0x498>
 80123fa:	f1c8 0100 	rsb	r1, r8, #0
 80123fe:	4a6d      	ldr	r2, [pc, #436]	@ (80125b4 <_dtoa_r+0x60c>)
 8012400:	f001 000f 	and.w	r0, r1, #15
 8012404:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012408:	ed92 7b00 	vldr	d7, [r2]
 801240c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012410:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012414:	4868      	ldr	r0, [pc, #416]	@ (80125b8 <_dtoa_r+0x610>)
 8012416:	1109      	asrs	r1, r1, #4
 8012418:	2400      	movs	r4, #0
 801241a:	2202      	movs	r2, #2
 801241c:	b929      	cbnz	r1, 801242a <_dtoa_r+0x482>
 801241e:	2c00      	cmp	r4, #0
 8012420:	f43f af57 	beq.w	80122d2 <_dtoa_r+0x32a>
 8012424:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012428:	e753      	b.n	80122d2 <_dtoa_r+0x32a>
 801242a:	07ce      	lsls	r6, r1, #31
 801242c:	d505      	bpl.n	801243a <_dtoa_r+0x492>
 801242e:	ed90 6b00 	vldr	d6, [r0]
 8012432:	3201      	adds	r2, #1
 8012434:	2401      	movs	r4, #1
 8012436:	ee27 7b06 	vmul.f64	d7, d7, d6
 801243a:	1049      	asrs	r1, r1, #1
 801243c:	3008      	adds	r0, #8
 801243e:	e7ed      	b.n	801241c <_dtoa_r+0x474>
 8012440:	2202      	movs	r2, #2
 8012442:	e746      	b.n	80122d2 <_dtoa_r+0x32a>
 8012444:	f8cd 8014 	str.w	r8, [sp, #20]
 8012448:	4654      	mov	r4, sl
 801244a:	e762      	b.n	8012312 <_dtoa_r+0x36a>
 801244c:	4a59      	ldr	r2, [pc, #356]	@ (80125b4 <_dtoa_r+0x60c>)
 801244e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012452:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012456:	9a08      	ldr	r2, [sp, #32]
 8012458:	ec41 0b17 	vmov	d7, r0, r1
 801245c:	443c      	add	r4, r7
 801245e:	b34a      	cbz	r2, 80124b4 <_dtoa_r+0x50c>
 8012460:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012464:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012468:	463e      	mov	r6, r7
 801246a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801246e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012472:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012476:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801247a:	ee14 2a90 	vmov	r2, s9
 801247e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012482:	3230      	adds	r2, #48	@ 0x30
 8012484:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012488:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012490:	f806 2b01 	strb.w	r2, [r6], #1
 8012494:	d438      	bmi.n	8012508 <_dtoa_r+0x560>
 8012496:	ee32 5b46 	vsub.f64	d5, d2, d6
 801249a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801249e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124a2:	d46e      	bmi.n	8012582 <_dtoa_r+0x5da>
 80124a4:	42a6      	cmp	r6, r4
 80124a6:	f43f af5a 	beq.w	801235e <_dtoa_r+0x3b6>
 80124aa:	ee27 7b03 	vmul.f64	d7, d7, d3
 80124ae:	ee26 6b03 	vmul.f64	d6, d6, d3
 80124b2:	e7e0      	b.n	8012476 <_dtoa_r+0x4ce>
 80124b4:	4621      	mov	r1, r4
 80124b6:	463e      	mov	r6, r7
 80124b8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80124bc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80124c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80124c4:	ee14 2a90 	vmov	r2, s9
 80124c8:	3230      	adds	r2, #48	@ 0x30
 80124ca:	f806 2b01 	strb.w	r2, [r6], #1
 80124ce:	42a6      	cmp	r6, r4
 80124d0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80124d4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80124d8:	d119      	bne.n	801250e <_dtoa_r+0x566>
 80124da:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80124de:	ee37 4b05 	vadd.f64	d4, d7, d5
 80124e2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80124e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ea:	dc4a      	bgt.n	8012582 <_dtoa_r+0x5da>
 80124ec:	ee35 5b47 	vsub.f64	d5, d5, d7
 80124f0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80124f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f8:	f57f af31 	bpl.w	801235e <_dtoa_r+0x3b6>
 80124fc:	460e      	mov	r6, r1
 80124fe:	3901      	subs	r1, #1
 8012500:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012504:	2b30      	cmp	r3, #48	@ 0x30
 8012506:	d0f9      	beq.n	80124fc <_dtoa_r+0x554>
 8012508:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801250c:	e027      	b.n	801255e <_dtoa_r+0x5b6>
 801250e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012512:	e7d5      	b.n	80124c0 <_dtoa_r+0x518>
 8012514:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012518:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801251c:	463e      	mov	r6, r7
 801251e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012522:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012526:	ee15 3a10 	vmov	r3, s10
 801252a:	3330      	adds	r3, #48	@ 0x30
 801252c:	f806 3b01 	strb.w	r3, [r6], #1
 8012530:	1bf3      	subs	r3, r6, r7
 8012532:	459a      	cmp	sl, r3
 8012534:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012538:	eea3 7b46 	vfms.f64	d7, d3, d6
 801253c:	d132      	bne.n	80125a4 <_dtoa_r+0x5fc>
 801253e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012542:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801254a:	dc18      	bgt.n	801257e <_dtoa_r+0x5d6>
 801254c:	eeb4 7b46 	vcmp.f64	d7, d6
 8012550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012554:	d103      	bne.n	801255e <_dtoa_r+0x5b6>
 8012556:	ee15 3a10 	vmov	r3, s10
 801255a:	07db      	lsls	r3, r3, #31
 801255c:	d40f      	bmi.n	801257e <_dtoa_r+0x5d6>
 801255e:	9901      	ldr	r1, [sp, #4]
 8012560:	4648      	mov	r0, r9
 8012562:	f000 fbbf 	bl	8012ce4 <_Bfree>
 8012566:	2300      	movs	r3, #0
 8012568:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801256a:	7033      	strb	r3, [r6, #0]
 801256c:	f108 0301 	add.w	r3, r8, #1
 8012570:	6013      	str	r3, [r2, #0]
 8012572:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012574:	2b00      	cmp	r3, #0
 8012576:	f000 824b 	beq.w	8012a10 <_dtoa_r+0xa68>
 801257a:	601e      	str	r6, [r3, #0]
 801257c:	e248      	b.n	8012a10 <_dtoa_r+0xa68>
 801257e:	f8cd 8014 	str.w	r8, [sp, #20]
 8012582:	4633      	mov	r3, r6
 8012584:	461e      	mov	r6, r3
 8012586:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801258a:	2a39      	cmp	r2, #57	@ 0x39
 801258c:	d106      	bne.n	801259c <_dtoa_r+0x5f4>
 801258e:	429f      	cmp	r7, r3
 8012590:	d1f8      	bne.n	8012584 <_dtoa_r+0x5dc>
 8012592:	9a05      	ldr	r2, [sp, #20]
 8012594:	3201      	adds	r2, #1
 8012596:	9205      	str	r2, [sp, #20]
 8012598:	2230      	movs	r2, #48	@ 0x30
 801259a:	703a      	strb	r2, [r7, #0]
 801259c:	781a      	ldrb	r2, [r3, #0]
 801259e:	3201      	adds	r2, #1
 80125a0:	701a      	strb	r2, [r3, #0]
 80125a2:	e7b1      	b.n	8012508 <_dtoa_r+0x560>
 80125a4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80125a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80125ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b0:	d1b5      	bne.n	801251e <_dtoa_r+0x576>
 80125b2:	e7d4      	b.n	801255e <_dtoa_r+0x5b6>
 80125b4:	08017540 	.word	0x08017540
 80125b8:	08017518 	.word	0x08017518
 80125bc:	9908      	ldr	r1, [sp, #32]
 80125be:	2900      	cmp	r1, #0
 80125c0:	f000 80e9 	beq.w	8012796 <_dtoa_r+0x7ee>
 80125c4:	9907      	ldr	r1, [sp, #28]
 80125c6:	2901      	cmp	r1, #1
 80125c8:	f300 80cb 	bgt.w	8012762 <_dtoa_r+0x7ba>
 80125cc:	2d00      	cmp	r5, #0
 80125ce:	f000 80c4 	beq.w	801275a <_dtoa_r+0x7b2>
 80125d2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80125d6:	9e04      	ldr	r6, [sp, #16]
 80125d8:	461c      	mov	r4, r3
 80125da:	9305      	str	r3, [sp, #20]
 80125dc:	9b04      	ldr	r3, [sp, #16]
 80125de:	4413      	add	r3, r2
 80125e0:	9304      	str	r3, [sp, #16]
 80125e2:	9b06      	ldr	r3, [sp, #24]
 80125e4:	2101      	movs	r1, #1
 80125e6:	4413      	add	r3, r2
 80125e8:	4648      	mov	r0, r9
 80125ea:	9306      	str	r3, [sp, #24]
 80125ec:	f000 fc78 	bl	8012ee0 <__i2b>
 80125f0:	9b05      	ldr	r3, [sp, #20]
 80125f2:	4605      	mov	r5, r0
 80125f4:	b166      	cbz	r6, 8012610 <_dtoa_r+0x668>
 80125f6:	9a06      	ldr	r2, [sp, #24]
 80125f8:	2a00      	cmp	r2, #0
 80125fa:	dd09      	ble.n	8012610 <_dtoa_r+0x668>
 80125fc:	42b2      	cmp	r2, r6
 80125fe:	9904      	ldr	r1, [sp, #16]
 8012600:	bfa8      	it	ge
 8012602:	4632      	movge	r2, r6
 8012604:	1a89      	subs	r1, r1, r2
 8012606:	9104      	str	r1, [sp, #16]
 8012608:	9906      	ldr	r1, [sp, #24]
 801260a:	1ab6      	subs	r6, r6, r2
 801260c:	1a8a      	subs	r2, r1, r2
 801260e:	9206      	str	r2, [sp, #24]
 8012610:	b30b      	cbz	r3, 8012656 <_dtoa_r+0x6ae>
 8012612:	9a08      	ldr	r2, [sp, #32]
 8012614:	2a00      	cmp	r2, #0
 8012616:	f000 80c5 	beq.w	80127a4 <_dtoa_r+0x7fc>
 801261a:	2c00      	cmp	r4, #0
 801261c:	f000 80bf 	beq.w	801279e <_dtoa_r+0x7f6>
 8012620:	4629      	mov	r1, r5
 8012622:	4622      	mov	r2, r4
 8012624:	4648      	mov	r0, r9
 8012626:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012628:	f000 fd12 	bl	8013050 <__pow5mult>
 801262c:	9a01      	ldr	r2, [sp, #4]
 801262e:	4601      	mov	r1, r0
 8012630:	4605      	mov	r5, r0
 8012632:	4648      	mov	r0, r9
 8012634:	f000 fc6a 	bl	8012f0c <__multiply>
 8012638:	9901      	ldr	r1, [sp, #4]
 801263a:	9005      	str	r0, [sp, #20]
 801263c:	4648      	mov	r0, r9
 801263e:	f000 fb51 	bl	8012ce4 <_Bfree>
 8012642:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012644:	1b1b      	subs	r3, r3, r4
 8012646:	f000 80b0 	beq.w	80127aa <_dtoa_r+0x802>
 801264a:	9905      	ldr	r1, [sp, #20]
 801264c:	461a      	mov	r2, r3
 801264e:	4648      	mov	r0, r9
 8012650:	f000 fcfe 	bl	8013050 <__pow5mult>
 8012654:	9001      	str	r0, [sp, #4]
 8012656:	2101      	movs	r1, #1
 8012658:	4648      	mov	r0, r9
 801265a:	f000 fc41 	bl	8012ee0 <__i2b>
 801265e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012660:	4604      	mov	r4, r0
 8012662:	2b00      	cmp	r3, #0
 8012664:	f000 81da 	beq.w	8012a1c <_dtoa_r+0xa74>
 8012668:	461a      	mov	r2, r3
 801266a:	4601      	mov	r1, r0
 801266c:	4648      	mov	r0, r9
 801266e:	f000 fcef 	bl	8013050 <__pow5mult>
 8012672:	9b07      	ldr	r3, [sp, #28]
 8012674:	2b01      	cmp	r3, #1
 8012676:	4604      	mov	r4, r0
 8012678:	f300 80a0 	bgt.w	80127bc <_dtoa_r+0x814>
 801267c:	9b02      	ldr	r3, [sp, #8]
 801267e:	2b00      	cmp	r3, #0
 8012680:	f040 8096 	bne.w	80127b0 <_dtoa_r+0x808>
 8012684:	9b03      	ldr	r3, [sp, #12]
 8012686:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801268a:	2a00      	cmp	r2, #0
 801268c:	f040 8092 	bne.w	80127b4 <_dtoa_r+0x80c>
 8012690:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012694:	0d12      	lsrs	r2, r2, #20
 8012696:	0512      	lsls	r2, r2, #20
 8012698:	2a00      	cmp	r2, #0
 801269a:	f000 808d 	beq.w	80127b8 <_dtoa_r+0x810>
 801269e:	9b04      	ldr	r3, [sp, #16]
 80126a0:	3301      	adds	r3, #1
 80126a2:	9304      	str	r3, [sp, #16]
 80126a4:	9b06      	ldr	r3, [sp, #24]
 80126a6:	3301      	adds	r3, #1
 80126a8:	9306      	str	r3, [sp, #24]
 80126aa:	2301      	movs	r3, #1
 80126ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80126ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	f000 81b9 	beq.w	8012a28 <_dtoa_r+0xa80>
 80126b6:	6922      	ldr	r2, [r4, #16]
 80126b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80126bc:	6910      	ldr	r0, [r2, #16]
 80126be:	f000 fbc3 	bl	8012e48 <__hi0bits>
 80126c2:	f1c0 0020 	rsb	r0, r0, #32
 80126c6:	9b06      	ldr	r3, [sp, #24]
 80126c8:	4418      	add	r0, r3
 80126ca:	f010 001f 	ands.w	r0, r0, #31
 80126ce:	f000 8081 	beq.w	80127d4 <_dtoa_r+0x82c>
 80126d2:	f1c0 0220 	rsb	r2, r0, #32
 80126d6:	2a04      	cmp	r2, #4
 80126d8:	dd73      	ble.n	80127c2 <_dtoa_r+0x81a>
 80126da:	9b04      	ldr	r3, [sp, #16]
 80126dc:	f1c0 001c 	rsb	r0, r0, #28
 80126e0:	4403      	add	r3, r0
 80126e2:	9304      	str	r3, [sp, #16]
 80126e4:	9b06      	ldr	r3, [sp, #24]
 80126e6:	4406      	add	r6, r0
 80126e8:	4403      	add	r3, r0
 80126ea:	9306      	str	r3, [sp, #24]
 80126ec:	9b04      	ldr	r3, [sp, #16]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	dd05      	ble.n	80126fe <_dtoa_r+0x756>
 80126f2:	9901      	ldr	r1, [sp, #4]
 80126f4:	461a      	mov	r2, r3
 80126f6:	4648      	mov	r0, r9
 80126f8:	f000 fd04 	bl	8013104 <__lshift>
 80126fc:	9001      	str	r0, [sp, #4]
 80126fe:	9b06      	ldr	r3, [sp, #24]
 8012700:	2b00      	cmp	r3, #0
 8012702:	dd05      	ble.n	8012710 <_dtoa_r+0x768>
 8012704:	4621      	mov	r1, r4
 8012706:	461a      	mov	r2, r3
 8012708:	4648      	mov	r0, r9
 801270a:	f000 fcfb 	bl	8013104 <__lshift>
 801270e:	4604      	mov	r4, r0
 8012710:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012712:	2b00      	cmp	r3, #0
 8012714:	d060      	beq.n	80127d8 <_dtoa_r+0x830>
 8012716:	9801      	ldr	r0, [sp, #4]
 8012718:	4621      	mov	r1, r4
 801271a:	f000 fd5f 	bl	80131dc <__mcmp>
 801271e:	2800      	cmp	r0, #0
 8012720:	da5a      	bge.n	80127d8 <_dtoa_r+0x830>
 8012722:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8012726:	9305      	str	r3, [sp, #20]
 8012728:	9901      	ldr	r1, [sp, #4]
 801272a:	2300      	movs	r3, #0
 801272c:	220a      	movs	r2, #10
 801272e:	4648      	mov	r0, r9
 8012730:	f000 fafa 	bl	8012d28 <__multadd>
 8012734:	9b08      	ldr	r3, [sp, #32]
 8012736:	9001      	str	r0, [sp, #4]
 8012738:	2b00      	cmp	r3, #0
 801273a:	f000 8177 	beq.w	8012a2c <_dtoa_r+0xa84>
 801273e:	4629      	mov	r1, r5
 8012740:	2300      	movs	r3, #0
 8012742:	220a      	movs	r2, #10
 8012744:	4648      	mov	r0, r9
 8012746:	f000 faef 	bl	8012d28 <__multadd>
 801274a:	f1bb 0f00 	cmp.w	fp, #0
 801274e:	4605      	mov	r5, r0
 8012750:	dc6e      	bgt.n	8012830 <_dtoa_r+0x888>
 8012752:	9b07      	ldr	r3, [sp, #28]
 8012754:	2b02      	cmp	r3, #2
 8012756:	dc48      	bgt.n	80127ea <_dtoa_r+0x842>
 8012758:	e06a      	b.n	8012830 <_dtoa_r+0x888>
 801275a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801275c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012760:	e739      	b.n	80125d6 <_dtoa_r+0x62e>
 8012762:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8012766:	42a3      	cmp	r3, r4
 8012768:	db07      	blt.n	801277a <_dtoa_r+0x7d2>
 801276a:	f1ba 0f00 	cmp.w	sl, #0
 801276e:	eba3 0404 	sub.w	r4, r3, r4
 8012772:	db0b      	blt.n	801278c <_dtoa_r+0x7e4>
 8012774:	9e04      	ldr	r6, [sp, #16]
 8012776:	4652      	mov	r2, sl
 8012778:	e72f      	b.n	80125da <_dtoa_r+0x632>
 801277a:	1ae2      	subs	r2, r4, r3
 801277c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801277e:	9e04      	ldr	r6, [sp, #16]
 8012780:	4413      	add	r3, r2
 8012782:	930a      	str	r3, [sp, #40]	@ 0x28
 8012784:	4652      	mov	r2, sl
 8012786:	4623      	mov	r3, r4
 8012788:	2400      	movs	r4, #0
 801278a:	e726      	b.n	80125da <_dtoa_r+0x632>
 801278c:	9a04      	ldr	r2, [sp, #16]
 801278e:	eba2 060a 	sub.w	r6, r2, sl
 8012792:	2200      	movs	r2, #0
 8012794:	e721      	b.n	80125da <_dtoa_r+0x632>
 8012796:	9e04      	ldr	r6, [sp, #16]
 8012798:	9d08      	ldr	r5, [sp, #32]
 801279a:	461c      	mov	r4, r3
 801279c:	e72a      	b.n	80125f4 <_dtoa_r+0x64c>
 801279e:	9a01      	ldr	r2, [sp, #4]
 80127a0:	9205      	str	r2, [sp, #20]
 80127a2:	e752      	b.n	801264a <_dtoa_r+0x6a2>
 80127a4:	9901      	ldr	r1, [sp, #4]
 80127a6:	461a      	mov	r2, r3
 80127a8:	e751      	b.n	801264e <_dtoa_r+0x6a6>
 80127aa:	9b05      	ldr	r3, [sp, #20]
 80127ac:	9301      	str	r3, [sp, #4]
 80127ae:	e752      	b.n	8012656 <_dtoa_r+0x6ae>
 80127b0:	2300      	movs	r3, #0
 80127b2:	e77b      	b.n	80126ac <_dtoa_r+0x704>
 80127b4:	9b02      	ldr	r3, [sp, #8]
 80127b6:	e779      	b.n	80126ac <_dtoa_r+0x704>
 80127b8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80127ba:	e778      	b.n	80126ae <_dtoa_r+0x706>
 80127bc:	2300      	movs	r3, #0
 80127be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80127c0:	e779      	b.n	80126b6 <_dtoa_r+0x70e>
 80127c2:	d093      	beq.n	80126ec <_dtoa_r+0x744>
 80127c4:	9b04      	ldr	r3, [sp, #16]
 80127c6:	321c      	adds	r2, #28
 80127c8:	4413      	add	r3, r2
 80127ca:	9304      	str	r3, [sp, #16]
 80127cc:	9b06      	ldr	r3, [sp, #24]
 80127ce:	4416      	add	r6, r2
 80127d0:	4413      	add	r3, r2
 80127d2:	e78a      	b.n	80126ea <_dtoa_r+0x742>
 80127d4:	4602      	mov	r2, r0
 80127d6:	e7f5      	b.n	80127c4 <_dtoa_r+0x81c>
 80127d8:	f1ba 0f00 	cmp.w	sl, #0
 80127dc:	f8cd 8014 	str.w	r8, [sp, #20]
 80127e0:	46d3      	mov	fp, sl
 80127e2:	dc21      	bgt.n	8012828 <_dtoa_r+0x880>
 80127e4:	9b07      	ldr	r3, [sp, #28]
 80127e6:	2b02      	cmp	r3, #2
 80127e8:	dd1e      	ble.n	8012828 <_dtoa_r+0x880>
 80127ea:	f1bb 0f00 	cmp.w	fp, #0
 80127ee:	f47f addc 	bne.w	80123aa <_dtoa_r+0x402>
 80127f2:	4621      	mov	r1, r4
 80127f4:	465b      	mov	r3, fp
 80127f6:	2205      	movs	r2, #5
 80127f8:	4648      	mov	r0, r9
 80127fa:	f000 fa95 	bl	8012d28 <__multadd>
 80127fe:	4601      	mov	r1, r0
 8012800:	4604      	mov	r4, r0
 8012802:	9801      	ldr	r0, [sp, #4]
 8012804:	f000 fcea 	bl	80131dc <__mcmp>
 8012808:	2800      	cmp	r0, #0
 801280a:	f77f adce 	ble.w	80123aa <_dtoa_r+0x402>
 801280e:	463e      	mov	r6, r7
 8012810:	2331      	movs	r3, #49	@ 0x31
 8012812:	f806 3b01 	strb.w	r3, [r6], #1
 8012816:	9b05      	ldr	r3, [sp, #20]
 8012818:	3301      	adds	r3, #1
 801281a:	9305      	str	r3, [sp, #20]
 801281c:	e5c9      	b.n	80123b2 <_dtoa_r+0x40a>
 801281e:	f8cd 8014 	str.w	r8, [sp, #20]
 8012822:	4654      	mov	r4, sl
 8012824:	4625      	mov	r5, r4
 8012826:	e7f2      	b.n	801280e <_dtoa_r+0x866>
 8012828:	9b08      	ldr	r3, [sp, #32]
 801282a:	2b00      	cmp	r3, #0
 801282c:	f000 8102 	beq.w	8012a34 <_dtoa_r+0xa8c>
 8012830:	2e00      	cmp	r6, #0
 8012832:	dd05      	ble.n	8012840 <_dtoa_r+0x898>
 8012834:	4629      	mov	r1, r5
 8012836:	4632      	mov	r2, r6
 8012838:	4648      	mov	r0, r9
 801283a:	f000 fc63 	bl	8013104 <__lshift>
 801283e:	4605      	mov	r5, r0
 8012840:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012842:	2b00      	cmp	r3, #0
 8012844:	d058      	beq.n	80128f8 <_dtoa_r+0x950>
 8012846:	6869      	ldr	r1, [r5, #4]
 8012848:	4648      	mov	r0, r9
 801284a:	f000 fa0b 	bl	8012c64 <_Balloc>
 801284e:	4606      	mov	r6, r0
 8012850:	b928      	cbnz	r0, 801285e <_dtoa_r+0x8b6>
 8012852:	4b82      	ldr	r3, [pc, #520]	@ (8012a5c <_dtoa_r+0xab4>)
 8012854:	4602      	mov	r2, r0
 8012856:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801285a:	f7ff bbbe 	b.w	8011fda <_dtoa_r+0x32>
 801285e:	692a      	ldr	r2, [r5, #16]
 8012860:	3202      	adds	r2, #2
 8012862:	0092      	lsls	r2, r2, #2
 8012864:	f105 010c 	add.w	r1, r5, #12
 8012868:	300c      	adds	r0, #12
 801286a:	f7ff fb00 	bl	8011e6e <memcpy>
 801286e:	2201      	movs	r2, #1
 8012870:	4631      	mov	r1, r6
 8012872:	4648      	mov	r0, r9
 8012874:	f000 fc46 	bl	8013104 <__lshift>
 8012878:	1c7b      	adds	r3, r7, #1
 801287a:	9304      	str	r3, [sp, #16]
 801287c:	eb07 030b 	add.w	r3, r7, fp
 8012880:	9309      	str	r3, [sp, #36]	@ 0x24
 8012882:	9b02      	ldr	r3, [sp, #8]
 8012884:	f003 0301 	and.w	r3, r3, #1
 8012888:	46a8      	mov	r8, r5
 801288a:	9308      	str	r3, [sp, #32]
 801288c:	4605      	mov	r5, r0
 801288e:	9b04      	ldr	r3, [sp, #16]
 8012890:	9801      	ldr	r0, [sp, #4]
 8012892:	4621      	mov	r1, r4
 8012894:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8012898:	f7ff fafe 	bl	8011e98 <quorem>
 801289c:	4641      	mov	r1, r8
 801289e:	9002      	str	r0, [sp, #8]
 80128a0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80128a4:	9801      	ldr	r0, [sp, #4]
 80128a6:	f000 fc99 	bl	80131dc <__mcmp>
 80128aa:	462a      	mov	r2, r5
 80128ac:	9006      	str	r0, [sp, #24]
 80128ae:	4621      	mov	r1, r4
 80128b0:	4648      	mov	r0, r9
 80128b2:	f000 fcaf 	bl	8013214 <__mdiff>
 80128b6:	68c2      	ldr	r2, [r0, #12]
 80128b8:	4606      	mov	r6, r0
 80128ba:	b9fa      	cbnz	r2, 80128fc <_dtoa_r+0x954>
 80128bc:	4601      	mov	r1, r0
 80128be:	9801      	ldr	r0, [sp, #4]
 80128c0:	f000 fc8c 	bl	80131dc <__mcmp>
 80128c4:	4602      	mov	r2, r0
 80128c6:	4631      	mov	r1, r6
 80128c8:	4648      	mov	r0, r9
 80128ca:	920a      	str	r2, [sp, #40]	@ 0x28
 80128cc:	f000 fa0a 	bl	8012ce4 <_Bfree>
 80128d0:	9b07      	ldr	r3, [sp, #28]
 80128d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80128d4:	9e04      	ldr	r6, [sp, #16]
 80128d6:	ea42 0103 	orr.w	r1, r2, r3
 80128da:	9b08      	ldr	r3, [sp, #32]
 80128dc:	4319      	orrs	r1, r3
 80128de:	d10f      	bne.n	8012900 <_dtoa_r+0x958>
 80128e0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80128e4:	d028      	beq.n	8012938 <_dtoa_r+0x990>
 80128e6:	9b06      	ldr	r3, [sp, #24]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	dd02      	ble.n	80128f2 <_dtoa_r+0x94a>
 80128ec:	9b02      	ldr	r3, [sp, #8]
 80128ee:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80128f2:	f88b a000 	strb.w	sl, [fp]
 80128f6:	e55e      	b.n	80123b6 <_dtoa_r+0x40e>
 80128f8:	4628      	mov	r0, r5
 80128fa:	e7bd      	b.n	8012878 <_dtoa_r+0x8d0>
 80128fc:	2201      	movs	r2, #1
 80128fe:	e7e2      	b.n	80128c6 <_dtoa_r+0x91e>
 8012900:	9b06      	ldr	r3, [sp, #24]
 8012902:	2b00      	cmp	r3, #0
 8012904:	db04      	blt.n	8012910 <_dtoa_r+0x968>
 8012906:	9907      	ldr	r1, [sp, #28]
 8012908:	430b      	orrs	r3, r1
 801290a:	9908      	ldr	r1, [sp, #32]
 801290c:	430b      	orrs	r3, r1
 801290e:	d120      	bne.n	8012952 <_dtoa_r+0x9aa>
 8012910:	2a00      	cmp	r2, #0
 8012912:	ddee      	ble.n	80128f2 <_dtoa_r+0x94a>
 8012914:	9901      	ldr	r1, [sp, #4]
 8012916:	2201      	movs	r2, #1
 8012918:	4648      	mov	r0, r9
 801291a:	f000 fbf3 	bl	8013104 <__lshift>
 801291e:	4621      	mov	r1, r4
 8012920:	9001      	str	r0, [sp, #4]
 8012922:	f000 fc5b 	bl	80131dc <__mcmp>
 8012926:	2800      	cmp	r0, #0
 8012928:	dc03      	bgt.n	8012932 <_dtoa_r+0x98a>
 801292a:	d1e2      	bne.n	80128f2 <_dtoa_r+0x94a>
 801292c:	f01a 0f01 	tst.w	sl, #1
 8012930:	d0df      	beq.n	80128f2 <_dtoa_r+0x94a>
 8012932:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012936:	d1d9      	bne.n	80128ec <_dtoa_r+0x944>
 8012938:	2339      	movs	r3, #57	@ 0x39
 801293a:	f88b 3000 	strb.w	r3, [fp]
 801293e:	4633      	mov	r3, r6
 8012940:	461e      	mov	r6, r3
 8012942:	3b01      	subs	r3, #1
 8012944:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012948:	2a39      	cmp	r2, #57	@ 0x39
 801294a:	d052      	beq.n	80129f2 <_dtoa_r+0xa4a>
 801294c:	3201      	adds	r2, #1
 801294e:	701a      	strb	r2, [r3, #0]
 8012950:	e531      	b.n	80123b6 <_dtoa_r+0x40e>
 8012952:	2a00      	cmp	r2, #0
 8012954:	dd07      	ble.n	8012966 <_dtoa_r+0x9be>
 8012956:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801295a:	d0ed      	beq.n	8012938 <_dtoa_r+0x990>
 801295c:	f10a 0301 	add.w	r3, sl, #1
 8012960:	f88b 3000 	strb.w	r3, [fp]
 8012964:	e527      	b.n	80123b6 <_dtoa_r+0x40e>
 8012966:	9b04      	ldr	r3, [sp, #16]
 8012968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801296a:	f803 ac01 	strb.w	sl, [r3, #-1]
 801296e:	4293      	cmp	r3, r2
 8012970:	d029      	beq.n	80129c6 <_dtoa_r+0xa1e>
 8012972:	9901      	ldr	r1, [sp, #4]
 8012974:	2300      	movs	r3, #0
 8012976:	220a      	movs	r2, #10
 8012978:	4648      	mov	r0, r9
 801297a:	f000 f9d5 	bl	8012d28 <__multadd>
 801297e:	45a8      	cmp	r8, r5
 8012980:	9001      	str	r0, [sp, #4]
 8012982:	f04f 0300 	mov.w	r3, #0
 8012986:	f04f 020a 	mov.w	r2, #10
 801298a:	4641      	mov	r1, r8
 801298c:	4648      	mov	r0, r9
 801298e:	d107      	bne.n	80129a0 <_dtoa_r+0x9f8>
 8012990:	f000 f9ca 	bl	8012d28 <__multadd>
 8012994:	4680      	mov	r8, r0
 8012996:	4605      	mov	r5, r0
 8012998:	9b04      	ldr	r3, [sp, #16]
 801299a:	3301      	adds	r3, #1
 801299c:	9304      	str	r3, [sp, #16]
 801299e:	e776      	b.n	801288e <_dtoa_r+0x8e6>
 80129a0:	f000 f9c2 	bl	8012d28 <__multadd>
 80129a4:	4629      	mov	r1, r5
 80129a6:	4680      	mov	r8, r0
 80129a8:	2300      	movs	r3, #0
 80129aa:	220a      	movs	r2, #10
 80129ac:	4648      	mov	r0, r9
 80129ae:	f000 f9bb 	bl	8012d28 <__multadd>
 80129b2:	4605      	mov	r5, r0
 80129b4:	e7f0      	b.n	8012998 <_dtoa_r+0x9f0>
 80129b6:	f1bb 0f00 	cmp.w	fp, #0
 80129ba:	bfcc      	ite	gt
 80129bc:	465e      	movgt	r6, fp
 80129be:	2601      	movle	r6, #1
 80129c0:	443e      	add	r6, r7
 80129c2:	f04f 0800 	mov.w	r8, #0
 80129c6:	9901      	ldr	r1, [sp, #4]
 80129c8:	2201      	movs	r2, #1
 80129ca:	4648      	mov	r0, r9
 80129cc:	f000 fb9a 	bl	8013104 <__lshift>
 80129d0:	4621      	mov	r1, r4
 80129d2:	9001      	str	r0, [sp, #4]
 80129d4:	f000 fc02 	bl	80131dc <__mcmp>
 80129d8:	2800      	cmp	r0, #0
 80129da:	dcb0      	bgt.n	801293e <_dtoa_r+0x996>
 80129dc:	d102      	bne.n	80129e4 <_dtoa_r+0xa3c>
 80129de:	f01a 0f01 	tst.w	sl, #1
 80129e2:	d1ac      	bne.n	801293e <_dtoa_r+0x996>
 80129e4:	4633      	mov	r3, r6
 80129e6:	461e      	mov	r6, r3
 80129e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80129ec:	2a30      	cmp	r2, #48	@ 0x30
 80129ee:	d0fa      	beq.n	80129e6 <_dtoa_r+0xa3e>
 80129f0:	e4e1      	b.n	80123b6 <_dtoa_r+0x40e>
 80129f2:	429f      	cmp	r7, r3
 80129f4:	d1a4      	bne.n	8012940 <_dtoa_r+0x998>
 80129f6:	9b05      	ldr	r3, [sp, #20]
 80129f8:	3301      	adds	r3, #1
 80129fa:	9305      	str	r3, [sp, #20]
 80129fc:	2331      	movs	r3, #49	@ 0x31
 80129fe:	703b      	strb	r3, [r7, #0]
 8012a00:	e4d9      	b.n	80123b6 <_dtoa_r+0x40e>
 8012a02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012a04:	4f16      	ldr	r7, [pc, #88]	@ (8012a60 <_dtoa_r+0xab8>)
 8012a06:	b11b      	cbz	r3, 8012a10 <_dtoa_r+0xa68>
 8012a08:	f107 0308 	add.w	r3, r7, #8
 8012a0c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012a0e:	6013      	str	r3, [r2, #0]
 8012a10:	4638      	mov	r0, r7
 8012a12:	b011      	add	sp, #68	@ 0x44
 8012a14:	ecbd 8b02 	vpop	{d8}
 8012a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a1c:	9b07      	ldr	r3, [sp, #28]
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	f77f ae2c 	ble.w	801267c <_dtoa_r+0x6d4>
 8012a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012a28:	2001      	movs	r0, #1
 8012a2a:	e64c      	b.n	80126c6 <_dtoa_r+0x71e>
 8012a2c:	f1bb 0f00 	cmp.w	fp, #0
 8012a30:	f77f aed8 	ble.w	80127e4 <_dtoa_r+0x83c>
 8012a34:	463e      	mov	r6, r7
 8012a36:	9801      	ldr	r0, [sp, #4]
 8012a38:	4621      	mov	r1, r4
 8012a3a:	f7ff fa2d 	bl	8011e98 <quorem>
 8012a3e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012a42:	f806 ab01 	strb.w	sl, [r6], #1
 8012a46:	1bf2      	subs	r2, r6, r7
 8012a48:	4593      	cmp	fp, r2
 8012a4a:	ddb4      	ble.n	80129b6 <_dtoa_r+0xa0e>
 8012a4c:	9901      	ldr	r1, [sp, #4]
 8012a4e:	2300      	movs	r3, #0
 8012a50:	220a      	movs	r2, #10
 8012a52:	4648      	mov	r0, r9
 8012a54:	f000 f968 	bl	8012d28 <__multadd>
 8012a58:	9001      	str	r0, [sp, #4]
 8012a5a:	e7ec      	b.n	8012a36 <_dtoa_r+0xa8e>
 8012a5c:	080173cb 	.word	0x080173cb
 8012a60:	0801734f 	.word	0x0801734f

08012a64 <_free_r>:
 8012a64:	b538      	push	{r3, r4, r5, lr}
 8012a66:	4605      	mov	r5, r0
 8012a68:	2900      	cmp	r1, #0
 8012a6a:	d041      	beq.n	8012af0 <_free_r+0x8c>
 8012a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a70:	1f0c      	subs	r4, r1, #4
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	bfb8      	it	lt
 8012a76:	18e4      	addlt	r4, r4, r3
 8012a78:	f000 f8e8 	bl	8012c4c <__malloc_lock>
 8012a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8012af4 <_free_r+0x90>)
 8012a7e:	6813      	ldr	r3, [r2, #0]
 8012a80:	b933      	cbnz	r3, 8012a90 <_free_r+0x2c>
 8012a82:	6063      	str	r3, [r4, #4]
 8012a84:	6014      	str	r4, [r2, #0]
 8012a86:	4628      	mov	r0, r5
 8012a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a8c:	f000 b8e4 	b.w	8012c58 <__malloc_unlock>
 8012a90:	42a3      	cmp	r3, r4
 8012a92:	d908      	bls.n	8012aa6 <_free_r+0x42>
 8012a94:	6820      	ldr	r0, [r4, #0]
 8012a96:	1821      	adds	r1, r4, r0
 8012a98:	428b      	cmp	r3, r1
 8012a9a:	bf01      	itttt	eq
 8012a9c:	6819      	ldreq	r1, [r3, #0]
 8012a9e:	685b      	ldreq	r3, [r3, #4]
 8012aa0:	1809      	addeq	r1, r1, r0
 8012aa2:	6021      	streq	r1, [r4, #0]
 8012aa4:	e7ed      	b.n	8012a82 <_free_r+0x1e>
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	685b      	ldr	r3, [r3, #4]
 8012aaa:	b10b      	cbz	r3, 8012ab0 <_free_r+0x4c>
 8012aac:	42a3      	cmp	r3, r4
 8012aae:	d9fa      	bls.n	8012aa6 <_free_r+0x42>
 8012ab0:	6811      	ldr	r1, [r2, #0]
 8012ab2:	1850      	adds	r0, r2, r1
 8012ab4:	42a0      	cmp	r0, r4
 8012ab6:	d10b      	bne.n	8012ad0 <_free_r+0x6c>
 8012ab8:	6820      	ldr	r0, [r4, #0]
 8012aba:	4401      	add	r1, r0
 8012abc:	1850      	adds	r0, r2, r1
 8012abe:	4283      	cmp	r3, r0
 8012ac0:	6011      	str	r1, [r2, #0]
 8012ac2:	d1e0      	bne.n	8012a86 <_free_r+0x22>
 8012ac4:	6818      	ldr	r0, [r3, #0]
 8012ac6:	685b      	ldr	r3, [r3, #4]
 8012ac8:	6053      	str	r3, [r2, #4]
 8012aca:	4408      	add	r0, r1
 8012acc:	6010      	str	r0, [r2, #0]
 8012ace:	e7da      	b.n	8012a86 <_free_r+0x22>
 8012ad0:	d902      	bls.n	8012ad8 <_free_r+0x74>
 8012ad2:	230c      	movs	r3, #12
 8012ad4:	602b      	str	r3, [r5, #0]
 8012ad6:	e7d6      	b.n	8012a86 <_free_r+0x22>
 8012ad8:	6820      	ldr	r0, [r4, #0]
 8012ada:	1821      	adds	r1, r4, r0
 8012adc:	428b      	cmp	r3, r1
 8012ade:	bf04      	itt	eq
 8012ae0:	6819      	ldreq	r1, [r3, #0]
 8012ae2:	685b      	ldreq	r3, [r3, #4]
 8012ae4:	6063      	str	r3, [r4, #4]
 8012ae6:	bf04      	itt	eq
 8012ae8:	1809      	addeq	r1, r1, r0
 8012aea:	6021      	streq	r1, [r4, #0]
 8012aec:	6054      	str	r4, [r2, #4]
 8012aee:	e7ca      	b.n	8012a86 <_free_r+0x22>
 8012af0:	bd38      	pop	{r3, r4, r5, pc}
 8012af2:	bf00      	nop
 8012af4:	2400088c 	.word	0x2400088c

08012af8 <malloc>:
 8012af8:	4b02      	ldr	r3, [pc, #8]	@ (8012b04 <malloc+0xc>)
 8012afa:	4601      	mov	r1, r0
 8012afc:	6818      	ldr	r0, [r3, #0]
 8012afe:	f000 b825 	b.w	8012b4c <_malloc_r>
 8012b02:	bf00      	nop
 8012b04:	24000028 	.word	0x24000028

08012b08 <sbrk_aligned>:
 8012b08:	b570      	push	{r4, r5, r6, lr}
 8012b0a:	4e0f      	ldr	r6, [pc, #60]	@ (8012b48 <sbrk_aligned+0x40>)
 8012b0c:	460c      	mov	r4, r1
 8012b0e:	6831      	ldr	r1, [r6, #0]
 8012b10:	4605      	mov	r5, r0
 8012b12:	b911      	cbnz	r1, 8012b1a <sbrk_aligned+0x12>
 8012b14:	f002 fb14 	bl	8015140 <_sbrk_r>
 8012b18:	6030      	str	r0, [r6, #0]
 8012b1a:	4621      	mov	r1, r4
 8012b1c:	4628      	mov	r0, r5
 8012b1e:	f002 fb0f 	bl	8015140 <_sbrk_r>
 8012b22:	1c43      	adds	r3, r0, #1
 8012b24:	d103      	bne.n	8012b2e <sbrk_aligned+0x26>
 8012b26:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012b2a:	4620      	mov	r0, r4
 8012b2c:	bd70      	pop	{r4, r5, r6, pc}
 8012b2e:	1cc4      	adds	r4, r0, #3
 8012b30:	f024 0403 	bic.w	r4, r4, #3
 8012b34:	42a0      	cmp	r0, r4
 8012b36:	d0f8      	beq.n	8012b2a <sbrk_aligned+0x22>
 8012b38:	1a21      	subs	r1, r4, r0
 8012b3a:	4628      	mov	r0, r5
 8012b3c:	f002 fb00 	bl	8015140 <_sbrk_r>
 8012b40:	3001      	adds	r0, #1
 8012b42:	d1f2      	bne.n	8012b2a <sbrk_aligned+0x22>
 8012b44:	e7ef      	b.n	8012b26 <sbrk_aligned+0x1e>
 8012b46:	bf00      	nop
 8012b48:	24000888 	.word	0x24000888

08012b4c <_malloc_r>:
 8012b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b50:	1ccd      	adds	r5, r1, #3
 8012b52:	f025 0503 	bic.w	r5, r5, #3
 8012b56:	3508      	adds	r5, #8
 8012b58:	2d0c      	cmp	r5, #12
 8012b5a:	bf38      	it	cc
 8012b5c:	250c      	movcc	r5, #12
 8012b5e:	2d00      	cmp	r5, #0
 8012b60:	4606      	mov	r6, r0
 8012b62:	db01      	blt.n	8012b68 <_malloc_r+0x1c>
 8012b64:	42a9      	cmp	r1, r5
 8012b66:	d904      	bls.n	8012b72 <_malloc_r+0x26>
 8012b68:	230c      	movs	r3, #12
 8012b6a:	6033      	str	r3, [r6, #0]
 8012b6c:	2000      	movs	r0, #0
 8012b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012c48 <_malloc_r+0xfc>
 8012b76:	f000 f869 	bl	8012c4c <__malloc_lock>
 8012b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8012b7e:	461c      	mov	r4, r3
 8012b80:	bb44      	cbnz	r4, 8012bd4 <_malloc_r+0x88>
 8012b82:	4629      	mov	r1, r5
 8012b84:	4630      	mov	r0, r6
 8012b86:	f7ff ffbf 	bl	8012b08 <sbrk_aligned>
 8012b8a:	1c43      	adds	r3, r0, #1
 8012b8c:	4604      	mov	r4, r0
 8012b8e:	d158      	bne.n	8012c42 <_malloc_r+0xf6>
 8012b90:	f8d8 4000 	ldr.w	r4, [r8]
 8012b94:	4627      	mov	r7, r4
 8012b96:	2f00      	cmp	r7, #0
 8012b98:	d143      	bne.n	8012c22 <_malloc_r+0xd6>
 8012b9a:	2c00      	cmp	r4, #0
 8012b9c:	d04b      	beq.n	8012c36 <_malloc_r+0xea>
 8012b9e:	6823      	ldr	r3, [r4, #0]
 8012ba0:	4639      	mov	r1, r7
 8012ba2:	4630      	mov	r0, r6
 8012ba4:	eb04 0903 	add.w	r9, r4, r3
 8012ba8:	f002 faca 	bl	8015140 <_sbrk_r>
 8012bac:	4581      	cmp	r9, r0
 8012bae:	d142      	bne.n	8012c36 <_malloc_r+0xea>
 8012bb0:	6821      	ldr	r1, [r4, #0]
 8012bb2:	1a6d      	subs	r5, r5, r1
 8012bb4:	4629      	mov	r1, r5
 8012bb6:	4630      	mov	r0, r6
 8012bb8:	f7ff ffa6 	bl	8012b08 <sbrk_aligned>
 8012bbc:	3001      	adds	r0, #1
 8012bbe:	d03a      	beq.n	8012c36 <_malloc_r+0xea>
 8012bc0:	6823      	ldr	r3, [r4, #0]
 8012bc2:	442b      	add	r3, r5
 8012bc4:	6023      	str	r3, [r4, #0]
 8012bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8012bca:	685a      	ldr	r2, [r3, #4]
 8012bcc:	bb62      	cbnz	r2, 8012c28 <_malloc_r+0xdc>
 8012bce:	f8c8 7000 	str.w	r7, [r8]
 8012bd2:	e00f      	b.n	8012bf4 <_malloc_r+0xa8>
 8012bd4:	6822      	ldr	r2, [r4, #0]
 8012bd6:	1b52      	subs	r2, r2, r5
 8012bd8:	d420      	bmi.n	8012c1c <_malloc_r+0xd0>
 8012bda:	2a0b      	cmp	r2, #11
 8012bdc:	d917      	bls.n	8012c0e <_malloc_r+0xc2>
 8012bde:	1961      	adds	r1, r4, r5
 8012be0:	42a3      	cmp	r3, r4
 8012be2:	6025      	str	r5, [r4, #0]
 8012be4:	bf18      	it	ne
 8012be6:	6059      	strne	r1, [r3, #4]
 8012be8:	6863      	ldr	r3, [r4, #4]
 8012bea:	bf08      	it	eq
 8012bec:	f8c8 1000 	streq.w	r1, [r8]
 8012bf0:	5162      	str	r2, [r4, r5]
 8012bf2:	604b      	str	r3, [r1, #4]
 8012bf4:	4630      	mov	r0, r6
 8012bf6:	f000 f82f 	bl	8012c58 <__malloc_unlock>
 8012bfa:	f104 000b 	add.w	r0, r4, #11
 8012bfe:	1d23      	adds	r3, r4, #4
 8012c00:	f020 0007 	bic.w	r0, r0, #7
 8012c04:	1ac2      	subs	r2, r0, r3
 8012c06:	bf1c      	itt	ne
 8012c08:	1a1b      	subne	r3, r3, r0
 8012c0a:	50a3      	strne	r3, [r4, r2]
 8012c0c:	e7af      	b.n	8012b6e <_malloc_r+0x22>
 8012c0e:	6862      	ldr	r2, [r4, #4]
 8012c10:	42a3      	cmp	r3, r4
 8012c12:	bf0c      	ite	eq
 8012c14:	f8c8 2000 	streq.w	r2, [r8]
 8012c18:	605a      	strne	r2, [r3, #4]
 8012c1a:	e7eb      	b.n	8012bf4 <_malloc_r+0xa8>
 8012c1c:	4623      	mov	r3, r4
 8012c1e:	6864      	ldr	r4, [r4, #4]
 8012c20:	e7ae      	b.n	8012b80 <_malloc_r+0x34>
 8012c22:	463c      	mov	r4, r7
 8012c24:	687f      	ldr	r7, [r7, #4]
 8012c26:	e7b6      	b.n	8012b96 <_malloc_r+0x4a>
 8012c28:	461a      	mov	r2, r3
 8012c2a:	685b      	ldr	r3, [r3, #4]
 8012c2c:	42a3      	cmp	r3, r4
 8012c2e:	d1fb      	bne.n	8012c28 <_malloc_r+0xdc>
 8012c30:	2300      	movs	r3, #0
 8012c32:	6053      	str	r3, [r2, #4]
 8012c34:	e7de      	b.n	8012bf4 <_malloc_r+0xa8>
 8012c36:	230c      	movs	r3, #12
 8012c38:	6033      	str	r3, [r6, #0]
 8012c3a:	4630      	mov	r0, r6
 8012c3c:	f000 f80c 	bl	8012c58 <__malloc_unlock>
 8012c40:	e794      	b.n	8012b6c <_malloc_r+0x20>
 8012c42:	6005      	str	r5, [r0, #0]
 8012c44:	e7d6      	b.n	8012bf4 <_malloc_r+0xa8>
 8012c46:	bf00      	nop
 8012c48:	2400088c 	.word	0x2400088c

08012c4c <__malloc_lock>:
 8012c4c:	4801      	ldr	r0, [pc, #4]	@ (8012c54 <__malloc_lock+0x8>)
 8012c4e:	f7ff b90c 	b.w	8011e6a <__retarget_lock_acquire_recursive>
 8012c52:	bf00      	nop
 8012c54:	24000884 	.word	0x24000884

08012c58 <__malloc_unlock>:
 8012c58:	4801      	ldr	r0, [pc, #4]	@ (8012c60 <__malloc_unlock+0x8>)
 8012c5a:	f7ff b907 	b.w	8011e6c <__retarget_lock_release_recursive>
 8012c5e:	bf00      	nop
 8012c60:	24000884 	.word	0x24000884

08012c64 <_Balloc>:
 8012c64:	b570      	push	{r4, r5, r6, lr}
 8012c66:	69c6      	ldr	r6, [r0, #28]
 8012c68:	4604      	mov	r4, r0
 8012c6a:	460d      	mov	r5, r1
 8012c6c:	b976      	cbnz	r6, 8012c8c <_Balloc+0x28>
 8012c6e:	2010      	movs	r0, #16
 8012c70:	f7ff ff42 	bl	8012af8 <malloc>
 8012c74:	4602      	mov	r2, r0
 8012c76:	61e0      	str	r0, [r4, #28]
 8012c78:	b920      	cbnz	r0, 8012c84 <_Balloc+0x20>
 8012c7a:	4b18      	ldr	r3, [pc, #96]	@ (8012cdc <_Balloc+0x78>)
 8012c7c:	4818      	ldr	r0, [pc, #96]	@ (8012ce0 <_Balloc+0x7c>)
 8012c7e:	216b      	movs	r1, #107	@ 0x6b
 8012c80:	f002 fa76 	bl	8015170 <__assert_func>
 8012c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c88:	6006      	str	r6, [r0, #0]
 8012c8a:	60c6      	str	r6, [r0, #12]
 8012c8c:	69e6      	ldr	r6, [r4, #28]
 8012c8e:	68f3      	ldr	r3, [r6, #12]
 8012c90:	b183      	cbz	r3, 8012cb4 <_Balloc+0x50>
 8012c92:	69e3      	ldr	r3, [r4, #28]
 8012c94:	68db      	ldr	r3, [r3, #12]
 8012c96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012c9a:	b9b8      	cbnz	r0, 8012ccc <_Balloc+0x68>
 8012c9c:	2101      	movs	r1, #1
 8012c9e:	fa01 f605 	lsl.w	r6, r1, r5
 8012ca2:	1d72      	adds	r2, r6, #5
 8012ca4:	0092      	lsls	r2, r2, #2
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	f002 fa80 	bl	80151ac <_calloc_r>
 8012cac:	b160      	cbz	r0, 8012cc8 <_Balloc+0x64>
 8012cae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012cb2:	e00e      	b.n	8012cd2 <_Balloc+0x6e>
 8012cb4:	2221      	movs	r2, #33	@ 0x21
 8012cb6:	2104      	movs	r1, #4
 8012cb8:	4620      	mov	r0, r4
 8012cba:	f002 fa77 	bl	80151ac <_calloc_r>
 8012cbe:	69e3      	ldr	r3, [r4, #28]
 8012cc0:	60f0      	str	r0, [r6, #12]
 8012cc2:	68db      	ldr	r3, [r3, #12]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d1e4      	bne.n	8012c92 <_Balloc+0x2e>
 8012cc8:	2000      	movs	r0, #0
 8012cca:	bd70      	pop	{r4, r5, r6, pc}
 8012ccc:	6802      	ldr	r2, [r0, #0]
 8012cce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012cd8:	e7f7      	b.n	8012cca <_Balloc+0x66>
 8012cda:	bf00      	nop
 8012cdc:	0801735c 	.word	0x0801735c
 8012ce0:	080173dc 	.word	0x080173dc

08012ce4 <_Bfree>:
 8012ce4:	b570      	push	{r4, r5, r6, lr}
 8012ce6:	69c6      	ldr	r6, [r0, #28]
 8012ce8:	4605      	mov	r5, r0
 8012cea:	460c      	mov	r4, r1
 8012cec:	b976      	cbnz	r6, 8012d0c <_Bfree+0x28>
 8012cee:	2010      	movs	r0, #16
 8012cf0:	f7ff ff02 	bl	8012af8 <malloc>
 8012cf4:	4602      	mov	r2, r0
 8012cf6:	61e8      	str	r0, [r5, #28]
 8012cf8:	b920      	cbnz	r0, 8012d04 <_Bfree+0x20>
 8012cfa:	4b09      	ldr	r3, [pc, #36]	@ (8012d20 <_Bfree+0x3c>)
 8012cfc:	4809      	ldr	r0, [pc, #36]	@ (8012d24 <_Bfree+0x40>)
 8012cfe:	218f      	movs	r1, #143	@ 0x8f
 8012d00:	f002 fa36 	bl	8015170 <__assert_func>
 8012d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d08:	6006      	str	r6, [r0, #0]
 8012d0a:	60c6      	str	r6, [r0, #12]
 8012d0c:	b13c      	cbz	r4, 8012d1e <_Bfree+0x3a>
 8012d0e:	69eb      	ldr	r3, [r5, #28]
 8012d10:	6862      	ldr	r2, [r4, #4]
 8012d12:	68db      	ldr	r3, [r3, #12]
 8012d14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d18:	6021      	str	r1, [r4, #0]
 8012d1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012d1e:	bd70      	pop	{r4, r5, r6, pc}
 8012d20:	0801735c 	.word	0x0801735c
 8012d24:	080173dc 	.word	0x080173dc

08012d28 <__multadd>:
 8012d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d2c:	690d      	ldr	r5, [r1, #16]
 8012d2e:	4607      	mov	r7, r0
 8012d30:	460c      	mov	r4, r1
 8012d32:	461e      	mov	r6, r3
 8012d34:	f101 0c14 	add.w	ip, r1, #20
 8012d38:	2000      	movs	r0, #0
 8012d3a:	f8dc 3000 	ldr.w	r3, [ip]
 8012d3e:	b299      	uxth	r1, r3
 8012d40:	fb02 6101 	mla	r1, r2, r1, r6
 8012d44:	0c1e      	lsrs	r6, r3, #16
 8012d46:	0c0b      	lsrs	r3, r1, #16
 8012d48:	fb02 3306 	mla	r3, r2, r6, r3
 8012d4c:	b289      	uxth	r1, r1
 8012d4e:	3001      	adds	r0, #1
 8012d50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012d54:	4285      	cmp	r5, r0
 8012d56:	f84c 1b04 	str.w	r1, [ip], #4
 8012d5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012d5e:	dcec      	bgt.n	8012d3a <__multadd+0x12>
 8012d60:	b30e      	cbz	r6, 8012da6 <__multadd+0x7e>
 8012d62:	68a3      	ldr	r3, [r4, #8]
 8012d64:	42ab      	cmp	r3, r5
 8012d66:	dc19      	bgt.n	8012d9c <__multadd+0x74>
 8012d68:	6861      	ldr	r1, [r4, #4]
 8012d6a:	4638      	mov	r0, r7
 8012d6c:	3101      	adds	r1, #1
 8012d6e:	f7ff ff79 	bl	8012c64 <_Balloc>
 8012d72:	4680      	mov	r8, r0
 8012d74:	b928      	cbnz	r0, 8012d82 <__multadd+0x5a>
 8012d76:	4602      	mov	r2, r0
 8012d78:	4b0c      	ldr	r3, [pc, #48]	@ (8012dac <__multadd+0x84>)
 8012d7a:	480d      	ldr	r0, [pc, #52]	@ (8012db0 <__multadd+0x88>)
 8012d7c:	21ba      	movs	r1, #186	@ 0xba
 8012d7e:	f002 f9f7 	bl	8015170 <__assert_func>
 8012d82:	6922      	ldr	r2, [r4, #16]
 8012d84:	3202      	adds	r2, #2
 8012d86:	f104 010c 	add.w	r1, r4, #12
 8012d8a:	0092      	lsls	r2, r2, #2
 8012d8c:	300c      	adds	r0, #12
 8012d8e:	f7ff f86e 	bl	8011e6e <memcpy>
 8012d92:	4621      	mov	r1, r4
 8012d94:	4638      	mov	r0, r7
 8012d96:	f7ff ffa5 	bl	8012ce4 <_Bfree>
 8012d9a:	4644      	mov	r4, r8
 8012d9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012da0:	3501      	adds	r5, #1
 8012da2:	615e      	str	r6, [r3, #20]
 8012da4:	6125      	str	r5, [r4, #16]
 8012da6:	4620      	mov	r0, r4
 8012da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dac:	080173cb 	.word	0x080173cb
 8012db0:	080173dc 	.word	0x080173dc

08012db4 <__s2b>:
 8012db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012db8:	460c      	mov	r4, r1
 8012dba:	4615      	mov	r5, r2
 8012dbc:	461f      	mov	r7, r3
 8012dbe:	2209      	movs	r2, #9
 8012dc0:	3308      	adds	r3, #8
 8012dc2:	4606      	mov	r6, r0
 8012dc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8012dc8:	2100      	movs	r1, #0
 8012dca:	2201      	movs	r2, #1
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	db09      	blt.n	8012de4 <__s2b+0x30>
 8012dd0:	4630      	mov	r0, r6
 8012dd2:	f7ff ff47 	bl	8012c64 <_Balloc>
 8012dd6:	b940      	cbnz	r0, 8012dea <__s2b+0x36>
 8012dd8:	4602      	mov	r2, r0
 8012dda:	4b19      	ldr	r3, [pc, #100]	@ (8012e40 <__s2b+0x8c>)
 8012ddc:	4819      	ldr	r0, [pc, #100]	@ (8012e44 <__s2b+0x90>)
 8012dde:	21d3      	movs	r1, #211	@ 0xd3
 8012de0:	f002 f9c6 	bl	8015170 <__assert_func>
 8012de4:	0052      	lsls	r2, r2, #1
 8012de6:	3101      	adds	r1, #1
 8012de8:	e7f0      	b.n	8012dcc <__s2b+0x18>
 8012dea:	9b08      	ldr	r3, [sp, #32]
 8012dec:	6143      	str	r3, [r0, #20]
 8012dee:	2d09      	cmp	r5, #9
 8012df0:	f04f 0301 	mov.w	r3, #1
 8012df4:	6103      	str	r3, [r0, #16]
 8012df6:	dd16      	ble.n	8012e26 <__s2b+0x72>
 8012df8:	f104 0909 	add.w	r9, r4, #9
 8012dfc:	46c8      	mov	r8, r9
 8012dfe:	442c      	add	r4, r5
 8012e00:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012e04:	4601      	mov	r1, r0
 8012e06:	3b30      	subs	r3, #48	@ 0x30
 8012e08:	220a      	movs	r2, #10
 8012e0a:	4630      	mov	r0, r6
 8012e0c:	f7ff ff8c 	bl	8012d28 <__multadd>
 8012e10:	45a0      	cmp	r8, r4
 8012e12:	d1f5      	bne.n	8012e00 <__s2b+0x4c>
 8012e14:	f1a5 0408 	sub.w	r4, r5, #8
 8012e18:	444c      	add	r4, r9
 8012e1a:	1b2d      	subs	r5, r5, r4
 8012e1c:	1963      	adds	r3, r4, r5
 8012e1e:	42bb      	cmp	r3, r7
 8012e20:	db04      	blt.n	8012e2c <__s2b+0x78>
 8012e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e26:	340a      	adds	r4, #10
 8012e28:	2509      	movs	r5, #9
 8012e2a:	e7f6      	b.n	8012e1a <__s2b+0x66>
 8012e2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012e30:	4601      	mov	r1, r0
 8012e32:	3b30      	subs	r3, #48	@ 0x30
 8012e34:	220a      	movs	r2, #10
 8012e36:	4630      	mov	r0, r6
 8012e38:	f7ff ff76 	bl	8012d28 <__multadd>
 8012e3c:	e7ee      	b.n	8012e1c <__s2b+0x68>
 8012e3e:	bf00      	nop
 8012e40:	080173cb 	.word	0x080173cb
 8012e44:	080173dc 	.word	0x080173dc

08012e48 <__hi0bits>:
 8012e48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	bf36      	itet	cc
 8012e50:	0403      	lslcc	r3, r0, #16
 8012e52:	2000      	movcs	r0, #0
 8012e54:	2010      	movcc	r0, #16
 8012e56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012e5a:	bf3c      	itt	cc
 8012e5c:	021b      	lslcc	r3, r3, #8
 8012e5e:	3008      	addcc	r0, #8
 8012e60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012e64:	bf3c      	itt	cc
 8012e66:	011b      	lslcc	r3, r3, #4
 8012e68:	3004      	addcc	r0, #4
 8012e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e6e:	bf3c      	itt	cc
 8012e70:	009b      	lslcc	r3, r3, #2
 8012e72:	3002      	addcc	r0, #2
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	db05      	blt.n	8012e84 <__hi0bits+0x3c>
 8012e78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012e7c:	f100 0001 	add.w	r0, r0, #1
 8012e80:	bf08      	it	eq
 8012e82:	2020      	moveq	r0, #32
 8012e84:	4770      	bx	lr

08012e86 <__lo0bits>:
 8012e86:	6803      	ldr	r3, [r0, #0]
 8012e88:	4602      	mov	r2, r0
 8012e8a:	f013 0007 	ands.w	r0, r3, #7
 8012e8e:	d00b      	beq.n	8012ea8 <__lo0bits+0x22>
 8012e90:	07d9      	lsls	r1, r3, #31
 8012e92:	d421      	bmi.n	8012ed8 <__lo0bits+0x52>
 8012e94:	0798      	lsls	r0, r3, #30
 8012e96:	bf49      	itett	mi
 8012e98:	085b      	lsrmi	r3, r3, #1
 8012e9a:	089b      	lsrpl	r3, r3, #2
 8012e9c:	2001      	movmi	r0, #1
 8012e9e:	6013      	strmi	r3, [r2, #0]
 8012ea0:	bf5c      	itt	pl
 8012ea2:	6013      	strpl	r3, [r2, #0]
 8012ea4:	2002      	movpl	r0, #2
 8012ea6:	4770      	bx	lr
 8012ea8:	b299      	uxth	r1, r3
 8012eaa:	b909      	cbnz	r1, 8012eb0 <__lo0bits+0x2a>
 8012eac:	0c1b      	lsrs	r3, r3, #16
 8012eae:	2010      	movs	r0, #16
 8012eb0:	b2d9      	uxtb	r1, r3
 8012eb2:	b909      	cbnz	r1, 8012eb8 <__lo0bits+0x32>
 8012eb4:	3008      	adds	r0, #8
 8012eb6:	0a1b      	lsrs	r3, r3, #8
 8012eb8:	0719      	lsls	r1, r3, #28
 8012eba:	bf04      	itt	eq
 8012ebc:	091b      	lsreq	r3, r3, #4
 8012ebe:	3004      	addeq	r0, #4
 8012ec0:	0799      	lsls	r1, r3, #30
 8012ec2:	bf04      	itt	eq
 8012ec4:	089b      	lsreq	r3, r3, #2
 8012ec6:	3002      	addeq	r0, #2
 8012ec8:	07d9      	lsls	r1, r3, #31
 8012eca:	d403      	bmi.n	8012ed4 <__lo0bits+0x4e>
 8012ecc:	085b      	lsrs	r3, r3, #1
 8012ece:	f100 0001 	add.w	r0, r0, #1
 8012ed2:	d003      	beq.n	8012edc <__lo0bits+0x56>
 8012ed4:	6013      	str	r3, [r2, #0]
 8012ed6:	4770      	bx	lr
 8012ed8:	2000      	movs	r0, #0
 8012eda:	4770      	bx	lr
 8012edc:	2020      	movs	r0, #32
 8012ede:	4770      	bx	lr

08012ee0 <__i2b>:
 8012ee0:	b510      	push	{r4, lr}
 8012ee2:	460c      	mov	r4, r1
 8012ee4:	2101      	movs	r1, #1
 8012ee6:	f7ff febd 	bl	8012c64 <_Balloc>
 8012eea:	4602      	mov	r2, r0
 8012eec:	b928      	cbnz	r0, 8012efa <__i2b+0x1a>
 8012eee:	4b05      	ldr	r3, [pc, #20]	@ (8012f04 <__i2b+0x24>)
 8012ef0:	4805      	ldr	r0, [pc, #20]	@ (8012f08 <__i2b+0x28>)
 8012ef2:	f240 1145 	movw	r1, #325	@ 0x145
 8012ef6:	f002 f93b 	bl	8015170 <__assert_func>
 8012efa:	2301      	movs	r3, #1
 8012efc:	6144      	str	r4, [r0, #20]
 8012efe:	6103      	str	r3, [r0, #16]
 8012f00:	bd10      	pop	{r4, pc}
 8012f02:	bf00      	nop
 8012f04:	080173cb 	.word	0x080173cb
 8012f08:	080173dc 	.word	0x080173dc

08012f0c <__multiply>:
 8012f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f10:	4617      	mov	r7, r2
 8012f12:	690a      	ldr	r2, [r1, #16]
 8012f14:	693b      	ldr	r3, [r7, #16]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	bfa8      	it	ge
 8012f1a:	463b      	movge	r3, r7
 8012f1c:	4689      	mov	r9, r1
 8012f1e:	bfa4      	itt	ge
 8012f20:	460f      	movge	r7, r1
 8012f22:	4699      	movge	r9, r3
 8012f24:	693d      	ldr	r5, [r7, #16]
 8012f26:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	6879      	ldr	r1, [r7, #4]
 8012f2e:	eb05 060a 	add.w	r6, r5, sl
 8012f32:	42b3      	cmp	r3, r6
 8012f34:	b085      	sub	sp, #20
 8012f36:	bfb8      	it	lt
 8012f38:	3101      	addlt	r1, #1
 8012f3a:	f7ff fe93 	bl	8012c64 <_Balloc>
 8012f3e:	b930      	cbnz	r0, 8012f4e <__multiply+0x42>
 8012f40:	4602      	mov	r2, r0
 8012f42:	4b41      	ldr	r3, [pc, #260]	@ (8013048 <__multiply+0x13c>)
 8012f44:	4841      	ldr	r0, [pc, #260]	@ (801304c <__multiply+0x140>)
 8012f46:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012f4a:	f002 f911 	bl	8015170 <__assert_func>
 8012f4e:	f100 0414 	add.w	r4, r0, #20
 8012f52:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8012f56:	4623      	mov	r3, r4
 8012f58:	2200      	movs	r2, #0
 8012f5a:	4573      	cmp	r3, lr
 8012f5c:	d320      	bcc.n	8012fa0 <__multiply+0x94>
 8012f5e:	f107 0814 	add.w	r8, r7, #20
 8012f62:	f109 0114 	add.w	r1, r9, #20
 8012f66:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8012f6a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8012f6e:	9302      	str	r3, [sp, #8]
 8012f70:	1beb      	subs	r3, r5, r7
 8012f72:	3b15      	subs	r3, #21
 8012f74:	f023 0303 	bic.w	r3, r3, #3
 8012f78:	3304      	adds	r3, #4
 8012f7a:	3715      	adds	r7, #21
 8012f7c:	42bd      	cmp	r5, r7
 8012f7e:	bf38      	it	cc
 8012f80:	2304      	movcc	r3, #4
 8012f82:	9301      	str	r3, [sp, #4]
 8012f84:	9b02      	ldr	r3, [sp, #8]
 8012f86:	9103      	str	r1, [sp, #12]
 8012f88:	428b      	cmp	r3, r1
 8012f8a:	d80c      	bhi.n	8012fa6 <__multiply+0x9a>
 8012f8c:	2e00      	cmp	r6, #0
 8012f8e:	dd03      	ble.n	8012f98 <__multiply+0x8c>
 8012f90:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d055      	beq.n	8013044 <__multiply+0x138>
 8012f98:	6106      	str	r6, [r0, #16]
 8012f9a:	b005      	add	sp, #20
 8012f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fa0:	f843 2b04 	str.w	r2, [r3], #4
 8012fa4:	e7d9      	b.n	8012f5a <__multiply+0x4e>
 8012fa6:	f8b1 a000 	ldrh.w	sl, [r1]
 8012faa:	f1ba 0f00 	cmp.w	sl, #0
 8012fae:	d01f      	beq.n	8012ff0 <__multiply+0xe4>
 8012fb0:	46c4      	mov	ip, r8
 8012fb2:	46a1      	mov	r9, r4
 8012fb4:	2700      	movs	r7, #0
 8012fb6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012fba:	f8d9 3000 	ldr.w	r3, [r9]
 8012fbe:	fa1f fb82 	uxth.w	fp, r2
 8012fc2:	b29b      	uxth	r3, r3
 8012fc4:	fb0a 330b 	mla	r3, sl, fp, r3
 8012fc8:	443b      	add	r3, r7
 8012fca:	f8d9 7000 	ldr.w	r7, [r9]
 8012fce:	0c12      	lsrs	r2, r2, #16
 8012fd0:	0c3f      	lsrs	r7, r7, #16
 8012fd2:	fb0a 7202 	mla	r2, sl, r2, r7
 8012fd6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012fe0:	4565      	cmp	r5, ip
 8012fe2:	f849 3b04 	str.w	r3, [r9], #4
 8012fe6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8012fea:	d8e4      	bhi.n	8012fb6 <__multiply+0xaa>
 8012fec:	9b01      	ldr	r3, [sp, #4]
 8012fee:	50e7      	str	r7, [r4, r3]
 8012ff0:	9b03      	ldr	r3, [sp, #12]
 8012ff2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012ff6:	3104      	adds	r1, #4
 8012ff8:	f1b9 0f00 	cmp.w	r9, #0
 8012ffc:	d020      	beq.n	8013040 <__multiply+0x134>
 8012ffe:	6823      	ldr	r3, [r4, #0]
 8013000:	4647      	mov	r7, r8
 8013002:	46a4      	mov	ip, r4
 8013004:	f04f 0a00 	mov.w	sl, #0
 8013008:	f8b7 b000 	ldrh.w	fp, [r7]
 801300c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8013010:	fb09 220b 	mla	r2, r9, fp, r2
 8013014:	4452      	add	r2, sl
 8013016:	b29b      	uxth	r3, r3
 8013018:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801301c:	f84c 3b04 	str.w	r3, [ip], #4
 8013020:	f857 3b04 	ldr.w	r3, [r7], #4
 8013024:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013028:	f8bc 3000 	ldrh.w	r3, [ip]
 801302c:	fb09 330a 	mla	r3, r9, sl, r3
 8013030:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8013034:	42bd      	cmp	r5, r7
 8013036:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801303a:	d8e5      	bhi.n	8013008 <__multiply+0xfc>
 801303c:	9a01      	ldr	r2, [sp, #4]
 801303e:	50a3      	str	r3, [r4, r2]
 8013040:	3404      	adds	r4, #4
 8013042:	e79f      	b.n	8012f84 <__multiply+0x78>
 8013044:	3e01      	subs	r6, #1
 8013046:	e7a1      	b.n	8012f8c <__multiply+0x80>
 8013048:	080173cb 	.word	0x080173cb
 801304c:	080173dc 	.word	0x080173dc

08013050 <__pow5mult>:
 8013050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013054:	4615      	mov	r5, r2
 8013056:	f012 0203 	ands.w	r2, r2, #3
 801305a:	4607      	mov	r7, r0
 801305c:	460e      	mov	r6, r1
 801305e:	d007      	beq.n	8013070 <__pow5mult+0x20>
 8013060:	4c25      	ldr	r4, [pc, #148]	@ (80130f8 <__pow5mult+0xa8>)
 8013062:	3a01      	subs	r2, #1
 8013064:	2300      	movs	r3, #0
 8013066:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801306a:	f7ff fe5d 	bl	8012d28 <__multadd>
 801306e:	4606      	mov	r6, r0
 8013070:	10ad      	asrs	r5, r5, #2
 8013072:	d03d      	beq.n	80130f0 <__pow5mult+0xa0>
 8013074:	69fc      	ldr	r4, [r7, #28]
 8013076:	b97c      	cbnz	r4, 8013098 <__pow5mult+0x48>
 8013078:	2010      	movs	r0, #16
 801307a:	f7ff fd3d 	bl	8012af8 <malloc>
 801307e:	4602      	mov	r2, r0
 8013080:	61f8      	str	r0, [r7, #28]
 8013082:	b928      	cbnz	r0, 8013090 <__pow5mult+0x40>
 8013084:	4b1d      	ldr	r3, [pc, #116]	@ (80130fc <__pow5mult+0xac>)
 8013086:	481e      	ldr	r0, [pc, #120]	@ (8013100 <__pow5mult+0xb0>)
 8013088:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801308c:	f002 f870 	bl	8015170 <__assert_func>
 8013090:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013094:	6004      	str	r4, [r0, #0]
 8013096:	60c4      	str	r4, [r0, #12]
 8013098:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801309c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80130a0:	b94c      	cbnz	r4, 80130b6 <__pow5mult+0x66>
 80130a2:	f240 2171 	movw	r1, #625	@ 0x271
 80130a6:	4638      	mov	r0, r7
 80130a8:	f7ff ff1a 	bl	8012ee0 <__i2b>
 80130ac:	2300      	movs	r3, #0
 80130ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80130b2:	4604      	mov	r4, r0
 80130b4:	6003      	str	r3, [r0, #0]
 80130b6:	f04f 0900 	mov.w	r9, #0
 80130ba:	07eb      	lsls	r3, r5, #31
 80130bc:	d50a      	bpl.n	80130d4 <__pow5mult+0x84>
 80130be:	4631      	mov	r1, r6
 80130c0:	4622      	mov	r2, r4
 80130c2:	4638      	mov	r0, r7
 80130c4:	f7ff ff22 	bl	8012f0c <__multiply>
 80130c8:	4631      	mov	r1, r6
 80130ca:	4680      	mov	r8, r0
 80130cc:	4638      	mov	r0, r7
 80130ce:	f7ff fe09 	bl	8012ce4 <_Bfree>
 80130d2:	4646      	mov	r6, r8
 80130d4:	106d      	asrs	r5, r5, #1
 80130d6:	d00b      	beq.n	80130f0 <__pow5mult+0xa0>
 80130d8:	6820      	ldr	r0, [r4, #0]
 80130da:	b938      	cbnz	r0, 80130ec <__pow5mult+0x9c>
 80130dc:	4622      	mov	r2, r4
 80130de:	4621      	mov	r1, r4
 80130e0:	4638      	mov	r0, r7
 80130e2:	f7ff ff13 	bl	8012f0c <__multiply>
 80130e6:	6020      	str	r0, [r4, #0]
 80130e8:	f8c0 9000 	str.w	r9, [r0]
 80130ec:	4604      	mov	r4, r0
 80130ee:	e7e4      	b.n	80130ba <__pow5mult+0x6a>
 80130f0:	4630      	mov	r0, r6
 80130f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130f6:	bf00      	nop
 80130f8:	08017508 	.word	0x08017508
 80130fc:	0801735c 	.word	0x0801735c
 8013100:	080173dc 	.word	0x080173dc

08013104 <__lshift>:
 8013104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013108:	460c      	mov	r4, r1
 801310a:	6849      	ldr	r1, [r1, #4]
 801310c:	6923      	ldr	r3, [r4, #16]
 801310e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013112:	68a3      	ldr	r3, [r4, #8]
 8013114:	4607      	mov	r7, r0
 8013116:	4691      	mov	r9, r2
 8013118:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801311c:	f108 0601 	add.w	r6, r8, #1
 8013120:	42b3      	cmp	r3, r6
 8013122:	db0b      	blt.n	801313c <__lshift+0x38>
 8013124:	4638      	mov	r0, r7
 8013126:	f7ff fd9d 	bl	8012c64 <_Balloc>
 801312a:	4605      	mov	r5, r0
 801312c:	b948      	cbnz	r0, 8013142 <__lshift+0x3e>
 801312e:	4602      	mov	r2, r0
 8013130:	4b28      	ldr	r3, [pc, #160]	@ (80131d4 <__lshift+0xd0>)
 8013132:	4829      	ldr	r0, [pc, #164]	@ (80131d8 <__lshift+0xd4>)
 8013134:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013138:	f002 f81a 	bl	8015170 <__assert_func>
 801313c:	3101      	adds	r1, #1
 801313e:	005b      	lsls	r3, r3, #1
 8013140:	e7ee      	b.n	8013120 <__lshift+0x1c>
 8013142:	2300      	movs	r3, #0
 8013144:	f100 0114 	add.w	r1, r0, #20
 8013148:	f100 0210 	add.w	r2, r0, #16
 801314c:	4618      	mov	r0, r3
 801314e:	4553      	cmp	r3, sl
 8013150:	db33      	blt.n	80131ba <__lshift+0xb6>
 8013152:	6920      	ldr	r0, [r4, #16]
 8013154:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013158:	f104 0314 	add.w	r3, r4, #20
 801315c:	f019 091f 	ands.w	r9, r9, #31
 8013160:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013164:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013168:	d02b      	beq.n	80131c2 <__lshift+0xbe>
 801316a:	f1c9 0e20 	rsb	lr, r9, #32
 801316e:	468a      	mov	sl, r1
 8013170:	2200      	movs	r2, #0
 8013172:	6818      	ldr	r0, [r3, #0]
 8013174:	fa00 f009 	lsl.w	r0, r0, r9
 8013178:	4310      	orrs	r0, r2
 801317a:	f84a 0b04 	str.w	r0, [sl], #4
 801317e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013182:	459c      	cmp	ip, r3
 8013184:	fa22 f20e 	lsr.w	r2, r2, lr
 8013188:	d8f3      	bhi.n	8013172 <__lshift+0x6e>
 801318a:	ebac 0304 	sub.w	r3, ip, r4
 801318e:	3b15      	subs	r3, #21
 8013190:	f023 0303 	bic.w	r3, r3, #3
 8013194:	3304      	adds	r3, #4
 8013196:	f104 0015 	add.w	r0, r4, #21
 801319a:	4560      	cmp	r0, ip
 801319c:	bf88      	it	hi
 801319e:	2304      	movhi	r3, #4
 80131a0:	50ca      	str	r2, [r1, r3]
 80131a2:	b10a      	cbz	r2, 80131a8 <__lshift+0xa4>
 80131a4:	f108 0602 	add.w	r6, r8, #2
 80131a8:	3e01      	subs	r6, #1
 80131aa:	4638      	mov	r0, r7
 80131ac:	612e      	str	r6, [r5, #16]
 80131ae:	4621      	mov	r1, r4
 80131b0:	f7ff fd98 	bl	8012ce4 <_Bfree>
 80131b4:	4628      	mov	r0, r5
 80131b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80131be:	3301      	adds	r3, #1
 80131c0:	e7c5      	b.n	801314e <__lshift+0x4a>
 80131c2:	3904      	subs	r1, #4
 80131c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80131c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80131cc:	459c      	cmp	ip, r3
 80131ce:	d8f9      	bhi.n	80131c4 <__lshift+0xc0>
 80131d0:	e7ea      	b.n	80131a8 <__lshift+0xa4>
 80131d2:	bf00      	nop
 80131d4:	080173cb 	.word	0x080173cb
 80131d8:	080173dc 	.word	0x080173dc

080131dc <__mcmp>:
 80131dc:	690a      	ldr	r2, [r1, #16]
 80131de:	4603      	mov	r3, r0
 80131e0:	6900      	ldr	r0, [r0, #16]
 80131e2:	1a80      	subs	r0, r0, r2
 80131e4:	b530      	push	{r4, r5, lr}
 80131e6:	d10e      	bne.n	8013206 <__mcmp+0x2a>
 80131e8:	3314      	adds	r3, #20
 80131ea:	3114      	adds	r1, #20
 80131ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80131f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80131f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80131f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80131fc:	4295      	cmp	r5, r2
 80131fe:	d003      	beq.n	8013208 <__mcmp+0x2c>
 8013200:	d205      	bcs.n	801320e <__mcmp+0x32>
 8013202:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013206:	bd30      	pop	{r4, r5, pc}
 8013208:	42a3      	cmp	r3, r4
 801320a:	d3f3      	bcc.n	80131f4 <__mcmp+0x18>
 801320c:	e7fb      	b.n	8013206 <__mcmp+0x2a>
 801320e:	2001      	movs	r0, #1
 8013210:	e7f9      	b.n	8013206 <__mcmp+0x2a>
	...

08013214 <__mdiff>:
 8013214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013218:	4689      	mov	r9, r1
 801321a:	4606      	mov	r6, r0
 801321c:	4611      	mov	r1, r2
 801321e:	4648      	mov	r0, r9
 8013220:	4614      	mov	r4, r2
 8013222:	f7ff ffdb 	bl	80131dc <__mcmp>
 8013226:	1e05      	subs	r5, r0, #0
 8013228:	d112      	bne.n	8013250 <__mdiff+0x3c>
 801322a:	4629      	mov	r1, r5
 801322c:	4630      	mov	r0, r6
 801322e:	f7ff fd19 	bl	8012c64 <_Balloc>
 8013232:	4602      	mov	r2, r0
 8013234:	b928      	cbnz	r0, 8013242 <__mdiff+0x2e>
 8013236:	4b3f      	ldr	r3, [pc, #252]	@ (8013334 <__mdiff+0x120>)
 8013238:	f240 2137 	movw	r1, #567	@ 0x237
 801323c:	483e      	ldr	r0, [pc, #248]	@ (8013338 <__mdiff+0x124>)
 801323e:	f001 ff97 	bl	8015170 <__assert_func>
 8013242:	2301      	movs	r3, #1
 8013244:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013248:	4610      	mov	r0, r2
 801324a:	b003      	add	sp, #12
 801324c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013250:	bfbc      	itt	lt
 8013252:	464b      	movlt	r3, r9
 8013254:	46a1      	movlt	r9, r4
 8013256:	4630      	mov	r0, r6
 8013258:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801325c:	bfba      	itte	lt
 801325e:	461c      	movlt	r4, r3
 8013260:	2501      	movlt	r5, #1
 8013262:	2500      	movge	r5, #0
 8013264:	f7ff fcfe 	bl	8012c64 <_Balloc>
 8013268:	4602      	mov	r2, r0
 801326a:	b918      	cbnz	r0, 8013274 <__mdiff+0x60>
 801326c:	4b31      	ldr	r3, [pc, #196]	@ (8013334 <__mdiff+0x120>)
 801326e:	f240 2145 	movw	r1, #581	@ 0x245
 8013272:	e7e3      	b.n	801323c <__mdiff+0x28>
 8013274:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013278:	6926      	ldr	r6, [r4, #16]
 801327a:	60c5      	str	r5, [r0, #12]
 801327c:	f109 0310 	add.w	r3, r9, #16
 8013280:	f109 0514 	add.w	r5, r9, #20
 8013284:	f104 0e14 	add.w	lr, r4, #20
 8013288:	f100 0b14 	add.w	fp, r0, #20
 801328c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013290:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013294:	9301      	str	r3, [sp, #4]
 8013296:	46d9      	mov	r9, fp
 8013298:	f04f 0c00 	mov.w	ip, #0
 801329c:	9b01      	ldr	r3, [sp, #4]
 801329e:	f85e 0b04 	ldr.w	r0, [lr], #4
 80132a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80132a6:	9301      	str	r3, [sp, #4]
 80132a8:	fa1f f38a 	uxth.w	r3, sl
 80132ac:	4619      	mov	r1, r3
 80132ae:	b283      	uxth	r3, r0
 80132b0:	1acb      	subs	r3, r1, r3
 80132b2:	0c00      	lsrs	r0, r0, #16
 80132b4:	4463      	add	r3, ip
 80132b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80132ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80132be:	b29b      	uxth	r3, r3
 80132c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80132c4:	4576      	cmp	r6, lr
 80132c6:	f849 3b04 	str.w	r3, [r9], #4
 80132ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80132ce:	d8e5      	bhi.n	801329c <__mdiff+0x88>
 80132d0:	1b33      	subs	r3, r6, r4
 80132d2:	3b15      	subs	r3, #21
 80132d4:	f023 0303 	bic.w	r3, r3, #3
 80132d8:	3415      	adds	r4, #21
 80132da:	3304      	adds	r3, #4
 80132dc:	42a6      	cmp	r6, r4
 80132de:	bf38      	it	cc
 80132e0:	2304      	movcc	r3, #4
 80132e2:	441d      	add	r5, r3
 80132e4:	445b      	add	r3, fp
 80132e6:	461e      	mov	r6, r3
 80132e8:	462c      	mov	r4, r5
 80132ea:	4544      	cmp	r4, r8
 80132ec:	d30e      	bcc.n	801330c <__mdiff+0xf8>
 80132ee:	f108 0103 	add.w	r1, r8, #3
 80132f2:	1b49      	subs	r1, r1, r5
 80132f4:	f021 0103 	bic.w	r1, r1, #3
 80132f8:	3d03      	subs	r5, #3
 80132fa:	45a8      	cmp	r8, r5
 80132fc:	bf38      	it	cc
 80132fe:	2100      	movcc	r1, #0
 8013300:	440b      	add	r3, r1
 8013302:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013306:	b191      	cbz	r1, 801332e <__mdiff+0x11a>
 8013308:	6117      	str	r7, [r2, #16]
 801330a:	e79d      	b.n	8013248 <__mdiff+0x34>
 801330c:	f854 1b04 	ldr.w	r1, [r4], #4
 8013310:	46e6      	mov	lr, ip
 8013312:	0c08      	lsrs	r0, r1, #16
 8013314:	fa1c fc81 	uxtah	ip, ip, r1
 8013318:	4471      	add	r1, lr
 801331a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801331e:	b289      	uxth	r1, r1
 8013320:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013324:	f846 1b04 	str.w	r1, [r6], #4
 8013328:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801332c:	e7dd      	b.n	80132ea <__mdiff+0xd6>
 801332e:	3f01      	subs	r7, #1
 8013330:	e7e7      	b.n	8013302 <__mdiff+0xee>
 8013332:	bf00      	nop
 8013334:	080173cb 	.word	0x080173cb
 8013338:	080173dc 	.word	0x080173dc

0801333c <__ulp>:
 801333c:	b082      	sub	sp, #8
 801333e:	ed8d 0b00 	vstr	d0, [sp]
 8013342:	9a01      	ldr	r2, [sp, #4]
 8013344:	4b0f      	ldr	r3, [pc, #60]	@ (8013384 <__ulp+0x48>)
 8013346:	4013      	ands	r3, r2
 8013348:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801334c:	2b00      	cmp	r3, #0
 801334e:	dc08      	bgt.n	8013362 <__ulp+0x26>
 8013350:	425b      	negs	r3, r3
 8013352:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8013356:	ea4f 5223 	mov.w	r2, r3, asr #20
 801335a:	da04      	bge.n	8013366 <__ulp+0x2a>
 801335c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013360:	4113      	asrs	r3, r2
 8013362:	2200      	movs	r2, #0
 8013364:	e008      	b.n	8013378 <__ulp+0x3c>
 8013366:	f1a2 0314 	sub.w	r3, r2, #20
 801336a:	2b1e      	cmp	r3, #30
 801336c:	bfda      	itte	le
 801336e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8013372:	40da      	lsrle	r2, r3
 8013374:	2201      	movgt	r2, #1
 8013376:	2300      	movs	r3, #0
 8013378:	4619      	mov	r1, r3
 801337a:	4610      	mov	r0, r2
 801337c:	ec41 0b10 	vmov	d0, r0, r1
 8013380:	b002      	add	sp, #8
 8013382:	4770      	bx	lr
 8013384:	7ff00000 	.word	0x7ff00000

08013388 <__b2d>:
 8013388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801338c:	6906      	ldr	r6, [r0, #16]
 801338e:	f100 0814 	add.w	r8, r0, #20
 8013392:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013396:	1f37      	subs	r7, r6, #4
 8013398:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801339c:	4610      	mov	r0, r2
 801339e:	f7ff fd53 	bl	8012e48 <__hi0bits>
 80133a2:	f1c0 0320 	rsb	r3, r0, #32
 80133a6:	280a      	cmp	r0, #10
 80133a8:	600b      	str	r3, [r1, #0]
 80133aa:	491b      	ldr	r1, [pc, #108]	@ (8013418 <__b2d+0x90>)
 80133ac:	dc15      	bgt.n	80133da <__b2d+0x52>
 80133ae:	f1c0 0c0b 	rsb	ip, r0, #11
 80133b2:	fa22 f30c 	lsr.w	r3, r2, ip
 80133b6:	45b8      	cmp	r8, r7
 80133b8:	ea43 0501 	orr.w	r5, r3, r1
 80133bc:	bf34      	ite	cc
 80133be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80133c2:	2300      	movcs	r3, #0
 80133c4:	3015      	adds	r0, #21
 80133c6:	fa02 f000 	lsl.w	r0, r2, r0
 80133ca:	fa23 f30c 	lsr.w	r3, r3, ip
 80133ce:	4303      	orrs	r3, r0
 80133d0:	461c      	mov	r4, r3
 80133d2:	ec45 4b10 	vmov	d0, r4, r5
 80133d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133da:	45b8      	cmp	r8, r7
 80133dc:	bf3a      	itte	cc
 80133de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80133e2:	f1a6 0708 	subcc.w	r7, r6, #8
 80133e6:	2300      	movcs	r3, #0
 80133e8:	380b      	subs	r0, #11
 80133ea:	d012      	beq.n	8013412 <__b2d+0x8a>
 80133ec:	f1c0 0120 	rsb	r1, r0, #32
 80133f0:	fa23 f401 	lsr.w	r4, r3, r1
 80133f4:	4082      	lsls	r2, r0
 80133f6:	4322      	orrs	r2, r4
 80133f8:	4547      	cmp	r7, r8
 80133fa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80133fe:	bf8c      	ite	hi
 8013400:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013404:	2200      	movls	r2, #0
 8013406:	4083      	lsls	r3, r0
 8013408:	40ca      	lsrs	r2, r1
 801340a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801340e:	4313      	orrs	r3, r2
 8013410:	e7de      	b.n	80133d0 <__b2d+0x48>
 8013412:	ea42 0501 	orr.w	r5, r2, r1
 8013416:	e7db      	b.n	80133d0 <__b2d+0x48>
 8013418:	3ff00000 	.word	0x3ff00000

0801341c <__d2b>:
 801341c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013420:	460f      	mov	r7, r1
 8013422:	2101      	movs	r1, #1
 8013424:	ec59 8b10 	vmov	r8, r9, d0
 8013428:	4616      	mov	r6, r2
 801342a:	f7ff fc1b 	bl	8012c64 <_Balloc>
 801342e:	4604      	mov	r4, r0
 8013430:	b930      	cbnz	r0, 8013440 <__d2b+0x24>
 8013432:	4602      	mov	r2, r0
 8013434:	4b23      	ldr	r3, [pc, #140]	@ (80134c4 <__d2b+0xa8>)
 8013436:	4824      	ldr	r0, [pc, #144]	@ (80134c8 <__d2b+0xac>)
 8013438:	f240 310f 	movw	r1, #783	@ 0x30f
 801343c:	f001 fe98 	bl	8015170 <__assert_func>
 8013440:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013444:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013448:	b10d      	cbz	r5, 801344e <__d2b+0x32>
 801344a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801344e:	9301      	str	r3, [sp, #4]
 8013450:	f1b8 0300 	subs.w	r3, r8, #0
 8013454:	d023      	beq.n	801349e <__d2b+0x82>
 8013456:	4668      	mov	r0, sp
 8013458:	9300      	str	r3, [sp, #0]
 801345a:	f7ff fd14 	bl	8012e86 <__lo0bits>
 801345e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013462:	b1d0      	cbz	r0, 801349a <__d2b+0x7e>
 8013464:	f1c0 0320 	rsb	r3, r0, #32
 8013468:	fa02 f303 	lsl.w	r3, r2, r3
 801346c:	430b      	orrs	r3, r1
 801346e:	40c2      	lsrs	r2, r0
 8013470:	6163      	str	r3, [r4, #20]
 8013472:	9201      	str	r2, [sp, #4]
 8013474:	9b01      	ldr	r3, [sp, #4]
 8013476:	61a3      	str	r3, [r4, #24]
 8013478:	2b00      	cmp	r3, #0
 801347a:	bf0c      	ite	eq
 801347c:	2201      	moveq	r2, #1
 801347e:	2202      	movne	r2, #2
 8013480:	6122      	str	r2, [r4, #16]
 8013482:	b1a5      	cbz	r5, 80134ae <__d2b+0x92>
 8013484:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013488:	4405      	add	r5, r0
 801348a:	603d      	str	r5, [r7, #0]
 801348c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013490:	6030      	str	r0, [r6, #0]
 8013492:	4620      	mov	r0, r4
 8013494:	b003      	add	sp, #12
 8013496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801349a:	6161      	str	r1, [r4, #20]
 801349c:	e7ea      	b.n	8013474 <__d2b+0x58>
 801349e:	a801      	add	r0, sp, #4
 80134a0:	f7ff fcf1 	bl	8012e86 <__lo0bits>
 80134a4:	9b01      	ldr	r3, [sp, #4]
 80134a6:	6163      	str	r3, [r4, #20]
 80134a8:	3020      	adds	r0, #32
 80134aa:	2201      	movs	r2, #1
 80134ac:	e7e8      	b.n	8013480 <__d2b+0x64>
 80134ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80134b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80134b6:	6038      	str	r0, [r7, #0]
 80134b8:	6918      	ldr	r0, [r3, #16]
 80134ba:	f7ff fcc5 	bl	8012e48 <__hi0bits>
 80134be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80134c2:	e7e5      	b.n	8013490 <__d2b+0x74>
 80134c4:	080173cb 	.word	0x080173cb
 80134c8:	080173dc 	.word	0x080173dc

080134cc <__ratio>:
 80134cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d0:	4688      	mov	r8, r1
 80134d2:	4669      	mov	r1, sp
 80134d4:	4681      	mov	r9, r0
 80134d6:	f7ff ff57 	bl	8013388 <__b2d>
 80134da:	a901      	add	r1, sp, #4
 80134dc:	4640      	mov	r0, r8
 80134de:	ec55 4b10 	vmov	r4, r5, d0
 80134e2:	f7ff ff51 	bl	8013388 <__b2d>
 80134e6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80134ea:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80134ee:	1ad2      	subs	r2, r2, r3
 80134f0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80134f4:	1a5b      	subs	r3, r3, r1
 80134f6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80134fa:	ec57 6b10 	vmov	r6, r7, d0
 80134fe:	2b00      	cmp	r3, #0
 8013500:	bfd6      	itet	le
 8013502:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013506:	462a      	movgt	r2, r5
 8013508:	463a      	movle	r2, r7
 801350a:	46ab      	mov	fp, r5
 801350c:	46a2      	mov	sl, r4
 801350e:	bfce      	itee	gt
 8013510:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8013514:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8013518:	ee00 3a90 	vmovle	s1, r3
 801351c:	ec4b ab17 	vmov	d7, sl, fp
 8013520:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8013524:	b003      	add	sp, #12
 8013526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801352a <__copybits>:
 801352a:	3901      	subs	r1, #1
 801352c:	b570      	push	{r4, r5, r6, lr}
 801352e:	1149      	asrs	r1, r1, #5
 8013530:	6914      	ldr	r4, [r2, #16]
 8013532:	3101      	adds	r1, #1
 8013534:	f102 0314 	add.w	r3, r2, #20
 8013538:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801353c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013540:	1f05      	subs	r5, r0, #4
 8013542:	42a3      	cmp	r3, r4
 8013544:	d30c      	bcc.n	8013560 <__copybits+0x36>
 8013546:	1aa3      	subs	r3, r4, r2
 8013548:	3b11      	subs	r3, #17
 801354a:	f023 0303 	bic.w	r3, r3, #3
 801354e:	3211      	adds	r2, #17
 8013550:	42a2      	cmp	r2, r4
 8013552:	bf88      	it	hi
 8013554:	2300      	movhi	r3, #0
 8013556:	4418      	add	r0, r3
 8013558:	2300      	movs	r3, #0
 801355a:	4288      	cmp	r0, r1
 801355c:	d305      	bcc.n	801356a <__copybits+0x40>
 801355e:	bd70      	pop	{r4, r5, r6, pc}
 8013560:	f853 6b04 	ldr.w	r6, [r3], #4
 8013564:	f845 6f04 	str.w	r6, [r5, #4]!
 8013568:	e7eb      	b.n	8013542 <__copybits+0x18>
 801356a:	f840 3b04 	str.w	r3, [r0], #4
 801356e:	e7f4      	b.n	801355a <__copybits+0x30>

08013570 <__any_on>:
 8013570:	f100 0214 	add.w	r2, r0, #20
 8013574:	6900      	ldr	r0, [r0, #16]
 8013576:	114b      	asrs	r3, r1, #5
 8013578:	4298      	cmp	r0, r3
 801357a:	b510      	push	{r4, lr}
 801357c:	db11      	blt.n	80135a2 <__any_on+0x32>
 801357e:	dd0a      	ble.n	8013596 <__any_on+0x26>
 8013580:	f011 011f 	ands.w	r1, r1, #31
 8013584:	d007      	beq.n	8013596 <__any_on+0x26>
 8013586:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801358a:	fa24 f001 	lsr.w	r0, r4, r1
 801358e:	fa00 f101 	lsl.w	r1, r0, r1
 8013592:	428c      	cmp	r4, r1
 8013594:	d10b      	bne.n	80135ae <__any_on+0x3e>
 8013596:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801359a:	4293      	cmp	r3, r2
 801359c:	d803      	bhi.n	80135a6 <__any_on+0x36>
 801359e:	2000      	movs	r0, #0
 80135a0:	bd10      	pop	{r4, pc}
 80135a2:	4603      	mov	r3, r0
 80135a4:	e7f7      	b.n	8013596 <__any_on+0x26>
 80135a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80135aa:	2900      	cmp	r1, #0
 80135ac:	d0f5      	beq.n	801359a <__any_on+0x2a>
 80135ae:	2001      	movs	r0, #1
 80135b0:	e7f6      	b.n	80135a0 <__any_on+0x30>

080135b2 <sulp>:
 80135b2:	b570      	push	{r4, r5, r6, lr}
 80135b4:	4604      	mov	r4, r0
 80135b6:	460d      	mov	r5, r1
 80135b8:	4616      	mov	r6, r2
 80135ba:	ec45 4b10 	vmov	d0, r4, r5
 80135be:	f7ff febd 	bl	801333c <__ulp>
 80135c2:	b17e      	cbz	r6, 80135e4 <sulp+0x32>
 80135c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80135c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	dd09      	ble.n	80135e4 <sulp+0x32>
 80135d0:	051b      	lsls	r3, r3, #20
 80135d2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80135d6:	2000      	movs	r0, #0
 80135d8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80135dc:	ec41 0b17 	vmov	d7, r0, r1
 80135e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80135e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080135e8 <_strtod_l>:
 80135e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135ec:	ed2d 8b0a 	vpush	{d8-d12}
 80135f0:	b097      	sub	sp, #92	@ 0x5c
 80135f2:	4688      	mov	r8, r1
 80135f4:	920e      	str	r2, [sp, #56]	@ 0x38
 80135f6:	2200      	movs	r2, #0
 80135f8:	9212      	str	r2, [sp, #72]	@ 0x48
 80135fa:	9005      	str	r0, [sp, #20]
 80135fc:	f04f 0a00 	mov.w	sl, #0
 8013600:	f04f 0b00 	mov.w	fp, #0
 8013604:	460a      	mov	r2, r1
 8013606:	9211      	str	r2, [sp, #68]	@ 0x44
 8013608:	7811      	ldrb	r1, [r2, #0]
 801360a:	292b      	cmp	r1, #43	@ 0x2b
 801360c:	d04c      	beq.n	80136a8 <_strtod_l+0xc0>
 801360e:	d839      	bhi.n	8013684 <_strtod_l+0x9c>
 8013610:	290d      	cmp	r1, #13
 8013612:	d833      	bhi.n	801367c <_strtod_l+0x94>
 8013614:	2908      	cmp	r1, #8
 8013616:	d833      	bhi.n	8013680 <_strtod_l+0x98>
 8013618:	2900      	cmp	r1, #0
 801361a:	d03c      	beq.n	8013696 <_strtod_l+0xae>
 801361c:	2200      	movs	r2, #0
 801361e:	9208      	str	r2, [sp, #32]
 8013620:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8013622:	782a      	ldrb	r2, [r5, #0]
 8013624:	2a30      	cmp	r2, #48	@ 0x30
 8013626:	f040 80b7 	bne.w	8013798 <_strtod_l+0x1b0>
 801362a:	786a      	ldrb	r2, [r5, #1]
 801362c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013630:	2a58      	cmp	r2, #88	@ 0x58
 8013632:	d170      	bne.n	8013716 <_strtod_l+0x12e>
 8013634:	9302      	str	r3, [sp, #8]
 8013636:	9b08      	ldr	r3, [sp, #32]
 8013638:	9301      	str	r3, [sp, #4]
 801363a:	ab12      	add	r3, sp, #72	@ 0x48
 801363c:	9300      	str	r3, [sp, #0]
 801363e:	4a90      	ldr	r2, [pc, #576]	@ (8013880 <_strtod_l+0x298>)
 8013640:	9805      	ldr	r0, [sp, #20]
 8013642:	ab13      	add	r3, sp, #76	@ 0x4c
 8013644:	a911      	add	r1, sp, #68	@ 0x44
 8013646:	f001 fe2d 	bl	80152a4 <__gethex>
 801364a:	f010 060f 	ands.w	r6, r0, #15
 801364e:	4604      	mov	r4, r0
 8013650:	d005      	beq.n	801365e <_strtod_l+0x76>
 8013652:	2e06      	cmp	r6, #6
 8013654:	d12a      	bne.n	80136ac <_strtod_l+0xc4>
 8013656:	3501      	adds	r5, #1
 8013658:	2300      	movs	r3, #0
 801365a:	9511      	str	r5, [sp, #68]	@ 0x44
 801365c:	9308      	str	r3, [sp, #32]
 801365e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013660:	2b00      	cmp	r3, #0
 8013662:	f040 8537 	bne.w	80140d4 <_strtod_l+0xaec>
 8013666:	9b08      	ldr	r3, [sp, #32]
 8013668:	ec4b ab10 	vmov	d0, sl, fp
 801366c:	b1cb      	cbz	r3, 80136a2 <_strtod_l+0xba>
 801366e:	eeb1 0b40 	vneg.f64	d0, d0
 8013672:	b017      	add	sp, #92	@ 0x5c
 8013674:	ecbd 8b0a 	vpop	{d8-d12}
 8013678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801367c:	2920      	cmp	r1, #32
 801367e:	d1cd      	bne.n	801361c <_strtod_l+0x34>
 8013680:	3201      	adds	r2, #1
 8013682:	e7c0      	b.n	8013606 <_strtod_l+0x1e>
 8013684:	292d      	cmp	r1, #45	@ 0x2d
 8013686:	d1c9      	bne.n	801361c <_strtod_l+0x34>
 8013688:	2101      	movs	r1, #1
 801368a:	9108      	str	r1, [sp, #32]
 801368c:	1c51      	adds	r1, r2, #1
 801368e:	9111      	str	r1, [sp, #68]	@ 0x44
 8013690:	7852      	ldrb	r2, [r2, #1]
 8013692:	2a00      	cmp	r2, #0
 8013694:	d1c4      	bne.n	8013620 <_strtod_l+0x38>
 8013696:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013698:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801369c:	2b00      	cmp	r3, #0
 801369e:	f040 8517 	bne.w	80140d0 <_strtod_l+0xae8>
 80136a2:	ec4b ab10 	vmov	d0, sl, fp
 80136a6:	e7e4      	b.n	8013672 <_strtod_l+0x8a>
 80136a8:	2100      	movs	r1, #0
 80136aa:	e7ee      	b.n	801368a <_strtod_l+0xa2>
 80136ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80136ae:	b13a      	cbz	r2, 80136c0 <_strtod_l+0xd8>
 80136b0:	2135      	movs	r1, #53	@ 0x35
 80136b2:	a814      	add	r0, sp, #80	@ 0x50
 80136b4:	f7ff ff39 	bl	801352a <__copybits>
 80136b8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80136ba:	9805      	ldr	r0, [sp, #20]
 80136bc:	f7ff fb12 	bl	8012ce4 <_Bfree>
 80136c0:	1e73      	subs	r3, r6, #1
 80136c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80136c4:	2b04      	cmp	r3, #4
 80136c6:	d806      	bhi.n	80136d6 <_strtod_l+0xee>
 80136c8:	e8df f003 	tbb	[pc, r3]
 80136cc:	201d0314 	.word	0x201d0314
 80136d0:	14          	.byte	0x14
 80136d1:	00          	.byte	0x00
 80136d2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80136d6:	05e3      	lsls	r3, r4, #23
 80136d8:	bf48      	it	mi
 80136da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80136de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80136e2:	0d1b      	lsrs	r3, r3, #20
 80136e4:	051b      	lsls	r3, r3, #20
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d1b9      	bne.n	801365e <_strtod_l+0x76>
 80136ea:	f7fe fb93 	bl	8011e14 <__errno>
 80136ee:	2322      	movs	r3, #34	@ 0x22
 80136f0:	6003      	str	r3, [r0, #0]
 80136f2:	e7b4      	b.n	801365e <_strtod_l+0x76>
 80136f4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80136f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80136fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013700:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013704:	e7e7      	b.n	80136d6 <_strtod_l+0xee>
 8013706:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013888 <_strtod_l+0x2a0>
 801370a:	e7e4      	b.n	80136d6 <_strtod_l+0xee>
 801370c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013710:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013714:	e7df      	b.n	80136d6 <_strtod_l+0xee>
 8013716:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013718:	1c5a      	adds	r2, r3, #1
 801371a:	9211      	str	r2, [sp, #68]	@ 0x44
 801371c:	785b      	ldrb	r3, [r3, #1]
 801371e:	2b30      	cmp	r3, #48	@ 0x30
 8013720:	d0f9      	beq.n	8013716 <_strtod_l+0x12e>
 8013722:	2b00      	cmp	r3, #0
 8013724:	d09b      	beq.n	801365e <_strtod_l+0x76>
 8013726:	2301      	movs	r3, #1
 8013728:	9307      	str	r3, [sp, #28]
 801372a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801372c:	930a      	str	r3, [sp, #40]	@ 0x28
 801372e:	2300      	movs	r3, #0
 8013730:	9306      	str	r3, [sp, #24]
 8013732:	4699      	mov	r9, r3
 8013734:	461d      	mov	r5, r3
 8013736:	220a      	movs	r2, #10
 8013738:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801373a:	7804      	ldrb	r4, [r0, #0]
 801373c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8013740:	b2d9      	uxtb	r1, r3
 8013742:	2909      	cmp	r1, #9
 8013744:	d92a      	bls.n	801379c <_strtod_l+0x1b4>
 8013746:	494f      	ldr	r1, [pc, #316]	@ (8013884 <_strtod_l+0x29c>)
 8013748:	2201      	movs	r2, #1
 801374a:	f7fe fb06 	bl	8011d5a <strncmp>
 801374e:	b398      	cbz	r0, 80137b8 <_strtod_l+0x1d0>
 8013750:	2000      	movs	r0, #0
 8013752:	4622      	mov	r2, r4
 8013754:	462b      	mov	r3, r5
 8013756:	4607      	mov	r7, r0
 8013758:	4601      	mov	r1, r0
 801375a:	2a65      	cmp	r2, #101	@ 0x65
 801375c:	d001      	beq.n	8013762 <_strtod_l+0x17a>
 801375e:	2a45      	cmp	r2, #69	@ 0x45
 8013760:	d118      	bne.n	8013794 <_strtod_l+0x1ac>
 8013762:	b91b      	cbnz	r3, 801376c <_strtod_l+0x184>
 8013764:	9b07      	ldr	r3, [sp, #28]
 8013766:	4303      	orrs	r3, r0
 8013768:	d095      	beq.n	8013696 <_strtod_l+0xae>
 801376a:	2300      	movs	r3, #0
 801376c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8013770:	f108 0201 	add.w	r2, r8, #1
 8013774:	9211      	str	r2, [sp, #68]	@ 0x44
 8013776:	f898 2001 	ldrb.w	r2, [r8, #1]
 801377a:	2a2b      	cmp	r2, #43	@ 0x2b
 801377c:	d074      	beq.n	8013868 <_strtod_l+0x280>
 801377e:	2a2d      	cmp	r2, #45	@ 0x2d
 8013780:	d07a      	beq.n	8013878 <_strtod_l+0x290>
 8013782:	f04f 0e00 	mov.w	lr, #0
 8013786:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 801378a:	2c09      	cmp	r4, #9
 801378c:	f240 8082 	bls.w	8013894 <_strtod_l+0x2ac>
 8013790:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013794:	2400      	movs	r4, #0
 8013796:	e09d      	b.n	80138d4 <_strtod_l+0x2ec>
 8013798:	2300      	movs	r3, #0
 801379a:	e7c5      	b.n	8013728 <_strtod_l+0x140>
 801379c:	2d08      	cmp	r5, #8
 801379e:	bfc8      	it	gt
 80137a0:	9906      	ldrgt	r1, [sp, #24]
 80137a2:	f100 0001 	add.w	r0, r0, #1
 80137a6:	bfca      	itet	gt
 80137a8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80137ac:	fb02 3909 	mlale	r9, r2, r9, r3
 80137b0:	9306      	strgt	r3, [sp, #24]
 80137b2:	3501      	adds	r5, #1
 80137b4:	9011      	str	r0, [sp, #68]	@ 0x44
 80137b6:	e7bf      	b.n	8013738 <_strtod_l+0x150>
 80137b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80137ba:	1c5a      	adds	r2, r3, #1
 80137bc:	9211      	str	r2, [sp, #68]	@ 0x44
 80137be:	785a      	ldrb	r2, [r3, #1]
 80137c0:	b3bd      	cbz	r5, 8013832 <_strtod_l+0x24a>
 80137c2:	4607      	mov	r7, r0
 80137c4:	462b      	mov	r3, r5
 80137c6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80137ca:	2909      	cmp	r1, #9
 80137cc:	d912      	bls.n	80137f4 <_strtod_l+0x20c>
 80137ce:	2101      	movs	r1, #1
 80137d0:	e7c3      	b.n	801375a <_strtod_l+0x172>
 80137d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80137d4:	1c5a      	adds	r2, r3, #1
 80137d6:	9211      	str	r2, [sp, #68]	@ 0x44
 80137d8:	785a      	ldrb	r2, [r3, #1]
 80137da:	3001      	adds	r0, #1
 80137dc:	2a30      	cmp	r2, #48	@ 0x30
 80137de:	d0f8      	beq.n	80137d2 <_strtod_l+0x1ea>
 80137e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80137e4:	2b08      	cmp	r3, #8
 80137e6:	f200 847a 	bhi.w	80140de <_strtod_l+0xaf6>
 80137ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80137ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80137ee:	4607      	mov	r7, r0
 80137f0:	2000      	movs	r0, #0
 80137f2:	4603      	mov	r3, r0
 80137f4:	3a30      	subs	r2, #48	@ 0x30
 80137f6:	f100 0101 	add.w	r1, r0, #1
 80137fa:	d014      	beq.n	8013826 <_strtod_l+0x23e>
 80137fc:	440f      	add	r7, r1
 80137fe:	469c      	mov	ip, r3
 8013800:	f04f 0e0a 	mov.w	lr, #10
 8013804:	f10c 0401 	add.w	r4, ip, #1
 8013808:	1ae6      	subs	r6, r4, r3
 801380a:	42b1      	cmp	r1, r6
 801380c:	dc13      	bgt.n	8013836 <_strtod_l+0x24e>
 801380e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013812:	1819      	adds	r1, r3, r0
 8013814:	2908      	cmp	r1, #8
 8013816:	f103 0301 	add.w	r3, r3, #1
 801381a:	4403      	add	r3, r0
 801381c:	dc19      	bgt.n	8013852 <_strtod_l+0x26a>
 801381e:	210a      	movs	r1, #10
 8013820:	fb01 2909 	mla	r9, r1, r9, r2
 8013824:	2100      	movs	r1, #0
 8013826:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013828:	1c50      	adds	r0, r2, #1
 801382a:	9011      	str	r0, [sp, #68]	@ 0x44
 801382c:	7852      	ldrb	r2, [r2, #1]
 801382e:	4608      	mov	r0, r1
 8013830:	e7c9      	b.n	80137c6 <_strtod_l+0x1de>
 8013832:	4628      	mov	r0, r5
 8013834:	e7d2      	b.n	80137dc <_strtod_l+0x1f4>
 8013836:	f1bc 0f08 	cmp.w	ip, #8
 801383a:	dc03      	bgt.n	8013844 <_strtod_l+0x25c>
 801383c:	fb0e f909 	mul.w	r9, lr, r9
 8013840:	46a4      	mov	ip, r4
 8013842:	e7df      	b.n	8013804 <_strtod_l+0x21c>
 8013844:	2c10      	cmp	r4, #16
 8013846:	bfde      	ittt	le
 8013848:	9e06      	ldrle	r6, [sp, #24]
 801384a:	fb0e f606 	mulle.w	r6, lr, r6
 801384e:	9606      	strle	r6, [sp, #24]
 8013850:	e7f6      	b.n	8013840 <_strtod_l+0x258>
 8013852:	290f      	cmp	r1, #15
 8013854:	bfdf      	itttt	le
 8013856:	9806      	ldrle	r0, [sp, #24]
 8013858:	210a      	movle	r1, #10
 801385a:	fb01 2200 	mlale	r2, r1, r0, r2
 801385e:	9206      	strle	r2, [sp, #24]
 8013860:	e7e0      	b.n	8013824 <_strtod_l+0x23c>
 8013862:	2700      	movs	r7, #0
 8013864:	2101      	movs	r1, #1
 8013866:	e77d      	b.n	8013764 <_strtod_l+0x17c>
 8013868:	f04f 0e00 	mov.w	lr, #0
 801386c:	f108 0202 	add.w	r2, r8, #2
 8013870:	9211      	str	r2, [sp, #68]	@ 0x44
 8013872:	f898 2002 	ldrb.w	r2, [r8, #2]
 8013876:	e786      	b.n	8013786 <_strtod_l+0x19e>
 8013878:	f04f 0e01 	mov.w	lr, #1
 801387c:	e7f6      	b.n	801386c <_strtod_l+0x284>
 801387e:	bf00      	nop
 8013880:	0801761c 	.word	0x0801761c
 8013884:	08017435 	.word	0x08017435
 8013888:	7ff00000 	.word	0x7ff00000
 801388c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801388e:	1c54      	adds	r4, r2, #1
 8013890:	9411      	str	r4, [sp, #68]	@ 0x44
 8013892:	7852      	ldrb	r2, [r2, #1]
 8013894:	2a30      	cmp	r2, #48	@ 0x30
 8013896:	d0f9      	beq.n	801388c <_strtod_l+0x2a4>
 8013898:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 801389c:	2c08      	cmp	r4, #8
 801389e:	f63f af79 	bhi.w	8013794 <_strtod_l+0x1ac>
 80138a2:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80138a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80138a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80138aa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80138ac:	1c54      	adds	r4, r2, #1
 80138ae:	9411      	str	r4, [sp, #68]	@ 0x44
 80138b0:	7852      	ldrb	r2, [r2, #1]
 80138b2:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 80138b6:	2e09      	cmp	r6, #9
 80138b8:	d937      	bls.n	801392a <_strtod_l+0x342>
 80138ba:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80138bc:	1ba4      	subs	r4, r4, r6
 80138be:	2c08      	cmp	r4, #8
 80138c0:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80138c4:	dc02      	bgt.n	80138cc <_strtod_l+0x2e4>
 80138c6:	4564      	cmp	r4, ip
 80138c8:	bfa8      	it	ge
 80138ca:	4664      	movge	r4, ip
 80138cc:	f1be 0f00 	cmp.w	lr, #0
 80138d0:	d000      	beq.n	80138d4 <_strtod_l+0x2ec>
 80138d2:	4264      	negs	r4, r4
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d14d      	bne.n	8013974 <_strtod_l+0x38c>
 80138d8:	9b07      	ldr	r3, [sp, #28]
 80138da:	4318      	orrs	r0, r3
 80138dc:	f47f aebf 	bne.w	801365e <_strtod_l+0x76>
 80138e0:	2900      	cmp	r1, #0
 80138e2:	f47f aed8 	bne.w	8013696 <_strtod_l+0xae>
 80138e6:	2a69      	cmp	r2, #105	@ 0x69
 80138e8:	d027      	beq.n	801393a <_strtod_l+0x352>
 80138ea:	dc24      	bgt.n	8013936 <_strtod_l+0x34e>
 80138ec:	2a49      	cmp	r2, #73	@ 0x49
 80138ee:	d024      	beq.n	801393a <_strtod_l+0x352>
 80138f0:	2a4e      	cmp	r2, #78	@ 0x4e
 80138f2:	f47f aed0 	bne.w	8013696 <_strtod_l+0xae>
 80138f6:	4997      	ldr	r1, [pc, #604]	@ (8013b54 <_strtod_l+0x56c>)
 80138f8:	a811      	add	r0, sp, #68	@ 0x44
 80138fa:	f001 fef5 	bl	80156e8 <__match>
 80138fe:	2800      	cmp	r0, #0
 8013900:	f43f aec9 	beq.w	8013696 <_strtod_l+0xae>
 8013904:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013906:	781b      	ldrb	r3, [r3, #0]
 8013908:	2b28      	cmp	r3, #40	@ 0x28
 801390a:	d12d      	bne.n	8013968 <_strtod_l+0x380>
 801390c:	4992      	ldr	r1, [pc, #584]	@ (8013b58 <_strtod_l+0x570>)
 801390e:	aa14      	add	r2, sp, #80	@ 0x50
 8013910:	a811      	add	r0, sp, #68	@ 0x44
 8013912:	f001 fefd 	bl	8015710 <__hexnan>
 8013916:	2805      	cmp	r0, #5
 8013918:	d126      	bne.n	8013968 <_strtod_l+0x380>
 801391a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801391c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8013920:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013924:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013928:	e699      	b.n	801365e <_strtod_l+0x76>
 801392a:	240a      	movs	r4, #10
 801392c:	fb04 2c0c 	mla	ip, r4, ip, r2
 8013930:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8013934:	e7b9      	b.n	80138aa <_strtod_l+0x2c2>
 8013936:	2a6e      	cmp	r2, #110	@ 0x6e
 8013938:	e7db      	b.n	80138f2 <_strtod_l+0x30a>
 801393a:	4988      	ldr	r1, [pc, #544]	@ (8013b5c <_strtod_l+0x574>)
 801393c:	a811      	add	r0, sp, #68	@ 0x44
 801393e:	f001 fed3 	bl	80156e8 <__match>
 8013942:	2800      	cmp	r0, #0
 8013944:	f43f aea7 	beq.w	8013696 <_strtod_l+0xae>
 8013948:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801394a:	4985      	ldr	r1, [pc, #532]	@ (8013b60 <_strtod_l+0x578>)
 801394c:	3b01      	subs	r3, #1
 801394e:	a811      	add	r0, sp, #68	@ 0x44
 8013950:	9311      	str	r3, [sp, #68]	@ 0x44
 8013952:	f001 fec9 	bl	80156e8 <__match>
 8013956:	b910      	cbnz	r0, 801395e <_strtod_l+0x376>
 8013958:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801395a:	3301      	adds	r3, #1
 801395c:	9311      	str	r3, [sp, #68]	@ 0x44
 801395e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8013b74 <_strtod_l+0x58c>
 8013962:	f04f 0a00 	mov.w	sl, #0
 8013966:	e67a      	b.n	801365e <_strtod_l+0x76>
 8013968:	487e      	ldr	r0, [pc, #504]	@ (8013b64 <_strtod_l+0x57c>)
 801396a:	f001 fbf9 	bl	8015160 <nan>
 801396e:	ec5b ab10 	vmov	sl, fp, d0
 8013972:	e674      	b.n	801365e <_strtod_l+0x76>
 8013974:	ee07 9a90 	vmov	s15, r9
 8013978:	1be2      	subs	r2, r4, r7
 801397a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801397e:	2d00      	cmp	r5, #0
 8013980:	bf08      	it	eq
 8013982:	461d      	moveq	r5, r3
 8013984:	2b10      	cmp	r3, #16
 8013986:	9209      	str	r2, [sp, #36]	@ 0x24
 8013988:	461a      	mov	r2, r3
 801398a:	bfa8      	it	ge
 801398c:	2210      	movge	r2, #16
 801398e:	2b09      	cmp	r3, #9
 8013990:	ec5b ab17 	vmov	sl, fp, d7
 8013994:	dc15      	bgt.n	80139c2 <_strtod_l+0x3da>
 8013996:	1be1      	subs	r1, r4, r7
 8013998:	2900      	cmp	r1, #0
 801399a:	f43f ae60 	beq.w	801365e <_strtod_l+0x76>
 801399e:	eba4 0107 	sub.w	r1, r4, r7
 80139a2:	dd72      	ble.n	8013a8a <_strtod_l+0x4a2>
 80139a4:	2916      	cmp	r1, #22
 80139a6:	dc59      	bgt.n	8013a5c <_strtod_l+0x474>
 80139a8:	4b6f      	ldr	r3, [pc, #444]	@ (8013b68 <_strtod_l+0x580>)
 80139aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80139ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80139b0:	ed93 7b00 	vldr	d7, [r3]
 80139b4:	ec4b ab16 	vmov	d6, sl, fp
 80139b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80139bc:	ec5b ab17 	vmov	sl, fp, d7
 80139c0:	e64d      	b.n	801365e <_strtod_l+0x76>
 80139c2:	4969      	ldr	r1, [pc, #420]	@ (8013b68 <_strtod_l+0x580>)
 80139c4:	eddd 6a06 	vldr	s13, [sp, #24]
 80139c8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80139cc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80139d0:	2b0f      	cmp	r3, #15
 80139d2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80139d6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80139da:	ec5b ab16 	vmov	sl, fp, d6
 80139de:	ddda      	ble.n	8013996 <_strtod_l+0x3ae>
 80139e0:	1a9a      	subs	r2, r3, r2
 80139e2:	1be1      	subs	r1, r4, r7
 80139e4:	440a      	add	r2, r1
 80139e6:	2a00      	cmp	r2, #0
 80139e8:	f340 8094 	ble.w	8013b14 <_strtod_l+0x52c>
 80139ec:	f012 000f 	ands.w	r0, r2, #15
 80139f0:	d00a      	beq.n	8013a08 <_strtod_l+0x420>
 80139f2:	495d      	ldr	r1, [pc, #372]	@ (8013b68 <_strtod_l+0x580>)
 80139f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80139f8:	ed91 7b00 	vldr	d7, [r1]
 80139fc:	ec4b ab16 	vmov	d6, sl, fp
 8013a00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a04:	ec5b ab17 	vmov	sl, fp, d7
 8013a08:	f032 020f 	bics.w	r2, r2, #15
 8013a0c:	d073      	beq.n	8013af6 <_strtod_l+0x50e>
 8013a0e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8013a12:	dd47      	ble.n	8013aa4 <_strtod_l+0x4bc>
 8013a14:	2400      	movs	r4, #0
 8013a16:	4625      	mov	r5, r4
 8013a18:	9407      	str	r4, [sp, #28]
 8013a1a:	4626      	mov	r6, r4
 8013a1c:	9a05      	ldr	r2, [sp, #20]
 8013a1e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013b74 <_strtod_l+0x58c>
 8013a22:	2322      	movs	r3, #34	@ 0x22
 8013a24:	6013      	str	r3, [r2, #0]
 8013a26:	f04f 0a00 	mov.w	sl, #0
 8013a2a:	9b07      	ldr	r3, [sp, #28]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	f43f ae16 	beq.w	801365e <_strtod_l+0x76>
 8013a32:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013a34:	9805      	ldr	r0, [sp, #20]
 8013a36:	f7ff f955 	bl	8012ce4 <_Bfree>
 8013a3a:	9805      	ldr	r0, [sp, #20]
 8013a3c:	4631      	mov	r1, r6
 8013a3e:	f7ff f951 	bl	8012ce4 <_Bfree>
 8013a42:	9805      	ldr	r0, [sp, #20]
 8013a44:	4629      	mov	r1, r5
 8013a46:	f7ff f94d 	bl	8012ce4 <_Bfree>
 8013a4a:	9907      	ldr	r1, [sp, #28]
 8013a4c:	9805      	ldr	r0, [sp, #20]
 8013a4e:	f7ff f949 	bl	8012ce4 <_Bfree>
 8013a52:	9805      	ldr	r0, [sp, #20]
 8013a54:	4621      	mov	r1, r4
 8013a56:	f7ff f945 	bl	8012ce4 <_Bfree>
 8013a5a:	e600      	b.n	801365e <_strtod_l+0x76>
 8013a5c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8013a60:	1be0      	subs	r0, r4, r7
 8013a62:	4281      	cmp	r1, r0
 8013a64:	dbbc      	blt.n	80139e0 <_strtod_l+0x3f8>
 8013a66:	4a40      	ldr	r2, [pc, #256]	@ (8013b68 <_strtod_l+0x580>)
 8013a68:	f1c3 030f 	rsb	r3, r3, #15
 8013a6c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013a70:	ed91 7b00 	vldr	d7, [r1]
 8013a74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013a76:	ec4b ab16 	vmov	d6, sl, fp
 8013a7a:	1acb      	subs	r3, r1, r3
 8013a7c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013a80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a84:	ed92 6b00 	vldr	d6, [r2]
 8013a88:	e796      	b.n	80139b8 <_strtod_l+0x3d0>
 8013a8a:	3116      	adds	r1, #22
 8013a8c:	dba8      	blt.n	80139e0 <_strtod_l+0x3f8>
 8013a8e:	4b36      	ldr	r3, [pc, #216]	@ (8013b68 <_strtod_l+0x580>)
 8013a90:	1b3c      	subs	r4, r7, r4
 8013a92:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013a96:	ed94 7b00 	vldr	d7, [r4]
 8013a9a:	ec4b ab16 	vmov	d6, sl, fp
 8013a9e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013aa2:	e78b      	b.n	80139bc <_strtod_l+0x3d4>
 8013aa4:	2000      	movs	r0, #0
 8013aa6:	ec4b ab17 	vmov	d7, sl, fp
 8013aaa:	4e30      	ldr	r6, [pc, #192]	@ (8013b6c <_strtod_l+0x584>)
 8013aac:	1112      	asrs	r2, r2, #4
 8013aae:	4601      	mov	r1, r0
 8013ab0:	2a01      	cmp	r2, #1
 8013ab2:	dc23      	bgt.n	8013afc <_strtod_l+0x514>
 8013ab4:	b108      	cbz	r0, 8013aba <_strtod_l+0x4d2>
 8013ab6:	ec5b ab17 	vmov	sl, fp, d7
 8013aba:	4a2c      	ldr	r2, [pc, #176]	@ (8013b6c <_strtod_l+0x584>)
 8013abc:	482c      	ldr	r0, [pc, #176]	@ (8013b70 <_strtod_l+0x588>)
 8013abe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013ac2:	ed92 7b00 	vldr	d7, [r2]
 8013ac6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013aca:	ec4b ab16 	vmov	d6, sl, fp
 8013ace:	4a29      	ldr	r2, [pc, #164]	@ (8013b74 <_strtod_l+0x58c>)
 8013ad0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013ad4:	ee17 1a90 	vmov	r1, s15
 8013ad8:	400a      	ands	r2, r1
 8013ada:	4282      	cmp	r2, r0
 8013adc:	ec5b ab17 	vmov	sl, fp, d7
 8013ae0:	d898      	bhi.n	8013a14 <_strtod_l+0x42c>
 8013ae2:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8013ae6:	4282      	cmp	r2, r0
 8013ae8:	bf86      	itte	hi
 8013aea:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8013b78 <_strtod_l+0x590>
 8013aee:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8013af2:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8013af6:	2200      	movs	r2, #0
 8013af8:	9206      	str	r2, [sp, #24]
 8013afa:	e076      	b.n	8013bea <_strtod_l+0x602>
 8013afc:	f012 0f01 	tst.w	r2, #1
 8013b00:	d004      	beq.n	8013b0c <_strtod_l+0x524>
 8013b02:	ed96 6b00 	vldr	d6, [r6]
 8013b06:	2001      	movs	r0, #1
 8013b08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b0c:	3101      	adds	r1, #1
 8013b0e:	1052      	asrs	r2, r2, #1
 8013b10:	3608      	adds	r6, #8
 8013b12:	e7cd      	b.n	8013ab0 <_strtod_l+0x4c8>
 8013b14:	d0ef      	beq.n	8013af6 <_strtod_l+0x50e>
 8013b16:	4252      	negs	r2, r2
 8013b18:	f012 000f 	ands.w	r0, r2, #15
 8013b1c:	d00a      	beq.n	8013b34 <_strtod_l+0x54c>
 8013b1e:	4912      	ldr	r1, [pc, #72]	@ (8013b68 <_strtod_l+0x580>)
 8013b20:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013b24:	ed91 7b00 	vldr	d7, [r1]
 8013b28:	ec4b ab16 	vmov	d6, sl, fp
 8013b2c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013b30:	ec5b ab17 	vmov	sl, fp, d7
 8013b34:	1112      	asrs	r2, r2, #4
 8013b36:	d0de      	beq.n	8013af6 <_strtod_l+0x50e>
 8013b38:	2a1f      	cmp	r2, #31
 8013b3a:	dd1f      	ble.n	8013b7c <_strtod_l+0x594>
 8013b3c:	2400      	movs	r4, #0
 8013b3e:	4625      	mov	r5, r4
 8013b40:	9407      	str	r4, [sp, #28]
 8013b42:	4626      	mov	r6, r4
 8013b44:	9a05      	ldr	r2, [sp, #20]
 8013b46:	2322      	movs	r3, #34	@ 0x22
 8013b48:	f04f 0a00 	mov.w	sl, #0
 8013b4c:	f04f 0b00 	mov.w	fp, #0
 8013b50:	6013      	str	r3, [r2, #0]
 8013b52:	e76a      	b.n	8013a2a <_strtod_l+0x442>
 8013b54:	08017325 	.word	0x08017325
 8013b58:	08017608 	.word	0x08017608
 8013b5c:	0801731d 	.word	0x0801731d
 8013b60:	08017352 	.word	0x08017352
 8013b64:	080174a6 	.word	0x080174a6
 8013b68:	08017540 	.word	0x08017540
 8013b6c:	08017518 	.word	0x08017518
 8013b70:	7ca00000 	.word	0x7ca00000
 8013b74:	7ff00000 	.word	0x7ff00000
 8013b78:	7fefffff 	.word	0x7fefffff
 8013b7c:	f012 0110 	ands.w	r1, r2, #16
 8013b80:	bf18      	it	ne
 8013b82:	216a      	movne	r1, #106	@ 0x6a
 8013b84:	9106      	str	r1, [sp, #24]
 8013b86:	ec4b ab17 	vmov	d7, sl, fp
 8013b8a:	49af      	ldr	r1, [pc, #700]	@ (8013e48 <_strtod_l+0x860>)
 8013b8c:	2000      	movs	r0, #0
 8013b8e:	07d6      	lsls	r6, r2, #31
 8013b90:	d504      	bpl.n	8013b9c <_strtod_l+0x5b4>
 8013b92:	ed91 6b00 	vldr	d6, [r1]
 8013b96:	2001      	movs	r0, #1
 8013b98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b9c:	1052      	asrs	r2, r2, #1
 8013b9e:	f101 0108 	add.w	r1, r1, #8
 8013ba2:	d1f4      	bne.n	8013b8e <_strtod_l+0x5a6>
 8013ba4:	b108      	cbz	r0, 8013baa <_strtod_l+0x5c2>
 8013ba6:	ec5b ab17 	vmov	sl, fp, d7
 8013baa:	9a06      	ldr	r2, [sp, #24]
 8013bac:	b1b2      	cbz	r2, 8013bdc <_strtod_l+0x5f4>
 8013bae:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8013bb2:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8013bb6:	2a00      	cmp	r2, #0
 8013bb8:	4658      	mov	r0, fp
 8013bba:	dd0f      	ble.n	8013bdc <_strtod_l+0x5f4>
 8013bbc:	2a1f      	cmp	r2, #31
 8013bbe:	dd55      	ble.n	8013c6c <_strtod_l+0x684>
 8013bc0:	2a34      	cmp	r2, #52	@ 0x34
 8013bc2:	bfde      	ittt	le
 8013bc4:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 8013bc8:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8013bcc:	408a      	lslle	r2, r1
 8013bce:	f04f 0a00 	mov.w	sl, #0
 8013bd2:	bfcc      	ite	gt
 8013bd4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013bd8:	ea02 0b00 	andle.w	fp, r2, r0
 8013bdc:	ec4b ab17 	vmov	d7, sl, fp
 8013be0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be8:	d0a8      	beq.n	8013b3c <_strtod_l+0x554>
 8013bea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013bec:	9805      	ldr	r0, [sp, #20]
 8013bee:	f8cd 9000 	str.w	r9, [sp]
 8013bf2:	462a      	mov	r2, r5
 8013bf4:	f7ff f8de 	bl	8012db4 <__s2b>
 8013bf8:	9007      	str	r0, [sp, #28]
 8013bfa:	2800      	cmp	r0, #0
 8013bfc:	f43f af0a 	beq.w	8013a14 <_strtod_l+0x42c>
 8013c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c02:	1b3f      	subs	r7, r7, r4
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	bfb4      	ite	lt
 8013c08:	463b      	movlt	r3, r7
 8013c0a:	2300      	movge	r3, #0
 8013c0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8013c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c10:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8013e38 <_strtod_l+0x850>
 8013c14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013c18:	2400      	movs	r4, #0
 8013c1a:	930d      	str	r3, [sp, #52]	@ 0x34
 8013c1c:	4625      	mov	r5, r4
 8013c1e:	9b07      	ldr	r3, [sp, #28]
 8013c20:	9805      	ldr	r0, [sp, #20]
 8013c22:	6859      	ldr	r1, [r3, #4]
 8013c24:	f7ff f81e 	bl	8012c64 <_Balloc>
 8013c28:	4606      	mov	r6, r0
 8013c2a:	2800      	cmp	r0, #0
 8013c2c:	f43f aef6 	beq.w	8013a1c <_strtod_l+0x434>
 8013c30:	9b07      	ldr	r3, [sp, #28]
 8013c32:	691a      	ldr	r2, [r3, #16]
 8013c34:	ec4b ab19 	vmov	d9, sl, fp
 8013c38:	3202      	adds	r2, #2
 8013c3a:	f103 010c 	add.w	r1, r3, #12
 8013c3e:	0092      	lsls	r2, r2, #2
 8013c40:	300c      	adds	r0, #12
 8013c42:	f7fe f914 	bl	8011e6e <memcpy>
 8013c46:	eeb0 0b49 	vmov.f64	d0, d9
 8013c4a:	9805      	ldr	r0, [sp, #20]
 8013c4c:	aa14      	add	r2, sp, #80	@ 0x50
 8013c4e:	a913      	add	r1, sp, #76	@ 0x4c
 8013c50:	f7ff fbe4 	bl	801341c <__d2b>
 8013c54:	9012      	str	r0, [sp, #72]	@ 0x48
 8013c56:	2800      	cmp	r0, #0
 8013c58:	f43f aee0 	beq.w	8013a1c <_strtod_l+0x434>
 8013c5c:	9805      	ldr	r0, [sp, #20]
 8013c5e:	2101      	movs	r1, #1
 8013c60:	f7ff f93e 	bl	8012ee0 <__i2b>
 8013c64:	4605      	mov	r5, r0
 8013c66:	b940      	cbnz	r0, 8013c7a <_strtod_l+0x692>
 8013c68:	2500      	movs	r5, #0
 8013c6a:	e6d7      	b.n	8013a1c <_strtod_l+0x434>
 8013c6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8013c70:	fa01 f202 	lsl.w	r2, r1, r2
 8013c74:	ea02 0a0a 	and.w	sl, r2, sl
 8013c78:	e7b0      	b.n	8013bdc <_strtod_l+0x5f4>
 8013c7a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8013c7c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013c7e:	2f00      	cmp	r7, #0
 8013c80:	bfab      	itete	ge
 8013c82:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8013c84:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8013c86:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8013c8a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8013c8e:	bfac      	ite	ge
 8013c90:	eb07 0903 	addge.w	r9, r7, r3
 8013c94:	eba3 0807 	sublt.w	r8, r3, r7
 8013c98:	9b06      	ldr	r3, [sp, #24]
 8013c9a:	1aff      	subs	r7, r7, r3
 8013c9c:	4417      	add	r7, r2
 8013c9e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8013ca2:	4a6a      	ldr	r2, [pc, #424]	@ (8013e4c <_strtod_l+0x864>)
 8013ca4:	3f01      	subs	r7, #1
 8013ca6:	4297      	cmp	r7, r2
 8013ca8:	da51      	bge.n	8013d4e <_strtod_l+0x766>
 8013caa:	1bd1      	subs	r1, r2, r7
 8013cac:	291f      	cmp	r1, #31
 8013cae:	eba3 0301 	sub.w	r3, r3, r1
 8013cb2:	f04f 0201 	mov.w	r2, #1
 8013cb6:	dc3e      	bgt.n	8013d36 <_strtod_l+0x74e>
 8013cb8:	408a      	lsls	r2, r1
 8013cba:	920c      	str	r2, [sp, #48]	@ 0x30
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013cc0:	eb09 0703 	add.w	r7, r9, r3
 8013cc4:	4498      	add	r8, r3
 8013cc6:	9b06      	ldr	r3, [sp, #24]
 8013cc8:	45b9      	cmp	r9, r7
 8013cca:	4498      	add	r8, r3
 8013ccc:	464b      	mov	r3, r9
 8013cce:	bfa8      	it	ge
 8013cd0:	463b      	movge	r3, r7
 8013cd2:	4543      	cmp	r3, r8
 8013cd4:	bfa8      	it	ge
 8013cd6:	4643      	movge	r3, r8
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	bfc2      	ittt	gt
 8013cdc:	1aff      	subgt	r7, r7, r3
 8013cde:	eba8 0803 	subgt.w	r8, r8, r3
 8013ce2:	eba9 0903 	subgt.w	r9, r9, r3
 8013ce6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	dd16      	ble.n	8013d1a <_strtod_l+0x732>
 8013cec:	4629      	mov	r1, r5
 8013cee:	9805      	ldr	r0, [sp, #20]
 8013cf0:	461a      	mov	r2, r3
 8013cf2:	f7ff f9ad 	bl	8013050 <__pow5mult>
 8013cf6:	4605      	mov	r5, r0
 8013cf8:	2800      	cmp	r0, #0
 8013cfa:	d0b5      	beq.n	8013c68 <_strtod_l+0x680>
 8013cfc:	4601      	mov	r1, r0
 8013cfe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013d00:	9805      	ldr	r0, [sp, #20]
 8013d02:	f7ff f903 	bl	8012f0c <__multiply>
 8013d06:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	f43f ae87 	beq.w	8013a1c <_strtod_l+0x434>
 8013d0e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013d10:	9805      	ldr	r0, [sp, #20]
 8013d12:	f7fe ffe7 	bl	8012ce4 <_Bfree>
 8013d16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d18:	9312      	str	r3, [sp, #72]	@ 0x48
 8013d1a:	2f00      	cmp	r7, #0
 8013d1c:	dc1b      	bgt.n	8013d56 <_strtod_l+0x76e>
 8013d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	dd21      	ble.n	8013d68 <_strtod_l+0x780>
 8013d24:	4631      	mov	r1, r6
 8013d26:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013d28:	9805      	ldr	r0, [sp, #20]
 8013d2a:	f7ff f991 	bl	8013050 <__pow5mult>
 8013d2e:	4606      	mov	r6, r0
 8013d30:	b9d0      	cbnz	r0, 8013d68 <_strtod_l+0x780>
 8013d32:	2600      	movs	r6, #0
 8013d34:	e672      	b.n	8013a1c <_strtod_l+0x434>
 8013d36:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8013d3a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8013d3e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8013d42:	37e2      	adds	r7, #226	@ 0xe2
 8013d44:	fa02 f107 	lsl.w	r1, r2, r7
 8013d48:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013d4a:	920c      	str	r2, [sp, #48]	@ 0x30
 8013d4c:	e7b8      	b.n	8013cc0 <_strtod_l+0x6d8>
 8013d4e:	2200      	movs	r2, #0
 8013d50:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013d52:	2201      	movs	r2, #1
 8013d54:	e7f9      	b.n	8013d4a <_strtod_l+0x762>
 8013d56:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013d58:	9805      	ldr	r0, [sp, #20]
 8013d5a:	463a      	mov	r2, r7
 8013d5c:	f7ff f9d2 	bl	8013104 <__lshift>
 8013d60:	9012      	str	r0, [sp, #72]	@ 0x48
 8013d62:	2800      	cmp	r0, #0
 8013d64:	d1db      	bne.n	8013d1e <_strtod_l+0x736>
 8013d66:	e659      	b.n	8013a1c <_strtod_l+0x434>
 8013d68:	f1b8 0f00 	cmp.w	r8, #0
 8013d6c:	dd07      	ble.n	8013d7e <_strtod_l+0x796>
 8013d6e:	4631      	mov	r1, r6
 8013d70:	9805      	ldr	r0, [sp, #20]
 8013d72:	4642      	mov	r2, r8
 8013d74:	f7ff f9c6 	bl	8013104 <__lshift>
 8013d78:	4606      	mov	r6, r0
 8013d7a:	2800      	cmp	r0, #0
 8013d7c:	d0d9      	beq.n	8013d32 <_strtod_l+0x74a>
 8013d7e:	f1b9 0f00 	cmp.w	r9, #0
 8013d82:	dd08      	ble.n	8013d96 <_strtod_l+0x7ae>
 8013d84:	4629      	mov	r1, r5
 8013d86:	9805      	ldr	r0, [sp, #20]
 8013d88:	464a      	mov	r2, r9
 8013d8a:	f7ff f9bb 	bl	8013104 <__lshift>
 8013d8e:	4605      	mov	r5, r0
 8013d90:	2800      	cmp	r0, #0
 8013d92:	f43f ae43 	beq.w	8013a1c <_strtod_l+0x434>
 8013d96:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013d98:	9805      	ldr	r0, [sp, #20]
 8013d9a:	4632      	mov	r2, r6
 8013d9c:	f7ff fa3a 	bl	8013214 <__mdiff>
 8013da0:	4604      	mov	r4, r0
 8013da2:	2800      	cmp	r0, #0
 8013da4:	f43f ae3a 	beq.w	8013a1c <_strtod_l+0x434>
 8013da8:	2300      	movs	r3, #0
 8013daa:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8013dae:	60c3      	str	r3, [r0, #12]
 8013db0:	4629      	mov	r1, r5
 8013db2:	f7ff fa13 	bl	80131dc <__mcmp>
 8013db6:	2800      	cmp	r0, #0
 8013db8:	da4c      	bge.n	8013e54 <_strtod_l+0x86c>
 8013dba:	ea58 080a 	orrs.w	r8, r8, sl
 8013dbe:	d172      	bne.n	8013ea6 <_strtod_l+0x8be>
 8013dc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d16e      	bne.n	8013ea6 <_strtod_l+0x8be>
 8013dc8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013dcc:	0d1b      	lsrs	r3, r3, #20
 8013dce:	051b      	lsls	r3, r3, #20
 8013dd0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013dd4:	d967      	bls.n	8013ea6 <_strtod_l+0x8be>
 8013dd6:	6963      	ldr	r3, [r4, #20]
 8013dd8:	b913      	cbnz	r3, 8013de0 <_strtod_l+0x7f8>
 8013dda:	6923      	ldr	r3, [r4, #16]
 8013ddc:	2b01      	cmp	r3, #1
 8013dde:	dd62      	ble.n	8013ea6 <_strtod_l+0x8be>
 8013de0:	4621      	mov	r1, r4
 8013de2:	2201      	movs	r2, #1
 8013de4:	9805      	ldr	r0, [sp, #20]
 8013de6:	f7ff f98d 	bl	8013104 <__lshift>
 8013dea:	4629      	mov	r1, r5
 8013dec:	4604      	mov	r4, r0
 8013dee:	f7ff f9f5 	bl	80131dc <__mcmp>
 8013df2:	2800      	cmp	r0, #0
 8013df4:	dd57      	ble.n	8013ea6 <_strtod_l+0x8be>
 8013df6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013dfa:	9a06      	ldr	r2, [sp, #24]
 8013dfc:	0d1b      	lsrs	r3, r3, #20
 8013dfe:	051b      	lsls	r3, r3, #20
 8013e00:	2a00      	cmp	r2, #0
 8013e02:	d06e      	beq.n	8013ee2 <_strtod_l+0x8fa>
 8013e04:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013e08:	d86b      	bhi.n	8013ee2 <_strtod_l+0x8fa>
 8013e0a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013e0e:	f67f ae99 	bls.w	8013b44 <_strtod_l+0x55c>
 8013e12:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8013e40 <_strtod_l+0x858>
 8013e16:	ec4b ab16 	vmov	d6, sl, fp
 8013e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8013e50 <_strtod_l+0x868>)
 8013e1c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013e20:	ee17 2a90 	vmov	r2, s15
 8013e24:	4013      	ands	r3, r2
 8013e26:	ec5b ab17 	vmov	sl, fp, d7
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	f47f ae01 	bne.w	8013a32 <_strtod_l+0x44a>
 8013e30:	9a05      	ldr	r2, [sp, #20]
 8013e32:	2322      	movs	r3, #34	@ 0x22
 8013e34:	6013      	str	r3, [r2, #0]
 8013e36:	e5fc      	b.n	8013a32 <_strtod_l+0x44a>
 8013e38:	ffc00000 	.word	0xffc00000
 8013e3c:	41dfffff 	.word	0x41dfffff
 8013e40:	00000000 	.word	0x00000000
 8013e44:	39500000 	.word	0x39500000
 8013e48:	08017630 	.word	0x08017630
 8013e4c:	fffffc02 	.word	0xfffffc02
 8013e50:	7ff00000 	.word	0x7ff00000
 8013e54:	46d9      	mov	r9, fp
 8013e56:	d15d      	bne.n	8013f14 <_strtod_l+0x92c>
 8013e58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e5c:	f1b8 0f00 	cmp.w	r8, #0
 8013e60:	d02a      	beq.n	8013eb8 <_strtod_l+0x8d0>
 8013e62:	4aa9      	ldr	r2, [pc, #676]	@ (8014108 <_strtod_l+0xb20>)
 8013e64:	4293      	cmp	r3, r2
 8013e66:	d12a      	bne.n	8013ebe <_strtod_l+0x8d6>
 8013e68:	9b06      	ldr	r3, [sp, #24]
 8013e6a:	4652      	mov	r2, sl
 8013e6c:	b1fb      	cbz	r3, 8013eae <_strtod_l+0x8c6>
 8013e6e:	4ba7      	ldr	r3, [pc, #668]	@ (801410c <_strtod_l+0xb24>)
 8013e70:	ea0b 0303 	and.w	r3, fp, r3
 8013e74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013e78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8013e7c:	d81a      	bhi.n	8013eb4 <_strtod_l+0x8cc>
 8013e7e:	0d1b      	lsrs	r3, r3, #20
 8013e80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013e84:	fa01 f303 	lsl.w	r3, r1, r3
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d118      	bne.n	8013ebe <_strtod_l+0x8d6>
 8013e8c:	4ba0      	ldr	r3, [pc, #640]	@ (8014110 <_strtod_l+0xb28>)
 8013e8e:	4599      	cmp	r9, r3
 8013e90:	d102      	bne.n	8013e98 <_strtod_l+0x8b0>
 8013e92:	3201      	adds	r2, #1
 8013e94:	f43f adc2 	beq.w	8013a1c <_strtod_l+0x434>
 8013e98:	4b9c      	ldr	r3, [pc, #624]	@ (801410c <_strtod_l+0xb24>)
 8013e9a:	ea09 0303 	and.w	r3, r9, r3
 8013e9e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8013ea2:	f04f 0a00 	mov.w	sl, #0
 8013ea6:	9b06      	ldr	r3, [sp, #24]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d1b2      	bne.n	8013e12 <_strtod_l+0x82a>
 8013eac:	e5c1      	b.n	8013a32 <_strtod_l+0x44a>
 8013eae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013eb2:	e7e9      	b.n	8013e88 <_strtod_l+0x8a0>
 8013eb4:	460b      	mov	r3, r1
 8013eb6:	e7e7      	b.n	8013e88 <_strtod_l+0x8a0>
 8013eb8:	ea53 030a 	orrs.w	r3, r3, sl
 8013ebc:	d09b      	beq.n	8013df6 <_strtod_l+0x80e>
 8013ebe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ec0:	b1c3      	cbz	r3, 8013ef4 <_strtod_l+0x90c>
 8013ec2:	ea13 0f09 	tst.w	r3, r9
 8013ec6:	d0ee      	beq.n	8013ea6 <_strtod_l+0x8be>
 8013ec8:	9a06      	ldr	r2, [sp, #24]
 8013eca:	4650      	mov	r0, sl
 8013ecc:	4659      	mov	r1, fp
 8013ece:	f1b8 0f00 	cmp.w	r8, #0
 8013ed2:	d013      	beq.n	8013efc <_strtod_l+0x914>
 8013ed4:	f7ff fb6d 	bl	80135b2 <sulp>
 8013ed8:	ee39 7b00 	vadd.f64	d7, d9, d0
 8013edc:	ec5b ab17 	vmov	sl, fp, d7
 8013ee0:	e7e1      	b.n	8013ea6 <_strtod_l+0x8be>
 8013ee2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013ee6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013eea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013eee:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013ef2:	e7d8      	b.n	8013ea6 <_strtod_l+0x8be>
 8013ef4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013ef6:	ea13 0f0a 	tst.w	r3, sl
 8013efa:	e7e4      	b.n	8013ec6 <_strtod_l+0x8de>
 8013efc:	f7ff fb59 	bl	80135b2 <sulp>
 8013f00:	ee39 0b40 	vsub.f64	d0, d9, d0
 8013f04:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f0c:	ec5b ab10 	vmov	sl, fp, d0
 8013f10:	d1c9      	bne.n	8013ea6 <_strtod_l+0x8be>
 8013f12:	e617      	b.n	8013b44 <_strtod_l+0x55c>
 8013f14:	4629      	mov	r1, r5
 8013f16:	4620      	mov	r0, r4
 8013f18:	f7ff fad8 	bl	80134cc <__ratio>
 8013f1c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8013f20:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f28:	d85d      	bhi.n	8013fe6 <_strtod_l+0x9fe>
 8013f2a:	f1b8 0f00 	cmp.w	r8, #0
 8013f2e:	d164      	bne.n	8013ffa <_strtod_l+0xa12>
 8013f30:	f1ba 0f00 	cmp.w	sl, #0
 8013f34:	d14b      	bne.n	8013fce <_strtod_l+0x9e6>
 8013f36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f3a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d160      	bne.n	8014004 <_strtod_l+0xa1c>
 8013f42:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8013f46:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8013f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f4e:	d401      	bmi.n	8013f54 <_strtod_l+0x96c>
 8013f50:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013f54:	eeb1 ab48 	vneg.f64	d10, d8
 8013f58:	486c      	ldr	r0, [pc, #432]	@ (801410c <_strtod_l+0xb24>)
 8013f5a:	496e      	ldr	r1, [pc, #440]	@ (8014114 <_strtod_l+0xb2c>)
 8013f5c:	ea09 0700 	and.w	r7, r9, r0
 8013f60:	428f      	cmp	r7, r1
 8013f62:	ec53 2b1a 	vmov	r2, r3, d10
 8013f66:	d17d      	bne.n	8014064 <_strtod_l+0xa7c>
 8013f68:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8013f6c:	ec4b ab1c 	vmov	d12, sl, fp
 8013f70:	eeb0 0b4c 	vmov.f64	d0, d12
 8013f74:	f7ff f9e2 	bl	801333c <__ulp>
 8013f78:	4864      	ldr	r0, [pc, #400]	@ (801410c <_strtod_l+0xb24>)
 8013f7a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8013f7e:	ee1c 3a90 	vmov	r3, s25
 8013f82:	4a65      	ldr	r2, [pc, #404]	@ (8014118 <_strtod_l+0xb30>)
 8013f84:	ea03 0100 	and.w	r1, r3, r0
 8013f88:	4291      	cmp	r1, r2
 8013f8a:	ec5b ab1c 	vmov	sl, fp, d12
 8013f8e:	d93c      	bls.n	801400a <_strtod_l+0xa22>
 8013f90:	ee19 2a90 	vmov	r2, s19
 8013f94:	4b5e      	ldr	r3, [pc, #376]	@ (8014110 <_strtod_l+0xb28>)
 8013f96:	429a      	cmp	r2, r3
 8013f98:	d104      	bne.n	8013fa4 <_strtod_l+0x9bc>
 8013f9a:	ee19 3a10 	vmov	r3, s18
 8013f9e:	3301      	adds	r3, #1
 8013fa0:	f43f ad3c 	beq.w	8013a1c <_strtod_l+0x434>
 8013fa4:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8014110 <_strtod_l+0xb28>
 8013fa8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013fac:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013fae:	9805      	ldr	r0, [sp, #20]
 8013fb0:	f7fe fe98 	bl	8012ce4 <_Bfree>
 8013fb4:	9805      	ldr	r0, [sp, #20]
 8013fb6:	4631      	mov	r1, r6
 8013fb8:	f7fe fe94 	bl	8012ce4 <_Bfree>
 8013fbc:	9805      	ldr	r0, [sp, #20]
 8013fbe:	4629      	mov	r1, r5
 8013fc0:	f7fe fe90 	bl	8012ce4 <_Bfree>
 8013fc4:	9805      	ldr	r0, [sp, #20]
 8013fc6:	4621      	mov	r1, r4
 8013fc8:	f7fe fe8c 	bl	8012ce4 <_Bfree>
 8013fcc:	e627      	b.n	8013c1e <_strtod_l+0x636>
 8013fce:	f1ba 0f01 	cmp.w	sl, #1
 8013fd2:	d103      	bne.n	8013fdc <_strtod_l+0x9f4>
 8013fd4:	f1bb 0f00 	cmp.w	fp, #0
 8013fd8:	f43f adb4 	beq.w	8013b44 <_strtod_l+0x55c>
 8013fdc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013fe0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8013fe4:	e7b8      	b.n	8013f58 <_strtod_l+0x970>
 8013fe6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8013fea:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013fee:	f1b8 0f00 	cmp.w	r8, #0
 8013ff2:	d0af      	beq.n	8013f54 <_strtod_l+0x96c>
 8013ff4:	eeb0 ab48 	vmov.f64	d10, d8
 8013ff8:	e7ae      	b.n	8013f58 <_strtod_l+0x970>
 8013ffa:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8013ffe:	eeb0 8b4a 	vmov.f64	d8, d10
 8014002:	e7a9      	b.n	8013f58 <_strtod_l+0x970>
 8014004:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8014008:	e7a6      	b.n	8013f58 <_strtod_l+0x970>
 801400a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801400e:	9b06      	ldr	r3, [sp, #24]
 8014010:	46d9      	mov	r9, fp
 8014012:	2b00      	cmp	r3, #0
 8014014:	d1ca      	bne.n	8013fac <_strtod_l+0x9c4>
 8014016:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801401a:	0d1b      	lsrs	r3, r3, #20
 801401c:	051b      	lsls	r3, r3, #20
 801401e:	429f      	cmp	r7, r3
 8014020:	d1c4      	bne.n	8013fac <_strtod_l+0x9c4>
 8014022:	ec51 0b18 	vmov	r0, r1, d8
 8014026:	f7ec fb97 	bl	8000758 <__aeabi_d2lz>
 801402a:	f7ec fb67 	bl	80006fc <__aeabi_l2d>
 801402e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8014032:	ec41 0b17 	vmov	d7, r0, r1
 8014036:	ea49 090a 	orr.w	r9, r9, sl
 801403a:	ea59 0908 	orrs.w	r9, r9, r8
 801403e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8014042:	d03c      	beq.n	80140be <_strtod_l+0xad6>
 8014044:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80140f0 <_strtod_l+0xb08>
 8014048:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801404c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014050:	f53f acef 	bmi.w	8013a32 <_strtod_l+0x44a>
 8014054:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 80140f8 <_strtod_l+0xb10>
 8014058:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801405c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014060:	dda4      	ble.n	8013fac <_strtod_l+0x9c4>
 8014062:	e4e6      	b.n	8013a32 <_strtod_l+0x44a>
 8014064:	9906      	ldr	r1, [sp, #24]
 8014066:	b1e1      	cbz	r1, 80140a2 <_strtod_l+0xaba>
 8014068:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801406c:	d819      	bhi.n	80140a2 <_strtod_l+0xaba>
 801406e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8014072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014076:	d811      	bhi.n	801409c <_strtod_l+0xab4>
 8014078:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801407c:	ee18 3a10 	vmov	r3, s16
 8014080:	2b01      	cmp	r3, #1
 8014082:	bf38      	it	cc
 8014084:	2301      	movcc	r3, #1
 8014086:	ee08 3a10 	vmov	s16, r3
 801408a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801408e:	f1b8 0f00 	cmp.w	r8, #0
 8014092:	d111      	bne.n	80140b8 <_strtod_l+0xad0>
 8014094:	eeb1 7b48 	vneg.f64	d7, d8
 8014098:	ec53 2b17 	vmov	r2, r3, d7
 801409c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80140a0:	1bcb      	subs	r3, r1, r7
 80140a2:	eeb0 0b49 	vmov.f64	d0, d9
 80140a6:	ec43 2b1a 	vmov	d10, r2, r3
 80140aa:	f7ff f947 	bl	801333c <__ulp>
 80140ae:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80140b2:	ec5b ab19 	vmov	sl, fp, d9
 80140b6:	e7aa      	b.n	801400e <_strtod_l+0xa26>
 80140b8:	eeb0 7b48 	vmov.f64	d7, d8
 80140bc:	e7ec      	b.n	8014098 <_strtod_l+0xab0>
 80140be:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8014100 <_strtod_l+0xb18>
 80140c2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80140c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ca:	f57f af6f 	bpl.w	8013fac <_strtod_l+0x9c4>
 80140ce:	e4b0      	b.n	8013a32 <_strtod_l+0x44a>
 80140d0:	2300      	movs	r3, #0
 80140d2:	9308      	str	r3, [sp, #32]
 80140d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80140d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80140d8:	6013      	str	r3, [r2, #0]
 80140da:	f7ff bac4 	b.w	8013666 <_strtod_l+0x7e>
 80140de:	2a65      	cmp	r2, #101	@ 0x65
 80140e0:	f43f abbf 	beq.w	8013862 <_strtod_l+0x27a>
 80140e4:	2a45      	cmp	r2, #69	@ 0x45
 80140e6:	f43f abbc 	beq.w	8013862 <_strtod_l+0x27a>
 80140ea:	2101      	movs	r1, #1
 80140ec:	f7ff bbf4 	b.w	80138d8 <_strtod_l+0x2f0>
 80140f0:	94a03595 	.word	0x94a03595
 80140f4:	3fdfffff 	.word	0x3fdfffff
 80140f8:	35afe535 	.word	0x35afe535
 80140fc:	3fe00000 	.word	0x3fe00000
 8014100:	94a03595 	.word	0x94a03595
 8014104:	3fcfffff 	.word	0x3fcfffff
 8014108:	000fffff 	.word	0x000fffff
 801410c:	7ff00000 	.word	0x7ff00000
 8014110:	7fefffff 	.word	0x7fefffff
 8014114:	7fe00000 	.word	0x7fe00000
 8014118:	7c9fffff 	.word	0x7c9fffff

0801411c <_strtod_r>:
 801411c:	4b01      	ldr	r3, [pc, #4]	@ (8014124 <_strtod_r+0x8>)
 801411e:	f7ff ba63 	b.w	80135e8 <_strtod_l>
 8014122:	bf00      	nop
 8014124:	24000078 	.word	0x24000078

08014128 <_strtol_l.isra.0>:
 8014128:	2b24      	cmp	r3, #36	@ 0x24
 801412a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801412e:	4686      	mov	lr, r0
 8014130:	4690      	mov	r8, r2
 8014132:	d801      	bhi.n	8014138 <_strtol_l.isra.0+0x10>
 8014134:	2b01      	cmp	r3, #1
 8014136:	d106      	bne.n	8014146 <_strtol_l.isra.0+0x1e>
 8014138:	f7fd fe6c 	bl	8011e14 <__errno>
 801413c:	2316      	movs	r3, #22
 801413e:	6003      	str	r3, [r0, #0]
 8014140:	2000      	movs	r0, #0
 8014142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014146:	4834      	ldr	r0, [pc, #208]	@ (8014218 <_strtol_l.isra.0+0xf0>)
 8014148:	460d      	mov	r5, r1
 801414a:	462a      	mov	r2, r5
 801414c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014150:	5d06      	ldrb	r6, [r0, r4]
 8014152:	f016 0608 	ands.w	r6, r6, #8
 8014156:	d1f8      	bne.n	801414a <_strtol_l.isra.0+0x22>
 8014158:	2c2d      	cmp	r4, #45	@ 0x2d
 801415a:	d110      	bne.n	801417e <_strtol_l.isra.0+0x56>
 801415c:	782c      	ldrb	r4, [r5, #0]
 801415e:	2601      	movs	r6, #1
 8014160:	1c95      	adds	r5, r2, #2
 8014162:	f033 0210 	bics.w	r2, r3, #16
 8014166:	d115      	bne.n	8014194 <_strtol_l.isra.0+0x6c>
 8014168:	2c30      	cmp	r4, #48	@ 0x30
 801416a:	d10d      	bne.n	8014188 <_strtol_l.isra.0+0x60>
 801416c:	782a      	ldrb	r2, [r5, #0]
 801416e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014172:	2a58      	cmp	r2, #88	@ 0x58
 8014174:	d108      	bne.n	8014188 <_strtol_l.isra.0+0x60>
 8014176:	786c      	ldrb	r4, [r5, #1]
 8014178:	3502      	adds	r5, #2
 801417a:	2310      	movs	r3, #16
 801417c:	e00a      	b.n	8014194 <_strtol_l.isra.0+0x6c>
 801417e:	2c2b      	cmp	r4, #43	@ 0x2b
 8014180:	bf04      	itt	eq
 8014182:	782c      	ldrbeq	r4, [r5, #0]
 8014184:	1c95      	addeq	r5, r2, #2
 8014186:	e7ec      	b.n	8014162 <_strtol_l.isra.0+0x3a>
 8014188:	2b00      	cmp	r3, #0
 801418a:	d1f6      	bne.n	801417a <_strtol_l.isra.0+0x52>
 801418c:	2c30      	cmp	r4, #48	@ 0x30
 801418e:	bf14      	ite	ne
 8014190:	230a      	movne	r3, #10
 8014192:	2308      	moveq	r3, #8
 8014194:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014198:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801419c:	2200      	movs	r2, #0
 801419e:	fbbc f9f3 	udiv	r9, ip, r3
 80141a2:	4610      	mov	r0, r2
 80141a4:	fb03 ca19 	mls	sl, r3, r9, ip
 80141a8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80141ac:	2f09      	cmp	r7, #9
 80141ae:	d80f      	bhi.n	80141d0 <_strtol_l.isra.0+0xa8>
 80141b0:	463c      	mov	r4, r7
 80141b2:	42a3      	cmp	r3, r4
 80141b4:	dd1b      	ble.n	80141ee <_strtol_l.isra.0+0xc6>
 80141b6:	1c57      	adds	r7, r2, #1
 80141b8:	d007      	beq.n	80141ca <_strtol_l.isra.0+0xa2>
 80141ba:	4581      	cmp	r9, r0
 80141bc:	d314      	bcc.n	80141e8 <_strtol_l.isra.0+0xc0>
 80141be:	d101      	bne.n	80141c4 <_strtol_l.isra.0+0x9c>
 80141c0:	45a2      	cmp	sl, r4
 80141c2:	db11      	blt.n	80141e8 <_strtol_l.isra.0+0xc0>
 80141c4:	fb00 4003 	mla	r0, r0, r3, r4
 80141c8:	2201      	movs	r2, #1
 80141ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141ce:	e7eb      	b.n	80141a8 <_strtol_l.isra.0+0x80>
 80141d0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80141d4:	2f19      	cmp	r7, #25
 80141d6:	d801      	bhi.n	80141dc <_strtol_l.isra.0+0xb4>
 80141d8:	3c37      	subs	r4, #55	@ 0x37
 80141da:	e7ea      	b.n	80141b2 <_strtol_l.isra.0+0x8a>
 80141dc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80141e0:	2f19      	cmp	r7, #25
 80141e2:	d804      	bhi.n	80141ee <_strtol_l.isra.0+0xc6>
 80141e4:	3c57      	subs	r4, #87	@ 0x57
 80141e6:	e7e4      	b.n	80141b2 <_strtol_l.isra.0+0x8a>
 80141e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80141ec:	e7ed      	b.n	80141ca <_strtol_l.isra.0+0xa2>
 80141ee:	1c53      	adds	r3, r2, #1
 80141f0:	d108      	bne.n	8014204 <_strtol_l.isra.0+0xdc>
 80141f2:	2322      	movs	r3, #34	@ 0x22
 80141f4:	f8ce 3000 	str.w	r3, [lr]
 80141f8:	4660      	mov	r0, ip
 80141fa:	f1b8 0f00 	cmp.w	r8, #0
 80141fe:	d0a0      	beq.n	8014142 <_strtol_l.isra.0+0x1a>
 8014200:	1e69      	subs	r1, r5, #1
 8014202:	e006      	b.n	8014212 <_strtol_l.isra.0+0xea>
 8014204:	b106      	cbz	r6, 8014208 <_strtol_l.isra.0+0xe0>
 8014206:	4240      	negs	r0, r0
 8014208:	f1b8 0f00 	cmp.w	r8, #0
 801420c:	d099      	beq.n	8014142 <_strtol_l.isra.0+0x1a>
 801420e:	2a00      	cmp	r2, #0
 8014210:	d1f6      	bne.n	8014200 <_strtol_l.isra.0+0xd8>
 8014212:	f8c8 1000 	str.w	r1, [r8]
 8014216:	e794      	b.n	8014142 <_strtol_l.isra.0+0x1a>
 8014218:	08017659 	.word	0x08017659

0801421c <_strtol_r>:
 801421c:	f7ff bf84 	b.w	8014128 <_strtol_l.isra.0>

08014220 <__ssputs_r>:
 8014220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014224:	688e      	ldr	r6, [r1, #8]
 8014226:	461f      	mov	r7, r3
 8014228:	42be      	cmp	r6, r7
 801422a:	680b      	ldr	r3, [r1, #0]
 801422c:	4682      	mov	sl, r0
 801422e:	460c      	mov	r4, r1
 8014230:	4690      	mov	r8, r2
 8014232:	d82d      	bhi.n	8014290 <__ssputs_r+0x70>
 8014234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014238:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801423c:	d026      	beq.n	801428c <__ssputs_r+0x6c>
 801423e:	6965      	ldr	r5, [r4, #20]
 8014240:	6909      	ldr	r1, [r1, #16]
 8014242:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014246:	eba3 0901 	sub.w	r9, r3, r1
 801424a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801424e:	1c7b      	adds	r3, r7, #1
 8014250:	444b      	add	r3, r9
 8014252:	106d      	asrs	r5, r5, #1
 8014254:	429d      	cmp	r5, r3
 8014256:	bf38      	it	cc
 8014258:	461d      	movcc	r5, r3
 801425a:	0553      	lsls	r3, r2, #21
 801425c:	d527      	bpl.n	80142ae <__ssputs_r+0x8e>
 801425e:	4629      	mov	r1, r5
 8014260:	f7fe fc74 	bl	8012b4c <_malloc_r>
 8014264:	4606      	mov	r6, r0
 8014266:	b360      	cbz	r0, 80142c2 <__ssputs_r+0xa2>
 8014268:	6921      	ldr	r1, [r4, #16]
 801426a:	464a      	mov	r2, r9
 801426c:	f7fd fdff 	bl	8011e6e <memcpy>
 8014270:	89a3      	ldrh	r3, [r4, #12]
 8014272:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801427a:	81a3      	strh	r3, [r4, #12]
 801427c:	6126      	str	r6, [r4, #16]
 801427e:	6165      	str	r5, [r4, #20]
 8014280:	444e      	add	r6, r9
 8014282:	eba5 0509 	sub.w	r5, r5, r9
 8014286:	6026      	str	r6, [r4, #0]
 8014288:	60a5      	str	r5, [r4, #8]
 801428a:	463e      	mov	r6, r7
 801428c:	42be      	cmp	r6, r7
 801428e:	d900      	bls.n	8014292 <__ssputs_r+0x72>
 8014290:	463e      	mov	r6, r7
 8014292:	6820      	ldr	r0, [r4, #0]
 8014294:	4632      	mov	r2, r6
 8014296:	4641      	mov	r1, r8
 8014298:	f7fd fd30 	bl	8011cfc <memmove>
 801429c:	68a3      	ldr	r3, [r4, #8]
 801429e:	1b9b      	subs	r3, r3, r6
 80142a0:	60a3      	str	r3, [r4, #8]
 80142a2:	6823      	ldr	r3, [r4, #0]
 80142a4:	4433      	add	r3, r6
 80142a6:	6023      	str	r3, [r4, #0]
 80142a8:	2000      	movs	r0, #0
 80142aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142ae:	462a      	mov	r2, r5
 80142b0:	f001 fadb 	bl	801586a <_realloc_r>
 80142b4:	4606      	mov	r6, r0
 80142b6:	2800      	cmp	r0, #0
 80142b8:	d1e0      	bne.n	801427c <__ssputs_r+0x5c>
 80142ba:	6921      	ldr	r1, [r4, #16]
 80142bc:	4650      	mov	r0, sl
 80142be:	f7fe fbd1 	bl	8012a64 <_free_r>
 80142c2:	230c      	movs	r3, #12
 80142c4:	f8ca 3000 	str.w	r3, [sl]
 80142c8:	89a3      	ldrh	r3, [r4, #12]
 80142ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142ce:	81a3      	strh	r3, [r4, #12]
 80142d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80142d4:	e7e9      	b.n	80142aa <__ssputs_r+0x8a>
	...

080142d8 <_svfiprintf_r>:
 80142d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142dc:	4698      	mov	r8, r3
 80142de:	898b      	ldrh	r3, [r1, #12]
 80142e0:	061b      	lsls	r3, r3, #24
 80142e2:	b09d      	sub	sp, #116	@ 0x74
 80142e4:	4607      	mov	r7, r0
 80142e6:	460d      	mov	r5, r1
 80142e8:	4614      	mov	r4, r2
 80142ea:	d510      	bpl.n	801430e <_svfiprintf_r+0x36>
 80142ec:	690b      	ldr	r3, [r1, #16]
 80142ee:	b973      	cbnz	r3, 801430e <_svfiprintf_r+0x36>
 80142f0:	2140      	movs	r1, #64	@ 0x40
 80142f2:	f7fe fc2b 	bl	8012b4c <_malloc_r>
 80142f6:	6028      	str	r0, [r5, #0]
 80142f8:	6128      	str	r0, [r5, #16]
 80142fa:	b930      	cbnz	r0, 801430a <_svfiprintf_r+0x32>
 80142fc:	230c      	movs	r3, #12
 80142fe:	603b      	str	r3, [r7, #0]
 8014300:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014304:	b01d      	add	sp, #116	@ 0x74
 8014306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801430a:	2340      	movs	r3, #64	@ 0x40
 801430c:	616b      	str	r3, [r5, #20]
 801430e:	2300      	movs	r3, #0
 8014310:	9309      	str	r3, [sp, #36]	@ 0x24
 8014312:	2320      	movs	r3, #32
 8014314:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014318:	f8cd 800c 	str.w	r8, [sp, #12]
 801431c:	2330      	movs	r3, #48	@ 0x30
 801431e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80144bc <_svfiprintf_r+0x1e4>
 8014322:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014326:	f04f 0901 	mov.w	r9, #1
 801432a:	4623      	mov	r3, r4
 801432c:	469a      	mov	sl, r3
 801432e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014332:	b10a      	cbz	r2, 8014338 <_svfiprintf_r+0x60>
 8014334:	2a25      	cmp	r2, #37	@ 0x25
 8014336:	d1f9      	bne.n	801432c <_svfiprintf_r+0x54>
 8014338:	ebba 0b04 	subs.w	fp, sl, r4
 801433c:	d00b      	beq.n	8014356 <_svfiprintf_r+0x7e>
 801433e:	465b      	mov	r3, fp
 8014340:	4622      	mov	r2, r4
 8014342:	4629      	mov	r1, r5
 8014344:	4638      	mov	r0, r7
 8014346:	f7ff ff6b 	bl	8014220 <__ssputs_r>
 801434a:	3001      	adds	r0, #1
 801434c:	f000 80a7 	beq.w	801449e <_svfiprintf_r+0x1c6>
 8014350:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014352:	445a      	add	r2, fp
 8014354:	9209      	str	r2, [sp, #36]	@ 0x24
 8014356:	f89a 3000 	ldrb.w	r3, [sl]
 801435a:	2b00      	cmp	r3, #0
 801435c:	f000 809f 	beq.w	801449e <_svfiprintf_r+0x1c6>
 8014360:	2300      	movs	r3, #0
 8014362:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801436a:	f10a 0a01 	add.w	sl, sl, #1
 801436e:	9304      	str	r3, [sp, #16]
 8014370:	9307      	str	r3, [sp, #28]
 8014372:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014376:	931a      	str	r3, [sp, #104]	@ 0x68
 8014378:	4654      	mov	r4, sl
 801437a:	2205      	movs	r2, #5
 801437c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014380:	484e      	ldr	r0, [pc, #312]	@ (80144bc <_svfiprintf_r+0x1e4>)
 8014382:	f7eb ffd5 	bl	8000330 <memchr>
 8014386:	9a04      	ldr	r2, [sp, #16]
 8014388:	b9d8      	cbnz	r0, 80143c2 <_svfiprintf_r+0xea>
 801438a:	06d0      	lsls	r0, r2, #27
 801438c:	bf44      	itt	mi
 801438e:	2320      	movmi	r3, #32
 8014390:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014394:	0711      	lsls	r1, r2, #28
 8014396:	bf44      	itt	mi
 8014398:	232b      	movmi	r3, #43	@ 0x2b
 801439a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801439e:	f89a 3000 	ldrb.w	r3, [sl]
 80143a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80143a4:	d015      	beq.n	80143d2 <_svfiprintf_r+0xfa>
 80143a6:	9a07      	ldr	r2, [sp, #28]
 80143a8:	4654      	mov	r4, sl
 80143aa:	2000      	movs	r0, #0
 80143ac:	f04f 0c0a 	mov.w	ip, #10
 80143b0:	4621      	mov	r1, r4
 80143b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143b6:	3b30      	subs	r3, #48	@ 0x30
 80143b8:	2b09      	cmp	r3, #9
 80143ba:	d94b      	bls.n	8014454 <_svfiprintf_r+0x17c>
 80143bc:	b1b0      	cbz	r0, 80143ec <_svfiprintf_r+0x114>
 80143be:	9207      	str	r2, [sp, #28]
 80143c0:	e014      	b.n	80143ec <_svfiprintf_r+0x114>
 80143c2:	eba0 0308 	sub.w	r3, r0, r8
 80143c6:	fa09 f303 	lsl.w	r3, r9, r3
 80143ca:	4313      	orrs	r3, r2
 80143cc:	9304      	str	r3, [sp, #16]
 80143ce:	46a2      	mov	sl, r4
 80143d0:	e7d2      	b.n	8014378 <_svfiprintf_r+0xa0>
 80143d2:	9b03      	ldr	r3, [sp, #12]
 80143d4:	1d19      	adds	r1, r3, #4
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	9103      	str	r1, [sp, #12]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	bfbb      	ittet	lt
 80143de:	425b      	neglt	r3, r3
 80143e0:	f042 0202 	orrlt.w	r2, r2, #2
 80143e4:	9307      	strge	r3, [sp, #28]
 80143e6:	9307      	strlt	r3, [sp, #28]
 80143e8:	bfb8      	it	lt
 80143ea:	9204      	strlt	r2, [sp, #16]
 80143ec:	7823      	ldrb	r3, [r4, #0]
 80143ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80143f0:	d10a      	bne.n	8014408 <_svfiprintf_r+0x130>
 80143f2:	7863      	ldrb	r3, [r4, #1]
 80143f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80143f6:	d132      	bne.n	801445e <_svfiprintf_r+0x186>
 80143f8:	9b03      	ldr	r3, [sp, #12]
 80143fa:	1d1a      	adds	r2, r3, #4
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	9203      	str	r2, [sp, #12]
 8014400:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014404:	3402      	adds	r4, #2
 8014406:	9305      	str	r3, [sp, #20]
 8014408:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80144cc <_svfiprintf_r+0x1f4>
 801440c:	7821      	ldrb	r1, [r4, #0]
 801440e:	2203      	movs	r2, #3
 8014410:	4650      	mov	r0, sl
 8014412:	f7eb ff8d 	bl	8000330 <memchr>
 8014416:	b138      	cbz	r0, 8014428 <_svfiprintf_r+0x150>
 8014418:	9b04      	ldr	r3, [sp, #16]
 801441a:	eba0 000a 	sub.w	r0, r0, sl
 801441e:	2240      	movs	r2, #64	@ 0x40
 8014420:	4082      	lsls	r2, r0
 8014422:	4313      	orrs	r3, r2
 8014424:	3401      	adds	r4, #1
 8014426:	9304      	str	r3, [sp, #16]
 8014428:	f814 1b01 	ldrb.w	r1, [r4], #1
 801442c:	4824      	ldr	r0, [pc, #144]	@ (80144c0 <_svfiprintf_r+0x1e8>)
 801442e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014432:	2206      	movs	r2, #6
 8014434:	f7eb ff7c 	bl	8000330 <memchr>
 8014438:	2800      	cmp	r0, #0
 801443a:	d036      	beq.n	80144aa <_svfiprintf_r+0x1d2>
 801443c:	4b21      	ldr	r3, [pc, #132]	@ (80144c4 <_svfiprintf_r+0x1ec>)
 801443e:	bb1b      	cbnz	r3, 8014488 <_svfiprintf_r+0x1b0>
 8014440:	9b03      	ldr	r3, [sp, #12]
 8014442:	3307      	adds	r3, #7
 8014444:	f023 0307 	bic.w	r3, r3, #7
 8014448:	3308      	adds	r3, #8
 801444a:	9303      	str	r3, [sp, #12]
 801444c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801444e:	4433      	add	r3, r6
 8014450:	9309      	str	r3, [sp, #36]	@ 0x24
 8014452:	e76a      	b.n	801432a <_svfiprintf_r+0x52>
 8014454:	fb0c 3202 	mla	r2, ip, r2, r3
 8014458:	460c      	mov	r4, r1
 801445a:	2001      	movs	r0, #1
 801445c:	e7a8      	b.n	80143b0 <_svfiprintf_r+0xd8>
 801445e:	2300      	movs	r3, #0
 8014460:	3401      	adds	r4, #1
 8014462:	9305      	str	r3, [sp, #20]
 8014464:	4619      	mov	r1, r3
 8014466:	f04f 0c0a 	mov.w	ip, #10
 801446a:	4620      	mov	r0, r4
 801446c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014470:	3a30      	subs	r2, #48	@ 0x30
 8014472:	2a09      	cmp	r2, #9
 8014474:	d903      	bls.n	801447e <_svfiprintf_r+0x1a6>
 8014476:	2b00      	cmp	r3, #0
 8014478:	d0c6      	beq.n	8014408 <_svfiprintf_r+0x130>
 801447a:	9105      	str	r1, [sp, #20]
 801447c:	e7c4      	b.n	8014408 <_svfiprintf_r+0x130>
 801447e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014482:	4604      	mov	r4, r0
 8014484:	2301      	movs	r3, #1
 8014486:	e7f0      	b.n	801446a <_svfiprintf_r+0x192>
 8014488:	ab03      	add	r3, sp, #12
 801448a:	9300      	str	r3, [sp, #0]
 801448c:	462a      	mov	r2, r5
 801448e:	4b0e      	ldr	r3, [pc, #56]	@ (80144c8 <_svfiprintf_r+0x1f0>)
 8014490:	a904      	add	r1, sp, #16
 8014492:	4638      	mov	r0, r7
 8014494:	f7fc fc24 	bl	8010ce0 <_printf_float>
 8014498:	1c42      	adds	r2, r0, #1
 801449a:	4606      	mov	r6, r0
 801449c:	d1d6      	bne.n	801444c <_svfiprintf_r+0x174>
 801449e:	89ab      	ldrh	r3, [r5, #12]
 80144a0:	065b      	lsls	r3, r3, #25
 80144a2:	f53f af2d 	bmi.w	8014300 <_svfiprintf_r+0x28>
 80144a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80144a8:	e72c      	b.n	8014304 <_svfiprintf_r+0x2c>
 80144aa:	ab03      	add	r3, sp, #12
 80144ac:	9300      	str	r3, [sp, #0]
 80144ae:	462a      	mov	r2, r5
 80144b0:	4b05      	ldr	r3, [pc, #20]	@ (80144c8 <_svfiprintf_r+0x1f0>)
 80144b2:	a904      	add	r1, sp, #16
 80144b4:	4638      	mov	r0, r7
 80144b6:	f7fc fe9b 	bl	80111f0 <_printf_i>
 80144ba:	e7ed      	b.n	8014498 <_svfiprintf_r+0x1c0>
 80144bc:	08017437 	.word	0x08017437
 80144c0:	08017441 	.word	0x08017441
 80144c4:	08010ce1 	.word	0x08010ce1
 80144c8:	08014221 	.word	0x08014221
 80144cc:	0801743d 	.word	0x0801743d

080144d0 <_sungetc_r>:
 80144d0:	b538      	push	{r3, r4, r5, lr}
 80144d2:	1c4b      	adds	r3, r1, #1
 80144d4:	4614      	mov	r4, r2
 80144d6:	d103      	bne.n	80144e0 <_sungetc_r+0x10>
 80144d8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80144dc:	4628      	mov	r0, r5
 80144de:	bd38      	pop	{r3, r4, r5, pc}
 80144e0:	8993      	ldrh	r3, [r2, #12]
 80144e2:	f023 0320 	bic.w	r3, r3, #32
 80144e6:	8193      	strh	r3, [r2, #12]
 80144e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80144ea:	6852      	ldr	r2, [r2, #4]
 80144ec:	b2cd      	uxtb	r5, r1
 80144ee:	b18b      	cbz	r3, 8014514 <_sungetc_r+0x44>
 80144f0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80144f2:	4293      	cmp	r3, r2
 80144f4:	dd08      	ble.n	8014508 <_sungetc_r+0x38>
 80144f6:	6823      	ldr	r3, [r4, #0]
 80144f8:	1e5a      	subs	r2, r3, #1
 80144fa:	6022      	str	r2, [r4, #0]
 80144fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014500:	6863      	ldr	r3, [r4, #4]
 8014502:	3301      	adds	r3, #1
 8014504:	6063      	str	r3, [r4, #4]
 8014506:	e7e9      	b.n	80144dc <_sungetc_r+0xc>
 8014508:	4621      	mov	r1, r4
 801450a:	f000 fdbc 	bl	8015086 <__submore>
 801450e:	2800      	cmp	r0, #0
 8014510:	d0f1      	beq.n	80144f6 <_sungetc_r+0x26>
 8014512:	e7e1      	b.n	80144d8 <_sungetc_r+0x8>
 8014514:	6921      	ldr	r1, [r4, #16]
 8014516:	6823      	ldr	r3, [r4, #0]
 8014518:	b151      	cbz	r1, 8014530 <_sungetc_r+0x60>
 801451a:	4299      	cmp	r1, r3
 801451c:	d208      	bcs.n	8014530 <_sungetc_r+0x60>
 801451e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8014522:	42a9      	cmp	r1, r5
 8014524:	d104      	bne.n	8014530 <_sungetc_r+0x60>
 8014526:	3b01      	subs	r3, #1
 8014528:	3201      	adds	r2, #1
 801452a:	6023      	str	r3, [r4, #0]
 801452c:	6062      	str	r2, [r4, #4]
 801452e:	e7d5      	b.n	80144dc <_sungetc_r+0xc>
 8014530:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8014534:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014538:	6363      	str	r3, [r4, #52]	@ 0x34
 801453a:	2303      	movs	r3, #3
 801453c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801453e:	4623      	mov	r3, r4
 8014540:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014544:	6023      	str	r3, [r4, #0]
 8014546:	2301      	movs	r3, #1
 8014548:	e7dc      	b.n	8014504 <_sungetc_r+0x34>

0801454a <__ssrefill_r>:
 801454a:	b510      	push	{r4, lr}
 801454c:	460c      	mov	r4, r1
 801454e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014550:	b169      	cbz	r1, 801456e <__ssrefill_r+0x24>
 8014552:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014556:	4299      	cmp	r1, r3
 8014558:	d001      	beq.n	801455e <__ssrefill_r+0x14>
 801455a:	f7fe fa83 	bl	8012a64 <_free_r>
 801455e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014560:	6063      	str	r3, [r4, #4]
 8014562:	2000      	movs	r0, #0
 8014564:	6360      	str	r0, [r4, #52]	@ 0x34
 8014566:	b113      	cbz	r3, 801456e <__ssrefill_r+0x24>
 8014568:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801456a:	6023      	str	r3, [r4, #0]
 801456c:	bd10      	pop	{r4, pc}
 801456e:	6923      	ldr	r3, [r4, #16]
 8014570:	6023      	str	r3, [r4, #0]
 8014572:	2300      	movs	r3, #0
 8014574:	6063      	str	r3, [r4, #4]
 8014576:	89a3      	ldrh	r3, [r4, #12]
 8014578:	f043 0320 	orr.w	r3, r3, #32
 801457c:	81a3      	strh	r3, [r4, #12]
 801457e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014582:	e7f3      	b.n	801456c <__ssrefill_r+0x22>

08014584 <__ssvfiscanf_r>:
 8014584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014588:	460c      	mov	r4, r1
 801458a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801458e:	2100      	movs	r1, #0
 8014590:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8014594:	49a6      	ldr	r1, [pc, #664]	@ (8014830 <__ssvfiscanf_r+0x2ac>)
 8014596:	91a0      	str	r1, [sp, #640]	@ 0x280
 8014598:	f10d 0804 	add.w	r8, sp, #4
 801459c:	49a5      	ldr	r1, [pc, #660]	@ (8014834 <__ssvfiscanf_r+0x2b0>)
 801459e:	4fa6      	ldr	r7, [pc, #664]	@ (8014838 <__ssvfiscanf_r+0x2b4>)
 80145a0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80145a4:	4606      	mov	r6, r0
 80145a6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80145a8:	9300      	str	r3, [sp, #0]
 80145aa:	f892 9000 	ldrb.w	r9, [r2]
 80145ae:	f1b9 0f00 	cmp.w	r9, #0
 80145b2:	f000 8158 	beq.w	8014866 <__ssvfiscanf_r+0x2e2>
 80145b6:	f817 3009 	ldrb.w	r3, [r7, r9]
 80145ba:	f013 0308 	ands.w	r3, r3, #8
 80145be:	f102 0501 	add.w	r5, r2, #1
 80145c2:	d019      	beq.n	80145f8 <__ssvfiscanf_r+0x74>
 80145c4:	6863      	ldr	r3, [r4, #4]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	dd0f      	ble.n	80145ea <__ssvfiscanf_r+0x66>
 80145ca:	6823      	ldr	r3, [r4, #0]
 80145cc:	781a      	ldrb	r2, [r3, #0]
 80145ce:	5cba      	ldrb	r2, [r7, r2]
 80145d0:	0712      	lsls	r2, r2, #28
 80145d2:	d401      	bmi.n	80145d8 <__ssvfiscanf_r+0x54>
 80145d4:	462a      	mov	r2, r5
 80145d6:	e7e8      	b.n	80145aa <__ssvfiscanf_r+0x26>
 80145d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80145da:	3201      	adds	r2, #1
 80145dc:	9245      	str	r2, [sp, #276]	@ 0x114
 80145de:	6862      	ldr	r2, [r4, #4]
 80145e0:	3301      	adds	r3, #1
 80145e2:	3a01      	subs	r2, #1
 80145e4:	6062      	str	r2, [r4, #4]
 80145e6:	6023      	str	r3, [r4, #0]
 80145e8:	e7ec      	b.n	80145c4 <__ssvfiscanf_r+0x40>
 80145ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80145ec:	4621      	mov	r1, r4
 80145ee:	4630      	mov	r0, r6
 80145f0:	4798      	blx	r3
 80145f2:	2800      	cmp	r0, #0
 80145f4:	d0e9      	beq.n	80145ca <__ssvfiscanf_r+0x46>
 80145f6:	e7ed      	b.n	80145d4 <__ssvfiscanf_r+0x50>
 80145f8:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80145fc:	f040 8085 	bne.w	801470a <__ssvfiscanf_r+0x186>
 8014600:	9341      	str	r3, [sp, #260]	@ 0x104
 8014602:	9343      	str	r3, [sp, #268]	@ 0x10c
 8014604:	7853      	ldrb	r3, [r2, #1]
 8014606:	2b2a      	cmp	r3, #42	@ 0x2a
 8014608:	bf02      	ittt	eq
 801460a:	2310      	moveq	r3, #16
 801460c:	1c95      	addeq	r5, r2, #2
 801460e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8014610:	220a      	movs	r2, #10
 8014612:	46aa      	mov	sl, r5
 8014614:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8014618:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801461c:	2b09      	cmp	r3, #9
 801461e:	d91e      	bls.n	801465e <__ssvfiscanf_r+0xda>
 8014620:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801483c <__ssvfiscanf_r+0x2b8>
 8014624:	2203      	movs	r2, #3
 8014626:	4658      	mov	r0, fp
 8014628:	f7eb fe82 	bl	8000330 <memchr>
 801462c:	b138      	cbz	r0, 801463e <__ssvfiscanf_r+0xba>
 801462e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014630:	eba0 000b 	sub.w	r0, r0, fp
 8014634:	2301      	movs	r3, #1
 8014636:	4083      	lsls	r3, r0
 8014638:	4313      	orrs	r3, r2
 801463a:	9341      	str	r3, [sp, #260]	@ 0x104
 801463c:	4655      	mov	r5, sl
 801463e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014642:	2b78      	cmp	r3, #120	@ 0x78
 8014644:	d806      	bhi.n	8014654 <__ssvfiscanf_r+0xd0>
 8014646:	2b57      	cmp	r3, #87	@ 0x57
 8014648:	d810      	bhi.n	801466c <__ssvfiscanf_r+0xe8>
 801464a:	2b25      	cmp	r3, #37	@ 0x25
 801464c:	d05d      	beq.n	801470a <__ssvfiscanf_r+0x186>
 801464e:	d857      	bhi.n	8014700 <__ssvfiscanf_r+0x17c>
 8014650:	2b00      	cmp	r3, #0
 8014652:	d075      	beq.n	8014740 <__ssvfiscanf_r+0x1bc>
 8014654:	2303      	movs	r3, #3
 8014656:	9347      	str	r3, [sp, #284]	@ 0x11c
 8014658:	230a      	movs	r3, #10
 801465a:	9342      	str	r3, [sp, #264]	@ 0x108
 801465c:	e088      	b.n	8014770 <__ssvfiscanf_r+0x1ec>
 801465e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8014660:	fb02 1103 	mla	r1, r2, r3, r1
 8014664:	3930      	subs	r1, #48	@ 0x30
 8014666:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014668:	4655      	mov	r5, sl
 801466a:	e7d2      	b.n	8014612 <__ssvfiscanf_r+0x8e>
 801466c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8014670:	2a20      	cmp	r2, #32
 8014672:	d8ef      	bhi.n	8014654 <__ssvfiscanf_r+0xd0>
 8014674:	a101      	add	r1, pc, #4	@ (adr r1, 801467c <__ssvfiscanf_r+0xf8>)
 8014676:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801467a:	bf00      	nop
 801467c:	0801474f 	.word	0x0801474f
 8014680:	08014655 	.word	0x08014655
 8014684:	08014655 	.word	0x08014655
 8014688:	080147a9 	.word	0x080147a9
 801468c:	08014655 	.word	0x08014655
 8014690:	08014655 	.word	0x08014655
 8014694:	08014655 	.word	0x08014655
 8014698:	08014655 	.word	0x08014655
 801469c:	08014655 	.word	0x08014655
 80146a0:	08014655 	.word	0x08014655
 80146a4:	08014655 	.word	0x08014655
 80146a8:	080147bf 	.word	0x080147bf
 80146ac:	080147a5 	.word	0x080147a5
 80146b0:	08014707 	.word	0x08014707
 80146b4:	08014707 	.word	0x08014707
 80146b8:	08014707 	.word	0x08014707
 80146bc:	08014655 	.word	0x08014655
 80146c0:	08014761 	.word	0x08014761
 80146c4:	08014655 	.word	0x08014655
 80146c8:	08014655 	.word	0x08014655
 80146cc:	08014655 	.word	0x08014655
 80146d0:	08014655 	.word	0x08014655
 80146d4:	080147cf 	.word	0x080147cf
 80146d8:	08014769 	.word	0x08014769
 80146dc:	08014747 	.word	0x08014747
 80146e0:	08014655 	.word	0x08014655
 80146e4:	08014655 	.word	0x08014655
 80146e8:	080147cb 	.word	0x080147cb
 80146ec:	08014655 	.word	0x08014655
 80146f0:	080147a5 	.word	0x080147a5
 80146f4:	08014655 	.word	0x08014655
 80146f8:	08014655 	.word	0x08014655
 80146fc:	0801474f 	.word	0x0801474f
 8014700:	3b45      	subs	r3, #69	@ 0x45
 8014702:	2b02      	cmp	r3, #2
 8014704:	d8a6      	bhi.n	8014654 <__ssvfiscanf_r+0xd0>
 8014706:	2305      	movs	r3, #5
 8014708:	e031      	b.n	801476e <__ssvfiscanf_r+0x1ea>
 801470a:	6863      	ldr	r3, [r4, #4]
 801470c:	2b00      	cmp	r3, #0
 801470e:	dd0d      	ble.n	801472c <__ssvfiscanf_r+0x1a8>
 8014710:	6823      	ldr	r3, [r4, #0]
 8014712:	781a      	ldrb	r2, [r3, #0]
 8014714:	454a      	cmp	r2, r9
 8014716:	f040 80a6 	bne.w	8014866 <__ssvfiscanf_r+0x2e2>
 801471a:	3301      	adds	r3, #1
 801471c:	6862      	ldr	r2, [r4, #4]
 801471e:	6023      	str	r3, [r4, #0]
 8014720:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8014722:	3a01      	subs	r2, #1
 8014724:	3301      	adds	r3, #1
 8014726:	6062      	str	r2, [r4, #4]
 8014728:	9345      	str	r3, [sp, #276]	@ 0x114
 801472a:	e753      	b.n	80145d4 <__ssvfiscanf_r+0x50>
 801472c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801472e:	4621      	mov	r1, r4
 8014730:	4630      	mov	r0, r6
 8014732:	4798      	blx	r3
 8014734:	2800      	cmp	r0, #0
 8014736:	d0eb      	beq.n	8014710 <__ssvfiscanf_r+0x18c>
 8014738:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801473a:	2800      	cmp	r0, #0
 801473c:	f040 808b 	bne.w	8014856 <__ssvfiscanf_r+0x2d2>
 8014740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014744:	e08b      	b.n	801485e <__ssvfiscanf_r+0x2da>
 8014746:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014748:	f042 0220 	orr.w	r2, r2, #32
 801474c:	9241      	str	r2, [sp, #260]	@ 0x104
 801474e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014750:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014754:	9241      	str	r2, [sp, #260]	@ 0x104
 8014756:	2210      	movs	r2, #16
 8014758:	2b6e      	cmp	r3, #110	@ 0x6e
 801475a:	9242      	str	r2, [sp, #264]	@ 0x108
 801475c:	d902      	bls.n	8014764 <__ssvfiscanf_r+0x1e0>
 801475e:	e005      	b.n	801476c <__ssvfiscanf_r+0x1e8>
 8014760:	2300      	movs	r3, #0
 8014762:	9342      	str	r3, [sp, #264]	@ 0x108
 8014764:	2303      	movs	r3, #3
 8014766:	e002      	b.n	801476e <__ssvfiscanf_r+0x1ea>
 8014768:	2308      	movs	r3, #8
 801476a:	9342      	str	r3, [sp, #264]	@ 0x108
 801476c:	2304      	movs	r3, #4
 801476e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8014770:	6863      	ldr	r3, [r4, #4]
 8014772:	2b00      	cmp	r3, #0
 8014774:	dd39      	ble.n	80147ea <__ssvfiscanf_r+0x266>
 8014776:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014778:	0659      	lsls	r1, r3, #25
 801477a:	d404      	bmi.n	8014786 <__ssvfiscanf_r+0x202>
 801477c:	6823      	ldr	r3, [r4, #0]
 801477e:	781a      	ldrb	r2, [r3, #0]
 8014780:	5cba      	ldrb	r2, [r7, r2]
 8014782:	0712      	lsls	r2, r2, #28
 8014784:	d438      	bmi.n	80147f8 <__ssvfiscanf_r+0x274>
 8014786:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8014788:	2b02      	cmp	r3, #2
 801478a:	dc47      	bgt.n	801481c <__ssvfiscanf_r+0x298>
 801478c:	466b      	mov	r3, sp
 801478e:	4622      	mov	r2, r4
 8014790:	a941      	add	r1, sp, #260	@ 0x104
 8014792:	4630      	mov	r0, r6
 8014794:	f000 f9ae 	bl	8014af4 <_scanf_chars>
 8014798:	2801      	cmp	r0, #1
 801479a:	d064      	beq.n	8014866 <__ssvfiscanf_r+0x2e2>
 801479c:	2802      	cmp	r0, #2
 801479e:	f47f af19 	bne.w	80145d4 <__ssvfiscanf_r+0x50>
 80147a2:	e7c9      	b.n	8014738 <__ssvfiscanf_r+0x1b4>
 80147a4:	220a      	movs	r2, #10
 80147a6:	e7d7      	b.n	8014758 <__ssvfiscanf_r+0x1d4>
 80147a8:	4629      	mov	r1, r5
 80147aa:	4640      	mov	r0, r8
 80147ac:	f000 fc32 	bl	8015014 <__sccl>
 80147b0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80147b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147b6:	9341      	str	r3, [sp, #260]	@ 0x104
 80147b8:	4605      	mov	r5, r0
 80147ba:	2301      	movs	r3, #1
 80147bc:	e7d7      	b.n	801476e <__ssvfiscanf_r+0x1ea>
 80147be:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80147c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147c4:	9341      	str	r3, [sp, #260]	@ 0x104
 80147c6:	2300      	movs	r3, #0
 80147c8:	e7d1      	b.n	801476e <__ssvfiscanf_r+0x1ea>
 80147ca:	2302      	movs	r3, #2
 80147cc:	e7cf      	b.n	801476e <__ssvfiscanf_r+0x1ea>
 80147ce:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80147d0:	06c3      	lsls	r3, r0, #27
 80147d2:	f53f aeff 	bmi.w	80145d4 <__ssvfiscanf_r+0x50>
 80147d6:	9b00      	ldr	r3, [sp, #0]
 80147d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80147da:	1d19      	adds	r1, r3, #4
 80147dc:	9100      	str	r1, [sp, #0]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	07c0      	lsls	r0, r0, #31
 80147e2:	bf4c      	ite	mi
 80147e4:	801a      	strhmi	r2, [r3, #0]
 80147e6:	601a      	strpl	r2, [r3, #0]
 80147e8:	e6f4      	b.n	80145d4 <__ssvfiscanf_r+0x50>
 80147ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80147ec:	4621      	mov	r1, r4
 80147ee:	4630      	mov	r0, r6
 80147f0:	4798      	blx	r3
 80147f2:	2800      	cmp	r0, #0
 80147f4:	d0bf      	beq.n	8014776 <__ssvfiscanf_r+0x1f2>
 80147f6:	e79f      	b.n	8014738 <__ssvfiscanf_r+0x1b4>
 80147f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80147fa:	3201      	adds	r2, #1
 80147fc:	9245      	str	r2, [sp, #276]	@ 0x114
 80147fe:	6862      	ldr	r2, [r4, #4]
 8014800:	3a01      	subs	r2, #1
 8014802:	2a00      	cmp	r2, #0
 8014804:	6062      	str	r2, [r4, #4]
 8014806:	dd02      	ble.n	801480e <__ssvfiscanf_r+0x28a>
 8014808:	3301      	adds	r3, #1
 801480a:	6023      	str	r3, [r4, #0]
 801480c:	e7b6      	b.n	801477c <__ssvfiscanf_r+0x1f8>
 801480e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014810:	4621      	mov	r1, r4
 8014812:	4630      	mov	r0, r6
 8014814:	4798      	blx	r3
 8014816:	2800      	cmp	r0, #0
 8014818:	d0b0      	beq.n	801477c <__ssvfiscanf_r+0x1f8>
 801481a:	e78d      	b.n	8014738 <__ssvfiscanf_r+0x1b4>
 801481c:	2b04      	cmp	r3, #4
 801481e:	dc0f      	bgt.n	8014840 <__ssvfiscanf_r+0x2bc>
 8014820:	466b      	mov	r3, sp
 8014822:	4622      	mov	r2, r4
 8014824:	a941      	add	r1, sp, #260	@ 0x104
 8014826:	4630      	mov	r0, r6
 8014828:	f000 f9be 	bl	8014ba8 <_scanf_i>
 801482c:	e7b4      	b.n	8014798 <__ssvfiscanf_r+0x214>
 801482e:	bf00      	nop
 8014830:	080144d1 	.word	0x080144d1
 8014834:	0801454b 	.word	0x0801454b
 8014838:	08017659 	.word	0x08017659
 801483c:	0801743d 	.word	0x0801743d
 8014840:	4b0a      	ldr	r3, [pc, #40]	@ (801486c <__ssvfiscanf_r+0x2e8>)
 8014842:	2b00      	cmp	r3, #0
 8014844:	f43f aec6 	beq.w	80145d4 <__ssvfiscanf_r+0x50>
 8014848:	466b      	mov	r3, sp
 801484a:	4622      	mov	r2, r4
 801484c:	a941      	add	r1, sp, #260	@ 0x104
 801484e:	4630      	mov	r0, r6
 8014850:	f7fc fdec 	bl	801142c <_scanf_float>
 8014854:	e7a0      	b.n	8014798 <__ssvfiscanf_r+0x214>
 8014856:	89a3      	ldrh	r3, [r4, #12]
 8014858:	065b      	lsls	r3, r3, #25
 801485a:	f53f af71 	bmi.w	8014740 <__ssvfiscanf_r+0x1bc>
 801485e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8014862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014866:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014868:	e7f9      	b.n	801485e <__ssvfiscanf_r+0x2da>
 801486a:	bf00      	nop
 801486c:	0801142d 	.word	0x0801142d

08014870 <__sfputc_r>:
 8014870:	6893      	ldr	r3, [r2, #8]
 8014872:	3b01      	subs	r3, #1
 8014874:	2b00      	cmp	r3, #0
 8014876:	b410      	push	{r4}
 8014878:	6093      	str	r3, [r2, #8]
 801487a:	da08      	bge.n	801488e <__sfputc_r+0x1e>
 801487c:	6994      	ldr	r4, [r2, #24]
 801487e:	42a3      	cmp	r3, r4
 8014880:	db01      	blt.n	8014886 <__sfputc_r+0x16>
 8014882:	290a      	cmp	r1, #10
 8014884:	d103      	bne.n	801488e <__sfputc_r+0x1e>
 8014886:	f85d 4b04 	ldr.w	r4, [sp], #4
 801488a:	f7fd b9a2 	b.w	8011bd2 <__swbuf_r>
 801488e:	6813      	ldr	r3, [r2, #0]
 8014890:	1c58      	adds	r0, r3, #1
 8014892:	6010      	str	r0, [r2, #0]
 8014894:	7019      	strb	r1, [r3, #0]
 8014896:	4608      	mov	r0, r1
 8014898:	f85d 4b04 	ldr.w	r4, [sp], #4
 801489c:	4770      	bx	lr

0801489e <__sfputs_r>:
 801489e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148a0:	4606      	mov	r6, r0
 80148a2:	460f      	mov	r7, r1
 80148a4:	4614      	mov	r4, r2
 80148a6:	18d5      	adds	r5, r2, r3
 80148a8:	42ac      	cmp	r4, r5
 80148aa:	d101      	bne.n	80148b0 <__sfputs_r+0x12>
 80148ac:	2000      	movs	r0, #0
 80148ae:	e007      	b.n	80148c0 <__sfputs_r+0x22>
 80148b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148b4:	463a      	mov	r2, r7
 80148b6:	4630      	mov	r0, r6
 80148b8:	f7ff ffda 	bl	8014870 <__sfputc_r>
 80148bc:	1c43      	adds	r3, r0, #1
 80148be:	d1f3      	bne.n	80148a8 <__sfputs_r+0xa>
 80148c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080148c4 <_vfiprintf_r>:
 80148c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c8:	460d      	mov	r5, r1
 80148ca:	b09d      	sub	sp, #116	@ 0x74
 80148cc:	4614      	mov	r4, r2
 80148ce:	4698      	mov	r8, r3
 80148d0:	4606      	mov	r6, r0
 80148d2:	b118      	cbz	r0, 80148dc <_vfiprintf_r+0x18>
 80148d4:	6a03      	ldr	r3, [r0, #32]
 80148d6:	b90b      	cbnz	r3, 80148dc <_vfiprintf_r+0x18>
 80148d8:	f7fd f83a 	bl	8011950 <__sinit>
 80148dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80148de:	07d9      	lsls	r1, r3, #31
 80148e0:	d405      	bmi.n	80148ee <_vfiprintf_r+0x2a>
 80148e2:	89ab      	ldrh	r3, [r5, #12]
 80148e4:	059a      	lsls	r2, r3, #22
 80148e6:	d402      	bmi.n	80148ee <_vfiprintf_r+0x2a>
 80148e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80148ea:	f7fd fabe 	bl	8011e6a <__retarget_lock_acquire_recursive>
 80148ee:	89ab      	ldrh	r3, [r5, #12]
 80148f0:	071b      	lsls	r3, r3, #28
 80148f2:	d501      	bpl.n	80148f8 <_vfiprintf_r+0x34>
 80148f4:	692b      	ldr	r3, [r5, #16]
 80148f6:	b99b      	cbnz	r3, 8014920 <_vfiprintf_r+0x5c>
 80148f8:	4629      	mov	r1, r5
 80148fa:	4630      	mov	r0, r6
 80148fc:	f7fd f9a8 	bl	8011c50 <__swsetup_r>
 8014900:	b170      	cbz	r0, 8014920 <_vfiprintf_r+0x5c>
 8014902:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014904:	07dc      	lsls	r4, r3, #31
 8014906:	d504      	bpl.n	8014912 <_vfiprintf_r+0x4e>
 8014908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801490c:	b01d      	add	sp, #116	@ 0x74
 801490e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014912:	89ab      	ldrh	r3, [r5, #12]
 8014914:	0598      	lsls	r0, r3, #22
 8014916:	d4f7      	bmi.n	8014908 <_vfiprintf_r+0x44>
 8014918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801491a:	f7fd faa7 	bl	8011e6c <__retarget_lock_release_recursive>
 801491e:	e7f3      	b.n	8014908 <_vfiprintf_r+0x44>
 8014920:	2300      	movs	r3, #0
 8014922:	9309      	str	r3, [sp, #36]	@ 0x24
 8014924:	2320      	movs	r3, #32
 8014926:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801492a:	f8cd 800c 	str.w	r8, [sp, #12]
 801492e:	2330      	movs	r3, #48	@ 0x30
 8014930:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014ae0 <_vfiprintf_r+0x21c>
 8014934:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014938:	f04f 0901 	mov.w	r9, #1
 801493c:	4623      	mov	r3, r4
 801493e:	469a      	mov	sl, r3
 8014940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014944:	b10a      	cbz	r2, 801494a <_vfiprintf_r+0x86>
 8014946:	2a25      	cmp	r2, #37	@ 0x25
 8014948:	d1f9      	bne.n	801493e <_vfiprintf_r+0x7a>
 801494a:	ebba 0b04 	subs.w	fp, sl, r4
 801494e:	d00b      	beq.n	8014968 <_vfiprintf_r+0xa4>
 8014950:	465b      	mov	r3, fp
 8014952:	4622      	mov	r2, r4
 8014954:	4629      	mov	r1, r5
 8014956:	4630      	mov	r0, r6
 8014958:	f7ff ffa1 	bl	801489e <__sfputs_r>
 801495c:	3001      	adds	r0, #1
 801495e:	f000 80a7 	beq.w	8014ab0 <_vfiprintf_r+0x1ec>
 8014962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014964:	445a      	add	r2, fp
 8014966:	9209      	str	r2, [sp, #36]	@ 0x24
 8014968:	f89a 3000 	ldrb.w	r3, [sl]
 801496c:	2b00      	cmp	r3, #0
 801496e:	f000 809f 	beq.w	8014ab0 <_vfiprintf_r+0x1ec>
 8014972:	2300      	movs	r3, #0
 8014974:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801497c:	f10a 0a01 	add.w	sl, sl, #1
 8014980:	9304      	str	r3, [sp, #16]
 8014982:	9307      	str	r3, [sp, #28]
 8014984:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014988:	931a      	str	r3, [sp, #104]	@ 0x68
 801498a:	4654      	mov	r4, sl
 801498c:	2205      	movs	r2, #5
 801498e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014992:	4853      	ldr	r0, [pc, #332]	@ (8014ae0 <_vfiprintf_r+0x21c>)
 8014994:	f7eb fccc 	bl	8000330 <memchr>
 8014998:	9a04      	ldr	r2, [sp, #16]
 801499a:	b9d8      	cbnz	r0, 80149d4 <_vfiprintf_r+0x110>
 801499c:	06d1      	lsls	r1, r2, #27
 801499e:	bf44      	itt	mi
 80149a0:	2320      	movmi	r3, #32
 80149a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80149a6:	0713      	lsls	r3, r2, #28
 80149a8:	bf44      	itt	mi
 80149aa:	232b      	movmi	r3, #43	@ 0x2b
 80149ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80149b0:	f89a 3000 	ldrb.w	r3, [sl]
 80149b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80149b6:	d015      	beq.n	80149e4 <_vfiprintf_r+0x120>
 80149b8:	9a07      	ldr	r2, [sp, #28]
 80149ba:	4654      	mov	r4, sl
 80149bc:	2000      	movs	r0, #0
 80149be:	f04f 0c0a 	mov.w	ip, #10
 80149c2:	4621      	mov	r1, r4
 80149c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149c8:	3b30      	subs	r3, #48	@ 0x30
 80149ca:	2b09      	cmp	r3, #9
 80149cc:	d94b      	bls.n	8014a66 <_vfiprintf_r+0x1a2>
 80149ce:	b1b0      	cbz	r0, 80149fe <_vfiprintf_r+0x13a>
 80149d0:	9207      	str	r2, [sp, #28]
 80149d2:	e014      	b.n	80149fe <_vfiprintf_r+0x13a>
 80149d4:	eba0 0308 	sub.w	r3, r0, r8
 80149d8:	fa09 f303 	lsl.w	r3, r9, r3
 80149dc:	4313      	orrs	r3, r2
 80149de:	9304      	str	r3, [sp, #16]
 80149e0:	46a2      	mov	sl, r4
 80149e2:	e7d2      	b.n	801498a <_vfiprintf_r+0xc6>
 80149e4:	9b03      	ldr	r3, [sp, #12]
 80149e6:	1d19      	adds	r1, r3, #4
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	9103      	str	r1, [sp, #12]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	bfbb      	ittet	lt
 80149f0:	425b      	neglt	r3, r3
 80149f2:	f042 0202 	orrlt.w	r2, r2, #2
 80149f6:	9307      	strge	r3, [sp, #28]
 80149f8:	9307      	strlt	r3, [sp, #28]
 80149fa:	bfb8      	it	lt
 80149fc:	9204      	strlt	r2, [sp, #16]
 80149fe:	7823      	ldrb	r3, [r4, #0]
 8014a00:	2b2e      	cmp	r3, #46	@ 0x2e
 8014a02:	d10a      	bne.n	8014a1a <_vfiprintf_r+0x156>
 8014a04:	7863      	ldrb	r3, [r4, #1]
 8014a06:	2b2a      	cmp	r3, #42	@ 0x2a
 8014a08:	d132      	bne.n	8014a70 <_vfiprintf_r+0x1ac>
 8014a0a:	9b03      	ldr	r3, [sp, #12]
 8014a0c:	1d1a      	adds	r2, r3, #4
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	9203      	str	r2, [sp, #12]
 8014a12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014a16:	3402      	adds	r4, #2
 8014a18:	9305      	str	r3, [sp, #20]
 8014a1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014af0 <_vfiprintf_r+0x22c>
 8014a1e:	7821      	ldrb	r1, [r4, #0]
 8014a20:	2203      	movs	r2, #3
 8014a22:	4650      	mov	r0, sl
 8014a24:	f7eb fc84 	bl	8000330 <memchr>
 8014a28:	b138      	cbz	r0, 8014a3a <_vfiprintf_r+0x176>
 8014a2a:	9b04      	ldr	r3, [sp, #16]
 8014a2c:	eba0 000a 	sub.w	r0, r0, sl
 8014a30:	2240      	movs	r2, #64	@ 0x40
 8014a32:	4082      	lsls	r2, r0
 8014a34:	4313      	orrs	r3, r2
 8014a36:	3401      	adds	r4, #1
 8014a38:	9304      	str	r3, [sp, #16]
 8014a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a3e:	4829      	ldr	r0, [pc, #164]	@ (8014ae4 <_vfiprintf_r+0x220>)
 8014a40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014a44:	2206      	movs	r2, #6
 8014a46:	f7eb fc73 	bl	8000330 <memchr>
 8014a4a:	2800      	cmp	r0, #0
 8014a4c:	d03f      	beq.n	8014ace <_vfiprintf_r+0x20a>
 8014a4e:	4b26      	ldr	r3, [pc, #152]	@ (8014ae8 <_vfiprintf_r+0x224>)
 8014a50:	bb1b      	cbnz	r3, 8014a9a <_vfiprintf_r+0x1d6>
 8014a52:	9b03      	ldr	r3, [sp, #12]
 8014a54:	3307      	adds	r3, #7
 8014a56:	f023 0307 	bic.w	r3, r3, #7
 8014a5a:	3308      	adds	r3, #8
 8014a5c:	9303      	str	r3, [sp, #12]
 8014a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a60:	443b      	add	r3, r7
 8014a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a64:	e76a      	b.n	801493c <_vfiprintf_r+0x78>
 8014a66:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a6a:	460c      	mov	r4, r1
 8014a6c:	2001      	movs	r0, #1
 8014a6e:	e7a8      	b.n	80149c2 <_vfiprintf_r+0xfe>
 8014a70:	2300      	movs	r3, #0
 8014a72:	3401      	adds	r4, #1
 8014a74:	9305      	str	r3, [sp, #20]
 8014a76:	4619      	mov	r1, r3
 8014a78:	f04f 0c0a 	mov.w	ip, #10
 8014a7c:	4620      	mov	r0, r4
 8014a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a82:	3a30      	subs	r2, #48	@ 0x30
 8014a84:	2a09      	cmp	r2, #9
 8014a86:	d903      	bls.n	8014a90 <_vfiprintf_r+0x1cc>
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d0c6      	beq.n	8014a1a <_vfiprintf_r+0x156>
 8014a8c:	9105      	str	r1, [sp, #20]
 8014a8e:	e7c4      	b.n	8014a1a <_vfiprintf_r+0x156>
 8014a90:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a94:	4604      	mov	r4, r0
 8014a96:	2301      	movs	r3, #1
 8014a98:	e7f0      	b.n	8014a7c <_vfiprintf_r+0x1b8>
 8014a9a:	ab03      	add	r3, sp, #12
 8014a9c:	9300      	str	r3, [sp, #0]
 8014a9e:	462a      	mov	r2, r5
 8014aa0:	4b12      	ldr	r3, [pc, #72]	@ (8014aec <_vfiprintf_r+0x228>)
 8014aa2:	a904      	add	r1, sp, #16
 8014aa4:	4630      	mov	r0, r6
 8014aa6:	f7fc f91b 	bl	8010ce0 <_printf_float>
 8014aaa:	4607      	mov	r7, r0
 8014aac:	1c78      	adds	r0, r7, #1
 8014aae:	d1d6      	bne.n	8014a5e <_vfiprintf_r+0x19a>
 8014ab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014ab2:	07d9      	lsls	r1, r3, #31
 8014ab4:	d405      	bmi.n	8014ac2 <_vfiprintf_r+0x1fe>
 8014ab6:	89ab      	ldrh	r3, [r5, #12]
 8014ab8:	059a      	lsls	r2, r3, #22
 8014aba:	d402      	bmi.n	8014ac2 <_vfiprintf_r+0x1fe>
 8014abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014abe:	f7fd f9d5 	bl	8011e6c <__retarget_lock_release_recursive>
 8014ac2:	89ab      	ldrh	r3, [r5, #12]
 8014ac4:	065b      	lsls	r3, r3, #25
 8014ac6:	f53f af1f 	bmi.w	8014908 <_vfiprintf_r+0x44>
 8014aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014acc:	e71e      	b.n	801490c <_vfiprintf_r+0x48>
 8014ace:	ab03      	add	r3, sp, #12
 8014ad0:	9300      	str	r3, [sp, #0]
 8014ad2:	462a      	mov	r2, r5
 8014ad4:	4b05      	ldr	r3, [pc, #20]	@ (8014aec <_vfiprintf_r+0x228>)
 8014ad6:	a904      	add	r1, sp, #16
 8014ad8:	4630      	mov	r0, r6
 8014ada:	f7fc fb89 	bl	80111f0 <_printf_i>
 8014ade:	e7e4      	b.n	8014aaa <_vfiprintf_r+0x1e6>
 8014ae0:	08017437 	.word	0x08017437
 8014ae4:	08017441 	.word	0x08017441
 8014ae8:	08010ce1 	.word	0x08010ce1
 8014aec:	0801489f 	.word	0x0801489f
 8014af0:	0801743d 	.word	0x0801743d

08014af4 <_scanf_chars>:
 8014af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014af8:	4615      	mov	r5, r2
 8014afa:	688a      	ldr	r2, [r1, #8]
 8014afc:	4680      	mov	r8, r0
 8014afe:	460c      	mov	r4, r1
 8014b00:	b932      	cbnz	r2, 8014b10 <_scanf_chars+0x1c>
 8014b02:	698a      	ldr	r2, [r1, #24]
 8014b04:	2a00      	cmp	r2, #0
 8014b06:	bf14      	ite	ne
 8014b08:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8014b0c:	2201      	moveq	r2, #1
 8014b0e:	608a      	str	r2, [r1, #8]
 8014b10:	6822      	ldr	r2, [r4, #0]
 8014b12:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8014ba4 <_scanf_chars+0xb0>
 8014b16:	06d1      	lsls	r1, r2, #27
 8014b18:	bf5f      	itttt	pl
 8014b1a:	681a      	ldrpl	r2, [r3, #0]
 8014b1c:	1d11      	addpl	r1, r2, #4
 8014b1e:	6019      	strpl	r1, [r3, #0]
 8014b20:	6816      	ldrpl	r6, [r2, #0]
 8014b22:	2700      	movs	r7, #0
 8014b24:	69a0      	ldr	r0, [r4, #24]
 8014b26:	b188      	cbz	r0, 8014b4c <_scanf_chars+0x58>
 8014b28:	2801      	cmp	r0, #1
 8014b2a:	d107      	bne.n	8014b3c <_scanf_chars+0x48>
 8014b2c:	682b      	ldr	r3, [r5, #0]
 8014b2e:	781a      	ldrb	r2, [r3, #0]
 8014b30:	6963      	ldr	r3, [r4, #20]
 8014b32:	5c9b      	ldrb	r3, [r3, r2]
 8014b34:	b953      	cbnz	r3, 8014b4c <_scanf_chars+0x58>
 8014b36:	2f00      	cmp	r7, #0
 8014b38:	d031      	beq.n	8014b9e <_scanf_chars+0xaa>
 8014b3a:	e022      	b.n	8014b82 <_scanf_chars+0x8e>
 8014b3c:	2802      	cmp	r0, #2
 8014b3e:	d120      	bne.n	8014b82 <_scanf_chars+0x8e>
 8014b40:	682b      	ldr	r3, [r5, #0]
 8014b42:	781b      	ldrb	r3, [r3, #0]
 8014b44:	f819 3003 	ldrb.w	r3, [r9, r3]
 8014b48:	071b      	lsls	r3, r3, #28
 8014b4a:	d41a      	bmi.n	8014b82 <_scanf_chars+0x8e>
 8014b4c:	6823      	ldr	r3, [r4, #0]
 8014b4e:	06da      	lsls	r2, r3, #27
 8014b50:	bf5e      	ittt	pl
 8014b52:	682b      	ldrpl	r3, [r5, #0]
 8014b54:	781b      	ldrbpl	r3, [r3, #0]
 8014b56:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014b5a:	682a      	ldr	r2, [r5, #0]
 8014b5c:	686b      	ldr	r3, [r5, #4]
 8014b5e:	3201      	adds	r2, #1
 8014b60:	602a      	str	r2, [r5, #0]
 8014b62:	68a2      	ldr	r2, [r4, #8]
 8014b64:	3b01      	subs	r3, #1
 8014b66:	3a01      	subs	r2, #1
 8014b68:	606b      	str	r3, [r5, #4]
 8014b6a:	3701      	adds	r7, #1
 8014b6c:	60a2      	str	r2, [r4, #8]
 8014b6e:	b142      	cbz	r2, 8014b82 <_scanf_chars+0x8e>
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	dcd7      	bgt.n	8014b24 <_scanf_chars+0x30>
 8014b74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014b78:	4629      	mov	r1, r5
 8014b7a:	4640      	mov	r0, r8
 8014b7c:	4798      	blx	r3
 8014b7e:	2800      	cmp	r0, #0
 8014b80:	d0d0      	beq.n	8014b24 <_scanf_chars+0x30>
 8014b82:	6823      	ldr	r3, [r4, #0]
 8014b84:	f013 0310 	ands.w	r3, r3, #16
 8014b88:	d105      	bne.n	8014b96 <_scanf_chars+0xa2>
 8014b8a:	68e2      	ldr	r2, [r4, #12]
 8014b8c:	3201      	adds	r2, #1
 8014b8e:	60e2      	str	r2, [r4, #12]
 8014b90:	69a2      	ldr	r2, [r4, #24]
 8014b92:	b102      	cbz	r2, 8014b96 <_scanf_chars+0xa2>
 8014b94:	7033      	strb	r3, [r6, #0]
 8014b96:	6923      	ldr	r3, [r4, #16]
 8014b98:	443b      	add	r3, r7
 8014b9a:	6123      	str	r3, [r4, #16]
 8014b9c:	2000      	movs	r0, #0
 8014b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ba2:	bf00      	nop
 8014ba4:	08017659 	.word	0x08017659

08014ba8 <_scanf_i>:
 8014ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bac:	4698      	mov	r8, r3
 8014bae:	4b74      	ldr	r3, [pc, #464]	@ (8014d80 <_scanf_i+0x1d8>)
 8014bb0:	460c      	mov	r4, r1
 8014bb2:	4682      	mov	sl, r0
 8014bb4:	4616      	mov	r6, r2
 8014bb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014bba:	b087      	sub	sp, #28
 8014bbc:	ab03      	add	r3, sp, #12
 8014bbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014bc2:	4b70      	ldr	r3, [pc, #448]	@ (8014d84 <_scanf_i+0x1dc>)
 8014bc4:	69a1      	ldr	r1, [r4, #24]
 8014bc6:	4a70      	ldr	r2, [pc, #448]	@ (8014d88 <_scanf_i+0x1e0>)
 8014bc8:	2903      	cmp	r1, #3
 8014bca:	bf08      	it	eq
 8014bcc:	461a      	moveq	r2, r3
 8014bce:	68a3      	ldr	r3, [r4, #8]
 8014bd0:	9201      	str	r2, [sp, #4]
 8014bd2:	1e5a      	subs	r2, r3, #1
 8014bd4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014bd8:	bf88      	it	hi
 8014bda:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014bde:	4627      	mov	r7, r4
 8014be0:	bf82      	ittt	hi
 8014be2:	eb03 0905 	addhi.w	r9, r3, r5
 8014be6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014bea:	60a3      	strhi	r3, [r4, #8]
 8014bec:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014bf0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8014bf4:	bf98      	it	ls
 8014bf6:	f04f 0900 	movls.w	r9, #0
 8014bfa:	6023      	str	r3, [r4, #0]
 8014bfc:	463d      	mov	r5, r7
 8014bfe:	f04f 0b00 	mov.w	fp, #0
 8014c02:	6831      	ldr	r1, [r6, #0]
 8014c04:	ab03      	add	r3, sp, #12
 8014c06:	7809      	ldrb	r1, [r1, #0]
 8014c08:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014c0c:	2202      	movs	r2, #2
 8014c0e:	f7eb fb8f 	bl	8000330 <memchr>
 8014c12:	b328      	cbz	r0, 8014c60 <_scanf_i+0xb8>
 8014c14:	f1bb 0f01 	cmp.w	fp, #1
 8014c18:	d159      	bne.n	8014cce <_scanf_i+0x126>
 8014c1a:	6862      	ldr	r2, [r4, #4]
 8014c1c:	b92a      	cbnz	r2, 8014c2a <_scanf_i+0x82>
 8014c1e:	6822      	ldr	r2, [r4, #0]
 8014c20:	2108      	movs	r1, #8
 8014c22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014c26:	6061      	str	r1, [r4, #4]
 8014c28:	6022      	str	r2, [r4, #0]
 8014c2a:	6822      	ldr	r2, [r4, #0]
 8014c2c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8014c30:	6022      	str	r2, [r4, #0]
 8014c32:	68a2      	ldr	r2, [r4, #8]
 8014c34:	1e51      	subs	r1, r2, #1
 8014c36:	60a1      	str	r1, [r4, #8]
 8014c38:	b192      	cbz	r2, 8014c60 <_scanf_i+0xb8>
 8014c3a:	6832      	ldr	r2, [r6, #0]
 8014c3c:	1c51      	adds	r1, r2, #1
 8014c3e:	6031      	str	r1, [r6, #0]
 8014c40:	7812      	ldrb	r2, [r2, #0]
 8014c42:	f805 2b01 	strb.w	r2, [r5], #1
 8014c46:	6872      	ldr	r2, [r6, #4]
 8014c48:	3a01      	subs	r2, #1
 8014c4a:	2a00      	cmp	r2, #0
 8014c4c:	6072      	str	r2, [r6, #4]
 8014c4e:	dc07      	bgt.n	8014c60 <_scanf_i+0xb8>
 8014c50:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8014c54:	4631      	mov	r1, r6
 8014c56:	4650      	mov	r0, sl
 8014c58:	4790      	blx	r2
 8014c5a:	2800      	cmp	r0, #0
 8014c5c:	f040 8085 	bne.w	8014d6a <_scanf_i+0x1c2>
 8014c60:	f10b 0b01 	add.w	fp, fp, #1
 8014c64:	f1bb 0f03 	cmp.w	fp, #3
 8014c68:	d1cb      	bne.n	8014c02 <_scanf_i+0x5a>
 8014c6a:	6863      	ldr	r3, [r4, #4]
 8014c6c:	b90b      	cbnz	r3, 8014c72 <_scanf_i+0xca>
 8014c6e:	230a      	movs	r3, #10
 8014c70:	6063      	str	r3, [r4, #4]
 8014c72:	6863      	ldr	r3, [r4, #4]
 8014c74:	4945      	ldr	r1, [pc, #276]	@ (8014d8c <_scanf_i+0x1e4>)
 8014c76:	6960      	ldr	r0, [r4, #20]
 8014c78:	1ac9      	subs	r1, r1, r3
 8014c7a:	f000 f9cb 	bl	8015014 <__sccl>
 8014c7e:	f04f 0b00 	mov.w	fp, #0
 8014c82:	68a3      	ldr	r3, [r4, #8]
 8014c84:	6822      	ldr	r2, [r4, #0]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d03d      	beq.n	8014d06 <_scanf_i+0x15e>
 8014c8a:	6831      	ldr	r1, [r6, #0]
 8014c8c:	6960      	ldr	r0, [r4, #20]
 8014c8e:	f891 c000 	ldrb.w	ip, [r1]
 8014c92:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014c96:	2800      	cmp	r0, #0
 8014c98:	d035      	beq.n	8014d06 <_scanf_i+0x15e>
 8014c9a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8014c9e:	d124      	bne.n	8014cea <_scanf_i+0x142>
 8014ca0:	0510      	lsls	r0, r2, #20
 8014ca2:	d522      	bpl.n	8014cea <_scanf_i+0x142>
 8014ca4:	f10b 0b01 	add.w	fp, fp, #1
 8014ca8:	f1b9 0f00 	cmp.w	r9, #0
 8014cac:	d003      	beq.n	8014cb6 <_scanf_i+0x10e>
 8014cae:	3301      	adds	r3, #1
 8014cb0:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8014cb4:	60a3      	str	r3, [r4, #8]
 8014cb6:	6873      	ldr	r3, [r6, #4]
 8014cb8:	3b01      	subs	r3, #1
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	6073      	str	r3, [r6, #4]
 8014cbe:	dd1b      	ble.n	8014cf8 <_scanf_i+0x150>
 8014cc0:	6833      	ldr	r3, [r6, #0]
 8014cc2:	3301      	adds	r3, #1
 8014cc4:	6033      	str	r3, [r6, #0]
 8014cc6:	68a3      	ldr	r3, [r4, #8]
 8014cc8:	3b01      	subs	r3, #1
 8014cca:	60a3      	str	r3, [r4, #8]
 8014ccc:	e7d9      	b.n	8014c82 <_scanf_i+0xda>
 8014cce:	f1bb 0f02 	cmp.w	fp, #2
 8014cd2:	d1ae      	bne.n	8014c32 <_scanf_i+0x8a>
 8014cd4:	6822      	ldr	r2, [r4, #0]
 8014cd6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8014cda:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8014cde:	d1c4      	bne.n	8014c6a <_scanf_i+0xc2>
 8014ce0:	2110      	movs	r1, #16
 8014ce2:	6061      	str	r1, [r4, #4]
 8014ce4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014ce8:	e7a2      	b.n	8014c30 <_scanf_i+0x88>
 8014cea:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8014cee:	6022      	str	r2, [r4, #0]
 8014cf0:	780b      	ldrb	r3, [r1, #0]
 8014cf2:	f805 3b01 	strb.w	r3, [r5], #1
 8014cf6:	e7de      	b.n	8014cb6 <_scanf_i+0x10e>
 8014cf8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014cfc:	4631      	mov	r1, r6
 8014cfe:	4650      	mov	r0, sl
 8014d00:	4798      	blx	r3
 8014d02:	2800      	cmp	r0, #0
 8014d04:	d0df      	beq.n	8014cc6 <_scanf_i+0x11e>
 8014d06:	6823      	ldr	r3, [r4, #0]
 8014d08:	05d9      	lsls	r1, r3, #23
 8014d0a:	d50d      	bpl.n	8014d28 <_scanf_i+0x180>
 8014d0c:	42bd      	cmp	r5, r7
 8014d0e:	d909      	bls.n	8014d24 <_scanf_i+0x17c>
 8014d10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014d14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014d18:	4632      	mov	r2, r6
 8014d1a:	4650      	mov	r0, sl
 8014d1c:	4798      	blx	r3
 8014d1e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8014d22:	464d      	mov	r5, r9
 8014d24:	42bd      	cmp	r5, r7
 8014d26:	d028      	beq.n	8014d7a <_scanf_i+0x1d2>
 8014d28:	6822      	ldr	r2, [r4, #0]
 8014d2a:	f012 0210 	ands.w	r2, r2, #16
 8014d2e:	d113      	bne.n	8014d58 <_scanf_i+0x1b0>
 8014d30:	702a      	strb	r2, [r5, #0]
 8014d32:	6863      	ldr	r3, [r4, #4]
 8014d34:	9e01      	ldr	r6, [sp, #4]
 8014d36:	4639      	mov	r1, r7
 8014d38:	4650      	mov	r0, sl
 8014d3a:	47b0      	blx	r6
 8014d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8014d40:	6821      	ldr	r1, [r4, #0]
 8014d42:	1d1a      	adds	r2, r3, #4
 8014d44:	f8c8 2000 	str.w	r2, [r8]
 8014d48:	f011 0f20 	tst.w	r1, #32
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	d00f      	beq.n	8014d70 <_scanf_i+0x1c8>
 8014d50:	6018      	str	r0, [r3, #0]
 8014d52:	68e3      	ldr	r3, [r4, #12]
 8014d54:	3301      	adds	r3, #1
 8014d56:	60e3      	str	r3, [r4, #12]
 8014d58:	6923      	ldr	r3, [r4, #16]
 8014d5a:	1bed      	subs	r5, r5, r7
 8014d5c:	445d      	add	r5, fp
 8014d5e:	442b      	add	r3, r5
 8014d60:	6123      	str	r3, [r4, #16]
 8014d62:	2000      	movs	r0, #0
 8014d64:	b007      	add	sp, #28
 8014d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d6a:	f04f 0b00 	mov.w	fp, #0
 8014d6e:	e7ca      	b.n	8014d06 <_scanf_i+0x15e>
 8014d70:	07ca      	lsls	r2, r1, #31
 8014d72:	bf4c      	ite	mi
 8014d74:	8018      	strhmi	r0, [r3, #0]
 8014d76:	6018      	strpl	r0, [r3, #0]
 8014d78:	e7eb      	b.n	8014d52 <_scanf_i+0x1aa>
 8014d7a:	2001      	movs	r0, #1
 8014d7c:	e7f2      	b.n	8014d64 <_scanf_i+0x1bc>
 8014d7e:	bf00      	nop
 8014d80:	08017294 	.word	0x08017294
 8014d84:	0801421d 	.word	0x0801421d
 8014d88:	080159a5 	.word	0x080159a5
 8014d8c:	08017458 	.word	0x08017458

08014d90 <__sflush_r>:
 8014d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d98:	0716      	lsls	r6, r2, #28
 8014d9a:	4605      	mov	r5, r0
 8014d9c:	460c      	mov	r4, r1
 8014d9e:	d454      	bmi.n	8014e4a <__sflush_r+0xba>
 8014da0:	684b      	ldr	r3, [r1, #4]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	dc02      	bgt.n	8014dac <__sflush_r+0x1c>
 8014da6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	dd48      	ble.n	8014e3e <__sflush_r+0xae>
 8014dac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014dae:	2e00      	cmp	r6, #0
 8014db0:	d045      	beq.n	8014e3e <__sflush_r+0xae>
 8014db2:	2300      	movs	r3, #0
 8014db4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014db8:	682f      	ldr	r7, [r5, #0]
 8014dba:	6a21      	ldr	r1, [r4, #32]
 8014dbc:	602b      	str	r3, [r5, #0]
 8014dbe:	d030      	beq.n	8014e22 <__sflush_r+0x92>
 8014dc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014dc2:	89a3      	ldrh	r3, [r4, #12]
 8014dc4:	0759      	lsls	r1, r3, #29
 8014dc6:	d505      	bpl.n	8014dd4 <__sflush_r+0x44>
 8014dc8:	6863      	ldr	r3, [r4, #4]
 8014dca:	1ad2      	subs	r2, r2, r3
 8014dcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014dce:	b10b      	cbz	r3, 8014dd4 <__sflush_r+0x44>
 8014dd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014dd2:	1ad2      	subs	r2, r2, r3
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014dd8:	6a21      	ldr	r1, [r4, #32]
 8014dda:	4628      	mov	r0, r5
 8014ddc:	47b0      	blx	r6
 8014dde:	1c43      	adds	r3, r0, #1
 8014de0:	89a3      	ldrh	r3, [r4, #12]
 8014de2:	d106      	bne.n	8014df2 <__sflush_r+0x62>
 8014de4:	6829      	ldr	r1, [r5, #0]
 8014de6:	291d      	cmp	r1, #29
 8014de8:	d82b      	bhi.n	8014e42 <__sflush_r+0xb2>
 8014dea:	4a2a      	ldr	r2, [pc, #168]	@ (8014e94 <__sflush_r+0x104>)
 8014dec:	40ca      	lsrs	r2, r1
 8014dee:	07d6      	lsls	r6, r2, #31
 8014df0:	d527      	bpl.n	8014e42 <__sflush_r+0xb2>
 8014df2:	2200      	movs	r2, #0
 8014df4:	6062      	str	r2, [r4, #4]
 8014df6:	04d9      	lsls	r1, r3, #19
 8014df8:	6922      	ldr	r2, [r4, #16]
 8014dfa:	6022      	str	r2, [r4, #0]
 8014dfc:	d504      	bpl.n	8014e08 <__sflush_r+0x78>
 8014dfe:	1c42      	adds	r2, r0, #1
 8014e00:	d101      	bne.n	8014e06 <__sflush_r+0x76>
 8014e02:	682b      	ldr	r3, [r5, #0]
 8014e04:	b903      	cbnz	r3, 8014e08 <__sflush_r+0x78>
 8014e06:	6560      	str	r0, [r4, #84]	@ 0x54
 8014e08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014e0a:	602f      	str	r7, [r5, #0]
 8014e0c:	b1b9      	cbz	r1, 8014e3e <__sflush_r+0xae>
 8014e0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014e12:	4299      	cmp	r1, r3
 8014e14:	d002      	beq.n	8014e1c <__sflush_r+0x8c>
 8014e16:	4628      	mov	r0, r5
 8014e18:	f7fd fe24 	bl	8012a64 <_free_r>
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014e20:	e00d      	b.n	8014e3e <__sflush_r+0xae>
 8014e22:	2301      	movs	r3, #1
 8014e24:	4628      	mov	r0, r5
 8014e26:	47b0      	blx	r6
 8014e28:	4602      	mov	r2, r0
 8014e2a:	1c50      	adds	r0, r2, #1
 8014e2c:	d1c9      	bne.n	8014dc2 <__sflush_r+0x32>
 8014e2e:	682b      	ldr	r3, [r5, #0]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d0c6      	beq.n	8014dc2 <__sflush_r+0x32>
 8014e34:	2b1d      	cmp	r3, #29
 8014e36:	d001      	beq.n	8014e3c <__sflush_r+0xac>
 8014e38:	2b16      	cmp	r3, #22
 8014e3a:	d11e      	bne.n	8014e7a <__sflush_r+0xea>
 8014e3c:	602f      	str	r7, [r5, #0]
 8014e3e:	2000      	movs	r0, #0
 8014e40:	e022      	b.n	8014e88 <__sflush_r+0xf8>
 8014e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e46:	b21b      	sxth	r3, r3
 8014e48:	e01b      	b.n	8014e82 <__sflush_r+0xf2>
 8014e4a:	690f      	ldr	r7, [r1, #16]
 8014e4c:	2f00      	cmp	r7, #0
 8014e4e:	d0f6      	beq.n	8014e3e <__sflush_r+0xae>
 8014e50:	0793      	lsls	r3, r2, #30
 8014e52:	680e      	ldr	r6, [r1, #0]
 8014e54:	bf08      	it	eq
 8014e56:	694b      	ldreq	r3, [r1, #20]
 8014e58:	600f      	str	r7, [r1, #0]
 8014e5a:	bf18      	it	ne
 8014e5c:	2300      	movne	r3, #0
 8014e5e:	eba6 0807 	sub.w	r8, r6, r7
 8014e62:	608b      	str	r3, [r1, #8]
 8014e64:	f1b8 0f00 	cmp.w	r8, #0
 8014e68:	dde9      	ble.n	8014e3e <__sflush_r+0xae>
 8014e6a:	6a21      	ldr	r1, [r4, #32]
 8014e6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014e6e:	4643      	mov	r3, r8
 8014e70:	463a      	mov	r2, r7
 8014e72:	4628      	mov	r0, r5
 8014e74:	47b0      	blx	r6
 8014e76:	2800      	cmp	r0, #0
 8014e78:	dc08      	bgt.n	8014e8c <__sflush_r+0xfc>
 8014e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e82:	81a3      	strh	r3, [r4, #12]
 8014e84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e8c:	4407      	add	r7, r0
 8014e8e:	eba8 0800 	sub.w	r8, r8, r0
 8014e92:	e7e7      	b.n	8014e64 <__sflush_r+0xd4>
 8014e94:	20400001 	.word	0x20400001

08014e98 <_fflush_r>:
 8014e98:	b538      	push	{r3, r4, r5, lr}
 8014e9a:	690b      	ldr	r3, [r1, #16]
 8014e9c:	4605      	mov	r5, r0
 8014e9e:	460c      	mov	r4, r1
 8014ea0:	b913      	cbnz	r3, 8014ea8 <_fflush_r+0x10>
 8014ea2:	2500      	movs	r5, #0
 8014ea4:	4628      	mov	r0, r5
 8014ea6:	bd38      	pop	{r3, r4, r5, pc}
 8014ea8:	b118      	cbz	r0, 8014eb2 <_fflush_r+0x1a>
 8014eaa:	6a03      	ldr	r3, [r0, #32]
 8014eac:	b90b      	cbnz	r3, 8014eb2 <_fflush_r+0x1a>
 8014eae:	f7fc fd4f 	bl	8011950 <__sinit>
 8014eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d0f3      	beq.n	8014ea2 <_fflush_r+0xa>
 8014eba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014ebc:	07d0      	lsls	r0, r2, #31
 8014ebe:	d404      	bmi.n	8014eca <_fflush_r+0x32>
 8014ec0:	0599      	lsls	r1, r3, #22
 8014ec2:	d402      	bmi.n	8014eca <_fflush_r+0x32>
 8014ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014ec6:	f7fc ffd0 	bl	8011e6a <__retarget_lock_acquire_recursive>
 8014eca:	4628      	mov	r0, r5
 8014ecc:	4621      	mov	r1, r4
 8014ece:	f7ff ff5f 	bl	8014d90 <__sflush_r>
 8014ed2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014ed4:	07da      	lsls	r2, r3, #31
 8014ed6:	4605      	mov	r5, r0
 8014ed8:	d4e4      	bmi.n	8014ea4 <_fflush_r+0xc>
 8014eda:	89a3      	ldrh	r3, [r4, #12]
 8014edc:	059b      	lsls	r3, r3, #22
 8014ede:	d4e1      	bmi.n	8014ea4 <_fflush_r+0xc>
 8014ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014ee2:	f7fc ffc3 	bl	8011e6c <__retarget_lock_release_recursive>
 8014ee6:	e7dd      	b.n	8014ea4 <_fflush_r+0xc>

08014ee8 <__swhatbuf_r>:
 8014ee8:	b570      	push	{r4, r5, r6, lr}
 8014eea:	460c      	mov	r4, r1
 8014eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ef0:	2900      	cmp	r1, #0
 8014ef2:	b096      	sub	sp, #88	@ 0x58
 8014ef4:	4615      	mov	r5, r2
 8014ef6:	461e      	mov	r6, r3
 8014ef8:	da0d      	bge.n	8014f16 <__swhatbuf_r+0x2e>
 8014efa:	89a3      	ldrh	r3, [r4, #12]
 8014efc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014f00:	f04f 0100 	mov.w	r1, #0
 8014f04:	bf14      	ite	ne
 8014f06:	2340      	movne	r3, #64	@ 0x40
 8014f08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014f0c:	2000      	movs	r0, #0
 8014f0e:	6031      	str	r1, [r6, #0]
 8014f10:	602b      	str	r3, [r5, #0]
 8014f12:	b016      	add	sp, #88	@ 0x58
 8014f14:	bd70      	pop	{r4, r5, r6, pc}
 8014f16:	466a      	mov	r2, sp
 8014f18:	f000 f8f0 	bl	80150fc <_fstat_r>
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	dbec      	blt.n	8014efa <__swhatbuf_r+0x12>
 8014f20:	9901      	ldr	r1, [sp, #4]
 8014f22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014f26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014f2a:	4259      	negs	r1, r3
 8014f2c:	4159      	adcs	r1, r3
 8014f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014f32:	e7eb      	b.n	8014f0c <__swhatbuf_r+0x24>

08014f34 <__smakebuf_r>:
 8014f34:	898b      	ldrh	r3, [r1, #12]
 8014f36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014f38:	079d      	lsls	r5, r3, #30
 8014f3a:	4606      	mov	r6, r0
 8014f3c:	460c      	mov	r4, r1
 8014f3e:	d507      	bpl.n	8014f50 <__smakebuf_r+0x1c>
 8014f40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014f44:	6023      	str	r3, [r4, #0]
 8014f46:	6123      	str	r3, [r4, #16]
 8014f48:	2301      	movs	r3, #1
 8014f4a:	6163      	str	r3, [r4, #20]
 8014f4c:	b003      	add	sp, #12
 8014f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f50:	ab01      	add	r3, sp, #4
 8014f52:	466a      	mov	r2, sp
 8014f54:	f7ff ffc8 	bl	8014ee8 <__swhatbuf_r>
 8014f58:	9f00      	ldr	r7, [sp, #0]
 8014f5a:	4605      	mov	r5, r0
 8014f5c:	4639      	mov	r1, r7
 8014f5e:	4630      	mov	r0, r6
 8014f60:	f7fd fdf4 	bl	8012b4c <_malloc_r>
 8014f64:	b948      	cbnz	r0, 8014f7a <__smakebuf_r+0x46>
 8014f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f6a:	059a      	lsls	r2, r3, #22
 8014f6c:	d4ee      	bmi.n	8014f4c <__smakebuf_r+0x18>
 8014f6e:	f023 0303 	bic.w	r3, r3, #3
 8014f72:	f043 0302 	orr.w	r3, r3, #2
 8014f76:	81a3      	strh	r3, [r4, #12]
 8014f78:	e7e2      	b.n	8014f40 <__smakebuf_r+0xc>
 8014f7a:	89a3      	ldrh	r3, [r4, #12]
 8014f7c:	6020      	str	r0, [r4, #0]
 8014f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014f82:	81a3      	strh	r3, [r4, #12]
 8014f84:	9b01      	ldr	r3, [sp, #4]
 8014f86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014f8a:	b15b      	cbz	r3, 8014fa4 <__smakebuf_r+0x70>
 8014f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f90:	4630      	mov	r0, r6
 8014f92:	f000 f8c5 	bl	8015120 <_isatty_r>
 8014f96:	b128      	cbz	r0, 8014fa4 <__smakebuf_r+0x70>
 8014f98:	89a3      	ldrh	r3, [r4, #12]
 8014f9a:	f023 0303 	bic.w	r3, r3, #3
 8014f9e:	f043 0301 	orr.w	r3, r3, #1
 8014fa2:	81a3      	strh	r3, [r4, #12]
 8014fa4:	89a3      	ldrh	r3, [r4, #12]
 8014fa6:	431d      	orrs	r5, r3
 8014fa8:	81a5      	strh	r5, [r4, #12]
 8014faa:	e7cf      	b.n	8014f4c <__smakebuf_r+0x18>

08014fac <_putc_r>:
 8014fac:	b570      	push	{r4, r5, r6, lr}
 8014fae:	460d      	mov	r5, r1
 8014fb0:	4614      	mov	r4, r2
 8014fb2:	4606      	mov	r6, r0
 8014fb4:	b118      	cbz	r0, 8014fbe <_putc_r+0x12>
 8014fb6:	6a03      	ldr	r3, [r0, #32]
 8014fb8:	b90b      	cbnz	r3, 8014fbe <_putc_r+0x12>
 8014fba:	f7fc fcc9 	bl	8011950 <__sinit>
 8014fbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014fc0:	07d8      	lsls	r0, r3, #31
 8014fc2:	d405      	bmi.n	8014fd0 <_putc_r+0x24>
 8014fc4:	89a3      	ldrh	r3, [r4, #12]
 8014fc6:	0599      	lsls	r1, r3, #22
 8014fc8:	d402      	bmi.n	8014fd0 <_putc_r+0x24>
 8014fca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014fcc:	f7fc ff4d 	bl	8011e6a <__retarget_lock_acquire_recursive>
 8014fd0:	68a3      	ldr	r3, [r4, #8]
 8014fd2:	3b01      	subs	r3, #1
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	60a3      	str	r3, [r4, #8]
 8014fd8:	da05      	bge.n	8014fe6 <_putc_r+0x3a>
 8014fda:	69a2      	ldr	r2, [r4, #24]
 8014fdc:	4293      	cmp	r3, r2
 8014fde:	db12      	blt.n	8015006 <_putc_r+0x5a>
 8014fe0:	b2eb      	uxtb	r3, r5
 8014fe2:	2b0a      	cmp	r3, #10
 8014fe4:	d00f      	beq.n	8015006 <_putc_r+0x5a>
 8014fe6:	6823      	ldr	r3, [r4, #0]
 8014fe8:	1c5a      	adds	r2, r3, #1
 8014fea:	6022      	str	r2, [r4, #0]
 8014fec:	701d      	strb	r5, [r3, #0]
 8014fee:	b2ed      	uxtb	r5, r5
 8014ff0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014ff2:	07da      	lsls	r2, r3, #31
 8014ff4:	d405      	bmi.n	8015002 <_putc_r+0x56>
 8014ff6:	89a3      	ldrh	r3, [r4, #12]
 8014ff8:	059b      	lsls	r3, r3, #22
 8014ffa:	d402      	bmi.n	8015002 <_putc_r+0x56>
 8014ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014ffe:	f7fc ff35 	bl	8011e6c <__retarget_lock_release_recursive>
 8015002:	4628      	mov	r0, r5
 8015004:	bd70      	pop	{r4, r5, r6, pc}
 8015006:	4629      	mov	r1, r5
 8015008:	4622      	mov	r2, r4
 801500a:	4630      	mov	r0, r6
 801500c:	f7fc fde1 	bl	8011bd2 <__swbuf_r>
 8015010:	4605      	mov	r5, r0
 8015012:	e7ed      	b.n	8014ff0 <_putc_r+0x44>

08015014 <__sccl>:
 8015014:	b570      	push	{r4, r5, r6, lr}
 8015016:	780b      	ldrb	r3, [r1, #0]
 8015018:	4604      	mov	r4, r0
 801501a:	2b5e      	cmp	r3, #94	@ 0x5e
 801501c:	bf0b      	itete	eq
 801501e:	784b      	ldrbeq	r3, [r1, #1]
 8015020:	1c4a      	addne	r2, r1, #1
 8015022:	1c8a      	addeq	r2, r1, #2
 8015024:	2100      	movne	r1, #0
 8015026:	bf08      	it	eq
 8015028:	2101      	moveq	r1, #1
 801502a:	3801      	subs	r0, #1
 801502c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8015030:	f800 1f01 	strb.w	r1, [r0, #1]!
 8015034:	42a8      	cmp	r0, r5
 8015036:	d1fb      	bne.n	8015030 <__sccl+0x1c>
 8015038:	b90b      	cbnz	r3, 801503e <__sccl+0x2a>
 801503a:	1e50      	subs	r0, r2, #1
 801503c:	bd70      	pop	{r4, r5, r6, pc}
 801503e:	f081 0101 	eor.w	r1, r1, #1
 8015042:	54e1      	strb	r1, [r4, r3]
 8015044:	4610      	mov	r0, r2
 8015046:	4602      	mov	r2, r0
 8015048:	f812 5b01 	ldrb.w	r5, [r2], #1
 801504c:	2d2d      	cmp	r5, #45	@ 0x2d
 801504e:	d005      	beq.n	801505c <__sccl+0x48>
 8015050:	2d5d      	cmp	r5, #93	@ 0x5d
 8015052:	d016      	beq.n	8015082 <__sccl+0x6e>
 8015054:	2d00      	cmp	r5, #0
 8015056:	d0f1      	beq.n	801503c <__sccl+0x28>
 8015058:	462b      	mov	r3, r5
 801505a:	e7f2      	b.n	8015042 <__sccl+0x2e>
 801505c:	7846      	ldrb	r6, [r0, #1]
 801505e:	2e5d      	cmp	r6, #93	@ 0x5d
 8015060:	d0fa      	beq.n	8015058 <__sccl+0x44>
 8015062:	42b3      	cmp	r3, r6
 8015064:	dcf8      	bgt.n	8015058 <__sccl+0x44>
 8015066:	3002      	adds	r0, #2
 8015068:	461a      	mov	r2, r3
 801506a:	3201      	adds	r2, #1
 801506c:	4296      	cmp	r6, r2
 801506e:	54a1      	strb	r1, [r4, r2]
 8015070:	dcfb      	bgt.n	801506a <__sccl+0x56>
 8015072:	1af2      	subs	r2, r6, r3
 8015074:	3a01      	subs	r2, #1
 8015076:	1c5d      	adds	r5, r3, #1
 8015078:	42b3      	cmp	r3, r6
 801507a:	bfa8      	it	ge
 801507c:	2200      	movge	r2, #0
 801507e:	18ab      	adds	r3, r5, r2
 8015080:	e7e1      	b.n	8015046 <__sccl+0x32>
 8015082:	4610      	mov	r0, r2
 8015084:	e7da      	b.n	801503c <__sccl+0x28>

08015086 <__submore>:
 8015086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801508a:	460c      	mov	r4, r1
 801508c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801508e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015092:	4299      	cmp	r1, r3
 8015094:	d11d      	bne.n	80150d2 <__submore+0x4c>
 8015096:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801509a:	f7fd fd57 	bl	8012b4c <_malloc_r>
 801509e:	b918      	cbnz	r0, 80150a8 <__submore+0x22>
 80150a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80150a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80150ac:	63a3      	str	r3, [r4, #56]	@ 0x38
 80150ae:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80150b2:	6360      	str	r0, [r4, #52]	@ 0x34
 80150b4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80150b8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80150bc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80150c0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80150c4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80150c8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80150cc:	6020      	str	r0, [r4, #0]
 80150ce:	2000      	movs	r0, #0
 80150d0:	e7e8      	b.n	80150a4 <__submore+0x1e>
 80150d2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80150d4:	0077      	lsls	r7, r6, #1
 80150d6:	463a      	mov	r2, r7
 80150d8:	f000 fbc7 	bl	801586a <_realloc_r>
 80150dc:	4605      	mov	r5, r0
 80150de:	2800      	cmp	r0, #0
 80150e0:	d0de      	beq.n	80150a0 <__submore+0x1a>
 80150e2:	eb00 0806 	add.w	r8, r0, r6
 80150e6:	4601      	mov	r1, r0
 80150e8:	4632      	mov	r2, r6
 80150ea:	4640      	mov	r0, r8
 80150ec:	f7fc febf 	bl	8011e6e <memcpy>
 80150f0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80150f4:	f8c4 8000 	str.w	r8, [r4]
 80150f8:	e7e9      	b.n	80150ce <__submore+0x48>
	...

080150fc <_fstat_r>:
 80150fc:	b538      	push	{r3, r4, r5, lr}
 80150fe:	4d07      	ldr	r5, [pc, #28]	@ (801511c <_fstat_r+0x20>)
 8015100:	2300      	movs	r3, #0
 8015102:	4604      	mov	r4, r0
 8015104:	4608      	mov	r0, r1
 8015106:	4611      	mov	r1, r2
 8015108:	602b      	str	r3, [r5, #0]
 801510a:	f7ef f949 	bl	80043a0 <_fstat>
 801510e:	1c43      	adds	r3, r0, #1
 8015110:	d102      	bne.n	8015118 <_fstat_r+0x1c>
 8015112:	682b      	ldr	r3, [r5, #0]
 8015114:	b103      	cbz	r3, 8015118 <_fstat_r+0x1c>
 8015116:	6023      	str	r3, [r4, #0]
 8015118:	bd38      	pop	{r3, r4, r5, pc}
 801511a:	bf00      	nop
 801511c:	24000880 	.word	0x24000880

08015120 <_isatty_r>:
 8015120:	b538      	push	{r3, r4, r5, lr}
 8015122:	4d06      	ldr	r5, [pc, #24]	@ (801513c <_isatty_r+0x1c>)
 8015124:	2300      	movs	r3, #0
 8015126:	4604      	mov	r4, r0
 8015128:	4608      	mov	r0, r1
 801512a:	602b      	str	r3, [r5, #0]
 801512c:	f7ef f948 	bl	80043c0 <_isatty>
 8015130:	1c43      	adds	r3, r0, #1
 8015132:	d102      	bne.n	801513a <_isatty_r+0x1a>
 8015134:	682b      	ldr	r3, [r5, #0]
 8015136:	b103      	cbz	r3, 801513a <_isatty_r+0x1a>
 8015138:	6023      	str	r3, [r4, #0]
 801513a:	bd38      	pop	{r3, r4, r5, pc}
 801513c:	24000880 	.word	0x24000880

08015140 <_sbrk_r>:
 8015140:	b538      	push	{r3, r4, r5, lr}
 8015142:	4d06      	ldr	r5, [pc, #24]	@ (801515c <_sbrk_r+0x1c>)
 8015144:	2300      	movs	r3, #0
 8015146:	4604      	mov	r4, r0
 8015148:	4608      	mov	r0, r1
 801514a:	602b      	str	r3, [r5, #0]
 801514c:	f7ef f950 	bl	80043f0 <_sbrk>
 8015150:	1c43      	adds	r3, r0, #1
 8015152:	d102      	bne.n	801515a <_sbrk_r+0x1a>
 8015154:	682b      	ldr	r3, [r5, #0]
 8015156:	b103      	cbz	r3, 801515a <_sbrk_r+0x1a>
 8015158:	6023      	str	r3, [r4, #0]
 801515a:	bd38      	pop	{r3, r4, r5, pc}
 801515c:	24000880 	.word	0x24000880

08015160 <nan>:
 8015160:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015168 <nan+0x8>
 8015164:	4770      	bx	lr
 8015166:	bf00      	nop
 8015168:	00000000 	.word	0x00000000
 801516c:	7ff80000 	.word	0x7ff80000

08015170 <__assert_func>:
 8015170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015172:	4614      	mov	r4, r2
 8015174:	461a      	mov	r2, r3
 8015176:	4b09      	ldr	r3, [pc, #36]	@ (801519c <__assert_func+0x2c>)
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	4605      	mov	r5, r0
 801517c:	68d8      	ldr	r0, [r3, #12]
 801517e:	b14c      	cbz	r4, 8015194 <__assert_func+0x24>
 8015180:	4b07      	ldr	r3, [pc, #28]	@ (80151a0 <__assert_func+0x30>)
 8015182:	9100      	str	r1, [sp, #0]
 8015184:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015188:	4906      	ldr	r1, [pc, #24]	@ (80151a4 <__assert_func+0x34>)
 801518a:	462b      	mov	r3, r5
 801518c:	f000 fc1a 	bl	80159c4 <fiprintf>
 8015190:	f000 fc2a 	bl	80159e8 <abort>
 8015194:	4b04      	ldr	r3, [pc, #16]	@ (80151a8 <__assert_func+0x38>)
 8015196:	461c      	mov	r4, r3
 8015198:	e7f3      	b.n	8015182 <__assert_func+0x12>
 801519a:	bf00      	nop
 801519c:	24000028 	.word	0x24000028
 80151a0:	0801746b 	.word	0x0801746b
 80151a4:	08017478 	.word	0x08017478
 80151a8:	080174a6 	.word	0x080174a6

080151ac <_calloc_r>:
 80151ac:	b570      	push	{r4, r5, r6, lr}
 80151ae:	fba1 5402 	umull	r5, r4, r1, r2
 80151b2:	b934      	cbnz	r4, 80151c2 <_calloc_r+0x16>
 80151b4:	4629      	mov	r1, r5
 80151b6:	f7fd fcc9 	bl	8012b4c <_malloc_r>
 80151ba:	4606      	mov	r6, r0
 80151bc:	b928      	cbnz	r0, 80151ca <_calloc_r+0x1e>
 80151be:	4630      	mov	r0, r6
 80151c0:	bd70      	pop	{r4, r5, r6, pc}
 80151c2:	220c      	movs	r2, #12
 80151c4:	6002      	str	r2, [r0, #0]
 80151c6:	2600      	movs	r6, #0
 80151c8:	e7f9      	b.n	80151be <_calloc_r+0x12>
 80151ca:	462a      	mov	r2, r5
 80151cc:	4621      	mov	r1, r4
 80151ce:	f7fc fdaf 	bl	8011d30 <memset>
 80151d2:	e7f4      	b.n	80151be <_calloc_r+0x12>

080151d4 <rshift>:
 80151d4:	6903      	ldr	r3, [r0, #16]
 80151d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80151da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80151de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80151e2:	f100 0414 	add.w	r4, r0, #20
 80151e6:	dd45      	ble.n	8015274 <rshift+0xa0>
 80151e8:	f011 011f 	ands.w	r1, r1, #31
 80151ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80151f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80151f4:	d10c      	bne.n	8015210 <rshift+0x3c>
 80151f6:	f100 0710 	add.w	r7, r0, #16
 80151fa:	4629      	mov	r1, r5
 80151fc:	42b1      	cmp	r1, r6
 80151fe:	d334      	bcc.n	801526a <rshift+0x96>
 8015200:	1a9b      	subs	r3, r3, r2
 8015202:	009b      	lsls	r3, r3, #2
 8015204:	1eea      	subs	r2, r5, #3
 8015206:	4296      	cmp	r6, r2
 8015208:	bf38      	it	cc
 801520a:	2300      	movcc	r3, #0
 801520c:	4423      	add	r3, r4
 801520e:	e015      	b.n	801523c <rshift+0x68>
 8015210:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015214:	f1c1 0820 	rsb	r8, r1, #32
 8015218:	40cf      	lsrs	r7, r1
 801521a:	f105 0e04 	add.w	lr, r5, #4
 801521e:	46a1      	mov	r9, r4
 8015220:	4576      	cmp	r6, lr
 8015222:	46f4      	mov	ip, lr
 8015224:	d815      	bhi.n	8015252 <rshift+0x7e>
 8015226:	1a9a      	subs	r2, r3, r2
 8015228:	0092      	lsls	r2, r2, #2
 801522a:	3a04      	subs	r2, #4
 801522c:	3501      	adds	r5, #1
 801522e:	42ae      	cmp	r6, r5
 8015230:	bf38      	it	cc
 8015232:	2200      	movcc	r2, #0
 8015234:	18a3      	adds	r3, r4, r2
 8015236:	50a7      	str	r7, [r4, r2]
 8015238:	b107      	cbz	r7, 801523c <rshift+0x68>
 801523a:	3304      	adds	r3, #4
 801523c:	1b1a      	subs	r2, r3, r4
 801523e:	42a3      	cmp	r3, r4
 8015240:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015244:	bf08      	it	eq
 8015246:	2300      	moveq	r3, #0
 8015248:	6102      	str	r2, [r0, #16]
 801524a:	bf08      	it	eq
 801524c:	6143      	streq	r3, [r0, #20]
 801524e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015252:	f8dc c000 	ldr.w	ip, [ip]
 8015256:	fa0c fc08 	lsl.w	ip, ip, r8
 801525a:	ea4c 0707 	orr.w	r7, ip, r7
 801525e:	f849 7b04 	str.w	r7, [r9], #4
 8015262:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015266:	40cf      	lsrs	r7, r1
 8015268:	e7da      	b.n	8015220 <rshift+0x4c>
 801526a:	f851 cb04 	ldr.w	ip, [r1], #4
 801526e:	f847 cf04 	str.w	ip, [r7, #4]!
 8015272:	e7c3      	b.n	80151fc <rshift+0x28>
 8015274:	4623      	mov	r3, r4
 8015276:	e7e1      	b.n	801523c <rshift+0x68>

08015278 <__hexdig_fun>:
 8015278:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801527c:	2b09      	cmp	r3, #9
 801527e:	d802      	bhi.n	8015286 <__hexdig_fun+0xe>
 8015280:	3820      	subs	r0, #32
 8015282:	b2c0      	uxtb	r0, r0
 8015284:	4770      	bx	lr
 8015286:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801528a:	2b05      	cmp	r3, #5
 801528c:	d801      	bhi.n	8015292 <__hexdig_fun+0x1a>
 801528e:	3847      	subs	r0, #71	@ 0x47
 8015290:	e7f7      	b.n	8015282 <__hexdig_fun+0xa>
 8015292:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015296:	2b05      	cmp	r3, #5
 8015298:	d801      	bhi.n	801529e <__hexdig_fun+0x26>
 801529a:	3827      	subs	r0, #39	@ 0x27
 801529c:	e7f1      	b.n	8015282 <__hexdig_fun+0xa>
 801529e:	2000      	movs	r0, #0
 80152a0:	4770      	bx	lr
	...

080152a4 <__gethex>:
 80152a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152a8:	b085      	sub	sp, #20
 80152aa:	468a      	mov	sl, r1
 80152ac:	9302      	str	r3, [sp, #8]
 80152ae:	680b      	ldr	r3, [r1, #0]
 80152b0:	9001      	str	r0, [sp, #4]
 80152b2:	4690      	mov	r8, r2
 80152b4:	1c9c      	adds	r4, r3, #2
 80152b6:	46a1      	mov	r9, r4
 80152b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80152bc:	2830      	cmp	r0, #48	@ 0x30
 80152be:	d0fa      	beq.n	80152b6 <__gethex+0x12>
 80152c0:	eba9 0303 	sub.w	r3, r9, r3
 80152c4:	f1a3 0b02 	sub.w	fp, r3, #2
 80152c8:	f7ff ffd6 	bl	8015278 <__hexdig_fun>
 80152cc:	4605      	mov	r5, r0
 80152ce:	2800      	cmp	r0, #0
 80152d0:	d168      	bne.n	80153a4 <__gethex+0x100>
 80152d2:	49a0      	ldr	r1, [pc, #640]	@ (8015554 <__gethex+0x2b0>)
 80152d4:	2201      	movs	r2, #1
 80152d6:	4648      	mov	r0, r9
 80152d8:	f7fc fd3f 	bl	8011d5a <strncmp>
 80152dc:	4607      	mov	r7, r0
 80152de:	2800      	cmp	r0, #0
 80152e0:	d167      	bne.n	80153b2 <__gethex+0x10e>
 80152e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80152e6:	4626      	mov	r6, r4
 80152e8:	f7ff ffc6 	bl	8015278 <__hexdig_fun>
 80152ec:	2800      	cmp	r0, #0
 80152ee:	d062      	beq.n	80153b6 <__gethex+0x112>
 80152f0:	4623      	mov	r3, r4
 80152f2:	7818      	ldrb	r0, [r3, #0]
 80152f4:	2830      	cmp	r0, #48	@ 0x30
 80152f6:	4699      	mov	r9, r3
 80152f8:	f103 0301 	add.w	r3, r3, #1
 80152fc:	d0f9      	beq.n	80152f2 <__gethex+0x4e>
 80152fe:	f7ff ffbb 	bl	8015278 <__hexdig_fun>
 8015302:	fab0 f580 	clz	r5, r0
 8015306:	096d      	lsrs	r5, r5, #5
 8015308:	f04f 0b01 	mov.w	fp, #1
 801530c:	464a      	mov	r2, r9
 801530e:	4616      	mov	r6, r2
 8015310:	3201      	adds	r2, #1
 8015312:	7830      	ldrb	r0, [r6, #0]
 8015314:	f7ff ffb0 	bl	8015278 <__hexdig_fun>
 8015318:	2800      	cmp	r0, #0
 801531a:	d1f8      	bne.n	801530e <__gethex+0x6a>
 801531c:	498d      	ldr	r1, [pc, #564]	@ (8015554 <__gethex+0x2b0>)
 801531e:	2201      	movs	r2, #1
 8015320:	4630      	mov	r0, r6
 8015322:	f7fc fd1a 	bl	8011d5a <strncmp>
 8015326:	2800      	cmp	r0, #0
 8015328:	d13f      	bne.n	80153aa <__gethex+0x106>
 801532a:	b944      	cbnz	r4, 801533e <__gethex+0x9a>
 801532c:	1c74      	adds	r4, r6, #1
 801532e:	4622      	mov	r2, r4
 8015330:	4616      	mov	r6, r2
 8015332:	3201      	adds	r2, #1
 8015334:	7830      	ldrb	r0, [r6, #0]
 8015336:	f7ff ff9f 	bl	8015278 <__hexdig_fun>
 801533a:	2800      	cmp	r0, #0
 801533c:	d1f8      	bne.n	8015330 <__gethex+0x8c>
 801533e:	1ba4      	subs	r4, r4, r6
 8015340:	00a7      	lsls	r7, r4, #2
 8015342:	7833      	ldrb	r3, [r6, #0]
 8015344:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015348:	2b50      	cmp	r3, #80	@ 0x50
 801534a:	d13e      	bne.n	80153ca <__gethex+0x126>
 801534c:	7873      	ldrb	r3, [r6, #1]
 801534e:	2b2b      	cmp	r3, #43	@ 0x2b
 8015350:	d033      	beq.n	80153ba <__gethex+0x116>
 8015352:	2b2d      	cmp	r3, #45	@ 0x2d
 8015354:	d034      	beq.n	80153c0 <__gethex+0x11c>
 8015356:	1c71      	adds	r1, r6, #1
 8015358:	2400      	movs	r4, #0
 801535a:	7808      	ldrb	r0, [r1, #0]
 801535c:	f7ff ff8c 	bl	8015278 <__hexdig_fun>
 8015360:	1e43      	subs	r3, r0, #1
 8015362:	b2db      	uxtb	r3, r3
 8015364:	2b18      	cmp	r3, #24
 8015366:	d830      	bhi.n	80153ca <__gethex+0x126>
 8015368:	f1a0 0210 	sub.w	r2, r0, #16
 801536c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015370:	f7ff ff82 	bl	8015278 <__hexdig_fun>
 8015374:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8015378:	fa5f fc8c 	uxtb.w	ip, ip
 801537c:	f1bc 0f18 	cmp.w	ip, #24
 8015380:	f04f 030a 	mov.w	r3, #10
 8015384:	d91e      	bls.n	80153c4 <__gethex+0x120>
 8015386:	b104      	cbz	r4, 801538a <__gethex+0xe6>
 8015388:	4252      	negs	r2, r2
 801538a:	4417      	add	r7, r2
 801538c:	f8ca 1000 	str.w	r1, [sl]
 8015390:	b1ed      	cbz	r5, 80153ce <__gethex+0x12a>
 8015392:	f1bb 0f00 	cmp.w	fp, #0
 8015396:	bf0c      	ite	eq
 8015398:	2506      	moveq	r5, #6
 801539a:	2500      	movne	r5, #0
 801539c:	4628      	mov	r0, r5
 801539e:	b005      	add	sp, #20
 80153a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153a4:	2500      	movs	r5, #0
 80153a6:	462c      	mov	r4, r5
 80153a8:	e7b0      	b.n	801530c <__gethex+0x68>
 80153aa:	2c00      	cmp	r4, #0
 80153ac:	d1c7      	bne.n	801533e <__gethex+0x9a>
 80153ae:	4627      	mov	r7, r4
 80153b0:	e7c7      	b.n	8015342 <__gethex+0x9e>
 80153b2:	464e      	mov	r6, r9
 80153b4:	462f      	mov	r7, r5
 80153b6:	2501      	movs	r5, #1
 80153b8:	e7c3      	b.n	8015342 <__gethex+0x9e>
 80153ba:	2400      	movs	r4, #0
 80153bc:	1cb1      	adds	r1, r6, #2
 80153be:	e7cc      	b.n	801535a <__gethex+0xb6>
 80153c0:	2401      	movs	r4, #1
 80153c2:	e7fb      	b.n	80153bc <__gethex+0x118>
 80153c4:	fb03 0002 	mla	r0, r3, r2, r0
 80153c8:	e7ce      	b.n	8015368 <__gethex+0xc4>
 80153ca:	4631      	mov	r1, r6
 80153cc:	e7de      	b.n	801538c <__gethex+0xe8>
 80153ce:	eba6 0309 	sub.w	r3, r6, r9
 80153d2:	3b01      	subs	r3, #1
 80153d4:	4629      	mov	r1, r5
 80153d6:	2b07      	cmp	r3, #7
 80153d8:	dc0a      	bgt.n	80153f0 <__gethex+0x14c>
 80153da:	9801      	ldr	r0, [sp, #4]
 80153dc:	f7fd fc42 	bl	8012c64 <_Balloc>
 80153e0:	4604      	mov	r4, r0
 80153e2:	b940      	cbnz	r0, 80153f6 <__gethex+0x152>
 80153e4:	4b5c      	ldr	r3, [pc, #368]	@ (8015558 <__gethex+0x2b4>)
 80153e6:	4602      	mov	r2, r0
 80153e8:	21e4      	movs	r1, #228	@ 0xe4
 80153ea:	485c      	ldr	r0, [pc, #368]	@ (801555c <__gethex+0x2b8>)
 80153ec:	f7ff fec0 	bl	8015170 <__assert_func>
 80153f0:	3101      	adds	r1, #1
 80153f2:	105b      	asrs	r3, r3, #1
 80153f4:	e7ef      	b.n	80153d6 <__gethex+0x132>
 80153f6:	f100 0a14 	add.w	sl, r0, #20
 80153fa:	2300      	movs	r3, #0
 80153fc:	4655      	mov	r5, sl
 80153fe:	469b      	mov	fp, r3
 8015400:	45b1      	cmp	r9, r6
 8015402:	d337      	bcc.n	8015474 <__gethex+0x1d0>
 8015404:	f845 bb04 	str.w	fp, [r5], #4
 8015408:	eba5 050a 	sub.w	r5, r5, sl
 801540c:	10ad      	asrs	r5, r5, #2
 801540e:	6125      	str	r5, [r4, #16]
 8015410:	4658      	mov	r0, fp
 8015412:	f7fd fd19 	bl	8012e48 <__hi0bits>
 8015416:	016d      	lsls	r5, r5, #5
 8015418:	f8d8 6000 	ldr.w	r6, [r8]
 801541c:	1a2d      	subs	r5, r5, r0
 801541e:	42b5      	cmp	r5, r6
 8015420:	dd54      	ble.n	80154cc <__gethex+0x228>
 8015422:	1bad      	subs	r5, r5, r6
 8015424:	4629      	mov	r1, r5
 8015426:	4620      	mov	r0, r4
 8015428:	f7fe f8a2 	bl	8013570 <__any_on>
 801542c:	4681      	mov	r9, r0
 801542e:	b178      	cbz	r0, 8015450 <__gethex+0x1ac>
 8015430:	1e6b      	subs	r3, r5, #1
 8015432:	1159      	asrs	r1, r3, #5
 8015434:	f003 021f 	and.w	r2, r3, #31
 8015438:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801543c:	f04f 0901 	mov.w	r9, #1
 8015440:	fa09 f202 	lsl.w	r2, r9, r2
 8015444:	420a      	tst	r2, r1
 8015446:	d003      	beq.n	8015450 <__gethex+0x1ac>
 8015448:	454b      	cmp	r3, r9
 801544a:	dc36      	bgt.n	80154ba <__gethex+0x216>
 801544c:	f04f 0902 	mov.w	r9, #2
 8015450:	4629      	mov	r1, r5
 8015452:	4620      	mov	r0, r4
 8015454:	f7ff febe 	bl	80151d4 <rshift>
 8015458:	442f      	add	r7, r5
 801545a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801545e:	42bb      	cmp	r3, r7
 8015460:	da42      	bge.n	80154e8 <__gethex+0x244>
 8015462:	9801      	ldr	r0, [sp, #4]
 8015464:	4621      	mov	r1, r4
 8015466:	f7fd fc3d 	bl	8012ce4 <_Bfree>
 801546a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801546c:	2300      	movs	r3, #0
 801546e:	6013      	str	r3, [r2, #0]
 8015470:	25a3      	movs	r5, #163	@ 0xa3
 8015472:	e793      	b.n	801539c <__gethex+0xf8>
 8015474:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015478:	2a2e      	cmp	r2, #46	@ 0x2e
 801547a:	d012      	beq.n	80154a2 <__gethex+0x1fe>
 801547c:	2b20      	cmp	r3, #32
 801547e:	d104      	bne.n	801548a <__gethex+0x1e6>
 8015480:	f845 bb04 	str.w	fp, [r5], #4
 8015484:	f04f 0b00 	mov.w	fp, #0
 8015488:	465b      	mov	r3, fp
 801548a:	7830      	ldrb	r0, [r6, #0]
 801548c:	9303      	str	r3, [sp, #12]
 801548e:	f7ff fef3 	bl	8015278 <__hexdig_fun>
 8015492:	9b03      	ldr	r3, [sp, #12]
 8015494:	f000 000f 	and.w	r0, r0, #15
 8015498:	4098      	lsls	r0, r3
 801549a:	ea4b 0b00 	orr.w	fp, fp, r0
 801549e:	3304      	adds	r3, #4
 80154a0:	e7ae      	b.n	8015400 <__gethex+0x15c>
 80154a2:	45b1      	cmp	r9, r6
 80154a4:	d8ea      	bhi.n	801547c <__gethex+0x1d8>
 80154a6:	492b      	ldr	r1, [pc, #172]	@ (8015554 <__gethex+0x2b0>)
 80154a8:	9303      	str	r3, [sp, #12]
 80154aa:	2201      	movs	r2, #1
 80154ac:	4630      	mov	r0, r6
 80154ae:	f7fc fc54 	bl	8011d5a <strncmp>
 80154b2:	9b03      	ldr	r3, [sp, #12]
 80154b4:	2800      	cmp	r0, #0
 80154b6:	d1e1      	bne.n	801547c <__gethex+0x1d8>
 80154b8:	e7a2      	b.n	8015400 <__gethex+0x15c>
 80154ba:	1ea9      	subs	r1, r5, #2
 80154bc:	4620      	mov	r0, r4
 80154be:	f7fe f857 	bl	8013570 <__any_on>
 80154c2:	2800      	cmp	r0, #0
 80154c4:	d0c2      	beq.n	801544c <__gethex+0x1a8>
 80154c6:	f04f 0903 	mov.w	r9, #3
 80154ca:	e7c1      	b.n	8015450 <__gethex+0x1ac>
 80154cc:	da09      	bge.n	80154e2 <__gethex+0x23e>
 80154ce:	1b75      	subs	r5, r6, r5
 80154d0:	4621      	mov	r1, r4
 80154d2:	9801      	ldr	r0, [sp, #4]
 80154d4:	462a      	mov	r2, r5
 80154d6:	f7fd fe15 	bl	8013104 <__lshift>
 80154da:	1b7f      	subs	r7, r7, r5
 80154dc:	4604      	mov	r4, r0
 80154de:	f100 0a14 	add.w	sl, r0, #20
 80154e2:	f04f 0900 	mov.w	r9, #0
 80154e6:	e7b8      	b.n	801545a <__gethex+0x1b6>
 80154e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80154ec:	42bd      	cmp	r5, r7
 80154ee:	dd6f      	ble.n	80155d0 <__gethex+0x32c>
 80154f0:	1bed      	subs	r5, r5, r7
 80154f2:	42ae      	cmp	r6, r5
 80154f4:	dc34      	bgt.n	8015560 <__gethex+0x2bc>
 80154f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80154fa:	2b02      	cmp	r3, #2
 80154fc:	d022      	beq.n	8015544 <__gethex+0x2a0>
 80154fe:	2b03      	cmp	r3, #3
 8015500:	d024      	beq.n	801554c <__gethex+0x2a8>
 8015502:	2b01      	cmp	r3, #1
 8015504:	d115      	bne.n	8015532 <__gethex+0x28e>
 8015506:	42ae      	cmp	r6, r5
 8015508:	d113      	bne.n	8015532 <__gethex+0x28e>
 801550a:	2e01      	cmp	r6, #1
 801550c:	d10b      	bne.n	8015526 <__gethex+0x282>
 801550e:	9a02      	ldr	r2, [sp, #8]
 8015510:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015514:	6013      	str	r3, [r2, #0]
 8015516:	2301      	movs	r3, #1
 8015518:	6123      	str	r3, [r4, #16]
 801551a:	f8ca 3000 	str.w	r3, [sl]
 801551e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015520:	2562      	movs	r5, #98	@ 0x62
 8015522:	601c      	str	r4, [r3, #0]
 8015524:	e73a      	b.n	801539c <__gethex+0xf8>
 8015526:	1e71      	subs	r1, r6, #1
 8015528:	4620      	mov	r0, r4
 801552a:	f7fe f821 	bl	8013570 <__any_on>
 801552e:	2800      	cmp	r0, #0
 8015530:	d1ed      	bne.n	801550e <__gethex+0x26a>
 8015532:	9801      	ldr	r0, [sp, #4]
 8015534:	4621      	mov	r1, r4
 8015536:	f7fd fbd5 	bl	8012ce4 <_Bfree>
 801553a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801553c:	2300      	movs	r3, #0
 801553e:	6013      	str	r3, [r2, #0]
 8015540:	2550      	movs	r5, #80	@ 0x50
 8015542:	e72b      	b.n	801539c <__gethex+0xf8>
 8015544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015546:	2b00      	cmp	r3, #0
 8015548:	d1f3      	bne.n	8015532 <__gethex+0x28e>
 801554a:	e7e0      	b.n	801550e <__gethex+0x26a>
 801554c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801554e:	2b00      	cmp	r3, #0
 8015550:	d1dd      	bne.n	801550e <__gethex+0x26a>
 8015552:	e7ee      	b.n	8015532 <__gethex+0x28e>
 8015554:	08017435 	.word	0x08017435
 8015558:	080173cb 	.word	0x080173cb
 801555c:	080174a7 	.word	0x080174a7
 8015560:	1e6f      	subs	r7, r5, #1
 8015562:	f1b9 0f00 	cmp.w	r9, #0
 8015566:	d130      	bne.n	80155ca <__gethex+0x326>
 8015568:	b127      	cbz	r7, 8015574 <__gethex+0x2d0>
 801556a:	4639      	mov	r1, r7
 801556c:	4620      	mov	r0, r4
 801556e:	f7fd ffff 	bl	8013570 <__any_on>
 8015572:	4681      	mov	r9, r0
 8015574:	117a      	asrs	r2, r7, #5
 8015576:	2301      	movs	r3, #1
 8015578:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801557c:	f007 071f 	and.w	r7, r7, #31
 8015580:	40bb      	lsls	r3, r7
 8015582:	4213      	tst	r3, r2
 8015584:	4629      	mov	r1, r5
 8015586:	4620      	mov	r0, r4
 8015588:	bf18      	it	ne
 801558a:	f049 0902 	orrne.w	r9, r9, #2
 801558e:	f7ff fe21 	bl	80151d4 <rshift>
 8015592:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015596:	1b76      	subs	r6, r6, r5
 8015598:	2502      	movs	r5, #2
 801559a:	f1b9 0f00 	cmp.w	r9, #0
 801559e:	d047      	beq.n	8015630 <__gethex+0x38c>
 80155a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80155a4:	2b02      	cmp	r3, #2
 80155a6:	d015      	beq.n	80155d4 <__gethex+0x330>
 80155a8:	2b03      	cmp	r3, #3
 80155aa:	d017      	beq.n	80155dc <__gethex+0x338>
 80155ac:	2b01      	cmp	r3, #1
 80155ae:	d109      	bne.n	80155c4 <__gethex+0x320>
 80155b0:	f019 0f02 	tst.w	r9, #2
 80155b4:	d006      	beq.n	80155c4 <__gethex+0x320>
 80155b6:	f8da 3000 	ldr.w	r3, [sl]
 80155ba:	ea49 0903 	orr.w	r9, r9, r3
 80155be:	f019 0f01 	tst.w	r9, #1
 80155c2:	d10e      	bne.n	80155e2 <__gethex+0x33e>
 80155c4:	f045 0510 	orr.w	r5, r5, #16
 80155c8:	e032      	b.n	8015630 <__gethex+0x38c>
 80155ca:	f04f 0901 	mov.w	r9, #1
 80155ce:	e7d1      	b.n	8015574 <__gethex+0x2d0>
 80155d0:	2501      	movs	r5, #1
 80155d2:	e7e2      	b.n	801559a <__gethex+0x2f6>
 80155d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155d6:	f1c3 0301 	rsb	r3, r3, #1
 80155da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80155dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d0f0      	beq.n	80155c4 <__gethex+0x320>
 80155e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80155e6:	f104 0314 	add.w	r3, r4, #20
 80155ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80155ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80155f2:	f04f 0c00 	mov.w	ip, #0
 80155f6:	4618      	mov	r0, r3
 80155f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80155fc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8015600:	d01b      	beq.n	801563a <__gethex+0x396>
 8015602:	3201      	adds	r2, #1
 8015604:	6002      	str	r2, [r0, #0]
 8015606:	2d02      	cmp	r5, #2
 8015608:	f104 0314 	add.w	r3, r4, #20
 801560c:	d13c      	bne.n	8015688 <__gethex+0x3e4>
 801560e:	f8d8 2000 	ldr.w	r2, [r8]
 8015612:	3a01      	subs	r2, #1
 8015614:	42b2      	cmp	r2, r6
 8015616:	d109      	bne.n	801562c <__gethex+0x388>
 8015618:	1171      	asrs	r1, r6, #5
 801561a:	2201      	movs	r2, #1
 801561c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015620:	f006 061f 	and.w	r6, r6, #31
 8015624:	fa02 f606 	lsl.w	r6, r2, r6
 8015628:	421e      	tst	r6, r3
 801562a:	d13a      	bne.n	80156a2 <__gethex+0x3fe>
 801562c:	f045 0520 	orr.w	r5, r5, #32
 8015630:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015632:	601c      	str	r4, [r3, #0]
 8015634:	9b02      	ldr	r3, [sp, #8]
 8015636:	601f      	str	r7, [r3, #0]
 8015638:	e6b0      	b.n	801539c <__gethex+0xf8>
 801563a:	4299      	cmp	r1, r3
 801563c:	f843 cc04 	str.w	ip, [r3, #-4]
 8015640:	d8d9      	bhi.n	80155f6 <__gethex+0x352>
 8015642:	68a3      	ldr	r3, [r4, #8]
 8015644:	459b      	cmp	fp, r3
 8015646:	db17      	blt.n	8015678 <__gethex+0x3d4>
 8015648:	6861      	ldr	r1, [r4, #4]
 801564a:	9801      	ldr	r0, [sp, #4]
 801564c:	3101      	adds	r1, #1
 801564e:	f7fd fb09 	bl	8012c64 <_Balloc>
 8015652:	4681      	mov	r9, r0
 8015654:	b918      	cbnz	r0, 801565e <__gethex+0x3ba>
 8015656:	4b1a      	ldr	r3, [pc, #104]	@ (80156c0 <__gethex+0x41c>)
 8015658:	4602      	mov	r2, r0
 801565a:	2184      	movs	r1, #132	@ 0x84
 801565c:	e6c5      	b.n	80153ea <__gethex+0x146>
 801565e:	6922      	ldr	r2, [r4, #16]
 8015660:	3202      	adds	r2, #2
 8015662:	f104 010c 	add.w	r1, r4, #12
 8015666:	0092      	lsls	r2, r2, #2
 8015668:	300c      	adds	r0, #12
 801566a:	f7fc fc00 	bl	8011e6e <memcpy>
 801566e:	4621      	mov	r1, r4
 8015670:	9801      	ldr	r0, [sp, #4]
 8015672:	f7fd fb37 	bl	8012ce4 <_Bfree>
 8015676:	464c      	mov	r4, r9
 8015678:	6923      	ldr	r3, [r4, #16]
 801567a:	1c5a      	adds	r2, r3, #1
 801567c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015680:	6122      	str	r2, [r4, #16]
 8015682:	2201      	movs	r2, #1
 8015684:	615a      	str	r2, [r3, #20]
 8015686:	e7be      	b.n	8015606 <__gethex+0x362>
 8015688:	6922      	ldr	r2, [r4, #16]
 801568a:	455a      	cmp	r2, fp
 801568c:	dd0b      	ble.n	80156a6 <__gethex+0x402>
 801568e:	2101      	movs	r1, #1
 8015690:	4620      	mov	r0, r4
 8015692:	f7ff fd9f 	bl	80151d4 <rshift>
 8015696:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801569a:	3701      	adds	r7, #1
 801569c:	42bb      	cmp	r3, r7
 801569e:	f6ff aee0 	blt.w	8015462 <__gethex+0x1be>
 80156a2:	2501      	movs	r5, #1
 80156a4:	e7c2      	b.n	801562c <__gethex+0x388>
 80156a6:	f016 061f 	ands.w	r6, r6, #31
 80156aa:	d0fa      	beq.n	80156a2 <__gethex+0x3fe>
 80156ac:	4453      	add	r3, sl
 80156ae:	f1c6 0620 	rsb	r6, r6, #32
 80156b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80156b6:	f7fd fbc7 	bl	8012e48 <__hi0bits>
 80156ba:	42b0      	cmp	r0, r6
 80156bc:	dbe7      	blt.n	801568e <__gethex+0x3ea>
 80156be:	e7f0      	b.n	80156a2 <__gethex+0x3fe>
 80156c0:	080173cb 	.word	0x080173cb

080156c4 <L_shift>:
 80156c4:	f1c2 0208 	rsb	r2, r2, #8
 80156c8:	0092      	lsls	r2, r2, #2
 80156ca:	b570      	push	{r4, r5, r6, lr}
 80156cc:	f1c2 0620 	rsb	r6, r2, #32
 80156d0:	6843      	ldr	r3, [r0, #4]
 80156d2:	6804      	ldr	r4, [r0, #0]
 80156d4:	fa03 f506 	lsl.w	r5, r3, r6
 80156d8:	432c      	orrs	r4, r5
 80156da:	40d3      	lsrs	r3, r2
 80156dc:	6004      	str	r4, [r0, #0]
 80156de:	f840 3f04 	str.w	r3, [r0, #4]!
 80156e2:	4288      	cmp	r0, r1
 80156e4:	d3f4      	bcc.n	80156d0 <L_shift+0xc>
 80156e6:	bd70      	pop	{r4, r5, r6, pc}

080156e8 <__match>:
 80156e8:	b530      	push	{r4, r5, lr}
 80156ea:	6803      	ldr	r3, [r0, #0]
 80156ec:	3301      	adds	r3, #1
 80156ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156f2:	b914      	cbnz	r4, 80156fa <__match+0x12>
 80156f4:	6003      	str	r3, [r0, #0]
 80156f6:	2001      	movs	r0, #1
 80156f8:	bd30      	pop	{r4, r5, pc}
 80156fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015702:	2d19      	cmp	r5, #25
 8015704:	bf98      	it	ls
 8015706:	3220      	addls	r2, #32
 8015708:	42a2      	cmp	r2, r4
 801570a:	d0f0      	beq.n	80156ee <__match+0x6>
 801570c:	2000      	movs	r0, #0
 801570e:	e7f3      	b.n	80156f8 <__match+0x10>

08015710 <__hexnan>:
 8015710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015714:	680b      	ldr	r3, [r1, #0]
 8015716:	6801      	ldr	r1, [r0, #0]
 8015718:	115e      	asrs	r6, r3, #5
 801571a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801571e:	f013 031f 	ands.w	r3, r3, #31
 8015722:	b087      	sub	sp, #28
 8015724:	bf18      	it	ne
 8015726:	3604      	addne	r6, #4
 8015728:	2500      	movs	r5, #0
 801572a:	1f37      	subs	r7, r6, #4
 801572c:	4682      	mov	sl, r0
 801572e:	4690      	mov	r8, r2
 8015730:	9301      	str	r3, [sp, #4]
 8015732:	f846 5c04 	str.w	r5, [r6, #-4]
 8015736:	46b9      	mov	r9, r7
 8015738:	463c      	mov	r4, r7
 801573a:	9502      	str	r5, [sp, #8]
 801573c:	46ab      	mov	fp, r5
 801573e:	784a      	ldrb	r2, [r1, #1]
 8015740:	1c4b      	adds	r3, r1, #1
 8015742:	9303      	str	r3, [sp, #12]
 8015744:	b342      	cbz	r2, 8015798 <__hexnan+0x88>
 8015746:	4610      	mov	r0, r2
 8015748:	9105      	str	r1, [sp, #20]
 801574a:	9204      	str	r2, [sp, #16]
 801574c:	f7ff fd94 	bl	8015278 <__hexdig_fun>
 8015750:	2800      	cmp	r0, #0
 8015752:	d151      	bne.n	80157f8 <__hexnan+0xe8>
 8015754:	9a04      	ldr	r2, [sp, #16]
 8015756:	9905      	ldr	r1, [sp, #20]
 8015758:	2a20      	cmp	r2, #32
 801575a:	d818      	bhi.n	801578e <__hexnan+0x7e>
 801575c:	9b02      	ldr	r3, [sp, #8]
 801575e:	459b      	cmp	fp, r3
 8015760:	dd13      	ble.n	801578a <__hexnan+0x7a>
 8015762:	454c      	cmp	r4, r9
 8015764:	d206      	bcs.n	8015774 <__hexnan+0x64>
 8015766:	2d07      	cmp	r5, #7
 8015768:	dc04      	bgt.n	8015774 <__hexnan+0x64>
 801576a:	462a      	mov	r2, r5
 801576c:	4649      	mov	r1, r9
 801576e:	4620      	mov	r0, r4
 8015770:	f7ff ffa8 	bl	80156c4 <L_shift>
 8015774:	4544      	cmp	r4, r8
 8015776:	d952      	bls.n	801581e <__hexnan+0x10e>
 8015778:	2300      	movs	r3, #0
 801577a:	f1a4 0904 	sub.w	r9, r4, #4
 801577e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015782:	f8cd b008 	str.w	fp, [sp, #8]
 8015786:	464c      	mov	r4, r9
 8015788:	461d      	mov	r5, r3
 801578a:	9903      	ldr	r1, [sp, #12]
 801578c:	e7d7      	b.n	801573e <__hexnan+0x2e>
 801578e:	2a29      	cmp	r2, #41	@ 0x29
 8015790:	d157      	bne.n	8015842 <__hexnan+0x132>
 8015792:	3102      	adds	r1, #2
 8015794:	f8ca 1000 	str.w	r1, [sl]
 8015798:	f1bb 0f00 	cmp.w	fp, #0
 801579c:	d051      	beq.n	8015842 <__hexnan+0x132>
 801579e:	454c      	cmp	r4, r9
 80157a0:	d206      	bcs.n	80157b0 <__hexnan+0xa0>
 80157a2:	2d07      	cmp	r5, #7
 80157a4:	dc04      	bgt.n	80157b0 <__hexnan+0xa0>
 80157a6:	462a      	mov	r2, r5
 80157a8:	4649      	mov	r1, r9
 80157aa:	4620      	mov	r0, r4
 80157ac:	f7ff ff8a 	bl	80156c4 <L_shift>
 80157b0:	4544      	cmp	r4, r8
 80157b2:	d936      	bls.n	8015822 <__hexnan+0x112>
 80157b4:	f1a8 0204 	sub.w	r2, r8, #4
 80157b8:	4623      	mov	r3, r4
 80157ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80157be:	f842 1f04 	str.w	r1, [r2, #4]!
 80157c2:	429f      	cmp	r7, r3
 80157c4:	d2f9      	bcs.n	80157ba <__hexnan+0xaa>
 80157c6:	1b3b      	subs	r3, r7, r4
 80157c8:	f023 0303 	bic.w	r3, r3, #3
 80157cc:	3304      	adds	r3, #4
 80157ce:	3401      	adds	r4, #1
 80157d0:	3e03      	subs	r6, #3
 80157d2:	42b4      	cmp	r4, r6
 80157d4:	bf88      	it	hi
 80157d6:	2304      	movhi	r3, #4
 80157d8:	4443      	add	r3, r8
 80157da:	2200      	movs	r2, #0
 80157dc:	f843 2b04 	str.w	r2, [r3], #4
 80157e0:	429f      	cmp	r7, r3
 80157e2:	d2fb      	bcs.n	80157dc <__hexnan+0xcc>
 80157e4:	683b      	ldr	r3, [r7, #0]
 80157e6:	b91b      	cbnz	r3, 80157f0 <__hexnan+0xe0>
 80157e8:	4547      	cmp	r7, r8
 80157ea:	d128      	bne.n	801583e <__hexnan+0x12e>
 80157ec:	2301      	movs	r3, #1
 80157ee:	603b      	str	r3, [r7, #0]
 80157f0:	2005      	movs	r0, #5
 80157f2:	b007      	add	sp, #28
 80157f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157f8:	3501      	adds	r5, #1
 80157fa:	2d08      	cmp	r5, #8
 80157fc:	f10b 0b01 	add.w	fp, fp, #1
 8015800:	dd06      	ble.n	8015810 <__hexnan+0x100>
 8015802:	4544      	cmp	r4, r8
 8015804:	d9c1      	bls.n	801578a <__hexnan+0x7a>
 8015806:	2300      	movs	r3, #0
 8015808:	f844 3c04 	str.w	r3, [r4, #-4]
 801580c:	2501      	movs	r5, #1
 801580e:	3c04      	subs	r4, #4
 8015810:	6822      	ldr	r2, [r4, #0]
 8015812:	f000 000f 	and.w	r0, r0, #15
 8015816:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801581a:	6020      	str	r0, [r4, #0]
 801581c:	e7b5      	b.n	801578a <__hexnan+0x7a>
 801581e:	2508      	movs	r5, #8
 8015820:	e7b3      	b.n	801578a <__hexnan+0x7a>
 8015822:	9b01      	ldr	r3, [sp, #4]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d0dd      	beq.n	80157e4 <__hexnan+0xd4>
 8015828:	f1c3 0320 	rsb	r3, r3, #32
 801582c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015830:	40da      	lsrs	r2, r3
 8015832:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015836:	4013      	ands	r3, r2
 8015838:	f846 3c04 	str.w	r3, [r6, #-4]
 801583c:	e7d2      	b.n	80157e4 <__hexnan+0xd4>
 801583e:	3f04      	subs	r7, #4
 8015840:	e7d0      	b.n	80157e4 <__hexnan+0xd4>
 8015842:	2004      	movs	r0, #4
 8015844:	e7d5      	b.n	80157f2 <__hexnan+0xe2>

08015846 <__ascii_mbtowc>:
 8015846:	b082      	sub	sp, #8
 8015848:	b901      	cbnz	r1, 801584c <__ascii_mbtowc+0x6>
 801584a:	a901      	add	r1, sp, #4
 801584c:	b142      	cbz	r2, 8015860 <__ascii_mbtowc+0x1a>
 801584e:	b14b      	cbz	r3, 8015864 <__ascii_mbtowc+0x1e>
 8015850:	7813      	ldrb	r3, [r2, #0]
 8015852:	600b      	str	r3, [r1, #0]
 8015854:	7812      	ldrb	r2, [r2, #0]
 8015856:	1e10      	subs	r0, r2, #0
 8015858:	bf18      	it	ne
 801585a:	2001      	movne	r0, #1
 801585c:	b002      	add	sp, #8
 801585e:	4770      	bx	lr
 8015860:	4610      	mov	r0, r2
 8015862:	e7fb      	b.n	801585c <__ascii_mbtowc+0x16>
 8015864:	f06f 0001 	mvn.w	r0, #1
 8015868:	e7f8      	b.n	801585c <__ascii_mbtowc+0x16>

0801586a <_realloc_r>:
 801586a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801586e:	4607      	mov	r7, r0
 8015870:	4614      	mov	r4, r2
 8015872:	460d      	mov	r5, r1
 8015874:	b921      	cbnz	r1, 8015880 <_realloc_r+0x16>
 8015876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801587a:	4611      	mov	r1, r2
 801587c:	f7fd b966 	b.w	8012b4c <_malloc_r>
 8015880:	b92a      	cbnz	r2, 801588e <_realloc_r+0x24>
 8015882:	f7fd f8ef 	bl	8012a64 <_free_r>
 8015886:	4625      	mov	r5, r4
 8015888:	4628      	mov	r0, r5
 801588a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801588e:	f000 f8b2 	bl	80159f6 <_malloc_usable_size_r>
 8015892:	4284      	cmp	r4, r0
 8015894:	4606      	mov	r6, r0
 8015896:	d802      	bhi.n	801589e <_realloc_r+0x34>
 8015898:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801589c:	d8f4      	bhi.n	8015888 <_realloc_r+0x1e>
 801589e:	4621      	mov	r1, r4
 80158a0:	4638      	mov	r0, r7
 80158a2:	f7fd f953 	bl	8012b4c <_malloc_r>
 80158a6:	4680      	mov	r8, r0
 80158a8:	b908      	cbnz	r0, 80158ae <_realloc_r+0x44>
 80158aa:	4645      	mov	r5, r8
 80158ac:	e7ec      	b.n	8015888 <_realloc_r+0x1e>
 80158ae:	42b4      	cmp	r4, r6
 80158b0:	4622      	mov	r2, r4
 80158b2:	4629      	mov	r1, r5
 80158b4:	bf28      	it	cs
 80158b6:	4632      	movcs	r2, r6
 80158b8:	f7fc fad9 	bl	8011e6e <memcpy>
 80158bc:	4629      	mov	r1, r5
 80158be:	4638      	mov	r0, r7
 80158c0:	f7fd f8d0 	bl	8012a64 <_free_r>
 80158c4:	e7f1      	b.n	80158aa <_realloc_r+0x40>
	...

080158c8 <_strtoul_l.isra.0>:
 80158c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158cc:	4e34      	ldr	r6, [pc, #208]	@ (80159a0 <_strtoul_l.isra.0+0xd8>)
 80158ce:	4686      	mov	lr, r0
 80158d0:	460d      	mov	r5, r1
 80158d2:	4628      	mov	r0, r5
 80158d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80158d8:	5d37      	ldrb	r7, [r6, r4]
 80158da:	f017 0708 	ands.w	r7, r7, #8
 80158de:	d1f8      	bne.n	80158d2 <_strtoul_l.isra.0+0xa>
 80158e0:	2c2d      	cmp	r4, #45	@ 0x2d
 80158e2:	d110      	bne.n	8015906 <_strtoul_l.isra.0+0x3e>
 80158e4:	782c      	ldrb	r4, [r5, #0]
 80158e6:	2701      	movs	r7, #1
 80158e8:	1c85      	adds	r5, r0, #2
 80158ea:	f033 0010 	bics.w	r0, r3, #16
 80158ee:	d115      	bne.n	801591c <_strtoul_l.isra.0+0x54>
 80158f0:	2c30      	cmp	r4, #48	@ 0x30
 80158f2:	d10d      	bne.n	8015910 <_strtoul_l.isra.0+0x48>
 80158f4:	7828      	ldrb	r0, [r5, #0]
 80158f6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80158fa:	2858      	cmp	r0, #88	@ 0x58
 80158fc:	d108      	bne.n	8015910 <_strtoul_l.isra.0+0x48>
 80158fe:	786c      	ldrb	r4, [r5, #1]
 8015900:	3502      	adds	r5, #2
 8015902:	2310      	movs	r3, #16
 8015904:	e00a      	b.n	801591c <_strtoul_l.isra.0+0x54>
 8015906:	2c2b      	cmp	r4, #43	@ 0x2b
 8015908:	bf04      	itt	eq
 801590a:	782c      	ldrbeq	r4, [r5, #0]
 801590c:	1c85      	addeq	r5, r0, #2
 801590e:	e7ec      	b.n	80158ea <_strtoul_l.isra.0+0x22>
 8015910:	2b00      	cmp	r3, #0
 8015912:	d1f6      	bne.n	8015902 <_strtoul_l.isra.0+0x3a>
 8015914:	2c30      	cmp	r4, #48	@ 0x30
 8015916:	bf14      	ite	ne
 8015918:	230a      	movne	r3, #10
 801591a:	2308      	moveq	r3, #8
 801591c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015920:	2600      	movs	r6, #0
 8015922:	fbb8 f8f3 	udiv	r8, r8, r3
 8015926:	fb03 f908 	mul.w	r9, r3, r8
 801592a:	ea6f 0909 	mvn.w	r9, r9
 801592e:	4630      	mov	r0, r6
 8015930:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8015934:	f1bc 0f09 	cmp.w	ip, #9
 8015938:	d810      	bhi.n	801595c <_strtoul_l.isra.0+0x94>
 801593a:	4664      	mov	r4, ip
 801593c:	42a3      	cmp	r3, r4
 801593e:	dd1e      	ble.n	801597e <_strtoul_l.isra.0+0xb6>
 8015940:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8015944:	d007      	beq.n	8015956 <_strtoul_l.isra.0+0x8e>
 8015946:	4580      	cmp	r8, r0
 8015948:	d316      	bcc.n	8015978 <_strtoul_l.isra.0+0xb0>
 801594a:	d101      	bne.n	8015950 <_strtoul_l.isra.0+0x88>
 801594c:	45a1      	cmp	r9, r4
 801594e:	db13      	blt.n	8015978 <_strtoul_l.isra.0+0xb0>
 8015950:	fb00 4003 	mla	r0, r0, r3, r4
 8015954:	2601      	movs	r6, #1
 8015956:	f815 4b01 	ldrb.w	r4, [r5], #1
 801595a:	e7e9      	b.n	8015930 <_strtoul_l.isra.0+0x68>
 801595c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015960:	f1bc 0f19 	cmp.w	ip, #25
 8015964:	d801      	bhi.n	801596a <_strtoul_l.isra.0+0xa2>
 8015966:	3c37      	subs	r4, #55	@ 0x37
 8015968:	e7e8      	b.n	801593c <_strtoul_l.isra.0+0x74>
 801596a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801596e:	f1bc 0f19 	cmp.w	ip, #25
 8015972:	d804      	bhi.n	801597e <_strtoul_l.isra.0+0xb6>
 8015974:	3c57      	subs	r4, #87	@ 0x57
 8015976:	e7e1      	b.n	801593c <_strtoul_l.isra.0+0x74>
 8015978:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801597c:	e7eb      	b.n	8015956 <_strtoul_l.isra.0+0x8e>
 801597e:	1c73      	adds	r3, r6, #1
 8015980:	d106      	bne.n	8015990 <_strtoul_l.isra.0+0xc8>
 8015982:	2322      	movs	r3, #34	@ 0x22
 8015984:	f8ce 3000 	str.w	r3, [lr]
 8015988:	4630      	mov	r0, r6
 801598a:	b932      	cbnz	r2, 801599a <_strtoul_l.isra.0+0xd2>
 801598c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015990:	b107      	cbz	r7, 8015994 <_strtoul_l.isra.0+0xcc>
 8015992:	4240      	negs	r0, r0
 8015994:	2a00      	cmp	r2, #0
 8015996:	d0f9      	beq.n	801598c <_strtoul_l.isra.0+0xc4>
 8015998:	b106      	cbz	r6, 801599c <_strtoul_l.isra.0+0xd4>
 801599a:	1e69      	subs	r1, r5, #1
 801599c:	6011      	str	r1, [r2, #0]
 801599e:	e7f5      	b.n	801598c <_strtoul_l.isra.0+0xc4>
 80159a0:	08017659 	.word	0x08017659

080159a4 <_strtoul_r>:
 80159a4:	f7ff bf90 	b.w	80158c8 <_strtoul_l.isra.0>

080159a8 <__ascii_wctomb>:
 80159a8:	4603      	mov	r3, r0
 80159aa:	4608      	mov	r0, r1
 80159ac:	b141      	cbz	r1, 80159c0 <__ascii_wctomb+0x18>
 80159ae:	2aff      	cmp	r2, #255	@ 0xff
 80159b0:	d904      	bls.n	80159bc <__ascii_wctomb+0x14>
 80159b2:	228a      	movs	r2, #138	@ 0x8a
 80159b4:	601a      	str	r2, [r3, #0]
 80159b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80159ba:	4770      	bx	lr
 80159bc:	700a      	strb	r2, [r1, #0]
 80159be:	2001      	movs	r0, #1
 80159c0:	4770      	bx	lr
	...

080159c4 <fiprintf>:
 80159c4:	b40e      	push	{r1, r2, r3}
 80159c6:	b503      	push	{r0, r1, lr}
 80159c8:	4601      	mov	r1, r0
 80159ca:	ab03      	add	r3, sp, #12
 80159cc:	4805      	ldr	r0, [pc, #20]	@ (80159e4 <fiprintf+0x20>)
 80159ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80159d2:	6800      	ldr	r0, [r0, #0]
 80159d4:	9301      	str	r3, [sp, #4]
 80159d6:	f7fe ff75 	bl	80148c4 <_vfiprintf_r>
 80159da:	b002      	add	sp, #8
 80159dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80159e0:	b003      	add	sp, #12
 80159e2:	4770      	bx	lr
 80159e4:	24000028 	.word	0x24000028

080159e8 <abort>:
 80159e8:	b508      	push	{r3, lr}
 80159ea:	2006      	movs	r0, #6
 80159ec:	f000 f834 	bl	8015a58 <raise>
 80159f0:	2001      	movs	r0, #1
 80159f2:	f7ee fca1 	bl	8004338 <_exit>

080159f6 <_malloc_usable_size_r>:
 80159f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80159fa:	1f18      	subs	r0, r3, #4
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	bfbc      	itt	lt
 8015a00:	580b      	ldrlt	r3, [r1, r0]
 8015a02:	18c0      	addlt	r0, r0, r3
 8015a04:	4770      	bx	lr

08015a06 <_raise_r>:
 8015a06:	291f      	cmp	r1, #31
 8015a08:	b538      	push	{r3, r4, r5, lr}
 8015a0a:	4605      	mov	r5, r0
 8015a0c:	460c      	mov	r4, r1
 8015a0e:	d904      	bls.n	8015a1a <_raise_r+0x14>
 8015a10:	2316      	movs	r3, #22
 8015a12:	6003      	str	r3, [r0, #0]
 8015a14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015a18:	bd38      	pop	{r3, r4, r5, pc}
 8015a1a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015a1c:	b112      	cbz	r2, 8015a24 <_raise_r+0x1e>
 8015a1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015a22:	b94b      	cbnz	r3, 8015a38 <_raise_r+0x32>
 8015a24:	4628      	mov	r0, r5
 8015a26:	f000 f831 	bl	8015a8c <_getpid_r>
 8015a2a:	4622      	mov	r2, r4
 8015a2c:	4601      	mov	r1, r0
 8015a2e:	4628      	mov	r0, r5
 8015a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a34:	f000 b818 	b.w	8015a68 <_kill_r>
 8015a38:	2b01      	cmp	r3, #1
 8015a3a:	d00a      	beq.n	8015a52 <_raise_r+0x4c>
 8015a3c:	1c59      	adds	r1, r3, #1
 8015a3e:	d103      	bne.n	8015a48 <_raise_r+0x42>
 8015a40:	2316      	movs	r3, #22
 8015a42:	6003      	str	r3, [r0, #0]
 8015a44:	2001      	movs	r0, #1
 8015a46:	e7e7      	b.n	8015a18 <_raise_r+0x12>
 8015a48:	2100      	movs	r1, #0
 8015a4a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015a4e:	4620      	mov	r0, r4
 8015a50:	4798      	blx	r3
 8015a52:	2000      	movs	r0, #0
 8015a54:	e7e0      	b.n	8015a18 <_raise_r+0x12>
	...

08015a58 <raise>:
 8015a58:	4b02      	ldr	r3, [pc, #8]	@ (8015a64 <raise+0xc>)
 8015a5a:	4601      	mov	r1, r0
 8015a5c:	6818      	ldr	r0, [r3, #0]
 8015a5e:	f7ff bfd2 	b.w	8015a06 <_raise_r>
 8015a62:	bf00      	nop
 8015a64:	24000028 	.word	0x24000028

08015a68 <_kill_r>:
 8015a68:	b538      	push	{r3, r4, r5, lr}
 8015a6a:	4d07      	ldr	r5, [pc, #28]	@ (8015a88 <_kill_r+0x20>)
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	4604      	mov	r4, r0
 8015a70:	4608      	mov	r0, r1
 8015a72:	4611      	mov	r1, r2
 8015a74:	602b      	str	r3, [r5, #0]
 8015a76:	f7ee fc4f 	bl	8004318 <_kill>
 8015a7a:	1c43      	adds	r3, r0, #1
 8015a7c:	d102      	bne.n	8015a84 <_kill_r+0x1c>
 8015a7e:	682b      	ldr	r3, [r5, #0]
 8015a80:	b103      	cbz	r3, 8015a84 <_kill_r+0x1c>
 8015a82:	6023      	str	r3, [r4, #0]
 8015a84:	bd38      	pop	{r3, r4, r5, pc}
 8015a86:	bf00      	nop
 8015a88:	24000880 	.word	0x24000880

08015a8c <_getpid_r>:
 8015a8c:	f7ee bc3c 	b.w	8004308 <_getpid>

08015a90 <_init>:
 8015a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a92:	bf00      	nop
 8015a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a96:	bc08      	pop	{r3}
 8015a98:	469e      	mov	lr, r3
 8015a9a:	4770      	bx	lr

08015a9c <_fini>:
 8015a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a9e:	bf00      	nop
 8015aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015aa2:	bc08      	pop	{r3}
 8015aa4:	469e      	mov	lr, r3
 8015aa6:	4770      	bx	lr
